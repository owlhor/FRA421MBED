
F411_MultiSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  08009d38  08009d38  00019d38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2fc  0800a2fc  00020420  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2fc  0800a2fc  0001a2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a304  0800a304  00020420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a304  0800a304  0001a304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a308  0800a308  0001a308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000420  20000000  0800a30c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000090c  20000420  0800a72c  00020420  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d2c  0800a72c  00020d2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020420  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a92  00000000  00000000  00020450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c27  00000000  00000000  00037ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  0003ab10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001390  00000000  00000000  0003bfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a11e  00000000  00000000  0003d330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ce7  00000000  00000000  0005744e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5d90  00000000  00000000  00070135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00115ec5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069bc  00000000  00000000  00115f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000420 	.word	0x20000420
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009d20 	.word	0x08009d20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000424 	.word	0x20000424
 80001dc:	08009d20 	.word	0x08009d20

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <DS3231_Read_v>:
				&ERTC_lg.D8[0], 19, 100);
	}

}

void DS3231_Read_v(I2C_HandleTypeDef *hi2c, uint8_t *ertc){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af04      	add	r7, sp, #16
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
	/* Check by use "ERTC_lg" in live expression
	 * ex. DS3231_Read(&hi2c2);
	 * */
	if(hi2c->State == HAL_I2C_STATE_READY){
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b20      	cmp	r3, #32
 8000ed0:	d10b      	bne.n	8000eea <DS3231_Read_v+0x2e>
		HAL_I2C_Mem_Read(hi2c, DS_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT,
 8000ed2:	2364      	movs	r3, #100	; 0x64
 8000ed4:	9302      	str	r3, [sp, #8]
 8000ed6:	2313      	movs	r3, #19
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	21d0      	movs	r1, #208	; 0xd0
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f002 fee7 	bl	8003cb8 <HAL_I2C_Mem_Read>
				ertc, 19, 100);
	}

}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef4:	b5b0      	push	{r4, r5, r7, lr}
 8000ef6:	b092      	sub	sp, #72	; 0x48
 8000ef8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efa:	f001 fa1d 	bl	8002338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efe:	f000 f921 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f02:	f000 fbb9 	bl	8001678 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f06:	f000 fb79 	bl	80015fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f0a:	f000 fb23 	bl	8001554 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000f0e:	f000 fa45 	bl	800139c <MX_SPI2_Init>
  MX_TIM11_Init();
 8000f12:	f000 fafb 	bl	800150c <MX_TIM11_Init>
  MX_USART6_UART_Init();
 8000f16:	f000 fb47 	bl	80015a8 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8000f1a:	f000 fa75 	bl	8001408 <MX_SPI3_Init>
  MX_I2C1_Init();
 8000f1e:	f000 f9e9 	bl	80012f4 <MX_I2C1_Init>
  MX_RTC_Init();
 8000f22:	f000 fa15 	bl	8001350 <MX_RTC_Init>
  MX_TIM3_Init();
 8000f26:	f000 faa5 	bl	8001474 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000f2a:	f000 f975 	bl	8001218 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim11);
  //HAL_TIM_Base_Start_IT(&htim3);

  MCrq1.MCP3002_8.REQFigu = Mm_Diff_01;
 8000f2e:	4a71      	ldr	r2, [pc, #452]	; (80010f4 <main+0x200>)
 8000f30:	7853      	ldrb	r3, [r2, #1]
 8000f32:	f36f 1387 	bfc	r3, #6, #2
 8000f36:	7053      	strb	r3, [r2, #1]
  MCrq2.MCP3002_8.REQFigu = Mm_SE_CH1;
 8000f38:	4a6f      	ldr	r2, [pc, #444]	; (80010f8 <main+0x204>)
 8000f3a:	7853      	ldrb	r3, [r2, #1]
 8000f3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000f40:	7053      	strb	r3, [r2, #1]



  //mc8rq1.MCP3208_U.CHSlct = M8_CH0;
  mc8rq1.MCP3208_DI_16.CHSlct = M8_CH0;
 8000f42:	4a6e      	ldr	r2, [pc, #440]	; (80010fc <main+0x208>)
 8000f44:	8813      	ldrh	r3, [r2, #0]
 8000f46:	2118      	movs	r1, #24
 8000f48:	f361 138a 	bfi	r3, r1, #6, #5
 8000f4c:	8013      	strh	r3, [r2, #0]
  //HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);

  	HAL_UART_Transmit(&huart2, (uint8_t*)ofcirc_ptrn_txt, strlen(ofcirc_ptrn_txt), 100);
 8000f4e:	486c      	ldr	r0, [pc, #432]	; (8001100 <main+0x20c>)
 8000f50:	f7ff f946 	bl	80001e0 <strlen>
 8000f54:	4603      	mov	r3, r0
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	4969      	ldr	r1, [pc, #420]	; (8001100 <main+0x20c>)
 8000f5c:	4869      	ldr	r0, [pc, #420]	; (8001104 <main+0x210>)
 8000f5e:	f005 f803 	bl	8005f68 <HAL_UART_Transmit>

  	HAL_UART_Transmit(&huart2, (uint8_t*)ofcirc_ptrn3L_txt, strlen(ofcirc_ptrn_txt), 100);
 8000f62:	4867      	ldr	r0, [pc, #412]	; (8001100 <main+0x20c>)
 8000f64:	f7ff f93c 	bl	80001e0 <strlen>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	2364      	movs	r3, #100	; 0x64
 8000f6e:	4966      	ldr	r1, [pc, #408]	; (8001108 <main+0x214>)
 8000f70:	4864      	ldr	r0, [pc, #400]	; (8001104 <main+0x210>)
 8000f72:	f004 fff9 	bl	8005f68 <HAL_UART_Transmit>

    char temp[]="----------------- F411_MultiSP --------------------\r\n";
 8000f76:	4b65      	ldr	r3, [pc, #404]	; (800110c <main+0x218>)
 8000f78:	463c      	mov	r4, r7
 8000f7a:	461d      	mov	r5, r3
 8000f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f8c:	6020      	str	r0, [r4, #0]
 8000f8e:	3404      	adds	r4, #4
 8000f90:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8000f92:	463b      	mov	r3, r7
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff f923 	bl	80001e0 <strlen>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	4639      	mov	r1, r7
 8000fa0:	230a      	movs	r3, #10
 8000fa2:	4858      	ldr	r0, [pc, #352]	; (8001104 <main+0x210>)
 8000fa4:	f004 ffe0 	bl	8005f68 <HAL_UART_Transmit>

    ConsoleUARTPlay();
 8000fa8:	f000 fc04 	bl	80017b4 <ConsoleUARTPlay>
    HAL_Delay(1000);
 8000fac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb0:	f001 fa34 	bl	800241c <HAL_Delay>

     ili9486_WriteStringNoBG(10, 40, " INA219 PWRMon Quick", Font20, cl_OLIVE);
#endif

#ifdef ADC_DMA_wrk
     HAL_ADC_Start_DMA(&hadc1, &adcr.RawRead[0], 300);
 8000fb4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fb8:	4955      	ldr	r1, [pc, #340]	; (8001110 <main+0x21c>)
 8000fba:	4856      	ldr	r0, [pc, #344]	; (8001114 <main+0x220>)
 8000fbc:	f001 fa96 	bl	80024ec <HAL_ADC_Start_DMA>

    /* USER CODE BEGIN 3 */
	  //HAL_UART_Receive_IT(&huart6,  (uint8_t*)RxDataBuffer, 32);

#ifdef ADC_DMA_wrk
     adcr.Buf[0] = adcr.RawRead[0];
 8000fc0:	4b55      	ldr	r3, [pc, #340]	; (8001118 <main+0x224>)
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	4b54      	ldr	r3, [pc, #336]	; (8001118 <main+0x224>)
 8000fc8:	801a      	strh	r2, [r3, #0]
     adcr.Buf[1] = adcr.RawRead[1];
 8000fca:	4b53      	ldr	r3, [pc, #332]	; (8001118 <main+0x224>)
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	4b51      	ldr	r3, [pc, #324]	; (8001118 <main+0x224>)
 8000fd2:	805a      	strh	r2, [r3, #2]
     adcr.Buf[2] = adcr.RawRead[2];
 8000fd4:	4b50      	ldr	r3, [pc, #320]	; (8001118 <main+0x224>)
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	4b4f      	ldr	r3, [pc, #316]	; (8001118 <main+0x224>)
 8000fdc:	809a      	strh	r2, [r3, #4]
#endif



#ifdef DS_RTC_WRK
	  if(HAL_GetTick() >= timestamp.ds ){ ////&& wdg_tig == 0
 8000fde:	f001 fa11 	bl	8002404 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	4b4d      	ldr	r3, [pc, #308]	; (800111c <main+0x228>)
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d309      	bcc.n	8001000 <main+0x10c>
			  timestamp.ds = HAL_GetTick() + 2;
 8000fec:	f001 fa0a 	bl	8002404 <HAL_GetTick>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	4a49      	ldr	r2, [pc, #292]	; (800111c <main+0x228>)
 8000ff6:	6093      	str	r3, [r2, #8]
			  DS3231_Read_v(&hi2c1, &eRTC.D8[0]);
 8000ff8:	4949      	ldr	r1, [pc, #292]	; (8001120 <main+0x22c>)
 8000ffa:	484a      	ldr	r0, [pc, #296]	; (8001124 <main+0x230>)
 8000ffc:	f7ff ff5e 	bl	8000ebc <DS3231_Read_v>
		  }

	  if(HAL_GetTick() >= timestamp.dsurt ){ ////&& wdg_tig == 0
 8001000:	f001 fa00 	bl	8002404 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	4b45      	ldr	r3, [pc, #276]	; (800111c <main+0x228>)
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	429a      	cmp	r2, r3
 800100c:	d33f      	bcc.n	800108e <main+0x19a>
	  		timestamp.dsurt = HAL_GetTick() + 1000 ;
 800100e:	f001 f9f9 	bl	8002404 <HAL_GetTick>
 8001012:	4603      	mov	r3, r0
 8001014:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001018:	4a40      	ldr	r2, [pc, #256]	; (800111c <main+0x228>)
 800101a:	60d3      	str	r3, [r2, #12]

#ifdef ConsoUART_ANSI
     HUART_TX("\x1b[2J \x1b[H"); //clear screen + start head
 800101c:	4842      	ldr	r0, [pc, #264]	; (8001128 <main+0x234>)
 800101e:	f000 fc7f 	bl	8001920 <HUART_TX>
     HAL_UART_Transmit(&huart2, (uint8_t*)ofcirc_ptrn3L_txt, strlen(ofcirc_ptrn3L_txt), 200); // enough timeout
 8001022:	4839      	ldr	r0, [pc, #228]	; (8001108 <main+0x214>)
 8001024:	f7ff f8dc 	bl	80001e0 <strlen>
 8001028:	4603      	mov	r3, r0
 800102a:	b29a      	uxth	r2, r3
 800102c:	23c8      	movs	r3, #200	; 0xc8
 800102e:	4936      	ldr	r1, [pc, #216]	; (8001108 <main+0x214>)
 8001030:	4834      	ldr	r0, [pc, #208]	; (8001104 <main+0x210>)
 8001032:	f004 ff99 	bl	8005f68 <HAL_UART_Transmit>

     sprintf(TxDataBuffer, "Timestamp dsurt : %lu \r\n ", timestamp.dsurt);
 8001036:	4b39      	ldr	r3, [pc, #228]	; (800111c <main+0x228>)
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	461a      	mov	r2, r3
 800103c:	493b      	ldr	r1, [pc, #236]	; (800112c <main+0x238>)
 800103e:	483c      	ldr	r0, [pc, #240]	; (8001130 <main+0x23c>)
 8001040:	f006 fbf4 	bl	800782c <siprintf>
     HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer),10);
 8001044:	483a      	ldr	r0, [pc, #232]	; (8001130 <main+0x23c>)
 8001046:	f7ff f8cb 	bl	80001e0 <strlen>
 800104a:	4603      	mov	r3, r0
 800104c:	b29a      	uxth	r2, r3
 800104e:	230a      	movs	r3, #10
 8001050:	4937      	ldr	r1, [pc, #220]	; (8001130 <main+0x23c>)
 8001052:	482c      	ldr	r0, [pc, #176]	; (8001104 <main+0x210>)
 8001054:	f004 ff88 	bl	8005f68 <HAL_UART_Transmit>
#endif


	  		sprintf(TxDataBuffer, "Time - %2X : %2X : %2X\r\n ", eRTC.DS3231RG.hour, eRTC.DS3231RG.min, eRTC.DS3231RG.sec);
 8001058:	4b31      	ldr	r3, [pc, #196]	; (8001120 <main+0x22c>)
 800105a:	789b      	ldrb	r3, [r3, #2]
 800105c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8001060:	b2db      	uxtb	r3, r3
 8001062:	461a      	mov	r2, r3
 8001064:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <main+0x22c>)
 8001066:	785b      	ldrb	r3, [r3, #1]
 8001068:	4619      	mov	r1, r3
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <main+0x22c>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	460b      	mov	r3, r1
 8001072:	4930      	ldr	r1, [pc, #192]	; (8001134 <main+0x240>)
 8001074:	482e      	ldr	r0, [pc, #184]	; (8001130 <main+0x23c>)
 8001076:	f006 fbd9 	bl	800782c <siprintf>
	  		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer),10);
 800107a:	482d      	ldr	r0, [pc, #180]	; (8001130 <main+0x23c>)
 800107c:	f7ff f8b0 	bl	80001e0 <strlen>
 8001080:	4603      	mov	r3, r0
 8001082:	b29a      	uxth	r2, r3
 8001084:	230a      	movs	r3, #10
 8001086:	492a      	ldr	r1, [pc, #168]	; (8001130 <main+0x23c>)
 8001088:	481e      	ldr	r0, [pc, #120]	; (8001104 <main+0x210>)
 800108a:	f004 ff6d 	bl	8005f68 <HAL_UART_Transmit>
	  }
#endif

#ifdef EXT_WWDG_TGGR
	  //// External Watchdog
	  if(HAL_GetTick()- timestamp.wdg >= 1400 ){ ////&& wdg_tig == 0
 800108e:	f001 f9b9 	bl	8002404 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	4b21      	ldr	r3, [pc, #132]	; (800111c <main+0x228>)
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800109e:	d30c      	bcc.n	80010ba <main+0x1c6>
	  		  timestamp.wdg = HAL_GetTick();
 80010a0:	f001 f9b0 	bl	8002404 <HAL_GetTick>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4a1d      	ldr	r2, [pc, #116]	; (800111c <main+0x228>)
 80010a8:	6113      	str	r3, [r2, #16]
	  		  // Toggle edge to watchdog xternal ic
	  		  HAL_GPIO_TogglePin(WDG_TG_GPIO_Port, WDG_TG_Pin);
 80010aa:	2120      	movs	r1, #32
 80010ac:	4822      	ldr	r0, [pc, #136]	; (8001138 <main+0x244>)
 80010ae:	f002 fc8c 	bl	80039ca <HAL_GPIO_TogglePin>
	  		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80010b2:	2120      	movs	r1, #32
 80010b4:	4821      	ldr	r0, [pc, #132]	; (800113c <main+0x248>)
 80010b6:	f002 fc88 	bl	80039ca <HAL_GPIO_TogglePin>
		  HAL_I2C_Mem_Read(&hi2c1, INA219_ADDR, memaddr, I2C_MEMADD_SIZE_8BIT, &inabuf.U8[0], 8, 100);
	  }
#endif

#ifdef BMI270_wrk
	  if (HAL_GetTick() - timestamp.bmi >= 1000){
 80010ba:	f001 f9a3 	bl	8002404 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <main+0x228>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010ca:	f4ff af79 	bcc.w	8000fc0 <main+0xcc>
	  		  timestamp.bmi = HAL_GetTick();
 80010ce:	f001 f999 	bl	8002404 <HAL_GetTick>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a11      	ldr	r2, [pc, #68]	; (800111c <main+0x228>)
 80010d6:	6193      	str	r3, [r2, #24]

	  		  HAL_I2C_Mem_Read(&hi2c1, BMI270_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, &bmi_read[0], 18, 100);
 80010d8:	2364      	movs	r3, #100	; 0x64
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2312      	movs	r3, #18
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <main+0x24c>)
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	2200      	movs	r2, #0
 80010e8:	21d0      	movs	r1, #208	; 0xd0
 80010ea:	480e      	ldr	r0, [pc, #56]	; (8001124 <main+0x230>)
 80010ec:	f002 fde4 	bl	8003cb8 <HAL_I2C_Mem_Read>
     adcr.Buf[0] = adcr.RawRead[0];
 80010f0:	e766      	b.n	8000fc0 <main+0xcc>
 80010f2:	bf00      	nop
 80010f4:	20000804 	.word	0x20000804
 80010f8:	20000808 	.word	0x20000808
 80010fc:	2000080c 	.word	0x2000080c
 8001100:	20000000 	.word	0x20000000
 8001104:	20000698 	.word	0x20000698
 8001108:	200001b0 	.word	0x200001b0
 800110c:	08009d7c 	.word	0x08009d7c
 8001110:	20000840 	.word	0x20000840
 8001114:	2000043c 	.word	0x2000043c
 8001118:	20000838 	.word	0x20000838
 800111c:	20000cf8 	.word	0x20000cf8
 8001120:	20000810 	.word	0x20000810
 8001124:	200004e4 	.word	0x200004e4
 8001128:	08009d38 	.word	0x08009d38
 800112c:	08009d44 	.word	0x08009d44
 8001130:	200007e0 	.word	0x200007e0
 8001134:	08009d60 	.word	0x08009d60
 8001138:	40020800 	.word	0x40020800
 800113c:	40020000 	.word	0x40020000
 8001140:	20000824 	.word	0x20000824

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b094      	sub	sp, #80	; 0x50
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0320 	add.w	r3, r7, #32
 800114e:	2230      	movs	r2, #48	; 0x30
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f005 fef8 	bl	8006f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	4b28      	ldr	r3, [pc, #160]	; (8001210 <SystemClock_Config+0xcc>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	4a27      	ldr	r2, [pc, #156]	; (8001210 <SystemClock_Config+0xcc>)
 8001172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001176:	6413      	str	r3, [r2, #64]	; 0x40
 8001178:	4b25      	ldr	r3, [pc, #148]	; (8001210 <SystemClock_Config+0xcc>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <SystemClock_Config+0xd0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a21      	ldr	r2, [pc, #132]	; (8001214 <SystemClock_Config+0xd0>)
 800118e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <SystemClock_Config+0xd0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80011a0:	230a      	movs	r3, #10
 80011a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a4:	2301      	movs	r3, #1
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a8:	2310      	movs	r3, #16
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011ac:	2301      	movs	r3, #1
 80011ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b0:	2302      	movs	r3, #2
 80011b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011b4:	2300      	movs	r3, #0
 80011b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011b8:	2308      	movs	r3, #8
 80011ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80011bc:	2364      	movs	r3, #100	; 0x64
 80011be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011c0:	2302      	movs	r3, #2
 80011c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011c4:	2304      	movs	r3, #4
 80011c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c8:	f107 0320 	add.w	r3, r7, #32
 80011cc:	4618      	mov	r0, r3
 80011ce:	f003 fa1d 	bl	800460c <HAL_RCC_OscConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011d8:	f000 fbf8 	bl	80019cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011dc:	230f      	movs	r3, #15
 80011de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e0:	2302      	movs	r3, #2
 80011e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011f2:	f107 030c 	add.w	r3, r7, #12
 80011f6:	2103      	movs	r1, #3
 80011f8:	4618      	mov	r0, r3
 80011fa:	f003 fc7f 	bl	8004afc <HAL_RCC_ClockConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001204:	f000 fbe2 	bl	80019cc <Error_Handler>
  }
}
 8001208:	bf00      	nop
 800120a:	3750      	adds	r7, #80	; 0x50
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40023800 	.word	0x40023800
 8001214:	40007000 	.word	0x40007000

08001218 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800121e:	463b      	mov	r3, r7
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800122a:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <MX_ADC1_Init+0xd0>)
 800122c:	4a2f      	ldr	r2, [pc, #188]	; (80012ec <MX_ADC1_Init+0xd4>)
 800122e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001230:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <MX_ADC1_Init+0xd0>)
 8001232:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001236:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001238:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <MX_ADC1_Init+0xd0>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800123e:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <MX_ADC1_Init+0xd0>)
 8001240:	2201      	movs	r2, #1
 8001242:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001244:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <MX_ADC1_Init+0xd0>)
 8001246:	2201      	movs	r2, #1
 8001248:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800124a:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <MX_ADC1_Init+0xd0>)
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001252:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <MX_ADC1_Init+0xd0>)
 8001254:	2200      	movs	r2, #0
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <MX_ADC1_Init+0xd0>)
 800125a:	4a25      	ldr	r2, [pc, #148]	; (80012f0 <MX_ADC1_Init+0xd8>)
 800125c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800125e:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <MX_ADC1_Init+0xd0>)
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001264:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <MX_ADC1_Init+0xd0>)
 8001266:	2203      	movs	r2, #3
 8001268:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800126a:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <MX_ADC1_Init+0xd0>)
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <MX_ADC1_Init+0xd0>)
 8001274:	2201      	movs	r2, #1
 8001276:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001278:	481b      	ldr	r0, [pc, #108]	; (80012e8 <MX_ADC1_Init+0xd0>)
 800127a:	f001 f8f3 	bl	8002464 <HAL_ADC_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001284:	f000 fba2 	bl	80019cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001288:	2300      	movs	r3, #0
 800128a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800128c:	2301      	movs	r3, #1
 800128e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001290:	2306      	movs	r3, #6
 8001292:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001294:	463b      	mov	r3, r7
 8001296:	4619      	mov	r1, r3
 8001298:	4813      	ldr	r0, [pc, #76]	; (80012e8 <MX_ADC1_Init+0xd0>)
 800129a:	f001 fa35 	bl	8002708 <HAL_ADC_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012a4:	f000 fb92 	bl	80019cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80012ac:	2302      	movs	r3, #2
 80012ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <MX_ADC1_Init+0xd0>)
 80012b6:	f001 fa27 	bl	8002708 <HAL_ADC_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012c0:	f000 fb84 	bl	80019cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012c4:	2308      	movs	r3, #8
 80012c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80012c8:	2303      	movs	r3, #3
 80012ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_ADC1_Init+0xd0>)
 80012d2:	f001 fa19 	bl	8002708 <HAL_ADC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80012dc:	f000 fb76 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000043c 	.word	0x2000043c
 80012ec:	40012000 	.word	0x40012000
 80012f0:	0f000001 	.word	0x0f000001

080012f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_I2C1_Init+0x50>)
 80012fa:	4a13      	ldr	r2, [pc, #76]	; (8001348 <MX_I2C1_Init+0x54>)
 80012fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_I2C1_Init+0x50>)
 8001300:	4a12      	ldr	r2, [pc, #72]	; (800134c <MX_I2C1_Init+0x58>)
 8001302:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_I2C1_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_I2C1_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_I2C1_Init+0x50>)
 8001312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001316:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <MX_I2C1_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_I2C1_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <MX_I2C1_Init+0x50>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_I2C1_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <MX_I2C1_Init+0x50>)
 8001332:	f002 fb7d 	bl	8003a30 <HAL_I2C_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800133c:	f000 fb46 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200004e4 	.word	0x200004e4
 8001348:	40005400 	.word	0x40005400
 800134c:	00061a80 	.word	0x00061a80

08001350 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_RTC_Init+0x44>)
 8001356:	4a10      	ldr	r2, [pc, #64]	; (8001398 <MX_RTC_Init+0x48>)
 8001358:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_RTC_Init+0x44>)
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_RTC_Init+0x44>)
 8001362:	227f      	movs	r2, #127	; 0x7f
 8001364:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MX_RTC_Init+0x44>)
 8001368:	22ff      	movs	r2, #255	; 0xff
 800136a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_RTC_Init+0x44>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <MX_RTC_Init+0x44>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_RTC_Init+0x44>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_RTC_Init+0x44>)
 8001380:	f003 fecc 	bl	800511c <HAL_RTC_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800138a:	f000 fb1f 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000538 	.word	0x20000538
 8001398:	40002800 	.word	0x40002800

0800139c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <MX_SPI2_Init+0x64>)
 80013a2:	4a18      	ldr	r2, [pc, #96]	; (8001404 <MX_SPI2_Init+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <MX_SPI2_Init+0x64>)
 80013a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_SPI2_Init+0x64>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <MX_SPI2_Init+0x64>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_SPI2_Init+0x64>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <MX_SPI2_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_SPI2_Init+0x64>)
 80013c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_SPI2_Init+0x64>)
 80013d0:	2228      	movs	r2, #40	; 0x28
 80013d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <MX_SPI2_Init+0x64>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_SPI2_Init+0x64>)
 80013dc:	2200      	movs	r2, #0
 80013de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <MX_SPI2_Init+0x64>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_SPI2_Init+0x64>)
 80013e8:	220a      	movs	r2, #10
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <MX_SPI2_Init+0x64>)
 80013ee:	f003 ff8f 	bl	8005310 <HAL_SPI_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80013f8:	f000 fae8 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000558 	.word	0x20000558
 8001404:	40003800 	.word	0x40003800

08001408 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800140c:	4b17      	ldr	r3, [pc, #92]	; (800146c <MX_SPI3_Init+0x64>)
 800140e:	4a18      	ldr	r2, [pc, #96]	; (8001470 <MX_SPI3_Init+0x68>)
 8001410:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <MX_SPI3_Init+0x64>)
 8001414:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001418:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800141a:	4b14      	ldr	r3, [pc, #80]	; (800146c <MX_SPI3_Init+0x64>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <MX_SPI3_Init+0x64>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_SPI3_Init+0x64>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_SPI3_Init+0x64>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_SPI3_Init+0x64>)
 8001434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001438:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_SPI3_Init+0x64>)
 800143c:	2228      	movs	r2, #40	; 0x28
 800143e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <MX_SPI3_Init+0x64>)
 8001442:	2200      	movs	r2, #0
 8001444:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_SPI3_Init+0x64>)
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <MX_SPI3_Init+0x64>)
 800144e:	2200      	movs	r2, #0
 8001450:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_SPI3_Init+0x64>)
 8001454:	220a      	movs	r2, #10
 8001456:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001458:	4804      	ldr	r0, [pc, #16]	; (800146c <MX_SPI3_Init+0x64>)
 800145a:	f003 ff59 	bl	8005310 <HAL_SPI_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001464:	f000 fab2 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200005b0 	.word	0x200005b0
 8001470:	40003c00 	.word	0x40003c00

08001474 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001488:	463b      	mov	r3, r7
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001490:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <MX_TIM3_Init+0x90>)
 8001492:	4a1d      	ldr	r2, [pc, #116]	; (8001508 <MX_TIM3_Init+0x94>)
 8001494:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <MX_TIM3_Init+0x90>)
 8001498:	2201      	movs	r2, #1
 800149a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <MX_TIM3_Init+0x90>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19;
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_TIM3_Init+0x90>)
 80014a4:	2213      	movs	r2, #19
 80014a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <MX_TIM3_Init+0x90>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <MX_TIM3_Init+0x90>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014b4:	4813      	ldr	r0, [pc, #76]	; (8001504 <MX_TIM3_Init+0x90>)
 80014b6:	f004 f8d3 	bl	8005660 <HAL_TIM_Base_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80014c0:	f000 fa84 	bl	80019cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	4619      	mov	r1, r3
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <MX_TIM3_Init+0x90>)
 80014d2:	f004 fa1c 	bl	800590e <HAL_TIM_ConfigClockSource>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80014dc:	f000 fa76 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e0:	2300      	movs	r3, #0
 80014e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014e8:	463b      	mov	r3, r7
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_TIM3_Init+0x90>)
 80014ee:	f004 fc17 	bl	8005d20 <HAL_TIMEx_MasterConfigSynchronization>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80014f8:	f000 fa68 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000608 	.word	0x20000608
 8001508:	40000400 	.word	0x40000400

0800150c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001510:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_TIM11_Init+0x40>)
 8001512:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <MX_TIM11_Init+0x44>)
 8001514:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <MX_TIM11_Init+0x40>)
 8001518:	2263      	movs	r2, #99	; 0x63
 800151a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <MX_TIM11_Init+0x40>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <MX_TIM11_Init+0x40>)
 8001524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001528:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <MX_TIM11_Init+0x40>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_TIM11_Init+0x40>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_TIM11_Init+0x40>)
 8001538:	f004 f892 	bl	8005660 <HAL_TIM_Base_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001542:	f000 fa43 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000650 	.word	0x20000650
 8001550:	40014800 	.word	0x40014800

08001554 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_USART2_UART_Init+0x4c>)
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <MX_USART2_UART_Init+0x50>)
 800155c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <MX_USART2_UART_Init+0x4c>)
 8001560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001564:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_USART2_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_USART2_UART_Init+0x4c>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <MX_USART2_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_USART2_UART_Init+0x4c>)
 800157a:	220c      	movs	r2, #12
 800157c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <MX_USART2_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_USART2_UART_Init+0x4c>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_USART2_UART_Init+0x4c>)
 800158c:	f004 fc4a 	bl	8005e24 <HAL_UART_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001596:	f000 fa19 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000698 	.word	0x20000698
 80015a4:	40004400 	.word	0x40004400

080015a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_USART6_UART_Init+0x4c>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <MX_USART6_UART_Init+0x50>)
 80015b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <MX_USART6_UART_Init+0x4c>)
 80015b4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80015b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_USART6_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_USART6_UART_Init+0x4c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <MX_USART6_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_USART6_UART_Init+0x4c>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <MX_USART6_UART_Init+0x4c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_USART6_UART_Init+0x4c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_USART6_UART_Init+0x4c>)
 80015e0:	f004 fc6d 	bl	8005ebe <HAL_HalfDuplex_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80015ea:	f000 f9ef 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200006dc 	.word	0x200006dc
 80015f8:	40011400 	.word	0x40011400

080015fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <MX_DMA_Init+0x78>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a1a      	ldr	r2, [pc, #104]	; (8001674 <MX_DMA_Init+0x78>)
 800160c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <MX_DMA_Init+0x78>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_DMA_Init+0x78>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a13      	ldr	r2, [pc, #76]	; (8001674 <MX_DMA_Init+0x78>)
 8001628:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_DMA_Init+0x78>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	2010      	movs	r0, #16
 8001640:	f001 fbed 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001644:	2010      	movs	r0, #16
 8001646:	f001 fc06 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	2011      	movs	r0, #17
 8001650:	f001 fbe5 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001654:	2011      	movs	r0, #17
 8001656:	f001 fbfe 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2038      	movs	r0, #56	; 0x38
 8001660:	f001 fbdd 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001664:	2038      	movs	r0, #56	; 0x38
 8001666:	f001 fbf6 	bl	8002e56 <HAL_NVIC_EnableIRQ>

}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800

08001678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b45      	ldr	r3, [pc, #276]	; (80017a8 <MX_GPIO_Init+0x130>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a44      	ldr	r2, [pc, #272]	; (80017a8 <MX_GPIO_Init+0x130>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b42      	ldr	r3, [pc, #264]	; (80017a8 <MX_GPIO_Init+0x130>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b3e      	ldr	r3, [pc, #248]	; (80017a8 <MX_GPIO_Init+0x130>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a3d      	ldr	r2, [pc, #244]	; (80017a8 <MX_GPIO_Init+0x130>)
 80016b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <MX_GPIO_Init+0x130>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	4b37      	ldr	r3, [pc, #220]	; (80017a8 <MX_GPIO_Init+0x130>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a36      	ldr	r2, [pc, #216]	; (80017a8 <MX_GPIO_Init+0x130>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b34      	ldr	r3, [pc, #208]	; (80017a8 <MX_GPIO_Init+0x130>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	4b30      	ldr	r3, [pc, #192]	; (80017a8 <MX_GPIO_Init+0x130>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a2f      	ldr	r2, [pc, #188]	; (80017a8 <MX_GPIO_Init+0x130>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <MX_GPIO_Init+0x130>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CC_I2_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	2130      	movs	r1, #48	; 0x30
 8001702:	482a      	ldr	r0, [pc, #168]	; (80017ac <MX_GPIO_Init+0x134>)
 8001704:	f002 f948 	bl	8003998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WDG_TG_GPIO_Port, WDG_TG_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	2120      	movs	r1, #32
 800170c:	4828      	ldr	r0, [pc, #160]	; (80017b0 <MX_GPIO_Init+0x138>)
 800170e:	f002 f943 	bl	8003998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M2_CS_Pin|M8_CS_Pin, GPIO_PIN_SET);
 8001712:	2201      	movs	r2, #1
 8001714:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001718:	4824      	ldr	r0, [pc, #144]	; (80017ac <MX_GPIO_Init+0x134>)
 800171a:	f002 f93d 	bl	8003998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800171e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001724:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	481e      	ldr	r0, [pc, #120]	; (80017b0 <MX_GPIO_Init+0x138>)
 8001736:	f001 ffab 	bl	8003690 <HAL_GPIO_Init>

  /*Configure GPIO pin : CC_I2_Pin */
  GPIO_InitStruct.Pin = CC_I2_Pin;
 800173a:	2310      	movs	r3, #16
 800173c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800173e:	2311      	movs	r3, #17
 8001740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001746:	2303      	movs	r3, #3
 8001748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CC_I2_GPIO_Port, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4816      	ldr	r0, [pc, #88]	; (80017ac <MX_GPIO_Init+0x134>)
 8001752:	f001 ff9d 	bl	8003690 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin M2_CS_Pin M8_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|M2_CS_Pin|M8_CS_Pin;
 8001756:	f44f 7348 	mov.w	r3, #800	; 0x320
 800175a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175c:	2301      	movs	r3, #1
 800175e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	480f      	ldr	r0, [pc, #60]	; (80017ac <MX_GPIO_Init+0x134>)
 8001770:	f001 ff8e 	bl	8003690 <HAL_GPIO_Init>

  /*Configure GPIO pin : WDG_TG_Pin */
  GPIO_InitStruct.Pin = WDG_TG_Pin;
 8001774:	2320      	movs	r3, #32
 8001776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001778:	2301      	movs	r3, #1
 800177a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WDG_TG_GPIO_Port, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	4809      	ldr	r0, [pc, #36]	; (80017b0 <MX_GPIO_Init+0x138>)
 800178c:	f001 ff80 	bl	8003690 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	2100      	movs	r1, #0
 8001794:	2028      	movs	r0, #40	; 0x28
 8001796:	f001 fb42 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800179a:	2028      	movs	r0, #40	; 0x28
 800179c:	f001 fb5b 	bl	8002e56 <HAL_NVIC_EnableIRQ>

}
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	; 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40020000 	.word	0x40020000
 80017b0:	40020800 	.word	0x40020800

080017b4 <ConsoleUARTPlay>:
//	HAL_SPI_TransmitReceive_IT(&hspi3, pTrX, pRcX, 2);
//
//
//}

void ConsoleUARTPlay(){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0

	HUART_TX("\x1b[2J \x1b[H"); // clear screen  + Move Home
 80017b8:	4840      	ldr	r0, [pc, #256]	; (80018bc <ConsoleUARTPlay+0x108>)
 80017ba:	f000 f8b1 	bl	8001920 <HUART_TX>

	HUART_TX(ofcirc_ptrn3L_txt);
 80017be:	4840      	ldr	r0, [pc, #256]	; (80018c0 <ConsoleUARTPlay+0x10c>)
 80017c0:	f000 f8ae 	bl	8001920 <HUART_TX>

	HUART_TX(" --- ANSI Escape Command --- \r\n");
 80017c4:	483f      	ldr	r0, [pc, #252]	; (80018c4 <ConsoleUARTPlay+0x110>)
 80017c6:	f000 f8ab 	bl	8001920 <HUART_TX>
	HUART_TX("\x1b[01m BOLD \r\n");
 80017ca:	483f      	ldr	r0, [pc, #252]	; (80018c8 <ConsoleUARTPlay+0x114>)
 80017cc:	f000 f8a8 	bl	8001920 <HUART_TX>
	HUART_TX("\x1b[00m");
 80017d0:	483e      	ldr	r0, [pc, #248]	; (80018cc <ConsoleUARTPlay+0x118>)
 80017d2:	f000 f8a5 	bl	8001920 <HUART_TX>
	HUART_TX("\x1b[03m ITALIC \r\n");
 80017d6:	483e      	ldr	r0, [pc, #248]	; (80018d0 <ConsoleUARTPlay+0x11c>)
 80017d8:	f000 f8a2 	bl	8001920 <HUART_TX>
	HUART_TX("\x1b[00m");
 80017dc:	483b      	ldr	r0, [pc, #236]	; (80018cc <ConsoleUARTPlay+0x118>)
 80017de:	f000 f89f 	bl	8001920 <HUART_TX>
	HUART_TX("\x1b[04m UNDERLINE \r\n");
 80017e2:	483c      	ldr	r0, [pc, #240]	; (80018d4 <ConsoleUARTPlay+0x120>)
 80017e4:	f000 f89c 	bl	8001920 <HUART_TX>
	HUART_TX("\x1b[00m");
 80017e8:	4838      	ldr	r0, [pc, #224]	; (80018cc <ConsoleUARTPlay+0x118>)
 80017ea:	f000 f899 	bl	8001920 <HUART_TX>

	HUART_TX("\x1b[31m RED \r\n");
 80017ee:	483a      	ldr	r0, [pc, #232]	; (80018d8 <ConsoleUARTPlay+0x124>)
 80017f0:	f000 f896 	bl	8001920 <HUART_TX>
	HUART_TX("\x1b[32m GREEN \r\n");
 80017f4:	4839      	ldr	r0, [pc, #228]	; (80018dc <ConsoleUARTPlay+0x128>)
 80017f6:	f000 f893 	bl	8001920 <HUART_TX>
	HUART_TX("\x1b[33m YELOW \r\n");
 80017fa:	4839      	ldr	r0, [pc, #228]	; (80018e0 <ConsoleUARTPlay+0x12c>)
 80017fc:	f000 f890 	bl	8001920 <HUART_TX>
	HUART_TX("\x1b[34m BLUE \r\n");
 8001800:	4838      	ldr	r0, [pc, #224]	; (80018e4 <ConsoleUARTPlay+0x130>)
 8001802:	f000 f88d 	bl	8001920 <HUART_TX>
	HUART_TX("\x1b[35m MAGENTA \r\n");
 8001806:	4838      	ldr	r0, [pc, #224]	; (80018e8 <ConsoleUARTPlay+0x134>)
 8001808:	f000 f88a 	bl	8001920 <HUART_TX>
	HUART_TX("\x1b[36m CYAN \r\n");
 800180c:	4837      	ldr	r0, [pc, #220]	; (80018ec <ConsoleUARTPlay+0x138>)
 800180e:	f000 f887 	bl	8001920 <HUART_TX>
	HUART_TX("\x1b[37m WHITE \r\n");
 8001812:	4837      	ldr	r0, [pc, #220]	; (80018f0 <ConsoleUARTPlay+0x13c>)
 8001814:	f000 f884 	bl	8001920 <HUART_TX>
	HUART_TX("");
 8001818:	4836      	ldr	r0, [pc, #216]	; (80018f4 <ConsoleUARTPlay+0x140>)
 800181a:	f000 f881 	bl	8001920 <HUART_TX>


	HUART_TX("\x1b[00m RESET ANSI--- \r\n");
 800181e:	4836      	ldr	r0, [pc, #216]	; (80018f8 <ConsoleUARTPlay+0x144>)
 8001820:	f000 f87e 	bl	8001920 <HUART_TX>

	HAL_Delay(1000);
 8001824:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001828:	f000 fdf8 	bl	800241c <HAL_Delay>

	//// clear text in line + start at first pos
	HUART_TX("Starting"); HAL_Delay(600); HUART_TX("\x1b[2K \x1b[0G");
 800182c:	4833      	ldr	r0, [pc, #204]	; (80018fc <ConsoleUARTPlay+0x148>)
 800182e:	f000 f877 	bl	8001920 <HUART_TX>
 8001832:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001836:	f000 fdf1 	bl	800241c <HAL_Delay>
 800183a:	4831      	ldr	r0, [pc, #196]	; (8001900 <ConsoleUARTPlay+0x14c>)
 800183c:	f000 f870 	bl	8001920 <HUART_TX>
	HUART_TX("Starting ."); HAL_Delay(600); HUART_TX("\x1b[2K \x1b[0G");
 8001840:	4830      	ldr	r0, [pc, #192]	; (8001904 <ConsoleUARTPlay+0x150>)
 8001842:	f000 f86d 	bl	8001920 <HUART_TX>
 8001846:	f44f 7016 	mov.w	r0, #600	; 0x258
 800184a:	f000 fde7 	bl	800241c <HAL_Delay>
 800184e:	482c      	ldr	r0, [pc, #176]	; (8001900 <ConsoleUARTPlay+0x14c>)
 8001850:	f000 f866 	bl	8001920 <HUART_TX>
	HUART_TX("Starting . ."); HAL_Delay(600); HUART_TX("\x1b[2K \x1b[0G");
 8001854:	482c      	ldr	r0, [pc, #176]	; (8001908 <ConsoleUARTPlay+0x154>)
 8001856:	f000 f863 	bl	8001920 <HUART_TX>
 800185a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800185e:	f000 fddd 	bl	800241c <HAL_Delay>
 8001862:	4827      	ldr	r0, [pc, #156]	; (8001900 <ConsoleUARTPlay+0x14c>)
 8001864:	f000 f85c 	bl	8001920 <HUART_TX>
	HUART_TX("Starting . . ."); HAL_Delay(600); HUART_TX("\r\n");
 8001868:	4828      	ldr	r0, [pc, #160]	; (800190c <ConsoleUARTPlay+0x158>)
 800186a:	f000 f859 	bl	8001920 <HUART_TX>
 800186e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001872:	f000 fdd3 	bl	800241c <HAL_Delay>
 8001876:	4826      	ldr	r0, [pc, #152]	; (8001910 <ConsoleUARTPlay+0x15c>)
 8001878:	f000 f852 	bl	8001920 <HUART_TX>

	HUART_TX("Ready ?"); HAL_Delay(1000); HUART_TX("\x1b[2K \x1b[0G");
 800187c:	4825      	ldr	r0, [pc, #148]	; (8001914 <ConsoleUARTPlay+0x160>)
 800187e:	f000 f84f 	bl	8001920 <HUART_TX>
 8001882:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001886:	f000 fdc9 	bl	800241c <HAL_Delay>
 800188a:	481d      	ldr	r0, [pc, #116]	; (8001900 <ConsoleUARTPlay+0x14c>)
 800188c:	f000 f848 	bl	8001920 <HUART_TX>
	HUART_TX("Set ---"); HAL_Delay(1000); HUART_TX("\x1b[2K \x1b[0G");
 8001890:	4821      	ldr	r0, [pc, #132]	; (8001918 <ConsoleUARTPlay+0x164>)
 8001892:	f000 f845 	bl	8001920 <HUART_TX>
 8001896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800189a:	f000 fdbf 	bl	800241c <HAL_Delay>
 800189e:	4818      	ldr	r0, [pc, #96]	; (8001900 <ConsoleUARTPlay+0x14c>)
 80018a0:	f000 f83e 	bl	8001920 <HUART_TX>
	HUART_TX("GOOO !!!"); HAL_Delay(1000); HUART_TX("\x1b[2K \x1b[0G");
 80018a4:	481d      	ldr	r0, [pc, #116]	; (800191c <ConsoleUARTPlay+0x168>)
 80018a6:	f000 f83b 	bl	8001920 <HUART_TX>
 80018aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018ae:	f000 fdb5 	bl	800241c <HAL_Delay>
 80018b2:	4813      	ldr	r0, [pc, #76]	; (8001900 <ConsoleUARTPlay+0x14c>)
 80018b4:	f000 f834 	bl	8001920 <HUART_TX>

}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	08009d38 	.word	0x08009d38
 80018c0:	200001b0 	.word	0x200001b0
 80018c4:	08009db4 	.word	0x08009db4
 80018c8:	08009dd4 	.word	0x08009dd4
 80018cc:	08009de4 	.word	0x08009de4
 80018d0:	08009dec 	.word	0x08009dec
 80018d4:	08009dfc 	.word	0x08009dfc
 80018d8:	08009e10 	.word	0x08009e10
 80018dc:	08009e20 	.word	0x08009e20
 80018e0:	08009e30 	.word	0x08009e30
 80018e4:	08009e40 	.word	0x08009e40
 80018e8:	08009e50 	.word	0x08009e50
 80018ec:	08009e64 	.word	0x08009e64
 80018f0:	08009e74 	.word	0x08009e74
 80018f4:	08009e84 	.word	0x08009e84
 80018f8:	08009e88 	.word	0x08009e88
 80018fc:	08009ea0 	.word	0x08009ea0
 8001900:	08009eac 	.word	0x08009eac
 8001904:	08009eb8 	.word	0x08009eb8
 8001908:	08009ec4 	.word	0x08009ec4
 800190c:	08009ed4 	.word	0x08009ed4
 8001910:	08009ee4 	.word	0x08009ee4
 8001914:	08009ee8 	.word	0x08009ee8
 8001918:	08009ef0 	.word	0x08009ef0
 800191c:	08009ef8 	.word	0x08009ef8

08001920 <HUART_TX>:

void HUART_TX(char *chartex){
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	sprintf(TxDataBuffer, chartex);
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4808      	ldr	r0, [pc, #32]	; (800194c <HUART_TX+0x2c>)
 800192c:	f005 ff7e 	bl	800782c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer),50);
 8001930:	4806      	ldr	r0, [pc, #24]	; (800194c <HUART_TX+0x2c>)
 8001932:	f7fe fc55 	bl	80001e0 <strlen>
 8001936:	4603      	mov	r3, r0
 8001938:	b29a      	uxth	r2, r3
 800193a:	2332      	movs	r3, #50	; 0x32
 800193c:	4903      	ldr	r1, [pc, #12]	; (800194c <HUART_TX+0x2c>)
 800193e:	4804      	ldr	r0, [pc, #16]	; (8001950 <HUART_TX+0x30>)
 8001940:	f004 fb12 	bl	8005f68 <HAL_UART_Transmit>
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200007e0 	.word	0x200007e0
 8001950:	20000698 	.word	0x20000698

08001954 <HAL_GPIO_EXTI_Callback>:
//		// set cs back to 1, finished
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
//		}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001964:	d102      	bne.n	800196c <HAL_GPIO_EXTI_Callback+0x18>
		//wdg_tig++; // trickey stop watchdog tog
		flag_spi2_read = 1;
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <HAL_GPIO_EXTI_Callback+0x24>)
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
		}
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	20000800 	.word	0x20000800

0800197c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800197c:	b5b0      	push	{r4, r5, r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d10a      	bne.n	80019a2 <HAL_TIM_PeriodElapsedCallback+0x26>
	{_micro += 65535;}
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001996:	1854      	adds	r4, r2, r1
 8001998:	f143 0500 	adc.w	r5, r3, #0
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800199e:	e9c3 4500 	strd	r4, r5, [r3]
	if (htim == &htim3){
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d103      	bne.n	80019b2 <HAL_TIM_PeriodElapsedCallback+0x36>
		HAL_GPIO_TogglePin(CC_I2_GPIO_Port, CC_I2_Pin);
 80019aa:	2110      	movs	r1, #16
 80019ac:	4806      	ldr	r0, [pc, #24]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80019ae:	f002 f80c 	bl	80039ca <HAL_GPIO_TogglePin>
	}
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bdb0      	pop	{r4, r5, r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000650 	.word	0x20000650
 80019c0:	20000cf0 	.word	0x20000cf0
 80019c4:	20000608 	.word	0x20000608
 80019c8:	40020000 	.word	0x40020000

080019cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d0:	b672      	cpsid	i
}
 80019d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <Error_Handler+0x8>
	...

080019d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_MspInit+0x4c>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <HAL_MspInit+0x4c>)
 80019e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ec:	6453      	str	r3, [r2, #68]	; 0x44
 80019ee:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_MspInit+0x4c>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_MspInit+0x4c>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a08      	ldr	r2, [pc, #32]	; (8001a24 <HAL_MspInit+0x4c>)
 8001a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_MspInit+0x4c>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a16:	2007      	movs	r0, #7
 8001a18:	f001 f9f6 	bl	8002e08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40023800 	.word	0x40023800

08001a28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a3c      	ldr	r2, [pc, #240]	; (8001b38 <HAL_ADC_MspInit+0x110>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d171      	bne.n	8001b2e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	4b3b      	ldr	r3, [pc, #236]	; (8001b3c <HAL_ADC_MspInit+0x114>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a3a      	ldr	r2, [pc, #232]	; (8001b3c <HAL_ADC_MspInit+0x114>)
 8001a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <HAL_ADC_MspInit+0x114>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <HAL_ADC_MspInit+0x114>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a33      	ldr	r2, [pc, #204]	; (8001b3c <HAL_ADC_MspInit+0x114>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <HAL_ADC_MspInit+0x114>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <HAL_ADC_MspInit+0x114>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a2c      	ldr	r2, [pc, #176]	; (8001b3c <HAL_ADC_MspInit+0x114>)
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <HAL_ADC_MspInit+0x114>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4823      	ldr	r0, [pc, #140]	; (8001b40 <HAL_ADC_MspInit+0x118>)
 8001ab2:	f001 fded 	bl	8003690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aba:	2303      	movs	r3, #3
 8001abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	481e      	ldr	r0, [pc, #120]	; (8001b44 <HAL_ADC_MspInit+0x11c>)
 8001aca:	f001 fde1 	bl	8003690 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ace:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <HAL_ADC_MspInit+0x120>)
 8001ad0:	4a1e      	ldr	r2, [pc, #120]	; (8001b4c <HAL_ADC_MspInit+0x124>)
 8001ad2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <HAL_ADC_MspInit+0x120>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <HAL_ADC_MspInit+0x120>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae0:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <HAL_ADC_MspInit+0x120>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_ADC_MspInit+0x120>)
 8001ae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001aee:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <HAL_ADC_MspInit+0x120>)
 8001af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001af4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <HAL_ADC_MspInit+0x120>)
 8001af8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001afc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_ADC_MspInit+0x120>)
 8001b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b04:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <HAL_ADC_MspInit+0x120>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_ADC_MspInit+0x120>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b12:	480d      	ldr	r0, [pc, #52]	; (8001b48 <HAL_ADC_MspInit+0x120>)
 8001b14:	f001 f9ba 	bl	8002e8c <HAL_DMA_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001b1e:	f7ff ff55 	bl	80019cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <HAL_ADC_MspInit+0x120>)
 8001b26:	639a      	str	r2, [r3, #56]	; 0x38
 8001b28:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_ADC_MspInit+0x120>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b2e:	bf00      	nop
 8001b30:	3728      	adds	r7, #40	; 0x28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40012000 	.word	0x40012000
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020000 	.word	0x40020000
 8001b44:	40020400 	.word	0x40020400
 8001b48:	20000484 	.word	0x20000484
 8001b4c:	40026410 	.word	0x40026410

08001b50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a19      	ldr	r2, [pc, #100]	; (8001bd4 <HAL_I2C_MspInit+0x84>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d12c      	bne.n	8001bcc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a17      	ldr	r2, [pc, #92]	; (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b94:	2312      	movs	r3, #18
 8001b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480c      	ldr	r0, [pc, #48]	; (8001bdc <HAL_I2C_MspInit+0x8c>)
 8001bac:	f001 fd70 	bl	8003690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001bba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bcc:	bf00      	nop
 8001bce:	3728      	adds	r7, #40	; 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40005400 	.word	0x40005400
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020400 	.word	0x40020400

08001be0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001be8:	f107 0308 	add.w	r3, r7, #8
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
 8001bf8:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <HAL_RTC_MspInit+0x50>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d111      	bne.n	8001c28 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c04:	2302      	movs	r3, #2
 8001c06:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c0c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c0e:	f107 0308 	add.w	r3, r7, #8
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 f992 	bl	8004f3c <HAL_RCCEx_PeriphCLKConfig>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001c1e:	f7ff fed5 	bl	80019cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c22:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <HAL_RTC_MspInit+0x54>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c28:	bf00      	nop
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40002800 	.word	0x40002800
 8001c34:	42470e3c 	.word	0x42470e3c

08001c38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08e      	sub	sp, #56	; 0x38
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a59      	ldr	r2, [pc, #356]	; (8001dbc <HAL_SPI_MspInit+0x184>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d153      	bne.n	8001d02 <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
 8001c5e:	4b58      	ldr	r3, [pc, #352]	; (8001dc0 <HAL_SPI_MspInit+0x188>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	4a57      	ldr	r2, [pc, #348]	; (8001dc0 <HAL_SPI_MspInit+0x188>)
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6a:	4b55      	ldr	r3, [pc, #340]	; (8001dc0 <HAL_SPI_MspInit+0x188>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c72:	623b      	str	r3, [r7, #32]
 8001c74:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	4b51      	ldr	r3, [pc, #324]	; (8001dc0 <HAL_SPI_MspInit+0x188>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a50      	ldr	r2, [pc, #320]	; (8001dc0 <HAL_SPI_MspInit+0x188>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b4e      	ldr	r3, [pc, #312]	; (8001dc0 <HAL_SPI_MspInit+0x188>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	4b4a      	ldr	r3, [pc, #296]	; (8001dc0 <HAL_SPI_MspInit+0x188>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a49      	ldr	r2, [pc, #292]	; (8001dc0 <HAL_SPI_MspInit+0x188>)
 8001c9c:	f043 0302 	orr.w	r3, r3, #2
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_SPI_MspInit+0x188>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	61bb      	str	r3, [r7, #24]
 8001cac:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cae:	230c      	movs	r3, #12
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cbe:	2305      	movs	r3, #5
 8001cc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	483e      	ldr	r0, [pc, #248]	; (8001dc4 <HAL_SPI_MspInit+0x18c>)
 8001cca:	f001 fce1 	bl	8003690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ce0:	2305      	movs	r3, #5
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4837      	ldr	r0, [pc, #220]	; (8001dc8 <HAL_SPI_MspInit+0x190>)
 8001cec:	f001 fcd0 	bl	8003690 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	2024      	movs	r0, #36	; 0x24
 8001cf6:	f001 f892 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001cfa:	2024      	movs	r0, #36	; 0x24
 8001cfc:	f001 f8ab 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d00:	e058      	b.n	8001db4 <HAL_SPI_MspInit+0x17c>
  else if(hspi->Instance==SPI3)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a31      	ldr	r2, [pc, #196]	; (8001dcc <HAL_SPI_MspInit+0x194>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d153      	bne.n	8001db4 <HAL_SPI_MspInit+0x17c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <HAL_SPI_MspInit+0x188>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	4a2a      	ldr	r2, [pc, #168]	; (8001dc0 <HAL_SPI_MspInit+0x188>)
 8001d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1c:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <HAL_SPI_MspInit+0x188>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <HAL_SPI_MspInit+0x188>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	4a23      	ldr	r2, [pc, #140]	; (8001dc0 <HAL_SPI_MspInit+0x188>)
 8001d32:	f043 0302 	orr.w	r3, r3, #2
 8001d36:	6313      	str	r3, [r2, #48]	; 0x30
 8001d38:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <HAL_SPI_MspInit+0x188>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <HAL_SPI_MspInit+0x188>)
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <HAL_SPI_MspInit+0x188>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	6313      	str	r3, [r2, #48]	; 0x30
 8001d54:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <HAL_SPI_MspInit+0x188>)
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001d72:	2307      	movs	r3, #7
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4812      	ldr	r0, [pc, #72]	; (8001dc8 <HAL_SPI_MspInit+0x190>)
 8001d7e:	f001 fc87 	bl	8003690 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d90:	2303      	movs	r3, #3
 8001d92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d94:	2306      	movs	r3, #6
 8001d96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4809      	ldr	r0, [pc, #36]	; (8001dc4 <HAL_SPI_MspInit+0x18c>)
 8001da0:	f001 fc76 	bl	8003690 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2100      	movs	r1, #0
 8001da8:	2033      	movs	r0, #51	; 0x33
 8001daa:	f001 f838 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001dae:	2033      	movs	r0, #51	; 0x33
 8001db0:	f001 f851 	bl	8002e56 <HAL_NVIC_EnableIRQ>
}
 8001db4:	bf00      	nop
 8001db6:	3738      	adds	r7, #56	; 0x38
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40003800 	.word	0x40003800
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020800 	.word	0x40020800
 8001dc8:	40020400 	.word	0x40020400
 8001dcc:	40003c00 	.word	0x40003c00

08001dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <HAL_TIM_Base_MspInit+0x80>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d116      	bne.n	8001e10 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_TIM_Base_MspInit+0x84>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	4a1a      	ldr	r2, [pc, #104]	; (8001e54 <HAL_TIM_Base_MspInit+0x84>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	6413      	str	r3, [r2, #64]	; 0x40
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <HAL_TIM_Base_MspInit+0x84>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2100      	movs	r1, #0
 8001e02:	201d      	movs	r0, #29
 8001e04:	f001 f80b 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e08:	201d      	movs	r0, #29
 8001e0a:	f001 f824 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001e0e:	e01a      	b.n	8001e46 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a10      	ldr	r2, [pc, #64]	; (8001e58 <HAL_TIM_Base_MspInit+0x88>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d115      	bne.n	8001e46 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_TIM_Base_MspInit+0x84>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	4a0c      	ldr	r2, [pc, #48]	; (8001e54 <HAL_TIM_Base_MspInit+0x84>)
 8001e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e28:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_TIM_Base_MspInit+0x84>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	201a      	movs	r0, #26
 8001e3c:	f000 ffef 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001e40:	201a      	movs	r0, #26
 8001e42:	f001 f808 	bl	8002e56 <HAL_NVIC_EnableIRQ>
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40000400 	.word	0x40000400
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40014800 	.word	0x40014800

08001e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08c      	sub	sp, #48	; 0x30
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 031c 	add.w	r3, r7, #28
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a64      	ldr	r2, [pc, #400]	; (800200c <HAL_UART_MspInit+0x1b0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	f040 8089 	bne.w	8001f92 <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e80:	2300      	movs	r3, #0
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	4b62      	ldr	r3, [pc, #392]	; (8002010 <HAL_UART_MspInit+0x1b4>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	4a61      	ldr	r2, [pc, #388]	; (8002010 <HAL_UART_MspInit+0x1b4>)
 8001e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e90:	4b5f      	ldr	r3, [pc, #380]	; (8002010 <HAL_UART_MspInit+0x1b4>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	4b5b      	ldr	r3, [pc, #364]	; (8002010 <HAL_UART_MspInit+0x1b4>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	4a5a      	ldr	r2, [pc, #360]	; (8002010 <HAL_UART_MspInit+0x1b4>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8001eac:	4b58      	ldr	r3, [pc, #352]	; (8002010 <HAL_UART_MspInit+0x1b4>)
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001eb8:	230c      	movs	r3, #12
 8001eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ec8:	2307      	movs	r3, #7
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4850      	ldr	r0, [pc, #320]	; (8002014 <HAL_UART_MspInit+0x1b8>)
 8001ed4:	f001 fbdc 	bl	8003690 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001ed8:	4b4f      	ldr	r3, [pc, #316]	; (8002018 <HAL_UART_MspInit+0x1bc>)
 8001eda:	4a50      	ldr	r2, [pc, #320]	; (800201c <HAL_UART_MspInit+0x1c0>)
 8001edc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001ede:	4b4e      	ldr	r3, [pc, #312]	; (8002018 <HAL_UART_MspInit+0x1bc>)
 8001ee0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ee4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ee6:	4b4c      	ldr	r3, [pc, #304]	; (8002018 <HAL_UART_MspInit+0x1bc>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eec:	4b4a      	ldr	r3, [pc, #296]	; (8002018 <HAL_UART_MspInit+0x1bc>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ef2:	4b49      	ldr	r3, [pc, #292]	; (8002018 <HAL_UART_MspInit+0x1bc>)
 8001ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ef8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001efa:	4b47      	ldr	r3, [pc, #284]	; (8002018 <HAL_UART_MspInit+0x1bc>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f00:	4b45      	ldr	r3, [pc, #276]	; (8002018 <HAL_UART_MspInit+0x1bc>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001f06:	4b44      	ldr	r3, [pc, #272]	; (8002018 <HAL_UART_MspInit+0x1bc>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f0c:	4b42      	ldr	r3, [pc, #264]	; (8002018 <HAL_UART_MspInit+0x1bc>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f12:	4b41      	ldr	r3, [pc, #260]	; (8002018 <HAL_UART_MspInit+0x1bc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f18:	483f      	ldr	r0, [pc, #252]	; (8002018 <HAL_UART_MspInit+0x1bc>)
 8001f1a:	f000 ffb7 	bl	8002e8c <HAL_DMA_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001f24:	f7ff fd52 	bl	80019cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a3b      	ldr	r2, [pc, #236]	; (8002018 <HAL_UART_MspInit+0x1bc>)
 8001f2c:	639a      	str	r2, [r3, #56]	; 0x38
 8001f2e:	4a3a      	ldr	r2, [pc, #232]	; (8002018 <HAL_UART_MspInit+0x1bc>)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001f34:	4b3a      	ldr	r3, [pc, #232]	; (8002020 <HAL_UART_MspInit+0x1c4>)
 8001f36:	4a3b      	ldr	r2, [pc, #236]	; (8002024 <HAL_UART_MspInit+0x1c8>)
 8001f38:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001f3a:	4b39      	ldr	r3, [pc, #228]	; (8002020 <HAL_UART_MspInit+0x1c4>)
 8001f3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f40:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f42:	4b37      	ldr	r3, [pc, #220]	; (8002020 <HAL_UART_MspInit+0x1c4>)
 8001f44:	2240      	movs	r2, #64	; 0x40
 8001f46:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f48:	4b35      	ldr	r3, [pc, #212]	; (8002020 <HAL_UART_MspInit+0x1c4>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f4e:	4b34      	ldr	r3, [pc, #208]	; (8002020 <HAL_UART_MspInit+0x1c4>)
 8001f50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f54:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f56:	4b32      	ldr	r3, [pc, #200]	; (8002020 <HAL_UART_MspInit+0x1c4>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f5c:	4b30      	ldr	r3, [pc, #192]	; (8002020 <HAL_UART_MspInit+0x1c4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001f62:	4b2f      	ldr	r3, [pc, #188]	; (8002020 <HAL_UART_MspInit+0x1c4>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f68:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <HAL_UART_MspInit+0x1c4>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f6e:	4b2c      	ldr	r3, [pc, #176]	; (8002020 <HAL_UART_MspInit+0x1c4>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f74:	482a      	ldr	r0, [pc, #168]	; (8002020 <HAL_UART_MspInit+0x1c4>)
 8001f76:	f000 ff89 	bl	8002e8c <HAL_DMA_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001f80:	f7ff fd24 	bl	80019cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a26      	ldr	r2, [pc, #152]	; (8002020 <HAL_UART_MspInit+0x1c4>)
 8001f88:	635a      	str	r2, [r3, #52]	; 0x34
 8001f8a:	4a25      	ldr	r2, [pc, #148]	; (8002020 <HAL_UART_MspInit+0x1c4>)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001f90:	e038      	b.n	8002004 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART6)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a24      	ldr	r2, [pc, #144]	; (8002028 <HAL_UART_MspInit+0x1cc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d133      	bne.n	8002004 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_UART_MspInit+0x1b4>)
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa4:	4a1a      	ldr	r2, [pc, #104]	; (8002010 <HAL_UART_MspInit+0x1b4>)
 8001fa6:	f043 0320 	orr.w	r3, r3, #32
 8001faa:	6453      	str	r3, [r2, #68]	; 0x44
 8001fac:	4b18      	ldr	r3, [pc, #96]	; (8002010 <HAL_UART_MspInit+0x1b4>)
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <HAL_UART_MspInit+0x1b4>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	4a13      	ldr	r2, [pc, #76]	; (8002010 <HAL_UART_MspInit+0x1b4>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_UART_MspInit+0x1b4>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fd4:	2340      	movs	r3, #64	; 0x40
 8001fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd8:	2312      	movs	r3, #18
 8001fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	4619      	mov	r1, r3
 8001fee:	480f      	ldr	r0, [pc, #60]	; (800202c <HAL_UART_MspInit+0x1d0>)
 8001ff0:	f001 fb4e 	bl	8003690 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2047      	movs	r0, #71	; 0x47
 8001ffa:	f000 ff10 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001ffe:	2047      	movs	r0, #71	; 0x47
 8002000:	f000 ff29 	bl	8002e56 <HAL_NVIC_EnableIRQ>
}
 8002004:	bf00      	nop
 8002006:	3730      	adds	r7, #48	; 0x30
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40004400 	.word	0x40004400
 8002010:	40023800 	.word	0x40023800
 8002014:	40020000 	.word	0x40020000
 8002018:	20000720 	.word	0x20000720
 800201c:	40026088 	.word	0x40026088
 8002020:	20000780 	.word	0x20000780
 8002024:	400260a0 	.word	0x400260a0
 8002028:	40011400 	.word	0x40011400
 800202c:	40020800 	.word	0x40020800

08002030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002034:	e7fe      	b.n	8002034 <NMI_Handler+0x4>

08002036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203a:	e7fe      	b.n	800203a <HardFault_Handler+0x4>

0800203c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <MemManage_Handler+0x4>

08002042 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <BusFault_Handler+0x4>

08002048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <UsageFault_Handler+0x4>

0800204e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800207c:	f000 f9ae 	bl	80023dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}

08002084 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <DMA1_Stream5_IRQHandler+0x10>)
 800208a:	f001 f897 	bl	80031bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000720 	.word	0x20000720

08002098 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <DMA1_Stream6_IRQHandler+0x10>)
 800209e:	f001 f88d 	bl	80031bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000780 	.word	0x20000780

080020ac <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80020b2:	f003 fb24 	bl	80056fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000650 	.word	0x20000650

080020c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020c4:	4802      	ldr	r0, [pc, #8]	; (80020d0 <TIM3_IRQHandler+0x10>)
 80020c6:	f003 fb1a 	bl	80056fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000608 	.word	0x20000608

080020d4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <SPI2_IRQHandler+0x10>)
 80020da:	f003 f9a3 	bl	8005424 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000558 	.word	0x20000558

080020e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80020ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020f0:	f001 fc86 	bl	8003a00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <SPI3_IRQHandler+0x10>)
 80020fe:	f003 f991 	bl	8005424 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200005b0 	.word	0x200005b0

0800210c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <DMA2_Stream0_IRQHandler+0x10>)
 8002112:	f001 f853 	bl	80031bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000484 	.word	0x20000484

08002120 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <USART6_IRQHandler+0x10>)
 8002126:	f003 ffb1 	bl	800608c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200006dc 	.word	0x200006dc

08002134 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
	return 1;
 8002138:	2301      	movs	r3, #1
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <_kill>:

int _kill(int pid, int sig)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800214e:	f004 fed1 	bl	8006ef4 <__errno>
 8002152:	4603      	mov	r3, r0
 8002154:	2216      	movs	r2, #22
 8002156:	601a      	str	r2, [r3, #0]
	return -1;
 8002158:	f04f 33ff 	mov.w	r3, #4294967295
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <_exit>:

void _exit (int status)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800216c:	f04f 31ff 	mov.w	r1, #4294967295
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ffe7 	bl	8002144 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002176:	e7fe      	b.n	8002176 <_exit+0x12>

08002178 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	e00a      	b.n	80021a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800218a:	f3af 8000 	nop.w
 800218e:	4601      	mov	r1, r0
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	60ba      	str	r2, [r7, #8]
 8002196:	b2ca      	uxtb	r2, r1
 8002198:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	3301      	adds	r3, #1
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	dbf0      	blt.n	800218a <_read+0x12>
	}

return len;
 80021a8:	687b      	ldr	r3, [r7, #4]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	e009      	b.n	80021d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	60ba      	str	r2, [r7, #8]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	3301      	adds	r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	429a      	cmp	r2, r3
 80021de:	dbf1      	blt.n	80021c4 <_write+0x12>
	}
	return len;
 80021e0:	687b      	ldr	r3, [r7, #4]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <_close>:

int _close(int file)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
	return -1;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002212:	605a      	str	r2, [r3, #4]
	return 0;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <_isatty>:

int _isatty(int file)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
	return 1;
 800222a:	2301      	movs	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
	return 0;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800225c:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <_sbrk+0x5c>)
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <_sbrk+0x60>)
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002268:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <_sbrk+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d102      	bne.n	8002276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <_sbrk+0x64>)
 8002272:	4a12      	ldr	r2, [pc, #72]	; (80022bc <_sbrk+0x68>)
 8002274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <_sbrk+0x64>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	429a      	cmp	r2, r3
 8002282:	d207      	bcs.n	8002294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002284:	f004 fe36 	bl	8006ef4 <__errno>
 8002288:	4603      	mov	r3, r0
 800228a:	220c      	movs	r2, #12
 800228c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	e009      	b.n	80022a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <_sbrk+0x64>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <_sbrk+0x64>)
 80022a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022a6:	68fb      	ldr	r3, [r7, #12]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20020000 	.word	0x20020000
 80022b4:	00000400 	.word	0x00000400
 80022b8:	20000d14 	.word	0x20000d14
 80022bc:	20000d30 	.word	0x20000d30

080022c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <SystemInit+0x20>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <SystemInit+0x20>)
 80022cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800231c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022e8:	480d      	ldr	r0, [pc, #52]	; (8002320 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022ea:	490e      	ldr	r1, [pc, #56]	; (8002324 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022ec:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f0:	e002      	b.n	80022f8 <LoopCopyDataInit>

080022f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f6:	3304      	adds	r3, #4

080022f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022fc:	d3f9      	bcc.n	80022f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fe:	4a0b      	ldr	r2, [pc, #44]	; (800232c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002300:	4c0b      	ldr	r4, [pc, #44]	; (8002330 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002304:	e001      	b.n	800230a <LoopFillZerobss>

08002306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002308:	3204      	adds	r2, #4

0800230a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800230c:	d3fb      	bcc.n	8002306 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800230e:	f7ff ffd7 	bl	80022c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002312:	f004 fdf5 	bl	8006f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002316:	f7fe fded 	bl	8000ef4 <main>
  bx  lr    
 800231a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800231c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002324:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 8002328:	0800a30c 	.word	0x0800a30c
  ldr r2, =_sbss
 800232c:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 8002330:	20000d2c 	.word	0x20000d2c

08002334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002334:	e7fe      	b.n	8002334 <ADC_IRQHandler>
	...

08002338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800233c:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <HAL_Init+0x40>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0d      	ldr	r2, [pc, #52]	; (8002378 <HAL_Init+0x40>)
 8002342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002346:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_Init+0x40>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <HAL_Init+0x40>)
 800234e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002352:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <HAL_Init+0x40>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a07      	ldr	r2, [pc, #28]	; (8002378 <HAL_Init+0x40>)
 800235a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002360:	2003      	movs	r0, #3
 8002362:	f000 fd51 	bl	8002e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002366:	2000      	movs	r0, #0
 8002368:	f000 f808 	bl	800237c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800236c:	f7ff fb34 	bl	80019d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023c00 	.word	0x40023c00

0800237c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002384:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_InitTick+0x54>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_InitTick+0x58>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	4619      	mov	r1, r3
 800238e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002392:	fbb3 f3f1 	udiv	r3, r3, r1
 8002396:	fbb2 f3f3 	udiv	r3, r2, r3
 800239a:	4618      	mov	r0, r3
 800239c:	f000 fd69 	bl	8002e72 <HAL_SYSTICK_Config>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e00e      	b.n	80023c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b0f      	cmp	r3, #15
 80023ae:	d80a      	bhi.n	80023c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b0:	2200      	movs	r2, #0
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295
 80023b8:	f000 fd31 	bl	8002e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023bc:	4a06      	ldr	r2, [pc, #24]	; (80023d8 <HAL_InitTick+0x5c>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e000      	b.n	80023c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000244 	.word	0x20000244
 80023d4:	2000024c 	.word	0x2000024c
 80023d8:	20000248 	.word	0x20000248

080023dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_IncTick+0x20>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_IncTick+0x24>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	4a04      	ldr	r2, [pc, #16]	; (8002400 <HAL_IncTick+0x24>)
 80023ee:	6013      	str	r3, [r2, #0]
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	2000024c 	.word	0x2000024c
 8002400:	20000d18 	.word	0x20000d18

08002404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return uwTick;
 8002408:	4b03      	ldr	r3, [pc, #12]	; (8002418 <HAL_GetTick+0x14>)
 800240a:	681b      	ldr	r3, [r3, #0]
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20000d18 	.word	0x20000d18

0800241c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002424:	f7ff ffee 	bl	8002404 <HAL_GetTick>
 8002428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d005      	beq.n	8002442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_Delay+0x44>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4413      	add	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002442:	bf00      	nop
 8002444:	f7ff ffde 	bl	8002404 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	429a      	cmp	r2, r3
 8002452:	d8f7      	bhi.n	8002444 <HAL_Delay+0x28>
  {
  }
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	2000024c 	.word	0x2000024c

08002464 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e033      	b.n	80024e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff fad0 	bl	8001a28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d118      	bne.n	80024d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024aa:	f023 0302 	bic.w	r3, r3, #2
 80024ae:	f043 0202 	orr.w	r2, r3, #2
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fa58 	bl	800296c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f023 0303 	bic.w	r3, r3, #3
 80024ca:	f043 0201 	orr.w	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40
 80024d2:	e001      	b.n	80024d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_ADC_Start_DMA+0x1e>
 8002506:	2302      	movs	r3, #2
 8002508:	e0ce      	b.n	80026a8 <HAL_ADC_Start_DMA+0x1bc>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b01      	cmp	r3, #1
 800251e:	d018      	beq.n	8002552 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002530:	4b5f      	ldr	r3, [pc, #380]	; (80026b0 <HAL_ADC_Start_DMA+0x1c4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a5f      	ldr	r2, [pc, #380]	; (80026b4 <HAL_ADC_Start_DMA+0x1c8>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	0c9a      	lsrs	r2, r3, #18
 800253c:	4613      	mov	r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4413      	add	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002544:	e002      	b.n	800254c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	3b01      	subs	r3, #1
 800254a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f9      	bne.n	8002546 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002560:	d107      	bne.n	8002572 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002570:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	f040 8086 	bne.w	800268e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c0:	d106      	bne.n	80025d0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	f023 0206 	bic.w	r2, r3, #6
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	645a      	str	r2, [r3, #68]	; 0x44
 80025ce:	e002      	b.n	80025d6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025de:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <HAL_ADC_Start_DMA+0x1cc>)
 80025e0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e6:	4a35      	ldr	r2, [pc, #212]	; (80026bc <HAL_ADC_Start_DMA+0x1d0>)
 80025e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ee:	4a34      	ldr	r2, [pc, #208]	; (80026c0 <HAL_ADC_Start_DMA+0x1d4>)
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f6:	4a33      	ldr	r2, [pc, #204]	; (80026c4 <HAL_ADC_Start_DMA+0x1d8>)
 80025f8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002602:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002612:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002622:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	334c      	adds	r3, #76	; 0x4c
 800262e:	4619      	mov	r1, r3
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f000 fcd8 	bl	8002fe8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10f      	bne.n	8002664 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d129      	bne.n	80026a6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002660:	609a      	str	r2, [r3, #8]
 8002662:	e020      	b.n	80026a6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a17      	ldr	r2, [pc, #92]	; (80026c8 <HAL_ADC_Start_DMA+0x1dc>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d11b      	bne.n	80026a6 <HAL_ADC_Start_DMA+0x1ba>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d114      	bne.n	80026a6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	e00b      	b.n	80026a6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f043 0210 	orr.w	r2, r3, #16
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	f043 0201 	orr.w	r2, r3, #1
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000244 	.word	0x20000244
 80026b4:	431bde83 	.word	0x431bde83
 80026b8:	40012300 	.word	0x40012300
 80026bc:	08002b65 	.word	0x08002b65
 80026c0:	08002c1f 	.word	0x08002c1f
 80026c4:	08002c3b 	.word	0x08002c3b
 80026c8:	40012000 	.word	0x40012000

080026cc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x1c>
 8002720:	2302      	movs	r3, #2
 8002722:	e113      	b.n	800294c <HAL_ADC_ConfigChannel+0x244>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b09      	cmp	r3, #9
 8002732:	d925      	bls.n	8002780 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68d9      	ldr	r1, [r3, #12]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	b29b      	uxth	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	3b1e      	subs	r3, #30
 800274a:	2207      	movs	r2, #7
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43da      	mvns	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	400a      	ands	r2, r1
 8002758:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68d9      	ldr	r1, [r3, #12]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	b29b      	uxth	r3, r3
 800276a:	4618      	mov	r0, r3
 800276c:	4603      	mov	r3, r0
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4403      	add	r3, r0
 8002772:	3b1e      	subs	r3, #30
 8002774:	409a      	lsls	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	e022      	b.n	80027c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6919      	ldr	r1, [r3, #16]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	461a      	mov	r2, r3
 800278e:	4613      	mov	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4413      	add	r3, r2
 8002794:	2207      	movs	r2, #7
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	400a      	ands	r2, r1
 80027a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6919      	ldr	r1, [r3, #16]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	4618      	mov	r0, r3
 80027b6:	4603      	mov	r3, r0
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4403      	add	r3, r0
 80027bc:	409a      	lsls	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	d824      	bhi.n	8002818 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	3b05      	subs	r3, #5
 80027e0:	221f      	movs	r2, #31
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43da      	mvns	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	400a      	ands	r2, r1
 80027ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	4618      	mov	r0, r3
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	3b05      	subs	r3, #5
 800280a:	fa00 f203 	lsl.w	r2, r0, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	635a      	str	r2, [r3, #52]	; 0x34
 8002816:	e04c      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b0c      	cmp	r3, #12
 800281e:	d824      	bhi.n	800286a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	3b23      	subs	r3, #35	; 0x23
 8002832:	221f      	movs	r2, #31
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43da      	mvns	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	400a      	ands	r2, r1
 8002840:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	b29b      	uxth	r3, r3
 800284e:	4618      	mov	r0, r3
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	3b23      	subs	r3, #35	; 0x23
 800285c:	fa00 f203 	lsl.w	r2, r0, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
 8002868:	e023      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	3b41      	subs	r3, #65	; 0x41
 800287c:	221f      	movs	r2, #31
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43da      	mvns	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	400a      	ands	r2, r1
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	4618      	mov	r0, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	3b41      	subs	r3, #65	; 0x41
 80028a6:	fa00 f203 	lsl.w	r2, r0, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028b2:	4b29      	ldr	r3, [pc, #164]	; (8002958 <HAL_ADC_ConfigChannel+0x250>)
 80028b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a28      	ldr	r2, [pc, #160]	; (800295c <HAL_ADC_ConfigChannel+0x254>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d10f      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x1d8>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b12      	cmp	r3, #18
 80028c6:	d10b      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1d      	ldr	r2, [pc, #116]	; (800295c <HAL_ADC_ConfigChannel+0x254>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d12b      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x23a>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a1c      	ldr	r2, [pc, #112]	; (8002960 <HAL_ADC_ConfigChannel+0x258>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d003      	beq.n	80028fc <HAL_ADC_ConfigChannel+0x1f4>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b11      	cmp	r3, #17
 80028fa:	d122      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a11      	ldr	r2, [pc, #68]	; (8002960 <HAL_ADC_ConfigChannel+0x258>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d111      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800291e:	4b11      	ldr	r3, [pc, #68]	; (8002964 <HAL_ADC_ConfigChannel+0x25c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a11      	ldr	r2, [pc, #68]	; (8002968 <HAL_ADC_ConfigChannel+0x260>)
 8002924:	fba2 2303 	umull	r2, r3, r2, r3
 8002928:	0c9a      	lsrs	r2, r3, #18
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002934:	e002      	b.n	800293c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	3b01      	subs	r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f9      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	40012300 	.word	0x40012300
 800295c:	40012000 	.word	0x40012000
 8002960:	10000012 	.word	0x10000012
 8002964:	20000244 	.word	0x20000244
 8002968:	431bde83 	.word	0x431bde83

0800296c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002974:	4b79      	ldr	r3, [pc, #484]	; (8002b5c <ADC_Init+0x1f0>)
 8002976:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	431a      	orrs	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6859      	ldr	r1, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	021a      	lsls	r2, r3, #8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6859      	ldr	r1, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6899      	ldr	r1, [r3, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fe:	4a58      	ldr	r2, [pc, #352]	; (8002b60 <ADC_Init+0x1f4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d022      	beq.n	8002a4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6899      	ldr	r1, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6899      	ldr	r1, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	e00f      	b.n	8002a6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0202 	bic.w	r2, r2, #2
 8002a78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6899      	ldr	r1, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	7e1b      	ldrb	r3, [r3, #24]
 8002a84:	005a      	lsls	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01b      	beq.n	8002ad0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aa6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ab6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6859      	ldr	r1, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	035a      	lsls	r2, r3, #13
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	e007      	b.n	8002ae0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ade:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002aee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	051a      	lsls	r2, r3, #20
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6899      	ldr	r1, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b22:	025a      	lsls	r2, r3, #9
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6899      	ldr	r1, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	029a      	lsls	r2, r3, #10
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	609a      	str	r2, [r3, #8]
}
 8002b50:	bf00      	nop
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	40012300 	.word	0x40012300
 8002b60:	0f000001 	.word	0x0f000001

08002b64 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b70:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d13c      	bne.n	8002bf8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d12b      	bne.n	8002bf0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d127      	bne.n	8002bf0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d006      	beq.n	8002bbc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d119      	bne.n	8002bf0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0220 	bic.w	r2, r2, #32
 8002bca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d105      	bne.n	8002bf0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	f043 0201 	orr.w	r2, r3, #1
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f7ff fd6b 	bl	80026cc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bf6:	e00e      	b.n	8002c16 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f7ff fd75 	bl	80026f4 <HAL_ADC_ErrorCallback>
}
 8002c0a:	e004      	b.n	8002c16 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	4798      	blx	r3
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f7ff fd57 	bl	80026e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c32:	bf00      	nop
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2240      	movs	r2, #64	; 0x40
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f043 0204 	orr.w	r2, r3, #4
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f7ff fd4a 	bl	80026f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <__NVIC_SetPriorityGrouping+0x44>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c84:	4013      	ands	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c9a:	4a04      	ldr	r2, [pc, #16]	; (8002cac <__NVIC_SetPriorityGrouping+0x44>)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	60d3      	str	r3, [r2, #12]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb4:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	0a1b      	lsrs	r3, r3, #8
 8002cba:	f003 0307 	and.w	r3, r3, #7
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	db0b      	blt.n	8002cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	f003 021f 	and.w	r2, r3, #31
 8002ce4:	4907      	ldr	r1, [pc, #28]	; (8002d04 <__NVIC_EnableIRQ+0x38>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	2001      	movs	r0, #1
 8002cee:	fa00 f202 	lsl.w	r2, r0, r2
 8002cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000e100 	.word	0xe000e100

08002d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6039      	str	r1, [r7, #0]
 8002d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	db0a      	blt.n	8002d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	490c      	ldr	r1, [pc, #48]	; (8002d54 <__NVIC_SetPriority+0x4c>)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	0112      	lsls	r2, r2, #4
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d30:	e00a      	b.n	8002d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4908      	ldr	r1, [pc, #32]	; (8002d58 <__NVIC_SetPriority+0x50>)
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	3b04      	subs	r3, #4
 8002d40:	0112      	lsls	r2, r2, #4
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	440b      	add	r3, r1
 8002d46:	761a      	strb	r2, [r3, #24]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000e100 	.word	0xe000e100
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b089      	sub	sp, #36	; 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f1c3 0307 	rsb	r3, r3, #7
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	bf28      	it	cs
 8002d7a:	2304      	movcs	r3, #4
 8002d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3304      	adds	r3, #4
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d902      	bls.n	8002d8c <NVIC_EncodePriority+0x30>
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3b03      	subs	r3, #3
 8002d8a:	e000      	b.n	8002d8e <NVIC_EncodePriority+0x32>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d90:	f04f 32ff 	mov.w	r2, #4294967295
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	401a      	ands	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da4:	f04f 31ff 	mov.w	r1, #4294967295
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	43d9      	mvns	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	4313      	orrs	r3, r2
         );
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3724      	adds	r7, #36	; 0x24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
	...

08002dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dd4:	d301      	bcc.n	8002dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00f      	b.n	8002dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dda:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <SysTick_Config+0x40>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002de2:	210f      	movs	r1, #15
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295
 8002de8:	f7ff ff8e 	bl	8002d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <SysTick_Config+0x40>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002df2:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <SysTick_Config+0x40>)
 8002df4:	2207      	movs	r2, #7
 8002df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	e000e010 	.word	0xe000e010

08002e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ff29 	bl	8002c68 <__NVIC_SetPriorityGrouping>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	4603      	mov	r3, r0
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e30:	f7ff ff3e 	bl	8002cb0 <__NVIC_GetPriorityGrouping>
 8002e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	6978      	ldr	r0, [r7, #20]
 8002e3c:	f7ff ff8e 	bl	8002d5c <NVIC_EncodePriority>
 8002e40:	4602      	mov	r2, r0
 8002e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff5d 	bl	8002d08 <__NVIC_SetPriority>
}
 8002e4e:	bf00      	nop
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff ff31 	bl	8002ccc <__NVIC_EnableIRQ>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff ffa2 	bl	8002dc4 <SysTick_Config>
 8002e80:	4603      	mov	r3, r0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e98:	f7ff fab4 	bl	8002404 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e099      	b.n	8002fdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec8:	e00f      	b.n	8002eea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eca:	f7ff fa9b 	bl	8002404 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d908      	bls.n	8002eea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e078      	b.n	8002fdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1e8      	bne.n	8002eca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4b38      	ldr	r3, [pc, #224]	; (8002fe4 <HAL_DMA_Init+0x158>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d107      	bne.n	8002f54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f023 0307 	bic.w	r3, r3, #7
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d117      	bne.n	8002fae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00e      	beq.n	8002fae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fb01 	bl	8003598 <DMA_CheckFifoParam>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2240      	movs	r2, #64	; 0x40
 8002fa0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002faa:	2301      	movs	r3, #1
 8002fac:	e016      	b.n	8002fdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fab8 	bl	800352c <DMA_CalcBaseAndBitshift>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc4:	223f      	movs	r2, #63	; 0x3f
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	f010803f 	.word	0xf010803f

08002fe8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_DMA_Start_IT+0x26>
 800300a:	2302      	movs	r3, #2
 800300c:	e040      	b.n	8003090 <HAL_DMA_Start_IT+0xa8>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b01      	cmp	r3, #1
 8003020:	d12f      	bne.n	8003082 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2202      	movs	r2, #2
 8003026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fa4a 	bl	80034d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003040:	223f      	movs	r2, #63	; 0x3f
 8003042:	409a      	lsls	r2, r3
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0216 	orr.w	r2, r2, #22
 8003056:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d007      	beq.n	8003070 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0208 	orr.w	r2, r2, #8
 800306e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	e005      	b.n	800308e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800308a:	2302      	movs	r3, #2
 800308c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800308e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030a6:	f7ff f9ad 	bl	8002404 <HAL_GetTick>
 80030aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d008      	beq.n	80030ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2280      	movs	r2, #128	; 0x80
 80030bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e052      	b.n	8003170 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0216 	bic.w	r2, r2, #22
 80030d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d103      	bne.n	80030fa <HAL_DMA_Abort+0x62>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0208 	bic.w	r2, r2, #8
 8003108:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0201 	bic.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800311a:	e013      	b.n	8003144 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800311c:	f7ff f972 	bl	8002404 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b05      	cmp	r3, #5
 8003128:	d90c      	bls.n	8003144 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2203      	movs	r2, #3
 8003134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e015      	b.n	8003170 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1e4      	bne.n	800311c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003156:	223f      	movs	r2, #63	; 0x3f
 8003158:	409a      	lsls	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d004      	beq.n	8003196 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2280      	movs	r2, #128	; 0x80
 8003190:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e00c      	b.n	80031b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2205      	movs	r2, #5
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031c8:	4b8e      	ldr	r3, [pc, #568]	; (8003404 <HAL_DMA_IRQHandler+0x248>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a8e      	ldr	r2, [pc, #568]	; (8003408 <HAL_DMA_IRQHandler+0x24c>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	0a9b      	lsrs	r3, r3, #10
 80031d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e6:	2208      	movs	r2, #8
 80031e8:	409a      	lsls	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d01a      	beq.n	8003228 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d013      	beq.n	8003228 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0204 	bic.w	r2, r2, #4
 800320e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003214:	2208      	movs	r2, #8
 8003216:	409a      	lsls	r2, r3
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	f043 0201 	orr.w	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	2201      	movs	r2, #1
 800322e:	409a      	lsls	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d012      	beq.n	800325e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00b      	beq.n	800325e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	2201      	movs	r2, #1
 800324c:	409a      	lsls	r2, r3
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003256:	f043 0202 	orr.w	r2, r3, #2
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003262:	2204      	movs	r2, #4
 8003264:	409a      	lsls	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4013      	ands	r3, r2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d012      	beq.n	8003294 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00b      	beq.n	8003294 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003280:	2204      	movs	r2, #4
 8003282:	409a      	lsls	r2, r3
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328c:	f043 0204 	orr.w	r2, r3, #4
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	2210      	movs	r2, #16
 800329a:	409a      	lsls	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d043      	beq.n	800332c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d03c      	beq.n	800332c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b6:	2210      	movs	r2, #16
 80032b8:	409a      	lsls	r2, r3
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d018      	beq.n	80032fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d108      	bne.n	80032ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d024      	beq.n	800332c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	4798      	blx	r3
 80032ea:	e01f      	b.n	800332c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d01b      	beq.n	800332c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	4798      	blx	r3
 80032fc:	e016      	b.n	800332c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003308:	2b00      	cmp	r3, #0
 800330a:	d107      	bne.n	800331c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0208 	bic.w	r2, r2, #8
 800331a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003330:	2220      	movs	r2, #32
 8003332:	409a      	lsls	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4013      	ands	r3, r2
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 808f 	beq.w	800345c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8087 	beq.w	800345c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003352:	2220      	movs	r2, #32
 8003354:	409a      	lsls	r2, r3
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b05      	cmp	r3, #5
 8003364:	d136      	bne.n	80033d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0216 	bic.w	r2, r2, #22
 8003374:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003384:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	d103      	bne.n	8003396 <HAL_DMA_IRQHandler+0x1da>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003392:	2b00      	cmp	r3, #0
 8003394:	d007      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0208 	bic.w	r2, r2, #8
 80033a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033aa:	223f      	movs	r2, #63	; 0x3f
 80033ac:	409a      	lsls	r2, r3
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d07e      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	4798      	blx	r3
        }
        return;
 80033d2:	e079      	b.n	80034c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d01d      	beq.n	800341e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10d      	bne.n	800340c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d031      	beq.n	800345c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	4798      	blx	r3
 8003400:	e02c      	b.n	800345c <HAL_DMA_IRQHandler+0x2a0>
 8003402:	bf00      	nop
 8003404:	20000244 	.word	0x20000244
 8003408:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003410:	2b00      	cmp	r3, #0
 8003412:	d023      	beq.n	800345c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	4798      	blx	r3
 800341c:	e01e      	b.n	800345c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10f      	bne.n	800344c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0210 	bic.w	r2, r2, #16
 800343a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003460:	2b00      	cmp	r3, #0
 8003462:	d032      	beq.n	80034ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d022      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2205      	movs	r2, #5
 8003474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	3301      	adds	r3, #1
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	429a      	cmp	r2, r3
 8003492:	d307      	bcc.n	80034a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f2      	bne.n	8003488 <HAL_DMA_IRQHandler+0x2cc>
 80034a2:	e000      	b.n	80034a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	4798      	blx	r3
 80034c6:	e000      	b.n	80034ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80034c8:	bf00      	nop
    }
  }
}
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b40      	cmp	r3, #64	; 0x40
 80034fc:	d108      	bne.n	8003510 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800350e:	e007      	b.n	8003520 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	60da      	str	r2, [r3, #12]
}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	3b10      	subs	r3, #16
 800353c:	4a14      	ldr	r2, [pc, #80]	; (8003590 <DMA_CalcBaseAndBitshift+0x64>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	091b      	lsrs	r3, r3, #4
 8003544:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003546:	4a13      	ldr	r2, [pc, #76]	; (8003594 <DMA_CalcBaseAndBitshift+0x68>)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4413      	add	r3, r2
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b03      	cmp	r3, #3
 8003558:	d909      	bls.n	800356e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003562:	f023 0303 	bic.w	r3, r3, #3
 8003566:	1d1a      	adds	r2, r3, #4
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	659a      	str	r2, [r3, #88]	; 0x58
 800356c:	e007      	b.n	800357e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003576:	f023 0303 	bic.w	r3, r3, #3
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	aaaaaaab 	.word	0xaaaaaaab
 8003594:	08009f1c 	.word	0x08009f1c

08003598 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d11f      	bne.n	80035f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d856      	bhi.n	8003666 <DMA_CheckFifoParam+0xce>
 80035b8:	a201      	add	r2, pc, #4	; (adr r2, 80035c0 <DMA_CheckFifoParam+0x28>)
 80035ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035be:	bf00      	nop
 80035c0:	080035d1 	.word	0x080035d1
 80035c4:	080035e3 	.word	0x080035e3
 80035c8:	080035d1 	.word	0x080035d1
 80035cc:	08003667 	.word	0x08003667
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d046      	beq.n	800366a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e0:	e043      	b.n	800366a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035ea:	d140      	bne.n	800366e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035f0:	e03d      	b.n	800366e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fa:	d121      	bne.n	8003640 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d837      	bhi.n	8003672 <DMA_CheckFifoParam+0xda>
 8003602:	a201      	add	r2, pc, #4	; (adr r2, 8003608 <DMA_CheckFifoParam+0x70>)
 8003604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003608:	08003619 	.word	0x08003619
 800360c:	0800361f 	.word	0x0800361f
 8003610:	08003619 	.word	0x08003619
 8003614:	08003631 	.word	0x08003631
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      break;
 800361c:	e030      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d025      	beq.n	8003676 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362e:	e022      	b.n	8003676 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003638:	d11f      	bne.n	800367a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800363e:	e01c      	b.n	800367a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d903      	bls.n	800364e <DMA_CheckFifoParam+0xb6>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b03      	cmp	r3, #3
 800364a:	d003      	beq.n	8003654 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800364c:	e018      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	73fb      	strb	r3, [r7, #15]
      break;
 8003652:	e015      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00e      	beq.n	800367e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]
      break;
 8003664:	e00b      	b.n	800367e <DMA_CheckFifoParam+0xe6>
      break;
 8003666:	bf00      	nop
 8003668:	e00a      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      break;
 800366a:	bf00      	nop
 800366c:	e008      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      break;
 800366e:	bf00      	nop
 8003670:	e006      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      break;
 8003672:	bf00      	nop
 8003674:	e004      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      break;
 8003676:	bf00      	nop
 8003678:	e002      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      break;   
 800367a:	bf00      	nop
 800367c:	e000      	b.n	8003680 <DMA_CheckFifoParam+0xe8>
      break;
 800367e:	bf00      	nop
    }
  } 
  
  return status; 
 8003680:	7bfb      	ldrb	r3, [r7, #15]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop

08003690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003690:	b480      	push	{r7}
 8003692:	b089      	sub	sp, #36	; 0x24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800369e:	2300      	movs	r3, #0
 80036a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	e159      	b.n	8003960 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036ac:	2201      	movs	r2, #1
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	f040 8148 	bne.w	800395a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d005      	beq.n	80036e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d130      	bne.n	8003744 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	2203      	movs	r2, #3
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4013      	ands	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003718:	2201      	movs	r2, #1
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	43db      	mvns	r3, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4013      	ands	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 0201 	and.w	r2, r3, #1
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	2b03      	cmp	r3, #3
 800374e:	d017      	beq.n	8003780 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	2203      	movs	r2, #3
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4313      	orrs	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d123      	bne.n	80037d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	08da      	lsrs	r2, r3, #3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3208      	adds	r2, #8
 8003794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	220f      	movs	r2, #15
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4013      	ands	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	08da      	lsrs	r2, r3, #3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3208      	adds	r2, #8
 80037ce:	69b9      	ldr	r1, [r7, #24]
 80037d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	2203      	movs	r2, #3
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0203 	and.w	r2, r3, #3
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 80a2 	beq.w	800395a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	4b57      	ldr	r3, [pc, #348]	; (8003978 <HAL_GPIO_Init+0x2e8>)
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	4a56      	ldr	r2, [pc, #344]	; (8003978 <HAL_GPIO_Init+0x2e8>)
 8003820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003824:	6453      	str	r3, [r2, #68]	; 0x44
 8003826:	4b54      	ldr	r3, [pc, #336]	; (8003978 <HAL_GPIO_Init+0x2e8>)
 8003828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003832:	4a52      	ldr	r2, [pc, #328]	; (800397c <HAL_GPIO_Init+0x2ec>)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	089b      	lsrs	r3, r3, #2
 8003838:	3302      	adds	r3, #2
 800383a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	220f      	movs	r2, #15
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4013      	ands	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a49      	ldr	r2, [pc, #292]	; (8003980 <HAL_GPIO_Init+0x2f0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d019      	beq.n	8003892 <HAL_GPIO_Init+0x202>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a48      	ldr	r2, [pc, #288]	; (8003984 <HAL_GPIO_Init+0x2f4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d013      	beq.n	800388e <HAL_GPIO_Init+0x1fe>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a47      	ldr	r2, [pc, #284]	; (8003988 <HAL_GPIO_Init+0x2f8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00d      	beq.n	800388a <HAL_GPIO_Init+0x1fa>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a46      	ldr	r2, [pc, #280]	; (800398c <HAL_GPIO_Init+0x2fc>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d007      	beq.n	8003886 <HAL_GPIO_Init+0x1f6>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a45      	ldr	r2, [pc, #276]	; (8003990 <HAL_GPIO_Init+0x300>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d101      	bne.n	8003882 <HAL_GPIO_Init+0x1f2>
 800387e:	2304      	movs	r3, #4
 8003880:	e008      	b.n	8003894 <HAL_GPIO_Init+0x204>
 8003882:	2307      	movs	r3, #7
 8003884:	e006      	b.n	8003894 <HAL_GPIO_Init+0x204>
 8003886:	2303      	movs	r3, #3
 8003888:	e004      	b.n	8003894 <HAL_GPIO_Init+0x204>
 800388a:	2302      	movs	r3, #2
 800388c:	e002      	b.n	8003894 <HAL_GPIO_Init+0x204>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_GPIO_Init+0x204>
 8003892:	2300      	movs	r3, #0
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	f002 0203 	and.w	r2, r2, #3
 800389a:	0092      	lsls	r2, r2, #2
 800389c:	4093      	lsls	r3, r2
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038a4:	4935      	ldr	r1, [pc, #212]	; (800397c <HAL_GPIO_Init+0x2ec>)
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	089b      	lsrs	r3, r3, #2
 80038aa:	3302      	adds	r3, #2
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038b2:	4b38      	ldr	r3, [pc, #224]	; (8003994 <HAL_GPIO_Init+0x304>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	43db      	mvns	r3, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4013      	ands	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038d6:	4a2f      	ldr	r2, [pc, #188]	; (8003994 <HAL_GPIO_Init+0x304>)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038dc:	4b2d      	ldr	r3, [pc, #180]	; (8003994 <HAL_GPIO_Init+0x304>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003900:	4a24      	ldr	r2, [pc, #144]	; (8003994 <HAL_GPIO_Init+0x304>)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003906:	4b23      	ldr	r3, [pc, #140]	; (8003994 <HAL_GPIO_Init+0x304>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800392a:	4a1a      	ldr	r2, [pc, #104]	; (8003994 <HAL_GPIO_Init+0x304>)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003930:	4b18      	ldr	r3, [pc, #96]	; (8003994 <HAL_GPIO_Init+0x304>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003954:	4a0f      	ldr	r2, [pc, #60]	; (8003994 <HAL_GPIO_Init+0x304>)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3301      	adds	r3, #1
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	2b0f      	cmp	r3, #15
 8003964:	f67f aea2 	bls.w	80036ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003968:	bf00      	nop
 800396a:	bf00      	nop
 800396c:	3724      	adds	r7, #36	; 0x24
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800
 800397c:	40013800 	.word	0x40013800
 8003980:	40020000 	.word	0x40020000
 8003984:	40020400 	.word	0x40020400
 8003988:	40020800 	.word	0x40020800
 800398c:	40020c00 	.word	0x40020c00
 8003990:	40021000 	.word	0x40021000
 8003994:	40013c00 	.word	0x40013c00

08003998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	807b      	strh	r3, [r7, #2]
 80039a4:	4613      	mov	r3, r2
 80039a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039a8:	787b      	ldrb	r3, [r7, #1]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ae:	887a      	ldrh	r2, [r7, #2]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039b4:	e003      	b.n	80039be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039b6:	887b      	ldrh	r3, [r7, #2]
 80039b8:	041a      	lsls	r2, r3, #16
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	619a      	str	r2, [r3, #24]
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b085      	sub	sp, #20
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	460b      	mov	r3, r1
 80039d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039dc:	887a      	ldrh	r2, [r7, #2]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4013      	ands	r3, r2
 80039e2:	041a      	lsls	r2, r3, #16
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	43d9      	mvns	r1, r3
 80039e8:	887b      	ldrh	r3, [r7, #2]
 80039ea:	400b      	ands	r3, r1
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	619a      	str	r2, [r3, #24]
}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
	...

08003a00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a0a:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a0c:	695a      	ldr	r2, [r3, #20]
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d006      	beq.n	8003a24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a16:	4a05      	ldr	r2, [pc, #20]	; (8003a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a1c:	88fb      	ldrh	r3, [r7, #6]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fd ff98 	bl	8001954 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40013c00 	.word	0x40013c00

08003a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e12b      	b.n	8003c9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fe f87a 	bl	8001b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2224      	movs	r2, #36	; 0x24
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a94:	f001 fa2a 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
 8003a98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	4a81      	ldr	r2, [pc, #516]	; (8003ca4 <HAL_I2C_Init+0x274>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d807      	bhi.n	8003ab4 <HAL_I2C_Init+0x84>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4a80      	ldr	r2, [pc, #512]	; (8003ca8 <HAL_I2C_Init+0x278>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	bf94      	ite	ls
 8003aac:	2301      	movls	r3, #1
 8003aae:	2300      	movhi	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e006      	b.n	8003ac2 <HAL_I2C_Init+0x92>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4a7d      	ldr	r2, [pc, #500]	; (8003cac <HAL_I2C_Init+0x27c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	bf94      	ite	ls
 8003abc:	2301      	movls	r3, #1
 8003abe:	2300      	movhi	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e0e7      	b.n	8003c9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4a78      	ldr	r2, [pc, #480]	; (8003cb0 <HAL_I2C_Init+0x280>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	0c9b      	lsrs	r3, r3, #18
 8003ad4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4a6a      	ldr	r2, [pc, #424]	; (8003ca4 <HAL_I2C_Init+0x274>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d802      	bhi.n	8003b04 <HAL_I2C_Init+0xd4>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	3301      	adds	r3, #1
 8003b02:	e009      	b.n	8003b18 <HAL_I2C_Init+0xe8>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	4a69      	ldr	r2, [pc, #420]	; (8003cb4 <HAL_I2C_Init+0x284>)
 8003b10:	fba2 2303 	umull	r2, r3, r2, r3
 8003b14:	099b      	lsrs	r3, r3, #6
 8003b16:	3301      	adds	r3, #1
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	495c      	ldr	r1, [pc, #368]	; (8003ca4 <HAL_I2C_Init+0x274>)
 8003b34:	428b      	cmp	r3, r1
 8003b36:	d819      	bhi.n	8003b6c <HAL_I2C_Init+0x13c>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1e59      	subs	r1, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b46:	1c59      	adds	r1, r3, #1
 8003b48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b4c:	400b      	ands	r3, r1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_I2C_Init+0x138>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1e59      	subs	r1, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b60:	3301      	adds	r3, #1
 8003b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b66:	e051      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	e04f      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d111      	bne.n	8003b98 <HAL_I2C_Init+0x168>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1e58      	subs	r0, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	440b      	add	r3, r1
 8003b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b86:	3301      	adds	r3, #1
 8003b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	bf0c      	ite	eq
 8003b90:	2301      	moveq	r3, #1
 8003b92:	2300      	movne	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	e012      	b.n	8003bbe <HAL_I2C_Init+0x18e>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1e58      	subs	r0, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6859      	ldr	r1, [r3, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	0099      	lsls	r1, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf0c      	ite	eq
 8003bb8:	2301      	moveq	r3, #1
 8003bba:	2300      	movne	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Init+0x196>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e022      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10e      	bne.n	8003bec <HAL_I2C_Init+0x1bc>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1e58      	subs	r0, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6859      	ldr	r1, [r3, #4]
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	440b      	add	r3, r1
 8003bdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be0:	3301      	adds	r3, #1
 8003be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bea:	e00f      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1e58      	subs	r0, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	0099      	lsls	r1, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c02:	3301      	adds	r3, #1
 8003c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	6809      	ldr	r1, [r1, #0]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69da      	ldr	r2, [r3, #28]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6911      	ldr	r1, [r2, #16]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68d2      	ldr	r2, [r2, #12]
 8003c46:	4311      	orrs	r1, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695a      	ldr	r2, [r3, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	000186a0 	.word	0x000186a0
 8003ca8:	001e847f 	.word	0x001e847f
 8003cac:	003d08ff 	.word	0x003d08ff
 8003cb0:	431bde83 	.word	0x431bde83
 8003cb4:	10624dd3 	.word	0x10624dd3

08003cb8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08c      	sub	sp, #48	; 0x30
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	4608      	mov	r0, r1
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	817b      	strh	r3, [r7, #10]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	813b      	strh	r3, [r7, #8]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cd2:	f7fe fb97 	bl	8002404 <HAL_GetTick>
 8003cd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	f040 8208 	bne.w	80040f6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	2319      	movs	r3, #25
 8003cec:	2201      	movs	r2, #1
 8003cee:	497b      	ldr	r1, [pc, #492]	; (8003edc <HAL_I2C_Mem_Read+0x224>)
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 faef 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e1fb      	b.n	80040f8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_I2C_Mem_Read+0x56>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e1f4      	b.n	80040f8 <HAL_I2C_Mem_Read+0x440>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d007      	beq.n	8003d34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2222      	movs	r2, #34	; 0x22
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2240      	movs	r2, #64	; 0x40
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4a5b      	ldr	r2, [pc, #364]	; (8003ee0 <HAL_I2C_Mem_Read+0x228>)
 8003d74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d76:	88f8      	ldrh	r0, [r7, #6]
 8003d78:	893a      	ldrh	r2, [r7, #8]
 8003d7a:	8979      	ldrh	r1, [r7, #10]
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	4603      	mov	r3, r0
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 f9bc 	bl	8004104 <I2C_RequestMemoryRead>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e1b0      	b.n	80040f8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d113      	bne.n	8003dc6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9e:	2300      	movs	r3, #0
 8003da0:	623b      	str	r3, [r7, #32]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	623b      	str	r3, [r7, #32]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	623b      	str	r3, [r7, #32]
 8003db2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	e184      	b.n	80040d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d11b      	bne.n	8003e06 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ddc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	61fb      	str	r3, [r7, #28]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	e164      	b.n	80040d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d11b      	bne.n	8003e46 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	e144      	b.n	80040d0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e5c:	e138      	b.n	80040d0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	f200 80f1 	bhi.w	800404a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d123      	bne.n	8003eb8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 fb44 	bl	8004502 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e139      	b.n	80040f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003eb6:	e10b      	b.n	80040d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d14e      	bne.n	8003f5e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	4906      	ldr	r1, [pc, #24]	; (8003ee4 <HAL_I2C_Mem_Read+0x22c>)
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 fa02 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d008      	beq.n	8003ee8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e10e      	b.n	80040f8 <HAL_I2C_Mem_Read+0x440>
 8003eda:	bf00      	nop
 8003edc:	00100002 	.word	0x00100002
 8003ee0:	ffff0000 	.word	0xffff0000
 8003ee4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f5c:	e0b8      	b.n	80040d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f64:	2200      	movs	r2, #0
 8003f66:	4966      	ldr	r1, [pc, #408]	; (8004100 <HAL_I2C_Mem_Read+0x448>)
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f9b3 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0bf      	b.n	80040f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	494f      	ldr	r1, [pc, #316]	; (8004100 <HAL_I2C_Mem_Read+0x448>)
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f985 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e091      	b.n	80040f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004048:	e042      	b.n	80040d0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800404a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 fa57 	bl	8004502 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e04c      	b.n	80040f8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	2b04      	cmp	r3, #4
 800409c:	d118      	bne.n	80040d0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f47f aec2 	bne.w	8003e5e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e000      	b.n	80040f8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80040f6:	2302      	movs	r3, #2
  }
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3728      	adds	r7, #40	; 0x28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	00010004 	.word	0x00010004

08004104 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b088      	sub	sp, #32
 8004108:	af02      	add	r7, sp, #8
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	4608      	mov	r0, r1
 800410e:	4611      	mov	r1, r2
 8004110:	461a      	mov	r2, r3
 8004112:	4603      	mov	r3, r0
 8004114:	817b      	strh	r3, [r7, #10]
 8004116:	460b      	mov	r3, r1
 8004118:	813b      	strh	r3, [r7, #8]
 800411a:	4613      	mov	r3, r2
 800411c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800412c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800413c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	2200      	movs	r2, #0
 8004146:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f8c2 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00d      	beq.n	8004172 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004164:	d103      	bne.n	800416e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800416c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e0aa      	b.n	80042c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004172:	897b      	ldrh	r3, [r7, #10]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	461a      	mov	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004180:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	6a3a      	ldr	r2, [r7, #32]
 8004186:	4952      	ldr	r1, [pc, #328]	; (80042d0 <I2C_RequestMemoryRead+0x1cc>)
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 f8fa 	bl	8004382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e097      	b.n	80042c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b0:	6a39      	ldr	r1, [r7, #32]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f964 	bl	8004480 <I2C_WaitOnTXEFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00d      	beq.n	80041da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d107      	bne.n	80041d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e076      	b.n	80042c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041da:	88fb      	ldrh	r3, [r7, #6]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d105      	bne.n	80041ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041e0:	893b      	ldrh	r3, [r7, #8]
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	611a      	str	r2, [r3, #16]
 80041ea:	e021      	b.n	8004230 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041ec:	893b      	ldrh	r3, [r7, #8]
 80041ee:	0a1b      	lsrs	r3, r3, #8
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041fc:	6a39      	ldr	r1, [r7, #32]
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 f93e 	bl	8004480 <I2C_WaitOnTXEFlagUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00d      	beq.n	8004226 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	2b04      	cmp	r3, #4
 8004210:	d107      	bne.n	8004222 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004220:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e050      	b.n	80042c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004226:	893b      	ldrh	r3, [r7, #8]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004232:	6a39      	ldr	r1, [r7, #32]
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f923 	bl	8004480 <I2C_WaitOnTXEFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00d      	beq.n	800425c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	2b04      	cmp	r3, #4
 8004246:	d107      	bne.n	8004258 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004256:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e035      	b.n	80042c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800426a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	2200      	movs	r2, #0
 8004274:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f82b 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00d      	beq.n	80042a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004292:	d103      	bne.n	800429c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800429a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e013      	b.n	80042c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042a0:	897b      	ldrh	r3, [r7, #10]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	6a3a      	ldr	r2, [r7, #32]
 80042b4:	4906      	ldr	r1, [pc, #24]	; (80042d0 <I2C_RequestMemoryRead+0x1cc>)
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f863 	bl	8004382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	00010002 	.word	0x00010002

080042d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	4613      	mov	r3, r2
 80042e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042e4:	e025      	b.n	8004332 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ec:	d021      	beq.n	8004332 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ee:	f7fe f889 	bl	8002404 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d302      	bcc.n	8004304 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d116      	bne.n	8004332 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f043 0220 	orr.w	r2, r3, #32
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e023      	b.n	800437a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	0c1b      	lsrs	r3, r3, #16
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	d10d      	bne.n	8004358 <I2C_WaitOnFlagUntilTimeout+0x84>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	43da      	mvns	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4013      	ands	r3, r2
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	bf0c      	ite	eq
 800434e:	2301      	moveq	r3, #1
 8004350:	2300      	movne	r3, #0
 8004352:	b2db      	uxtb	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	e00c      	b.n	8004372 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	43da      	mvns	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4013      	ands	r3, r2
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	bf0c      	ite	eq
 800436a:	2301      	moveq	r3, #1
 800436c:	2300      	movne	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	429a      	cmp	r2, r3
 8004376:	d0b6      	beq.n	80042e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
 800438e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004390:	e051      	b.n	8004436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800439c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a0:	d123      	bne.n	80043ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f043 0204 	orr.w	r2, r3, #4
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e046      	b.n	8004478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f0:	d021      	beq.n	8004436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f2:	f7fe f807 	bl	8002404 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d302      	bcc.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d116      	bne.n	8004436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2220      	movs	r2, #32
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f043 0220 	orr.w	r2, r3, #32
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e020      	b.n	8004478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	0c1b      	lsrs	r3, r3, #16
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	d10c      	bne.n	800445a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	43da      	mvns	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4013      	ands	r3, r2
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	bf14      	ite	ne
 8004452:	2301      	movne	r3, #1
 8004454:	2300      	moveq	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	e00b      	b.n	8004472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	43da      	mvns	r2, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4013      	ands	r3, r2
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d18d      	bne.n	8004392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800448c:	e02d      	b.n	80044ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 f88d 	bl	80045ae <I2C_IsAcknowledgeFailed>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e02d      	b.n	80044fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a4:	d021      	beq.n	80044ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a6:	f7fd ffad 	bl	8002404 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d302      	bcc.n	80044bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d116      	bne.n	80044ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f043 0220 	orr.w	r2, r3, #32
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e007      	b.n	80044fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f4:	2b80      	cmp	r3, #128	; 0x80
 80044f6:	d1ca      	bne.n	800448e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800450e:	e042      	b.n	8004596 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	2b10      	cmp	r3, #16
 800451c:	d119      	bne.n	8004552 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f06f 0210 	mvn.w	r2, #16
 8004526:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e029      	b.n	80045a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004552:	f7fd ff57 	bl	8002404 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	429a      	cmp	r2, r3
 8004560:	d302      	bcc.n	8004568 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d116      	bne.n	8004596 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f043 0220 	orr.w	r2, r3, #32
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e007      	b.n	80045a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a0:	2b40      	cmp	r3, #64	; 0x40
 80045a2:	d1b5      	bne.n	8004510 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c4:	d11b      	bne.n	80045fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	f043 0204 	orr.w	r2, r3, #4
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e267      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d075      	beq.n	8004716 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800462a:	4b88      	ldr	r3, [pc, #544]	; (800484c <HAL_RCC_OscConfig+0x240>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	2b04      	cmp	r3, #4
 8004634:	d00c      	beq.n	8004650 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004636:	4b85      	ldr	r3, [pc, #532]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800463e:	2b08      	cmp	r3, #8
 8004640:	d112      	bne.n	8004668 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004642:	4b82      	ldr	r3, [pc, #520]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800464e:	d10b      	bne.n	8004668 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004650:	4b7e      	ldr	r3, [pc, #504]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d05b      	beq.n	8004714 <HAL_RCC_OscConfig+0x108>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d157      	bne.n	8004714 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e242      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004670:	d106      	bne.n	8004680 <HAL_RCC_OscConfig+0x74>
 8004672:	4b76      	ldr	r3, [pc, #472]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a75      	ldr	r2, [pc, #468]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	e01d      	b.n	80046bc <HAL_RCC_OscConfig+0xb0>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004688:	d10c      	bne.n	80046a4 <HAL_RCC_OscConfig+0x98>
 800468a:	4b70      	ldr	r3, [pc, #448]	; (800484c <HAL_RCC_OscConfig+0x240>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a6f      	ldr	r2, [pc, #444]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	4b6d      	ldr	r3, [pc, #436]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a6c      	ldr	r2, [pc, #432]	; (800484c <HAL_RCC_OscConfig+0x240>)
 800469c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e00b      	b.n	80046bc <HAL_RCC_OscConfig+0xb0>
 80046a4:	4b69      	ldr	r3, [pc, #420]	; (800484c <HAL_RCC_OscConfig+0x240>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a68      	ldr	r2, [pc, #416]	; (800484c <HAL_RCC_OscConfig+0x240>)
 80046aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	4b66      	ldr	r3, [pc, #408]	; (800484c <HAL_RCC_OscConfig+0x240>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a65      	ldr	r2, [pc, #404]	; (800484c <HAL_RCC_OscConfig+0x240>)
 80046b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d013      	beq.n	80046ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c4:	f7fd fe9e 	bl	8002404 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046cc:	f7fd fe9a 	bl	8002404 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b64      	cmp	r3, #100	; 0x64
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e207      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046de:	4b5b      	ldr	r3, [pc, #364]	; (800484c <HAL_RCC_OscConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCC_OscConfig+0xc0>
 80046ea:	e014      	b.n	8004716 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ec:	f7fd fe8a 	bl	8002404 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046f4:	f7fd fe86 	bl	8002404 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b64      	cmp	r3, #100	; 0x64
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e1f3      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004706:	4b51      	ldr	r3, [pc, #324]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0xe8>
 8004712:	e000      	b.n	8004716 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d063      	beq.n	80047ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004722:	4b4a      	ldr	r3, [pc, #296]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 030c 	and.w	r3, r3, #12
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00b      	beq.n	8004746 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800472e:	4b47      	ldr	r3, [pc, #284]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004736:	2b08      	cmp	r3, #8
 8004738:	d11c      	bne.n	8004774 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800473a:	4b44      	ldr	r3, [pc, #272]	; (800484c <HAL_RCC_OscConfig+0x240>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d116      	bne.n	8004774 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004746:	4b41      	ldr	r3, [pc, #260]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d005      	beq.n	800475e <HAL_RCC_OscConfig+0x152>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d001      	beq.n	800475e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e1c7      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800475e:	4b3b      	ldr	r3, [pc, #236]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	4937      	ldr	r1, [pc, #220]	; (800484c <HAL_RCC_OscConfig+0x240>)
 800476e:	4313      	orrs	r3, r2
 8004770:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004772:	e03a      	b.n	80047ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d020      	beq.n	80047be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800477c:	4b34      	ldr	r3, [pc, #208]	; (8004850 <HAL_RCC_OscConfig+0x244>)
 800477e:	2201      	movs	r2, #1
 8004780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004782:	f7fd fe3f 	bl	8002404 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800478a:	f7fd fe3b 	bl	8002404 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e1a8      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800479c:	4b2b      	ldr	r3, [pc, #172]	; (800484c <HAL_RCC_OscConfig+0x240>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f0      	beq.n	800478a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a8:	4b28      	ldr	r3, [pc, #160]	; (800484c <HAL_RCC_OscConfig+0x240>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	4925      	ldr	r1, [pc, #148]	; (800484c <HAL_RCC_OscConfig+0x240>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	600b      	str	r3, [r1, #0]
 80047bc:	e015      	b.n	80047ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047be:	4b24      	ldr	r3, [pc, #144]	; (8004850 <HAL_RCC_OscConfig+0x244>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c4:	f7fd fe1e 	bl	8002404 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047cc:	f7fd fe1a 	bl	8002404 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e187      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047de:	4b1b      	ldr	r3, [pc, #108]	; (800484c <HAL_RCC_OscConfig+0x240>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f0      	bne.n	80047cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d036      	beq.n	8004864 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d016      	beq.n	800482c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047fe:	4b15      	ldr	r3, [pc, #84]	; (8004854 <HAL_RCC_OscConfig+0x248>)
 8004800:	2201      	movs	r2, #1
 8004802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004804:	f7fd fdfe 	bl	8002404 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800480c:	f7fd fdfa 	bl	8002404 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e167      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800481e:	4b0b      	ldr	r3, [pc, #44]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCC_OscConfig+0x200>
 800482a:	e01b      	b.n	8004864 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800482c:	4b09      	ldr	r3, [pc, #36]	; (8004854 <HAL_RCC_OscConfig+0x248>)
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004832:	f7fd fde7 	bl	8002404 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004838:	e00e      	b.n	8004858 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800483a:	f7fd fde3 	bl	8002404 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d907      	bls.n	8004858 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e150      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
 800484c:	40023800 	.word	0x40023800
 8004850:	42470000 	.word	0x42470000
 8004854:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004858:	4b88      	ldr	r3, [pc, #544]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 800485a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1ea      	bne.n	800483a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8097 	beq.w	80049a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004872:	2300      	movs	r3, #0
 8004874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004876:	4b81      	ldr	r3, [pc, #516]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10f      	bne.n	80048a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004882:	2300      	movs	r3, #0
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	4b7d      	ldr	r3, [pc, #500]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	4a7c      	ldr	r2, [pc, #496]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 800488c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004890:	6413      	str	r3, [r2, #64]	; 0x40
 8004892:	4b7a      	ldr	r3, [pc, #488]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489a:	60bb      	str	r3, [r7, #8]
 800489c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800489e:	2301      	movs	r3, #1
 80048a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a2:	4b77      	ldr	r3, [pc, #476]	; (8004a80 <HAL_RCC_OscConfig+0x474>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d118      	bne.n	80048e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ae:	4b74      	ldr	r3, [pc, #464]	; (8004a80 <HAL_RCC_OscConfig+0x474>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a73      	ldr	r2, [pc, #460]	; (8004a80 <HAL_RCC_OscConfig+0x474>)
 80048b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ba:	f7fd fda3 	bl	8002404 <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c2:	f7fd fd9f 	bl	8002404 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e10c      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d4:	4b6a      	ldr	r3, [pc, #424]	; (8004a80 <HAL_RCC_OscConfig+0x474>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0f0      	beq.n	80048c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d106      	bne.n	80048f6 <HAL_RCC_OscConfig+0x2ea>
 80048e8:	4b64      	ldr	r3, [pc, #400]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 80048ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ec:	4a63      	ldr	r2, [pc, #396]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 80048ee:	f043 0301 	orr.w	r3, r3, #1
 80048f2:	6713      	str	r3, [r2, #112]	; 0x70
 80048f4:	e01c      	b.n	8004930 <HAL_RCC_OscConfig+0x324>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b05      	cmp	r3, #5
 80048fc:	d10c      	bne.n	8004918 <HAL_RCC_OscConfig+0x30c>
 80048fe:	4b5f      	ldr	r3, [pc, #380]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004902:	4a5e      	ldr	r2, [pc, #376]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004904:	f043 0304 	orr.w	r3, r3, #4
 8004908:	6713      	str	r3, [r2, #112]	; 0x70
 800490a:	4b5c      	ldr	r3, [pc, #368]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 800490c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490e:	4a5b      	ldr	r2, [pc, #364]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	6713      	str	r3, [r2, #112]	; 0x70
 8004916:	e00b      	b.n	8004930 <HAL_RCC_OscConfig+0x324>
 8004918:	4b58      	ldr	r3, [pc, #352]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 800491a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491c:	4a57      	ldr	r2, [pc, #348]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 800491e:	f023 0301 	bic.w	r3, r3, #1
 8004922:	6713      	str	r3, [r2, #112]	; 0x70
 8004924:	4b55      	ldr	r3, [pc, #340]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004928:	4a54      	ldr	r2, [pc, #336]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 800492a:	f023 0304 	bic.w	r3, r3, #4
 800492e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d015      	beq.n	8004964 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004938:	f7fd fd64 	bl	8002404 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493e:	e00a      	b.n	8004956 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004940:	f7fd fd60 	bl	8002404 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	f241 3288 	movw	r2, #5000	; 0x1388
 800494e:	4293      	cmp	r3, r2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e0cb      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004956:	4b49      	ldr	r3, [pc, #292]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0ee      	beq.n	8004940 <HAL_RCC_OscConfig+0x334>
 8004962:	e014      	b.n	800498e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004964:	f7fd fd4e 	bl	8002404 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800496a:	e00a      	b.n	8004982 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800496c:	f7fd fd4a 	bl	8002404 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	f241 3288 	movw	r2, #5000	; 0x1388
 800497a:	4293      	cmp	r3, r2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e0b5      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004982:	4b3e      	ldr	r3, [pc, #248]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1ee      	bne.n	800496c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800498e:	7dfb      	ldrb	r3, [r7, #23]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d105      	bne.n	80049a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004994:	4b39      	ldr	r3, [pc, #228]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004998:	4a38      	ldr	r2, [pc, #224]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 800499a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800499e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80a1 	beq.w	8004aec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049aa:	4b34      	ldr	r3, [pc, #208]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 030c 	and.w	r3, r3, #12
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	d05c      	beq.n	8004a70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d141      	bne.n	8004a42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049be:	4b31      	ldr	r3, [pc, #196]	; (8004a84 <HAL_RCC_OscConfig+0x478>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c4:	f7fd fd1e 	bl	8002404 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049cc:	f7fd fd1a 	bl	8002404 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e087      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049de:	4b27      	ldr	r3, [pc, #156]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f0      	bne.n	80049cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69da      	ldr	r2, [r3, #28]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	019b      	lsls	r3, r3, #6
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a00:	085b      	lsrs	r3, r3, #1
 8004a02:	3b01      	subs	r3, #1
 8004a04:	041b      	lsls	r3, r3, #16
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	061b      	lsls	r3, r3, #24
 8004a0e:	491b      	ldr	r1, [pc, #108]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a14:	4b1b      	ldr	r3, [pc, #108]	; (8004a84 <HAL_RCC_OscConfig+0x478>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1a:	f7fd fcf3 	bl	8002404 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a22:	f7fd fcef 	bl	8002404 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e05c      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a34:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0f0      	beq.n	8004a22 <HAL_RCC_OscConfig+0x416>
 8004a40:	e054      	b.n	8004aec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a42:	4b10      	ldr	r3, [pc, #64]	; (8004a84 <HAL_RCC_OscConfig+0x478>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a48:	f7fd fcdc 	bl	8002404 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a50:	f7fd fcd8 	bl	8002404 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e045      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a62:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f0      	bne.n	8004a50 <HAL_RCC_OscConfig+0x444>
 8004a6e:	e03d      	b.n	8004aec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d107      	bne.n	8004a88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e038      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	40007000 	.word	0x40007000
 8004a84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a88:	4b1b      	ldr	r3, [pc, #108]	; (8004af8 <HAL_RCC_OscConfig+0x4ec>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d028      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d121      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d11a      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ab8:	4013      	ands	r3, r2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004abe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d111      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	085b      	lsrs	r3, r3, #1
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d107      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e000      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40023800 	.word	0x40023800

08004afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0cc      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b10:	4b68      	ldr	r3, [pc, #416]	; (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d90c      	bls.n	8004b38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1e:	4b65      	ldr	r3, [pc, #404]	; (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b26:	4b63      	ldr	r3, [pc, #396]	; (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d001      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0b8      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d020      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b50:	4b59      	ldr	r3, [pc, #356]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	4a58      	ldr	r2, [pc, #352]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b68:	4b53      	ldr	r3, [pc, #332]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	4a52      	ldr	r2, [pc, #328]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b74:	4b50      	ldr	r3, [pc, #320]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	494d      	ldr	r1, [pc, #308]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d044      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d107      	bne.n	8004baa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	4b47      	ldr	r3, [pc, #284]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d119      	bne.n	8004bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e07f      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d003      	beq.n	8004bba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d107      	bne.n	8004bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bba:	4b3f      	ldr	r3, [pc, #252]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e06f      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bca:	4b3b      	ldr	r3, [pc, #236]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e067      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bda:	4b37      	ldr	r3, [pc, #220]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f023 0203 	bic.w	r2, r3, #3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	4934      	ldr	r1, [pc, #208]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bec:	f7fd fc0a 	bl	8002404 <HAL_GetTick>
 8004bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf2:	e00a      	b.n	8004c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf4:	f7fd fc06 	bl	8002404 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e04f      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0a:	4b2b      	ldr	r3, [pc, #172]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 020c 	and.w	r2, r3, #12
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d1eb      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c1c:	4b25      	ldr	r3, [pc, #148]	; (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d20c      	bcs.n	8004c44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2a:	4b22      	ldr	r3, [pc, #136]	; (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c32:	4b20      	ldr	r3, [pc, #128]	; (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e032      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d008      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c50:	4b19      	ldr	r3, [pc, #100]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	4916      	ldr	r1, [pc, #88]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c6e:	4b12      	ldr	r3, [pc, #72]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	490e      	ldr	r1, [pc, #56]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c82:	f000 f821 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8004c86:	4602      	mov	r2, r0
 8004c88:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	490a      	ldr	r1, [pc, #40]	; (8004cbc <HAL_RCC_ClockConfig+0x1c0>)
 8004c94:	5ccb      	ldrb	r3, [r1, r3]
 8004c96:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9a:	4a09      	ldr	r2, [pc, #36]	; (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c9e:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fd fb6a 	bl	800237c <HAL_InitTick>

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40023c00 	.word	0x40023c00
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	08009f04 	.word	0x08009f04
 8004cc0:	20000244 	.word	0x20000244
 8004cc4:	20000248 	.word	0x20000248

08004cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ccc:	b094      	sub	sp, #80	; 0x50
 8004cce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cd8:	2300      	movs	r3, #0
 8004cda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ce0:	4b79      	ldr	r3, [pc, #484]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 030c 	and.w	r3, r3, #12
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d00d      	beq.n	8004d08 <HAL_RCC_GetSysClockFreq+0x40>
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	f200 80e1 	bhi.w	8004eb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <HAL_RCC_GetSysClockFreq+0x34>
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d003      	beq.n	8004d02 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cfa:	e0db      	b.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cfc:	4b73      	ldr	r3, [pc, #460]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x204>)
 8004cfe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d00:	e0db      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d02:	4b73      	ldr	r3, [pc, #460]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d06:	e0d8      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d08:	4b6f      	ldr	r3, [pc, #444]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d12:	4b6d      	ldr	r3, [pc, #436]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d063      	beq.n	8004de6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d1e:	4b6a      	ldr	r3, [pc, #424]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	099b      	lsrs	r3, r3, #6
 8004d24:	2200      	movs	r2, #0
 8004d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d30:	633b      	str	r3, [r7, #48]	; 0x30
 8004d32:	2300      	movs	r3, #0
 8004d34:	637b      	str	r3, [r7, #52]	; 0x34
 8004d36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d3a:	4622      	mov	r2, r4
 8004d3c:	462b      	mov	r3, r5
 8004d3e:	f04f 0000 	mov.w	r0, #0
 8004d42:	f04f 0100 	mov.w	r1, #0
 8004d46:	0159      	lsls	r1, r3, #5
 8004d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d4c:	0150      	lsls	r0, r2, #5
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4621      	mov	r1, r4
 8004d54:	1a51      	subs	r1, r2, r1
 8004d56:	6139      	str	r1, [r7, #16]
 8004d58:	4629      	mov	r1, r5
 8004d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d6c:	4659      	mov	r1, fp
 8004d6e:	018b      	lsls	r3, r1, #6
 8004d70:	4651      	mov	r1, sl
 8004d72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d76:	4651      	mov	r1, sl
 8004d78:	018a      	lsls	r2, r1, #6
 8004d7a:	4651      	mov	r1, sl
 8004d7c:	ebb2 0801 	subs.w	r8, r2, r1
 8004d80:	4659      	mov	r1, fp
 8004d82:	eb63 0901 	sbc.w	r9, r3, r1
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d9a:	4690      	mov	r8, r2
 8004d9c:	4699      	mov	r9, r3
 8004d9e:	4623      	mov	r3, r4
 8004da0:	eb18 0303 	adds.w	r3, r8, r3
 8004da4:	60bb      	str	r3, [r7, #8]
 8004da6:	462b      	mov	r3, r5
 8004da8:	eb49 0303 	adc.w	r3, r9, r3
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dba:	4629      	mov	r1, r5
 8004dbc:	024b      	lsls	r3, r1, #9
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	024a      	lsls	r2, r1, #9
 8004dc8:	4610      	mov	r0, r2
 8004dca:	4619      	mov	r1, r3
 8004dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dce:	2200      	movs	r2, #0
 8004dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dd8:	f7fb feee 	bl	8000bb8 <__aeabi_uldivmod>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4613      	mov	r3, r2
 8004de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004de4:	e058      	b.n	8004e98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004de6:	4b38      	ldr	r3, [pc, #224]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	099b      	lsrs	r3, r3, #6
 8004dec:	2200      	movs	r2, #0
 8004dee:	4618      	mov	r0, r3
 8004df0:	4611      	mov	r1, r2
 8004df2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004df6:	623b      	str	r3, [r7, #32]
 8004df8:	2300      	movs	r3, #0
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8004dfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e00:	4642      	mov	r2, r8
 8004e02:	464b      	mov	r3, r9
 8004e04:	f04f 0000 	mov.w	r0, #0
 8004e08:	f04f 0100 	mov.w	r1, #0
 8004e0c:	0159      	lsls	r1, r3, #5
 8004e0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e12:	0150      	lsls	r0, r2, #5
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4641      	mov	r1, r8
 8004e1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e1e:	4649      	mov	r1, r9
 8004e20:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e38:	ebb2 040a 	subs.w	r4, r2, sl
 8004e3c:	eb63 050b 	sbc.w	r5, r3, fp
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	00eb      	lsls	r3, r5, #3
 8004e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e4e:	00e2      	lsls	r2, r4, #3
 8004e50:	4614      	mov	r4, r2
 8004e52:	461d      	mov	r5, r3
 8004e54:	4643      	mov	r3, r8
 8004e56:	18e3      	adds	r3, r4, r3
 8004e58:	603b      	str	r3, [r7, #0]
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	eb45 0303 	adc.w	r3, r5, r3
 8004e60:	607b      	str	r3, [r7, #4]
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e6e:	4629      	mov	r1, r5
 8004e70:	028b      	lsls	r3, r1, #10
 8004e72:	4621      	mov	r1, r4
 8004e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e78:	4621      	mov	r1, r4
 8004e7a:	028a      	lsls	r2, r1, #10
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e82:	2200      	movs	r2, #0
 8004e84:	61bb      	str	r3, [r7, #24]
 8004e86:	61fa      	str	r2, [r7, #28]
 8004e88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e8c:	f7fb fe94 	bl	8000bb8 <__aeabi_uldivmod>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4613      	mov	r3, r2
 8004e96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e98:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	0c1b      	lsrs	r3, r3, #16
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ea8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eb2:	e002      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x204>)
 8004eb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3750      	adds	r7, #80	; 0x50
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	00f42400 	.word	0x00f42400
 8004ed0:	007a1200 	.word	0x007a1200

08004ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ed8:	4b03      	ldr	r3, [pc, #12]	; (8004ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eda:	681b      	ldr	r3, [r3, #0]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	20000244 	.word	0x20000244

08004eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ef0:	f7ff fff0 	bl	8004ed4 <HAL_RCC_GetHCLKFreq>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	0a9b      	lsrs	r3, r3, #10
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	4903      	ldr	r1, [pc, #12]	; (8004f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f02:	5ccb      	ldrb	r3, [r1, r3]
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	08009f14 	.word	0x08009f14

08004f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f18:	f7ff ffdc 	bl	8004ed4 <HAL_RCC_GetHCLKFreq>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	0b5b      	lsrs	r3, r3, #13
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	4903      	ldr	r1, [pc, #12]	; (8004f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f2a:	5ccb      	ldrb	r3, [r1, r3]
 8004f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40023800 	.word	0x40023800
 8004f38:	08009f14 	.word	0x08009f14

08004f3c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d105      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d038      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f64:	4b68      	ldr	r3, [pc, #416]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f6a:	f7fd fa4b 	bl	8002404 <HAL_GetTick>
 8004f6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f70:	e008      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f72:	f7fd fa47 	bl	8002404 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e0bd      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f84:	4b61      	ldr	r3, [pc, #388]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1f0      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	019b      	lsls	r3, r3, #6
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	071b      	lsls	r3, r3, #28
 8004fa2:	495a      	ldr	r1, [pc, #360]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004faa:	4b57      	ldr	r3, [pc, #348]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fb0:	f7fd fa28 	bl	8002404 <HAL_GetTick>
 8004fb4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fb8:	f7fd fa24 	bl	8002404 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e09a      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fca:	4b50      	ldr	r3, [pc, #320]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0f0      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 8083 	beq.w	80050ea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	4b48      	ldr	r3, [pc, #288]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	4a47      	ldr	r2, [pc, #284]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ff4:	4b45      	ldr	r3, [pc, #276]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005000:	4b43      	ldr	r3, [pc, #268]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a42      	ldr	r2, [pc, #264]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800500c:	f7fd f9fa 	bl	8002404 <HAL_GetTick>
 8005010:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005014:	f7fd f9f6 	bl	8002404 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e06c      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005026:	4b3a      	ldr	r3, [pc, #232]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005032:	4b36      	ldr	r3, [pc, #216]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d02f      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	429a      	cmp	r2, r3
 800504e:	d028      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005050:	4b2e      	ldr	r3, [pc, #184]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005058:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800505a:	4b2e      	ldr	r3, [pc, #184]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800505c:	2201      	movs	r2, #1
 800505e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005060:	4b2c      	ldr	r3, [pc, #176]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005066:	4a29      	ldr	r2, [pc, #164]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800506c:	4b27      	ldr	r3, [pc, #156]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800506e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b01      	cmp	r3, #1
 8005076:	d114      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005078:	f7fd f9c4 	bl	8002404 <HAL_GetTick>
 800507c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800507e:	e00a      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005080:	f7fd f9c0 	bl	8002404 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	f241 3288 	movw	r2, #5000	; 0x1388
 800508e:	4293      	cmp	r3, r2
 8005090:	d901      	bls.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e034      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005096:	4b1d      	ldr	r3, [pc, #116]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0ee      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ae:	d10d      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x190>
 80050b0:	4b16      	ldr	r3, [pc, #88]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c4:	4911      	ldr	r1, [pc, #68]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	608b      	str	r3, [r1, #8]
 80050ca:	e005      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80050cc:	4b0f      	ldr	r3, [pc, #60]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	4a0e      	ldr	r2, [pc, #56]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050d6:	6093      	str	r3, [r2, #8]
 80050d8:	4b0c      	ldr	r3, [pc, #48]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050e4:	4909      	ldr	r1, [pc, #36]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0308 	and.w	r3, r3, #8
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	7d1a      	ldrb	r2, [r3, #20]
 80050fa:	4b07      	ldr	r3, [pc, #28]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80050fc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	42470068 	.word	0x42470068
 800510c:	40023800 	.word	0x40023800
 8005110:	40007000 	.word	0x40007000
 8005114:	42470e40 	.word	0x42470e40
 8005118:	424711e0 	.word	0x424711e0

0800511c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e066      	b.n	8005200 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	7f5b      	ldrb	r3, [r3, #29]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d105      	bne.n	8005148 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fc fd4c 	bl	8001be0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	22ca      	movs	r2, #202	; 0xca
 8005154:	625a      	str	r2, [r3, #36]	; 0x24
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2253      	movs	r2, #83	; 0x53
 800515c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f87a 	bl	8005258 <RTC_EnterInitMode>
 8005164:	4603      	mov	r3, r0
 8005166:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005168:	7bfb      	ldrb	r3, [r7, #15]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d12c      	bne.n	80051c8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6812      	ldr	r2, [r2, #0]
 8005178:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800517c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005180:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6899      	ldr	r1, [r3, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	68d2      	ldr	r2, [r2, #12]
 80051a8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6919      	ldr	r1, [r3, #16]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	041a      	lsls	r2, r3, #16
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f881 	bl	80052c6 <RTC_ExitInitMode>
 80051c4:	4603      	mov	r3, r0
 80051c6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d113      	bne.n	80051f6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051dc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699a      	ldr	r2, [r3, #24]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	22ff      	movs	r2, #255	; 0xff
 80051fc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005222:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005224:	f7fd f8ee 	bl	8002404 <HAL_GetTick>
 8005228:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800522a:	e009      	b.n	8005240 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800522c:	f7fd f8ea 	bl	8002404 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800523a:	d901      	bls.n	8005240 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e007      	b.n	8005250 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0ee      	beq.n	800522c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005264:	2300      	movs	r3, #0
 8005266:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005272:	2b00      	cmp	r3, #0
 8005274:	d122      	bne.n	80052bc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005284:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005286:	f7fd f8bd 	bl	8002404 <HAL_GetTick>
 800528a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800528c:	e00c      	b.n	80052a8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800528e:	f7fd f8b9 	bl	8002404 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800529c:	d904      	bls.n	80052a8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2204      	movs	r2, #4
 80052a2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d102      	bne.n	80052bc <RTC_EnterInitMode+0x64>
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d1e8      	bne.n	800528e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052e0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f003 0320 	and.w	r3, r3, #32
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10a      	bne.n	8005306 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff ff89 	bl	8005208 <HAL_RTC_WaitForSynchro>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d004      	beq.n	8005306 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2204      	movs	r2, #4
 8005300:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005306:	7bfb      	ldrb	r3, [r7, #15]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e07b      	b.n	800541a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	2b00      	cmp	r3, #0
 8005328:	d108      	bne.n	800533c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005332:	d009      	beq.n	8005348 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	61da      	str	r2, [r3, #28]
 800533a:	e005      	b.n	8005348 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fc fc68 	bl	8001c38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800537e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053b8:	431a      	orrs	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053cc:	ea42 0103 	orr.w	r1, r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	0c1b      	lsrs	r3, r3, #16
 80053e6:	f003 0104 	and.w	r1, r3, #4
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	f003 0210 	and.w	r2, r3, #16
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	69da      	ldr	r2, [r3, #28]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005408:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	099b      	lsrs	r3, r3, #6
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10f      	bne.n	8005468 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	099b      	lsrs	r3, r3, #6
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d004      	beq.n	8005468 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	4798      	blx	r3
    return;
 8005466:	e0d7      	b.n	8005618 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	085b      	lsrs	r3, r3, #1
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_SPI_IRQHandler+0x66>
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	09db      	lsrs	r3, r3, #7
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d004      	beq.n	800548a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	4798      	blx	r3
    return;
 8005488:	e0c6      	b.n	8005618 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10c      	bne.n	80054b0 <HAL_SPI_IRQHandler+0x8c>
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	099b      	lsrs	r3, r3, #6
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	0a1b      	lsrs	r3, r3, #8
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 80b4 	beq.w	8005618 <HAL_SPI_IRQHandler+0x1f4>
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 80ad 	beq.w	8005618 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	099b      	lsrs	r3, r3, #6
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d023      	beq.n	8005512 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d011      	beq.n	80054fa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054da:	f043 0204 	orr.w	r2, r3, #4
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	617b      	str	r3, [r7, #20]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	e00b      	b.n	8005512 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054fa:	2300      	movs	r3, #0
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	693b      	ldr	r3, [r7, #16]
        return;
 8005510:	e082      	b.n	8005618 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	095b      	lsrs	r3, r3, #5
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d014      	beq.n	8005548 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005522:	f043 0201 	orr.w	r2, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800552a:	2300      	movs	r3, #0
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	0a1b      	lsrs	r3, r3, #8
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00c      	beq.n	800556e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005558:	f043 0208 	orr.w	r2, r3, #8
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005560:	2300      	movs	r3, #0
 8005562:	60bb      	str	r3, [r7, #8]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	60bb      	str	r3, [r7, #8]
 800556c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005572:	2b00      	cmp	r3, #0
 8005574:	d04f      	beq.n	8005616 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005584:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d104      	bne.n	80055a2 <HAL_SPI_IRQHandler+0x17e>
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d034      	beq.n	800560c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0203 	bic.w	r2, r2, #3
 80055b0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d011      	beq.n	80055de <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055be:	4a18      	ldr	r2, [pc, #96]	; (8005620 <HAL_SPI_IRQHandler+0x1fc>)
 80055c0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fd fdd6 	bl	8003178 <HAL_DMA_Abort_IT>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d016      	beq.n	8005614 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ea:	4a0d      	ldr	r2, [pc, #52]	; (8005620 <HAL_SPI_IRQHandler+0x1fc>)
 80055ec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fd fdc0 	bl	8003178 <HAL_DMA_Abort_IT>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005602:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800560a:	e003      	b.n	8005614 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f809 	bl	8005624 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005612:	e000      	b.n	8005616 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005614:	bf00      	nop
    return;
 8005616:	bf00      	nop
  }
}
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	08005639 	.word	0x08005639

08005624 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005644:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f7ff ffe6 	bl	8005624 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e041      	b.n	80056f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7fc fba2 	bl	8001dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	3304      	adds	r3, #4
 800569c:	4619      	mov	r1, r3
 800569e:	4610      	mov	r0, r2
 80056a0:	f000 fa24 	bl	8005aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b082      	sub	sp, #8
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b02      	cmp	r3, #2
 8005712:	d122      	bne.n	800575a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b02      	cmp	r3, #2
 8005720:	d11b      	bne.n	800575a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f06f 0202 	mvn.w	r2, #2
 800572a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	f003 0303 	and.w	r3, r3, #3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f9b5 	bl	8005ab0 <HAL_TIM_IC_CaptureCallback>
 8005746:	e005      	b.n	8005754 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f9a7 	bl	8005a9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f9b8 	bl	8005ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b04      	cmp	r3, #4
 8005766:	d122      	bne.n	80057ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b04      	cmp	r3, #4
 8005774:	d11b      	bne.n	80057ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f06f 0204 	mvn.w	r2, #4
 800577e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f98b 	bl	8005ab0 <HAL_TIM_IC_CaptureCallback>
 800579a:	e005      	b.n	80057a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f97d 	bl	8005a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f98e 	bl	8005ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f003 0308 	and.w	r3, r3, #8
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	d122      	bne.n	8005802 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	d11b      	bne.n	8005802 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f06f 0208 	mvn.w	r2, #8
 80057d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2204      	movs	r2, #4
 80057d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	f003 0303 	and.w	r3, r3, #3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f961 	bl	8005ab0 <HAL_TIM_IC_CaptureCallback>
 80057ee:	e005      	b.n	80057fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f953 	bl	8005a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f964 	bl	8005ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	f003 0310 	and.w	r3, r3, #16
 800580c:	2b10      	cmp	r3, #16
 800580e:	d122      	bne.n	8005856 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f003 0310 	and.w	r3, r3, #16
 800581a:	2b10      	cmp	r3, #16
 800581c:	d11b      	bne.n	8005856 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f06f 0210 	mvn.w	r2, #16
 8005826:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2208      	movs	r2, #8
 800582c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f937 	bl	8005ab0 <HAL_TIM_IC_CaptureCallback>
 8005842:	e005      	b.n	8005850 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f929 	bl	8005a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f93a 	bl	8005ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b01      	cmp	r3, #1
 8005862:	d10e      	bne.n	8005882 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b01      	cmp	r3, #1
 8005870:	d107      	bne.n	8005882 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f06f 0201 	mvn.w	r2, #1
 800587a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7fc f87d 	bl	800197c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588c:	2b80      	cmp	r3, #128	; 0x80
 800588e:	d10e      	bne.n	80058ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800589a:	2b80      	cmp	r3, #128	; 0x80
 800589c:	d107      	bne.n	80058ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fab1 	bl	8005e10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b8:	2b40      	cmp	r3, #64	; 0x40
 80058ba:	d10e      	bne.n	80058da <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c6:	2b40      	cmp	r3, #64	; 0x40
 80058c8:	d107      	bne.n	80058da <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f8ff 	bl	8005ad8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d10e      	bne.n	8005906 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f003 0320 	and.w	r3, r3, #32
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	d107      	bne.n	8005906 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f06f 0220 	mvn.w	r2, #32
 80058fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fa7b 	bl	8005dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005918:	2300      	movs	r3, #0
 800591a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005922:	2b01      	cmp	r3, #1
 8005924:	d101      	bne.n	800592a <HAL_TIM_ConfigClockSource+0x1c>
 8005926:	2302      	movs	r3, #2
 8005928:	e0b4      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x186>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005948:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005950:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005962:	d03e      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0xd4>
 8005964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005968:	f200 8087 	bhi.w	8005a7a <HAL_TIM_ConfigClockSource+0x16c>
 800596c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005970:	f000 8086 	beq.w	8005a80 <HAL_TIM_ConfigClockSource+0x172>
 8005974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005978:	d87f      	bhi.n	8005a7a <HAL_TIM_ConfigClockSource+0x16c>
 800597a:	2b70      	cmp	r3, #112	; 0x70
 800597c:	d01a      	beq.n	80059b4 <HAL_TIM_ConfigClockSource+0xa6>
 800597e:	2b70      	cmp	r3, #112	; 0x70
 8005980:	d87b      	bhi.n	8005a7a <HAL_TIM_ConfigClockSource+0x16c>
 8005982:	2b60      	cmp	r3, #96	; 0x60
 8005984:	d050      	beq.n	8005a28 <HAL_TIM_ConfigClockSource+0x11a>
 8005986:	2b60      	cmp	r3, #96	; 0x60
 8005988:	d877      	bhi.n	8005a7a <HAL_TIM_ConfigClockSource+0x16c>
 800598a:	2b50      	cmp	r3, #80	; 0x50
 800598c:	d03c      	beq.n	8005a08 <HAL_TIM_ConfigClockSource+0xfa>
 800598e:	2b50      	cmp	r3, #80	; 0x50
 8005990:	d873      	bhi.n	8005a7a <HAL_TIM_ConfigClockSource+0x16c>
 8005992:	2b40      	cmp	r3, #64	; 0x40
 8005994:	d058      	beq.n	8005a48 <HAL_TIM_ConfigClockSource+0x13a>
 8005996:	2b40      	cmp	r3, #64	; 0x40
 8005998:	d86f      	bhi.n	8005a7a <HAL_TIM_ConfigClockSource+0x16c>
 800599a:	2b30      	cmp	r3, #48	; 0x30
 800599c:	d064      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x15a>
 800599e:	2b30      	cmp	r3, #48	; 0x30
 80059a0:	d86b      	bhi.n	8005a7a <HAL_TIM_ConfigClockSource+0x16c>
 80059a2:	2b20      	cmp	r3, #32
 80059a4:	d060      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x15a>
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d867      	bhi.n	8005a7a <HAL_TIM_ConfigClockSource+0x16c>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d05c      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x15a>
 80059ae:	2b10      	cmp	r3, #16
 80059b0:	d05a      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x15a>
 80059b2:	e062      	b.n	8005a7a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	6899      	ldr	r1, [r3, #8]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f000 f98c 	bl	8005ce0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	609a      	str	r2, [r3, #8]
      break;
 80059e0:	e04f      	b.n	8005a82 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6899      	ldr	r1, [r3, #8]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f000 f975 	bl	8005ce0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a04:	609a      	str	r2, [r3, #8]
      break;
 8005a06:	e03c      	b.n	8005a82 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	6859      	ldr	r1, [r3, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	461a      	mov	r2, r3
 8005a16:	f000 f8e9 	bl	8005bec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2150      	movs	r1, #80	; 0x50
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 f942 	bl	8005caa <TIM_ITRx_SetConfig>
      break;
 8005a26:	e02c      	b.n	8005a82 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	6859      	ldr	r1, [r3, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	461a      	mov	r2, r3
 8005a36:	f000 f908 	bl	8005c4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2160      	movs	r1, #96	; 0x60
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 f932 	bl	8005caa <TIM_ITRx_SetConfig>
      break;
 8005a46:	e01c      	b.n	8005a82 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	6859      	ldr	r1, [r3, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	461a      	mov	r2, r3
 8005a56:	f000 f8c9 	bl	8005bec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2140      	movs	r1, #64	; 0x40
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 f922 	bl	8005caa <TIM_ITRx_SetConfig>
      break;
 8005a66:	e00c      	b.n	8005a82 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4619      	mov	r1, r3
 8005a72:	4610      	mov	r0, r2
 8005a74:	f000 f919 	bl	8005caa <TIM_ITRx_SetConfig>
      break;
 8005a78:	e003      	b.n	8005a82 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8005a7e:	e000      	b.n	8005a82 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a34      	ldr	r2, [pc, #208]	; (8005bd0 <TIM_Base_SetConfig+0xe4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00f      	beq.n	8005b24 <TIM_Base_SetConfig+0x38>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0a:	d00b      	beq.n	8005b24 <TIM_Base_SetConfig+0x38>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a31      	ldr	r2, [pc, #196]	; (8005bd4 <TIM_Base_SetConfig+0xe8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d007      	beq.n	8005b24 <TIM_Base_SetConfig+0x38>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a30      	ldr	r2, [pc, #192]	; (8005bd8 <TIM_Base_SetConfig+0xec>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d003      	beq.n	8005b24 <TIM_Base_SetConfig+0x38>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a2f      	ldr	r2, [pc, #188]	; (8005bdc <TIM_Base_SetConfig+0xf0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d108      	bne.n	8005b36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a25      	ldr	r2, [pc, #148]	; (8005bd0 <TIM_Base_SetConfig+0xe4>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d01b      	beq.n	8005b76 <TIM_Base_SetConfig+0x8a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b44:	d017      	beq.n	8005b76 <TIM_Base_SetConfig+0x8a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a22      	ldr	r2, [pc, #136]	; (8005bd4 <TIM_Base_SetConfig+0xe8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d013      	beq.n	8005b76 <TIM_Base_SetConfig+0x8a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a21      	ldr	r2, [pc, #132]	; (8005bd8 <TIM_Base_SetConfig+0xec>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00f      	beq.n	8005b76 <TIM_Base_SetConfig+0x8a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a20      	ldr	r2, [pc, #128]	; (8005bdc <TIM_Base_SetConfig+0xf0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00b      	beq.n	8005b76 <TIM_Base_SetConfig+0x8a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a1f      	ldr	r2, [pc, #124]	; (8005be0 <TIM_Base_SetConfig+0xf4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d007      	beq.n	8005b76 <TIM_Base_SetConfig+0x8a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a1e      	ldr	r2, [pc, #120]	; (8005be4 <TIM_Base_SetConfig+0xf8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d003      	beq.n	8005b76 <TIM_Base_SetConfig+0x8a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a1d      	ldr	r2, [pc, #116]	; (8005be8 <TIM_Base_SetConfig+0xfc>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d108      	bne.n	8005b88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a08      	ldr	r2, [pc, #32]	; (8005bd0 <TIM_Base_SetConfig+0xe4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d103      	bne.n	8005bbc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	615a      	str	r2, [r3, #20]
}
 8005bc2:	bf00      	nop
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40010000 	.word	0x40010000
 8005bd4:	40000400 	.word	0x40000400
 8005bd8:	40000800 	.word	0x40000800
 8005bdc:	40000c00 	.word	0x40000c00
 8005be0:	40014000 	.word	0x40014000
 8005be4:	40014400 	.word	0x40014400
 8005be8:	40014800 	.word	0x40014800

08005bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	f023 0201 	bic.w	r2, r3, #1
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f023 030a 	bic.w	r3, r3, #10
 8005c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	621a      	str	r2, [r3, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b087      	sub	sp, #28
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	f023 0210 	bic.w	r2, r3, #16
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	031b      	lsls	r3, r3, #12
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	621a      	str	r2, [r3, #32]
}
 8005c9e:	bf00      	nop
 8005ca0:	371c      	adds	r7, #28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b085      	sub	sp, #20
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	f043 0307 	orr.w	r3, r3, #7
 8005ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	609a      	str	r2, [r3, #8]
}
 8005cd4:	bf00      	nop
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	021a      	lsls	r2, r3, #8
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	431a      	orrs	r2, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	609a      	str	r2, [r3, #8]
}
 8005d14:	bf00      	nop
 8005d16:	371c      	adds	r7, #28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e050      	b.n	8005dda <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a1c      	ldr	r2, [pc, #112]	; (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d018      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d84:	d013      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a18      	ldr	r2, [pc, #96]	; (8005dec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d00e      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a16      	ldr	r2, [pc, #88]	; (8005df0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d009      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a15      	ldr	r2, [pc, #84]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d004      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a13      	ldr	r2, [pc, #76]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d10c      	bne.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40010000 	.word	0x40010000
 8005dec:	40000400 	.word	0x40000400
 8005df0:	40000800 	.word	0x40000800
 8005df4:	40000c00 	.word	0x40000c00
 8005df8:	40014000 	.word	0x40014000

08005dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e03f      	b.n	8005eb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fc f806 	bl	8001e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2224      	movs	r2, #36	; 0x24
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fdcf 	bl	8006a0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	695a      	ldr	r2, [r3, #20]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b082      	sub	sp, #8
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e047      	b.n	8005f60 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d106      	bne.n	8005eea <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7fb ffb9 	bl	8001e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2224      	movs	r2, #36	; 0x24
 8005eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f00:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fd82 	bl	8006a0c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691a      	ldr	r2, [r3, #16]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	695a      	ldr	r2, [r3, #20]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005f26:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	695a      	ldr	r2, [r3, #20]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0208 	orr.w	r2, r2, #8
 8005f36:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f46:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08a      	sub	sp, #40	; 0x28
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	603b      	str	r3, [r7, #0]
 8005f74:	4613      	mov	r3, r2
 8005f76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d17c      	bne.n	8006082 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <HAL_UART_Transmit+0x2c>
 8005f8e:	88fb      	ldrh	r3, [r7, #6]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e075      	b.n	8006084 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d101      	bne.n	8005fa6 <HAL_UART_Transmit+0x3e>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	e06e      	b.n	8006084 <HAL_UART_Transmit+0x11c>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2221      	movs	r2, #33	; 0x21
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fbc:	f7fc fa22 	bl	8002404 <HAL_GetTick>
 8005fc0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	88fa      	ldrh	r2, [r7, #6]
 8005fc6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	88fa      	ldrh	r2, [r7, #6]
 8005fcc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd6:	d108      	bne.n	8005fea <HAL_UART_Transmit+0x82>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d104      	bne.n	8005fea <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	61bb      	str	r3, [r7, #24]
 8005fe8:	e003      	b.n	8005ff2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ffa:	e02a      	b.n	8006052 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2200      	movs	r2, #0
 8006004:	2180      	movs	r1, #128	; 0x80
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 faf8 	bl	80065fc <UART_WaitOnFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e036      	b.n	8006084 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10b      	bne.n	8006034 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800602a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	3302      	adds	r3, #2
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	e007      	b.n	8006044 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	781a      	ldrb	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	3301      	adds	r3, #1
 8006042:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006056:	b29b      	uxth	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1cf      	bne.n	8005ffc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2200      	movs	r2, #0
 8006064:	2140      	movs	r1, #64	; 0x40
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 fac8 	bl	80065fc <UART_WaitOnFlagUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e006      	b.n	8006084 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2220      	movs	r2, #32
 800607a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	e000      	b.n	8006084 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006082:	2302      	movs	r3, #2
  }
}
 8006084:	4618      	mov	r0, r3
 8006086:	3720      	adds	r7, #32
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b0ba      	sub	sp, #232	; 0xe8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c2:	f003 030f 	and.w	r3, r3, #15
 80060c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80060ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10f      	bne.n	80060f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d009      	beq.n	80060f2 <HAL_UART_IRQHandler+0x66>
 80060de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e2:	f003 0320 	and.w	r3, r3, #32
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d003      	beq.n	80060f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fbd3 	bl	8006896 <UART_Receive_IT>
      return;
 80060f0:	e256      	b.n	80065a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 80de 	beq.w	80062b8 <HAL_UART_IRQHandler+0x22c>
 80060fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d106      	bne.n	8006116 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800610c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 80d1 	beq.w	80062b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00b      	beq.n	800613a <HAL_UART_IRQHandler+0xae>
 8006122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612a:	2b00      	cmp	r3, #0
 800612c:	d005      	beq.n	800613a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	f043 0201 	orr.w	r2, r3, #1
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800613a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <HAL_UART_IRQHandler+0xd2>
 8006146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d005      	beq.n	800615e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	f043 0202 	orr.w	r2, r3, #2
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800615e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00b      	beq.n	8006182 <HAL_UART_IRQHandler+0xf6>
 800616a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d005      	beq.n	8006182 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	f043 0204 	orr.w	r2, r3, #4
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006186:	f003 0308 	and.w	r3, r3, #8
 800618a:	2b00      	cmp	r3, #0
 800618c:	d011      	beq.n	80061b2 <HAL_UART_IRQHandler+0x126>
 800618e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006192:	f003 0320 	and.w	r3, r3, #32
 8006196:	2b00      	cmp	r3, #0
 8006198:	d105      	bne.n	80061a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800619a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d005      	beq.n	80061b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	f043 0208 	orr.w	r2, r3, #8
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 81ed 	beq.w	8006596 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c0:	f003 0320 	and.w	r3, r3, #32
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d008      	beq.n	80061da <HAL_UART_IRQHandler+0x14e>
 80061c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fb5e 	bl	8006896 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e4:	2b40      	cmp	r3, #64	; 0x40
 80061e6:	bf0c      	ite	eq
 80061e8:	2301      	moveq	r3, #1
 80061ea:	2300      	movne	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d103      	bne.n	8006206 <HAL_UART_IRQHandler+0x17a>
 80061fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006202:	2b00      	cmp	r3, #0
 8006204:	d04f      	beq.n	80062a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fa66 	bl	80066d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006216:	2b40      	cmp	r3, #64	; 0x40
 8006218:	d141      	bne.n	800629e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3314      	adds	r3, #20
 8006220:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006228:	e853 3f00 	ldrex	r3, [r3]
 800622c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006230:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3314      	adds	r3, #20
 8006242:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006246:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800624a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006252:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006256:	e841 2300 	strex	r3, r2, [r1]
 800625a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800625e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1d9      	bne.n	800621a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626a:	2b00      	cmp	r3, #0
 800626c:	d013      	beq.n	8006296 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006272:	4a7d      	ldr	r2, [pc, #500]	; (8006468 <HAL_UART_IRQHandler+0x3dc>)
 8006274:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627a:	4618      	mov	r0, r3
 800627c:	f7fc ff7c 	bl	8003178 <HAL_DMA_Abort_IT>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d016      	beq.n	80062b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006290:	4610      	mov	r0, r2
 8006292:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006294:	e00e      	b.n	80062b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f99a 	bl	80065d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800629c:	e00a      	b.n	80062b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f996 	bl	80065d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a4:	e006      	b.n	80062b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f992 	bl	80065d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80062b2:	e170      	b.n	8006596 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b4:	bf00      	nop
    return;
 80062b6:	e16e      	b.n	8006596 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062bc:	2b01      	cmp	r3, #1
 80062be:	f040 814a 	bne.w	8006556 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c6:	f003 0310 	and.w	r3, r3, #16
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 8143 	beq.w	8006556 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d4:	f003 0310 	and.w	r3, r3, #16
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 813c 	beq.w	8006556 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062de:	2300      	movs	r3, #0
 80062e0:	60bb      	str	r3, [r7, #8]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	60bb      	str	r3, [r7, #8]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	60bb      	str	r3, [r7, #8]
 80062f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fe:	2b40      	cmp	r3, #64	; 0x40
 8006300:	f040 80b4 	bne.w	800646c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006310:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 8140 	beq.w	800659a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800631e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006322:	429a      	cmp	r2, r3
 8006324:	f080 8139 	bcs.w	800659a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800632e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800633a:	f000 8088 	beq.w	800644e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	330c      	adds	r3, #12
 8006344:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006354:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800635c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	330c      	adds	r3, #12
 8006366:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800636a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800636e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006372:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006376:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800637a:	e841 2300 	strex	r3, r2, [r1]
 800637e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006382:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1d9      	bne.n	800633e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3314      	adds	r3, #20
 8006390:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800639a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800639c:	f023 0301 	bic.w	r3, r3, #1
 80063a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3314      	adds	r3, #20
 80063aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063ba:	e841 2300 	strex	r3, r2, [r1]
 80063be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e1      	bne.n	800638a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3314      	adds	r3, #20
 80063cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3314      	adds	r3, #20
 80063e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e3      	bne.n	80063c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2220      	movs	r2, #32
 8006402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800641c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800641e:	f023 0310 	bic.w	r3, r3, #16
 8006422:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	330c      	adds	r3, #12
 800642c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006430:	65ba      	str	r2, [r7, #88]	; 0x58
 8006432:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006436:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800643e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e3      	bne.n	800640c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	4618      	mov	r0, r3
 800644a:	f7fc fe25 	bl	8003098 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006456:	b29b      	uxth	r3, r3
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	b29b      	uxth	r3, r3
 800645c:	4619      	mov	r1, r3
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f8c0 	bl	80065e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006464:	e099      	b.n	800659a <HAL_UART_IRQHandler+0x50e>
 8006466:	bf00      	nop
 8006468:	0800679f 	.word	0x0800679f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006474:	b29b      	uxth	r3, r3
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 808b 	beq.w	800659e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 8086 	beq.w	800659e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	330c      	adds	r3, #12
 8006498:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649c:	e853 3f00 	ldrex	r3, [r3]
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	330c      	adds	r3, #12
 80064b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80064b6:	647a      	str	r2, [r7, #68]	; 0x44
 80064b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e3      	bne.n	8006492 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3314      	adds	r3, #20
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	623b      	str	r3, [r7, #32]
   return(result);
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	f023 0301 	bic.w	r3, r3, #1
 80064e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3314      	adds	r3, #20
 80064ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064ee:	633a      	str	r2, [r7, #48]	; 0x30
 80064f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f6:	e841 2300 	strex	r3, r2, [r1]
 80064fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1e3      	bne.n	80064ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2220      	movs	r2, #32
 8006506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	330c      	adds	r3, #12
 8006516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	e853 3f00 	ldrex	r3, [r3]
 800651e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0310 	bic.w	r3, r3, #16
 8006526:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	330c      	adds	r3, #12
 8006530:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006534:	61fa      	str	r2, [r7, #28]
 8006536:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006538:	69b9      	ldr	r1, [r7, #24]
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	e841 2300 	strex	r3, r2, [r1]
 8006540:	617b      	str	r3, [r7, #20]
   return(result);
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1e3      	bne.n	8006510 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006548:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f848 	bl	80065e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006554:	e023      	b.n	800659e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800655a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800655e:	2b00      	cmp	r3, #0
 8006560:	d009      	beq.n	8006576 <HAL_UART_IRQHandler+0x4ea>
 8006562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f929 	bl	80067c6 <UART_Transmit_IT>
    return;
 8006574:	e014      	b.n	80065a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00e      	beq.n	80065a0 <HAL_UART_IRQHandler+0x514>
 8006582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	d008      	beq.n	80065a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f969 	bl	8006866 <UART_EndTransmit_IT>
    return;
 8006594:	e004      	b.n	80065a0 <HAL_UART_IRQHandler+0x514>
    return;
 8006596:	bf00      	nop
 8006598:	e002      	b.n	80065a0 <HAL_UART_IRQHandler+0x514>
      return;
 800659a:	bf00      	nop
 800659c:	e000      	b.n	80065a0 <HAL_UART_IRQHandler+0x514>
      return;
 800659e:	bf00      	nop
  }
}
 80065a0:	37e8      	adds	r7, #232	; 0xe8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop

080065a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b090      	sub	sp, #64	; 0x40
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	603b      	str	r3, [r7, #0]
 8006608:	4613      	mov	r3, r2
 800660a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800660c:	e050      	b.n	80066b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800660e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006614:	d04c      	beq.n	80066b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006618:	2b00      	cmp	r3, #0
 800661a:	d007      	beq.n	800662c <UART_WaitOnFlagUntilTimeout+0x30>
 800661c:	f7fb fef2 	bl	8002404 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006628:	429a      	cmp	r2, r3
 800662a:	d241      	bcs.n	80066b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	330c      	adds	r3, #12
 8006632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006636:	e853 3f00 	ldrex	r3, [r3]
 800663a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	330c      	adds	r3, #12
 800664a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800664c:	637a      	str	r2, [r7, #52]	; 0x34
 800664e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800665a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e5      	bne.n	800662c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3314      	adds	r3, #20
 8006666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	e853 3f00 	ldrex	r3, [r3]
 800666e:	613b      	str	r3, [r7, #16]
   return(result);
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	f023 0301 	bic.w	r3, r3, #1
 8006676:	63bb      	str	r3, [r7, #56]	; 0x38
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3314      	adds	r3, #20
 800667e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006680:	623a      	str	r2, [r7, #32]
 8006682:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006684:	69f9      	ldr	r1, [r7, #28]
 8006686:	6a3a      	ldr	r2, [r7, #32]
 8006688:	e841 2300 	strex	r3, r2, [r1]
 800668c:	61bb      	str	r3, [r7, #24]
   return(result);
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e5      	bne.n	8006660 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2220      	movs	r2, #32
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2220      	movs	r2, #32
 80066a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e00f      	b.n	80066d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	4013      	ands	r3, r2
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	429a      	cmp	r2, r3
 80066be:	bf0c      	ite	eq
 80066c0:	2301      	moveq	r3, #1
 80066c2:	2300      	movne	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	461a      	mov	r2, r3
 80066c8:	79fb      	ldrb	r3, [r7, #7]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d09f      	beq.n	800660e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3740      	adds	r7, #64	; 0x40
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066d8:	b480      	push	{r7}
 80066da:	b095      	sub	sp, #84	; 0x54
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	330c      	adds	r3, #12
 80066e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	330c      	adds	r3, #12
 80066fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006700:	643a      	str	r2, [r7, #64]	; 0x40
 8006702:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006706:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006708:	e841 2300 	strex	r3, r2, [r1]
 800670c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800670e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e5      	bne.n	80066e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3314      	adds	r3, #20
 800671a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	61fb      	str	r3, [r7, #28]
   return(result);
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	f023 0301 	bic.w	r3, r3, #1
 800672a:	64bb      	str	r3, [r7, #72]	; 0x48
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3314      	adds	r3, #20
 8006732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006734:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006736:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800673a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e5      	bne.n	8006714 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674c:	2b01      	cmp	r3, #1
 800674e:	d119      	bne.n	8006784 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	330c      	adds	r3, #12
 8006756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f023 0310 	bic.w	r3, r3, #16
 8006766:	647b      	str	r3, [r7, #68]	; 0x44
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	330c      	adds	r3, #12
 800676e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006770:	61ba      	str	r2, [r7, #24]
 8006772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	6979      	ldr	r1, [r7, #20]
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	613b      	str	r3, [r7, #16]
   return(result);
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e5      	bne.n	8006750 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2220      	movs	r2, #32
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006792:	bf00      	nop
 8006794:	3754      	adds	r7, #84	; 0x54
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f7ff ff09 	bl	80065d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067be:	bf00      	nop
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b085      	sub	sp, #20
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b21      	cmp	r3, #33	; 0x21
 80067d8:	d13e      	bne.n	8006858 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e2:	d114      	bne.n	800680e <UART_Transmit_IT+0x48>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d110      	bne.n	800680e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006800:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	1c9a      	adds	r2, r3, #2
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	621a      	str	r2, [r3, #32]
 800680c:	e008      	b.n	8006820 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	1c59      	adds	r1, r3, #1
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	6211      	str	r1, [r2, #32]
 8006818:	781a      	ldrb	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006824:	b29b      	uxth	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	b29b      	uxth	r3, r3
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	4619      	mov	r1, r3
 800682e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10f      	bne.n	8006854 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006842:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68da      	ldr	r2, [r3, #12]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006852:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006854:	2300      	movs	r3, #0
 8006856:	e000      	b.n	800685a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006858:	2302      	movs	r3, #2
  }
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b082      	sub	sp, #8
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68da      	ldr	r2, [r3, #12]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800687c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff fe8e 	bl	80065a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b08c      	sub	sp, #48	; 0x30
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b22      	cmp	r3, #34	; 0x22
 80068a8:	f040 80ab 	bne.w	8006a02 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b4:	d117      	bne.n	80068e6 <UART_Receive_IT+0x50>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d113      	bne.n	80068e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068de:	1c9a      	adds	r2, r3, #2
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	629a      	str	r2, [r3, #40]	; 0x28
 80068e4:	e026      	b.n	8006934 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80068ec:	2300      	movs	r3, #0
 80068ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f8:	d007      	beq.n	800690a <UART_Receive_IT+0x74>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10a      	bne.n	8006918 <UART_Receive_IT+0x82>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d106      	bne.n	8006918 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	b2da      	uxtb	r2, r3
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	701a      	strb	r2, [r3, #0]
 8006916:	e008      	b.n	800692a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006924:	b2da      	uxtb	r2, r3
 8006926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006928:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006938:	b29b      	uxth	r3, r3
 800693a:	3b01      	subs	r3, #1
 800693c:	b29b      	uxth	r3, r3
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	4619      	mov	r1, r3
 8006942:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006944:	2b00      	cmp	r3, #0
 8006946:	d15a      	bne.n	80069fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0220 	bic.w	r2, r2, #32
 8006956:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006966:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	695a      	ldr	r2, [r3, #20]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f022 0201 	bic.w	r2, r2, #1
 8006976:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2220      	movs	r2, #32
 800697c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006984:	2b01      	cmp	r3, #1
 8006986:	d135      	bne.n	80069f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	330c      	adds	r3, #12
 8006994:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	613b      	str	r3, [r7, #16]
   return(result);
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f023 0310 	bic.w	r3, r3, #16
 80069a4:	627b      	str	r3, [r7, #36]	; 0x24
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	330c      	adds	r3, #12
 80069ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ae:	623a      	str	r2, [r7, #32]
 80069b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	69f9      	ldr	r1, [r7, #28]
 80069b4:	6a3a      	ldr	r2, [r7, #32]
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1e5      	bne.n	800698e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0310 	and.w	r3, r3, #16
 80069cc:	2b10      	cmp	r3, #16
 80069ce:	d10a      	bne.n	80069e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069d0:	2300      	movs	r3, #0
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069ea:	4619      	mov	r1, r3
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7ff fdf9 	bl	80065e4 <HAL_UARTEx_RxEventCallback>
 80069f2:	e002      	b.n	80069fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7ff fde1 	bl	80065bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	e002      	b.n	8006a04 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	e000      	b.n	8006a04 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006a02:	2302      	movs	r3, #2
  }
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3730      	adds	r7, #48	; 0x30
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a10:	b0c0      	sub	sp, #256	; 0x100
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a28:	68d9      	ldr	r1, [r3, #12]
 8006a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	ea40 0301 	orr.w	r3, r0, r1
 8006a34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	431a      	orrs	r2, r3
 8006a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a64:	f021 010c 	bic.w	r1, r1, #12
 8006a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a72:	430b      	orrs	r3, r1
 8006a74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a86:	6999      	ldr	r1, [r3, #24]
 8006a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	ea40 0301 	orr.w	r3, r0, r1
 8006a92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	4b8f      	ldr	r3, [pc, #572]	; (8006cd8 <UART_SetConfig+0x2cc>)
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d005      	beq.n	8006aac <UART_SetConfig+0xa0>
 8006aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	4b8d      	ldr	r3, [pc, #564]	; (8006cdc <UART_SetConfig+0x2d0>)
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d104      	bne.n	8006ab6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006aac:	f7fe fa32 	bl	8004f14 <HAL_RCC_GetPCLK2Freq>
 8006ab0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ab4:	e003      	b.n	8006abe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ab6:	f7fe fa19 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
 8006aba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ac8:	f040 810c 	bne.w	8006ce4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ad6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006ada:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006ade:	4622      	mov	r2, r4
 8006ae0:	462b      	mov	r3, r5
 8006ae2:	1891      	adds	r1, r2, r2
 8006ae4:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ae6:	415b      	adcs	r3, r3
 8006ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006aee:	4621      	mov	r1, r4
 8006af0:	eb12 0801 	adds.w	r8, r2, r1
 8006af4:	4629      	mov	r1, r5
 8006af6:	eb43 0901 	adc.w	r9, r3, r1
 8006afa:	f04f 0200 	mov.w	r2, #0
 8006afe:	f04f 0300 	mov.w	r3, #0
 8006b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b0e:	4690      	mov	r8, r2
 8006b10:	4699      	mov	r9, r3
 8006b12:	4623      	mov	r3, r4
 8006b14:	eb18 0303 	adds.w	r3, r8, r3
 8006b18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b1c:	462b      	mov	r3, r5
 8006b1e:	eb49 0303 	adc.w	r3, r9, r3
 8006b22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006b36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	18db      	adds	r3, r3, r3
 8006b3e:	653b      	str	r3, [r7, #80]	; 0x50
 8006b40:	4613      	mov	r3, r2
 8006b42:	eb42 0303 	adc.w	r3, r2, r3
 8006b46:	657b      	str	r3, [r7, #84]	; 0x54
 8006b48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006b4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006b50:	f7fa f832 	bl	8000bb8 <__aeabi_uldivmod>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4b61      	ldr	r3, [pc, #388]	; (8006ce0 <UART_SetConfig+0x2d4>)
 8006b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b5e:	095b      	lsrs	r3, r3, #5
 8006b60:	011c      	lsls	r4, r3, #4
 8006b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b74:	4642      	mov	r2, r8
 8006b76:	464b      	mov	r3, r9
 8006b78:	1891      	adds	r1, r2, r2
 8006b7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b7c:	415b      	adcs	r3, r3
 8006b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b84:	4641      	mov	r1, r8
 8006b86:	eb12 0a01 	adds.w	sl, r2, r1
 8006b8a:	4649      	mov	r1, r9
 8006b8c:	eb43 0b01 	adc.w	fp, r3, r1
 8006b90:	f04f 0200 	mov.w	r2, #0
 8006b94:	f04f 0300 	mov.w	r3, #0
 8006b98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ba0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ba4:	4692      	mov	sl, r2
 8006ba6:	469b      	mov	fp, r3
 8006ba8:	4643      	mov	r3, r8
 8006baa:	eb1a 0303 	adds.w	r3, sl, r3
 8006bae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bb2:	464b      	mov	r3, r9
 8006bb4:	eb4b 0303 	adc.w	r3, fp, r3
 8006bb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006bcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	18db      	adds	r3, r3, r3
 8006bd4:	643b      	str	r3, [r7, #64]	; 0x40
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	eb42 0303 	adc.w	r3, r2, r3
 8006bdc:	647b      	str	r3, [r7, #68]	; 0x44
 8006bde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006be2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006be6:	f7f9 ffe7 	bl	8000bb8 <__aeabi_uldivmod>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	4611      	mov	r1, r2
 8006bf0:	4b3b      	ldr	r3, [pc, #236]	; (8006ce0 <UART_SetConfig+0x2d4>)
 8006bf2:	fba3 2301 	umull	r2, r3, r3, r1
 8006bf6:	095b      	lsrs	r3, r3, #5
 8006bf8:	2264      	movs	r2, #100	; 0x64
 8006bfa:	fb02 f303 	mul.w	r3, r2, r3
 8006bfe:	1acb      	subs	r3, r1, r3
 8006c00:	00db      	lsls	r3, r3, #3
 8006c02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006c06:	4b36      	ldr	r3, [pc, #216]	; (8006ce0 <UART_SetConfig+0x2d4>)
 8006c08:	fba3 2302 	umull	r2, r3, r3, r2
 8006c0c:	095b      	lsrs	r3, r3, #5
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c14:	441c      	add	r4, r3
 8006c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006c24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006c28:	4642      	mov	r2, r8
 8006c2a:	464b      	mov	r3, r9
 8006c2c:	1891      	adds	r1, r2, r2
 8006c2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c30:	415b      	adcs	r3, r3
 8006c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c38:	4641      	mov	r1, r8
 8006c3a:	1851      	adds	r1, r2, r1
 8006c3c:	6339      	str	r1, [r7, #48]	; 0x30
 8006c3e:	4649      	mov	r1, r9
 8006c40:	414b      	adcs	r3, r1
 8006c42:	637b      	str	r3, [r7, #52]	; 0x34
 8006c44:	f04f 0200 	mov.w	r2, #0
 8006c48:	f04f 0300 	mov.w	r3, #0
 8006c4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006c50:	4659      	mov	r1, fp
 8006c52:	00cb      	lsls	r3, r1, #3
 8006c54:	4651      	mov	r1, sl
 8006c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c5a:	4651      	mov	r1, sl
 8006c5c:	00ca      	lsls	r2, r1, #3
 8006c5e:	4610      	mov	r0, r2
 8006c60:	4619      	mov	r1, r3
 8006c62:	4603      	mov	r3, r0
 8006c64:	4642      	mov	r2, r8
 8006c66:	189b      	adds	r3, r3, r2
 8006c68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c6c:	464b      	mov	r3, r9
 8006c6e:	460a      	mov	r2, r1
 8006c70:	eb42 0303 	adc.w	r3, r2, r3
 8006c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	18db      	adds	r3, r3, r3
 8006c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c92:	4613      	mov	r3, r2
 8006c94:	eb42 0303 	adc.w	r3, r2, r3
 8006c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006ca2:	f7f9 ff89 	bl	8000bb8 <__aeabi_uldivmod>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4b0d      	ldr	r3, [pc, #52]	; (8006ce0 <UART_SetConfig+0x2d4>)
 8006cac:	fba3 1302 	umull	r1, r3, r3, r2
 8006cb0:	095b      	lsrs	r3, r3, #5
 8006cb2:	2164      	movs	r1, #100	; 0x64
 8006cb4:	fb01 f303 	mul.w	r3, r1, r3
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	3332      	adds	r3, #50	; 0x32
 8006cbe:	4a08      	ldr	r2, [pc, #32]	; (8006ce0 <UART_SetConfig+0x2d4>)
 8006cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc4:	095b      	lsrs	r3, r3, #5
 8006cc6:	f003 0207 	and.w	r2, r3, #7
 8006cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4422      	add	r2, r4
 8006cd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006cd4:	e105      	b.n	8006ee2 <UART_SetConfig+0x4d6>
 8006cd6:	bf00      	nop
 8006cd8:	40011000 	.word	0x40011000
 8006cdc:	40011400 	.word	0x40011400
 8006ce0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006cee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006cf2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006cf6:	4642      	mov	r2, r8
 8006cf8:	464b      	mov	r3, r9
 8006cfa:	1891      	adds	r1, r2, r2
 8006cfc:	6239      	str	r1, [r7, #32]
 8006cfe:	415b      	adcs	r3, r3
 8006d00:	627b      	str	r3, [r7, #36]	; 0x24
 8006d02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d06:	4641      	mov	r1, r8
 8006d08:	1854      	adds	r4, r2, r1
 8006d0a:	4649      	mov	r1, r9
 8006d0c:	eb43 0501 	adc.w	r5, r3, r1
 8006d10:	f04f 0200 	mov.w	r2, #0
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	00eb      	lsls	r3, r5, #3
 8006d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d1e:	00e2      	lsls	r2, r4, #3
 8006d20:	4614      	mov	r4, r2
 8006d22:	461d      	mov	r5, r3
 8006d24:	4643      	mov	r3, r8
 8006d26:	18e3      	adds	r3, r4, r3
 8006d28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d2c:	464b      	mov	r3, r9
 8006d2e:	eb45 0303 	adc.w	r3, r5, r3
 8006d32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d46:	f04f 0200 	mov.w	r2, #0
 8006d4a:	f04f 0300 	mov.w	r3, #0
 8006d4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006d52:	4629      	mov	r1, r5
 8006d54:	008b      	lsls	r3, r1, #2
 8006d56:	4621      	mov	r1, r4
 8006d58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d5c:	4621      	mov	r1, r4
 8006d5e:	008a      	lsls	r2, r1, #2
 8006d60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d64:	f7f9 ff28 	bl	8000bb8 <__aeabi_uldivmod>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4b60      	ldr	r3, [pc, #384]	; (8006ef0 <UART_SetConfig+0x4e4>)
 8006d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d72:	095b      	lsrs	r3, r3, #5
 8006d74:	011c      	lsls	r4, r3, #4
 8006d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d88:	4642      	mov	r2, r8
 8006d8a:	464b      	mov	r3, r9
 8006d8c:	1891      	adds	r1, r2, r2
 8006d8e:	61b9      	str	r1, [r7, #24]
 8006d90:	415b      	adcs	r3, r3
 8006d92:	61fb      	str	r3, [r7, #28]
 8006d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d98:	4641      	mov	r1, r8
 8006d9a:	1851      	adds	r1, r2, r1
 8006d9c:	6139      	str	r1, [r7, #16]
 8006d9e:	4649      	mov	r1, r9
 8006da0:	414b      	adcs	r3, r1
 8006da2:	617b      	str	r3, [r7, #20]
 8006da4:	f04f 0200 	mov.w	r2, #0
 8006da8:	f04f 0300 	mov.w	r3, #0
 8006dac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006db0:	4659      	mov	r1, fp
 8006db2:	00cb      	lsls	r3, r1, #3
 8006db4:	4651      	mov	r1, sl
 8006db6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dba:	4651      	mov	r1, sl
 8006dbc:	00ca      	lsls	r2, r1, #3
 8006dbe:	4610      	mov	r0, r2
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	4642      	mov	r2, r8
 8006dc6:	189b      	adds	r3, r3, r2
 8006dc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006dcc:	464b      	mov	r3, r9
 8006dce:	460a      	mov	r2, r1
 8006dd0:	eb42 0303 	adc.w	r3, r2, r3
 8006dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006de2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006de4:	f04f 0200 	mov.w	r2, #0
 8006de8:	f04f 0300 	mov.w	r3, #0
 8006dec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006df0:	4649      	mov	r1, r9
 8006df2:	008b      	lsls	r3, r1, #2
 8006df4:	4641      	mov	r1, r8
 8006df6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dfa:	4641      	mov	r1, r8
 8006dfc:	008a      	lsls	r2, r1, #2
 8006dfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006e02:	f7f9 fed9 	bl	8000bb8 <__aeabi_uldivmod>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4b39      	ldr	r3, [pc, #228]	; (8006ef0 <UART_SetConfig+0x4e4>)
 8006e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e10:	095b      	lsrs	r3, r3, #5
 8006e12:	2164      	movs	r1, #100	; 0x64
 8006e14:	fb01 f303 	mul.w	r3, r1, r3
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	3332      	adds	r3, #50	; 0x32
 8006e1e:	4a34      	ldr	r2, [pc, #208]	; (8006ef0 <UART_SetConfig+0x4e4>)
 8006e20:	fba2 2303 	umull	r2, r3, r2, r3
 8006e24:	095b      	lsrs	r3, r3, #5
 8006e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e2a:	441c      	add	r4, r3
 8006e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e30:	2200      	movs	r2, #0
 8006e32:	673b      	str	r3, [r7, #112]	; 0x70
 8006e34:	677a      	str	r2, [r7, #116]	; 0x74
 8006e36:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006e3a:	4642      	mov	r2, r8
 8006e3c:	464b      	mov	r3, r9
 8006e3e:	1891      	adds	r1, r2, r2
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	415b      	adcs	r3, r3
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e4a:	4641      	mov	r1, r8
 8006e4c:	1851      	adds	r1, r2, r1
 8006e4e:	6039      	str	r1, [r7, #0]
 8006e50:	4649      	mov	r1, r9
 8006e52:	414b      	adcs	r3, r1
 8006e54:	607b      	str	r3, [r7, #4]
 8006e56:	f04f 0200 	mov.w	r2, #0
 8006e5a:	f04f 0300 	mov.w	r3, #0
 8006e5e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e62:	4659      	mov	r1, fp
 8006e64:	00cb      	lsls	r3, r1, #3
 8006e66:	4651      	mov	r1, sl
 8006e68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e6c:	4651      	mov	r1, sl
 8006e6e:	00ca      	lsls	r2, r1, #3
 8006e70:	4610      	mov	r0, r2
 8006e72:	4619      	mov	r1, r3
 8006e74:	4603      	mov	r3, r0
 8006e76:	4642      	mov	r2, r8
 8006e78:	189b      	adds	r3, r3, r2
 8006e7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e7c:	464b      	mov	r3, r9
 8006e7e:	460a      	mov	r2, r1
 8006e80:	eb42 0303 	adc.w	r3, r2, r3
 8006e84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	663b      	str	r3, [r7, #96]	; 0x60
 8006e90:	667a      	str	r2, [r7, #100]	; 0x64
 8006e92:	f04f 0200 	mov.w	r2, #0
 8006e96:	f04f 0300 	mov.w	r3, #0
 8006e9a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	008b      	lsls	r3, r1, #2
 8006ea2:	4641      	mov	r1, r8
 8006ea4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ea8:	4641      	mov	r1, r8
 8006eaa:	008a      	lsls	r2, r1, #2
 8006eac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006eb0:	f7f9 fe82 	bl	8000bb8 <__aeabi_uldivmod>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4b0d      	ldr	r3, [pc, #52]	; (8006ef0 <UART_SetConfig+0x4e4>)
 8006eba:	fba3 1302 	umull	r1, r3, r3, r2
 8006ebe:	095b      	lsrs	r3, r3, #5
 8006ec0:	2164      	movs	r1, #100	; 0x64
 8006ec2:	fb01 f303 	mul.w	r3, r1, r3
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	011b      	lsls	r3, r3, #4
 8006eca:	3332      	adds	r3, #50	; 0x32
 8006ecc:	4a08      	ldr	r2, [pc, #32]	; (8006ef0 <UART_SetConfig+0x4e4>)
 8006ece:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed2:	095b      	lsrs	r3, r3, #5
 8006ed4:	f003 020f 	and.w	r2, r3, #15
 8006ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4422      	add	r2, r4
 8006ee0:	609a      	str	r2, [r3, #8]
}
 8006ee2:	bf00      	nop
 8006ee4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eee:	bf00      	nop
 8006ef0:	51eb851f 	.word	0x51eb851f

08006ef4 <__errno>:
 8006ef4:	4b01      	ldr	r3, [pc, #4]	; (8006efc <__errno+0x8>)
 8006ef6:	6818      	ldr	r0, [r3, #0]
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	20000250 	.word	0x20000250

08006f00 <__libc_init_array>:
 8006f00:	b570      	push	{r4, r5, r6, lr}
 8006f02:	4d0d      	ldr	r5, [pc, #52]	; (8006f38 <__libc_init_array+0x38>)
 8006f04:	4c0d      	ldr	r4, [pc, #52]	; (8006f3c <__libc_init_array+0x3c>)
 8006f06:	1b64      	subs	r4, r4, r5
 8006f08:	10a4      	asrs	r4, r4, #2
 8006f0a:	2600      	movs	r6, #0
 8006f0c:	42a6      	cmp	r6, r4
 8006f0e:	d109      	bne.n	8006f24 <__libc_init_array+0x24>
 8006f10:	4d0b      	ldr	r5, [pc, #44]	; (8006f40 <__libc_init_array+0x40>)
 8006f12:	4c0c      	ldr	r4, [pc, #48]	; (8006f44 <__libc_init_array+0x44>)
 8006f14:	f002 ff04 	bl	8009d20 <_init>
 8006f18:	1b64      	subs	r4, r4, r5
 8006f1a:	10a4      	asrs	r4, r4, #2
 8006f1c:	2600      	movs	r6, #0
 8006f1e:	42a6      	cmp	r6, r4
 8006f20:	d105      	bne.n	8006f2e <__libc_init_array+0x2e>
 8006f22:	bd70      	pop	{r4, r5, r6, pc}
 8006f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f28:	4798      	blx	r3
 8006f2a:	3601      	adds	r6, #1
 8006f2c:	e7ee      	b.n	8006f0c <__libc_init_array+0xc>
 8006f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f32:	4798      	blx	r3
 8006f34:	3601      	adds	r6, #1
 8006f36:	e7f2      	b.n	8006f1e <__libc_init_array+0x1e>
 8006f38:	0800a304 	.word	0x0800a304
 8006f3c:	0800a304 	.word	0x0800a304
 8006f40:	0800a304 	.word	0x0800a304
 8006f44:	0800a308 	.word	0x0800a308

08006f48 <memset>:
 8006f48:	4402      	add	r2, r0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d100      	bne.n	8006f52 <memset+0xa>
 8006f50:	4770      	bx	lr
 8006f52:	f803 1b01 	strb.w	r1, [r3], #1
 8006f56:	e7f9      	b.n	8006f4c <memset+0x4>

08006f58 <__cvt>:
 8006f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f5c:	ec55 4b10 	vmov	r4, r5, d0
 8006f60:	2d00      	cmp	r5, #0
 8006f62:	460e      	mov	r6, r1
 8006f64:	4619      	mov	r1, r3
 8006f66:	462b      	mov	r3, r5
 8006f68:	bfbb      	ittet	lt
 8006f6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f6e:	461d      	movlt	r5, r3
 8006f70:	2300      	movge	r3, #0
 8006f72:	232d      	movlt	r3, #45	; 0x2d
 8006f74:	700b      	strb	r3, [r1, #0]
 8006f76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f7c:	4691      	mov	r9, r2
 8006f7e:	f023 0820 	bic.w	r8, r3, #32
 8006f82:	bfbc      	itt	lt
 8006f84:	4622      	movlt	r2, r4
 8006f86:	4614      	movlt	r4, r2
 8006f88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f8c:	d005      	beq.n	8006f9a <__cvt+0x42>
 8006f8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f92:	d100      	bne.n	8006f96 <__cvt+0x3e>
 8006f94:	3601      	adds	r6, #1
 8006f96:	2102      	movs	r1, #2
 8006f98:	e000      	b.n	8006f9c <__cvt+0x44>
 8006f9a:	2103      	movs	r1, #3
 8006f9c:	ab03      	add	r3, sp, #12
 8006f9e:	9301      	str	r3, [sp, #4]
 8006fa0:	ab02      	add	r3, sp, #8
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	ec45 4b10 	vmov	d0, r4, r5
 8006fa8:	4653      	mov	r3, sl
 8006faa:	4632      	mov	r2, r6
 8006fac:	f000 fcec 	bl	8007988 <_dtoa_r>
 8006fb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006fb4:	4607      	mov	r7, r0
 8006fb6:	d102      	bne.n	8006fbe <__cvt+0x66>
 8006fb8:	f019 0f01 	tst.w	r9, #1
 8006fbc:	d022      	beq.n	8007004 <__cvt+0xac>
 8006fbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fc2:	eb07 0906 	add.w	r9, r7, r6
 8006fc6:	d110      	bne.n	8006fea <__cvt+0x92>
 8006fc8:	783b      	ldrb	r3, [r7, #0]
 8006fca:	2b30      	cmp	r3, #48	; 0x30
 8006fcc:	d10a      	bne.n	8006fe4 <__cvt+0x8c>
 8006fce:	2200      	movs	r2, #0
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	f7f9 fd7f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fda:	b918      	cbnz	r0, 8006fe4 <__cvt+0x8c>
 8006fdc:	f1c6 0601 	rsb	r6, r6, #1
 8006fe0:	f8ca 6000 	str.w	r6, [sl]
 8006fe4:	f8da 3000 	ldr.w	r3, [sl]
 8006fe8:	4499      	add	r9, r3
 8006fea:	2200      	movs	r2, #0
 8006fec:	2300      	movs	r3, #0
 8006fee:	4620      	mov	r0, r4
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	f7f9 fd71 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ff6:	b108      	cbz	r0, 8006ffc <__cvt+0xa4>
 8006ff8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ffc:	2230      	movs	r2, #48	; 0x30
 8006ffe:	9b03      	ldr	r3, [sp, #12]
 8007000:	454b      	cmp	r3, r9
 8007002:	d307      	bcc.n	8007014 <__cvt+0xbc>
 8007004:	9b03      	ldr	r3, [sp, #12]
 8007006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007008:	1bdb      	subs	r3, r3, r7
 800700a:	4638      	mov	r0, r7
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	b004      	add	sp, #16
 8007010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007014:	1c59      	adds	r1, r3, #1
 8007016:	9103      	str	r1, [sp, #12]
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	e7f0      	b.n	8006ffe <__cvt+0xa6>

0800701c <__exponent>:
 800701c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800701e:	4603      	mov	r3, r0
 8007020:	2900      	cmp	r1, #0
 8007022:	bfb8      	it	lt
 8007024:	4249      	neglt	r1, r1
 8007026:	f803 2b02 	strb.w	r2, [r3], #2
 800702a:	bfb4      	ite	lt
 800702c:	222d      	movlt	r2, #45	; 0x2d
 800702e:	222b      	movge	r2, #43	; 0x2b
 8007030:	2909      	cmp	r1, #9
 8007032:	7042      	strb	r2, [r0, #1]
 8007034:	dd2a      	ble.n	800708c <__exponent+0x70>
 8007036:	f10d 0407 	add.w	r4, sp, #7
 800703a:	46a4      	mov	ip, r4
 800703c:	270a      	movs	r7, #10
 800703e:	46a6      	mov	lr, r4
 8007040:	460a      	mov	r2, r1
 8007042:	fb91 f6f7 	sdiv	r6, r1, r7
 8007046:	fb07 1516 	mls	r5, r7, r6, r1
 800704a:	3530      	adds	r5, #48	; 0x30
 800704c:	2a63      	cmp	r2, #99	; 0x63
 800704e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007052:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007056:	4631      	mov	r1, r6
 8007058:	dcf1      	bgt.n	800703e <__exponent+0x22>
 800705a:	3130      	adds	r1, #48	; 0x30
 800705c:	f1ae 0502 	sub.w	r5, lr, #2
 8007060:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007064:	1c44      	adds	r4, r0, #1
 8007066:	4629      	mov	r1, r5
 8007068:	4561      	cmp	r1, ip
 800706a:	d30a      	bcc.n	8007082 <__exponent+0x66>
 800706c:	f10d 0209 	add.w	r2, sp, #9
 8007070:	eba2 020e 	sub.w	r2, r2, lr
 8007074:	4565      	cmp	r5, ip
 8007076:	bf88      	it	hi
 8007078:	2200      	movhi	r2, #0
 800707a:	4413      	add	r3, r2
 800707c:	1a18      	subs	r0, r3, r0
 800707e:	b003      	add	sp, #12
 8007080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007086:	f804 2f01 	strb.w	r2, [r4, #1]!
 800708a:	e7ed      	b.n	8007068 <__exponent+0x4c>
 800708c:	2330      	movs	r3, #48	; 0x30
 800708e:	3130      	adds	r1, #48	; 0x30
 8007090:	7083      	strb	r3, [r0, #2]
 8007092:	70c1      	strb	r1, [r0, #3]
 8007094:	1d03      	adds	r3, r0, #4
 8007096:	e7f1      	b.n	800707c <__exponent+0x60>

08007098 <_printf_float>:
 8007098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709c:	ed2d 8b02 	vpush	{d8}
 80070a0:	b08d      	sub	sp, #52	; 0x34
 80070a2:	460c      	mov	r4, r1
 80070a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80070a8:	4616      	mov	r6, r2
 80070aa:	461f      	mov	r7, r3
 80070ac:	4605      	mov	r5, r0
 80070ae:	f001 fa59 	bl	8008564 <_localeconv_r>
 80070b2:	f8d0 a000 	ldr.w	sl, [r0]
 80070b6:	4650      	mov	r0, sl
 80070b8:	f7f9 f892 	bl	80001e0 <strlen>
 80070bc:	2300      	movs	r3, #0
 80070be:	930a      	str	r3, [sp, #40]	; 0x28
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	9305      	str	r3, [sp, #20]
 80070c4:	f8d8 3000 	ldr.w	r3, [r8]
 80070c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80070cc:	3307      	adds	r3, #7
 80070ce:	f023 0307 	bic.w	r3, r3, #7
 80070d2:	f103 0208 	add.w	r2, r3, #8
 80070d6:	f8c8 2000 	str.w	r2, [r8]
 80070da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80070e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80070e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070ea:	9307      	str	r3, [sp, #28]
 80070ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80070f0:	ee08 0a10 	vmov	s16, r0
 80070f4:	4b9f      	ldr	r3, [pc, #636]	; (8007374 <_printf_float+0x2dc>)
 80070f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070fa:	f04f 32ff 	mov.w	r2, #4294967295
 80070fe:	f7f9 fd1d 	bl	8000b3c <__aeabi_dcmpun>
 8007102:	bb88      	cbnz	r0, 8007168 <_printf_float+0xd0>
 8007104:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007108:	4b9a      	ldr	r3, [pc, #616]	; (8007374 <_printf_float+0x2dc>)
 800710a:	f04f 32ff 	mov.w	r2, #4294967295
 800710e:	f7f9 fcf7 	bl	8000b00 <__aeabi_dcmple>
 8007112:	bb48      	cbnz	r0, 8007168 <_printf_float+0xd0>
 8007114:	2200      	movs	r2, #0
 8007116:	2300      	movs	r3, #0
 8007118:	4640      	mov	r0, r8
 800711a:	4649      	mov	r1, r9
 800711c:	f7f9 fce6 	bl	8000aec <__aeabi_dcmplt>
 8007120:	b110      	cbz	r0, 8007128 <_printf_float+0x90>
 8007122:	232d      	movs	r3, #45	; 0x2d
 8007124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007128:	4b93      	ldr	r3, [pc, #588]	; (8007378 <_printf_float+0x2e0>)
 800712a:	4894      	ldr	r0, [pc, #592]	; (800737c <_printf_float+0x2e4>)
 800712c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007130:	bf94      	ite	ls
 8007132:	4698      	movls	r8, r3
 8007134:	4680      	movhi	r8, r0
 8007136:	2303      	movs	r3, #3
 8007138:	6123      	str	r3, [r4, #16]
 800713a:	9b05      	ldr	r3, [sp, #20]
 800713c:	f023 0204 	bic.w	r2, r3, #4
 8007140:	6022      	str	r2, [r4, #0]
 8007142:	f04f 0900 	mov.w	r9, #0
 8007146:	9700      	str	r7, [sp, #0]
 8007148:	4633      	mov	r3, r6
 800714a:	aa0b      	add	r2, sp, #44	; 0x2c
 800714c:	4621      	mov	r1, r4
 800714e:	4628      	mov	r0, r5
 8007150:	f000 f9d8 	bl	8007504 <_printf_common>
 8007154:	3001      	adds	r0, #1
 8007156:	f040 8090 	bne.w	800727a <_printf_float+0x1e2>
 800715a:	f04f 30ff 	mov.w	r0, #4294967295
 800715e:	b00d      	add	sp, #52	; 0x34
 8007160:	ecbd 8b02 	vpop	{d8}
 8007164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007168:	4642      	mov	r2, r8
 800716a:	464b      	mov	r3, r9
 800716c:	4640      	mov	r0, r8
 800716e:	4649      	mov	r1, r9
 8007170:	f7f9 fce4 	bl	8000b3c <__aeabi_dcmpun>
 8007174:	b140      	cbz	r0, 8007188 <_printf_float+0xf0>
 8007176:	464b      	mov	r3, r9
 8007178:	2b00      	cmp	r3, #0
 800717a:	bfbc      	itt	lt
 800717c:	232d      	movlt	r3, #45	; 0x2d
 800717e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007182:	487f      	ldr	r0, [pc, #508]	; (8007380 <_printf_float+0x2e8>)
 8007184:	4b7f      	ldr	r3, [pc, #508]	; (8007384 <_printf_float+0x2ec>)
 8007186:	e7d1      	b.n	800712c <_printf_float+0x94>
 8007188:	6863      	ldr	r3, [r4, #4]
 800718a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800718e:	9206      	str	r2, [sp, #24]
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	d13f      	bne.n	8007214 <_printf_float+0x17c>
 8007194:	2306      	movs	r3, #6
 8007196:	6063      	str	r3, [r4, #4]
 8007198:	9b05      	ldr	r3, [sp, #20]
 800719a:	6861      	ldr	r1, [r4, #4]
 800719c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80071a0:	2300      	movs	r3, #0
 80071a2:	9303      	str	r3, [sp, #12]
 80071a4:	ab0a      	add	r3, sp, #40	; 0x28
 80071a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80071aa:	ab09      	add	r3, sp, #36	; 0x24
 80071ac:	ec49 8b10 	vmov	d0, r8, r9
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	6022      	str	r2, [r4, #0]
 80071b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80071b8:	4628      	mov	r0, r5
 80071ba:	f7ff fecd 	bl	8006f58 <__cvt>
 80071be:	9b06      	ldr	r3, [sp, #24]
 80071c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071c2:	2b47      	cmp	r3, #71	; 0x47
 80071c4:	4680      	mov	r8, r0
 80071c6:	d108      	bne.n	80071da <_printf_float+0x142>
 80071c8:	1cc8      	adds	r0, r1, #3
 80071ca:	db02      	blt.n	80071d2 <_printf_float+0x13a>
 80071cc:	6863      	ldr	r3, [r4, #4]
 80071ce:	4299      	cmp	r1, r3
 80071d0:	dd41      	ble.n	8007256 <_printf_float+0x1be>
 80071d2:	f1ab 0b02 	sub.w	fp, fp, #2
 80071d6:	fa5f fb8b 	uxtb.w	fp, fp
 80071da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071de:	d820      	bhi.n	8007222 <_printf_float+0x18a>
 80071e0:	3901      	subs	r1, #1
 80071e2:	465a      	mov	r2, fp
 80071e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80071e8:	9109      	str	r1, [sp, #36]	; 0x24
 80071ea:	f7ff ff17 	bl	800701c <__exponent>
 80071ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071f0:	1813      	adds	r3, r2, r0
 80071f2:	2a01      	cmp	r2, #1
 80071f4:	4681      	mov	r9, r0
 80071f6:	6123      	str	r3, [r4, #16]
 80071f8:	dc02      	bgt.n	8007200 <_printf_float+0x168>
 80071fa:	6822      	ldr	r2, [r4, #0]
 80071fc:	07d2      	lsls	r2, r2, #31
 80071fe:	d501      	bpl.n	8007204 <_printf_float+0x16c>
 8007200:	3301      	adds	r3, #1
 8007202:	6123      	str	r3, [r4, #16]
 8007204:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007208:	2b00      	cmp	r3, #0
 800720a:	d09c      	beq.n	8007146 <_printf_float+0xae>
 800720c:	232d      	movs	r3, #45	; 0x2d
 800720e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007212:	e798      	b.n	8007146 <_printf_float+0xae>
 8007214:	9a06      	ldr	r2, [sp, #24]
 8007216:	2a47      	cmp	r2, #71	; 0x47
 8007218:	d1be      	bne.n	8007198 <_printf_float+0x100>
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1bc      	bne.n	8007198 <_printf_float+0x100>
 800721e:	2301      	movs	r3, #1
 8007220:	e7b9      	b.n	8007196 <_printf_float+0xfe>
 8007222:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007226:	d118      	bne.n	800725a <_printf_float+0x1c2>
 8007228:	2900      	cmp	r1, #0
 800722a:	6863      	ldr	r3, [r4, #4]
 800722c:	dd0b      	ble.n	8007246 <_printf_float+0x1ae>
 800722e:	6121      	str	r1, [r4, #16]
 8007230:	b913      	cbnz	r3, 8007238 <_printf_float+0x1a0>
 8007232:	6822      	ldr	r2, [r4, #0]
 8007234:	07d0      	lsls	r0, r2, #31
 8007236:	d502      	bpl.n	800723e <_printf_float+0x1a6>
 8007238:	3301      	adds	r3, #1
 800723a:	440b      	add	r3, r1
 800723c:	6123      	str	r3, [r4, #16]
 800723e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007240:	f04f 0900 	mov.w	r9, #0
 8007244:	e7de      	b.n	8007204 <_printf_float+0x16c>
 8007246:	b913      	cbnz	r3, 800724e <_printf_float+0x1b6>
 8007248:	6822      	ldr	r2, [r4, #0]
 800724a:	07d2      	lsls	r2, r2, #31
 800724c:	d501      	bpl.n	8007252 <_printf_float+0x1ba>
 800724e:	3302      	adds	r3, #2
 8007250:	e7f4      	b.n	800723c <_printf_float+0x1a4>
 8007252:	2301      	movs	r3, #1
 8007254:	e7f2      	b.n	800723c <_printf_float+0x1a4>
 8007256:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800725a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800725c:	4299      	cmp	r1, r3
 800725e:	db05      	blt.n	800726c <_printf_float+0x1d4>
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	6121      	str	r1, [r4, #16]
 8007264:	07d8      	lsls	r0, r3, #31
 8007266:	d5ea      	bpl.n	800723e <_printf_float+0x1a6>
 8007268:	1c4b      	adds	r3, r1, #1
 800726a:	e7e7      	b.n	800723c <_printf_float+0x1a4>
 800726c:	2900      	cmp	r1, #0
 800726e:	bfd4      	ite	le
 8007270:	f1c1 0202 	rsble	r2, r1, #2
 8007274:	2201      	movgt	r2, #1
 8007276:	4413      	add	r3, r2
 8007278:	e7e0      	b.n	800723c <_printf_float+0x1a4>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	055a      	lsls	r2, r3, #21
 800727e:	d407      	bmi.n	8007290 <_printf_float+0x1f8>
 8007280:	6923      	ldr	r3, [r4, #16]
 8007282:	4642      	mov	r2, r8
 8007284:	4631      	mov	r1, r6
 8007286:	4628      	mov	r0, r5
 8007288:	47b8      	blx	r7
 800728a:	3001      	adds	r0, #1
 800728c:	d12c      	bne.n	80072e8 <_printf_float+0x250>
 800728e:	e764      	b.n	800715a <_printf_float+0xc2>
 8007290:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007294:	f240 80e0 	bls.w	8007458 <_printf_float+0x3c0>
 8007298:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800729c:	2200      	movs	r2, #0
 800729e:	2300      	movs	r3, #0
 80072a0:	f7f9 fc1a 	bl	8000ad8 <__aeabi_dcmpeq>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d034      	beq.n	8007312 <_printf_float+0x27a>
 80072a8:	4a37      	ldr	r2, [pc, #220]	; (8007388 <_printf_float+0x2f0>)
 80072aa:	2301      	movs	r3, #1
 80072ac:	4631      	mov	r1, r6
 80072ae:	4628      	mov	r0, r5
 80072b0:	47b8      	blx	r7
 80072b2:	3001      	adds	r0, #1
 80072b4:	f43f af51 	beq.w	800715a <_printf_float+0xc2>
 80072b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072bc:	429a      	cmp	r2, r3
 80072be:	db02      	blt.n	80072c6 <_printf_float+0x22e>
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	07d8      	lsls	r0, r3, #31
 80072c4:	d510      	bpl.n	80072e8 <_printf_float+0x250>
 80072c6:	ee18 3a10 	vmov	r3, s16
 80072ca:	4652      	mov	r2, sl
 80072cc:	4631      	mov	r1, r6
 80072ce:	4628      	mov	r0, r5
 80072d0:	47b8      	blx	r7
 80072d2:	3001      	adds	r0, #1
 80072d4:	f43f af41 	beq.w	800715a <_printf_float+0xc2>
 80072d8:	f04f 0800 	mov.w	r8, #0
 80072dc:	f104 091a 	add.w	r9, r4, #26
 80072e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e2:	3b01      	subs	r3, #1
 80072e4:	4543      	cmp	r3, r8
 80072e6:	dc09      	bgt.n	80072fc <_printf_float+0x264>
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	079b      	lsls	r3, r3, #30
 80072ec:	f100 8105 	bmi.w	80074fa <_printf_float+0x462>
 80072f0:	68e0      	ldr	r0, [r4, #12]
 80072f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072f4:	4298      	cmp	r0, r3
 80072f6:	bfb8      	it	lt
 80072f8:	4618      	movlt	r0, r3
 80072fa:	e730      	b.n	800715e <_printf_float+0xc6>
 80072fc:	2301      	movs	r3, #1
 80072fe:	464a      	mov	r2, r9
 8007300:	4631      	mov	r1, r6
 8007302:	4628      	mov	r0, r5
 8007304:	47b8      	blx	r7
 8007306:	3001      	adds	r0, #1
 8007308:	f43f af27 	beq.w	800715a <_printf_float+0xc2>
 800730c:	f108 0801 	add.w	r8, r8, #1
 8007310:	e7e6      	b.n	80072e0 <_printf_float+0x248>
 8007312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007314:	2b00      	cmp	r3, #0
 8007316:	dc39      	bgt.n	800738c <_printf_float+0x2f4>
 8007318:	4a1b      	ldr	r2, [pc, #108]	; (8007388 <_printf_float+0x2f0>)
 800731a:	2301      	movs	r3, #1
 800731c:	4631      	mov	r1, r6
 800731e:	4628      	mov	r0, r5
 8007320:	47b8      	blx	r7
 8007322:	3001      	adds	r0, #1
 8007324:	f43f af19 	beq.w	800715a <_printf_float+0xc2>
 8007328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800732c:	4313      	orrs	r3, r2
 800732e:	d102      	bne.n	8007336 <_printf_float+0x29e>
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	07d9      	lsls	r1, r3, #31
 8007334:	d5d8      	bpl.n	80072e8 <_printf_float+0x250>
 8007336:	ee18 3a10 	vmov	r3, s16
 800733a:	4652      	mov	r2, sl
 800733c:	4631      	mov	r1, r6
 800733e:	4628      	mov	r0, r5
 8007340:	47b8      	blx	r7
 8007342:	3001      	adds	r0, #1
 8007344:	f43f af09 	beq.w	800715a <_printf_float+0xc2>
 8007348:	f04f 0900 	mov.w	r9, #0
 800734c:	f104 0a1a 	add.w	sl, r4, #26
 8007350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007352:	425b      	negs	r3, r3
 8007354:	454b      	cmp	r3, r9
 8007356:	dc01      	bgt.n	800735c <_printf_float+0x2c4>
 8007358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800735a:	e792      	b.n	8007282 <_printf_float+0x1ea>
 800735c:	2301      	movs	r3, #1
 800735e:	4652      	mov	r2, sl
 8007360:	4631      	mov	r1, r6
 8007362:	4628      	mov	r0, r5
 8007364:	47b8      	blx	r7
 8007366:	3001      	adds	r0, #1
 8007368:	f43f aef7 	beq.w	800715a <_printf_float+0xc2>
 800736c:	f109 0901 	add.w	r9, r9, #1
 8007370:	e7ee      	b.n	8007350 <_printf_float+0x2b8>
 8007372:	bf00      	nop
 8007374:	7fefffff 	.word	0x7fefffff
 8007378:	08009f28 	.word	0x08009f28
 800737c:	08009f2c 	.word	0x08009f2c
 8007380:	08009f34 	.word	0x08009f34
 8007384:	08009f30 	.word	0x08009f30
 8007388:	08009f38 	.word	0x08009f38
 800738c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800738e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007390:	429a      	cmp	r2, r3
 8007392:	bfa8      	it	ge
 8007394:	461a      	movge	r2, r3
 8007396:	2a00      	cmp	r2, #0
 8007398:	4691      	mov	r9, r2
 800739a:	dc37      	bgt.n	800740c <_printf_float+0x374>
 800739c:	f04f 0b00 	mov.w	fp, #0
 80073a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073a4:	f104 021a 	add.w	r2, r4, #26
 80073a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073aa:	9305      	str	r3, [sp, #20]
 80073ac:	eba3 0309 	sub.w	r3, r3, r9
 80073b0:	455b      	cmp	r3, fp
 80073b2:	dc33      	bgt.n	800741c <_printf_float+0x384>
 80073b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073b8:	429a      	cmp	r2, r3
 80073ba:	db3b      	blt.n	8007434 <_printf_float+0x39c>
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	07da      	lsls	r2, r3, #31
 80073c0:	d438      	bmi.n	8007434 <_printf_float+0x39c>
 80073c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073c4:	9a05      	ldr	r2, [sp, #20]
 80073c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073c8:	1a9a      	subs	r2, r3, r2
 80073ca:	eba3 0901 	sub.w	r9, r3, r1
 80073ce:	4591      	cmp	r9, r2
 80073d0:	bfa8      	it	ge
 80073d2:	4691      	movge	r9, r2
 80073d4:	f1b9 0f00 	cmp.w	r9, #0
 80073d8:	dc35      	bgt.n	8007446 <_printf_float+0x3ae>
 80073da:	f04f 0800 	mov.w	r8, #0
 80073de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073e2:	f104 0a1a 	add.w	sl, r4, #26
 80073e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073ea:	1a9b      	subs	r3, r3, r2
 80073ec:	eba3 0309 	sub.w	r3, r3, r9
 80073f0:	4543      	cmp	r3, r8
 80073f2:	f77f af79 	ble.w	80072e8 <_printf_float+0x250>
 80073f6:	2301      	movs	r3, #1
 80073f8:	4652      	mov	r2, sl
 80073fa:	4631      	mov	r1, r6
 80073fc:	4628      	mov	r0, r5
 80073fe:	47b8      	blx	r7
 8007400:	3001      	adds	r0, #1
 8007402:	f43f aeaa 	beq.w	800715a <_printf_float+0xc2>
 8007406:	f108 0801 	add.w	r8, r8, #1
 800740a:	e7ec      	b.n	80073e6 <_printf_float+0x34e>
 800740c:	4613      	mov	r3, r2
 800740e:	4631      	mov	r1, r6
 8007410:	4642      	mov	r2, r8
 8007412:	4628      	mov	r0, r5
 8007414:	47b8      	blx	r7
 8007416:	3001      	adds	r0, #1
 8007418:	d1c0      	bne.n	800739c <_printf_float+0x304>
 800741a:	e69e      	b.n	800715a <_printf_float+0xc2>
 800741c:	2301      	movs	r3, #1
 800741e:	4631      	mov	r1, r6
 8007420:	4628      	mov	r0, r5
 8007422:	9205      	str	r2, [sp, #20]
 8007424:	47b8      	blx	r7
 8007426:	3001      	adds	r0, #1
 8007428:	f43f ae97 	beq.w	800715a <_printf_float+0xc2>
 800742c:	9a05      	ldr	r2, [sp, #20]
 800742e:	f10b 0b01 	add.w	fp, fp, #1
 8007432:	e7b9      	b.n	80073a8 <_printf_float+0x310>
 8007434:	ee18 3a10 	vmov	r3, s16
 8007438:	4652      	mov	r2, sl
 800743a:	4631      	mov	r1, r6
 800743c:	4628      	mov	r0, r5
 800743e:	47b8      	blx	r7
 8007440:	3001      	adds	r0, #1
 8007442:	d1be      	bne.n	80073c2 <_printf_float+0x32a>
 8007444:	e689      	b.n	800715a <_printf_float+0xc2>
 8007446:	9a05      	ldr	r2, [sp, #20]
 8007448:	464b      	mov	r3, r9
 800744a:	4442      	add	r2, r8
 800744c:	4631      	mov	r1, r6
 800744e:	4628      	mov	r0, r5
 8007450:	47b8      	blx	r7
 8007452:	3001      	adds	r0, #1
 8007454:	d1c1      	bne.n	80073da <_printf_float+0x342>
 8007456:	e680      	b.n	800715a <_printf_float+0xc2>
 8007458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800745a:	2a01      	cmp	r2, #1
 800745c:	dc01      	bgt.n	8007462 <_printf_float+0x3ca>
 800745e:	07db      	lsls	r3, r3, #31
 8007460:	d538      	bpl.n	80074d4 <_printf_float+0x43c>
 8007462:	2301      	movs	r3, #1
 8007464:	4642      	mov	r2, r8
 8007466:	4631      	mov	r1, r6
 8007468:	4628      	mov	r0, r5
 800746a:	47b8      	blx	r7
 800746c:	3001      	adds	r0, #1
 800746e:	f43f ae74 	beq.w	800715a <_printf_float+0xc2>
 8007472:	ee18 3a10 	vmov	r3, s16
 8007476:	4652      	mov	r2, sl
 8007478:	4631      	mov	r1, r6
 800747a:	4628      	mov	r0, r5
 800747c:	47b8      	blx	r7
 800747e:	3001      	adds	r0, #1
 8007480:	f43f ae6b 	beq.w	800715a <_printf_float+0xc2>
 8007484:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007488:	2200      	movs	r2, #0
 800748a:	2300      	movs	r3, #0
 800748c:	f7f9 fb24 	bl	8000ad8 <__aeabi_dcmpeq>
 8007490:	b9d8      	cbnz	r0, 80074ca <_printf_float+0x432>
 8007492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007494:	f108 0201 	add.w	r2, r8, #1
 8007498:	3b01      	subs	r3, #1
 800749a:	4631      	mov	r1, r6
 800749c:	4628      	mov	r0, r5
 800749e:	47b8      	blx	r7
 80074a0:	3001      	adds	r0, #1
 80074a2:	d10e      	bne.n	80074c2 <_printf_float+0x42a>
 80074a4:	e659      	b.n	800715a <_printf_float+0xc2>
 80074a6:	2301      	movs	r3, #1
 80074a8:	4652      	mov	r2, sl
 80074aa:	4631      	mov	r1, r6
 80074ac:	4628      	mov	r0, r5
 80074ae:	47b8      	blx	r7
 80074b0:	3001      	adds	r0, #1
 80074b2:	f43f ae52 	beq.w	800715a <_printf_float+0xc2>
 80074b6:	f108 0801 	add.w	r8, r8, #1
 80074ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074bc:	3b01      	subs	r3, #1
 80074be:	4543      	cmp	r3, r8
 80074c0:	dcf1      	bgt.n	80074a6 <_printf_float+0x40e>
 80074c2:	464b      	mov	r3, r9
 80074c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074c8:	e6dc      	b.n	8007284 <_printf_float+0x1ec>
 80074ca:	f04f 0800 	mov.w	r8, #0
 80074ce:	f104 0a1a 	add.w	sl, r4, #26
 80074d2:	e7f2      	b.n	80074ba <_printf_float+0x422>
 80074d4:	2301      	movs	r3, #1
 80074d6:	4642      	mov	r2, r8
 80074d8:	e7df      	b.n	800749a <_printf_float+0x402>
 80074da:	2301      	movs	r3, #1
 80074dc:	464a      	mov	r2, r9
 80074de:	4631      	mov	r1, r6
 80074e0:	4628      	mov	r0, r5
 80074e2:	47b8      	blx	r7
 80074e4:	3001      	adds	r0, #1
 80074e6:	f43f ae38 	beq.w	800715a <_printf_float+0xc2>
 80074ea:	f108 0801 	add.w	r8, r8, #1
 80074ee:	68e3      	ldr	r3, [r4, #12]
 80074f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074f2:	1a5b      	subs	r3, r3, r1
 80074f4:	4543      	cmp	r3, r8
 80074f6:	dcf0      	bgt.n	80074da <_printf_float+0x442>
 80074f8:	e6fa      	b.n	80072f0 <_printf_float+0x258>
 80074fa:	f04f 0800 	mov.w	r8, #0
 80074fe:	f104 0919 	add.w	r9, r4, #25
 8007502:	e7f4      	b.n	80074ee <_printf_float+0x456>

08007504 <_printf_common>:
 8007504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007508:	4616      	mov	r6, r2
 800750a:	4699      	mov	r9, r3
 800750c:	688a      	ldr	r2, [r1, #8]
 800750e:	690b      	ldr	r3, [r1, #16]
 8007510:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007514:	4293      	cmp	r3, r2
 8007516:	bfb8      	it	lt
 8007518:	4613      	movlt	r3, r2
 800751a:	6033      	str	r3, [r6, #0]
 800751c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007520:	4607      	mov	r7, r0
 8007522:	460c      	mov	r4, r1
 8007524:	b10a      	cbz	r2, 800752a <_printf_common+0x26>
 8007526:	3301      	adds	r3, #1
 8007528:	6033      	str	r3, [r6, #0]
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	0699      	lsls	r1, r3, #26
 800752e:	bf42      	ittt	mi
 8007530:	6833      	ldrmi	r3, [r6, #0]
 8007532:	3302      	addmi	r3, #2
 8007534:	6033      	strmi	r3, [r6, #0]
 8007536:	6825      	ldr	r5, [r4, #0]
 8007538:	f015 0506 	ands.w	r5, r5, #6
 800753c:	d106      	bne.n	800754c <_printf_common+0x48>
 800753e:	f104 0a19 	add.w	sl, r4, #25
 8007542:	68e3      	ldr	r3, [r4, #12]
 8007544:	6832      	ldr	r2, [r6, #0]
 8007546:	1a9b      	subs	r3, r3, r2
 8007548:	42ab      	cmp	r3, r5
 800754a:	dc26      	bgt.n	800759a <_printf_common+0x96>
 800754c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007550:	1e13      	subs	r3, r2, #0
 8007552:	6822      	ldr	r2, [r4, #0]
 8007554:	bf18      	it	ne
 8007556:	2301      	movne	r3, #1
 8007558:	0692      	lsls	r2, r2, #26
 800755a:	d42b      	bmi.n	80075b4 <_printf_common+0xb0>
 800755c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007560:	4649      	mov	r1, r9
 8007562:	4638      	mov	r0, r7
 8007564:	47c0      	blx	r8
 8007566:	3001      	adds	r0, #1
 8007568:	d01e      	beq.n	80075a8 <_printf_common+0xa4>
 800756a:	6823      	ldr	r3, [r4, #0]
 800756c:	68e5      	ldr	r5, [r4, #12]
 800756e:	6832      	ldr	r2, [r6, #0]
 8007570:	f003 0306 	and.w	r3, r3, #6
 8007574:	2b04      	cmp	r3, #4
 8007576:	bf08      	it	eq
 8007578:	1aad      	subeq	r5, r5, r2
 800757a:	68a3      	ldr	r3, [r4, #8]
 800757c:	6922      	ldr	r2, [r4, #16]
 800757e:	bf0c      	ite	eq
 8007580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007584:	2500      	movne	r5, #0
 8007586:	4293      	cmp	r3, r2
 8007588:	bfc4      	itt	gt
 800758a:	1a9b      	subgt	r3, r3, r2
 800758c:	18ed      	addgt	r5, r5, r3
 800758e:	2600      	movs	r6, #0
 8007590:	341a      	adds	r4, #26
 8007592:	42b5      	cmp	r5, r6
 8007594:	d11a      	bne.n	80075cc <_printf_common+0xc8>
 8007596:	2000      	movs	r0, #0
 8007598:	e008      	b.n	80075ac <_printf_common+0xa8>
 800759a:	2301      	movs	r3, #1
 800759c:	4652      	mov	r2, sl
 800759e:	4649      	mov	r1, r9
 80075a0:	4638      	mov	r0, r7
 80075a2:	47c0      	blx	r8
 80075a4:	3001      	adds	r0, #1
 80075a6:	d103      	bne.n	80075b0 <_printf_common+0xac>
 80075a8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b0:	3501      	adds	r5, #1
 80075b2:	e7c6      	b.n	8007542 <_printf_common+0x3e>
 80075b4:	18e1      	adds	r1, r4, r3
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	2030      	movs	r0, #48	; 0x30
 80075ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075be:	4422      	add	r2, r4
 80075c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075c8:	3302      	adds	r3, #2
 80075ca:	e7c7      	b.n	800755c <_printf_common+0x58>
 80075cc:	2301      	movs	r3, #1
 80075ce:	4622      	mov	r2, r4
 80075d0:	4649      	mov	r1, r9
 80075d2:	4638      	mov	r0, r7
 80075d4:	47c0      	blx	r8
 80075d6:	3001      	adds	r0, #1
 80075d8:	d0e6      	beq.n	80075a8 <_printf_common+0xa4>
 80075da:	3601      	adds	r6, #1
 80075dc:	e7d9      	b.n	8007592 <_printf_common+0x8e>
	...

080075e0 <_printf_i>:
 80075e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075e4:	7e0f      	ldrb	r7, [r1, #24]
 80075e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075e8:	2f78      	cmp	r7, #120	; 0x78
 80075ea:	4691      	mov	r9, r2
 80075ec:	4680      	mov	r8, r0
 80075ee:	460c      	mov	r4, r1
 80075f0:	469a      	mov	sl, r3
 80075f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075f6:	d807      	bhi.n	8007608 <_printf_i+0x28>
 80075f8:	2f62      	cmp	r7, #98	; 0x62
 80075fa:	d80a      	bhi.n	8007612 <_printf_i+0x32>
 80075fc:	2f00      	cmp	r7, #0
 80075fe:	f000 80d8 	beq.w	80077b2 <_printf_i+0x1d2>
 8007602:	2f58      	cmp	r7, #88	; 0x58
 8007604:	f000 80a3 	beq.w	800774e <_printf_i+0x16e>
 8007608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800760c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007610:	e03a      	b.n	8007688 <_printf_i+0xa8>
 8007612:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007616:	2b15      	cmp	r3, #21
 8007618:	d8f6      	bhi.n	8007608 <_printf_i+0x28>
 800761a:	a101      	add	r1, pc, #4	; (adr r1, 8007620 <_printf_i+0x40>)
 800761c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007620:	08007679 	.word	0x08007679
 8007624:	0800768d 	.word	0x0800768d
 8007628:	08007609 	.word	0x08007609
 800762c:	08007609 	.word	0x08007609
 8007630:	08007609 	.word	0x08007609
 8007634:	08007609 	.word	0x08007609
 8007638:	0800768d 	.word	0x0800768d
 800763c:	08007609 	.word	0x08007609
 8007640:	08007609 	.word	0x08007609
 8007644:	08007609 	.word	0x08007609
 8007648:	08007609 	.word	0x08007609
 800764c:	08007799 	.word	0x08007799
 8007650:	080076bd 	.word	0x080076bd
 8007654:	0800777b 	.word	0x0800777b
 8007658:	08007609 	.word	0x08007609
 800765c:	08007609 	.word	0x08007609
 8007660:	080077bb 	.word	0x080077bb
 8007664:	08007609 	.word	0x08007609
 8007668:	080076bd 	.word	0x080076bd
 800766c:	08007609 	.word	0x08007609
 8007670:	08007609 	.word	0x08007609
 8007674:	08007783 	.word	0x08007783
 8007678:	682b      	ldr	r3, [r5, #0]
 800767a:	1d1a      	adds	r2, r3, #4
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	602a      	str	r2, [r5, #0]
 8007680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007684:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007688:	2301      	movs	r3, #1
 800768a:	e0a3      	b.n	80077d4 <_printf_i+0x1f4>
 800768c:	6820      	ldr	r0, [r4, #0]
 800768e:	6829      	ldr	r1, [r5, #0]
 8007690:	0606      	lsls	r6, r0, #24
 8007692:	f101 0304 	add.w	r3, r1, #4
 8007696:	d50a      	bpl.n	80076ae <_printf_i+0xce>
 8007698:	680e      	ldr	r6, [r1, #0]
 800769a:	602b      	str	r3, [r5, #0]
 800769c:	2e00      	cmp	r6, #0
 800769e:	da03      	bge.n	80076a8 <_printf_i+0xc8>
 80076a0:	232d      	movs	r3, #45	; 0x2d
 80076a2:	4276      	negs	r6, r6
 80076a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076a8:	485e      	ldr	r0, [pc, #376]	; (8007824 <_printf_i+0x244>)
 80076aa:	230a      	movs	r3, #10
 80076ac:	e019      	b.n	80076e2 <_printf_i+0x102>
 80076ae:	680e      	ldr	r6, [r1, #0]
 80076b0:	602b      	str	r3, [r5, #0]
 80076b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076b6:	bf18      	it	ne
 80076b8:	b236      	sxthne	r6, r6
 80076ba:	e7ef      	b.n	800769c <_printf_i+0xbc>
 80076bc:	682b      	ldr	r3, [r5, #0]
 80076be:	6820      	ldr	r0, [r4, #0]
 80076c0:	1d19      	adds	r1, r3, #4
 80076c2:	6029      	str	r1, [r5, #0]
 80076c4:	0601      	lsls	r1, r0, #24
 80076c6:	d501      	bpl.n	80076cc <_printf_i+0xec>
 80076c8:	681e      	ldr	r6, [r3, #0]
 80076ca:	e002      	b.n	80076d2 <_printf_i+0xf2>
 80076cc:	0646      	lsls	r6, r0, #25
 80076ce:	d5fb      	bpl.n	80076c8 <_printf_i+0xe8>
 80076d0:	881e      	ldrh	r6, [r3, #0]
 80076d2:	4854      	ldr	r0, [pc, #336]	; (8007824 <_printf_i+0x244>)
 80076d4:	2f6f      	cmp	r7, #111	; 0x6f
 80076d6:	bf0c      	ite	eq
 80076d8:	2308      	moveq	r3, #8
 80076da:	230a      	movne	r3, #10
 80076dc:	2100      	movs	r1, #0
 80076de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076e2:	6865      	ldr	r5, [r4, #4]
 80076e4:	60a5      	str	r5, [r4, #8]
 80076e6:	2d00      	cmp	r5, #0
 80076e8:	bfa2      	ittt	ge
 80076ea:	6821      	ldrge	r1, [r4, #0]
 80076ec:	f021 0104 	bicge.w	r1, r1, #4
 80076f0:	6021      	strge	r1, [r4, #0]
 80076f2:	b90e      	cbnz	r6, 80076f8 <_printf_i+0x118>
 80076f4:	2d00      	cmp	r5, #0
 80076f6:	d04d      	beq.n	8007794 <_printf_i+0x1b4>
 80076f8:	4615      	mov	r5, r2
 80076fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80076fe:	fb03 6711 	mls	r7, r3, r1, r6
 8007702:	5dc7      	ldrb	r7, [r0, r7]
 8007704:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007708:	4637      	mov	r7, r6
 800770a:	42bb      	cmp	r3, r7
 800770c:	460e      	mov	r6, r1
 800770e:	d9f4      	bls.n	80076fa <_printf_i+0x11a>
 8007710:	2b08      	cmp	r3, #8
 8007712:	d10b      	bne.n	800772c <_printf_i+0x14c>
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	07de      	lsls	r6, r3, #31
 8007718:	d508      	bpl.n	800772c <_printf_i+0x14c>
 800771a:	6923      	ldr	r3, [r4, #16]
 800771c:	6861      	ldr	r1, [r4, #4]
 800771e:	4299      	cmp	r1, r3
 8007720:	bfde      	ittt	le
 8007722:	2330      	movle	r3, #48	; 0x30
 8007724:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007728:	f105 35ff 	addle.w	r5, r5, #4294967295
 800772c:	1b52      	subs	r2, r2, r5
 800772e:	6122      	str	r2, [r4, #16]
 8007730:	f8cd a000 	str.w	sl, [sp]
 8007734:	464b      	mov	r3, r9
 8007736:	aa03      	add	r2, sp, #12
 8007738:	4621      	mov	r1, r4
 800773a:	4640      	mov	r0, r8
 800773c:	f7ff fee2 	bl	8007504 <_printf_common>
 8007740:	3001      	adds	r0, #1
 8007742:	d14c      	bne.n	80077de <_printf_i+0x1fe>
 8007744:	f04f 30ff 	mov.w	r0, #4294967295
 8007748:	b004      	add	sp, #16
 800774a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800774e:	4835      	ldr	r0, [pc, #212]	; (8007824 <_printf_i+0x244>)
 8007750:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007754:	6829      	ldr	r1, [r5, #0]
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	f851 6b04 	ldr.w	r6, [r1], #4
 800775c:	6029      	str	r1, [r5, #0]
 800775e:	061d      	lsls	r5, r3, #24
 8007760:	d514      	bpl.n	800778c <_printf_i+0x1ac>
 8007762:	07df      	lsls	r7, r3, #31
 8007764:	bf44      	itt	mi
 8007766:	f043 0320 	orrmi.w	r3, r3, #32
 800776a:	6023      	strmi	r3, [r4, #0]
 800776c:	b91e      	cbnz	r6, 8007776 <_printf_i+0x196>
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	f023 0320 	bic.w	r3, r3, #32
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	2310      	movs	r3, #16
 8007778:	e7b0      	b.n	80076dc <_printf_i+0xfc>
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	f043 0320 	orr.w	r3, r3, #32
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	2378      	movs	r3, #120	; 0x78
 8007784:	4828      	ldr	r0, [pc, #160]	; (8007828 <_printf_i+0x248>)
 8007786:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800778a:	e7e3      	b.n	8007754 <_printf_i+0x174>
 800778c:	0659      	lsls	r1, r3, #25
 800778e:	bf48      	it	mi
 8007790:	b2b6      	uxthmi	r6, r6
 8007792:	e7e6      	b.n	8007762 <_printf_i+0x182>
 8007794:	4615      	mov	r5, r2
 8007796:	e7bb      	b.n	8007710 <_printf_i+0x130>
 8007798:	682b      	ldr	r3, [r5, #0]
 800779a:	6826      	ldr	r6, [r4, #0]
 800779c:	6961      	ldr	r1, [r4, #20]
 800779e:	1d18      	adds	r0, r3, #4
 80077a0:	6028      	str	r0, [r5, #0]
 80077a2:	0635      	lsls	r5, r6, #24
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	d501      	bpl.n	80077ac <_printf_i+0x1cc>
 80077a8:	6019      	str	r1, [r3, #0]
 80077aa:	e002      	b.n	80077b2 <_printf_i+0x1d2>
 80077ac:	0670      	lsls	r0, r6, #25
 80077ae:	d5fb      	bpl.n	80077a8 <_printf_i+0x1c8>
 80077b0:	8019      	strh	r1, [r3, #0]
 80077b2:	2300      	movs	r3, #0
 80077b4:	6123      	str	r3, [r4, #16]
 80077b6:	4615      	mov	r5, r2
 80077b8:	e7ba      	b.n	8007730 <_printf_i+0x150>
 80077ba:	682b      	ldr	r3, [r5, #0]
 80077bc:	1d1a      	adds	r2, r3, #4
 80077be:	602a      	str	r2, [r5, #0]
 80077c0:	681d      	ldr	r5, [r3, #0]
 80077c2:	6862      	ldr	r2, [r4, #4]
 80077c4:	2100      	movs	r1, #0
 80077c6:	4628      	mov	r0, r5
 80077c8:	f7f8 fd12 	bl	80001f0 <memchr>
 80077cc:	b108      	cbz	r0, 80077d2 <_printf_i+0x1f2>
 80077ce:	1b40      	subs	r0, r0, r5
 80077d0:	6060      	str	r0, [r4, #4]
 80077d2:	6863      	ldr	r3, [r4, #4]
 80077d4:	6123      	str	r3, [r4, #16]
 80077d6:	2300      	movs	r3, #0
 80077d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077dc:	e7a8      	b.n	8007730 <_printf_i+0x150>
 80077de:	6923      	ldr	r3, [r4, #16]
 80077e0:	462a      	mov	r2, r5
 80077e2:	4649      	mov	r1, r9
 80077e4:	4640      	mov	r0, r8
 80077e6:	47d0      	blx	sl
 80077e8:	3001      	adds	r0, #1
 80077ea:	d0ab      	beq.n	8007744 <_printf_i+0x164>
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	079b      	lsls	r3, r3, #30
 80077f0:	d413      	bmi.n	800781a <_printf_i+0x23a>
 80077f2:	68e0      	ldr	r0, [r4, #12]
 80077f4:	9b03      	ldr	r3, [sp, #12]
 80077f6:	4298      	cmp	r0, r3
 80077f8:	bfb8      	it	lt
 80077fa:	4618      	movlt	r0, r3
 80077fc:	e7a4      	b.n	8007748 <_printf_i+0x168>
 80077fe:	2301      	movs	r3, #1
 8007800:	4632      	mov	r2, r6
 8007802:	4649      	mov	r1, r9
 8007804:	4640      	mov	r0, r8
 8007806:	47d0      	blx	sl
 8007808:	3001      	adds	r0, #1
 800780a:	d09b      	beq.n	8007744 <_printf_i+0x164>
 800780c:	3501      	adds	r5, #1
 800780e:	68e3      	ldr	r3, [r4, #12]
 8007810:	9903      	ldr	r1, [sp, #12]
 8007812:	1a5b      	subs	r3, r3, r1
 8007814:	42ab      	cmp	r3, r5
 8007816:	dcf2      	bgt.n	80077fe <_printf_i+0x21e>
 8007818:	e7eb      	b.n	80077f2 <_printf_i+0x212>
 800781a:	2500      	movs	r5, #0
 800781c:	f104 0619 	add.w	r6, r4, #25
 8007820:	e7f5      	b.n	800780e <_printf_i+0x22e>
 8007822:	bf00      	nop
 8007824:	08009f3a 	.word	0x08009f3a
 8007828:	08009f4b 	.word	0x08009f4b

0800782c <siprintf>:
 800782c:	b40e      	push	{r1, r2, r3}
 800782e:	b500      	push	{lr}
 8007830:	b09c      	sub	sp, #112	; 0x70
 8007832:	ab1d      	add	r3, sp, #116	; 0x74
 8007834:	9002      	str	r0, [sp, #8]
 8007836:	9006      	str	r0, [sp, #24]
 8007838:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800783c:	4809      	ldr	r0, [pc, #36]	; (8007864 <siprintf+0x38>)
 800783e:	9107      	str	r1, [sp, #28]
 8007840:	9104      	str	r1, [sp, #16]
 8007842:	4909      	ldr	r1, [pc, #36]	; (8007868 <siprintf+0x3c>)
 8007844:	f853 2b04 	ldr.w	r2, [r3], #4
 8007848:	9105      	str	r1, [sp, #20]
 800784a:	6800      	ldr	r0, [r0, #0]
 800784c:	9301      	str	r3, [sp, #4]
 800784e:	a902      	add	r1, sp, #8
 8007850:	f001 fb78 	bl	8008f44 <_svfiprintf_r>
 8007854:	9b02      	ldr	r3, [sp, #8]
 8007856:	2200      	movs	r2, #0
 8007858:	701a      	strb	r2, [r3, #0]
 800785a:	b01c      	add	sp, #112	; 0x70
 800785c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007860:	b003      	add	sp, #12
 8007862:	4770      	bx	lr
 8007864:	20000250 	.word	0x20000250
 8007868:	ffff0208 	.word	0xffff0208

0800786c <quorem>:
 800786c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007870:	6903      	ldr	r3, [r0, #16]
 8007872:	690c      	ldr	r4, [r1, #16]
 8007874:	42a3      	cmp	r3, r4
 8007876:	4607      	mov	r7, r0
 8007878:	f2c0 8081 	blt.w	800797e <quorem+0x112>
 800787c:	3c01      	subs	r4, #1
 800787e:	f101 0814 	add.w	r8, r1, #20
 8007882:	f100 0514 	add.w	r5, r0, #20
 8007886:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800788a:	9301      	str	r3, [sp, #4]
 800788c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007890:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007894:	3301      	adds	r3, #1
 8007896:	429a      	cmp	r2, r3
 8007898:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800789c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80078a4:	d331      	bcc.n	800790a <quorem+0x9e>
 80078a6:	f04f 0e00 	mov.w	lr, #0
 80078aa:	4640      	mov	r0, r8
 80078ac:	46ac      	mov	ip, r5
 80078ae:	46f2      	mov	sl, lr
 80078b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80078b4:	b293      	uxth	r3, r2
 80078b6:	fb06 e303 	mla	r3, r6, r3, lr
 80078ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80078be:	b29b      	uxth	r3, r3
 80078c0:	ebaa 0303 	sub.w	r3, sl, r3
 80078c4:	f8dc a000 	ldr.w	sl, [ip]
 80078c8:	0c12      	lsrs	r2, r2, #16
 80078ca:	fa13 f38a 	uxtah	r3, r3, sl
 80078ce:	fb06 e202 	mla	r2, r6, r2, lr
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	9b00      	ldr	r3, [sp, #0]
 80078d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80078da:	b292      	uxth	r2, r2
 80078dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80078e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80078e8:	4581      	cmp	r9, r0
 80078ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078ee:	f84c 3b04 	str.w	r3, [ip], #4
 80078f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80078f6:	d2db      	bcs.n	80078b0 <quorem+0x44>
 80078f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80078fc:	b92b      	cbnz	r3, 800790a <quorem+0x9e>
 80078fe:	9b01      	ldr	r3, [sp, #4]
 8007900:	3b04      	subs	r3, #4
 8007902:	429d      	cmp	r5, r3
 8007904:	461a      	mov	r2, r3
 8007906:	d32e      	bcc.n	8007966 <quorem+0xfa>
 8007908:	613c      	str	r4, [r7, #16]
 800790a:	4638      	mov	r0, r7
 800790c:	f001 f8c6 	bl	8008a9c <__mcmp>
 8007910:	2800      	cmp	r0, #0
 8007912:	db24      	blt.n	800795e <quorem+0xf2>
 8007914:	3601      	adds	r6, #1
 8007916:	4628      	mov	r0, r5
 8007918:	f04f 0c00 	mov.w	ip, #0
 800791c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007920:	f8d0 e000 	ldr.w	lr, [r0]
 8007924:	b293      	uxth	r3, r2
 8007926:	ebac 0303 	sub.w	r3, ip, r3
 800792a:	0c12      	lsrs	r2, r2, #16
 800792c:	fa13 f38e 	uxtah	r3, r3, lr
 8007930:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007934:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007938:	b29b      	uxth	r3, r3
 800793a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800793e:	45c1      	cmp	r9, r8
 8007940:	f840 3b04 	str.w	r3, [r0], #4
 8007944:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007948:	d2e8      	bcs.n	800791c <quorem+0xb0>
 800794a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800794e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007952:	b922      	cbnz	r2, 800795e <quorem+0xf2>
 8007954:	3b04      	subs	r3, #4
 8007956:	429d      	cmp	r5, r3
 8007958:	461a      	mov	r2, r3
 800795a:	d30a      	bcc.n	8007972 <quorem+0x106>
 800795c:	613c      	str	r4, [r7, #16]
 800795e:	4630      	mov	r0, r6
 8007960:	b003      	add	sp, #12
 8007962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007966:	6812      	ldr	r2, [r2, #0]
 8007968:	3b04      	subs	r3, #4
 800796a:	2a00      	cmp	r2, #0
 800796c:	d1cc      	bne.n	8007908 <quorem+0x9c>
 800796e:	3c01      	subs	r4, #1
 8007970:	e7c7      	b.n	8007902 <quorem+0x96>
 8007972:	6812      	ldr	r2, [r2, #0]
 8007974:	3b04      	subs	r3, #4
 8007976:	2a00      	cmp	r2, #0
 8007978:	d1f0      	bne.n	800795c <quorem+0xf0>
 800797a:	3c01      	subs	r4, #1
 800797c:	e7eb      	b.n	8007956 <quorem+0xea>
 800797e:	2000      	movs	r0, #0
 8007980:	e7ee      	b.n	8007960 <quorem+0xf4>
 8007982:	0000      	movs	r0, r0
 8007984:	0000      	movs	r0, r0
	...

08007988 <_dtoa_r>:
 8007988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	ed2d 8b04 	vpush	{d8-d9}
 8007990:	ec57 6b10 	vmov	r6, r7, d0
 8007994:	b093      	sub	sp, #76	; 0x4c
 8007996:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007998:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800799c:	9106      	str	r1, [sp, #24]
 800799e:	ee10 aa10 	vmov	sl, s0
 80079a2:	4604      	mov	r4, r0
 80079a4:	9209      	str	r2, [sp, #36]	; 0x24
 80079a6:	930c      	str	r3, [sp, #48]	; 0x30
 80079a8:	46bb      	mov	fp, r7
 80079aa:	b975      	cbnz	r5, 80079ca <_dtoa_r+0x42>
 80079ac:	2010      	movs	r0, #16
 80079ae:	f000 fddd 	bl	800856c <malloc>
 80079b2:	4602      	mov	r2, r0
 80079b4:	6260      	str	r0, [r4, #36]	; 0x24
 80079b6:	b920      	cbnz	r0, 80079c2 <_dtoa_r+0x3a>
 80079b8:	4ba7      	ldr	r3, [pc, #668]	; (8007c58 <_dtoa_r+0x2d0>)
 80079ba:	21ea      	movs	r1, #234	; 0xea
 80079bc:	48a7      	ldr	r0, [pc, #668]	; (8007c5c <_dtoa_r+0x2d4>)
 80079be:	f001 fbd1 	bl	8009164 <__assert_func>
 80079c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80079c6:	6005      	str	r5, [r0, #0]
 80079c8:	60c5      	str	r5, [r0, #12]
 80079ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079cc:	6819      	ldr	r1, [r3, #0]
 80079ce:	b151      	cbz	r1, 80079e6 <_dtoa_r+0x5e>
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	604a      	str	r2, [r1, #4]
 80079d4:	2301      	movs	r3, #1
 80079d6:	4093      	lsls	r3, r2
 80079d8:	608b      	str	r3, [r1, #8]
 80079da:	4620      	mov	r0, r4
 80079dc:	f000 fe1c 	bl	8008618 <_Bfree>
 80079e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079e2:	2200      	movs	r2, #0
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	1e3b      	subs	r3, r7, #0
 80079e8:	bfaa      	itet	ge
 80079ea:	2300      	movge	r3, #0
 80079ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80079f0:	f8c8 3000 	strge.w	r3, [r8]
 80079f4:	4b9a      	ldr	r3, [pc, #616]	; (8007c60 <_dtoa_r+0x2d8>)
 80079f6:	bfbc      	itt	lt
 80079f8:	2201      	movlt	r2, #1
 80079fa:	f8c8 2000 	strlt.w	r2, [r8]
 80079fe:	ea33 030b 	bics.w	r3, r3, fp
 8007a02:	d11b      	bne.n	8007a3c <_dtoa_r+0xb4>
 8007a04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a06:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a0a:	6013      	str	r3, [r2, #0]
 8007a0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a10:	4333      	orrs	r3, r6
 8007a12:	f000 8592 	beq.w	800853a <_dtoa_r+0xbb2>
 8007a16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a18:	b963      	cbnz	r3, 8007a34 <_dtoa_r+0xac>
 8007a1a:	4b92      	ldr	r3, [pc, #584]	; (8007c64 <_dtoa_r+0x2dc>)
 8007a1c:	e022      	b.n	8007a64 <_dtoa_r+0xdc>
 8007a1e:	4b92      	ldr	r3, [pc, #584]	; (8007c68 <_dtoa_r+0x2e0>)
 8007a20:	9301      	str	r3, [sp, #4]
 8007a22:	3308      	adds	r3, #8
 8007a24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a26:	6013      	str	r3, [r2, #0]
 8007a28:	9801      	ldr	r0, [sp, #4]
 8007a2a:	b013      	add	sp, #76	; 0x4c
 8007a2c:	ecbd 8b04 	vpop	{d8-d9}
 8007a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a34:	4b8b      	ldr	r3, [pc, #556]	; (8007c64 <_dtoa_r+0x2dc>)
 8007a36:	9301      	str	r3, [sp, #4]
 8007a38:	3303      	adds	r3, #3
 8007a3a:	e7f3      	b.n	8007a24 <_dtoa_r+0x9c>
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	2300      	movs	r3, #0
 8007a40:	4650      	mov	r0, sl
 8007a42:	4659      	mov	r1, fp
 8007a44:	f7f9 f848 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a48:	ec4b ab19 	vmov	d9, sl, fp
 8007a4c:	4680      	mov	r8, r0
 8007a4e:	b158      	cbz	r0, 8007a68 <_dtoa_r+0xe0>
 8007a50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a52:	2301      	movs	r3, #1
 8007a54:	6013      	str	r3, [r2, #0]
 8007a56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 856b 	beq.w	8008534 <_dtoa_r+0xbac>
 8007a5e:	4883      	ldr	r0, [pc, #524]	; (8007c6c <_dtoa_r+0x2e4>)
 8007a60:	6018      	str	r0, [r3, #0]
 8007a62:	1e43      	subs	r3, r0, #1
 8007a64:	9301      	str	r3, [sp, #4]
 8007a66:	e7df      	b.n	8007a28 <_dtoa_r+0xa0>
 8007a68:	ec4b ab10 	vmov	d0, sl, fp
 8007a6c:	aa10      	add	r2, sp, #64	; 0x40
 8007a6e:	a911      	add	r1, sp, #68	; 0x44
 8007a70:	4620      	mov	r0, r4
 8007a72:	f001 f8b9 	bl	8008be8 <__d2b>
 8007a76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007a7a:	ee08 0a10 	vmov	s16, r0
 8007a7e:	2d00      	cmp	r5, #0
 8007a80:	f000 8084 	beq.w	8007b8c <_dtoa_r+0x204>
 8007a84:	ee19 3a90 	vmov	r3, s19
 8007a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007a90:	4656      	mov	r6, sl
 8007a92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007a96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007a9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007a9e:	4b74      	ldr	r3, [pc, #464]	; (8007c70 <_dtoa_r+0x2e8>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	4639      	mov	r1, r7
 8007aa6:	f7f8 fbf7 	bl	8000298 <__aeabi_dsub>
 8007aaa:	a365      	add	r3, pc, #404	; (adr r3, 8007c40 <_dtoa_r+0x2b8>)
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	f7f8 fdaa 	bl	8000608 <__aeabi_dmul>
 8007ab4:	a364      	add	r3, pc, #400	; (adr r3, 8007c48 <_dtoa_r+0x2c0>)
 8007ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aba:	f7f8 fbef 	bl	800029c <__adddf3>
 8007abe:	4606      	mov	r6, r0
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	460f      	mov	r7, r1
 8007ac4:	f7f8 fd36 	bl	8000534 <__aeabi_i2d>
 8007ac8:	a361      	add	r3, pc, #388	; (adr r3, 8007c50 <_dtoa_r+0x2c8>)
 8007aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ace:	f7f8 fd9b 	bl	8000608 <__aeabi_dmul>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	4639      	mov	r1, r7
 8007ada:	f7f8 fbdf 	bl	800029c <__adddf3>
 8007ade:	4606      	mov	r6, r0
 8007ae0:	460f      	mov	r7, r1
 8007ae2:	f7f9 f841 	bl	8000b68 <__aeabi_d2iz>
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	9000      	str	r0, [sp, #0]
 8007aea:	2300      	movs	r3, #0
 8007aec:	4630      	mov	r0, r6
 8007aee:	4639      	mov	r1, r7
 8007af0:	f7f8 fffc 	bl	8000aec <__aeabi_dcmplt>
 8007af4:	b150      	cbz	r0, 8007b0c <_dtoa_r+0x184>
 8007af6:	9800      	ldr	r0, [sp, #0]
 8007af8:	f7f8 fd1c 	bl	8000534 <__aeabi_i2d>
 8007afc:	4632      	mov	r2, r6
 8007afe:	463b      	mov	r3, r7
 8007b00:	f7f8 ffea 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b04:	b910      	cbnz	r0, 8007b0c <_dtoa_r+0x184>
 8007b06:	9b00      	ldr	r3, [sp, #0]
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	9b00      	ldr	r3, [sp, #0]
 8007b0e:	2b16      	cmp	r3, #22
 8007b10:	d85a      	bhi.n	8007bc8 <_dtoa_r+0x240>
 8007b12:	9a00      	ldr	r2, [sp, #0]
 8007b14:	4b57      	ldr	r3, [pc, #348]	; (8007c74 <_dtoa_r+0x2ec>)
 8007b16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1e:	ec51 0b19 	vmov	r0, r1, d9
 8007b22:	f7f8 ffe3 	bl	8000aec <__aeabi_dcmplt>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d050      	beq.n	8007bcc <_dtoa_r+0x244>
 8007b2a:	9b00      	ldr	r3, [sp, #0]
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	2300      	movs	r3, #0
 8007b32:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b36:	1b5d      	subs	r5, r3, r5
 8007b38:	1e6b      	subs	r3, r5, #1
 8007b3a:	9305      	str	r3, [sp, #20]
 8007b3c:	bf45      	ittet	mi
 8007b3e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007b42:	9304      	strmi	r3, [sp, #16]
 8007b44:	2300      	movpl	r3, #0
 8007b46:	2300      	movmi	r3, #0
 8007b48:	bf4c      	ite	mi
 8007b4a:	9305      	strmi	r3, [sp, #20]
 8007b4c:	9304      	strpl	r3, [sp, #16]
 8007b4e:	9b00      	ldr	r3, [sp, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	db3d      	blt.n	8007bd0 <_dtoa_r+0x248>
 8007b54:	9b05      	ldr	r3, [sp, #20]
 8007b56:	9a00      	ldr	r2, [sp, #0]
 8007b58:	920a      	str	r2, [sp, #40]	; 0x28
 8007b5a:	4413      	add	r3, r2
 8007b5c:	9305      	str	r3, [sp, #20]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	9307      	str	r3, [sp, #28]
 8007b62:	9b06      	ldr	r3, [sp, #24]
 8007b64:	2b09      	cmp	r3, #9
 8007b66:	f200 8089 	bhi.w	8007c7c <_dtoa_r+0x2f4>
 8007b6a:	2b05      	cmp	r3, #5
 8007b6c:	bfc4      	itt	gt
 8007b6e:	3b04      	subgt	r3, #4
 8007b70:	9306      	strgt	r3, [sp, #24]
 8007b72:	9b06      	ldr	r3, [sp, #24]
 8007b74:	f1a3 0302 	sub.w	r3, r3, #2
 8007b78:	bfcc      	ite	gt
 8007b7a:	2500      	movgt	r5, #0
 8007b7c:	2501      	movle	r5, #1
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	f200 8087 	bhi.w	8007c92 <_dtoa_r+0x30a>
 8007b84:	e8df f003 	tbb	[pc, r3]
 8007b88:	59383a2d 	.word	0x59383a2d
 8007b8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007b90:	441d      	add	r5, r3
 8007b92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007b96:	2b20      	cmp	r3, #32
 8007b98:	bfc1      	itttt	gt
 8007b9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007b9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007ba2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007ba6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007baa:	bfda      	itte	le
 8007bac:	f1c3 0320 	rsble	r3, r3, #32
 8007bb0:	fa06 f003 	lslle.w	r0, r6, r3
 8007bb4:	4318      	orrgt	r0, r3
 8007bb6:	f7f8 fcad 	bl	8000514 <__aeabi_ui2d>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007bc2:	3d01      	subs	r5, #1
 8007bc4:	930e      	str	r3, [sp, #56]	; 0x38
 8007bc6:	e76a      	b.n	8007a9e <_dtoa_r+0x116>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e7b2      	b.n	8007b32 <_dtoa_r+0x1aa>
 8007bcc:	900b      	str	r0, [sp, #44]	; 0x2c
 8007bce:	e7b1      	b.n	8007b34 <_dtoa_r+0x1ac>
 8007bd0:	9b04      	ldr	r3, [sp, #16]
 8007bd2:	9a00      	ldr	r2, [sp, #0]
 8007bd4:	1a9b      	subs	r3, r3, r2
 8007bd6:	9304      	str	r3, [sp, #16]
 8007bd8:	4253      	negs	r3, r2
 8007bda:	9307      	str	r3, [sp, #28]
 8007bdc:	2300      	movs	r3, #0
 8007bde:	930a      	str	r3, [sp, #40]	; 0x28
 8007be0:	e7bf      	b.n	8007b62 <_dtoa_r+0x1da>
 8007be2:	2300      	movs	r3, #0
 8007be4:	9308      	str	r3, [sp, #32]
 8007be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	dc55      	bgt.n	8007c98 <_dtoa_r+0x310>
 8007bec:	2301      	movs	r3, #1
 8007bee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	9209      	str	r2, [sp, #36]	; 0x24
 8007bf6:	e00c      	b.n	8007c12 <_dtoa_r+0x28a>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e7f3      	b.n	8007be4 <_dtoa_r+0x25c>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c00:	9308      	str	r3, [sp, #32]
 8007c02:	9b00      	ldr	r3, [sp, #0]
 8007c04:	4413      	add	r3, r2
 8007c06:	9302      	str	r3, [sp, #8]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	9303      	str	r3, [sp, #12]
 8007c0e:	bfb8      	it	lt
 8007c10:	2301      	movlt	r3, #1
 8007c12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007c14:	2200      	movs	r2, #0
 8007c16:	6042      	str	r2, [r0, #4]
 8007c18:	2204      	movs	r2, #4
 8007c1a:	f102 0614 	add.w	r6, r2, #20
 8007c1e:	429e      	cmp	r6, r3
 8007c20:	6841      	ldr	r1, [r0, #4]
 8007c22:	d93d      	bls.n	8007ca0 <_dtoa_r+0x318>
 8007c24:	4620      	mov	r0, r4
 8007c26:	f000 fcb7 	bl	8008598 <_Balloc>
 8007c2a:	9001      	str	r0, [sp, #4]
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d13b      	bne.n	8007ca8 <_dtoa_r+0x320>
 8007c30:	4b11      	ldr	r3, [pc, #68]	; (8007c78 <_dtoa_r+0x2f0>)
 8007c32:	4602      	mov	r2, r0
 8007c34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007c38:	e6c0      	b.n	80079bc <_dtoa_r+0x34>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e7df      	b.n	8007bfe <_dtoa_r+0x276>
 8007c3e:	bf00      	nop
 8007c40:	636f4361 	.word	0x636f4361
 8007c44:	3fd287a7 	.word	0x3fd287a7
 8007c48:	8b60c8b3 	.word	0x8b60c8b3
 8007c4c:	3fc68a28 	.word	0x3fc68a28
 8007c50:	509f79fb 	.word	0x509f79fb
 8007c54:	3fd34413 	.word	0x3fd34413
 8007c58:	08009f69 	.word	0x08009f69
 8007c5c:	08009f80 	.word	0x08009f80
 8007c60:	7ff00000 	.word	0x7ff00000
 8007c64:	08009f65 	.word	0x08009f65
 8007c68:	08009f5c 	.word	0x08009f5c
 8007c6c:	08009f39 	.word	0x08009f39
 8007c70:	3ff80000 	.word	0x3ff80000
 8007c74:	0800a070 	.word	0x0800a070
 8007c78:	08009fdb 	.word	0x08009fdb
 8007c7c:	2501      	movs	r5, #1
 8007c7e:	2300      	movs	r3, #0
 8007c80:	9306      	str	r3, [sp, #24]
 8007c82:	9508      	str	r5, [sp, #32]
 8007c84:	f04f 33ff 	mov.w	r3, #4294967295
 8007c88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	2312      	movs	r3, #18
 8007c90:	e7b0      	b.n	8007bf4 <_dtoa_r+0x26c>
 8007c92:	2301      	movs	r3, #1
 8007c94:	9308      	str	r3, [sp, #32]
 8007c96:	e7f5      	b.n	8007c84 <_dtoa_r+0x2fc>
 8007c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c9e:	e7b8      	b.n	8007c12 <_dtoa_r+0x28a>
 8007ca0:	3101      	adds	r1, #1
 8007ca2:	6041      	str	r1, [r0, #4]
 8007ca4:	0052      	lsls	r2, r2, #1
 8007ca6:	e7b8      	b.n	8007c1a <_dtoa_r+0x292>
 8007ca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007caa:	9a01      	ldr	r2, [sp, #4]
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	9b03      	ldr	r3, [sp, #12]
 8007cb0:	2b0e      	cmp	r3, #14
 8007cb2:	f200 809d 	bhi.w	8007df0 <_dtoa_r+0x468>
 8007cb6:	2d00      	cmp	r5, #0
 8007cb8:	f000 809a 	beq.w	8007df0 <_dtoa_r+0x468>
 8007cbc:	9b00      	ldr	r3, [sp, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	dd32      	ble.n	8007d28 <_dtoa_r+0x3a0>
 8007cc2:	4ab7      	ldr	r2, [pc, #732]	; (8007fa0 <_dtoa_r+0x618>)
 8007cc4:	f003 030f 	and.w	r3, r3, #15
 8007cc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ccc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cd0:	9b00      	ldr	r3, [sp, #0]
 8007cd2:	05d8      	lsls	r0, r3, #23
 8007cd4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007cd8:	d516      	bpl.n	8007d08 <_dtoa_r+0x380>
 8007cda:	4bb2      	ldr	r3, [pc, #712]	; (8007fa4 <_dtoa_r+0x61c>)
 8007cdc:	ec51 0b19 	vmov	r0, r1, d9
 8007ce0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ce4:	f7f8 fdba 	bl	800085c <__aeabi_ddiv>
 8007ce8:	f007 070f 	and.w	r7, r7, #15
 8007cec:	4682      	mov	sl, r0
 8007cee:	468b      	mov	fp, r1
 8007cf0:	2503      	movs	r5, #3
 8007cf2:	4eac      	ldr	r6, [pc, #688]	; (8007fa4 <_dtoa_r+0x61c>)
 8007cf4:	b957      	cbnz	r7, 8007d0c <_dtoa_r+0x384>
 8007cf6:	4642      	mov	r2, r8
 8007cf8:	464b      	mov	r3, r9
 8007cfa:	4650      	mov	r0, sl
 8007cfc:	4659      	mov	r1, fp
 8007cfe:	f7f8 fdad 	bl	800085c <__aeabi_ddiv>
 8007d02:	4682      	mov	sl, r0
 8007d04:	468b      	mov	fp, r1
 8007d06:	e028      	b.n	8007d5a <_dtoa_r+0x3d2>
 8007d08:	2502      	movs	r5, #2
 8007d0a:	e7f2      	b.n	8007cf2 <_dtoa_r+0x36a>
 8007d0c:	07f9      	lsls	r1, r7, #31
 8007d0e:	d508      	bpl.n	8007d22 <_dtoa_r+0x39a>
 8007d10:	4640      	mov	r0, r8
 8007d12:	4649      	mov	r1, r9
 8007d14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d18:	f7f8 fc76 	bl	8000608 <__aeabi_dmul>
 8007d1c:	3501      	adds	r5, #1
 8007d1e:	4680      	mov	r8, r0
 8007d20:	4689      	mov	r9, r1
 8007d22:	107f      	asrs	r7, r7, #1
 8007d24:	3608      	adds	r6, #8
 8007d26:	e7e5      	b.n	8007cf4 <_dtoa_r+0x36c>
 8007d28:	f000 809b 	beq.w	8007e62 <_dtoa_r+0x4da>
 8007d2c:	9b00      	ldr	r3, [sp, #0]
 8007d2e:	4f9d      	ldr	r7, [pc, #628]	; (8007fa4 <_dtoa_r+0x61c>)
 8007d30:	425e      	negs	r6, r3
 8007d32:	4b9b      	ldr	r3, [pc, #620]	; (8007fa0 <_dtoa_r+0x618>)
 8007d34:	f006 020f 	and.w	r2, r6, #15
 8007d38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d40:	ec51 0b19 	vmov	r0, r1, d9
 8007d44:	f7f8 fc60 	bl	8000608 <__aeabi_dmul>
 8007d48:	1136      	asrs	r6, r6, #4
 8007d4a:	4682      	mov	sl, r0
 8007d4c:	468b      	mov	fp, r1
 8007d4e:	2300      	movs	r3, #0
 8007d50:	2502      	movs	r5, #2
 8007d52:	2e00      	cmp	r6, #0
 8007d54:	d17a      	bne.n	8007e4c <_dtoa_r+0x4c4>
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1d3      	bne.n	8007d02 <_dtoa_r+0x37a>
 8007d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f000 8082 	beq.w	8007e66 <_dtoa_r+0x4de>
 8007d62:	4b91      	ldr	r3, [pc, #580]	; (8007fa8 <_dtoa_r+0x620>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	4650      	mov	r0, sl
 8007d68:	4659      	mov	r1, fp
 8007d6a:	f7f8 febf 	bl	8000aec <__aeabi_dcmplt>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	d079      	beq.n	8007e66 <_dtoa_r+0x4de>
 8007d72:	9b03      	ldr	r3, [sp, #12]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d076      	beq.n	8007e66 <_dtoa_r+0x4de>
 8007d78:	9b02      	ldr	r3, [sp, #8]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	dd36      	ble.n	8007dec <_dtoa_r+0x464>
 8007d7e:	9b00      	ldr	r3, [sp, #0]
 8007d80:	4650      	mov	r0, sl
 8007d82:	4659      	mov	r1, fp
 8007d84:	1e5f      	subs	r7, r3, #1
 8007d86:	2200      	movs	r2, #0
 8007d88:	4b88      	ldr	r3, [pc, #544]	; (8007fac <_dtoa_r+0x624>)
 8007d8a:	f7f8 fc3d 	bl	8000608 <__aeabi_dmul>
 8007d8e:	9e02      	ldr	r6, [sp, #8]
 8007d90:	4682      	mov	sl, r0
 8007d92:	468b      	mov	fp, r1
 8007d94:	3501      	adds	r5, #1
 8007d96:	4628      	mov	r0, r5
 8007d98:	f7f8 fbcc 	bl	8000534 <__aeabi_i2d>
 8007d9c:	4652      	mov	r2, sl
 8007d9e:	465b      	mov	r3, fp
 8007da0:	f7f8 fc32 	bl	8000608 <__aeabi_dmul>
 8007da4:	4b82      	ldr	r3, [pc, #520]	; (8007fb0 <_dtoa_r+0x628>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	f7f8 fa78 	bl	800029c <__adddf3>
 8007dac:	46d0      	mov	r8, sl
 8007dae:	46d9      	mov	r9, fp
 8007db0:	4682      	mov	sl, r0
 8007db2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007db6:	2e00      	cmp	r6, #0
 8007db8:	d158      	bne.n	8007e6c <_dtoa_r+0x4e4>
 8007dba:	4b7e      	ldr	r3, [pc, #504]	; (8007fb4 <_dtoa_r+0x62c>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	4640      	mov	r0, r8
 8007dc0:	4649      	mov	r1, r9
 8007dc2:	f7f8 fa69 	bl	8000298 <__aeabi_dsub>
 8007dc6:	4652      	mov	r2, sl
 8007dc8:	465b      	mov	r3, fp
 8007dca:	4680      	mov	r8, r0
 8007dcc:	4689      	mov	r9, r1
 8007dce:	f7f8 feab 	bl	8000b28 <__aeabi_dcmpgt>
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	f040 8295 	bne.w	8008302 <_dtoa_r+0x97a>
 8007dd8:	4652      	mov	r2, sl
 8007dda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007dde:	4640      	mov	r0, r8
 8007de0:	4649      	mov	r1, r9
 8007de2:	f7f8 fe83 	bl	8000aec <__aeabi_dcmplt>
 8007de6:	2800      	cmp	r0, #0
 8007de8:	f040 8289 	bne.w	80082fe <_dtoa_r+0x976>
 8007dec:	ec5b ab19 	vmov	sl, fp, d9
 8007df0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f2c0 8148 	blt.w	8008088 <_dtoa_r+0x700>
 8007df8:	9a00      	ldr	r2, [sp, #0]
 8007dfa:	2a0e      	cmp	r2, #14
 8007dfc:	f300 8144 	bgt.w	8008088 <_dtoa_r+0x700>
 8007e00:	4b67      	ldr	r3, [pc, #412]	; (8007fa0 <_dtoa_r+0x618>)
 8007e02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f280 80d5 	bge.w	8007fbc <_dtoa_r+0x634>
 8007e12:	9b03      	ldr	r3, [sp, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f300 80d1 	bgt.w	8007fbc <_dtoa_r+0x634>
 8007e1a:	f040 826f 	bne.w	80082fc <_dtoa_r+0x974>
 8007e1e:	4b65      	ldr	r3, [pc, #404]	; (8007fb4 <_dtoa_r+0x62c>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	4640      	mov	r0, r8
 8007e24:	4649      	mov	r1, r9
 8007e26:	f7f8 fbef 	bl	8000608 <__aeabi_dmul>
 8007e2a:	4652      	mov	r2, sl
 8007e2c:	465b      	mov	r3, fp
 8007e2e:	f7f8 fe71 	bl	8000b14 <__aeabi_dcmpge>
 8007e32:	9e03      	ldr	r6, [sp, #12]
 8007e34:	4637      	mov	r7, r6
 8007e36:	2800      	cmp	r0, #0
 8007e38:	f040 8245 	bne.w	80082c6 <_dtoa_r+0x93e>
 8007e3c:	9d01      	ldr	r5, [sp, #4]
 8007e3e:	2331      	movs	r3, #49	; 0x31
 8007e40:	f805 3b01 	strb.w	r3, [r5], #1
 8007e44:	9b00      	ldr	r3, [sp, #0]
 8007e46:	3301      	adds	r3, #1
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	e240      	b.n	80082ce <_dtoa_r+0x946>
 8007e4c:	07f2      	lsls	r2, r6, #31
 8007e4e:	d505      	bpl.n	8007e5c <_dtoa_r+0x4d4>
 8007e50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e54:	f7f8 fbd8 	bl	8000608 <__aeabi_dmul>
 8007e58:	3501      	adds	r5, #1
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	1076      	asrs	r6, r6, #1
 8007e5e:	3708      	adds	r7, #8
 8007e60:	e777      	b.n	8007d52 <_dtoa_r+0x3ca>
 8007e62:	2502      	movs	r5, #2
 8007e64:	e779      	b.n	8007d5a <_dtoa_r+0x3d2>
 8007e66:	9f00      	ldr	r7, [sp, #0]
 8007e68:	9e03      	ldr	r6, [sp, #12]
 8007e6a:	e794      	b.n	8007d96 <_dtoa_r+0x40e>
 8007e6c:	9901      	ldr	r1, [sp, #4]
 8007e6e:	4b4c      	ldr	r3, [pc, #304]	; (8007fa0 <_dtoa_r+0x618>)
 8007e70:	4431      	add	r1, r6
 8007e72:	910d      	str	r1, [sp, #52]	; 0x34
 8007e74:	9908      	ldr	r1, [sp, #32]
 8007e76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e7e:	2900      	cmp	r1, #0
 8007e80:	d043      	beq.n	8007f0a <_dtoa_r+0x582>
 8007e82:	494d      	ldr	r1, [pc, #308]	; (8007fb8 <_dtoa_r+0x630>)
 8007e84:	2000      	movs	r0, #0
 8007e86:	f7f8 fce9 	bl	800085c <__aeabi_ddiv>
 8007e8a:	4652      	mov	r2, sl
 8007e8c:	465b      	mov	r3, fp
 8007e8e:	f7f8 fa03 	bl	8000298 <__aeabi_dsub>
 8007e92:	9d01      	ldr	r5, [sp, #4]
 8007e94:	4682      	mov	sl, r0
 8007e96:	468b      	mov	fp, r1
 8007e98:	4649      	mov	r1, r9
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	f7f8 fe64 	bl	8000b68 <__aeabi_d2iz>
 8007ea0:	4606      	mov	r6, r0
 8007ea2:	f7f8 fb47 	bl	8000534 <__aeabi_i2d>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	4640      	mov	r0, r8
 8007eac:	4649      	mov	r1, r9
 8007eae:	f7f8 f9f3 	bl	8000298 <__aeabi_dsub>
 8007eb2:	3630      	adds	r6, #48	; 0x30
 8007eb4:	f805 6b01 	strb.w	r6, [r5], #1
 8007eb8:	4652      	mov	r2, sl
 8007eba:	465b      	mov	r3, fp
 8007ebc:	4680      	mov	r8, r0
 8007ebe:	4689      	mov	r9, r1
 8007ec0:	f7f8 fe14 	bl	8000aec <__aeabi_dcmplt>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d163      	bne.n	8007f90 <_dtoa_r+0x608>
 8007ec8:	4642      	mov	r2, r8
 8007eca:	464b      	mov	r3, r9
 8007ecc:	4936      	ldr	r1, [pc, #216]	; (8007fa8 <_dtoa_r+0x620>)
 8007ece:	2000      	movs	r0, #0
 8007ed0:	f7f8 f9e2 	bl	8000298 <__aeabi_dsub>
 8007ed4:	4652      	mov	r2, sl
 8007ed6:	465b      	mov	r3, fp
 8007ed8:	f7f8 fe08 	bl	8000aec <__aeabi_dcmplt>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	f040 80b5 	bne.w	800804c <_dtoa_r+0x6c4>
 8007ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ee4:	429d      	cmp	r5, r3
 8007ee6:	d081      	beq.n	8007dec <_dtoa_r+0x464>
 8007ee8:	4b30      	ldr	r3, [pc, #192]	; (8007fac <_dtoa_r+0x624>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	4650      	mov	r0, sl
 8007eee:	4659      	mov	r1, fp
 8007ef0:	f7f8 fb8a 	bl	8000608 <__aeabi_dmul>
 8007ef4:	4b2d      	ldr	r3, [pc, #180]	; (8007fac <_dtoa_r+0x624>)
 8007ef6:	4682      	mov	sl, r0
 8007ef8:	468b      	mov	fp, r1
 8007efa:	4640      	mov	r0, r8
 8007efc:	4649      	mov	r1, r9
 8007efe:	2200      	movs	r2, #0
 8007f00:	f7f8 fb82 	bl	8000608 <__aeabi_dmul>
 8007f04:	4680      	mov	r8, r0
 8007f06:	4689      	mov	r9, r1
 8007f08:	e7c6      	b.n	8007e98 <_dtoa_r+0x510>
 8007f0a:	4650      	mov	r0, sl
 8007f0c:	4659      	mov	r1, fp
 8007f0e:	f7f8 fb7b 	bl	8000608 <__aeabi_dmul>
 8007f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f14:	9d01      	ldr	r5, [sp, #4]
 8007f16:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f18:	4682      	mov	sl, r0
 8007f1a:	468b      	mov	fp, r1
 8007f1c:	4649      	mov	r1, r9
 8007f1e:	4640      	mov	r0, r8
 8007f20:	f7f8 fe22 	bl	8000b68 <__aeabi_d2iz>
 8007f24:	4606      	mov	r6, r0
 8007f26:	f7f8 fb05 	bl	8000534 <__aeabi_i2d>
 8007f2a:	3630      	adds	r6, #48	; 0x30
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4640      	mov	r0, r8
 8007f32:	4649      	mov	r1, r9
 8007f34:	f7f8 f9b0 	bl	8000298 <__aeabi_dsub>
 8007f38:	f805 6b01 	strb.w	r6, [r5], #1
 8007f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f3e:	429d      	cmp	r5, r3
 8007f40:	4680      	mov	r8, r0
 8007f42:	4689      	mov	r9, r1
 8007f44:	f04f 0200 	mov.w	r2, #0
 8007f48:	d124      	bne.n	8007f94 <_dtoa_r+0x60c>
 8007f4a:	4b1b      	ldr	r3, [pc, #108]	; (8007fb8 <_dtoa_r+0x630>)
 8007f4c:	4650      	mov	r0, sl
 8007f4e:	4659      	mov	r1, fp
 8007f50:	f7f8 f9a4 	bl	800029c <__adddf3>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	4640      	mov	r0, r8
 8007f5a:	4649      	mov	r1, r9
 8007f5c:	f7f8 fde4 	bl	8000b28 <__aeabi_dcmpgt>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d173      	bne.n	800804c <_dtoa_r+0x6c4>
 8007f64:	4652      	mov	r2, sl
 8007f66:	465b      	mov	r3, fp
 8007f68:	4913      	ldr	r1, [pc, #76]	; (8007fb8 <_dtoa_r+0x630>)
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	f7f8 f994 	bl	8000298 <__aeabi_dsub>
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4640      	mov	r0, r8
 8007f76:	4649      	mov	r1, r9
 8007f78:	f7f8 fdb8 	bl	8000aec <__aeabi_dcmplt>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	f43f af35 	beq.w	8007dec <_dtoa_r+0x464>
 8007f82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007f84:	1e6b      	subs	r3, r5, #1
 8007f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f8c:	2b30      	cmp	r3, #48	; 0x30
 8007f8e:	d0f8      	beq.n	8007f82 <_dtoa_r+0x5fa>
 8007f90:	9700      	str	r7, [sp, #0]
 8007f92:	e049      	b.n	8008028 <_dtoa_r+0x6a0>
 8007f94:	4b05      	ldr	r3, [pc, #20]	; (8007fac <_dtoa_r+0x624>)
 8007f96:	f7f8 fb37 	bl	8000608 <__aeabi_dmul>
 8007f9a:	4680      	mov	r8, r0
 8007f9c:	4689      	mov	r9, r1
 8007f9e:	e7bd      	b.n	8007f1c <_dtoa_r+0x594>
 8007fa0:	0800a070 	.word	0x0800a070
 8007fa4:	0800a048 	.word	0x0800a048
 8007fa8:	3ff00000 	.word	0x3ff00000
 8007fac:	40240000 	.word	0x40240000
 8007fb0:	401c0000 	.word	0x401c0000
 8007fb4:	40140000 	.word	0x40140000
 8007fb8:	3fe00000 	.word	0x3fe00000
 8007fbc:	9d01      	ldr	r5, [sp, #4]
 8007fbe:	4656      	mov	r6, sl
 8007fc0:	465f      	mov	r7, fp
 8007fc2:	4642      	mov	r2, r8
 8007fc4:	464b      	mov	r3, r9
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	4639      	mov	r1, r7
 8007fca:	f7f8 fc47 	bl	800085c <__aeabi_ddiv>
 8007fce:	f7f8 fdcb 	bl	8000b68 <__aeabi_d2iz>
 8007fd2:	4682      	mov	sl, r0
 8007fd4:	f7f8 faae 	bl	8000534 <__aeabi_i2d>
 8007fd8:	4642      	mov	r2, r8
 8007fda:	464b      	mov	r3, r9
 8007fdc:	f7f8 fb14 	bl	8000608 <__aeabi_dmul>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007fec:	f7f8 f954 	bl	8000298 <__aeabi_dsub>
 8007ff0:	f805 6b01 	strb.w	r6, [r5], #1
 8007ff4:	9e01      	ldr	r6, [sp, #4]
 8007ff6:	9f03      	ldr	r7, [sp, #12]
 8007ff8:	1bae      	subs	r6, r5, r6
 8007ffa:	42b7      	cmp	r7, r6
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	d135      	bne.n	800806e <_dtoa_r+0x6e6>
 8008002:	f7f8 f94b 	bl	800029c <__adddf3>
 8008006:	4642      	mov	r2, r8
 8008008:	464b      	mov	r3, r9
 800800a:	4606      	mov	r6, r0
 800800c:	460f      	mov	r7, r1
 800800e:	f7f8 fd8b 	bl	8000b28 <__aeabi_dcmpgt>
 8008012:	b9d0      	cbnz	r0, 800804a <_dtoa_r+0x6c2>
 8008014:	4642      	mov	r2, r8
 8008016:	464b      	mov	r3, r9
 8008018:	4630      	mov	r0, r6
 800801a:	4639      	mov	r1, r7
 800801c:	f7f8 fd5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008020:	b110      	cbz	r0, 8008028 <_dtoa_r+0x6a0>
 8008022:	f01a 0f01 	tst.w	sl, #1
 8008026:	d110      	bne.n	800804a <_dtoa_r+0x6c2>
 8008028:	4620      	mov	r0, r4
 800802a:	ee18 1a10 	vmov	r1, s16
 800802e:	f000 faf3 	bl	8008618 <_Bfree>
 8008032:	2300      	movs	r3, #0
 8008034:	9800      	ldr	r0, [sp, #0]
 8008036:	702b      	strb	r3, [r5, #0]
 8008038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800803a:	3001      	adds	r0, #1
 800803c:	6018      	str	r0, [r3, #0]
 800803e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008040:	2b00      	cmp	r3, #0
 8008042:	f43f acf1 	beq.w	8007a28 <_dtoa_r+0xa0>
 8008046:	601d      	str	r5, [r3, #0]
 8008048:	e4ee      	b.n	8007a28 <_dtoa_r+0xa0>
 800804a:	9f00      	ldr	r7, [sp, #0]
 800804c:	462b      	mov	r3, r5
 800804e:	461d      	mov	r5, r3
 8008050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008054:	2a39      	cmp	r2, #57	; 0x39
 8008056:	d106      	bne.n	8008066 <_dtoa_r+0x6de>
 8008058:	9a01      	ldr	r2, [sp, #4]
 800805a:	429a      	cmp	r2, r3
 800805c:	d1f7      	bne.n	800804e <_dtoa_r+0x6c6>
 800805e:	9901      	ldr	r1, [sp, #4]
 8008060:	2230      	movs	r2, #48	; 0x30
 8008062:	3701      	adds	r7, #1
 8008064:	700a      	strb	r2, [r1, #0]
 8008066:	781a      	ldrb	r2, [r3, #0]
 8008068:	3201      	adds	r2, #1
 800806a:	701a      	strb	r2, [r3, #0]
 800806c:	e790      	b.n	8007f90 <_dtoa_r+0x608>
 800806e:	4ba6      	ldr	r3, [pc, #664]	; (8008308 <_dtoa_r+0x980>)
 8008070:	2200      	movs	r2, #0
 8008072:	f7f8 fac9 	bl	8000608 <__aeabi_dmul>
 8008076:	2200      	movs	r2, #0
 8008078:	2300      	movs	r3, #0
 800807a:	4606      	mov	r6, r0
 800807c:	460f      	mov	r7, r1
 800807e:	f7f8 fd2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008082:	2800      	cmp	r0, #0
 8008084:	d09d      	beq.n	8007fc2 <_dtoa_r+0x63a>
 8008086:	e7cf      	b.n	8008028 <_dtoa_r+0x6a0>
 8008088:	9a08      	ldr	r2, [sp, #32]
 800808a:	2a00      	cmp	r2, #0
 800808c:	f000 80d7 	beq.w	800823e <_dtoa_r+0x8b6>
 8008090:	9a06      	ldr	r2, [sp, #24]
 8008092:	2a01      	cmp	r2, #1
 8008094:	f300 80ba 	bgt.w	800820c <_dtoa_r+0x884>
 8008098:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800809a:	2a00      	cmp	r2, #0
 800809c:	f000 80b2 	beq.w	8008204 <_dtoa_r+0x87c>
 80080a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80080a4:	9e07      	ldr	r6, [sp, #28]
 80080a6:	9d04      	ldr	r5, [sp, #16]
 80080a8:	9a04      	ldr	r2, [sp, #16]
 80080aa:	441a      	add	r2, r3
 80080ac:	9204      	str	r2, [sp, #16]
 80080ae:	9a05      	ldr	r2, [sp, #20]
 80080b0:	2101      	movs	r1, #1
 80080b2:	441a      	add	r2, r3
 80080b4:	4620      	mov	r0, r4
 80080b6:	9205      	str	r2, [sp, #20]
 80080b8:	f000 fb66 	bl	8008788 <__i2b>
 80080bc:	4607      	mov	r7, r0
 80080be:	2d00      	cmp	r5, #0
 80080c0:	dd0c      	ble.n	80080dc <_dtoa_r+0x754>
 80080c2:	9b05      	ldr	r3, [sp, #20]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	dd09      	ble.n	80080dc <_dtoa_r+0x754>
 80080c8:	42ab      	cmp	r3, r5
 80080ca:	9a04      	ldr	r2, [sp, #16]
 80080cc:	bfa8      	it	ge
 80080ce:	462b      	movge	r3, r5
 80080d0:	1ad2      	subs	r2, r2, r3
 80080d2:	9204      	str	r2, [sp, #16]
 80080d4:	9a05      	ldr	r2, [sp, #20]
 80080d6:	1aed      	subs	r5, r5, r3
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	9305      	str	r3, [sp, #20]
 80080dc:	9b07      	ldr	r3, [sp, #28]
 80080de:	b31b      	cbz	r3, 8008128 <_dtoa_r+0x7a0>
 80080e0:	9b08      	ldr	r3, [sp, #32]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 80af 	beq.w	8008246 <_dtoa_r+0x8be>
 80080e8:	2e00      	cmp	r6, #0
 80080ea:	dd13      	ble.n	8008114 <_dtoa_r+0x78c>
 80080ec:	4639      	mov	r1, r7
 80080ee:	4632      	mov	r2, r6
 80080f0:	4620      	mov	r0, r4
 80080f2:	f000 fc09 	bl	8008908 <__pow5mult>
 80080f6:	ee18 2a10 	vmov	r2, s16
 80080fa:	4601      	mov	r1, r0
 80080fc:	4607      	mov	r7, r0
 80080fe:	4620      	mov	r0, r4
 8008100:	f000 fb58 	bl	80087b4 <__multiply>
 8008104:	ee18 1a10 	vmov	r1, s16
 8008108:	4680      	mov	r8, r0
 800810a:	4620      	mov	r0, r4
 800810c:	f000 fa84 	bl	8008618 <_Bfree>
 8008110:	ee08 8a10 	vmov	s16, r8
 8008114:	9b07      	ldr	r3, [sp, #28]
 8008116:	1b9a      	subs	r2, r3, r6
 8008118:	d006      	beq.n	8008128 <_dtoa_r+0x7a0>
 800811a:	ee18 1a10 	vmov	r1, s16
 800811e:	4620      	mov	r0, r4
 8008120:	f000 fbf2 	bl	8008908 <__pow5mult>
 8008124:	ee08 0a10 	vmov	s16, r0
 8008128:	2101      	movs	r1, #1
 800812a:	4620      	mov	r0, r4
 800812c:	f000 fb2c 	bl	8008788 <__i2b>
 8008130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008132:	2b00      	cmp	r3, #0
 8008134:	4606      	mov	r6, r0
 8008136:	f340 8088 	ble.w	800824a <_dtoa_r+0x8c2>
 800813a:	461a      	mov	r2, r3
 800813c:	4601      	mov	r1, r0
 800813e:	4620      	mov	r0, r4
 8008140:	f000 fbe2 	bl	8008908 <__pow5mult>
 8008144:	9b06      	ldr	r3, [sp, #24]
 8008146:	2b01      	cmp	r3, #1
 8008148:	4606      	mov	r6, r0
 800814a:	f340 8081 	ble.w	8008250 <_dtoa_r+0x8c8>
 800814e:	f04f 0800 	mov.w	r8, #0
 8008152:	6933      	ldr	r3, [r6, #16]
 8008154:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008158:	6918      	ldr	r0, [r3, #16]
 800815a:	f000 fac5 	bl	80086e8 <__hi0bits>
 800815e:	f1c0 0020 	rsb	r0, r0, #32
 8008162:	9b05      	ldr	r3, [sp, #20]
 8008164:	4418      	add	r0, r3
 8008166:	f010 001f 	ands.w	r0, r0, #31
 800816a:	f000 8092 	beq.w	8008292 <_dtoa_r+0x90a>
 800816e:	f1c0 0320 	rsb	r3, r0, #32
 8008172:	2b04      	cmp	r3, #4
 8008174:	f340 808a 	ble.w	800828c <_dtoa_r+0x904>
 8008178:	f1c0 001c 	rsb	r0, r0, #28
 800817c:	9b04      	ldr	r3, [sp, #16]
 800817e:	4403      	add	r3, r0
 8008180:	9304      	str	r3, [sp, #16]
 8008182:	9b05      	ldr	r3, [sp, #20]
 8008184:	4403      	add	r3, r0
 8008186:	4405      	add	r5, r0
 8008188:	9305      	str	r3, [sp, #20]
 800818a:	9b04      	ldr	r3, [sp, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	dd07      	ble.n	80081a0 <_dtoa_r+0x818>
 8008190:	ee18 1a10 	vmov	r1, s16
 8008194:	461a      	mov	r2, r3
 8008196:	4620      	mov	r0, r4
 8008198:	f000 fc10 	bl	80089bc <__lshift>
 800819c:	ee08 0a10 	vmov	s16, r0
 80081a0:	9b05      	ldr	r3, [sp, #20]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	dd05      	ble.n	80081b2 <_dtoa_r+0x82a>
 80081a6:	4631      	mov	r1, r6
 80081a8:	461a      	mov	r2, r3
 80081aa:	4620      	mov	r0, r4
 80081ac:	f000 fc06 	bl	80089bc <__lshift>
 80081b0:	4606      	mov	r6, r0
 80081b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d06e      	beq.n	8008296 <_dtoa_r+0x90e>
 80081b8:	ee18 0a10 	vmov	r0, s16
 80081bc:	4631      	mov	r1, r6
 80081be:	f000 fc6d 	bl	8008a9c <__mcmp>
 80081c2:	2800      	cmp	r0, #0
 80081c4:	da67      	bge.n	8008296 <_dtoa_r+0x90e>
 80081c6:	9b00      	ldr	r3, [sp, #0]
 80081c8:	3b01      	subs	r3, #1
 80081ca:	ee18 1a10 	vmov	r1, s16
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	220a      	movs	r2, #10
 80081d2:	2300      	movs	r3, #0
 80081d4:	4620      	mov	r0, r4
 80081d6:	f000 fa41 	bl	800865c <__multadd>
 80081da:	9b08      	ldr	r3, [sp, #32]
 80081dc:	ee08 0a10 	vmov	s16, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 81b1 	beq.w	8008548 <_dtoa_r+0xbc0>
 80081e6:	2300      	movs	r3, #0
 80081e8:	4639      	mov	r1, r7
 80081ea:	220a      	movs	r2, #10
 80081ec:	4620      	mov	r0, r4
 80081ee:	f000 fa35 	bl	800865c <__multadd>
 80081f2:	9b02      	ldr	r3, [sp, #8]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	4607      	mov	r7, r0
 80081f8:	f300 808e 	bgt.w	8008318 <_dtoa_r+0x990>
 80081fc:	9b06      	ldr	r3, [sp, #24]
 80081fe:	2b02      	cmp	r3, #2
 8008200:	dc51      	bgt.n	80082a6 <_dtoa_r+0x91e>
 8008202:	e089      	b.n	8008318 <_dtoa_r+0x990>
 8008204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008206:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800820a:	e74b      	b.n	80080a4 <_dtoa_r+0x71c>
 800820c:	9b03      	ldr	r3, [sp, #12]
 800820e:	1e5e      	subs	r6, r3, #1
 8008210:	9b07      	ldr	r3, [sp, #28]
 8008212:	42b3      	cmp	r3, r6
 8008214:	bfbf      	itttt	lt
 8008216:	9b07      	ldrlt	r3, [sp, #28]
 8008218:	9607      	strlt	r6, [sp, #28]
 800821a:	1af2      	sublt	r2, r6, r3
 800821c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800821e:	bfb6      	itet	lt
 8008220:	189b      	addlt	r3, r3, r2
 8008222:	1b9e      	subge	r6, r3, r6
 8008224:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008226:	9b03      	ldr	r3, [sp, #12]
 8008228:	bfb8      	it	lt
 800822a:	2600      	movlt	r6, #0
 800822c:	2b00      	cmp	r3, #0
 800822e:	bfb7      	itett	lt
 8008230:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008234:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008238:	1a9d      	sublt	r5, r3, r2
 800823a:	2300      	movlt	r3, #0
 800823c:	e734      	b.n	80080a8 <_dtoa_r+0x720>
 800823e:	9e07      	ldr	r6, [sp, #28]
 8008240:	9d04      	ldr	r5, [sp, #16]
 8008242:	9f08      	ldr	r7, [sp, #32]
 8008244:	e73b      	b.n	80080be <_dtoa_r+0x736>
 8008246:	9a07      	ldr	r2, [sp, #28]
 8008248:	e767      	b.n	800811a <_dtoa_r+0x792>
 800824a:	9b06      	ldr	r3, [sp, #24]
 800824c:	2b01      	cmp	r3, #1
 800824e:	dc18      	bgt.n	8008282 <_dtoa_r+0x8fa>
 8008250:	f1ba 0f00 	cmp.w	sl, #0
 8008254:	d115      	bne.n	8008282 <_dtoa_r+0x8fa>
 8008256:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800825a:	b993      	cbnz	r3, 8008282 <_dtoa_r+0x8fa>
 800825c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008260:	0d1b      	lsrs	r3, r3, #20
 8008262:	051b      	lsls	r3, r3, #20
 8008264:	b183      	cbz	r3, 8008288 <_dtoa_r+0x900>
 8008266:	9b04      	ldr	r3, [sp, #16]
 8008268:	3301      	adds	r3, #1
 800826a:	9304      	str	r3, [sp, #16]
 800826c:	9b05      	ldr	r3, [sp, #20]
 800826e:	3301      	adds	r3, #1
 8008270:	9305      	str	r3, [sp, #20]
 8008272:	f04f 0801 	mov.w	r8, #1
 8008276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008278:	2b00      	cmp	r3, #0
 800827a:	f47f af6a 	bne.w	8008152 <_dtoa_r+0x7ca>
 800827e:	2001      	movs	r0, #1
 8008280:	e76f      	b.n	8008162 <_dtoa_r+0x7da>
 8008282:	f04f 0800 	mov.w	r8, #0
 8008286:	e7f6      	b.n	8008276 <_dtoa_r+0x8ee>
 8008288:	4698      	mov	r8, r3
 800828a:	e7f4      	b.n	8008276 <_dtoa_r+0x8ee>
 800828c:	f43f af7d 	beq.w	800818a <_dtoa_r+0x802>
 8008290:	4618      	mov	r0, r3
 8008292:	301c      	adds	r0, #28
 8008294:	e772      	b.n	800817c <_dtoa_r+0x7f4>
 8008296:	9b03      	ldr	r3, [sp, #12]
 8008298:	2b00      	cmp	r3, #0
 800829a:	dc37      	bgt.n	800830c <_dtoa_r+0x984>
 800829c:	9b06      	ldr	r3, [sp, #24]
 800829e:	2b02      	cmp	r3, #2
 80082a0:	dd34      	ble.n	800830c <_dtoa_r+0x984>
 80082a2:	9b03      	ldr	r3, [sp, #12]
 80082a4:	9302      	str	r3, [sp, #8]
 80082a6:	9b02      	ldr	r3, [sp, #8]
 80082a8:	b96b      	cbnz	r3, 80082c6 <_dtoa_r+0x93e>
 80082aa:	4631      	mov	r1, r6
 80082ac:	2205      	movs	r2, #5
 80082ae:	4620      	mov	r0, r4
 80082b0:	f000 f9d4 	bl	800865c <__multadd>
 80082b4:	4601      	mov	r1, r0
 80082b6:	4606      	mov	r6, r0
 80082b8:	ee18 0a10 	vmov	r0, s16
 80082bc:	f000 fbee 	bl	8008a9c <__mcmp>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	f73f adbb 	bgt.w	8007e3c <_dtoa_r+0x4b4>
 80082c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c8:	9d01      	ldr	r5, [sp, #4]
 80082ca:	43db      	mvns	r3, r3
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	f04f 0800 	mov.w	r8, #0
 80082d2:	4631      	mov	r1, r6
 80082d4:	4620      	mov	r0, r4
 80082d6:	f000 f99f 	bl	8008618 <_Bfree>
 80082da:	2f00      	cmp	r7, #0
 80082dc:	f43f aea4 	beq.w	8008028 <_dtoa_r+0x6a0>
 80082e0:	f1b8 0f00 	cmp.w	r8, #0
 80082e4:	d005      	beq.n	80082f2 <_dtoa_r+0x96a>
 80082e6:	45b8      	cmp	r8, r7
 80082e8:	d003      	beq.n	80082f2 <_dtoa_r+0x96a>
 80082ea:	4641      	mov	r1, r8
 80082ec:	4620      	mov	r0, r4
 80082ee:	f000 f993 	bl	8008618 <_Bfree>
 80082f2:	4639      	mov	r1, r7
 80082f4:	4620      	mov	r0, r4
 80082f6:	f000 f98f 	bl	8008618 <_Bfree>
 80082fa:	e695      	b.n	8008028 <_dtoa_r+0x6a0>
 80082fc:	2600      	movs	r6, #0
 80082fe:	4637      	mov	r7, r6
 8008300:	e7e1      	b.n	80082c6 <_dtoa_r+0x93e>
 8008302:	9700      	str	r7, [sp, #0]
 8008304:	4637      	mov	r7, r6
 8008306:	e599      	b.n	8007e3c <_dtoa_r+0x4b4>
 8008308:	40240000 	.word	0x40240000
 800830c:	9b08      	ldr	r3, [sp, #32]
 800830e:	2b00      	cmp	r3, #0
 8008310:	f000 80ca 	beq.w	80084a8 <_dtoa_r+0xb20>
 8008314:	9b03      	ldr	r3, [sp, #12]
 8008316:	9302      	str	r3, [sp, #8]
 8008318:	2d00      	cmp	r5, #0
 800831a:	dd05      	ble.n	8008328 <_dtoa_r+0x9a0>
 800831c:	4639      	mov	r1, r7
 800831e:	462a      	mov	r2, r5
 8008320:	4620      	mov	r0, r4
 8008322:	f000 fb4b 	bl	80089bc <__lshift>
 8008326:	4607      	mov	r7, r0
 8008328:	f1b8 0f00 	cmp.w	r8, #0
 800832c:	d05b      	beq.n	80083e6 <_dtoa_r+0xa5e>
 800832e:	6879      	ldr	r1, [r7, #4]
 8008330:	4620      	mov	r0, r4
 8008332:	f000 f931 	bl	8008598 <_Balloc>
 8008336:	4605      	mov	r5, r0
 8008338:	b928      	cbnz	r0, 8008346 <_dtoa_r+0x9be>
 800833a:	4b87      	ldr	r3, [pc, #540]	; (8008558 <_dtoa_r+0xbd0>)
 800833c:	4602      	mov	r2, r0
 800833e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008342:	f7ff bb3b 	b.w	80079bc <_dtoa_r+0x34>
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	3202      	adds	r2, #2
 800834a:	0092      	lsls	r2, r2, #2
 800834c:	f107 010c 	add.w	r1, r7, #12
 8008350:	300c      	adds	r0, #12
 8008352:	f000 f913 	bl	800857c <memcpy>
 8008356:	2201      	movs	r2, #1
 8008358:	4629      	mov	r1, r5
 800835a:	4620      	mov	r0, r4
 800835c:	f000 fb2e 	bl	80089bc <__lshift>
 8008360:	9b01      	ldr	r3, [sp, #4]
 8008362:	f103 0901 	add.w	r9, r3, #1
 8008366:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800836a:	4413      	add	r3, r2
 800836c:	9305      	str	r3, [sp, #20]
 800836e:	f00a 0301 	and.w	r3, sl, #1
 8008372:	46b8      	mov	r8, r7
 8008374:	9304      	str	r3, [sp, #16]
 8008376:	4607      	mov	r7, r0
 8008378:	4631      	mov	r1, r6
 800837a:	ee18 0a10 	vmov	r0, s16
 800837e:	f7ff fa75 	bl	800786c <quorem>
 8008382:	4641      	mov	r1, r8
 8008384:	9002      	str	r0, [sp, #8]
 8008386:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800838a:	ee18 0a10 	vmov	r0, s16
 800838e:	f000 fb85 	bl	8008a9c <__mcmp>
 8008392:	463a      	mov	r2, r7
 8008394:	9003      	str	r0, [sp, #12]
 8008396:	4631      	mov	r1, r6
 8008398:	4620      	mov	r0, r4
 800839a:	f000 fb9b 	bl	8008ad4 <__mdiff>
 800839e:	68c2      	ldr	r2, [r0, #12]
 80083a0:	f109 3bff 	add.w	fp, r9, #4294967295
 80083a4:	4605      	mov	r5, r0
 80083a6:	bb02      	cbnz	r2, 80083ea <_dtoa_r+0xa62>
 80083a8:	4601      	mov	r1, r0
 80083aa:	ee18 0a10 	vmov	r0, s16
 80083ae:	f000 fb75 	bl	8008a9c <__mcmp>
 80083b2:	4602      	mov	r2, r0
 80083b4:	4629      	mov	r1, r5
 80083b6:	4620      	mov	r0, r4
 80083b8:	9207      	str	r2, [sp, #28]
 80083ba:	f000 f92d 	bl	8008618 <_Bfree>
 80083be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80083c2:	ea43 0102 	orr.w	r1, r3, r2
 80083c6:	9b04      	ldr	r3, [sp, #16]
 80083c8:	430b      	orrs	r3, r1
 80083ca:	464d      	mov	r5, r9
 80083cc:	d10f      	bne.n	80083ee <_dtoa_r+0xa66>
 80083ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80083d2:	d02a      	beq.n	800842a <_dtoa_r+0xaa2>
 80083d4:	9b03      	ldr	r3, [sp, #12]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	dd02      	ble.n	80083e0 <_dtoa_r+0xa58>
 80083da:	9b02      	ldr	r3, [sp, #8]
 80083dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80083e0:	f88b a000 	strb.w	sl, [fp]
 80083e4:	e775      	b.n	80082d2 <_dtoa_r+0x94a>
 80083e6:	4638      	mov	r0, r7
 80083e8:	e7ba      	b.n	8008360 <_dtoa_r+0x9d8>
 80083ea:	2201      	movs	r2, #1
 80083ec:	e7e2      	b.n	80083b4 <_dtoa_r+0xa2c>
 80083ee:	9b03      	ldr	r3, [sp, #12]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	db04      	blt.n	80083fe <_dtoa_r+0xa76>
 80083f4:	9906      	ldr	r1, [sp, #24]
 80083f6:	430b      	orrs	r3, r1
 80083f8:	9904      	ldr	r1, [sp, #16]
 80083fa:	430b      	orrs	r3, r1
 80083fc:	d122      	bne.n	8008444 <_dtoa_r+0xabc>
 80083fe:	2a00      	cmp	r2, #0
 8008400:	ddee      	ble.n	80083e0 <_dtoa_r+0xa58>
 8008402:	ee18 1a10 	vmov	r1, s16
 8008406:	2201      	movs	r2, #1
 8008408:	4620      	mov	r0, r4
 800840a:	f000 fad7 	bl	80089bc <__lshift>
 800840e:	4631      	mov	r1, r6
 8008410:	ee08 0a10 	vmov	s16, r0
 8008414:	f000 fb42 	bl	8008a9c <__mcmp>
 8008418:	2800      	cmp	r0, #0
 800841a:	dc03      	bgt.n	8008424 <_dtoa_r+0xa9c>
 800841c:	d1e0      	bne.n	80083e0 <_dtoa_r+0xa58>
 800841e:	f01a 0f01 	tst.w	sl, #1
 8008422:	d0dd      	beq.n	80083e0 <_dtoa_r+0xa58>
 8008424:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008428:	d1d7      	bne.n	80083da <_dtoa_r+0xa52>
 800842a:	2339      	movs	r3, #57	; 0x39
 800842c:	f88b 3000 	strb.w	r3, [fp]
 8008430:	462b      	mov	r3, r5
 8008432:	461d      	mov	r5, r3
 8008434:	3b01      	subs	r3, #1
 8008436:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800843a:	2a39      	cmp	r2, #57	; 0x39
 800843c:	d071      	beq.n	8008522 <_dtoa_r+0xb9a>
 800843e:	3201      	adds	r2, #1
 8008440:	701a      	strb	r2, [r3, #0]
 8008442:	e746      	b.n	80082d2 <_dtoa_r+0x94a>
 8008444:	2a00      	cmp	r2, #0
 8008446:	dd07      	ble.n	8008458 <_dtoa_r+0xad0>
 8008448:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800844c:	d0ed      	beq.n	800842a <_dtoa_r+0xaa2>
 800844e:	f10a 0301 	add.w	r3, sl, #1
 8008452:	f88b 3000 	strb.w	r3, [fp]
 8008456:	e73c      	b.n	80082d2 <_dtoa_r+0x94a>
 8008458:	9b05      	ldr	r3, [sp, #20]
 800845a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800845e:	4599      	cmp	r9, r3
 8008460:	d047      	beq.n	80084f2 <_dtoa_r+0xb6a>
 8008462:	ee18 1a10 	vmov	r1, s16
 8008466:	2300      	movs	r3, #0
 8008468:	220a      	movs	r2, #10
 800846a:	4620      	mov	r0, r4
 800846c:	f000 f8f6 	bl	800865c <__multadd>
 8008470:	45b8      	cmp	r8, r7
 8008472:	ee08 0a10 	vmov	s16, r0
 8008476:	f04f 0300 	mov.w	r3, #0
 800847a:	f04f 020a 	mov.w	r2, #10
 800847e:	4641      	mov	r1, r8
 8008480:	4620      	mov	r0, r4
 8008482:	d106      	bne.n	8008492 <_dtoa_r+0xb0a>
 8008484:	f000 f8ea 	bl	800865c <__multadd>
 8008488:	4680      	mov	r8, r0
 800848a:	4607      	mov	r7, r0
 800848c:	f109 0901 	add.w	r9, r9, #1
 8008490:	e772      	b.n	8008378 <_dtoa_r+0x9f0>
 8008492:	f000 f8e3 	bl	800865c <__multadd>
 8008496:	4639      	mov	r1, r7
 8008498:	4680      	mov	r8, r0
 800849a:	2300      	movs	r3, #0
 800849c:	220a      	movs	r2, #10
 800849e:	4620      	mov	r0, r4
 80084a0:	f000 f8dc 	bl	800865c <__multadd>
 80084a4:	4607      	mov	r7, r0
 80084a6:	e7f1      	b.n	800848c <_dtoa_r+0xb04>
 80084a8:	9b03      	ldr	r3, [sp, #12]
 80084aa:	9302      	str	r3, [sp, #8]
 80084ac:	9d01      	ldr	r5, [sp, #4]
 80084ae:	ee18 0a10 	vmov	r0, s16
 80084b2:	4631      	mov	r1, r6
 80084b4:	f7ff f9da 	bl	800786c <quorem>
 80084b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80084bc:	9b01      	ldr	r3, [sp, #4]
 80084be:	f805 ab01 	strb.w	sl, [r5], #1
 80084c2:	1aea      	subs	r2, r5, r3
 80084c4:	9b02      	ldr	r3, [sp, #8]
 80084c6:	4293      	cmp	r3, r2
 80084c8:	dd09      	ble.n	80084de <_dtoa_r+0xb56>
 80084ca:	ee18 1a10 	vmov	r1, s16
 80084ce:	2300      	movs	r3, #0
 80084d0:	220a      	movs	r2, #10
 80084d2:	4620      	mov	r0, r4
 80084d4:	f000 f8c2 	bl	800865c <__multadd>
 80084d8:	ee08 0a10 	vmov	s16, r0
 80084dc:	e7e7      	b.n	80084ae <_dtoa_r+0xb26>
 80084de:	9b02      	ldr	r3, [sp, #8]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	bfc8      	it	gt
 80084e4:	461d      	movgt	r5, r3
 80084e6:	9b01      	ldr	r3, [sp, #4]
 80084e8:	bfd8      	it	le
 80084ea:	2501      	movle	r5, #1
 80084ec:	441d      	add	r5, r3
 80084ee:	f04f 0800 	mov.w	r8, #0
 80084f2:	ee18 1a10 	vmov	r1, s16
 80084f6:	2201      	movs	r2, #1
 80084f8:	4620      	mov	r0, r4
 80084fa:	f000 fa5f 	bl	80089bc <__lshift>
 80084fe:	4631      	mov	r1, r6
 8008500:	ee08 0a10 	vmov	s16, r0
 8008504:	f000 faca 	bl	8008a9c <__mcmp>
 8008508:	2800      	cmp	r0, #0
 800850a:	dc91      	bgt.n	8008430 <_dtoa_r+0xaa8>
 800850c:	d102      	bne.n	8008514 <_dtoa_r+0xb8c>
 800850e:	f01a 0f01 	tst.w	sl, #1
 8008512:	d18d      	bne.n	8008430 <_dtoa_r+0xaa8>
 8008514:	462b      	mov	r3, r5
 8008516:	461d      	mov	r5, r3
 8008518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800851c:	2a30      	cmp	r2, #48	; 0x30
 800851e:	d0fa      	beq.n	8008516 <_dtoa_r+0xb8e>
 8008520:	e6d7      	b.n	80082d2 <_dtoa_r+0x94a>
 8008522:	9a01      	ldr	r2, [sp, #4]
 8008524:	429a      	cmp	r2, r3
 8008526:	d184      	bne.n	8008432 <_dtoa_r+0xaaa>
 8008528:	9b00      	ldr	r3, [sp, #0]
 800852a:	3301      	adds	r3, #1
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	2331      	movs	r3, #49	; 0x31
 8008530:	7013      	strb	r3, [r2, #0]
 8008532:	e6ce      	b.n	80082d2 <_dtoa_r+0x94a>
 8008534:	4b09      	ldr	r3, [pc, #36]	; (800855c <_dtoa_r+0xbd4>)
 8008536:	f7ff ba95 	b.w	8007a64 <_dtoa_r+0xdc>
 800853a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800853c:	2b00      	cmp	r3, #0
 800853e:	f47f aa6e 	bne.w	8007a1e <_dtoa_r+0x96>
 8008542:	4b07      	ldr	r3, [pc, #28]	; (8008560 <_dtoa_r+0xbd8>)
 8008544:	f7ff ba8e 	b.w	8007a64 <_dtoa_r+0xdc>
 8008548:	9b02      	ldr	r3, [sp, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	dcae      	bgt.n	80084ac <_dtoa_r+0xb24>
 800854e:	9b06      	ldr	r3, [sp, #24]
 8008550:	2b02      	cmp	r3, #2
 8008552:	f73f aea8 	bgt.w	80082a6 <_dtoa_r+0x91e>
 8008556:	e7a9      	b.n	80084ac <_dtoa_r+0xb24>
 8008558:	08009fdb 	.word	0x08009fdb
 800855c:	08009f38 	.word	0x08009f38
 8008560:	08009f5c 	.word	0x08009f5c

08008564 <_localeconv_r>:
 8008564:	4800      	ldr	r0, [pc, #0]	; (8008568 <_localeconv_r+0x4>)
 8008566:	4770      	bx	lr
 8008568:	200003a4 	.word	0x200003a4

0800856c <malloc>:
 800856c:	4b02      	ldr	r3, [pc, #8]	; (8008578 <malloc+0xc>)
 800856e:	4601      	mov	r1, r0
 8008570:	6818      	ldr	r0, [r3, #0]
 8008572:	f000 bc17 	b.w	8008da4 <_malloc_r>
 8008576:	bf00      	nop
 8008578:	20000250 	.word	0x20000250

0800857c <memcpy>:
 800857c:	440a      	add	r2, r1
 800857e:	4291      	cmp	r1, r2
 8008580:	f100 33ff 	add.w	r3, r0, #4294967295
 8008584:	d100      	bne.n	8008588 <memcpy+0xc>
 8008586:	4770      	bx	lr
 8008588:	b510      	push	{r4, lr}
 800858a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800858e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008592:	4291      	cmp	r1, r2
 8008594:	d1f9      	bne.n	800858a <memcpy+0xe>
 8008596:	bd10      	pop	{r4, pc}

08008598 <_Balloc>:
 8008598:	b570      	push	{r4, r5, r6, lr}
 800859a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800859c:	4604      	mov	r4, r0
 800859e:	460d      	mov	r5, r1
 80085a0:	b976      	cbnz	r6, 80085c0 <_Balloc+0x28>
 80085a2:	2010      	movs	r0, #16
 80085a4:	f7ff ffe2 	bl	800856c <malloc>
 80085a8:	4602      	mov	r2, r0
 80085aa:	6260      	str	r0, [r4, #36]	; 0x24
 80085ac:	b920      	cbnz	r0, 80085b8 <_Balloc+0x20>
 80085ae:	4b18      	ldr	r3, [pc, #96]	; (8008610 <_Balloc+0x78>)
 80085b0:	4818      	ldr	r0, [pc, #96]	; (8008614 <_Balloc+0x7c>)
 80085b2:	2166      	movs	r1, #102	; 0x66
 80085b4:	f000 fdd6 	bl	8009164 <__assert_func>
 80085b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085bc:	6006      	str	r6, [r0, #0]
 80085be:	60c6      	str	r6, [r0, #12]
 80085c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80085c2:	68f3      	ldr	r3, [r6, #12]
 80085c4:	b183      	cbz	r3, 80085e8 <_Balloc+0x50>
 80085c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085ce:	b9b8      	cbnz	r0, 8008600 <_Balloc+0x68>
 80085d0:	2101      	movs	r1, #1
 80085d2:	fa01 f605 	lsl.w	r6, r1, r5
 80085d6:	1d72      	adds	r2, r6, #5
 80085d8:	0092      	lsls	r2, r2, #2
 80085da:	4620      	mov	r0, r4
 80085dc:	f000 fb60 	bl	8008ca0 <_calloc_r>
 80085e0:	b160      	cbz	r0, 80085fc <_Balloc+0x64>
 80085e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085e6:	e00e      	b.n	8008606 <_Balloc+0x6e>
 80085e8:	2221      	movs	r2, #33	; 0x21
 80085ea:	2104      	movs	r1, #4
 80085ec:	4620      	mov	r0, r4
 80085ee:	f000 fb57 	bl	8008ca0 <_calloc_r>
 80085f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085f4:	60f0      	str	r0, [r6, #12]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1e4      	bne.n	80085c6 <_Balloc+0x2e>
 80085fc:	2000      	movs	r0, #0
 80085fe:	bd70      	pop	{r4, r5, r6, pc}
 8008600:	6802      	ldr	r2, [r0, #0]
 8008602:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008606:	2300      	movs	r3, #0
 8008608:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800860c:	e7f7      	b.n	80085fe <_Balloc+0x66>
 800860e:	bf00      	nop
 8008610:	08009f69 	.word	0x08009f69
 8008614:	08009fec 	.word	0x08009fec

08008618 <_Bfree>:
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800861c:	4605      	mov	r5, r0
 800861e:	460c      	mov	r4, r1
 8008620:	b976      	cbnz	r6, 8008640 <_Bfree+0x28>
 8008622:	2010      	movs	r0, #16
 8008624:	f7ff ffa2 	bl	800856c <malloc>
 8008628:	4602      	mov	r2, r0
 800862a:	6268      	str	r0, [r5, #36]	; 0x24
 800862c:	b920      	cbnz	r0, 8008638 <_Bfree+0x20>
 800862e:	4b09      	ldr	r3, [pc, #36]	; (8008654 <_Bfree+0x3c>)
 8008630:	4809      	ldr	r0, [pc, #36]	; (8008658 <_Bfree+0x40>)
 8008632:	218a      	movs	r1, #138	; 0x8a
 8008634:	f000 fd96 	bl	8009164 <__assert_func>
 8008638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800863c:	6006      	str	r6, [r0, #0]
 800863e:	60c6      	str	r6, [r0, #12]
 8008640:	b13c      	cbz	r4, 8008652 <_Bfree+0x3a>
 8008642:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008644:	6862      	ldr	r2, [r4, #4]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800864c:	6021      	str	r1, [r4, #0]
 800864e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008652:	bd70      	pop	{r4, r5, r6, pc}
 8008654:	08009f69 	.word	0x08009f69
 8008658:	08009fec 	.word	0x08009fec

0800865c <__multadd>:
 800865c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008660:	690d      	ldr	r5, [r1, #16]
 8008662:	4607      	mov	r7, r0
 8008664:	460c      	mov	r4, r1
 8008666:	461e      	mov	r6, r3
 8008668:	f101 0c14 	add.w	ip, r1, #20
 800866c:	2000      	movs	r0, #0
 800866e:	f8dc 3000 	ldr.w	r3, [ip]
 8008672:	b299      	uxth	r1, r3
 8008674:	fb02 6101 	mla	r1, r2, r1, r6
 8008678:	0c1e      	lsrs	r6, r3, #16
 800867a:	0c0b      	lsrs	r3, r1, #16
 800867c:	fb02 3306 	mla	r3, r2, r6, r3
 8008680:	b289      	uxth	r1, r1
 8008682:	3001      	adds	r0, #1
 8008684:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008688:	4285      	cmp	r5, r0
 800868a:	f84c 1b04 	str.w	r1, [ip], #4
 800868e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008692:	dcec      	bgt.n	800866e <__multadd+0x12>
 8008694:	b30e      	cbz	r6, 80086da <__multadd+0x7e>
 8008696:	68a3      	ldr	r3, [r4, #8]
 8008698:	42ab      	cmp	r3, r5
 800869a:	dc19      	bgt.n	80086d0 <__multadd+0x74>
 800869c:	6861      	ldr	r1, [r4, #4]
 800869e:	4638      	mov	r0, r7
 80086a0:	3101      	adds	r1, #1
 80086a2:	f7ff ff79 	bl	8008598 <_Balloc>
 80086a6:	4680      	mov	r8, r0
 80086a8:	b928      	cbnz	r0, 80086b6 <__multadd+0x5a>
 80086aa:	4602      	mov	r2, r0
 80086ac:	4b0c      	ldr	r3, [pc, #48]	; (80086e0 <__multadd+0x84>)
 80086ae:	480d      	ldr	r0, [pc, #52]	; (80086e4 <__multadd+0x88>)
 80086b0:	21b5      	movs	r1, #181	; 0xb5
 80086b2:	f000 fd57 	bl	8009164 <__assert_func>
 80086b6:	6922      	ldr	r2, [r4, #16]
 80086b8:	3202      	adds	r2, #2
 80086ba:	f104 010c 	add.w	r1, r4, #12
 80086be:	0092      	lsls	r2, r2, #2
 80086c0:	300c      	adds	r0, #12
 80086c2:	f7ff ff5b 	bl	800857c <memcpy>
 80086c6:	4621      	mov	r1, r4
 80086c8:	4638      	mov	r0, r7
 80086ca:	f7ff ffa5 	bl	8008618 <_Bfree>
 80086ce:	4644      	mov	r4, r8
 80086d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086d4:	3501      	adds	r5, #1
 80086d6:	615e      	str	r6, [r3, #20]
 80086d8:	6125      	str	r5, [r4, #16]
 80086da:	4620      	mov	r0, r4
 80086dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086e0:	08009fdb 	.word	0x08009fdb
 80086e4:	08009fec 	.word	0x08009fec

080086e8 <__hi0bits>:
 80086e8:	0c03      	lsrs	r3, r0, #16
 80086ea:	041b      	lsls	r3, r3, #16
 80086ec:	b9d3      	cbnz	r3, 8008724 <__hi0bits+0x3c>
 80086ee:	0400      	lsls	r0, r0, #16
 80086f0:	2310      	movs	r3, #16
 80086f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80086f6:	bf04      	itt	eq
 80086f8:	0200      	lsleq	r0, r0, #8
 80086fa:	3308      	addeq	r3, #8
 80086fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008700:	bf04      	itt	eq
 8008702:	0100      	lsleq	r0, r0, #4
 8008704:	3304      	addeq	r3, #4
 8008706:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800870a:	bf04      	itt	eq
 800870c:	0080      	lsleq	r0, r0, #2
 800870e:	3302      	addeq	r3, #2
 8008710:	2800      	cmp	r0, #0
 8008712:	db05      	blt.n	8008720 <__hi0bits+0x38>
 8008714:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008718:	f103 0301 	add.w	r3, r3, #1
 800871c:	bf08      	it	eq
 800871e:	2320      	moveq	r3, #32
 8008720:	4618      	mov	r0, r3
 8008722:	4770      	bx	lr
 8008724:	2300      	movs	r3, #0
 8008726:	e7e4      	b.n	80086f2 <__hi0bits+0xa>

08008728 <__lo0bits>:
 8008728:	6803      	ldr	r3, [r0, #0]
 800872a:	f013 0207 	ands.w	r2, r3, #7
 800872e:	4601      	mov	r1, r0
 8008730:	d00b      	beq.n	800874a <__lo0bits+0x22>
 8008732:	07da      	lsls	r2, r3, #31
 8008734:	d423      	bmi.n	800877e <__lo0bits+0x56>
 8008736:	0798      	lsls	r0, r3, #30
 8008738:	bf49      	itett	mi
 800873a:	085b      	lsrmi	r3, r3, #1
 800873c:	089b      	lsrpl	r3, r3, #2
 800873e:	2001      	movmi	r0, #1
 8008740:	600b      	strmi	r3, [r1, #0]
 8008742:	bf5c      	itt	pl
 8008744:	600b      	strpl	r3, [r1, #0]
 8008746:	2002      	movpl	r0, #2
 8008748:	4770      	bx	lr
 800874a:	b298      	uxth	r0, r3
 800874c:	b9a8      	cbnz	r0, 800877a <__lo0bits+0x52>
 800874e:	0c1b      	lsrs	r3, r3, #16
 8008750:	2010      	movs	r0, #16
 8008752:	b2da      	uxtb	r2, r3
 8008754:	b90a      	cbnz	r2, 800875a <__lo0bits+0x32>
 8008756:	3008      	adds	r0, #8
 8008758:	0a1b      	lsrs	r3, r3, #8
 800875a:	071a      	lsls	r2, r3, #28
 800875c:	bf04      	itt	eq
 800875e:	091b      	lsreq	r3, r3, #4
 8008760:	3004      	addeq	r0, #4
 8008762:	079a      	lsls	r2, r3, #30
 8008764:	bf04      	itt	eq
 8008766:	089b      	lsreq	r3, r3, #2
 8008768:	3002      	addeq	r0, #2
 800876a:	07da      	lsls	r2, r3, #31
 800876c:	d403      	bmi.n	8008776 <__lo0bits+0x4e>
 800876e:	085b      	lsrs	r3, r3, #1
 8008770:	f100 0001 	add.w	r0, r0, #1
 8008774:	d005      	beq.n	8008782 <__lo0bits+0x5a>
 8008776:	600b      	str	r3, [r1, #0]
 8008778:	4770      	bx	lr
 800877a:	4610      	mov	r0, r2
 800877c:	e7e9      	b.n	8008752 <__lo0bits+0x2a>
 800877e:	2000      	movs	r0, #0
 8008780:	4770      	bx	lr
 8008782:	2020      	movs	r0, #32
 8008784:	4770      	bx	lr
	...

08008788 <__i2b>:
 8008788:	b510      	push	{r4, lr}
 800878a:	460c      	mov	r4, r1
 800878c:	2101      	movs	r1, #1
 800878e:	f7ff ff03 	bl	8008598 <_Balloc>
 8008792:	4602      	mov	r2, r0
 8008794:	b928      	cbnz	r0, 80087a2 <__i2b+0x1a>
 8008796:	4b05      	ldr	r3, [pc, #20]	; (80087ac <__i2b+0x24>)
 8008798:	4805      	ldr	r0, [pc, #20]	; (80087b0 <__i2b+0x28>)
 800879a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800879e:	f000 fce1 	bl	8009164 <__assert_func>
 80087a2:	2301      	movs	r3, #1
 80087a4:	6144      	str	r4, [r0, #20]
 80087a6:	6103      	str	r3, [r0, #16]
 80087a8:	bd10      	pop	{r4, pc}
 80087aa:	bf00      	nop
 80087ac:	08009fdb 	.word	0x08009fdb
 80087b0:	08009fec 	.word	0x08009fec

080087b4 <__multiply>:
 80087b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b8:	4691      	mov	r9, r2
 80087ba:	690a      	ldr	r2, [r1, #16]
 80087bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	bfb8      	it	lt
 80087c4:	460b      	movlt	r3, r1
 80087c6:	460c      	mov	r4, r1
 80087c8:	bfbc      	itt	lt
 80087ca:	464c      	movlt	r4, r9
 80087cc:	4699      	movlt	r9, r3
 80087ce:	6927      	ldr	r7, [r4, #16]
 80087d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80087d4:	68a3      	ldr	r3, [r4, #8]
 80087d6:	6861      	ldr	r1, [r4, #4]
 80087d8:	eb07 060a 	add.w	r6, r7, sl
 80087dc:	42b3      	cmp	r3, r6
 80087de:	b085      	sub	sp, #20
 80087e0:	bfb8      	it	lt
 80087e2:	3101      	addlt	r1, #1
 80087e4:	f7ff fed8 	bl	8008598 <_Balloc>
 80087e8:	b930      	cbnz	r0, 80087f8 <__multiply+0x44>
 80087ea:	4602      	mov	r2, r0
 80087ec:	4b44      	ldr	r3, [pc, #272]	; (8008900 <__multiply+0x14c>)
 80087ee:	4845      	ldr	r0, [pc, #276]	; (8008904 <__multiply+0x150>)
 80087f0:	f240 115d 	movw	r1, #349	; 0x15d
 80087f4:	f000 fcb6 	bl	8009164 <__assert_func>
 80087f8:	f100 0514 	add.w	r5, r0, #20
 80087fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008800:	462b      	mov	r3, r5
 8008802:	2200      	movs	r2, #0
 8008804:	4543      	cmp	r3, r8
 8008806:	d321      	bcc.n	800884c <__multiply+0x98>
 8008808:	f104 0314 	add.w	r3, r4, #20
 800880c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008810:	f109 0314 	add.w	r3, r9, #20
 8008814:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008818:	9202      	str	r2, [sp, #8]
 800881a:	1b3a      	subs	r2, r7, r4
 800881c:	3a15      	subs	r2, #21
 800881e:	f022 0203 	bic.w	r2, r2, #3
 8008822:	3204      	adds	r2, #4
 8008824:	f104 0115 	add.w	r1, r4, #21
 8008828:	428f      	cmp	r7, r1
 800882a:	bf38      	it	cc
 800882c:	2204      	movcc	r2, #4
 800882e:	9201      	str	r2, [sp, #4]
 8008830:	9a02      	ldr	r2, [sp, #8]
 8008832:	9303      	str	r3, [sp, #12]
 8008834:	429a      	cmp	r2, r3
 8008836:	d80c      	bhi.n	8008852 <__multiply+0x9e>
 8008838:	2e00      	cmp	r6, #0
 800883a:	dd03      	ble.n	8008844 <__multiply+0x90>
 800883c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008840:	2b00      	cmp	r3, #0
 8008842:	d05a      	beq.n	80088fa <__multiply+0x146>
 8008844:	6106      	str	r6, [r0, #16]
 8008846:	b005      	add	sp, #20
 8008848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884c:	f843 2b04 	str.w	r2, [r3], #4
 8008850:	e7d8      	b.n	8008804 <__multiply+0x50>
 8008852:	f8b3 a000 	ldrh.w	sl, [r3]
 8008856:	f1ba 0f00 	cmp.w	sl, #0
 800885a:	d024      	beq.n	80088a6 <__multiply+0xf2>
 800885c:	f104 0e14 	add.w	lr, r4, #20
 8008860:	46a9      	mov	r9, r5
 8008862:	f04f 0c00 	mov.w	ip, #0
 8008866:	f85e 2b04 	ldr.w	r2, [lr], #4
 800886a:	f8d9 1000 	ldr.w	r1, [r9]
 800886e:	fa1f fb82 	uxth.w	fp, r2
 8008872:	b289      	uxth	r1, r1
 8008874:	fb0a 110b 	mla	r1, sl, fp, r1
 8008878:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800887c:	f8d9 2000 	ldr.w	r2, [r9]
 8008880:	4461      	add	r1, ip
 8008882:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008886:	fb0a c20b 	mla	r2, sl, fp, ip
 800888a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800888e:	b289      	uxth	r1, r1
 8008890:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008894:	4577      	cmp	r7, lr
 8008896:	f849 1b04 	str.w	r1, [r9], #4
 800889a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800889e:	d8e2      	bhi.n	8008866 <__multiply+0xb2>
 80088a0:	9a01      	ldr	r2, [sp, #4]
 80088a2:	f845 c002 	str.w	ip, [r5, r2]
 80088a6:	9a03      	ldr	r2, [sp, #12]
 80088a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80088ac:	3304      	adds	r3, #4
 80088ae:	f1b9 0f00 	cmp.w	r9, #0
 80088b2:	d020      	beq.n	80088f6 <__multiply+0x142>
 80088b4:	6829      	ldr	r1, [r5, #0]
 80088b6:	f104 0c14 	add.w	ip, r4, #20
 80088ba:	46ae      	mov	lr, r5
 80088bc:	f04f 0a00 	mov.w	sl, #0
 80088c0:	f8bc b000 	ldrh.w	fp, [ip]
 80088c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80088c8:	fb09 220b 	mla	r2, r9, fp, r2
 80088cc:	4492      	add	sl, r2
 80088ce:	b289      	uxth	r1, r1
 80088d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80088d4:	f84e 1b04 	str.w	r1, [lr], #4
 80088d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80088dc:	f8be 1000 	ldrh.w	r1, [lr]
 80088e0:	0c12      	lsrs	r2, r2, #16
 80088e2:	fb09 1102 	mla	r1, r9, r2, r1
 80088e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80088ea:	4567      	cmp	r7, ip
 80088ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80088f0:	d8e6      	bhi.n	80088c0 <__multiply+0x10c>
 80088f2:	9a01      	ldr	r2, [sp, #4]
 80088f4:	50a9      	str	r1, [r5, r2]
 80088f6:	3504      	adds	r5, #4
 80088f8:	e79a      	b.n	8008830 <__multiply+0x7c>
 80088fa:	3e01      	subs	r6, #1
 80088fc:	e79c      	b.n	8008838 <__multiply+0x84>
 80088fe:	bf00      	nop
 8008900:	08009fdb 	.word	0x08009fdb
 8008904:	08009fec 	.word	0x08009fec

08008908 <__pow5mult>:
 8008908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800890c:	4615      	mov	r5, r2
 800890e:	f012 0203 	ands.w	r2, r2, #3
 8008912:	4606      	mov	r6, r0
 8008914:	460f      	mov	r7, r1
 8008916:	d007      	beq.n	8008928 <__pow5mult+0x20>
 8008918:	4c25      	ldr	r4, [pc, #148]	; (80089b0 <__pow5mult+0xa8>)
 800891a:	3a01      	subs	r2, #1
 800891c:	2300      	movs	r3, #0
 800891e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008922:	f7ff fe9b 	bl	800865c <__multadd>
 8008926:	4607      	mov	r7, r0
 8008928:	10ad      	asrs	r5, r5, #2
 800892a:	d03d      	beq.n	80089a8 <__pow5mult+0xa0>
 800892c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800892e:	b97c      	cbnz	r4, 8008950 <__pow5mult+0x48>
 8008930:	2010      	movs	r0, #16
 8008932:	f7ff fe1b 	bl	800856c <malloc>
 8008936:	4602      	mov	r2, r0
 8008938:	6270      	str	r0, [r6, #36]	; 0x24
 800893a:	b928      	cbnz	r0, 8008948 <__pow5mult+0x40>
 800893c:	4b1d      	ldr	r3, [pc, #116]	; (80089b4 <__pow5mult+0xac>)
 800893e:	481e      	ldr	r0, [pc, #120]	; (80089b8 <__pow5mult+0xb0>)
 8008940:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008944:	f000 fc0e 	bl	8009164 <__assert_func>
 8008948:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800894c:	6004      	str	r4, [r0, #0]
 800894e:	60c4      	str	r4, [r0, #12]
 8008950:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008954:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008958:	b94c      	cbnz	r4, 800896e <__pow5mult+0x66>
 800895a:	f240 2171 	movw	r1, #625	; 0x271
 800895e:	4630      	mov	r0, r6
 8008960:	f7ff ff12 	bl	8008788 <__i2b>
 8008964:	2300      	movs	r3, #0
 8008966:	f8c8 0008 	str.w	r0, [r8, #8]
 800896a:	4604      	mov	r4, r0
 800896c:	6003      	str	r3, [r0, #0]
 800896e:	f04f 0900 	mov.w	r9, #0
 8008972:	07eb      	lsls	r3, r5, #31
 8008974:	d50a      	bpl.n	800898c <__pow5mult+0x84>
 8008976:	4639      	mov	r1, r7
 8008978:	4622      	mov	r2, r4
 800897a:	4630      	mov	r0, r6
 800897c:	f7ff ff1a 	bl	80087b4 <__multiply>
 8008980:	4639      	mov	r1, r7
 8008982:	4680      	mov	r8, r0
 8008984:	4630      	mov	r0, r6
 8008986:	f7ff fe47 	bl	8008618 <_Bfree>
 800898a:	4647      	mov	r7, r8
 800898c:	106d      	asrs	r5, r5, #1
 800898e:	d00b      	beq.n	80089a8 <__pow5mult+0xa0>
 8008990:	6820      	ldr	r0, [r4, #0]
 8008992:	b938      	cbnz	r0, 80089a4 <__pow5mult+0x9c>
 8008994:	4622      	mov	r2, r4
 8008996:	4621      	mov	r1, r4
 8008998:	4630      	mov	r0, r6
 800899a:	f7ff ff0b 	bl	80087b4 <__multiply>
 800899e:	6020      	str	r0, [r4, #0]
 80089a0:	f8c0 9000 	str.w	r9, [r0]
 80089a4:	4604      	mov	r4, r0
 80089a6:	e7e4      	b.n	8008972 <__pow5mult+0x6a>
 80089a8:	4638      	mov	r0, r7
 80089aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ae:	bf00      	nop
 80089b0:	0800a138 	.word	0x0800a138
 80089b4:	08009f69 	.word	0x08009f69
 80089b8:	08009fec 	.word	0x08009fec

080089bc <__lshift>:
 80089bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c0:	460c      	mov	r4, r1
 80089c2:	6849      	ldr	r1, [r1, #4]
 80089c4:	6923      	ldr	r3, [r4, #16]
 80089c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089ca:	68a3      	ldr	r3, [r4, #8]
 80089cc:	4607      	mov	r7, r0
 80089ce:	4691      	mov	r9, r2
 80089d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089d4:	f108 0601 	add.w	r6, r8, #1
 80089d8:	42b3      	cmp	r3, r6
 80089da:	db0b      	blt.n	80089f4 <__lshift+0x38>
 80089dc:	4638      	mov	r0, r7
 80089de:	f7ff fddb 	bl	8008598 <_Balloc>
 80089e2:	4605      	mov	r5, r0
 80089e4:	b948      	cbnz	r0, 80089fa <__lshift+0x3e>
 80089e6:	4602      	mov	r2, r0
 80089e8:	4b2a      	ldr	r3, [pc, #168]	; (8008a94 <__lshift+0xd8>)
 80089ea:	482b      	ldr	r0, [pc, #172]	; (8008a98 <__lshift+0xdc>)
 80089ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80089f0:	f000 fbb8 	bl	8009164 <__assert_func>
 80089f4:	3101      	adds	r1, #1
 80089f6:	005b      	lsls	r3, r3, #1
 80089f8:	e7ee      	b.n	80089d8 <__lshift+0x1c>
 80089fa:	2300      	movs	r3, #0
 80089fc:	f100 0114 	add.w	r1, r0, #20
 8008a00:	f100 0210 	add.w	r2, r0, #16
 8008a04:	4618      	mov	r0, r3
 8008a06:	4553      	cmp	r3, sl
 8008a08:	db37      	blt.n	8008a7a <__lshift+0xbe>
 8008a0a:	6920      	ldr	r0, [r4, #16]
 8008a0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a10:	f104 0314 	add.w	r3, r4, #20
 8008a14:	f019 091f 	ands.w	r9, r9, #31
 8008a18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008a20:	d02f      	beq.n	8008a82 <__lshift+0xc6>
 8008a22:	f1c9 0e20 	rsb	lr, r9, #32
 8008a26:	468a      	mov	sl, r1
 8008a28:	f04f 0c00 	mov.w	ip, #0
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	fa02 f209 	lsl.w	r2, r2, r9
 8008a32:	ea42 020c 	orr.w	r2, r2, ip
 8008a36:	f84a 2b04 	str.w	r2, [sl], #4
 8008a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a3e:	4298      	cmp	r0, r3
 8008a40:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008a44:	d8f2      	bhi.n	8008a2c <__lshift+0x70>
 8008a46:	1b03      	subs	r3, r0, r4
 8008a48:	3b15      	subs	r3, #21
 8008a4a:	f023 0303 	bic.w	r3, r3, #3
 8008a4e:	3304      	adds	r3, #4
 8008a50:	f104 0215 	add.w	r2, r4, #21
 8008a54:	4290      	cmp	r0, r2
 8008a56:	bf38      	it	cc
 8008a58:	2304      	movcc	r3, #4
 8008a5a:	f841 c003 	str.w	ip, [r1, r3]
 8008a5e:	f1bc 0f00 	cmp.w	ip, #0
 8008a62:	d001      	beq.n	8008a68 <__lshift+0xac>
 8008a64:	f108 0602 	add.w	r6, r8, #2
 8008a68:	3e01      	subs	r6, #1
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	612e      	str	r6, [r5, #16]
 8008a6e:	4621      	mov	r1, r4
 8008a70:	f7ff fdd2 	bl	8008618 <_Bfree>
 8008a74:	4628      	mov	r0, r5
 8008a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a7e:	3301      	adds	r3, #1
 8008a80:	e7c1      	b.n	8008a06 <__lshift+0x4a>
 8008a82:	3904      	subs	r1, #4
 8008a84:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a88:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a8c:	4298      	cmp	r0, r3
 8008a8e:	d8f9      	bhi.n	8008a84 <__lshift+0xc8>
 8008a90:	e7ea      	b.n	8008a68 <__lshift+0xac>
 8008a92:	bf00      	nop
 8008a94:	08009fdb 	.word	0x08009fdb
 8008a98:	08009fec 	.word	0x08009fec

08008a9c <__mcmp>:
 8008a9c:	b530      	push	{r4, r5, lr}
 8008a9e:	6902      	ldr	r2, [r0, #16]
 8008aa0:	690c      	ldr	r4, [r1, #16]
 8008aa2:	1b12      	subs	r2, r2, r4
 8008aa4:	d10e      	bne.n	8008ac4 <__mcmp+0x28>
 8008aa6:	f100 0314 	add.w	r3, r0, #20
 8008aaa:	3114      	adds	r1, #20
 8008aac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ab0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ab4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ab8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008abc:	42a5      	cmp	r5, r4
 8008abe:	d003      	beq.n	8008ac8 <__mcmp+0x2c>
 8008ac0:	d305      	bcc.n	8008ace <__mcmp+0x32>
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	bd30      	pop	{r4, r5, pc}
 8008ac8:	4283      	cmp	r3, r0
 8008aca:	d3f3      	bcc.n	8008ab4 <__mcmp+0x18>
 8008acc:	e7fa      	b.n	8008ac4 <__mcmp+0x28>
 8008ace:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad2:	e7f7      	b.n	8008ac4 <__mcmp+0x28>

08008ad4 <__mdiff>:
 8008ad4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad8:	460c      	mov	r4, r1
 8008ada:	4606      	mov	r6, r0
 8008adc:	4611      	mov	r1, r2
 8008ade:	4620      	mov	r0, r4
 8008ae0:	4690      	mov	r8, r2
 8008ae2:	f7ff ffdb 	bl	8008a9c <__mcmp>
 8008ae6:	1e05      	subs	r5, r0, #0
 8008ae8:	d110      	bne.n	8008b0c <__mdiff+0x38>
 8008aea:	4629      	mov	r1, r5
 8008aec:	4630      	mov	r0, r6
 8008aee:	f7ff fd53 	bl	8008598 <_Balloc>
 8008af2:	b930      	cbnz	r0, 8008b02 <__mdiff+0x2e>
 8008af4:	4b3a      	ldr	r3, [pc, #232]	; (8008be0 <__mdiff+0x10c>)
 8008af6:	4602      	mov	r2, r0
 8008af8:	f240 2132 	movw	r1, #562	; 0x232
 8008afc:	4839      	ldr	r0, [pc, #228]	; (8008be4 <__mdiff+0x110>)
 8008afe:	f000 fb31 	bl	8009164 <__assert_func>
 8008b02:	2301      	movs	r3, #1
 8008b04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0c:	bfa4      	itt	ge
 8008b0e:	4643      	movge	r3, r8
 8008b10:	46a0      	movge	r8, r4
 8008b12:	4630      	mov	r0, r6
 8008b14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b18:	bfa6      	itte	ge
 8008b1a:	461c      	movge	r4, r3
 8008b1c:	2500      	movge	r5, #0
 8008b1e:	2501      	movlt	r5, #1
 8008b20:	f7ff fd3a 	bl	8008598 <_Balloc>
 8008b24:	b920      	cbnz	r0, 8008b30 <__mdiff+0x5c>
 8008b26:	4b2e      	ldr	r3, [pc, #184]	; (8008be0 <__mdiff+0x10c>)
 8008b28:	4602      	mov	r2, r0
 8008b2a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008b2e:	e7e5      	b.n	8008afc <__mdiff+0x28>
 8008b30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b34:	6926      	ldr	r6, [r4, #16]
 8008b36:	60c5      	str	r5, [r0, #12]
 8008b38:	f104 0914 	add.w	r9, r4, #20
 8008b3c:	f108 0514 	add.w	r5, r8, #20
 8008b40:	f100 0e14 	add.w	lr, r0, #20
 8008b44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008b48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b4c:	f108 0210 	add.w	r2, r8, #16
 8008b50:	46f2      	mov	sl, lr
 8008b52:	2100      	movs	r1, #0
 8008b54:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b5c:	fa1f f883 	uxth.w	r8, r3
 8008b60:	fa11 f18b 	uxtah	r1, r1, fp
 8008b64:	0c1b      	lsrs	r3, r3, #16
 8008b66:	eba1 0808 	sub.w	r8, r1, r8
 8008b6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b6e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b72:	fa1f f888 	uxth.w	r8, r8
 8008b76:	1419      	asrs	r1, r3, #16
 8008b78:	454e      	cmp	r6, r9
 8008b7a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b7e:	f84a 3b04 	str.w	r3, [sl], #4
 8008b82:	d8e7      	bhi.n	8008b54 <__mdiff+0x80>
 8008b84:	1b33      	subs	r3, r6, r4
 8008b86:	3b15      	subs	r3, #21
 8008b88:	f023 0303 	bic.w	r3, r3, #3
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	3415      	adds	r4, #21
 8008b90:	42a6      	cmp	r6, r4
 8008b92:	bf38      	it	cc
 8008b94:	2304      	movcc	r3, #4
 8008b96:	441d      	add	r5, r3
 8008b98:	4473      	add	r3, lr
 8008b9a:	469e      	mov	lr, r3
 8008b9c:	462e      	mov	r6, r5
 8008b9e:	4566      	cmp	r6, ip
 8008ba0:	d30e      	bcc.n	8008bc0 <__mdiff+0xec>
 8008ba2:	f10c 0203 	add.w	r2, ip, #3
 8008ba6:	1b52      	subs	r2, r2, r5
 8008ba8:	f022 0203 	bic.w	r2, r2, #3
 8008bac:	3d03      	subs	r5, #3
 8008bae:	45ac      	cmp	ip, r5
 8008bb0:	bf38      	it	cc
 8008bb2:	2200      	movcc	r2, #0
 8008bb4:	441a      	add	r2, r3
 8008bb6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008bba:	b17b      	cbz	r3, 8008bdc <__mdiff+0x108>
 8008bbc:	6107      	str	r7, [r0, #16]
 8008bbe:	e7a3      	b.n	8008b08 <__mdiff+0x34>
 8008bc0:	f856 8b04 	ldr.w	r8, [r6], #4
 8008bc4:	fa11 f288 	uxtah	r2, r1, r8
 8008bc8:	1414      	asrs	r4, r2, #16
 8008bca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008bce:	b292      	uxth	r2, r2
 8008bd0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008bd4:	f84e 2b04 	str.w	r2, [lr], #4
 8008bd8:	1421      	asrs	r1, r4, #16
 8008bda:	e7e0      	b.n	8008b9e <__mdiff+0xca>
 8008bdc:	3f01      	subs	r7, #1
 8008bde:	e7ea      	b.n	8008bb6 <__mdiff+0xe2>
 8008be0:	08009fdb 	.word	0x08009fdb
 8008be4:	08009fec 	.word	0x08009fec

08008be8 <__d2b>:
 8008be8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bec:	4689      	mov	r9, r1
 8008bee:	2101      	movs	r1, #1
 8008bf0:	ec57 6b10 	vmov	r6, r7, d0
 8008bf4:	4690      	mov	r8, r2
 8008bf6:	f7ff fccf 	bl	8008598 <_Balloc>
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	b930      	cbnz	r0, 8008c0c <__d2b+0x24>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	4b25      	ldr	r3, [pc, #148]	; (8008c98 <__d2b+0xb0>)
 8008c02:	4826      	ldr	r0, [pc, #152]	; (8008c9c <__d2b+0xb4>)
 8008c04:	f240 310a 	movw	r1, #778	; 0x30a
 8008c08:	f000 faac 	bl	8009164 <__assert_func>
 8008c0c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008c10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c14:	bb35      	cbnz	r5, 8008c64 <__d2b+0x7c>
 8008c16:	2e00      	cmp	r6, #0
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	d028      	beq.n	8008c6e <__d2b+0x86>
 8008c1c:	4668      	mov	r0, sp
 8008c1e:	9600      	str	r6, [sp, #0]
 8008c20:	f7ff fd82 	bl	8008728 <__lo0bits>
 8008c24:	9900      	ldr	r1, [sp, #0]
 8008c26:	b300      	cbz	r0, 8008c6a <__d2b+0x82>
 8008c28:	9a01      	ldr	r2, [sp, #4]
 8008c2a:	f1c0 0320 	rsb	r3, r0, #32
 8008c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c32:	430b      	orrs	r3, r1
 8008c34:	40c2      	lsrs	r2, r0
 8008c36:	6163      	str	r3, [r4, #20]
 8008c38:	9201      	str	r2, [sp, #4]
 8008c3a:	9b01      	ldr	r3, [sp, #4]
 8008c3c:	61a3      	str	r3, [r4, #24]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	bf14      	ite	ne
 8008c42:	2202      	movne	r2, #2
 8008c44:	2201      	moveq	r2, #1
 8008c46:	6122      	str	r2, [r4, #16]
 8008c48:	b1d5      	cbz	r5, 8008c80 <__d2b+0x98>
 8008c4a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c4e:	4405      	add	r5, r0
 8008c50:	f8c9 5000 	str.w	r5, [r9]
 8008c54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c58:	f8c8 0000 	str.w	r0, [r8]
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	b003      	add	sp, #12
 8008c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c68:	e7d5      	b.n	8008c16 <__d2b+0x2e>
 8008c6a:	6161      	str	r1, [r4, #20]
 8008c6c:	e7e5      	b.n	8008c3a <__d2b+0x52>
 8008c6e:	a801      	add	r0, sp, #4
 8008c70:	f7ff fd5a 	bl	8008728 <__lo0bits>
 8008c74:	9b01      	ldr	r3, [sp, #4]
 8008c76:	6163      	str	r3, [r4, #20]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	6122      	str	r2, [r4, #16]
 8008c7c:	3020      	adds	r0, #32
 8008c7e:	e7e3      	b.n	8008c48 <__d2b+0x60>
 8008c80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c88:	f8c9 0000 	str.w	r0, [r9]
 8008c8c:	6918      	ldr	r0, [r3, #16]
 8008c8e:	f7ff fd2b 	bl	80086e8 <__hi0bits>
 8008c92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c96:	e7df      	b.n	8008c58 <__d2b+0x70>
 8008c98:	08009fdb 	.word	0x08009fdb
 8008c9c:	08009fec 	.word	0x08009fec

08008ca0 <_calloc_r>:
 8008ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ca2:	fba1 2402 	umull	r2, r4, r1, r2
 8008ca6:	b94c      	cbnz	r4, 8008cbc <_calloc_r+0x1c>
 8008ca8:	4611      	mov	r1, r2
 8008caa:	9201      	str	r2, [sp, #4]
 8008cac:	f000 f87a 	bl	8008da4 <_malloc_r>
 8008cb0:	9a01      	ldr	r2, [sp, #4]
 8008cb2:	4605      	mov	r5, r0
 8008cb4:	b930      	cbnz	r0, 8008cc4 <_calloc_r+0x24>
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	b003      	add	sp, #12
 8008cba:	bd30      	pop	{r4, r5, pc}
 8008cbc:	220c      	movs	r2, #12
 8008cbe:	6002      	str	r2, [r0, #0]
 8008cc0:	2500      	movs	r5, #0
 8008cc2:	e7f8      	b.n	8008cb6 <_calloc_r+0x16>
 8008cc4:	4621      	mov	r1, r4
 8008cc6:	f7fe f93f 	bl	8006f48 <memset>
 8008cca:	e7f4      	b.n	8008cb6 <_calloc_r+0x16>

08008ccc <_free_r>:
 8008ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cce:	2900      	cmp	r1, #0
 8008cd0:	d044      	beq.n	8008d5c <_free_r+0x90>
 8008cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cd6:	9001      	str	r0, [sp, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f1a1 0404 	sub.w	r4, r1, #4
 8008cde:	bfb8      	it	lt
 8008ce0:	18e4      	addlt	r4, r4, r3
 8008ce2:	f000 fa9b 	bl	800921c <__malloc_lock>
 8008ce6:	4a1e      	ldr	r2, [pc, #120]	; (8008d60 <_free_r+0x94>)
 8008ce8:	9801      	ldr	r0, [sp, #4]
 8008cea:	6813      	ldr	r3, [r2, #0]
 8008cec:	b933      	cbnz	r3, 8008cfc <_free_r+0x30>
 8008cee:	6063      	str	r3, [r4, #4]
 8008cf0:	6014      	str	r4, [r2, #0]
 8008cf2:	b003      	add	sp, #12
 8008cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cf8:	f000 ba96 	b.w	8009228 <__malloc_unlock>
 8008cfc:	42a3      	cmp	r3, r4
 8008cfe:	d908      	bls.n	8008d12 <_free_r+0x46>
 8008d00:	6825      	ldr	r5, [r4, #0]
 8008d02:	1961      	adds	r1, r4, r5
 8008d04:	428b      	cmp	r3, r1
 8008d06:	bf01      	itttt	eq
 8008d08:	6819      	ldreq	r1, [r3, #0]
 8008d0a:	685b      	ldreq	r3, [r3, #4]
 8008d0c:	1949      	addeq	r1, r1, r5
 8008d0e:	6021      	streq	r1, [r4, #0]
 8008d10:	e7ed      	b.n	8008cee <_free_r+0x22>
 8008d12:	461a      	mov	r2, r3
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	b10b      	cbz	r3, 8008d1c <_free_r+0x50>
 8008d18:	42a3      	cmp	r3, r4
 8008d1a:	d9fa      	bls.n	8008d12 <_free_r+0x46>
 8008d1c:	6811      	ldr	r1, [r2, #0]
 8008d1e:	1855      	adds	r5, r2, r1
 8008d20:	42a5      	cmp	r5, r4
 8008d22:	d10b      	bne.n	8008d3c <_free_r+0x70>
 8008d24:	6824      	ldr	r4, [r4, #0]
 8008d26:	4421      	add	r1, r4
 8008d28:	1854      	adds	r4, r2, r1
 8008d2a:	42a3      	cmp	r3, r4
 8008d2c:	6011      	str	r1, [r2, #0]
 8008d2e:	d1e0      	bne.n	8008cf2 <_free_r+0x26>
 8008d30:	681c      	ldr	r4, [r3, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	6053      	str	r3, [r2, #4]
 8008d36:	4421      	add	r1, r4
 8008d38:	6011      	str	r1, [r2, #0]
 8008d3a:	e7da      	b.n	8008cf2 <_free_r+0x26>
 8008d3c:	d902      	bls.n	8008d44 <_free_r+0x78>
 8008d3e:	230c      	movs	r3, #12
 8008d40:	6003      	str	r3, [r0, #0]
 8008d42:	e7d6      	b.n	8008cf2 <_free_r+0x26>
 8008d44:	6825      	ldr	r5, [r4, #0]
 8008d46:	1961      	adds	r1, r4, r5
 8008d48:	428b      	cmp	r3, r1
 8008d4a:	bf04      	itt	eq
 8008d4c:	6819      	ldreq	r1, [r3, #0]
 8008d4e:	685b      	ldreq	r3, [r3, #4]
 8008d50:	6063      	str	r3, [r4, #4]
 8008d52:	bf04      	itt	eq
 8008d54:	1949      	addeq	r1, r1, r5
 8008d56:	6021      	streq	r1, [r4, #0]
 8008d58:	6054      	str	r4, [r2, #4]
 8008d5a:	e7ca      	b.n	8008cf2 <_free_r+0x26>
 8008d5c:	b003      	add	sp, #12
 8008d5e:	bd30      	pop	{r4, r5, pc}
 8008d60:	20000d1c 	.word	0x20000d1c

08008d64 <sbrk_aligned>:
 8008d64:	b570      	push	{r4, r5, r6, lr}
 8008d66:	4e0e      	ldr	r6, [pc, #56]	; (8008da0 <sbrk_aligned+0x3c>)
 8008d68:	460c      	mov	r4, r1
 8008d6a:	6831      	ldr	r1, [r6, #0]
 8008d6c:	4605      	mov	r5, r0
 8008d6e:	b911      	cbnz	r1, 8008d76 <sbrk_aligned+0x12>
 8008d70:	f000 f9e8 	bl	8009144 <_sbrk_r>
 8008d74:	6030      	str	r0, [r6, #0]
 8008d76:	4621      	mov	r1, r4
 8008d78:	4628      	mov	r0, r5
 8008d7a:	f000 f9e3 	bl	8009144 <_sbrk_r>
 8008d7e:	1c43      	adds	r3, r0, #1
 8008d80:	d00a      	beq.n	8008d98 <sbrk_aligned+0x34>
 8008d82:	1cc4      	adds	r4, r0, #3
 8008d84:	f024 0403 	bic.w	r4, r4, #3
 8008d88:	42a0      	cmp	r0, r4
 8008d8a:	d007      	beq.n	8008d9c <sbrk_aligned+0x38>
 8008d8c:	1a21      	subs	r1, r4, r0
 8008d8e:	4628      	mov	r0, r5
 8008d90:	f000 f9d8 	bl	8009144 <_sbrk_r>
 8008d94:	3001      	adds	r0, #1
 8008d96:	d101      	bne.n	8008d9c <sbrk_aligned+0x38>
 8008d98:	f04f 34ff 	mov.w	r4, #4294967295
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	bd70      	pop	{r4, r5, r6, pc}
 8008da0:	20000d20 	.word	0x20000d20

08008da4 <_malloc_r>:
 8008da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da8:	1ccd      	adds	r5, r1, #3
 8008daa:	f025 0503 	bic.w	r5, r5, #3
 8008dae:	3508      	adds	r5, #8
 8008db0:	2d0c      	cmp	r5, #12
 8008db2:	bf38      	it	cc
 8008db4:	250c      	movcc	r5, #12
 8008db6:	2d00      	cmp	r5, #0
 8008db8:	4607      	mov	r7, r0
 8008dba:	db01      	blt.n	8008dc0 <_malloc_r+0x1c>
 8008dbc:	42a9      	cmp	r1, r5
 8008dbe:	d905      	bls.n	8008dcc <_malloc_r+0x28>
 8008dc0:	230c      	movs	r3, #12
 8008dc2:	603b      	str	r3, [r7, #0]
 8008dc4:	2600      	movs	r6, #0
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dcc:	4e2e      	ldr	r6, [pc, #184]	; (8008e88 <_malloc_r+0xe4>)
 8008dce:	f000 fa25 	bl	800921c <__malloc_lock>
 8008dd2:	6833      	ldr	r3, [r6, #0]
 8008dd4:	461c      	mov	r4, r3
 8008dd6:	bb34      	cbnz	r4, 8008e26 <_malloc_r+0x82>
 8008dd8:	4629      	mov	r1, r5
 8008dda:	4638      	mov	r0, r7
 8008ddc:	f7ff ffc2 	bl	8008d64 <sbrk_aligned>
 8008de0:	1c43      	adds	r3, r0, #1
 8008de2:	4604      	mov	r4, r0
 8008de4:	d14d      	bne.n	8008e82 <_malloc_r+0xde>
 8008de6:	6834      	ldr	r4, [r6, #0]
 8008de8:	4626      	mov	r6, r4
 8008dea:	2e00      	cmp	r6, #0
 8008dec:	d140      	bne.n	8008e70 <_malloc_r+0xcc>
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	4631      	mov	r1, r6
 8008df2:	4638      	mov	r0, r7
 8008df4:	eb04 0803 	add.w	r8, r4, r3
 8008df8:	f000 f9a4 	bl	8009144 <_sbrk_r>
 8008dfc:	4580      	cmp	r8, r0
 8008dfe:	d13a      	bne.n	8008e76 <_malloc_r+0xd2>
 8008e00:	6821      	ldr	r1, [r4, #0]
 8008e02:	3503      	adds	r5, #3
 8008e04:	1a6d      	subs	r5, r5, r1
 8008e06:	f025 0503 	bic.w	r5, r5, #3
 8008e0a:	3508      	adds	r5, #8
 8008e0c:	2d0c      	cmp	r5, #12
 8008e0e:	bf38      	it	cc
 8008e10:	250c      	movcc	r5, #12
 8008e12:	4629      	mov	r1, r5
 8008e14:	4638      	mov	r0, r7
 8008e16:	f7ff ffa5 	bl	8008d64 <sbrk_aligned>
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	d02b      	beq.n	8008e76 <_malloc_r+0xd2>
 8008e1e:	6823      	ldr	r3, [r4, #0]
 8008e20:	442b      	add	r3, r5
 8008e22:	6023      	str	r3, [r4, #0]
 8008e24:	e00e      	b.n	8008e44 <_malloc_r+0xa0>
 8008e26:	6822      	ldr	r2, [r4, #0]
 8008e28:	1b52      	subs	r2, r2, r5
 8008e2a:	d41e      	bmi.n	8008e6a <_malloc_r+0xc6>
 8008e2c:	2a0b      	cmp	r2, #11
 8008e2e:	d916      	bls.n	8008e5e <_malloc_r+0xba>
 8008e30:	1961      	adds	r1, r4, r5
 8008e32:	42a3      	cmp	r3, r4
 8008e34:	6025      	str	r5, [r4, #0]
 8008e36:	bf18      	it	ne
 8008e38:	6059      	strne	r1, [r3, #4]
 8008e3a:	6863      	ldr	r3, [r4, #4]
 8008e3c:	bf08      	it	eq
 8008e3e:	6031      	streq	r1, [r6, #0]
 8008e40:	5162      	str	r2, [r4, r5]
 8008e42:	604b      	str	r3, [r1, #4]
 8008e44:	4638      	mov	r0, r7
 8008e46:	f104 060b 	add.w	r6, r4, #11
 8008e4a:	f000 f9ed 	bl	8009228 <__malloc_unlock>
 8008e4e:	f026 0607 	bic.w	r6, r6, #7
 8008e52:	1d23      	adds	r3, r4, #4
 8008e54:	1af2      	subs	r2, r6, r3
 8008e56:	d0b6      	beq.n	8008dc6 <_malloc_r+0x22>
 8008e58:	1b9b      	subs	r3, r3, r6
 8008e5a:	50a3      	str	r3, [r4, r2]
 8008e5c:	e7b3      	b.n	8008dc6 <_malloc_r+0x22>
 8008e5e:	6862      	ldr	r2, [r4, #4]
 8008e60:	42a3      	cmp	r3, r4
 8008e62:	bf0c      	ite	eq
 8008e64:	6032      	streq	r2, [r6, #0]
 8008e66:	605a      	strne	r2, [r3, #4]
 8008e68:	e7ec      	b.n	8008e44 <_malloc_r+0xa0>
 8008e6a:	4623      	mov	r3, r4
 8008e6c:	6864      	ldr	r4, [r4, #4]
 8008e6e:	e7b2      	b.n	8008dd6 <_malloc_r+0x32>
 8008e70:	4634      	mov	r4, r6
 8008e72:	6876      	ldr	r6, [r6, #4]
 8008e74:	e7b9      	b.n	8008dea <_malloc_r+0x46>
 8008e76:	230c      	movs	r3, #12
 8008e78:	603b      	str	r3, [r7, #0]
 8008e7a:	4638      	mov	r0, r7
 8008e7c:	f000 f9d4 	bl	8009228 <__malloc_unlock>
 8008e80:	e7a1      	b.n	8008dc6 <_malloc_r+0x22>
 8008e82:	6025      	str	r5, [r4, #0]
 8008e84:	e7de      	b.n	8008e44 <_malloc_r+0xa0>
 8008e86:	bf00      	nop
 8008e88:	20000d1c 	.word	0x20000d1c

08008e8c <__ssputs_r>:
 8008e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e90:	688e      	ldr	r6, [r1, #8]
 8008e92:	429e      	cmp	r6, r3
 8008e94:	4682      	mov	sl, r0
 8008e96:	460c      	mov	r4, r1
 8008e98:	4690      	mov	r8, r2
 8008e9a:	461f      	mov	r7, r3
 8008e9c:	d838      	bhi.n	8008f10 <__ssputs_r+0x84>
 8008e9e:	898a      	ldrh	r2, [r1, #12]
 8008ea0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ea4:	d032      	beq.n	8008f0c <__ssputs_r+0x80>
 8008ea6:	6825      	ldr	r5, [r4, #0]
 8008ea8:	6909      	ldr	r1, [r1, #16]
 8008eaa:	eba5 0901 	sub.w	r9, r5, r1
 8008eae:	6965      	ldr	r5, [r4, #20]
 8008eb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008eb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008eb8:	3301      	adds	r3, #1
 8008eba:	444b      	add	r3, r9
 8008ebc:	106d      	asrs	r5, r5, #1
 8008ebe:	429d      	cmp	r5, r3
 8008ec0:	bf38      	it	cc
 8008ec2:	461d      	movcc	r5, r3
 8008ec4:	0553      	lsls	r3, r2, #21
 8008ec6:	d531      	bpl.n	8008f2c <__ssputs_r+0xa0>
 8008ec8:	4629      	mov	r1, r5
 8008eca:	f7ff ff6b 	bl	8008da4 <_malloc_r>
 8008ece:	4606      	mov	r6, r0
 8008ed0:	b950      	cbnz	r0, 8008ee8 <__ssputs_r+0x5c>
 8008ed2:	230c      	movs	r3, #12
 8008ed4:	f8ca 3000 	str.w	r3, [sl]
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ede:	81a3      	strh	r3, [r4, #12]
 8008ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee8:	6921      	ldr	r1, [r4, #16]
 8008eea:	464a      	mov	r2, r9
 8008eec:	f7ff fb46 	bl	800857c <memcpy>
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008efa:	81a3      	strh	r3, [r4, #12]
 8008efc:	6126      	str	r6, [r4, #16]
 8008efe:	6165      	str	r5, [r4, #20]
 8008f00:	444e      	add	r6, r9
 8008f02:	eba5 0509 	sub.w	r5, r5, r9
 8008f06:	6026      	str	r6, [r4, #0]
 8008f08:	60a5      	str	r5, [r4, #8]
 8008f0a:	463e      	mov	r6, r7
 8008f0c:	42be      	cmp	r6, r7
 8008f0e:	d900      	bls.n	8008f12 <__ssputs_r+0x86>
 8008f10:	463e      	mov	r6, r7
 8008f12:	6820      	ldr	r0, [r4, #0]
 8008f14:	4632      	mov	r2, r6
 8008f16:	4641      	mov	r1, r8
 8008f18:	f000 f966 	bl	80091e8 <memmove>
 8008f1c:	68a3      	ldr	r3, [r4, #8]
 8008f1e:	1b9b      	subs	r3, r3, r6
 8008f20:	60a3      	str	r3, [r4, #8]
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	4433      	add	r3, r6
 8008f26:	6023      	str	r3, [r4, #0]
 8008f28:	2000      	movs	r0, #0
 8008f2a:	e7db      	b.n	8008ee4 <__ssputs_r+0x58>
 8008f2c:	462a      	mov	r2, r5
 8008f2e:	f000 f981 	bl	8009234 <_realloc_r>
 8008f32:	4606      	mov	r6, r0
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d1e1      	bne.n	8008efc <__ssputs_r+0x70>
 8008f38:	6921      	ldr	r1, [r4, #16]
 8008f3a:	4650      	mov	r0, sl
 8008f3c:	f7ff fec6 	bl	8008ccc <_free_r>
 8008f40:	e7c7      	b.n	8008ed2 <__ssputs_r+0x46>
	...

08008f44 <_svfiprintf_r>:
 8008f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f48:	4698      	mov	r8, r3
 8008f4a:	898b      	ldrh	r3, [r1, #12]
 8008f4c:	061b      	lsls	r3, r3, #24
 8008f4e:	b09d      	sub	sp, #116	; 0x74
 8008f50:	4607      	mov	r7, r0
 8008f52:	460d      	mov	r5, r1
 8008f54:	4614      	mov	r4, r2
 8008f56:	d50e      	bpl.n	8008f76 <_svfiprintf_r+0x32>
 8008f58:	690b      	ldr	r3, [r1, #16]
 8008f5a:	b963      	cbnz	r3, 8008f76 <_svfiprintf_r+0x32>
 8008f5c:	2140      	movs	r1, #64	; 0x40
 8008f5e:	f7ff ff21 	bl	8008da4 <_malloc_r>
 8008f62:	6028      	str	r0, [r5, #0]
 8008f64:	6128      	str	r0, [r5, #16]
 8008f66:	b920      	cbnz	r0, 8008f72 <_svfiprintf_r+0x2e>
 8008f68:	230c      	movs	r3, #12
 8008f6a:	603b      	str	r3, [r7, #0]
 8008f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f70:	e0d1      	b.n	8009116 <_svfiprintf_r+0x1d2>
 8008f72:	2340      	movs	r3, #64	; 0x40
 8008f74:	616b      	str	r3, [r5, #20]
 8008f76:	2300      	movs	r3, #0
 8008f78:	9309      	str	r3, [sp, #36]	; 0x24
 8008f7a:	2320      	movs	r3, #32
 8008f7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f80:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f84:	2330      	movs	r3, #48	; 0x30
 8008f86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009130 <_svfiprintf_r+0x1ec>
 8008f8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f8e:	f04f 0901 	mov.w	r9, #1
 8008f92:	4623      	mov	r3, r4
 8008f94:	469a      	mov	sl, r3
 8008f96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f9a:	b10a      	cbz	r2, 8008fa0 <_svfiprintf_r+0x5c>
 8008f9c:	2a25      	cmp	r2, #37	; 0x25
 8008f9e:	d1f9      	bne.n	8008f94 <_svfiprintf_r+0x50>
 8008fa0:	ebba 0b04 	subs.w	fp, sl, r4
 8008fa4:	d00b      	beq.n	8008fbe <_svfiprintf_r+0x7a>
 8008fa6:	465b      	mov	r3, fp
 8008fa8:	4622      	mov	r2, r4
 8008faa:	4629      	mov	r1, r5
 8008fac:	4638      	mov	r0, r7
 8008fae:	f7ff ff6d 	bl	8008e8c <__ssputs_r>
 8008fb2:	3001      	adds	r0, #1
 8008fb4:	f000 80aa 	beq.w	800910c <_svfiprintf_r+0x1c8>
 8008fb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fba:	445a      	add	r2, fp
 8008fbc:	9209      	str	r2, [sp, #36]	; 0x24
 8008fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 80a2 	beq.w	800910c <_svfiprintf_r+0x1c8>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	f04f 32ff 	mov.w	r2, #4294967295
 8008fce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fd2:	f10a 0a01 	add.w	sl, sl, #1
 8008fd6:	9304      	str	r3, [sp, #16]
 8008fd8:	9307      	str	r3, [sp, #28]
 8008fda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fde:	931a      	str	r3, [sp, #104]	; 0x68
 8008fe0:	4654      	mov	r4, sl
 8008fe2:	2205      	movs	r2, #5
 8008fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe8:	4851      	ldr	r0, [pc, #324]	; (8009130 <_svfiprintf_r+0x1ec>)
 8008fea:	f7f7 f901 	bl	80001f0 <memchr>
 8008fee:	9a04      	ldr	r2, [sp, #16]
 8008ff0:	b9d8      	cbnz	r0, 800902a <_svfiprintf_r+0xe6>
 8008ff2:	06d0      	lsls	r0, r2, #27
 8008ff4:	bf44      	itt	mi
 8008ff6:	2320      	movmi	r3, #32
 8008ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ffc:	0711      	lsls	r1, r2, #28
 8008ffe:	bf44      	itt	mi
 8009000:	232b      	movmi	r3, #43	; 0x2b
 8009002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009006:	f89a 3000 	ldrb.w	r3, [sl]
 800900a:	2b2a      	cmp	r3, #42	; 0x2a
 800900c:	d015      	beq.n	800903a <_svfiprintf_r+0xf6>
 800900e:	9a07      	ldr	r2, [sp, #28]
 8009010:	4654      	mov	r4, sl
 8009012:	2000      	movs	r0, #0
 8009014:	f04f 0c0a 	mov.w	ip, #10
 8009018:	4621      	mov	r1, r4
 800901a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800901e:	3b30      	subs	r3, #48	; 0x30
 8009020:	2b09      	cmp	r3, #9
 8009022:	d94e      	bls.n	80090c2 <_svfiprintf_r+0x17e>
 8009024:	b1b0      	cbz	r0, 8009054 <_svfiprintf_r+0x110>
 8009026:	9207      	str	r2, [sp, #28]
 8009028:	e014      	b.n	8009054 <_svfiprintf_r+0x110>
 800902a:	eba0 0308 	sub.w	r3, r0, r8
 800902e:	fa09 f303 	lsl.w	r3, r9, r3
 8009032:	4313      	orrs	r3, r2
 8009034:	9304      	str	r3, [sp, #16]
 8009036:	46a2      	mov	sl, r4
 8009038:	e7d2      	b.n	8008fe0 <_svfiprintf_r+0x9c>
 800903a:	9b03      	ldr	r3, [sp, #12]
 800903c:	1d19      	adds	r1, r3, #4
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	9103      	str	r1, [sp, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	bfbb      	ittet	lt
 8009046:	425b      	neglt	r3, r3
 8009048:	f042 0202 	orrlt.w	r2, r2, #2
 800904c:	9307      	strge	r3, [sp, #28]
 800904e:	9307      	strlt	r3, [sp, #28]
 8009050:	bfb8      	it	lt
 8009052:	9204      	strlt	r2, [sp, #16]
 8009054:	7823      	ldrb	r3, [r4, #0]
 8009056:	2b2e      	cmp	r3, #46	; 0x2e
 8009058:	d10c      	bne.n	8009074 <_svfiprintf_r+0x130>
 800905a:	7863      	ldrb	r3, [r4, #1]
 800905c:	2b2a      	cmp	r3, #42	; 0x2a
 800905e:	d135      	bne.n	80090cc <_svfiprintf_r+0x188>
 8009060:	9b03      	ldr	r3, [sp, #12]
 8009062:	1d1a      	adds	r2, r3, #4
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	9203      	str	r2, [sp, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	bfb8      	it	lt
 800906c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009070:	3402      	adds	r4, #2
 8009072:	9305      	str	r3, [sp, #20]
 8009074:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009140 <_svfiprintf_r+0x1fc>
 8009078:	7821      	ldrb	r1, [r4, #0]
 800907a:	2203      	movs	r2, #3
 800907c:	4650      	mov	r0, sl
 800907e:	f7f7 f8b7 	bl	80001f0 <memchr>
 8009082:	b140      	cbz	r0, 8009096 <_svfiprintf_r+0x152>
 8009084:	2340      	movs	r3, #64	; 0x40
 8009086:	eba0 000a 	sub.w	r0, r0, sl
 800908a:	fa03 f000 	lsl.w	r0, r3, r0
 800908e:	9b04      	ldr	r3, [sp, #16]
 8009090:	4303      	orrs	r3, r0
 8009092:	3401      	adds	r4, #1
 8009094:	9304      	str	r3, [sp, #16]
 8009096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800909a:	4826      	ldr	r0, [pc, #152]	; (8009134 <_svfiprintf_r+0x1f0>)
 800909c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090a0:	2206      	movs	r2, #6
 80090a2:	f7f7 f8a5 	bl	80001f0 <memchr>
 80090a6:	2800      	cmp	r0, #0
 80090a8:	d038      	beq.n	800911c <_svfiprintf_r+0x1d8>
 80090aa:	4b23      	ldr	r3, [pc, #140]	; (8009138 <_svfiprintf_r+0x1f4>)
 80090ac:	bb1b      	cbnz	r3, 80090f6 <_svfiprintf_r+0x1b2>
 80090ae:	9b03      	ldr	r3, [sp, #12]
 80090b0:	3307      	adds	r3, #7
 80090b2:	f023 0307 	bic.w	r3, r3, #7
 80090b6:	3308      	adds	r3, #8
 80090b8:	9303      	str	r3, [sp, #12]
 80090ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090bc:	4433      	add	r3, r6
 80090be:	9309      	str	r3, [sp, #36]	; 0x24
 80090c0:	e767      	b.n	8008f92 <_svfiprintf_r+0x4e>
 80090c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80090c6:	460c      	mov	r4, r1
 80090c8:	2001      	movs	r0, #1
 80090ca:	e7a5      	b.n	8009018 <_svfiprintf_r+0xd4>
 80090cc:	2300      	movs	r3, #0
 80090ce:	3401      	adds	r4, #1
 80090d0:	9305      	str	r3, [sp, #20]
 80090d2:	4619      	mov	r1, r3
 80090d4:	f04f 0c0a 	mov.w	ip, #10
 80090d8:	4620      	mov	r0, r4
 80090da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090de:	3a30      	subs	r2, #48	; 0x30
 80090e0:	2a09      	cmp	r2, #9
 80090e2:	d903      	bls.n	80090ec <_svfiprintf_r+0x1a8>
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d0c5      	beq.n	8009074 <_svfiprintf_r+0x130>
 80090e8:	9105      	str	r1, [sp, #20]
 80090ea:	e7c3      	b.n	8009074 <_svfiprintf_r+0x130>
 80090ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80090f0:	4604      	mov	r4, r0
 80090f2:	2301      	movs	r3, #1
 80090f4:	e7f0      	b.n	80090d8 <_svfiprintf_r+0x194>
 80090f6:	ab03      	add	r3, sp, #12
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	462a      	mov	r2, r5
 80090fc:	4b0f      	ldr	r3, [pc, #60]	; (800913c <_svfiprintf_r+0x1f8>)
 80090fe:	a904      	add	r1, sp, #16
 8009100:	4638      	mov	r0, r7
 8009102:	f7fd ffc9 	bl	8007098 <_printf_float>
 8009106:	1c42      	adds	r2, r0, #1
 8009108:	4606      	mov	r6, r0
 800910a:	d1d6      	bne.n	80090ba <_svfiprintf_r+0x176>
 800910c:	89ab      	ldrh	r3, [r5, #12]
 800910e:	065b      	lsls	r3, r3, #25
 8009110:	f53f af2c 	bmi.w	8008f6c <_svfiprintf_r+0x28>
 8009114:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009116:	b01d      	add	sp, #116	; 0x74
 8009118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911c:	ab03      	add	r3, sp, #12
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	462a      	mov	r2, r5
 8009122:	4b06      	ldr	r3, [pc, #24]	; (800913c <_svfiprintf_r+0x1f8>)
 8009124:	a904      	add	r1, sp, #16
 8009126:	4638      	mov	r0, r7
 8009128:	f7fe fa5a 	bl	80075e0 <_printf_i>
 800912c:	e7eb      	b.n	8009106 <_svfiprintf_r+0x1c2>
 800912e:	bf00      	nop
 8009130:	0800a144 	.word	0x0800a144
 8009134:	0800a14e 	.word	0x0800a14e
 8009138:	08007099 	.word	0x08007099
 800913c:	08008e8d 	.word	0x08008e8d
 8009140:	0800a14a 	.word	0x0800a14a

08009144 <_sbrk_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4d06      	ldr	r5, [pc, #24]	; (8009160 <_sbrk_r+0x1c>)
 8009148:	2300      	movs	r3, #0
 800914a:	4604      	mov	r4, r0
 800914c:	4608      	mov	r0, r1
 800914e:	602b      	str	r3, [r5, #0]
 8009150:	f7f9 f880 	bl	8002254 <_sbrk>
 8009154:	1c43      	adds	r3, r0, #1
 8009156:	d102      	bne.n	800915e <_sbrk_r+0x1a>
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	b103      	cbz	r3, 800915e <_sbrk_r+0x1a>
 800915c:	6023      	str	r3, [r4, #0]
 800915e:	bd38      	pop	{r3, r4, r5, pc}
 8009160:	20000d24 	.word	0x20000d24

08009164 <__assert_func>:
 8009164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009166:	4614      	mov	r4, r2
 8009168:	461a      	mov	r2, r3
 800916a:	4b09      	ldr	r3, [pc, #36]	; (8009190 <__assert_func+0x2c>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4605      	mov	r5, r0
 8009170:	68d8      	ldr	r0, [r3, #12]
 8009172:	b14c      	cbz	r4, 8009188 <__assert_func+0x24>
 8009174:	4b07      	ldr	r3, [pc, #28]	; (8009194 <__assert_func+0x30>)
 8009176:	9100      	str	r1, [sp, #0]
 8009178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800917c:	4906      	ldr	r1, [pc, #24]	; (8009198 <__assert_func+0x34>)
 800917e:	462b      	mov	r3, r5
 8009180:	f000 f80e 	bl	80091a0 <fiprintf>
 8009184:	f000 faac 	bl	80096e0 <abort>
 8009188:	4b04      	ldr	r3, [pc, #16]	; (800919c <__assert_func+0x38>)
 800918a:	461c      	mov	r4, r3
 800918c:	e7f3      	b.n	8009176 <__assert_func+0x12>
 800918e:	bf00      	nop
 8009190:	20000250 	.word	0x20000250
 8009194:	0800a155 	.word	0x0800a155
 8009198:	0800a162 	.word	0x0800a162
 800919c:	0800a190 	.word	0x0800a190

080091a0 <fiprintf>:
 80091a0:	b40e      	push	{r1, r2, r3}
 80091a2:	b503      	push	{r0, r1, lr}
 80091a4:	4601      	mov	r1, r0
 80091a6:	ab03      	add	r3, sp, #12
 80091a8:	4805      	ldr	r0, [pc, #20]	; (80091c0 <fiprintf+0x20>)
 80091aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ae:	6800      	ldr	r0, [r0, #0]
 80091b0:	9301      	str	r3, [sp, #4]
 80091b2:	f000 f897 	bl	80092e4 <_vfiprintf_r>
 80091b6:	b002      	add	sp, #8
 80091b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80091bc:	b003      	add	sp, #12
 80091be:	4770      	bx	lr
 80091c0:	20000250 	.word	0x20000250

080091c4 <__ascii_mbtowc>:
 80091c4:	b082      	sub	sp, #8
 80091c6:	b901      	cbnz	r1, 80091ca <__ascii_mbtowc+0x6>
 80091c8:	a901      	add	r1, sp, #4
 80091ca:	b142      	cbz	r2, 80091de <__ascii_mbtowc+0x1a>
 80091cc:	b14b      	cbz	r3, 80091e2 <__ascii_mbtowc+0x1e>
 80091ce:	7813      	ldrb	r3, [r2, #0]
 80091d0:	600b      	str	r3, [r1, #0]
 80091d2:	7812      	ldrb	r2, [r2, #0]
 80091d4:	1e10      	subs	r0, r2, #0
 80091d6:	bf18      	it	ne
 80091d8:	2001      	movne	r0, #1
 80091da:	b002      	add	sp, #8
 80091dc:	4770      	bx	lr
 80091de:	4610      	mov	r0, r2
 80091e0:	e7fb      	b.n	80091da <__ascii_mbtowc+0x16>
 80091e2:	f06f 0001 	mvn.w	r0, #1
 80091e6:	e7f8      	b.n	80091da <__ascii_mbtowc+0x16>

080091e8 <memmove>:
 80091e8:	4288      	cmp	r0, r1
 80091ea:	b510      	push	{r4, lr}
 80091ec:	eb01 0402 	add.w	r4, r1, r2
 80091f0:	d902      	bls.n	80091f8 <memmove+0x10>
 80091f2:	4284      	cmp	r4, r0
 80091f4:	4623      	mov	r3, r4
 80091f6:	d807      	bhi.n	8009208 <memmove+0x20>
 80091f8:	1e43      	subs	r3, r0, #1
 80091fa:	42a1      	cmp	r1, r4
 80091fc:	d008      	beq.n	8009210 <memmove+0x28>
 80091fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009202:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009206:	e7f8      	b.n	80091fa <memmove+0x12>
 8009208:	4402      	add	r2, r0
 800920a:	4601      	mov	r1, r0
 800920c:	428a      	cmp	r2, r1
 800920e:	d100      	bne.n	8009212 <memmove+0x2a>
 8009210:	bd10      	pop	{r4, pc}
 8009212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009216:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800921a:	e7f7      	b.n	800920c <memmove+0x24>

0800921c <__malloc_lock>:
 800921c:	4801      	ldr	r0, [pc, #4]	; (8009224 <__malloc_lock+0x8>)
 800921e:	f000 bc1f 	b.w	8009a60 <__retarget_lock_acquire_recursive>
 8009222:	bf00      	nop
 8009224:	20000d28 	.word	0x20000d28

08009228 <__malloc_unlock>:
 8009228:	4801      	ldr	r0, [pc, #4]	; (8009230 <__malloc_unlock+0x8>)
 800922a:	f000 bc1a 	b.w	8009a62 <__retarget_lock_release_recursive>
 800922e:	bf00      	nop
 8009230:	20000d28 	.word	0x20000d28

08009234 <_realloc_r>:
 8009234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009238:	4680      	mov	r8, r0
 800923a:	4614      	mov	r4, r2
 800923c:	460e      	mov	r6, r1
 800923e:	b921      	cbnz	r1, 800924a <_realloc_r+0x16>
 8009240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009244:	4611      	mov	r1, r2
 8009246:	f7ff bdad 	b.w	8008da4 <_malloc_r>
 800924a:	b92a      	cbnz	r2, 8009258 <_realloc_r+0x24>
 800924c:	f7ff fd3e 	bl	8008ccc <_free_r>
 8009250:	4625      	mov	r5, r4
 8009252:	4628      	mov	r0, r5
 8009254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009258:	f000 fc6a 	bl	8009b30 <_malloc_usable_size_r>
 800925c:	4284      	cmp	r4, r0
 800925e:	4607      	mov	r7, r0
 8009260:	d802      	bhi.n	8009268 <_realloc_r+0x34>
 8009262:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009266:	d812      	bhi.n	800928e <_realloc_r+0x5a>
 8009268:	4621      	mov	r1, r4
 800926a:	4640      	mov	r0, r8
 800926c:	f7ff fd9a 	bl	8008da4 <_malloc_r>
 8009270:	4605      	mov	r5, r0
 8009272:	2800      	cmp	r0, #0
 8009274:	d0ed      	beq.n	8009252 <_realloc_r+0x1e>
 8009276:	42bc      	cmp	r4, r7
 8009278:	4622      	mov	r2, r4
 800927a:	4631      	mov	r1, r6
 800927c:	bf28      	it	cs
 800927e:	463a      	movcs	r2, r7
 8009280:	f7ff f97c 	bl	800857c <memcpy>
 8009284:	4631      	mov	r1, r6
 8009286:	4640      	mov	r0, r8
 8009288:	f7ff fd20 	bl	8008ccc <_free_r>
 800928c:	e7e1      	b.n	8009252 <_realloc_r+0x1e>
 800928e:	4635      	mov	r5, r6
 8009290:	e7df      	b.n	8009252 <_realloc_r+0x1e>

08009292 <__sfputc_r>:
 8009292:	6893      	ldr	r3, [r2, #8]
 8009294:	3b01      	subs	r3, #1
 8009296:	2b00      	cmp	r3, #0
 8009298:	b410      	push	{r4}
 800929a:	6093      	str	r3, [r2, #8]
 800929c:	da08      	bge.n	80092b0 <__sfputc_r+0x1e>
 800929e:	6994      	ldr	r4, [r2, #24]
 80092a0:	42a3      	cmp	r3, r4
 80092a2:	db01      	blt.n	80092a8 <__sfputc_r+0x16>
 80092a4:	290a      	cmp	r1, #10
 80092a6:	d103      	bne.n	80092b0 <__sfputc_r+0x1e>
 80092a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092ac:	f000 b94a 	b.w	8009544 <__swbuf_r>
 80092b0:	6813      	ldr	r3, [r2, #0]
 80092b2:	1c58      	adds	r0, r3, #1
 80092b4:	6010      	str	r0, [r2, #0]
 80092b6:	7019      	strb	r1, [r3, #0]
 80092b8:	4608      	mov	r0, r1
 80092ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <__sfputs_r>:
 80092c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c2:	4606      	mov	r6, r0
 80092c4:	460f      	mov	r7, r1
 80092c6:	4614      	mov	r4, r2
 80092c8:	18d5      	adds	r5, r2, r3
 80092ca:	42ac      	cmp	r4, r5
 80092cc:	d101      	bne.n	80092d2 <__sfputs_r+0x12>
 80092ce:	2000      	movs	r0, #0
 80092d0:	e007      	b.n	80092e2 <__sfputs_r+0x22>
 80092d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d6:	463a      	mov	r2, r7
 80092d8:	4630      	mov	r0, r6
 80092da:	f7ff ffda 	bl	8009292 <__sfputc_r>
 80092de:	1c43      	adds	r3, r0, #1
 80092e0:	d1f3      	bne.n	80092ca <__sfputs_r+0xa>
 80092e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080092e4 <_vfiprintf_r>:
 80092e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e8:	460d      	mov	r5, r1
 80092ea:	b09d      	sub	sp, #116	; 0x74
 80092ec:	4614      	mov	r4, r2
 80092ee:	4698      	mov	r8, r3
 80092f0:	4606      	mov	r6, r0
 80092f2:	b118      	cbz	r0, 80092fc <_vfiprintf_r+0x18>
 80092f4:	6983      	ldr	r3, [r0, #24]
 80092f6:	b90b      	cbnz	r3, 80092fc <_vfiprintf_r+0x18>
 80092f8:	f000 fb14 	bl	8009924 <__sinit>
 80092fc:	4b89      	ldr	r3, [pc, #548]	; (8009524 <_vfiprintf_r+0x240>)
 80092fe:	429d      	cmp	r5, r3
 8009300:	d11b      	bne.n	800933a <_vfiprintf_r+0x56>
 8009302:	6875      	ldr	r5, [r6, #4]
 8009304:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009306:	07d9      	lsls	r1, r3, #31
 8009308:	d405      	bmi.n	8009316 <_vfiprintf_r+0x32>
 800930a:	89ab      	ldrh	r3, [r5, #12]
 800930c:	059a      	lsls	r2, r3, #22
 800930e:	d402      	bmi.n	8009316 <_vfiprintf_r+0x32>
 8009310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009312:	f000 fba5 	bl	8009a60 <__retarget_lock_acquire_recursive>
 8009316:	89ab      	ldrh	r3, [r5, #12]
 8009318:	071b      	lsls	r3, r3, #28
 800931a:	d501      	bpl.n	8009320 <_vfiprintf_r+0x3c>
 800931c:	692b      	ldr	r3, [r5, #16]
 800931e:	b9eb      	cbnz	r3, 800935c <_vfiprintf_r+0x78>
 8009320:	4629      	mov	r1, r5
 8009322:	4630      	mov	r0, r6
 8009324:	f000 f96e 	bl	8009604 <__swsetup_r>
 8009328:	b1c0      	cbz	r0, 800935c <_vfiprintf_r+0x78>
 800932a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800932c:	07dc      	lsls	r4, r3, #31
 800932e:	d50e      	bpl.n	800934e <_vfiprintf_r+0x6a>
 8009330:	f04f 30ff 	mov.w	r0, #4294967295
 8009334:	b01d      	add	sp, #116	; 0x74
 8009336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800933a:	4b7b      	ldr	r3, [pc, #492]	; (8009528 <_vfiprintf_r+0x244>)
 800933c:	429d      	cmp	r5, r3
 800933e:	d101      	bne.n	8009344 <_vfiprintf_r+0x60>
 8009340:	68b5      	ldr	r5, [r6, #8]
 8009342:	e7df      	b.n	8009304 <_vfiprintf_r+0x20>
 8009344:	4b79      	ldr	r3, [pc, #484]	; (800952c <_vfiprintf_r+0x248>)
 8009346:	429d      	cmp	r5, r3
 8009348:	bf08      	it	eq
 800934a:	68f5      	ldreq	r5, [r6, #12]
 800934c:	e7da      	b.n	8009304 <_vfiprintf_r+0x20>
 800934e:	89ab      	ldrh	r3, [r5, #12]
 8009350:	0598      	lsls	r0, r3, #22
 8009352:	d4ed      	bmi.n	8009330 <_vfiprintf_r+0x4c>
 8009354:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009356:	f000 fb84 	bl	8009a62 <__retarget_lock_release_recursive>
 800935a:	e7e9      	b.n	8009330 <_vfiprintf_r+0x4c>
 800935c:	2300      	movs	r3, #0
 800935e:	9309      	str	r3, [sp, #36]	; 0x24
 8009360:	2320      	movs	r3, #32
 8009362:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009366:	f8cd 800c 	str.w	r8, [sp, #12]
 800936a:	2330      	movs	r3, #48	; 0x30
 800936c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009530 <_vfiprintf_r+0x24c>
 8009370:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009374:	f04f 0901 	mov.w	r9, #1
 8009378:	4623      	mov	r3, r4
 800937a:	469a      	mov	sl, r3
 800937c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009380:	b10a      	cbz	r2, 8009386 <_vfiprintf_r+0xa2>
 8009382:	2a25      	cmp	r2, #37	; 0x25
 8009384:	d1f9      	bne.n	800937a <_vfiprintf_r+0x96>
 8009386:	ebba 0b04 	subs.w	fp, sl, r4
 800938a:	d00b      	beq.n	80093a4 <_vfiprintf_r+0xc0>
 800938c:	465b      	mov	r3, fp
 800938e:	4622      	mov	r2, r4
 8009390:	4629      	mov	r1, r5
 8009392:	4630      	mov	r0, r6
 8009394:	f7ff ff94 	bl	80092c0 <__sfputs_r>
 8009398:	3001      	adds	r0, #1
 800939a:	f000 80aa 	beq.w	80094f2 <_vfiprintf_r+0x20e>
 800939e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093a0:	445a      	add	r2, fp
 80093a2:	9209      	str	r2, [sp, #36]	; 0x24
 80093a4:	f89a 3000 	ldrb.w	r3, [sl]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f000 80a2 	beq.w	80094f2 <_vfiprintf_r+0x20e>
 80093ae:	2300      	movs	r3, #0
 80093b0:	f04f 32ff 	mov.w	r2, #4294967295
 80093b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093b8:	f10a 0a01 	add.w	sl, sl, #1
 80093bc:	9304      	str	r3, [sp, #16]
 80093be:	9307      	str	r3, [sp, #28]
 80093c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093c4:	931a      	str	r3, [sp, #104]	; 0x68
 80093c6:	4654      	mov	r4, sl
 80093c8:	2205      	movs	r2, #5
 80093ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ce:	4858      	ldr	r0, [pc, #352]	; (8009530 <_vfiprintf_r+0x24c>)
 80093d0:	f7f6 ff0e 	bl	80001f0 <memchr>
 80093d4:	9a04      	ldr	r2, [sp, #16]
 80093d6:	b9d8      	cbnz	r0, 8009410 <_vfiprintf_r+0x12c>
 80093d8:	06d1      	lsls	r1, r2, #27
 80093da:	bf44      	itt	mi
 80093dc:	2320      	movmi	r3, #32
 80093de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093e2:	0713      	lsls	r3, r2, #28
 80093e4:	bf44      	itt	mi
 80093e6:	232b      	movmi	r3, #43	; 0x2b
 80093e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093ec:	f89a 3000 	ldrb.w	r3, [sl]
 80093f0:	2b2a      	cmp	r3, #42	; 0x2a
 80093f2:	d015      	beq.n	8009420 <_vfiprintf_r+0x13c>
 80093f4:	9a07      	ldr	r2, [sp, #28]
 80093f6:	4654      	mov	r4, sl
 80093f8:	2000      	movs	r0, #0
 80093fa:	f04f 0c0a 	mov.w	ip, #10
 80093fe:	4621      	mov	r1, r4
 8009400:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009404:	3b30      	subs	r3, #48	; 0x30
 8009406:	2b09      	cmp	r3, #9
 8009408:	d94e      	bls.n	80094a8 <_vfiprintf_r+0x1c4>
 800940a:	b1b0      	cbz	r0, 800943a <_vfiprintf_r+0x156>
 800940c:	9207      	str	r2, [sp, #28]
 800940e:	e014      	b.n	800943a <_vfiprintf_r+0x156>
 8009410:	eba0 0308 	sub.w	r3, r0, r8
 8009414:	fa09 f303 	lsl.w	r3, r9, r3
 8009418:	4313      	orrs	r3, r2
 800941a:	9304      	str	r3, [sp, #16]
 800941c:	46a2      	mov	sl, r4
 800941e:	e7d2      	b.n	80093c6 <_vfiprintf_r+0xe2>
 8009420:	9b03      	ldr	r3, [sp, #12]
 8009422:	1d19      	adds	r1, r3, #4
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	9103      	str	r1, [sp, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	bfbb      	ittet	lt
 800942c:	425b      	neglt	r3, r3
 800942e:	f042 0202 	orrlt.w	r2, r2, #2
 8009432:	9307      	strge	r3, [sp, #28]
 8009434:	9307      	strlt	r3, [sp, #28]
 8009436:	bfb8      	it	lt
 8009438:	9204      	strlt	r2, [sp, #16]
 800943a:	7823      	ldrb	r3, [r4, #0]
 800943c:	2b2e      	cmp	r3, #46	; 0x2e
 800943e:	d10c      	bne.n	800945a <_vfiprintf_r+0x176>
 8009440:	7863      	ldrb	r3, [r4, #1]
 8009442:	2b2a      	cmp	r3, #42	; 0x2a
 8009444:	d135      	bne.n	80094b2 <_vfiprintf_r+0x1ce>
 8009446:	9b03      	ldr	r3, [sp, #12]
 8009448:	1d1a      	adds	r2, r3, #4
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	9203      	str	r2, [sp, #12]
 800944e:	2b00      	cmp	r3, #0
 8009450:	bfb8      	it	lt
 8009452:	f04f 33ff 	movlt.w	r3, #4294967295
 8009456:	3402      	adds	r4, #2
 8009458:	9305      	str	r3, [sp, #20]
 800945a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009540 <_vfiprintf_r+0x25c>
 800945e:	7821      	ldrb	r1, [r4, #0]
 8009460:	2203      	movs	r2, #3
 8009462:	4650      	mov	r0, sl
 8009464:	f7f6 fec4 	bl	80001f0 <memchr>
 8009468:	b140      	cbz	r0, 800947c <_vfiprintf_r+0x198>
 800946a:	2340      	movs	r3, #64	; 0x40
 800946c:	eba0 000a 	sub.w	r0, r0, sl
 8009470:	fa03 f000 	lsl.w	r0, r3, r0
 8009474:	9b04      	ldr	r3, [sp, #16]
 8009476:	4303      	orrs	r3, r0
 8009478:	3401      	adds	r4, #1
 800947a:	9304      	str	r3, [sp, #16]
 800947c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009480:	482c      	ldr	r0, [pc, #176]	; (8009534 <_vfiprintf_r+0x250>)
 8009482:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009486:	2206      	movs	r2, #6
 8009488:	f7f6 feb2 	bl	80001f0 <memchr>
 800948c:	2800      	cmp	r0, #0
 800948e:	d03f      	beq.n	8009510 <_vfiprintf_r+0x22c>
 8009490:	4b29      	ldr	r3, [pc, #164]	; (8009538 <_vfiprintf_r+0x254>)
 8009492:	bb1b      	cbnz	r3, 80094dc <_vfiprintf_r+0x1f8>
 8009494:	9b03      	ldr	r3, [sp, #12]
 8009496:	3307      	adds	r3, #7
 8009498:	f023 0307 	bic.w	r3, r3, #7
 800949c:	3308      	adds	r3, #8
 800949e:	9303      	str	r3, [sp, #12]
 80094a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094a2:	443b      	add	r3, r7
 80094a4:	9309      	str	r3, [sp, #36]	; 0x24
 80094a6:	e767      	b.n	8009378 <_vfiprintf_r+0x94>
 80094a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80094ac:	460c      	mov	r4, r1
 80094ae:	2001      	movs	r0, #1
 80094b0:	e7a5      	b.n	80093fe <_vfiprintf_r+0x11a>
 80094b2:	2300      	movs	r3, #0
 80094b4:	3401      	adds	r4, #1
 80094b6:	9305      	str	r3, [sp, #20]
 80094b8:	4619      	mov	r1, r3
 80094ba:	f04f 0c0a 	mov.w	ip, #10
 80094be:	4620      	mov	r0, r4
 80094c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094c4:	3a30      	subs	r2, #48	; 0x30
 80094c6:	2a09      	cmp	r2, #9
 80094c8:	d903      	bls.n	80094d2 <_vfiprintf_r+0x1ee>
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d0c5      	beq.n	800945a <_vfiprintf_r+0x176>
 80094ce:	9105      	str	r1, [sp, #20]
 80094d0:	e7c3      	b.n	800945a <_vfiprintf_r+0x176>
 80094d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80094d6:	4604      	mov	r4, r0
 80094d8:	2301      	movs	r3, #1
 80094da:	e7f0      	b.n	80094be <_vfiprintf_r+0x1da>
 80094dc:	ab03      	add	r3, sp, #12
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	462a      	mov	r2, r5
 80094e2:	4b16      	ldr	r3, [pc, #88]	; (800953c <_vfiprintf_r+0x258>)
 80094e4:	a904      	add	r1, sp, #16
 80094e6:	4630      	mov	r0, r6
 80094e8:	f7fd fdd6 	bl	8007098 <_printf_float>
 80094ec:	4607      	mov	r7, r0
 80094ee:	1c78      	adds	r0, r7, #1
 80094f0:	d1d6      	bne.n	80094a0 <_vfiprintf_r+0x1bc>
 80094f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094f4:	07d9      	lsls	r1, r3, #31
 80094f6:	d405      	bmi.n	8009504 <_vfiprintf_r+0x220>
 80094f8:	89ab      	ldrh	r3, [r5, #12]
 80094fa:	059a      	lsls	r2, r3, #22
 80094fc:	d402      	bmi.n	8009504 <_vfiprintf_r+0x220>
 80094fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009500:	f000 faaf 	bl	8009a62 <__retarget_lock_release_recursive>
 8009504:	89ab      	ldrh	r3, [r5, #12]
 8009506:	065b      	lsls	r3, r3, #25
 8009508:	f53f af12 	bmi.w	8009330 <_vfiprintf_r+0x4c>
 800950c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800950e:	e711      	b.n	8009334 <_vfiprintf_r+0x50>
 8009510:	ab03      	add	r3, sp, #12
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	462a      	mov	r2, r5
 8009516:	4b09      	ldr	r3, [pc, #36]	; (800953c <_vfiprintf_r+0x258>)
 8009518:	a904      	add	r1, sp, #16
 800951a:	4630      	mov	r0, r6
 800951c:	f7fe f860 	bl	80075e0 <_printf_i>
 8009520:	e7e4      	b.n	80094ec <_vfiprintf_r+0x208>
 8009522:	bf00      	nop
 8009524:	0800a2bc 	.word	0x0800a2bc
 8009528:	0800a2dc 	.word	0x0800a2dc
 800952c:	0800a29c 	.word	0x0800a29c
 8009530:	0800a144 	.word	0x0800a144
 8009534:	0800a14e 	.word	0x0800a14e
 8009538:	08007099 	.word	0x08007099
 800953c:	080092c1 	.word	0x080092c1
 8009540:	0800a14a 	.word	0x0800a14a

08009544 <__swbuf_r>:
 8009544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009546:	460e      	mov	r6, r1
 8009548:	4614      	mov	r4, r2
 800954a:	4605      	mov	r5, r0
 800954c:	b118      	cbz	r0, 8009556 <__swbuf_r+0x12>
 800954e:	6983      	ldr	r3, [r0, #24]
 8009550:	b90b      	cbnz	r3, 8009556 <__swbuf_r+0x12>
 8009552:	f000 f9e7 	bl	8009924 <__sinit>
 8009556:	4b21      	ldr	r3, [pc, #132]	; (80095dc <__swbuf_r+0x98>)
 8009558:	429c      	cmp	r4, r3
 800955a:	d12b      	bne.n	80095b4 <__swbuf_r+0x70>
 800955c:	686c      	ldr	r4, [r5, #4]
 800955e:	69a3      	ldr	r3, [r4, #24]
 8009560:	60a3      	str	r3, [r4, #8]
 8009562:	89a3      	ldrh	r3, [r4, #12]
 8009564:	071a      	lsls	r2, r3, #28
 8009566:	d52f      	bpl.n	80095c8 <__swbuf_r+0x84>
 8009568:	6923      	ldr	r3, [r4, #16]
 800956a:	b36b      	cbz	r3, 80095c8 <__swbuf_r+0x84>
 800956c:	6923      	ldr	r3, [r4, #16]
 800956e:	6820      	ldr	r0, [r4, #0]
 8009570:	1ac0      	subs	r0, r0, r3
 8009572:	6963      	ldr	r3, [r4, #20]
 8009574:	b2f6      	uxtb	r6, r6
 8009576:	4283      	cmp	r3, r0
 8009578:	4637      	mov	r7, r6
 800957a:	dc04      	bgt.n	8009586 <__swbuf_r+0x42>
 800957c:	4621      	mov	r1, r4
 800957e:	4628      	mov	r0, r5
 8009580:	f000 f93c 	bl	80097fc <_fflush_r>
 8009584:	bb30      	cbnz	r0, 80095d4 <__swbuf_r+0x90>
 8009586:	68a3      	ldr	r3, [r4, #8]
 8009588:	3b01      	subs	r3, #1
 800958a:	60a3      	str	r3, [r4, #8]
 800958c:	6823      	ldr	r3, [r4, #0]
 800958e:	1c5a      	adds	r2, r3, #1
 8009590:	6022      	str	r2, [r4, #0]
 8009592:	701e      	strb	r6, [r3, #0]
 8009594:	6963      	ldr	r3, [r4, #20]
 8009596:	3001      	adds	r0, #1
 8009598:	4283      	cmp	r3, r0
 800959a:	d004      	beq.n	80095a6 <__swbuf_r+0x62>
 800959c:	89a3      	ldrh	r3, [r4, #12]
 800959e:	07db      	lsls	r3, r3, #31
 80095a0:	d506      	bpl.n	80095b0 <__swbuf_r+0x6c>
 80095a2:	2e0a      	cmp	r6, #10
 80095a4:	d104      	bne.n	80095b0 <__swbuf_r+0x6c>
 80095a6:	4621      	mov	r1, r4
 80095a8:	4628      	mov	r0, r5
 80095aa:	f000 f927 	bl	80097fc <_fflush_r>
 80095ae:	b988      	cbnz	r0, 80095d4 <__swbuf_r+0x90>
 80095b0:	4638      	mov	r0, r7
 80095b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095b4:	4b0a      	ldr	r3, [pc, #40]	; (80095e0 <__swbuf_r+0x9c>)
 80095b6:	429c      	cmp	r4, r3
 80095b8:	d101      	bne.n	80095be <__swbuf_r+0x7a>
 80095ba:	68ac      	ldr	r4, [r5, #8]
 80095bc:	e7cf      	b.n	800955e <__swbuf_r+0x1a>
 80095be:	4b09      	ldr	r3, [pc, #36]	; (80095e4 <__swbuf_r+0xa0>)
 80095c0:	429c      	cmp	r4, r3
 80095c2:	bf08      	it	eq
 80095c4:	68ec      	ldreq	r4, [r5, #12]
 80095c6:	e7ca      	b.n	800955e <__swbuf_r+0x1a>
 80095c8:	4621      	mov	r1, r4
 80095ca:	4628      	mov	r0, r5
 80095cc:	f000 f81a 	bl	8009604 <__swsetup_r>
 80095d0:	2800      	cmp	r0, #0
 80095d2:	d0cb      	beq.n	800956c <__swbuf_r+0x28>
 80095d4:	f04f 37ff 	mov.w	r7, #4294967295
 80095d8:	e7ea      	b.n	80095b0 <__swbuf_r+0x6c>
 80095da:	bf00      	nop
 80095dc:	0800a2bc 	.word	0x0800a2bc
 80095e0:	0800a2dc 	.word	0x0800a2dc
 80095e4:	0800a29c 	.word	0x0800a29c

080095e8 <__ascii_wctomb>:
 80095e8:	b149      	cbz	r1, 80095fe <__ascii_wctomb+0x16>
 80095ea:	2aff      	cmp	r2, #255	; 0xff
 80095ec:	bf85      	ittet	hi
 80095ee:	238a      	movhi	r3, #138	; 0x8a
 80095f0:	6003      	strhi	r3, [r0, #0]
 80095f2:	700a      	strbls	r2, [r1, #0]
 80095f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80095f8:	bf98      	it	ls
 80095fa:	2001      	movls	r0, #1
 80095fc:	4770      	bx	lr
 80095fe:	4608      	mov	r0, r1
 8009600:	4770      	bx	lr
	...

08009604 <__swsetup_r>:
 8009604:	4b32      	ldr	r3, [pc, #200]	; (80096d0 <__swsetup_r+0xcc>)
 8009606:	b570      	push	{r4, r5, r6, lr}
 8009608:	681d      	ldr	r5, [r3, #0]
 800960a:	4606      	mov	r6, r0
 800960c:	460c      	mov	r4, r1
 800960e:	b125      	cbz	r5, 800961a <__swsetup_r+0x16>
 8009610:	69ab      	ldr	r3, [r5, #24]
 8009612:	b913      	cbnz	r3, 800961a <__swsetup_r+0x16>
 8009614:	4628      	mov	r0, r5
 8009616:	f000 f985 	bl	8009924 <__sinit>
 800961a:	4b2e      	ldr	r3, [pc, #184]	; (80096d4 <__swsetup_r+0xd0>)
 800961c:	429c      	cmp	r4, r3
 800961e:	d10f      	bne.n	8009640 <__swsetup_r+0x3c>
 8009620:	686c      	ldr	r4, [r5, #4]
 8009622:	89a3      	ldrh	r3, [r4, #12]
 8009624:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009628:	0719      	lsls	r1, r3, #28
 800962a:	d42c      	bmi.n	8009686 <__swsetup_r+0x82>
 800962c:	06dd      	lsls	r5, r3, #27
 800962e:	d411      	bmi.n	8009654 <__swsetup_r+0x50>
 8009630:	2309      	movs	r3, #9
 8009632:	6033      	str	r3, [r6, #0]
 8009634:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009638:	81a3      	strh	r3, [r4, #12]
 800963a:	f04f 30ff 	mov.w	r0, #4294967295
 800963e:	e03e      	b.n	80096be <__swsetup_r+0xba>
 8009640:	4b25      	ldr	r3, [pc, #148]	; (80096d8 <__swsetup_r+0xd4>)
 8009642:	429c      	cmp	r4, r3
 8009644:	d101      	bne.n	800964a <__swsetup_r+0x46>
 8009646:	68ac      	ldr	r4, [r5, #8]
 8009648:	e7eb      	b.n	8009622 <__swsetup_r+0x1e>
 800964a:	4b24      	ldr	r3, [pc, #144]	; (80096dc <__swsetup_r+0xd8>)
 800964c:	429c      	cmp	r4, r3
 800964e:	bf08      	it	eq
 8009650:	68ec      	ldreq	r4, [r5, #12]
 8009652:	e7e6      	b.n	8009622 <__swsetup_r+0x1e>
 8009654:	0758      	lsls	r0, r3, #29
 8009656:	d512      	bpl.n	800967e <__swsetup_r+0x7a>
 8009658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800965a:	b141      	cbz	r1, 800966e <__swsetup_r+0x6a>
 800965c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009660:	4299      	cmp	r1, r3
 8009662:	d002      	beq.n	800966a <__swsetup_r+0x66>
 8009664:	4630      	mov	r0, r6
 8009666:	f7ff fb31 	bl	8008ccc <_free_r>
 800966a:	2300      	movs	r3, #0
 800966c:	6363      	str	r3, [r4, #52]	; 0x34
 800966e:	89a3      	ldrh	r3, [r4, #12]
 8009670:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009674:	81a3      	strh	r3, [r4, #12]
 8009676:	2300      	movs	r3, #0
 8009678:	6063      	str	r3, [r4, #4]
 800967a:	6923      	ldr	r3, [r4, #16]
 800967c:	6023      	str	r3, [r4, #0]
 800967e:	89a3      	ldrh	r3, [r4, #12]
 8009680:	f043 0308 	orr.w	r3, r3, #8
 8009684:	81a3      	strh	r3, [r4, #12]
 8009686:	6923      	ldr	r3, [r4, #16]
 8009688:	b94b      	cbnz	r3, 800969e <__swsetup_r+0x9a>
 800968a:	89a3      	ldrh	r3, [r4, #12]
 800968c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009694:	d003      	beq.n	800969e <__swsetup_r+0x9a>
 8009696:	4621      	mov	r1, r4
 8009698:	4630      	mov	r0, r6
 800969a:	f000 fa09 	bl	8009ab0 <__smakebuf_r>
 800969e:	89a0      	ldrh	r0, [r4, #12]
 80096a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096a4:	f010 0301 	ands.w	r3, r0, #1
 80096a8:	d00a      	beq.n	80096c0 <__swsetup_r+0xbc>
 80096aa:	2300      	movs	r3, #0
 80096ac:	60a3      	str	r3, [r4, #8]
 80096ae:	6963      	ldr	r3, [r4, #20]
 80096b0:	425b      	negs	r3, r3
 80096b2:	61a3      	str	r3, [r4, #24]
 80096b4:	6923      	ldr	r3, [r4, #16]
 80096b6:	b943      	cbnz	r3, 80096ca <__swsetup_r+0xc6>
 80096b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096bc:	d1ba      	bne.n	8009634 <__swsetup_r+0x30>
 80096be:	bd70      	pop	{r4, r5, r6, pc}
 80096c0:	0781      	lsls	r1, r0, #30
 80096c2:	bf58      	it	pl
 80096c4:	6963      	ldrpl	r3, [r4, #20]
 80096c6:	60a3      	str	r3, [r4, #8]
 80096c8:	e7f4      	b.n	80096b4 <__swsetup_r+0xb0>
 80096ca:	2000      	movs	r0, #0
 80096cc:	e7f7      	b.n	80096be <__swsetup_r+0xba>
 80096ce:	bf00      	nop
 80096d0:	20000250 	.word	0x20000250
 80096d4:	0800a2bc 	.word	0x0800a2bc
 80096d8:	0800a2dc 	.word	0x0800a2dc
 80096dc:	0800a29c 	.word	0x0800a29c

080096e0 <abort>:
 80096e0:	b508      	push	{r3, lr}
 80096e2:	2006      	movs	r0, #6
 80096e4:	f000 fa54 	bl	8009b90 <raise>
 80096e8:	2001      	movs	r0, #1
 80096ea:	f7f8 fd3b 	bl	8002164 <_exit>
	...

080096f0 <__sflush_r>:
 80096f0:	898a      	ldrh	r2, [r1, #12]
 80096f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f6:	4605      	mov	r5, r0
 80096f8:	0710      	lsls	r0, r2, #28
 80096fa:	460c      	mov	r4, r1
 80096fc:	d458      	bmi.n	80097b0 <__sflush_r+0xc0>
 80096fe:	684b      	ldr	r3, [r1, #4]
 8009700:	2b00      	cmp	r3, #0
 8009702:	dc05      	bgt.n	8009710 <__sflush_r+0x20>
 8009704:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009706:	2b00      	cmp	r3, #0
 8009708:	dc02      	bgt.n	8009710 <__sflush_r+0x20>
 800970a:	2000      	movs	r0, #0
 800970c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009710:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009712:	2e00      	cmp	r6, #0
 8009714:	d0f9      	beq.n	800970a <__sflush_r+0x1a>
 8009716:	2300      	movs	r3, #0
 8009718:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800971c:	682f      	ldr	r7, [r5, #0]
 800971e:	602b      	str	r3, [r5, #0]
 8009720:	d032      	beq.n	8009788 <__sflush_r+0x98>
 8009722:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009724:	89a3      	ldrh	r3, [r4, #12]
 8009726:	075a      	lsls	r2, r3, #29
 8009728:	d505      	bpl.n	8009736 <__sflush_r+0x46>
 800972a:	6863      	ldr	r3, [r4, #4]
 800972c:	1ac0      	subs	r0, r0, r3
 800972e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009730:	b10b      	cbz	r3, 8009736 <__sflush_r+0x46>
 8009732:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009734:	1ac0      	subs	r0, r0, r3
 8009736:	2300      	movs	r3, #0
 8009738:	4602      	mov	r2, r0
 800973a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800973c:	6a21      	ldr	r1, [r4, #32]
 800973e:	4628      	mov	r0, r5
 8009740:	47b0      	blx	r6
 8009742:	1c43      	adds	r3, r0, #1
 8009744:	89a3      	ldrh	r3, [r4, #12]
 8009746:	d106      	bne.n	8009756 <__sflush_r+0x66>
 8009748:	6829      	ldr	r1, [r5, #0]
 800974a:	291d      	cmp	r1, #29
 800974c:	d82c      	bhi.n	80097a8 <__sflush_r+0xb8>
 800974e:	4a2a      	ldr	r2, [pc, #168]	; (80097f8 <__sflush_r+0x108>)
 8009750:	40ca      	lsrs	r2, r1
 8009752:	07d6      	lsls	r6, r2, #31
 8009754:	d528      	bpl.n	80097a8 <__sflush_r+0xb8>
 8009756:	2200      	movs	r2, #0
 8009758:	6062      	str	r2, [r4, #4]
 800975a:	04d9      	lsls	r1, r3, #19
 800975c:	6922      	ldr	r2, [r4, #16]
 800975e:	6022      	str	r2, [r4, #0]
 8009760:	d504      	bpl.n	800976c <__sflush_r+0x7c>
 8009762:	1c42      	adds	r2, r0, #1
 8009764:	d101      	bne.n	800976a <__sflush_r+0x7a>
 8009766:	682b      	ldr	r3, [r5, #0]
 8009768:	b903      	cbnz	r3, 800976c <__sflush_r+0x7c>
 800976a:	6560      	str	r0, [r4, #84]	; 0x54
 800976c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800976e:	602f      	str	r7, [r5, #0]
 8009770:	2900      	cmp	r1, #0
 8009772:	d0ca      	beq.n	800970a <__sflush_r+0x1a>
 8009774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009778:	4299      	cmp	r1, r3
 800977a:	d002      	beq.n	8009782 <__sflush_r+0x92>
 800977c:	4628      	mov	r0, r5
 800977e:	f7ff faa5 	bl	8008ccc <_free_r>
 8009782:	2000      	movs	r0, #0
 8009784:	6360      	str	r0, [r4, #52]	; 0x34
 8009786:	e7c1      	b.n	800970c <__sflush_r+0x1c>
 8009788:	6a21      	ldr	r1, [r4, #32]
 800978a:	2301      	movs	r3, #1
 800978c:	4628      	mov	r0, r5
 800978e:	47b0      	blx	r6
 8009790:	1c41      	adds	r1, r0, #1
 8009792:	d1c7      	bne.n	8009724 <__sflush_r+0x34>
 8009794:	682b      	ldr	r3, [r5, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d0c4      	beq.n	8009724 <__sflush_r+0x34>
 800979a:	2b1d      	cmp	r3, #29
 800979c:	d001      	beq.n	80097a2 <__sflush_r+0xb2>
 800979e:	2b16      	cmp	r3, #22
 80097a0:	d101      	bne.n	80097a6 <__sflush_r+0xb6>
 80097a2:	602f      	str	r7, [r5, #0]
 80097a4:	e7b1      	b.n	800970a <__sflush_r+0x1a>
 80097a6:	89a3      	ldrh	r3, [r4, #12]
 80097a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ac:	81a3      	strh	r3, [r4, #12]
 80097ae:	e7ad      	b.n	800970c <__sflush_r+0x1c>
 80097b0:	690f      	ldr	r7, [r1, #16]
 80097b2:	2f00      	cmp	r7, #0
 80097b4:	d0a9      	beq.n	800970a <__sflush_r+0x1a>
 80097b6:	0793      	lsls	r3, r2, #30
 80097b8:	680e      	ldr	r6, [r1, #0]
 80097ba:	bf08      	it	eq
 80097bc:	694b      	ldreq	r3, [r1, #20]
 80097be:	600f      	str	r7, [r1, #0]
 80097c0:	bf18      	it	ne
 80097c2:	2300      	movne	r3, #0
 80097c4:	eba6 0807 	sub.w	r8, r6, r7
 80097c8:	608b      	str	r3, [r1, #8]
 80097ca:	f1b8 0f00 	cmp.w	r8, #0
 80097ce:	dd9c      	ble.n	800970a <__sflush_r+0x1a>
 80097d0:	6a21      	ldr	r1, [r4, #32]
 80097d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097d4:	4643      	mov	r3, r8
 80097d6:	463a      	mov	r2, r7
 80097d8:	4628      	mov	r0, r5
 80097da:	47b0      	blx	r6
 80097dc:	2800      	cmp	r0, #0
 80097de:	dc06      	bgt.n	80097ee <__sflush_r+0xfe>
 80097e0:	89a3      	ldrh	r3, [r4, #12]
 80097e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097e6:	81a3      	strh	r3, [r4, #12]
 80097e8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ec:	e78e      	b.n	800970c <__sflush_r+0x1c>
 80097ee:	4407      	add	r7, r0
 80097f0:	eba8 0800 	sub.w	r8, r8, r0
 80097f4:	e7e9      	b.n	80097ca <__sflush_r+0xda>
 80097f6:	bf00      	nop
 80097f8:	20400001 	.word	0x20400001

080097fc <_fflush_r>:
 80097fc:	b538      	push	{r3, r4, r5, lr}
 80097fe:	690b      	ldr	r3, [r1, #16]
 8009800:	4605      	mov	r5, r0
 8009802:	460c      	mov	r4, r1
 8009804:	b913      	cbnz	r3, 800980c <_fflush_r+0x10>
 8009806:	2500      	movs	r5, #0
 8009808:	4628      	mov	r0, r5
 800980a:	bd38      	pop	{r3, r4, r5, pc}
 800980c:	b118      	cbz	r0, 8009816 <_fflush_r+0x1a>
 800980e:	6983      	ldr	r3, [r0, #24]
 8009810:	b90b      	cbnz	r3, 8009816 <_fflush_r+0x1a>
 8009812:	f000 f887 	bl	8009924 <__sinit>
 8009816:	4b14      	ldr	r3, [pc, #80]	; (8009868 <_fflush_r+0x6c>)
 8009818:	429c      	cmp	r4, r3
 800981a:	d11b      	bne.n	8009854 <_fflush_r+0x58>
 800981c:	686c      	ldr	r4, [r5, #4]
 800981e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d0ef      	beq.n	8009806 <_fflush_r+0xa>
 8009826:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009828:	07d0      	lsls	r0, r2, #31
 800982a:	d404      	bmi.n	8009836 <_fflush_r+0x3a>
 800982c:	0599      	lsls	r1, r3, #22
 800982e:	d402      	bmi.n	8009836 <_fflush_r+0x3a>
 8009830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009832:	f000 f915 	bl	8009a60 <__retarget_lock_acquire_recursive>
 8009836:	4628      	mov	r0, r5
 8009838:	4621      	mov	r1, r4
 800983a:	f7ff ff59 	bl	80096f0 <__sflush_r>
 800983e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009840:	07da      	lsls	r2, r3, #31
 8009842:	4605      	mov	r5, r0
 8009844:	d4e0      	bmi.n	8009808 <_fflush_r+0xc>
 8009846:	89a3      	ldrh	r3, [r4, #12]
 8009848:	059b      	lsls	r3, r3, #22
 800984a:	d4dd      	bmi.n	8009808 <_fflush_r+0xc>
 800984c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800984e:	f000 f908 	bl	8009a62 <__retarget_lock_release_recursive>
 8009852:	e7d9      	b.n	8009808 <_fflush_r+0xc>
 8009854:	4b05      	ldr	r3, [pc, #20]	; (800986c <_fflush_r+0x70>)
 8009856:	429c      	cmp	r4, r3
 8009858:	d101      	bne.n	800985e <_fflush_r+0x62>
 800985a:	68ac      	ldr	r4, [r5, #8]
 800985c:	e7df      	b.n	800981e <_fflush_r+0x22>
 800985e:	4b04      	ldr	r3, [pc, #16]	; (8009870 <_fflush_r+0x74>)
 8009860:	429c      	cmp	r4, r3
 8009862:	bf08      	it	eq
 8009864:	68ec      	ldreq	r4, [r5, #12]
 8009866:	e7da      	b.n	800981e <_fflush_r+0x22>
 8009868:	0800a2bc 	.word	0x0800a2bc
 800986c:	0800a2dc 	.word	0x0800a2dc
 8009870:	0800a29c 	.word	0x0800a29c

08009874 <std>:
 8009874:	2300      	movs	r3, #0
 8009876:	b510      	push	{r4, lr}
 8009878:	4604      	mov	r4, r0
 800987a:	e9c0 3300 	strd	r3, r3, [r0]
 800987e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009882:	6083      	str	r3, [r0, #8]
 8009884:	8181      	strh	r1, [r0, #12]
 8009886:	6643      	str	r3, [r0, #100]	; 0x64
 8009888:	81c2      	strh	r2, [r0, #14]
 800988a:	6183      	str	r3, [r0, #24]
 800988c:	4619      	mov	r1, r3
 800988e:	2208      	movs	r2, #8
 8009890:	305c      	adds	r0, #92	; 0x5c
 8009892:	f7fd fb59 	bl	8006f48 <memset>
 8009896:	4b05      	ldr	r3, [pc, #20]	; (80098ac <std+0x38>)
 8009898:	6263      	str	r3, [r4, #36]	; 0x24
 800989a:	4b05      	ldr	r3, [pc, #20]	; (80098b0 <std+0x3c>)
 800989c:	62a3      	str	r3, [r4, #40]	; 0x28
 800989e:	4b05      	ldr	r3, [pc, #20]	; (80098b4 <std+0x40>)
 80098a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098a2:	4b05      	ldr	r3, [pc, #20]	; (80098b8 <std+0x44>)
 80098a4:	6224      	str	r4, [r4, #32]
 80098a6:	6323      	str	r3, [r4, #48]	; 0x30
 80098a8:	bd10      	pop	{r4, pc}
 80098aa:	bf00      	nop
 80098ac:	08009bc9 	.word	0x08009bc9
 80098b0:	08009beb 	.word	0x08009beb
 80098b4:	08009c23 	.word	0x08009c23
 80098b8:	08009c47 	.word	0x08009c47

080098bc <_cleanup_r>:
 80098bc:	4901      	ldr	r1, [pc, #4]	; (80098c4 <_cleanup_r+0x8>)
 80098be:	f000 b8af 	b.w	8009a20 <_fwalk_reent>
 80098c2:	bf00      	nop
 80098c4:	080097fd 	.word	0x080097fd

080098c8 <__sfmoreglue>:
 80098c8:	b570      	push	{r4, r5, r6, lr}
 80098ca:	2268      	movs	r2, #104	; 0x68
 80098cc:	1e4d      	subs	r5, r1, #1
 80098ce:	4355      	muls	r5, r2
 80098d0:	460e      	mov	r6, r1
 80098d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80098d6:	f7ff fa65 	bl	8008da4 <_malloc_r>
 80098da:	4604      	mov	r4, r0
 80098dc:	b140      	cbz	r0, 80098f0 <__sfmoreglue+0x28>
 80098de:	2100      	movs	r1, #0
 80098e0:	e9c0 1600 	strd	r1, r6, [r0]
 80098e4:	300c      	adds	r0, #12
 80098e6:	60a0      	str	r0, [r4, #8]
 80098e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80098ec:	f7fd fb2c 	bl	8006f48 <memset>
 80098f0:	4620      	mov	r0, r4
 80098f2:	bd70      	pop	{r4, r5, r6, pc}

080098f4 <__sfp_lock_acquire>:
 80098f4:	4801      	ldr	r0, [pc, #4]	; (80098fc <__sfp_lock_acquire+0x8>)
 80098f6:	f000 b8b3 	b.w	8009a60 <__retarget_lock_acquire_recursive>
 80098fa:	bf00      	nop
 80098fc:	20000d29 	.word	0x20000d29

08009900 <__sfp_lock_release>:
 8009900:	4801      	ldr	r0, [pc, #4]	; (8009908 <__sfp_lock_release+0x8>)
 8009902:	f000 b8ae 	b.w	8009a62 <__retarget_lock_release_recursive>
 8009906:	bf00      	nop
 8009908:	20000d29 	.word	0x20000d29

0800990c <__sinit_lock_acquire>:
 800990c:	4801      	ldr	r0, [pc, #4]	; (8009914 <__sinit_lock_acquire+0x8>)
 800990e:	f000 b8a7 	b.w	8009a60 <__retarget_lock_acquire_recursive>
 8009912:	bf00      	nop
 8009914:	20000d2a 	.word	0x20000d2a

08009918 <__sinit_lock_release>:
 8009918:	4801      	ldr	r0, [pc, #4]	; (8009920 <__sinit_lock_release+0x8>)
 800991a:	f000 b8a2 	b.w	8009a62 <__retarget_lock_release_recursive>
 800991e:	bf00      	nop
 8009920:	20000d2a 	.word	0x20000d2a

08009924 <__sinit>:
 8009924:	b510      	push	{r4, lr}
 8009926:	4604      	mov	r4, r0
 8009928:	f7ff fff0 	bl	800990c <__sinit_lock_acquire>
 800992c:	69a3      	ldr	r3, [r4, #24]
 800992e:	b11b      	cbz	r3, 8009938 <__sinit+0x14>
 8009930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009934:	f7ff bff0 	b.w	8009918 <__sinit_lock_release>
 8009938:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800993c:	6523      	str	r3, [r4, #80]	; 0x50
 800993e:	4b13      	ldr	r3, [pc, #76]	; (800998c <__sinit+0x68>)
 8009940:	4a13      	ldr	r2, [pc, #76]	; (8009990 <__sinit+0x6c>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	62a2      	str	r2, [r4, #40]	; 0x28
 8009946:	42a3      	cmp	r3, r4
 8009948:	bf04      	itt	eq
 800994a:	2301      	moveq	r3, #1
 800994c:	61a3      	streq	r3, [r4, #24]
 800994e:	4620      	mov	r0, r4
 8009950:	f000 f820 	bl	8009994 <__sfp>
 8009954:	6060      	str	r0, [r4, #4]
 8009956:	4620      	mov	r0, r4
 8009958:	f000 f81c 	bl	8009994 <__sfp>
 800995c:	60a0      	str	r0, [r4, #8]
 800995e:	4620      	mov	r0, r4
 8009960:	f000 f818 	bl	8009994 <__sfp>
 8009964:	2200      	movs	r2, #0
 8009966:	60e0      	str	r0, [r4, #12]
 8009968:	2104      	movs	r1, #4
 800996a:	6860      	ldr	r0, [r4, #4]
 800996c:	f7ff ff82 	bl	8009874 <std>
 8009970:	68a0      	ldr	r0, [r4, #8]
 8009972:	2201      	movs	r2, #1
 8009974:	2109      	movs	r1, #9
 8009976:	f7ff ff7d 	bl	8009874 <std>
 800997a:	68e0      	ldr	r0, [r4, #12]
 800997c:	2202      	movs	r2, #2
 800997e:	2112      	movs	r1, #18
 8009980:	f7ff ff78 	bl	8009874 <std>
 8009984:	2301      	movs	r3, #1
 8009986:	61a3      	str	r3, [r4, #24]
 8009988:	e7d2      	b.n	8009930 <__sinit+0xc>
 800998a:	bf00      	nop
 800998c:	08009f24 	.word	0x08009f24
 8009990:	080098bd 	.word	0x080098bd

08009994 <__sfp>:
 8009994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009996:	4607      	mov	r7, r0
 8009998:	f7ff ffac 	bl	80098f4 <__sfp_lock_acquire>
 800999c:	4b1e      	ldr	r3, [pc, #120]	; (8009a18 <__sfp+0x84>)
 800999e:	681e      	ldr	r6, [r3, #0]
 80099a0:	69b3      	ldr	r3, [r6, #24]
 80099a2:	b913      	cbnz	r3, 80099aa <__sfp+0x16>
 80099a4:	4630      	mov	r0, r6
 80099a6:	f7ff ffbd 	bl	8009924 <__sinit>
 80099aa:	3648      	adds	r6, #72	; 0x48
 80099ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80099b0:	3b01      	subs	r3, #1
 80099b2:	d503      	bpl.n	80099bc <__sfp+0x28>
 80099b4:	6833      	ldr	r3, [r6, #0]
 80099b6:	b30b      	cbz	r3, 80099fc <__sfp+0x68>
 80099b8:	6836      	ldr	r6, [r6, #0]
 80099ba:	e7f7      	b.n	80099ac <__sfp+0x18>
 80099bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80099c0:	b9d5      	cbnz	r5, 80099f8 <__sfp+0x64>
 80099c2:	4b16      	ldr	r3, [pc, #88]	; (8009a1c <__sfp+0x88>)
 80099c4:	60e3      	str	r3, [r4, #12]
 80099c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099ca:	6665      	str	r5, [r4, #100]	; 0x64
 80099cc:	f000 f847 	bl	8009a5e <__retarget_lock_init_recursive>
 80099d0:	f7ff ff96 	bl	8009900 <__sfp_lock_release>
 80099d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80099d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80099dc:	6025      	str	r5, [r4, #0]
 80099de:	61a5      	str	r5, [r4, #24]
 80099e0:	2208      	movs	r2, #8
 80099e2:	4629      	mov	r1, r5
 80099e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80099e8:	f7fd faae 	bl	8006f48 <memset>
 80099ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80099f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80099f4:	4620      	mov	r0, r4
 80099f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099f8:	3468      	adds	r4, #104	; 0x68
 80099fa:	e7d9      	b.n	80099b0 <__sfp+0x1c>
 80099fc:	2104      	movs	r1, #4
 80099fe:	4638      	mov	r0, r7
 8009a00:	f7ff ff62 	bl	80098c8 <__sfmoreglue>
 8009a04:	4604      	mov	r4, r0
 8009a06:	6030      	str	r0, [r6, #0]
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d1d5      	bne.n	80099b8 <__sfp+0x24>
 8009a0c:	f7ff ff78 	bl	8009900 <__sfp_lock_release>
 8009a10:	230c      	movs	r3, #12
 8009a12:	603b      	str	r3, [r7, #0]
 8009a14:	e7ee      	b.n	80099f4 <__sfp+0x60>
 8009a16:	bf00      	nop
 8009a18:	08009f24 	.word	0x08009f24
 8009a1c:	ffff0001 	.word	0xffff0001

08009a20 <_fwalk_reent>:
 8009a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a24:	4606      	mov	r6, r0
 8009a26:	4688      	mov	r8, r1
 8009a28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a2c:	2700      	movs	r7, #0
 8009a2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a32:	f1b9 0901 	subs.w	r9, r9, #1
 8009a36:	d505      	bpl.n	8009a44 <_fwalk_reent+0x24>
 8009a38:	6824      	ldr	r4, [r4, #0]
 8009a3a:	2c00      	cmp	r4, #0
 8009a3c:	d1f7      	bne.n	8009a2e <_fwalk_reent+0xe>
 8009a3e:	4638      	mov	r0, r7
 8009a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a44:	89ab      	ldrh	r3, [r5, #12]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d907      	bls.n	8009a5a <_fwalk_reent+0x3a>
 8009a4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	d003      	beq.n	8009a5a <_fwalk_reent+0x3a>
 8009a52:	4629      	mov	r1, r5
 8009a54:	4630      	mov	r0, r6
 8009a56:	47c0      	blx	r8
 8009a58:	4307      	orrs	r7, r0
 8009a5a:	3568      	adds	r5, #104	; 0x68
 8009a5c:	e7e9      	b.n	8009a32 <_fwalk_reent+0x12>

08009a5e <__retarget_lock_init_recursive>:
 8009a5e:	4770      	bx	lr

08009a60 <__retarget_lock_acquire_recursive>:
 8009a60:	4770      	bx	lr

08009a62 <__retarget_lock_release_recursive>:
 8009a62:	4770      	bx	lr

08009a64 <__swhatbuf_r>:
 8009a64:	b570      	push	{r4, r5, r6, lr}
 8009a66:	460e      	mov	r6, r1
 8009a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a6c:	2900      	cmp	r1, #0
 8009a6e:	b096      	sub	sp, #88	; 0x58
 8009a70:	4614      	mov	r4, r2
 8009a72:	461d      	mov	r5, r3
 8009a74:	da08      	bge.n	8009a88 <__swhatbuf_r+0x24>
 8009a76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	602a      	str	r2, [r5, #0]
 8009a7e:	061a      	lsls	r2, r3, #24
 8009a80:	d410      	bmi.n	8009aa4 <__swhatbuf_r+0x40>
 8009a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a86:	e00e      	b.n	8009aa6 <__swhatbuf_r+0x42>
 8009a88:	466a      	mov	r2, sp
 8009a8a:	f000 f903 	bl	8009c94 <_fstat_r>
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	dbf1      	blt.n	8009a76 <__swhatbuf_r+0x12>
 8009a92:	9a01      	ldr	r2, [sp, #4]
 8009a94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a9c:	425a      	negs	r2, r3
 8009a9e:	415a      	adcs	r2, r3
 8009aa0:	602a      	str	r2, [r5, #0]
 8009aa2:	e7ee      	b.n	8009a82 <__swhatbuf_r+0x1e>
 8009aa4:	2340      	movs	r3, #64	; 0x40
 8009aa6:	2000      	movs	r0, #0
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	b016      	add	sp, #88	; 0x58
 8009aac:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ab0 <__smakebuf_r>:
 8009ab0:	898b      	ldrh	r3, [r1, #12]
 8009ab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ab4:	079d      	lsls	r5, r3, #30
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	460c      	mov	r4, r1
 8009aba:	d507      	bpl.n	8009acc <__smakebuf_r+0x1c>
 8009abc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ac0:	6023      	str	r3, [r4, #0]
 8009ac2:	6123      	str	r3, [r4, #16]
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	6163      	str	r3, [r4, #20]
 8009ac8:	b002      	add	sp, #8
 8009aca:	bd70      	pop	{r4, r5, r6, pc}
 8009acc:	ab01      	add	r3, sp, #4
 8009ace:	466a      	mov	r2, sp
 8009ad0:	f7ff ffc8 	bl	8009a64 <__swhatbuf_r>
 8009ad4:	9900      	ldr	r1, [sp, #0]
 8009ad6:	4605      	mov	r5, r0
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f7ff f963 	bl	8008da4 <_malloc_r>
 8009ade:	b948      	cbnz	r0, 8009af4 <__smakebuf_r+0x44>
 8009ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ae4:	059a      	lsls	r2, r3, #22
 8009ae6:	d4ef      	bmi.n	8009ac8 <__smakebuf_r+0x18>
 8009ae8:	f023 0303 	bic.w	r3, r3, #3
 8009aec:	f043 0302 	orr.w	r3, r3, #2
 8009af0:	81a3      	strh	r3, [r4, #12]
 8009af2:	e7e3      	b.n	8009abc <__smakebuf_r+0xc>
 8009af4:	4b0d      	ldr	r3, [pc, #52]	; (8009b2c <__smakebuf_r+0x7c>)
 8009af6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009af8:	89a3      	ldrh	r3, [r4, #12]
 8009afa:	6020      	str	r0, [r4, #0]
 8009afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b00:	81a3      	strh	r3, [r4, #12]
 8009b02:	9b00      	ldr	r3, [sp, #0]
 8009b04:	6163      	str	r3, [r4, #20]
 8009b06:	9b01      	ldr	r3, [sp, #4]
 8009b08:	6120      	str	r0, [r4, #16]
 8009b0a:	b15b      	cbz	r3, 8009b24 <__smakebuf_r+0x74>
 8009b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b10:	4630      	mov	r0, r6
 8009b12:	f000 f8d1 	bl	8009cb8 <_isatty_r>
 8009b16:	b128      	cbz	r0, 8009b24 <__smakebuf_r+0x74>
 8009b18:	89a3      	ldrh	r3, [r4, #12]
 8009b1a:	f023 0303 	bic.w	r3, r3, #3
 8009b1e:	f043 0301 	orr.w	r3, r3, #1
 8009b22:	81a3      	strh	r3, [r4, #12]
 8009b24:	89a0      	ldrh	r0, [r4, #12]
 8009b26:	4305      	orrs	r5, r0
 8009b28:	81a5      	strh	r5, [r4, #12]
 8009b2a:	e7cd      	b.n	8009ac8 <__smakebuf_r+0x18>
 8009b2c:	080098bd 	.word	0x080098bd

08009b30 <_malloc_usable_size_r>:
 8009b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b34:	1f18      	subs	r0, r3, #4
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	bfbc      	itt	lt
 8009b3a:	580b      	ldrlt	r3, [r1, r0]
 8009b3c:	18c0      	addlt	r0, r0, r3
 8009b3e:	4770      	bx	lr

08009b40 <_raise_r>:
 8009b40:	291f      	cmp	r1, #31
 8009b42:	b538      	push	{r3, r4, r5, lr}
 8009b44:	4604      	mov	r4, r0
 8009b46:	460d      	mov	r5, r1
 8009b48:	d904      	bls.n	8009b54 <_raise_r+0x14>
 8009b4a:	2316      	movs	r3, #22
 8009b4c:	6003      	str	r3, [r0, #0]
 8009b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b52:	bd38      	pop	{r3, r4, r5, pc}
 8009b54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b56:	b112      	cbz	r2, 8009b5e <_raise_r+0x1e>
 8009b58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b5c:	b94b      	cbnz	r3, 8009b72 <_raise_r+0x32>
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f000 f830 	bl	8009bc4 <_getpid_r>
 8009b64:	462a      	mov	r2, r5
 8009b66:	4601      	mov	r1, r0
 8009b68:	4620      	mov	r0, r4
 8009b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b6e:	f000 b817 	b.w	8009ba0 <_kill_r>
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d00a      	beq.n	8009b8c <_raise_r+0x4c>
 8009b76:	1c59      	adds	r1, r3, #1
 8009b78:	d103      	bne.n	8009b82 <_raise_r+0x42>
 8009b7a:	2316      	movs	r3, #22
 8009b7c:	6003      	str	r3, [r0, #0]
 8009b7e:	2001      	movs	r0, #1
 8009b80:	e7e7      	b.n	8009b52 <_raise_r+0x12>
 8009b82:	2400      	movs	r4, #0
 8009b84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b88:	4628      	mov	r0, r5
 8009b8a:	4798      	blx	r3
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	e7e0      	b.n	8009b52 <_raise_r+0x12>

08009b90 <raise>:
 8009b90:	4b02      	ldr	r3, [pc, #8]	; (8009b9c <raise+0xc>)
 8009b92:	4601      	mov	r1, r0
 8009b94:	6818      	ldr	r0, [r3, #0]
 8009b96:	f7ff bfd3 	b.w	8009b40 <_raise_r>
 8009b9a:	bf00      	nop
 8009b9c:	20000250 	.word	0x20000250

08009ba0 <_kill_r>:
 8009ba0:	b538      	push	{r3, r4, r5, lr}
 8009ba2:	4d07      	ldr	r5, [pc, #28]	; (8009bc0 <_kill_r+0x20>)
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	4608      	mov	r0, r1
 8009baa:	4611      	mov	r1, r2
 8009bac:	602b      	str	r3, [r5, #0]
 8009bae:	f7f8 fac9 	bl	8002144 <_kill>
 8009bb2:	1c43      	adds	r3, r0, #1
 8009bb4:	d102      	bne.n	8009bbc <_kill_r+0x1c>
 8009bb6:	682b      	ldr	r3, [r5, #0]
 8009bb8:	b103      	cbz	r3, 8009bbc <_kill_r+0x1c>
 8009bba:	6023      	str	r3, [r4, #0]
 8009bbc:	bd38      	pop	{r3, r4, r5, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20000d24 	.word	0x20000d24

08009bc4 <_getpid_r>:
 8009bc4:	f7f8 bab6 	b.w	8002134 <_getpid>

08009bc8 <__sread>:
 8009bc8:	b510      	push	{r4, lr}
 8009bca:	460c      	mov	r4, r1
 8009bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bd0:	f000 f894 	bl	8009cfc <_read_r>
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	bfab      	itete	ge
 8009bd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009bda:	89a3      	ldrhlt	r3, [r4, #12]
 8009bdc:	181b      	addge	r3, r3, r0
 8009bde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009be2:	bfac      	ite	ge
 8009be4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009be6:	81a3      	strhlt	r3, [r4, #12]
 8009be8:	bd10      	pop	{r4, pc}

08009bea <__swrite>:
 8009bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bee:	461f      	mov	r7, r3
 8009bf0:	898b      	ldrh	r3, [r1, #12]
 8009bf2:	05db      	lsls	r3, r3, #23
 8009bf4:	4605      	mov	r5, r0
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	4616      	mov	r6, r2
 8009bfa:	d505      	bpl.n	8009c08 <__swrite+0x1e>
 8009bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c00:	2302      	movs	r3, #2
 8009c02:	2200      	movs	r2, #0
 8009c04:	f000 f868 	bl	8009cd8 <_lseek_r>
 8009c08:	89a3      	ldrh	r3, [r4, #12]
 8009c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c12:	81a3      	strh	r3, [r4, #12]
 8009c14:	4632      	mov	r2, r6
 8009c16:	463b      	mov	r3, r7
 8009c18:	4628      	mov	r0, r5
 8009c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c1e:	f000 b817 	b.w	8009c50 <_write_r>

08009c22 <__sseek>:
 8009c22:	b510      	push	{r4, lr}
 8009c24:	460c      	mov	r4, r1
 8009c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c2a:	f000 f855 	bl	8009cd8 <_lseek_r>
 8009c2e:	1c43      	adds	r3, r0, #1
 8009c30:	89a3      	ldrh	r3, [r4, #12]
 8009c32:	bf15      	itete	ne
 8009c34:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c3e:	81a3      	strheq	r3, [r4, #12]
 8009c40:	bf18      	it	ne
 8009c42:	81a3      	strhne	r3, [r4, #12]
 8009c44:	bd10      	pop	{r4, pc}

08009c46 <__sclose>:
 8009c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c4a:	f000 b813 	b.w	8009c74 <_close_r>
	...

08009c50 <_write_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4d07      	ldr	r5, [pc, #28]	; (8009c70 <_write_r+0x20>)
 8009c54:	4604      	mov	r4, r0
 8009c56:	4608      	mov	r0, r1
 8009c58:	4611      	mov	r1, r2
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	602a      	str	r2, [r5, #0]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	f7f8 faa7 	bl	80021b2 <_write>
 8009c64:	1c43      	adds	r3, r0, #1
 8009c66:	d102      	bne.n	8009c6e <_write_r+0x1e>
 8009c68:	682b      	ldr	r3, [r5, #0]
 8009c6a:	b103      	cbz	r3, 8009c6e <_write_r+0x1e>
 8009c6c:	6023      	str	r3, [r4, #0]
 8009c6e:	bd38      	pop	{r3, r4, r5, pc}
 8009c70:	20000d24 	.word	0x20000d24

08009c74 <_close_r>:
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	4d06      	ldr	r5, [pc, #24]	; (8009c90 <_close_r+0x1c>)
 8009c78:	2300      	movs	r3, #0
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	4608      	mov	r0, r1
 8009c7e:	602b      	str	r3, [r5, #0]
 8009c80:	f7f8 fab3 	bl	80021ea <_close>
 8009c84:	1c43      	adds	r3, r0, #1
 8009c86:	d102      	bne.n	8009c8e <_close_r+0x1a>
 8009c88:	682b      	ldr	r3, [r5, #0]
 8009c8a:	b103      	cbz	r3, 8009c8e <_close_r+0x1a>
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	bd38      	pop	{r3, r4, r5, pc}
 8009c90:	20000d24 	.word	0x20000d24

08009c94 <_fstat_r>:
 8009c94:	b538      	push	{r3, r4, r5, lr}
 8009c96:	4d07      	ldr	r5, [pc, #28]	; (8009cb4 <_fstat_r+0x20>)
 8009c98:	2300      	movs	r3, #0
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	4608      	mov	r0, r1
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	602b      	str	r3, [r5, #0]
 8009ca2:	f7f8 faae 	bl	8002202 <_fstat>
 8009ca6:	1c43      	adds	r3, r0, #1
 8009ca8:	d102      	bne.n	8009cb0 <_fstat_r+0x1c>
 8009caa:	682b      	ldr	r3, [r5, #0]
 8009cac:	b103      	cbz	r3, 8009cb0 <_fstat_r+0x1c>
 8009cae:	6023      	str	r3, [r4, #0]
 8009cb0:	bd38      	pop	{r3, r4, r5, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20000d24 	.word	0x20000d24

08009cb8 <_isatty_r>:
 8009cb8:	b538      	push	{r3, r4, r5, lr}
 8009cba:	4d06      	ldr	r5, [pc, #24]	; (8009cd4 <_isatty_r+0x1c>)
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	4608      	mov	r0, r1
 8009cc2:	602b      	str	r3, [r5, #0]
 8009cc4:	f7f8 faad 	bl	8002222 <_isatty>
 8009cc8:	1c43      	adds	r3, r0, #1
 8009cca:	d102      	bne.n	8009cd2 <_isatty_r+0x1a>
 8009ccc:	682b      	ldr	r3, [r5, #0]
 8009cce:	b103      	cbz	r3, 8009cd2 <_isatty_r+0x1a>
 8009cd0:	6023      	str	r3, [r4, #0]
 8009cd2:	bd38      	pop	{r3, r4, r5, pc}
 8009cd4:	20000d24 	.word	0x20000d24

08009cd8 <_lseek_r>:
 8009cd8:	b538      	push	{r3, r4, r5, lr}
 8009cda:	4d07      	ldr	r5, [pc, #28]	; (8009cf8 <_lseek_r+0x20>)
 8009cdc:	4604      	mov	r4, r0
 8009cde:	4608      	mov	r0, r1
 8009ce0:	4611      	mov	r1, r2
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	602a      	str	r2, [r5, #0]
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	f7f8 faa6 	bl	8002238 <_lseek>
 8009cec:	1c43      	adds	r3, r0, #1
 8009cee:	d102      	bne.n	8009cf6 <_lseek_r+0x1e>
 8009cf0:	682b      	ldr	r3, [r5, #0]
 8009cf2:	b103      	cbz	r3, 8009cf6 <_lseek_r+0x1e>
 8009cf4:	6023      	str	r3, [r4, #0]
 8009cf6:	bd38      	pop	{r3, r4, r5, pc}
 8009cf8:	20000d24 	.word	0x20000d24

08009cfc <_read_r>:
 8009cfc:	b538      	push	{r3, r4, r5, lr}
 8009cfe:	4d07      	ldr	r5, [pc, #28]	; (8009d1c <_read_r+0x20>)
 8009d00:	4604      	mov	r4, r0
 8009d02:	4608      	mov	r0, r1
 8009d04:	4611      	mov	r1, r2
 8009d06:	2200      	movs	r2, #0
 8009d08:	602a      	str	r2, [r5, #0]
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	f7f8 fa34 	bl	8002178 <_read>
 8009d10:	1c43      	adds	r3, r0, #1
 8009d12:	d102      	bne.n	8009d1a <_read_r+0x1e>
 8009d14:	682b      	ldr	r3, [r5, #0]
 8009d16:	b103      	cbz	r3, 8009d1a <_read_r+0x1e>
 8009d18:	6023      	str	r3, [r4, #0]
 8009d1a:	bd38      	pop	{r3, r4, r5, pc}
 8009d1c:	20000d24 	.word	0x20000d24

08009d20 <_init>:
 8009d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d22:	bf00      	nop
 8009d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d26:	bc08      	pop	{r3}
 8009d28:	469e      	mov	lr, r3
 8009d2a:	4770      	bx	lr

08009d2c <_fini>:
 8009d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2e:	bf00      	nop
 8009d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d32:	bc08      	pop	{r3}
 8009d34:	469e      	mov	lr, r3
 8009d36:	4770      	bx	lr
