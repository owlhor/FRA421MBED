
F411_MultiSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000421c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080043b4  080043b4  000143b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043cc  080043cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080043cc  080043cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043d4  080043d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043d4  080043d4  000143d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043d8  080043d8  000143d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080043dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000010  080043e8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  080043e8  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa99  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e76  00000000  00000000  0002fad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00031950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00032780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c0d  00000000  00000000  00033508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f422  00000000  00000000  00049115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bfcf  00000000  00000000  00058537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4506  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d70  00000000  00000000  000e4558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800439c 	.word	0x0800439c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	0800439c 	.word	0x0800439c

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295
 8000854:	f04f 30ff 	movne.w	r0, #4294967295
 8000858:	f000 b974 	b.w	8000b44 <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9d08      	ldr	r5, [sp, #32]
 800087a:	4604      	mov	r4, r0
 800087c:	468e      	mov	lr, r1
 800087e:	2b00      	cmp	r3, #0
 8000880:	d14d      	bne.n	800091e <__udivmoddi4+0xaa>
 8000882:	428a      	cmp	r2, r1
 8000884:	4694      	mov	ip, r2
 8000886:	d969      	bls.n	800095c <__udivmoddi4+0xe8>
 8000888:	fab2 f282 	clz	r2, r2
 800088c:	b152      	cbz	r2, 80008a4 <__udivmoddi4+0x30>
 800088e:	fa01 f302 	lsl.w	r3, r1, r2
 8000892:	f1c2 0120 	rsb	r1, r2, #32
 8000896:	fa20 f101 	lsr.w	r1, r0, r1
 800089a:	fa0c fc02 	lsl.w	ip, ip, r2
 800089e:	ea41 0e03 	orr.w	lr, r1, r3
 80008a2:	4094      	lsls	r4, r2
 80008a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a8:	0c21      	lsrs	r1, r4, #16
 80008aa:	fbbe f6f8 	udiv	r6, lr, r8
 80008ae:	fa1f f78c 	uxth.w	r7, ip
 80008b2:	fb08 e316 	mls	r3, r8, r6, lr
 80008b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ba:	fb06 f107 	mul.w	r1, r6, r7
 80008be:	4299      	cmp	r1, r3
 80008c0:	d90a      	bls.n	80008d8 <__udivmoddi4+0x64>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ca:	f080 811f 	bcs.w	8000b0c <__udivmoddi4+0x298>
 80008ce:	4299      	cmp	r1, r3
 80008d0:	f240 811c 	bls.w	8000b0c <__udivmoddi4+0x298>
 80008d4:	3e02      	subs	r6, #2
 80008d6:	4463      	add	r3, ip
 80008d8:	1a5b      	subs	r3, r3, r1
 80008da:	b2a4      	uxth	r4, r4
 80008dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008e0:	fb08 3310 	mls	r3, r8, r0, r3
 80008e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008e8:	fb00 f707 	mul.w	r7, r0, r7
 80008ec:	42a7      	cmp	r7, r4
 80008ee:	d90a      	bls.n	8000906 <__udivmoddi4+0x92>
 80008f0:	eb1c 0404 	adds.w	r4, ip, r4
 80008f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008f8:	f080 810a 	bcs.w	8000b10 <__udivmoddi4+0x29c>
 80008fc:	42a7      	cmp	r7, r4
 80008fe:	f240 8107 	bls.w	8000b10 <__udivmoddi4+0x29c>
 8000902:	4464      	add	r4, ip
 8000904:	3802      	subs	r0, #2
 8000906:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800090a:	1be4      	subs	r4, r4, r7
 800090c:	2600      	movs	r6, #0
 800090e:	b11d      	cbz	r5, 8000918 <__udivmoddi4+0xa4>
 8000910:	40d4      	lsrs	r4, r2
 8000912:	2300      	movs	r3, #0
 8000914:	e9c5 4300 	strd	r4, r3, [r5]
 8000918:	4631      	mov	r1, r6
 800091a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091e:	428b      	cmp	r3, r1
 8000920:	d909      	bls.n	8000936 <__udivmoddi4+0xc2>
 8000922:	2d00      	cmp	r5, #0
 8000924:	f000 80ef 	beq.w	8000b06 <__udivmoddi4+0x292>
 8000928:	2600      	movs	r6, #0
 800092a:	e9c5 0100 	strd	r0, r1, [r5]
 800092e:	4630      	mov	r0, r6
 8000930:	4631      	mov	r1, r6
 8000932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000936:	fab3 f683 	clz	r6, r3
 800093a:	2e00      	cmp	r6, #0
 800093c:	d14a      	bne.n	80009d4 <__udivmoddi4+0x160>
 800093e:	428b      	cmp	r3, r1
 8000940:	d302      	bcc.n	8000948 <__udivmoddi4+0xd4>
 8000942:	4282      	cmp	r2, r0
 8000944:	f200 80f9 	bhi.w	8000b3a <__udivmoddi4+0x2c6>
 8000948:	1a84      	subs	r4, r0, r2
 800094a:	eb61 0303 	sbc.w	r3, r1, r3
 800094e:	2001      	movs	r0, #1
 8000950:	469e      	mov	lr, r3
 8000952:	2d00      	cmp	r5, #0
 8000954:	d0e0      	beq.n	8000918 <__udivmoddi4+0xa4>
 8000956:	e9c5 4e00 	strd	r4, lr, [r5]
 800095a:	e7dd      	b.n	8000918 <__udivmoddi4+0xa4>
 800095c:	b902      	cbnz	r2, 8000960 <__udivmoddi4+0xec>
 800095e:	deff      	udf	#255	; 0xff
 8000960:	fab2 f282 	clz	r2, r2
 8000964:	2a00      	cmp	r2, #0
 8000966:	f040 8092 	bne.w	8000a8e <__udivmoddi4+0x21a>
 800096a:	eba1 010c 	sub.w	r1, r1, ip
 800096e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	2601      	movs	r6, #1
 8000978:	0c20      	lsrs	r0, r4, #16
 800097a:	fbb1 f3f7 	udiv	r3, r1, r7
 800097e:	fb07 1113 	mls	r1, r7, r3, r1
 8000982:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000986:	fb0e f003 	mul.w	r0, lr, r3
 800098a:	4288      	cmp	r0, r1
 800098c:	d908      	bls.n	80009a0 <__udivmoddi4+0x12c>
 800098e:	eb1c 0101 	adds.w	r1, ip, r1
 8000992:	f103 38ff 	add.w	r8, r3, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0x12a>
 8000998:	4288      	cmp	r0, r1
 800099a:	f200 80cb 	bhi.w	8000b34 <__udivmoddi4+0x2c0>
 800099e:	4643      	mov	r3, r8
 80009a0:	1a09      	subs	r1, r1, r0
 80009a2:	b2a4      	uxth	r4, r4
 80009a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009a8:	fb07 1110 	mls	r1, r7, r0, r1
 80009ac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009b0:	fb0e fe00 	mul.w	lr, lr, r0
 80009b4:	45a6      	cmp	lr, r4
 80009b6:	d908      	bls.n	80009ca <__udivmoddi4+0x156>
 80009b8:	eb1c 0404 	adds.w	r4, ip, r4
 80009bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80009c0:	d202      	bcs.n	80009c8 <__udivmoddi4+0x154>
 80009c2:	45a6      	cmp	lr, r4
 80009c4:	f200 80bb 	bhi.w	8000b3e <__udivmoddi4+0x2ca>
 80009c8:	4608      	mov	r0, r1
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009d2:	e79c      	b.n	800090e <__udivmoddi4+0x9a>
 80009d4:	f1c6 0720 	rsb	r7, r6, #32
 80009d8:	40b3      	lsls	r3, r6
 80009da:	fa22 fc07 	lsr.w	ip, r2, r7
 80009de:	ea4c 0c03 	orr.w	ip, ip, r3
 80009e2:	fa20 f407 	lsr.w	r4, r0, r7
 80009e6:	fa01 f306 	lsl.w	r3, r1, r6
 80009ea:	431c      	orrs	r4, r3
 80009ec:	40f9      	lsrs	r1, r7
 80009ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009f2:	fa00 f306 	lsl.w	r3, r0, r6
 80009f6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009fa:	0c20      	lsrs	r0, r4, #16
 80009fc:	fa1f fe8c 	uxth.w	lr, ip
 8000a00:	fb09 1118 	mls	r1, r9, r8, r1
 8000a04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a08:	fb08 f00e 	mul.w	r0, r8, lr
 8000a0c:	4288      	cmp	r0, r1
 8000a0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a12:	d90b      	bls.n	8000a2c <__udivmoddi4+0x1b8>
 8000a14:	eb1c 0101 	adds.w	r1, ip, r1
 8000a18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a1c:	f080 8088 	bcs.w	8000b30 <__udivmoddi4+0x2bc>
 8000a20:	4288      	cmp	r0, r1
 8000a22:	f240 8085 	bls.w	8000b30 <__udivmoddi4+0x2bc>
 8000a26:	f1a8 0802 	sub.w	r8, r8, #2
 8000a2a:	4461      	add	r1, ip
 8000a2c:	1a09      	subs	r1, r1, r0
 8000a2e:	b2a4      	uxth	r4, r4
 8000a30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a34:	fb09 1110 	mls	r1, r9, r0, r1
 8000a38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a40:	458e      	cmp	lr, r1
 8000a42:	d908      	bls.n	8000a56 <__udivmoddi4+0x1e2>
 8000a44:	eb1c 0101 	adds.w	r1, ip, r1
 8000a48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a4c:	d26c      	bcs.n	8000b28 <__udivmoddi4+0x2b4>
 8000a4e:	458e      	cmp	lr, r1
 8000a50:	d96a      	bls.n	8000b28 <__udivmoddi4+0x2b4>
 8000a52:	3802      	subs	r0, #2
 8000a54:	4461      	add	r1, ip
 8000a56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a5e:	eba1 010e 	sub.w	r1, r1, lr
 8000a62:	42a1      	cmp	r1, r4
 8000a64:	46c8      	mov	r8, r9
 8000a66:	46a6      	mov	lr, r4
 8000a68:	d356      	bcc.n	8000b18 <__udivmoddi4+0x2a4>
 8000a6a:	d053      	beq.n	8000b14 <__udivmoddi4+0x2a0>
 8000a6c:	b15d      	cbz	r5, 8000a86 <__udivmoddi4+0x212>
 8000a6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a72:	eb61 010e 	sbc.w	r1, r1, lr
 8000a76:	fa01 f707 	lsl.w	r7, r1, r7
 8000a7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a7e:	40f1      	lsrs	r1, r6
 8000a80:	431f      	orrs	r7, r3
 8000a82:	e9c5 7100 	strd	r7, r1, [r5]
 8000a86:	2600      	movs	r6, #0
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	f1c2 0320 	rsb	r3, r2, #32
 8000a92:	40d8      	lsrs	r0, r3
 8000a94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a98:	fa21 f303 	lsr.w	r3, r1, r3
 8000a9c:	4091      	lsls	r1, r2
 8000a9e:	4301      	orrs	r1, r0
 8000aa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000aac:	fb07 3610 	mls	r6, r7, r0, r3
 8000ab0:	0c0b      	lsrs	r3, r1, #16
 8000ab2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ab6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aba:	429e      	cmp	r6, r3
 8000abc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x260>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aca:	d22f      	bcs.n	8000b2c <__udivmoddi4+0x2b8>
 8000acc:	429e      	cmp	r6, r3
 8000ace:	d92d      	bls.n	8000b2c <__udivmoddi4+0x2b8>
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	4463      	add	r3, ip
 8000ad4:	1b9b      	subs	r3, r3, r6
 8000ad6:	b289      	uxth	r1, r1
 8000ad8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000adc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ae0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ae4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ae8:	428b      	cmp	r3, r1
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x28a>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000af4:	d216      	bcs.n	8000b24 <__udivmoddi4+0x2b0>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d914      	bls.n	8000b24 <__udivmoddi4+0x2b0>
 8000afa:	3e02      	subs	r6, #2
 8000afc:	4461      	add	r1, ip
 8000afe:	1ac9      	subs	r1, r1, r3
 8000b00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b04:	e738      	b.n	8000978 <__udivmoddi4+0x104>
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e705      	b.n	8000918 <__udivmoddi4+0xa4>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e3      	b.n	80008d8 <__udivmoddi4+0x64>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6f8      	b.n	8000906 <__udivmoddi4+0x92>
 8000b14:	454b      	cmp	r3, r9
 8000b16:	d2a9      	bcs.n	8000a6c <__udivmoddi4+0x1f8>
 8000b18:	ebb9 0802 	subs.w	r8, r9, r2
 8000b1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7a3      	b.n	8000a6c <__udivmoddi4+0x1f8>
 8000b24:	4646      	mov	r6, r8
 8000b26:	e7ea      	b.n	8000afe <__udivmoddi4+0x28a>
 8000b28:	4620      	mov	r0, r4
 8000b2a:	e794      	b.n	8000a56 <__udivmoddi4+0x1e2>
 8000b2c:	4640      	mov	r0, r8
 8000b2e:	e7d1      	b.n	8000ad4 <__udivmoddi4+0x260>
 8000b30:	46d0      	mov	r8, sl
 8000b32:	e77b      	b.n	8000a2c <__udivmoddi4+0x1b8>
 8000b34:	3b02      	subs	r3, #2
 8000b36:	4461      	add	r1, ip
 8000b38:	e732      	b.n	80009a0 <__udivmoddi4+0x12c>
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	e709      	b.n	8000952 <__udivmoddi4+0xde>
 8000b3e:	4464      	add	r4, ip
 8000b40:	3802      	subs	r0, #2
 8000b42:	e742      	b.n	80009ca <__udivmoddi4+0x156>

08000b44 <__aeabi_idiv0>:
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4c:	f000 fd5c 	bl	8001608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b50:	f000 f8b6 	bl	8000cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b54:	f000 f9cc 	bl	8000ef0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b58:	f000 f976 	bl	8000e48 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000b5c:	f000 f918 	bl	8000d90 <MX_SPI2_Init>
  MX_TIM11_Init();
 8000b60:	f000 f94e 	bl	8000e00 <MX_TIM11_Init>
  MX_USART6_UART_Init();
 8000b64:	f000 f99a 	bl	8000e9c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim11);

  MCrq1.MCP3002_8.REQFig = M_SE_CH0;
 8000b68:	4a49      	ldr	r2, [pc, #292]	; (8000c90 <main+0x148>)
 8000b6a:	7853      	ldrb	r3, [r2, #1]
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	f361 1387 	bfi	r3, r1, #6, #2
 8000b72:	7053      	strb	r3, [r2, #1]
  MCrq2.MCP3002_8.REQFig = M_SE_CH1;
 8000b74:	4a47      	ldr	r2, [pc, #284]	; (8000c94 <main+0x14c>)
 8000b76:	7853      	ldrb	r3, [r2, #1]
 8000b78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000b7c:	7053      	strb	r3, [r2, #1]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b84:	4844      	ldr	r0, [pc, #272]	; (8000c98 <main+0x150>)
 8000b86:	f001 f8f1 	bl	8001d6c <HAL_GPIO_WritePin>

  dyna_01.dymix.header1 = 0xff;
 8000b8a:	4b44      	ldr	r3, [pc, #272]	; (8000c9c <main+0x154>)
 8000b8c:	22ff      	movs	r2, #255	; 0xff
 8000b8e:	701a      	strb	r2, [r3, #0]
  dyna_01.dymix.header2 = 0xff;
 8000b90:	4b42      	ldr	r3, [pc, #264]	; (8000c9c <main+0x154>)
 8000b92:	22ff      	movs	r2, #255	; 0xff
 8000b94:	705a      	strb	r2, [r3, #1]
  dyna_01.dymix.DXL_ID = 0x03;
 8000b96:	4b41      	ldr	r3, [pc, #260]	; (8000c9c <main+0x154>)
 8000b98:	2203      	movs	r2, #3
 8000b9a:	709a      	strb	r2, [r3, #2]
  dyna_01.dymix.Instruct = write;
 8000b9c:	4b3f      	ldr	r3, [pc, #252]	; (8000c9c <main+0x154>)
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	711a      	strb	r2, [r3, #4]

  dynamix_enable_torque();
 8000ba2:	f000 fa31 	bl	8001008 <dynamix_enable_torque>
    /* USER CODE BEGIN 3 */
	  //HAL_UART_Receive_IT(&huart6,  (uint8_t*)RxDataBuffer, 32);

#ifdef EXT_WWDG_TGGR
	  //// External Watchdog
	  if(HAL_GetTick()- timestamp_wdg >= 1400 ){ ////&& wdg_tig == 0
 8000ba6:	f000 fd95 	bl	80016d4 <HAL_GetTick>
 8000baa:	4602      	mov	r2, r0
 8000bac:	4b3c      	ldr	r3, [pc, #240]	; (8000ca0 <main+0x158>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8000bb6:	d30c      	bcc.n	8000bd2 <main+0x8a>
	  		  timestamp_wdg = HAL_GetTick();
 8000bb8:	f000 fd8c 	bl	80016d4 <HAL_GetTick>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	4a38      	ldr	r2, [pc, #224]	; (8000ca0 <main+0x158>)
 8000bc0:	6013      	str	r3, [r2, #0]
	  		  // Toggle edge to watchdog xternal ic
	  		  HAL_GPIO_TogglePin(WDG_TG_GPIO_Port, WDG_TG_Pin);
 8000bc2:	2120      	movs	r1, #32
 8000bc4:	4837      	ldr	r0, [pc, #220]	; (8000ca4 <main+0x15c>)
 8000bc6:	f001 f8ea 	bl	8001d9e <HAL_GPIO_TogglePin>
	  		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000bca:	2120      	movs	r1, #32
 8000bcc:	4832      	ldr	r0, [pc, #200]	; (8000c98 <main+0x150>)
 8000bce:	f001 f8e6 	bl	8001d9e <HAL_GPIO_TogglePin>
	  	  }
#endif

#ifdef MCP3002_WRK
	  ////========SPI MCP3002 ========================================
	  if(HAL_GetTick()- timestamp_one >= 500){
 8000bd2:	f000 fd7f 	bl	80016d4 <HAL_GetTick>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	4b33      	ldr	r3, [pc, #204]	; (8000ca8 <main+0x160>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000be2:	d307      	bcc.n	8000bf4 <main+0xac>
		  timestamp_one = HAL_GetTick();
 8000be4:	f000 fd76 	bl	80016d4 <HAL_GetTick>
 8000be8:	4603      	mov	r3, r0
 8000bea:	4a2f      	ldr	r2, [pc, #188]	; (8000ca8 <main+0x160>)
 8000bec:	6013      	str	r3, [r2, #0]
		  flag_spi2_read = 1;
 8000bee:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <main+0x164>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
	  }

	  if (flag_spi2_read != 0 && hspi2.State == HAL_SPI_STATE_READY
 8000bf4:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <main+0x164>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0d4      	beq.n	8000ba6 <main+0x5e>
 8000bfc:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <main+0x168>)
 8000bfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d1ce      	bne.n	8000ba6 <main+0x5e>
							&& HAL_GPIO_ReadPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin)
 8000c08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0c:	4822      	ldr	r0, [pc, #136]	; (8000c98 <main+0x150>)
 8000c0e:	f001 f895 	bl	8001d3c <HAL_GPIO_ReadPin>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d1c6      	bne.n	8000ba6 <main+0x5e>
									== GPIO_PIN_SET)
		{

		  counter++;
 8000c18:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <main+0x16c>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <main+0x16c>)
 8000c22:	801a      	strh	r2, [r3, #0]
		  //MCP3002_READ(MCrq1.U16, &MCread1.U16); //&A_bitread
		  if(counter%2==0){
 8000c24:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <main+0x16c>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d106      	bne.n	8000c40 <main+0xf8>
			  MCP3002_READ(MCrq1.U16, &MCread1.U16); //&A_bitread
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <main+0x148>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	4920      	ldr	r1, [pc, #128]	; (8000cb8 <main+0x170>)
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 faad 	bl	8001198 <MCP3002_READ>
 8000c3e:	e005      	b.n	8000c4c <main+0x104>
		  }
		  else{
			  MCP3002_READ(MCrq1.U16, &MCrq1.U16); //&A_bitread
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <main+0x148>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	4912      	ldr	r1, [pc, #72]	; (8000c90 <main+0x148>)
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 faa6 	bl	8001198 <MCP3002_READ>


		  //// Dout = ( 4096 x Vin )/ VCC
		  //// Dout x VCC / 4096 = Vin
		  //// << 1 to add 1 lost LSB
		  VADC_c = (MCread1.MCP3002_8.bitread << 1) * 0.00120; //// 1/4096 *5 = 5 * 0.000244140625
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <main+0x170>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fd39 	bl	80006d0 <__aeabi_i2d>
 8000c5e:	a30a      	add	r3, pc, #40	; (adr r3, 8000c88 <main+0x140>)
 8000c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c64:	f7ff fab8 	bl	80001d8 <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f7ff fd98 	bl	80007a4 <__aeabi_d2f>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4a11      	ldr	r2, [pc, #68]	; (8000cbc <main+0x174>)
 8000c78:	6013      	str	r3, [r2, #0]

		  flag_spi2_read = 0;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <main+0x164>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
	  if(HAL_GetTick()- timestamp_wdg >= 1400 ){ ////&& wdg_tig == 0
 8000c80:	e791      	b.n	8000ba6 <main+0x5e>
 8000c82:	bf00      	nop
 8000c84:	f3af 8000 	nop.w
 8000c88:	30553261 	.word	0x30553261
 8000c8c:	3f53a92a 	.word	0x3f53a92a
 8000c90:	20000158 	.word	0x20000158
 8000c94:	2000015c 	.word	0x2000015c
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	20000168 	.word	0x20000168
 8000ca0:	20000180 	.word	0x20000180
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	2000017c 	.word	0x2000017c
 8000cac:	20000154 	.word	0x20000154
 8000cb0:	2000002c 	.word	0x2000002c
 8000cb4:	20000178 	.word	0x20000178
 8000cb8:	20000160 	.word	0x20000160
 8000cbc:	20000164 	.word	0x20000164

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b094      	sub	sp, #80	; 0x50
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0320 	add.w	r3, r7, #32
 8000cca:	2230      	movs	r2, #48	; 0x30
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 fb5c 	bl	800438c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <SystemClock_Config+0xc8>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a26      	ldr	r2, [pc, #152]	; (8000d88 <SystemClock_Config+0xc8>)
 8000cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <SystemClock_Config+0xc8>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d00:	2300      	movs	r3, #0
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <SystemClock_Config+0xcc>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a20      	ldr	r2, [pc, #128]	; (8000d8c <SystemClock_Config+0xcc>)
 8000d0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <SystemClock_Config+0xcc>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d20:	2301      	movs	r3, #1
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d24:	2310      	movs	r3, #16
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d30:	2308      	movs	r3, #8
 8000d32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000d34:	2364      	movs	r3, #100	; 0x64
 8000d36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d40:	f107 0320 	add.w	r3, r7, #32
 8000d44:	4618      	mov	r0, r3
 8000d46:	f001 f85d 	bl	8001e04 <HAL_RCC_OscConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d50:	f000 fa82 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d54:	230f      	movs	r3, #15
 8000d56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	2103      	movs	r1, #3
 8000d70:	4618      	mov	r0, r3
 8000d72:	f001 fabf 	bl	80022f4 <HAL_RCC_ClockConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d7c:	f000 fa6c 	bl	8001258 <Error_Handler>
  }
}
 8000d80:	bf00      	nop
 8000d82:	3750      	adds	r7, #80	; 0x50
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40007000 	.word	0x40007000

08000d90 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d94:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <MX_SPI2_Init+0x68>)
 8000d96:	4a19      	ldr	r2, [pc, #100]	; (8000dfc <MX_SPI2_Init+0x6c>)
 8000d98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <MX_SPI2_Init+0x68>)
 8000d9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000da0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <MX_SPI2_Init+0x68>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <MX_SPI2_Init+0x68>)
 8000daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_SPI2_Init+0x68>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <MX_SPI2_Init+0x68>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_SPI2_Init+0x68>)
 8000dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_SPI2_Init+0x68>)
 8000dc6:	2230      	movs	r2, #48	; 0x30
 8000dc8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <MX_SPI2_Init+0x68>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_SPI2_Init+0x68>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <MX_SPI2_Init+0x68>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_SPI2_Init+0x68>)
 8000dde:	220a      	movs	r2, #10
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_SPI2_Init+0x68>)
 8000de4:	f001 fca6 	bl	8002734 <HAL_SPI_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000dee:	f000 fa33 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000002c 	.word	0x2000002c
 8000dfc:	40003800 	.word	0x40003800

08000e00 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_TIM11_Init+0x40>)
 8000e06:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <MX_TIM11_Init+0x44>)
 8000e08:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <MX_TIM11_Init+0x40>)
 8000e0c:	2263      	movs	r2, #99	; 0x63
 8000e0e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <MX_TIM11_Init+0x40>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <MX_TIM11_Init+0x40>)
 8000e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e1c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <MX_TIM11_Init+0x40>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_TIM11_Init+0x40>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_TIM11_Init+0x40>)
 8000e2c:	f002 f8c8 	bl	8002fc0 <HAL_TIM_Base_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000e36:	f000 fa0f 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000084 	.word	0x20000084
 8000e44:	40014800 	.word	0x40014800

08000e48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <MX_USART2_UART_Init+0x50>)
 8000e50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	220c      	movs	r2, #12
 8000e70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e80:	f002 fab2 	bl	80033e8 <HAL_UART_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e8a:	f000 f9e5 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200000cc 	.word	0x200000cc
 8000e98:	40004400 	.word	0x40004400

08000e9c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_USART6_UART_Init+0x4c>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	; (8000eec <MX_USART6_UART_Init+0x50>)
 8000ea4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <MX_USART6_UART_Init+0x4c>)
 8000ea8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000eac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_USART6_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_USART6_UART_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <MX_USART6_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_USART6_UART_Init+0x4c>)
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <MX_USART6_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_USART6_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_USART6_UART_Init+0x4c>)
 8000ed4:	f002 fad5 	bl	8003482 <HAL_HalfDuplex_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000ede:	f000 f9bb 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000110 	.word	0x20000110
 8000eec:	40011400 	.word	0x40011400

08000ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b3c      	ldr	r3, [pc, #240]	; (8000ffc <MX_GPIO_Init+0x10c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a3b      	ldr	r2, [pc, #236]	; (8000ffc <MX_GPIO_Init+0x10c>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b39      	ldr	r3, [pc, #228]	; (8000ffc <MX_GPIO_Init+0x10c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b35      	ldr	r3, [pc, #212]	; (8000ffc <MX_GPIO_Init+0x10c>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a34      	ldr	r2, [pc, #208]	; (8000ffc <MX_GPIO_Init+0x10c>)
 8000f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b32      	ldr	r3, [pc, #200]	; (8000ffc <MX_GPIO_Init+0x10c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <MX_GPIO_Init+0x10c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a2d      	ldr	r2, [pc, #180]	; (8000ffc <MX_GPIO_Init+0x10c>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <MX_GPIO_Init+0x10c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b27      	ldr	r3, [pc, #156]	; (8000ffc <MX_GPIO_Init+0x10c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a26      	ldr	r2, [pc, #152]	; (8000ffc <MX_GPIO_Init+0x10c>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <MX_GPIO_Init+0x10c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000f7c:	4820      	ldr	r0, [pc, #128]	; (8001000 <MX_GPIO_Init+0x110>)
 8000f7e:	f000 fef5 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WDG_TG_GPIO_Port, WDG_TG_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2120      	movs	r1, #32
 8000f86:	481f      	ldr	r0, [pc, #124]	; (8001004 <MX_GPIO_Init+0x114>)
 8000f88:	f000 fef0 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f92:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4818      	ldr	r0, [pc, #96]	; (8001004 <MX_GPIO_Init+0x114>)
 8000fa4:	f000 fd46 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI2_CS_Pin;
 8000fa8:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480f      	ldr	r0, [pc, #60]	; (8001000 <MX_GPIO_Init+0x110>)
 8000fc2:	f000 fd37 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : WDG_TG_Pin */
  GPIO_InitStruct.Pin = WDG_TG_Pin;
 8000fc6:	2320      	movs	r3, #32
 8000fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WDG_TG_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4809      	ldr	r0, [pc, #36]	; (8001004 <MX_GPIO_Init+0x114>)
 8000fde:	f000 fd29 	bl	8001a34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2028      	movs	r0, #40	; 0x28
 8000fe8:	f000 fc5b 	bl	80018a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fec:	2028      	movs	r0, #40	; 0x28
 8000fee:	f000 fc74 	bl	80018da <HAL_NVIC_EnableIRQ>

}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	; 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020000 	.word	0x40020000
 8001004:	40020800 	.word	0x40020800

08001008 <dynamix_enable_torque>:

/* USER CODE BEGIN 4 */
void dynamix_enable_torque(){
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
	//// enable torque
		uint8_t dg = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]
		uint16_t chksumii = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	81fb      	strh	r3, [r7, #14]
		U16Cvt movspeed, torque_lim;
		movspeed.U16 = 1000;
 8001016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101a:	80bb      	strh	r3, [r7, #4]
		torque_lim.U16 = 1023;
 800101c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001020:	803b      	strh	r3, [r7, #0]
	//// enable torque
	  dyna_01.dymix.param[dg] = 24; dg++; ////-- protoc[4+1]
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	4a5a      	ldr	r2, [pc, #360]	; (8001190 <dynamix_enable_torque+0x188>)
 8001026:	4413      	add	r3, r2
 8001028:	2218      	movs	r2, #24
 800102a:	715a      	strb	r2, [r3, #5]
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	3301      	adds	r3, #1
 8001030:	71fb      	strb	r3, [r7, #7]
	  dyna_01.dymix.param[dg] = 1; dg++; ////-- protoc[4+2]
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	4a56      	ldr	r2, [pc, #344]	; (8001190 <dynamix_enable_torque+0x188>)
 8001036:	4413      	add	r3, r2
 8001038:	2201      	movs	r2, #1
 800103a:	715a      	strb	r2, [r3, #5]
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	3301      	adds	r3, #1
 8001040:	71fb      	strb	r3, [r7, #7]

	  dyna_01.dymix.param[dg] = 26; dg++; ////-- protoc[4+1]
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	4a52      	ldr	r2, [pc, #328]	; (8001190 <dynamix_enable_torque+0x188>)
 8001046:	4413      	add	r3, r2
 8001048:	221a      	movs	r2, #26
 800104a:	715a      	strb	r2, [r3, #5]
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	3301      	adds	r3, #1
 8001050:	71fb      	strb	r3, [r7, #7]
	  dyna_01.dymix.param[dg] = 1; dg++; ////-- protoc[4+2]
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	4a4e      	ldr	r2, [pc, #312]	; (8001190 <dynamix_enable_torque+0x188>)
 8001056:	4413      	add	r3, r2
 8001058:	2201      	movs	r2, #1
 800105a:	715a      	strb	r2, [r3, #5]
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	3301      	adds	r3, #1
 8001060:	71fb      	strb	r3, [r7, #7]

	  dyna_01.dymix.param[dg] = 27; dg++; ////-- protoc[4+1]
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	4a4a      	ldr	r2, [pc, #296]	; (8001190 <dynamix_enable_torque+0x188>)
 8001066:	4413      	add	r3, r2
 8001068:	221b      	movs	r2, #27
 800106a:	715a      	strb	r2, [r3, #5]
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	3301      	adds	r3, #1
 8001070:	71fb      	strb	r3, [r7, #7]
	  dyna_01.dymix.param[dg] = 1; dg++; ////-- protoc[4+2]
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	4a46      	ldr	r2, [pc, #280]	; (8001190 <dynamix_enable_torque+0x188>)
 8001076:	4413      	add	r3, r2
 8001078:	2201      	movs	r2, #1
 800107a:	715a      	strb	r2, [r3, #5]
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	3301      	adds	r3, #1
 8001080:	71fb      	strb	r3, [r7, #7]

	  dyna_01.dymix.param[dg] = 28; dg++; ////-- protoc[4+1]
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	4a42      	ldr	r2, [pc, #264]	; (8001190 <dynamix_enable_torque+0x188>)
 8001086:	4413      	add	r3, r2
 8001088:	221c      	movs	r2, #28
 800108a:	715a      	strb	r2, [r3, #5]
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	3301      	adds	r3, #1
 8001090:	71fb      	strb	r3, [r7, #7]
	  dyna_01.dymix.param[dg] = 32; dg++; ////-- protoc[4+2]
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4a3e      	ldr	r2, [pc, #248]	; (8001190 <dynamix_enable_torque+0x188>)
 8001096:	4413      	add	r3, r2
 8001098:	2220      	movs	r2, #32
 800109a:	715a      	strb	r2, [r3, #5]
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	3301      	adds	r3, #1
 80010a0:	71fb      	strb	r3, [r7, #7]

	  dyna_01.dymix.param[dg] = 29; dg++; ////-- protoc[4+1]
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4a3a      	ldr	r2, [pc, #232]	; (8001190 <dynamix_enable_torque+0x188>)
 80010a6:	4413      	add	r3, r2
 80010a8:	221d      	movs	r2, #29
 80010aa:	715a      	strb	r2, [r3, #5]
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	3301      	adds	r3, #1
 80010b0:	71fb      	strb	r3, [r7, #7]
	  dyna_01.dymix.param[dg] = 32; dg++; ////-- protoc[4+2]
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	4a36      	ldr	r2, [pc, #216]	; (8001190 <dynamix_enable_torque+0x188>)
 80010b6:	4413      	add	r3, r2
 80010b8:	2220      	movs	r2, #32
 80010ba:	715a      	strb	r2, [r3, #5]
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	3301      	adds	r3, #1
 80010c0:	71fb      	strb	r3, [r7, #7]

	  //// Moving speed
	  dyna_01.dymix.param[dg] = 32; dg++; ////-- protoc[4+1]
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4a32      	ldr	r2, [pc, #200]	; (8001190 <dynamix_enable_torque+0x188>)
 80010c6:	4413      	add	r3, r2
 80010c8:	2220      	movs	r2, #32
 80010ca:	715a      	strb	r2, [r3, #5]
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	3301      	adds	r3, #1
 80010d0:	71fb      	strb	r3, [r7, #7]
	  dyna_01.dymix.param[dg] = movspeed.U8[1]; dg++; ////-- protoc[4+2]
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	7979      	ldrb	r1, [r7, #5]
 80010d6:	4a2e      	ldr	r2, [pc, #184]	; (8001190 <dynamix_enable_torque+0x188>)
 80010d8:	4413      	add	r3, r2
 80010da:	460a      	mov	r2, r1
 80010dc:	715a      	strb	r2, [r3, #5]
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	3301      	adds	r3, #1
 80010e2:	71fb      	strb	r3, [r7, #7]
	  dyna_01.dymix.param[dg] = movspeed.U8[0]; dg++; ////-- protoc[4+2]
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	7939      	ldrb	r1, [r7, #4]
 80010e8:	4a29      	ldr	r2, [pc, #164]	; (8001190 <dynamix_enable_torque+0x188>)
 80010ea:	4413      	add	r3, r2
 80010ec:	460a      	mov	r2, r1
 80010ee:	715a      	strb	r2, [r3, #5]
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	3301      	adds	r3, #1
 80010f4:	71fb      	strb	r3, [r7, #7]

	  dyna_01.dymix.param[dg] = 34; dg++; ////-- protoc[4+1]
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	4a25      	ldr	r2, [pc, #148]	; (8001190 <dynamix_enable_torque+0x188>)
 80010fa:	4413      	add	r3, r2
 80010fc:	2222      	movs	r2, #34	; 0x22
 80010fe:	715a      	strb	r2, [r3, #5]
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	3301      	adds	r3, #1
 8001104:	71fb      	strb	r3, [r7, #7]
	  dyna_01.dymix.param[dg] = torque_lim.U8[1]; dg++; ////-- protoc[4+2]
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	7879      	ldrb	r1, [r7, #1]
 800110a:	4a21      	ldr	r2, [pc, #132]	; (8001190 <dynamix_enable_torque+0x188>)
 800110c:	4413      	add	r3, r2
 800110e:	460a      	mov	r2, r1
 8001110:	715a      	strb	r2, [r3, #5]
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	3301      	adds	r3, #1
 8001116:	71fb      	strb	r3, [r7, #7]
	  dyna_01.dymix.param[dg] = torque_lim.U8[0]; dg++; ////-- protoc[4+2]
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	7839      	ldrb	r1, [r7, #0]
 800111c:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <dynamix_enable_torque+0x188>)
 800111e:	4413      	add	r3, r2
 8001120:	460a      	mov	r2, r1
 8001122:	715a      	strb	r2, [r3, #5]
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	3301      	adds	r3, #1
 8001128:	71fb      	strb	r3, [r7, #7]


	  dyna_01.dymix.d_length = dg + 2;
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	3302      	adds	r3, #2
 800112e:	b2da      	uxtb	r2, r3
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <dynamix_enable_torque+0x188>)
 8001132:	70da      	strb	r2, [r3, #3]
	  //// Checksum = ~( ID + Length + Instruction + Parameter1 + … Parameter N )
	  //// start at ID[2], length[3], instr[4] , param[5,6,7]
	  for(int i = 2; i <= dyna_01.dymix.d_length + 2; i++){
 8001134:	2302      	movs	r3, #2
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	e00a      	b.n	8001150 <dynamix_enable_torque+0x148>
		  chksumii += dyna_01.U8[i];
 800113a:	4a15      	ldr	r2, [pc, #84]	; (8001190 <dynamix_enable_torque+0x188>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4413      	add	r3, r2
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	b29a      	uxth	r2, r3
 8001144:	89fb      	ldrh	r3, [r7, #14]
 8001146:	4413      	add	r3, r2
 8001148:	81fb      	strh	r3, [r7, #14]
	  for(int i = 2; i <= dyna_01.dymix.d_length + 2; i++){
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	3301      	adds	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <dynamix_enable_torque+0x188>)
 8001152:	78db      	ldrb	r3, [r3, #3]
 8001154:	3302      	adds	r3, #2
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	429a      	cmp	r2, r3
 800115a:	ddee      	ble.n	800113a <dynamix_enable_torque+0x132>
	  }
	  dyna_01.dymix.param[dg] = ~(chksumii & 0xff) ; dg++;
 800115c:	89fb      	ldrh	r3, [r7, #14]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	43d2      	mvns	r2, r2
 8001164:	b2d1      	uxtb	r1, r2
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <dynamix_enable_torque+0x188>)
 8001168:	4413      	add	r3, r2
 800116a:	460a      	mov	r2, r1
 800116c:	715a      	strb	r2, [r3, #5]
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	3301      	adds	r3, #1
 8001172:	71fb      	strb	r3, [r7, #7]

	  HAL_UART_Transmit_IT(&huart6, &dyna_01.U8[0] , dyna_01.dymix.d_length + 4);
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <dynamix_enable_torque+0x188>)
 8001176:	78db      	ldrb	r3, [r3, #3]
 8001178:	b29b      	uxth	r3, r3
 800117a:	3304      	adds	r3, #4
 800117c:	b29b      	uxth	r3, r3
 800117e:	461a      	mov	r2, r3
 8001180:	4903      	ldr	r1, [pc, #12]	; (8001190 <dynamix_enable_torque+0x188>)
 8001182:	4804      	ldr	r0, [pc, #16]	; (8001194 <dynamix_enable_torque+0x18c>)
 8001184:	f002 f9d2 	bl	800352c <HAL_UART_Transmit_IT>

}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000168 	.word	0x20000168
 8001194:	20000110 	.word	0x20000110

08001198 <MCP3002_READ>:
		dataPos= (dataPos+1) % huart6.RxXferSize; // update and % 32(overflow)
	}
	return data;
}

void MCP3002_READ(uint16_t pTrX, uint16_t *pRcX){
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	80fb      	strh	r3, [r7, #6]

	//uint16_t datain = pTrX; //0b1100000000000000
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <MCP3002_READ+0x2c>)
 80011ac:	f000 fdde 	bl	8001d6c <HAL_GPIO_WritePin>
	//HAL_SPI_Transmit_IT(&hspi2, &datain, 1);
	//HAL_SPI_TransmitReceive(&hspi2, pTrX, &pRcX, 1, 100);

	HAL_SPI_TransmitReceive_IT(&hspi2, &pTrX, pRcX, 1);
 80011b0:	1db9      	adds	r1, r7, #6
 80011b2:	2301      	movs	r3, #1
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MCP3002_READ+0x30>)
 80011b8:	f001 fb46 	bl	8002848 <HAL_SPI_TransmitReceive_IT>

	//// Dout = ( 4096 x Vin )/ VCC
	//// Dout x VCC / 4096 = Vin

}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40020000 	.word	0x40020000
 80011c8:	2000002c 	.word	0x2000002c

080011cc <HAL_SPI_TxRxCpltCallback>:


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <HAL_SPI_TxRxCpltCallback+0x24>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d105      	bne.n	80011e8 <HAL_SPI_TxRxCpltCallback+0x1c>
	{
		// set cs back to 1, finished
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e2:	4804      	ldr	r0, [pc, #16]	; (80011f4 <HAL_SPI_TxRxCpltCallback+0x28>)
 80011e4:	f000 fdc2 	bl	8001d6c <HAL_GPIO_WritePin>
	}
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	2000002c 	.word	0x2000002c
 80011f4:	40020000 	.word	0x40020000

080011f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001208:	d102      	bne.n	8001210 <HAL_GPIO_EXTI_Callback+0x18>
		//wdg_tig++; // trickey stop watchdog tog
		flag_spi2_read = 1;
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <HAL_GPIO_EXTI_Callback+0x24>)
 800120c:	2201      	movs	r2, #1
 800120e:	701a      	strb	r2, [r3, #0]
		}
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	20000154 	.word	0x20000154

08001220 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001220:	b4b0      	push	{r4, r5, r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a09      	ldr	r2, [pc, #36]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d10a      	bne.n	8001246 <HAL_TIM_PeriodElapsedCallback+0x26>
	{_micro += 65535;}
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001236:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800123a:	1854      	adds	r4, r2, r1
 800123c:	f143 0500 	adc.w	r5, r3, #0
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001242:	e9c3 4500 	strd	r4, r5, [r3]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bcb0      	pop	{r4, r5, r7}
 800124e:	4770      	bx	lr
 8001250:	20000084 	.word	0x20000084
 8001254:	20000188 	.word	0x20000188

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	e7fe      	b.n	8001260 <Error_Handler+0x8>
	...

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <HAL_MspInit+0x4c>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001278:	6453      	str	r3, [r2, #68]	; 0x44
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <HAL_MspInit+0x4c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <HAL_MspInit+0x4c>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001294:	6413      	str	r3, [r2, #64]	; 0x40
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_MspInit+0x4c>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012a2:	2007      	movs	r0, #7
 80012a4:	f000 faf2 	bl	800188c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800

080012b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a2c      	ldr	r2, [pc, #176]	; (8001384 <HAL_SPI_MspInit+0xd0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d152      	bne.n	800137c <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <HAL_SPI_MspInit+0xd4>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a2a      	ldr	r2, [pc, #168]	; (8001388 <HAL_SPI_MspInit+0xd4>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b28      	ldr	r3, [pc, #160]	; (8001388 <HAL_SPI_MspInit+0xd4>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b24      	ldr	r3, [pc, #144]	; (8001388 <HAL_SPI_MspInit+0xd4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a23      	ldr	r2, [pc, #140]	; (8001388 <HAL_SPI_MspInit+0xd4>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b21      	ldr	r3, [pc, #132]	; (8001388 <HAL_SPI_MspInit+0xd4>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <HAL_SPI_MspInit+0xd4>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a1c      	ldr	r2, [pc, #112]	; (8001388 <HAL_SPI_MspInit+0xd4>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <HAL_SPI_MspInit+0xd4>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800132a:	230c      	movs	r3, #12
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800133a:	2305      	movs	r3, #5
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4811      	ldr	r0, [pc, #68]	; (800138c <HAL_SPI_MspInit+0xd8>)
 8001346:	f000 fb75 	bl	8001a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800134a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800135c:	2305      	movs	r3, #5
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	480a      	ldr	r0, [pc, #40]	; (8001390 <HAL_SPI_MspInit+0xdc>)
 8001368:	f000 fb64 	bl	8001a34 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	2024      	movs	r0, #36	; 0x24
 8001372:	f000 fa96 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001376:	2024      	movs	r0, #36	; 0x24
 8001378:	f000 faaf 	bl	80018da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800137c:	bf00      	nop
 800137e:	3728      	adds	r7, #40	; 0x28
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40003800 	.word	0x40003800
 8001388:	40023800 	.word	0x40023800
 800138c:	40020800 	.word	0x40020800
 8001390:	40020400 	.word	0x40020400

08001394 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <HAL_TIM_Base_MspInit+0x48>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d115      	bne.n	80013d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_TIM_Base_MspInit+0x4c>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <HAL_TIM_Base_MspInit+0x4c>)
 80013b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b4:	6453      	str	r3, [r2, #68]	; 0x44
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_TIM_Base_MspInit+0x4c>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	201a      	movs	r0, #26
 80013c8:	f000 fa6b 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80013cc:	201a      	movs	r0, #26
 80013ce:	f000 fa84 	bl	80018da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40014800 	.word	0x40014800
 80013e0:	40023800 	.word	0x40023800

080013e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08c      	sub	sp, #48	; 0x30
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a36      	ldr	r2, [pc, #216]	; (80014dc <HAL_UART_MspInit+0xf8>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d12c      	bne.n	8001460 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
 800140a:	4b35      	ldr	r3, [pc, #212]	; (80014e0 <HAL_UART_MspInit+0xfc>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a34      	ldr	r2, [pc, #208]	; (80014e0 <HAL_UART_MspInit+0xfc>)
 8001410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <HAL_UART_MspInit+0xfc>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	61bb      	str	r3, [r7, #24]
 8001420:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <HAL_UART_MspInit+0xfc>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a2d      	ldr	r2, [pc, #180]	; (80014e0 <HAL_UART_MspInit+0xfc>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <HAL_UART_MspInit+0xfc>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800143e:	230c      	movs	r3, #12
 8001440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800144e:	2307      	movs	r3, #7
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	4822      	ldr	r0, [pc, #136]	; (80014e4 <HAL_UART_MspInit+0x100>)
 800145a:	f000 faeb 	bl	8001a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800145e:	e038      	b.n	80014d2 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a20      	ldr	r2, [pc, #128]	; (80014e8 <HAL_UART_MspInit+0x104>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d133      	bne.n	80014d2 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <HAL_UART_MspInit+0xfc>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	4a1b      	ldr	r2, [pc, #108]	; (80014e0 <HAL_UART_MspInit+0xfc>)
 8001474:	f043 0320 	orr.w	r3, r3, #32
 8001478:	6453      	str	r3, [r2, #68]	; 0x44
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <HAL_UART_MspInit+0xfc>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f003 0320 	and.w	r3, r3, #32
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_UART_MspInit+0xfc>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <HAL_UART_MspInit+0xfc>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_UART_MspInit+0xfc>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014a2:	2340      	movs	r3, #64	; 0x40
 80014a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a6:	2312      	movs	r3, #18
 80014a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80014b2:	2308      	movs	r3, #8
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	4619      	mov	r1, r3
 80014bc:	480b      	ldr	r0, [pc, #44]	; (80014ec <HAL_UART_MspInit+0x108>)
 80014be:	f000 fab9 	bl	8001a34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	2047      	movs	r0, #71	; 0x47
 80014c8:	f000 f9eb 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80014cc:	2047      	movs	r0, #71	; 0x47
 80014ce:	f000 fa04 	bl	80018da <HAL_NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3730      	adds	r7, #48	; 0x30
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40004400 	.word	0x40004400
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40011400 	.word	0x40011400
 80014ec:	40020800 	.word	0x40020800

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <NMI_Handler+0x4>

080014f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <MemManage_Handler+0x4>

08001502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <UsageFault_Handler+0x4>

0800150e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153c:	f000 f8b6 	bl	80016ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800154a:	f001 fd88 	bl	800305e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000084 	.word	0x20000084

08001558 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <SPI2_IRQHandler+0x10>)
 800155e:	f001 fa07 	bl	8002970 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	2000002c 	.word	0x2000002c

0800156c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001570:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001574:	f000 fc2e 	bl	8001dd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}

0800157c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <USART6_IRQHandler+0x10>)
 8001582:	f002 f819 	bl	80035b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000110 	.word	0x20000110

08001590 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <SystemInit+0x20>)
 8001596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <SystemInit+0x20>)
 800159c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015b8:	480d      	ldr	r0, [pc, #52]	; (80015f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ba:	490e      	ldr	r1, [pc, #56]	; (80015f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015bc:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c0:	e002      	b.n	80015c8 <LoopCopyDataInit>

080015c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c6:	3304      	adds	r3, #4

080015c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015cc:	d3f9      	bcc.n	80015c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ce:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015d0:	4c0b      	ldr	r4, [pc, #44]	; (8001600 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d4:	e001      	b.n	80015da <LoopFillZerobss>

080015d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d8:	3204      	adds	r2, #4

080015da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015dc:	d3fb      	bcc.n	80015d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015de:	f7ff ffd7 	bl	8001590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015e2:	f002 feaf 	bl	8004344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015e6:	f7ff faaf 	bl	8000b48 <main>
  bx  lr    
 80015ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015f8:	080043dc 	.word	0x080043dc
  ldr r2, =_sbss
 80015fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001600:	20000194 	.word	0x20000194

08001604 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC_IRQHandler>
	...

08001608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_Init+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <HAL_Init+0x40>)
 8001612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001616:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <HAL_Init+0x40>)
 800161e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001622:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <HAL_Init+0x40>)
 800162a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001630:	2003      	movs	r0, #3
 8001632:	f000 f92b 	bl	800188c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001636:	2000      	movs	r0, #0
 8001638:	f000 f808 	bl	800164c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800163c:	f7ff fe12 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023c00 	.word	0x40023c00

0800164c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_InitTick+0x54>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_InitTick+0x58>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001662:	fbb3 f3f1 	udiv	r3, r3, r1
 8001666:	fbb2 f3f3 	udiv	r3, r2, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f943 	bl	80018f6 <HAL_SYSTICK_Config>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e00e      	b.n	8001698 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b0f      	cmp	r3, #15
 800167e:	d80a      	bhi.n	8001696 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001680:	2200      	movs	r2, #0
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f000 f90b 	bl	80018a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800168c:	4a06      	ldr	r2, [pc, #24]	; (80016a8 <HAL_InitTick+0x5c>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000008 	.word	0x20000008
 80016a8:	20000004 	.word	0x20000004

080016ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_IncTick+0x20>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_IncTick+0x24>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <HAL_IncTick+0x24>)
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000008 	.word	0x20000008
 80016d0:	20000190 	.word	0x20000190

080016d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return uwTick;
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <HAL_GetTick+0x14>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000190 	.word	0x20000190

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	db0b      	blt.n	800177a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4907      	ldr	r1, [pc, #28]	; (8001788 <__NVIC_EnableIRQ+0x38>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000e100 	.word	0xe000e100

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	db0a      	blt.n	80017b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	490c      	ldr	r1, [pc, #48]	; (80017d8 <__NVIC_SetPriority+0x4c>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	440b      	add	r3, r1
 80017b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b4:	e00a      	b.n	80017cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4908      	ldr	r1, [pc, #32]	; (80017dc <__NVIC_SetPriority+0x50>)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	761a      	strb	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f1c3 0307 	rsb	r3, r3, #7
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	bf28      	it	cs
 80017fe:	2304      	movcs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3304      	adds	r3, #4
 8001806:	2b06      	cmp	r3, #6
 8001808:	d902      	bls.n	8001810 <NVIC_EncodePriority+0x30>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3b03      	subs	r3, #3
 800180e:	e000      	b.n	8001812 <NVIC_EncodePriority+0x32>
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43d9      	mvns	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	4313      	orrs	r3, r2
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001858:	d301      	bcc.n	800185e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185a:	2301      	movs	r3, #1
 800185c:	e00f      	b.n	800187e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <SysTick_Config+0x40>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001866:	210f      	movs	r1, #15
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f7ff ff8e 	bl	800178c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <SysTick_Config+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <SysTick_Config+0x40>)
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010

0800188c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff29 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b4:	f7ff ff3e 	bl	8001734 <__NVIC_GetPriorityGrouping>
 80018b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	f7ff ff8e 	bl	80017e0 <NVIC_EncodePriority>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff5d 	bl	800178c <__NVIC_SetPriority>
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff31 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffa2 	bl	8001848 <SysTick_Config>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b084      	sub	sp, #16
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff feda 	bl	80016d4 <HAL_GetTick>
 8001920:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d008      	beq.n	8001940 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2280      	movs	r2, #128	; 0x80
 8001932:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e052      	b.n	80019e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0216 	bic.w	r2, r2, #22
 800194e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800195e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	2b00      	cmp	r3, #0
 8001966:	d103      	bne.n	8001970 <HAL_DMA_Abort+0x62>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800196c:	2b00      	cmp	r3, #0
 800196e:	d007      	beq.n	8001980 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0208 	bic.w	r2, r2, #8
 800197e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0201 	bic.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001990:	e013      	b.n	80019ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001992:	f7ff fe9f 	bl	80016d4 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b05      	cmp	r3, #5
 800199e:	d90c      	bls.n	80019ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2220      	movs	r2, #32
 80019a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2203      	movs	r2, #3
 80019aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e015      	b.n	80019e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1e4      	bne.n	8001992 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019cc:	223f      	movs	r2, #63	; 0x3f
 80019ce:	409a      	lsls	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d004      	beq.n	8001a0c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e00c      	b.n	8001a26 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2205      	movs	r2, #5
 8001a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0201 	bic.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	e159      	b.n	8001d04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	f040 8148 	bne.w	8001cfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d005      	beq.n	8001a86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d130      	bne.n	8001ae8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	2203      	movs	r2, #3
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001abc:	2201      	movs	r2, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	091b      	lsrs	r3, r3, #4
 8001ad2:	f003 0201 	and.w	r2, r3, #1
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d017      	beq.n	8001b24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d123      	bne.n	8001b78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	08da      	lsrs	r2, r3, #3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3208      	adds	r2, #8
 8001b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	220f      	movs	r2, #15
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	08da      	lsrs	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3208      	adds	r2, #8
 8001b72:	69b9      	ldr	r1, [r7, #24]
 8001b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	2203      	movs	r2, #3
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0203 	and.w	r2, r3, #3
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80a2 	beq.w	8001cfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4b57      	ldr	r3, [pc, #348]	; (8001d1c <HAL_GPIO_Init+0x2e8>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4a56      	ldr	r2, [pc, #344]	; (8001d1c <HAL_GPIO_Init+0x2e8>)
 8001bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bca:	4b54      	ldr	r3, [pc, #336]	; (8001d1c <HAL_GPIO_Init+0x2e8>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bd6:	4a52      	ldr	r2, [pc, #328]	; (8001d20 <HAL_GPIO_Init+0x2ec>)
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	089b      	lsrs	r3, r3, #2
 8001bdc:	3302      	adds	r3, #2
 8001bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	220f      	movs	r2, #15
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a49      	ldr	r2, [pc, #292]	; (8001d24 <HAL_GPIO_Init+0x2f0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d019      	beq.n	8001c36 <HAL_GPIO_Init+0x202>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a48      	ldr	r2, [pc, #288]	; (8001d28 <HAL_GPIO_Init+0x2f4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_GPIO_Init+0x1fe>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a47      	ldr	r2, [pc, #284]	; (8001d2c <HAL_GPIO_Init+0x2f8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00d      	beq.n	8001c2e <HAL_GPIO_Init+0x1fa>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a46      	ldr	r2, [pc, #280]	; (8001d30 <HAL_GPIO_Init+0x2fc>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d007      	beq.n	8001c2a <HAL_GPIO_Init+0x1f6>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a45      	ldr	r2, [pc, #276]	; (8001d34 <HAL_GPIO_Init+0x300>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_GPIO_Init+0x1f2>
 8001c22:	2304      	movs	r3, #4
 8001c24:	e008      	b.n	8001c38 <HAL_GPIO_Init+0x204>
 8001c26:	2307      	movs	r3, #7
 8001c28:	e006      	b.n	8001c38 <HAL_GPIO_Init+0x204>
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e004      	b.n	8001c38 <HAL_GPIO_Init+0x204>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e002      	b.n	8001c38 <HAL_GPIO_Init+0x204>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_GPIO_Init+0x204>
 8001c36:	2300      	movs	r3, #0
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	f002 0203 	and.w	r2, r2, #3
 8001c3e:	0092      	lsls	r2, r2, #2
 8001c40:	4093      	lsls	r3, r2
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c48:	4935      	ldr	r1, [pc, #212]	; (8001d20 <HAL_GPIO_Init+0x2ec>)
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	3302      	adds	r3, #2
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c56:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <HAL_GPIO_Init+0x304>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c7a:	4a2f      	ldr	r2, [pc, #188]	; (8001d38 <HAL_GPIO_Init+0x304>)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c80:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <HAL_GPIO_Init+0x304>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ca4:	4a24      	ldr	r2, [pc, #144]	; (8001d38 <HAL_GPIO_Init+0x304>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001caa:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <HAL_GPIO_Init+0x304>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cce:	4a1a      	ldr	r2, [pc, #104]	; (8001d38 <HAL_GPIO_Init+0x304>)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd4:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <HAL_GPIO_Init+0x304>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cf8:	4a0f      	ldr	r2, [pc, #60]	; (8001d38 <HAL_GPIO_Init+0x304>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3301      	adds	r3, #1
 8001d02:	61fb      	str	r3, [r7, #28]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	2b0f      	cmp	r3, #15
 8001d08:	f67f aea2 	bls.w	8001a50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3724      	adds	r7, #36	; 0x24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40013800 	.word	0x40013800
 8001d24:	40020000 	.word	0x40020000
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	40020800 	.word	0x40020800
 8001d30:	40020c00 	.word	0x40020c00
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40013c00 	.word	0x40013c00

08001d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	887b      	ldrh	r3, [r7, #2]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e001      	b.n	8001d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d88:	e003      	b.n	8001d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	619a      	str	r2, [r3, #24]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b085      	sub	sp, #20
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001db0:	887a      	ldrh	r2, [r7, #2]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4013      	ands	r3, r2
 8001db6:	041a      	lsls	r2, r3, #16
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	43d9      	mvns	r1, r3
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	400b      	ands	r3, r1
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	619a      	str	r2, [r3, #24]
}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d006      	beq.n	8001df8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dea:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fa00 	bl	80011f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40013c00 	.word	0x40013c00

08001e04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e267      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d075      	beq.n	8001f0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e22:	4b88      	ldr	r3, [pc, #544]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d00c      	beq.n	8001e48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e2e:	4b85      	ldr	r3, [pc, #532]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d112      	bne.n	8001e60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e3a:	4b82      	ldr	r3, [pc, #520]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e46:	d10b      	bne.n	8001e60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e48:	4b7e      	ldr	r3, [pc, #504]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d05b      	beq.n	8001f0c <HAL_RCC_OscConfig+0x108>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d157      	bne.n	8001f0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e242      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e68:	d106      	bne.n	8001e78 <HAL_RCC_OscConfig+0x74>
 8001e6a:	4b76      	ldr	r3, [pc, #472]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a75      	ldr	r2, [pc, #468]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e01d      	b.n	8001eb4 <HAL_RCC_OscConfig+0xb0>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e80:	d10c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x98>
 8001e82:	4b70      	ldr	r3, [pc, #448]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a6f      	ldr	r2, [pc, #444]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	4b6d      	ldr	r3, [pc, #436]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a6c      	ldr	r2, [pc, #432]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	e00b      	b.n	8001eb4 <HAL_RCC_OscConfig+0xb0>
 8001e9c:	4b69      	ldr	r3, [pc, #420]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a68      	ldr	r2, [pc, #416]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	4b66      	ldr	r3, [pc, #408]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a65      	ldr	r2, [pc, #404]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d013      	beq.n	8001ee4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fc0a 	bl	80016d4 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec4:	f7ff fc06 	bl	80016d4 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b64      	cmp	r3, #100	; 0x64
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e207      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed6:	4b5b      	ldr	r3, [pc, #364]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0xc0>
 8001ee2:	e014      	b.n	8001f0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7ff fbf6 	bl	80016d4 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eec:	f7ff fbf2 	bl	80016d4 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	; 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e1f3      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efe:	4b51      	ldr	r3, [pc, #324]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0xe8>
 8001f0a:	e000      	b.n	8001f0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d063      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f1a:	4b4a      	ldr	r3, [pc, #296]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00b      	beq.n	8001f3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f26:	4b47      	ldr	r3, [pc, #284]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d11c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f32:	4b44      	ldr	r3, [pc, #272]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d116      	bne.n	8001f6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3e:	4b41      	ldr	r3, [pc, #260]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <HAL_RCC_OscConfig+0x152>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e1c7      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f56:	4b3b      	ldr	r3, [pc, #236]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4937      	ldr	r1, [pc, #220]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6a:	e03a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d020      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f74:	4b34      	ldr	r3, [pc, #208]	; (8002048 <HAL_RCC_OscConfig+0x244>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7ff fbab 	bl	80016d4 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f82:	f7ff fba7 	bl	80016d4 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e1a8      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f94:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa0:	4b28      	ldr	r3, [pc, #160]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4925      	ldr	r1, [pc, #148]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]
 8001fb4:	e015      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_RCC_OscConfig+0x244>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fb8a 	bl	80016d4 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc4:	f7ff fb86 	bl	80016d4 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e187      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d036      	beq.n	800205c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d016      	beq.n	8002024 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_RCC_OscConfig+0x248>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffc:	f7ff fb6a 	bl	80016d4 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002004:	f7ff fb66 	bl	80016d4 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e167      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_RCC_OscConfig+0x240>)
 8002018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x200>
 8002022:	e01b      	b.n	800205c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_RCC_OscConfig+0x248>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202a:	f7ff fb53 	bl	80016d4 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002030:	e00e      	b.n	8002050 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002032:	f7ff fb4f 	bl	80016d4 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d907      	bls.n	8002050 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e150      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
 8002044:	40023800 	.word	0x40023800
 8002048:	42470000 	.word	0x42470000
 800204c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002050:	4b88      	ldr	r3, [pc, #544]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1ea      	bne.n	8002032 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 8097 	beq.w	8002198 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206a:	2300      	movs	r3, #0
 800206c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206e:	4b81      	ldr	r3, [pc, #516]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10f      	bne.n	800209a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	4b7d      	ldr	r3, [pc, #500]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a7c      	ldr	r2, [pc, #496]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b7a      	ldr	r3, [pc, #488]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002096:	2301      	movs	r3, #1
 8002098:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209a:	4b77      	ldr	r3, [pc, #476]	; (8002278 <HAL_RCC_OscConfig+0x474>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d118      	bne.n	80020d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a6:	4b74      	ldr	r3, [pc, #464]	; (8002278 <HAL_RCC_OscConfig+0x474>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a73      	ldr	r2, [pc, #460]	; (8002278 <HAL_RCC_OscConfig+0x474>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b2:	f7ff fb0f 	bl	80016d4 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ba:	f7ff fb0b 	bl	80016d4 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e10c      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020cc:	4b6a      	ldr	r3, [pc, #424]	; (8002278 <HAL_RCC_OscConfig+0x474>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x2ea>
 80020e0:	4b64      	ldr	r3, [pc, #400]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 80020e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e4:	4a63      	ldr	r2, [pc, #396]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6713      	str	r3, [r2, #112]	; 0x70
 80020ec:	e01c      	b.n	8002128 <HAL_RCC_OscConfig+0x324>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b05      	cmp	r3, #5
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0x30c>
 80020f6:	4b5f      	ldr	r3, [pc, #380]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fa:	4a5e      	ldr	r2, [pc, #376]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 80020fc:	f043 0304 	orr.w	r3, r3, #4
 8002100:	6713      	str	r3, [r2, #112]	; 0x70
 8002102:	4b5c      	ldr	r3, [pc, #368]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002106:	4a5b      	ldr	r2, [pc, #364]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6713      	str	r3, [r2, #112]	; 0x70
 800210e:	e00b      	b.n	8002128 <HAL_RCC_OscConfig+0x324>
 8002110:	4b58      	ldr	r3, [pc, #352]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	4a57      	ldr	r2, [pc, #348]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002116:	f023 0301 	bic.w	r3, r3, #1
 800211a:	6713      	str	r3, [r2, #112]	; 0x70
 800211c:	4b55      	ldr	r3, [pc, #340]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	4a54      	ldr	r2, [pc, #336]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002122:	f023 0304 	bic.w	r3, r3, #4
 8002126:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d015      	beq.n	800215c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002130:	f7ff fad0 	bl	80016d4 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002136:	e00a      	b.n	800214e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002138:	f7ff facc 	bl	80016d4 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	; 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e0cb      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214e:	4b49      	ldr	r3, [pc, #292]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0ee      	beq.n	8002138 <HAL_RCC_OscConfig+0x334>
 800215a:	e014      	b.n	8002186 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215c:	f7ff faba 	bl	80016d4 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002162:	e00a      	b.n	800217a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002164:	f7ff fab6 	bl	80016d4 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e0b5      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217a:	4b3e      	ldr	r3, [pc, #248]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1ee      	bne.n	8002164 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002186:	7dfb      	ldrb	r3, [r7, #23]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d105      	bne.n	8002198 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218c:	4b39      	ldr	r3, [pc, #228]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	4a38      	ldr	r2, [pc, #224]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002196:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 80a1 	beq.w	80022e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021a2:	4b34      	ldr	r3, [pc, #208]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d05c      	beq.n	8002268 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d141      	bne.n	800223a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b6:	4b31      	ldr	r3, [pc, #196]	; (800227c <HAL_RCC_OscConfig+0x478>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7ff fa8a 	bl	80016d4 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c4:	f7ff fa86 	bl	80016d4 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e087      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d6:	4b27      	ldr	r3, [pc, #156]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69da      	ldr	r2, [r3, #28]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	019b      	lsls	r3, r3, #6
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	085b      	lsrs	r3, r3, #1
 80021fa:	3b01      	subs	r3, #1
 80021fc:	041b      	lsls	r3, r3, #16
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	061b      	lsls	r3, r3, #24
 8002206:	491b      	ldr	r1, [pc, #108]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <HAL_RCC_OscConfig+0x478>)
 800220e:	2201      	movs	r2, #1
 8002210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7ff fa5f 	bl	80016d4 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221a:	f7ff fa5b 	bl	80016d4 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e05c      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x416>
 8002238:	e054      	b.n	80022e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <HAL_RCC_OscConfig+0x478>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff fa48 	bl	80016d4 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002248:	f7ff fa44 	bl	80016d4 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e045      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_RCC_OscConfig+0x470>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x444>
 8002266:	e03d      	b.n	80022e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d107      	bne.n	8002280 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e038      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
 8002274:	40023800 	.word	0x40023800
 8002278:	40007000 	.word	0x40007000
 800227c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002280:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <HAL_RCC_OscConfig+0x4ec>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d028      	beq.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002298:	429a      	cmp	r2, r3
 800229a:	d121      	bne.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d11a      	bne.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022b0:	4013      	ands	r3, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d111      	bne.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	085b      	lsrs	r3, r3, #1
 80022c8:	3b01      	subs	r3, #1
 80022ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d107      	bne.n	80022e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800

080022f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0cc      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002308:	4b68      	ldr	r3, [pc, #416]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d90c      	bls.n	8002330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b65      	ldr	r3, [pc, #404]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b63      	ldr	r3, [pc, #396]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0b8      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d020      	beq.n	800237e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002348:	4b59      	ldr	r3, [pc, #356]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	4a58      	ldr	r2, [pc, #352]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002352:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002360:	4b53      	ldr	r3, [pc, #332]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a52      	ldr	r2, [pc, #328]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800236a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800236c:	4b50      	ldr	r3, [pc, #320]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	494d      	ldr	r1, [pc, #308]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d044      	beq.n	8002414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d119      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e07f      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d003      	beq.n	80023b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b2:	4b3f      	ldr	r3, [pc, #252]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e06f      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c2:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e067      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023d2:	4b37      	ldr	r3, [pc, #220]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f023 0203 	bic.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4934      	ldr	r1, [pc, #208]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e4:	f7ff f976 	bl	80016d4 <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ec:	f7ff f972 	bl	80016d4 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e04f      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	4b2b      	ldr	r3, [pc, #172]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 020c 	and.w	r2, r3, #12
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	429a      	cmp	r2, r3
 8002412:	d1eb      	bne.n	80023ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002414:	4b25      	ldr	r3, [pc, #148]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d20c      	bcs.n	800243c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b22      	ldr	r3, [pc, #136]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b20      	ldr	r3, [pc, #128]	; (80024ac <HAL_RCC_ClockConfig+0x1b8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e032      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002448:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4916      	ldr	r1, [pc, #88]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002466:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	490e      	ldr	r1, [pc, #56]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800247a:	f000 f821 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 800247e:	4602      	mov	r2, r0
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	490a      	ldr	r1, [pc, #40]	; (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	5ccb      	ldrb	r3, [r1, r3]
 800248e:	fa22 f303 	lsr.w	r3, r2, r3
 8002492:	4a09      	ldr	r2, [pc, #36]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_RCC_ClockConfig+0x1c8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff f8d6 	bl	800164c <HAL_InitTick>

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023c00 	.word	0x40023c00
 80024b0:	40023800 	.word	0x40023800
 80024b4:	080043b4 	.word	0x080043b4
 80024b8:	20000000 	.word	0x20000000
 80024bc:	20000004 	.word	0x20000004

080024c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024c4:	b094      	sub	sp, #80	; 0x50
 80024c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	647b      	str	r3, [r7, #68]	; 0x44
 80024cc:	2300      	movs	r3, #0
 80024ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024d0:	2300      	movs	r3, #0
 80024d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024d8:	4b79      	ldr	r3, [pc, #484]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 030c 	and.w	r3, r3, #12
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d00d      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0x40>
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	f200 80e1 	bhi.w	80026ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x34>
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d003      	beq.n	80024fa <HAL_RCC_GetSysClockFreq+0x3a>
 80024f2:	e0db      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024f4:	4b73      	ldr	r3, [pc, #460]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80024f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024f8:	e0db      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024fa:	4b73      	ldr	r3, [pc, #460]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80024fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024fe:	e0d8      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002500:	4b6f      	ldr	r3, [pc, #444]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002508:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800250a:	4b6d      	ldr	r3, [pc, #436]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d063      	beq.n	80025de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002516:	4b6a      	ldr	r3, [pc, #424]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	099b      	lsrs	r3, r3, #6
 800251c:	2200      	movs	r2, #0
 800251e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002520:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002528:	633b      	str	r3, [r7, #48]	; 0x30
 800252a:	2300      	movs	r3, #0
 800252c:	637b      	str	r3, [r7, #52]	; 0x34
 800252e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002532:	4622      	mov	r2, r4
 8002534:	462b      	mov	r3, r5
 8002536:	f04f 0000 	mov.w	r0, #0
 800253a:	f04f 0100 	mov.w	r1, #0
 800253e:	0159      	lsls	r1, r3, #5
 8002540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002544:	0150      	lsls	r0, r2, #5
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4621      	mov	r1, r4
 800254c:	1a51      	subs	r1, r2, r1
 800254e:	6139      	str	r1, [r7, #16]
 8002550:	4629      	mov	r1, r5
 8002552:	eb63 0301 	sbc.w	r3, r3, r1
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002564:	4659      	mov	r1, fp
 8002566:	018b      	lsls	r3, r1, #6
 8002568:	4651      	mov	r1, sl
 800256a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800256e:	4651      	mov	r1, sl
 8002570:	018a      	lsls	r2, r1, #6
 8002572:	4651      	mov	r1, sl
 8002574:	ebb2 0801 	subs.w	r8, r2, r1
 8002578:	4659      	mov	r1, fp
 800257a:	eb63 0901 	sbc.w	r9, r3, r1
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800258a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800258e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002592:	4690      	mov	r8, r2
 8002594:	4699      	mov	r9, r3
 8002596:	4623      	mov	r3, r4
 8002598:	eb18 0303 	adds.w	r3, r8, r3
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	462b      	mov	r3, r5
 80025a0:	eb49 0303 	adc.w	r3, r9, r3
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025b2:	4629      	mov	r1, r5
 80025b4:	024b      	lsls	r3, r1, #9
 80025b6:	4621      	mov	r1, r4
 80025b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025bc:	4621      	mov	r1, r4
 80025be:	024a      	lsls	r2, r1, #9
 80025c0:	4610      	mov	r0, r2
 80025c2:	4619      	mov	r1, r3
 80025c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c6:	2200      	movs	r2, #0
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025d0:	f7fe f938 	bl	8000844 <__aeabi_uldivmod>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4613      	mov	r3, r2
 80025da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025dc:	e058      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025de:	4b38      	ldr	r3, [pc, #224]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	099b      	lsrs	r3, r3, #6
 80025e4:	2200      	movs	r2, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	4611      	mov	r1, r2
 80025ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025ee:	623b      	str	r3, [r7, #32]
 80025f0:	2300      	movs	r3, #0
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
 80025f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025f8:	4642      	mov	r2, r8
 80025fa:	464b      	mov	r3, r9
 80025fc:	f04f 0000 	mov.w	r0, #0
 8002600:	f04f 0100 	mov.w	r1, #0
 8002604:	0159      	lsls	r1, r3, #5
 8002606:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800260a:	0150      	lsls	r0, r2, #5
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4641      	mov	r1, r8
 8002612:	ebb2 0a01 	subs.w	sl, r2, r1
 8002616:	4649      	mov	r1, r9
 8002618:	eb63 0b01 	sbc.w	fp, r3, r1
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002628:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800262c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002630:	ebb2 040a 	subs.w	r4, r2, sl
 8002634:	eb63 050b 	sbc.w	r5, r3, fp
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	f04f 0300 	mov.w	r3, #0
 8002640:	00eb      	lsls	r3, r5, #3
 8002642:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002646:	00e2      	lsls	r2, r4, #3
 8002648:	4614      	mov	r4, r2
 800264a:	461d      	mov	r5, r3
 800264c:	4643      	mov	r3, r8
 800264e:	18e3      	adds	r3, r4, r3
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	464b      	mov	r3, r9
 8002654:	eb45 0303 	adc.w	r3, r5, r3
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002666:	4629      	mov	r1, r5
 8002668:	028b      	lsls	r3, r1, #10
 800266a:	4621      	mov	r1, r4
 800266c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002670:	4621      	mov	r1, r4
 8002672:	028a      	lsls	r2, r1, #10
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267a:	2200      	movs	r2, #0
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	61fa      	str	r2, [r7, #28]
 8002680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002684:	f7fe f8de 	bl	8000844 <__aeabi_uldivmod>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4613      	mov	r3, r2
 800268e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	0c1b      	lsrs	r3, r3, #16
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	3301      	adds	r3, #1
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80026a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026aa:	e002      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80026ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3750      	adds	r7, #80	; 0x50
 80026b8:	46bd      	mov	sp, r7
 80026ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	00f42400 	.word	0x00f42400
 80026c8:	007a1200 	.word	0x007a1200

080026cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000000 	.word	0x20000000

080026e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026e8:	f7ff fff0 	bl	80026cc <HAL_RCC_GetHCLKFreq>
 80026ec:	4602      	mov	r2, r0
 80026ee:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	0a9b      	lsrs	r3, r3, #10
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	4903      	ldr	r1, [pc, #12]	; (8002708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026fa:	5ccb      	ldrb	r3, [r1, r3]
 80026fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002700:	4618      	mov	r0, r3
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40023800 	.word	0x40023800
 8002708:	080043c4 	.word	0x080043c4

0800270c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002710:	f7ff ffdc 	bl	80026cc <HAL_RCC_GetHCLKFreq>
 8002714:	4602      	mov	r2, r0
 8002716:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	0b5b      	lsrs	r3, r3, #13
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	4903      	ldr	r1, [pc, #12]	; (8002730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002722:	5ccb      	ldrb	r3, [r1, r3]
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002728:	4618      	mov	r0, r3
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40023800 	.word	0x40023800
 8002730:	080043c4 	.word	0x080043c4

08002734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e07b      	b.n	800283e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	2b00      	cmp	r3, #0
 800274c:	d108      	bne.n	8002760 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002756:	d009      	beq.n	800276c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	61da      	str	r2, [r3, #28]
 800275e:	e005      	b.n	800276c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe fd94 	bl	80012b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f0:	ea42 0103 	orr.w	r1, r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	0c1b      	lsrs	r3, r3, #16
 800280a:	f003 0104 	and.w	r1, r3, #4
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	f003 0210 	and.w	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	69da      	ldr	r2, [r3, #28]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800282c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_SPI_TransmitReceive_IT+0x20>
 8002864:	2302      	movs	r3, #2
 8002866:	e075      	b.n	8002954 <HAL_SPI_TransmitReceive_IT+0x10c>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002876:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800287e:	7dbb      	ldrb	r3, [r7, #22]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d00d      	beq.n	80028a0 <HAL_SPI_TransmitReceive_IT+0x58>
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800288a:	d106      	bne.n	800289a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d102      	bne.n	800289a <HAL_SPI_TransmitReceive_IT+0x52>
 8002894:	7dbb      	ldrb	r3, [r7, #22]
 8002896:	2b04      	cmp	r3, #4
 8002898:	d002      	beq.n	80028a0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800289a:	2302      	movs	r3, #2
 800289c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800289e:	e054      	b.n	800294a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80028ac:	887b      	ldrh	r3, [r7, #2]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028b6:	e048      	b.n	800294a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d003      	beq.n	80028cc <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2205      	movs	r2, #5
 80028c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	887a      	ldrh	r2, [r7, #2]
 80028dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	887a      	ldrh	r2, [r7, #2]
 80028e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	887a      	ldrh	r2, [r7, #2]
 80028ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d006      	beq.n	800290c <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4a17      	ldr	r2, [pc, #92]	; (8002960 <HAL_SPI_TransmitReceive_IT+0x118>)
 8002902:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4a17      	ldr	r2, [pc, #92]	; (8002964 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8002908:	645a      	str	r2, [r3, #68]	; 0x44
 800290a:	e005      	b.n	8002918 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4a16      	ldr	r2, [pc, #88]	; (8002968 <HAL_SPI_TransmitReceive_IT+0x120>)
 8002910:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4a15      	ldr	r2, [pc, #84]	; (800296c <HAL_SPI_TransmitReceive_IT+0x124>)
 8002916:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002926:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002932:	2b40      	cmp	r3, #64	; 0x40
 8002934:	d008      	beq.n	8002948 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e000      	b.n	800294a <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8002948:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002952:	7dfb      	ldrb	r3, [r7, #23]
}
 8002954:	4618      	mov	r0, r3
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	08002c85 	.word	0x08002c85
 8002964:	08002ce5 	.word	0x08002ce5
 8002968:	08002bc1 	.word	0x08002bc1
 800296c:	08002c25 	.word	0x08002c25

08002970 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	099b      	lsrs	r3, r3, #6
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10f      	bne.n	80029b4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	099b      	lsrs	r3, r3, #6
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d004      	beq.n	80029b4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	4798      	blx	r3
    return;
 80029b2:	e0d7      	b.n	8002b64 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	085b      	lsrs	r3, r3, #1
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HAL_SPI_IRQHandler+0x66>
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	09db      	lsrs	r3, r3, #7
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d004      	beq.n	80029d6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4798      	blx	r3
    return;
 80029d4:	e0c6      	b.n	8002b64 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	095b      	lsrs	r3, r3, #5
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10c      	bne.n	80029fc <HAL_SPI_IRQHandler+0x8c>
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	0a1b      	lsrs	r3, r3, #8
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 80b4 	beq.w	8002b64 <HAL_SPI_IRQHandler+0x1f4>
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80ad 	beq.w	8002b64 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	099b      	lsrs	r3, r3, #6
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d023      	beq.n	8002a5e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d011      	beq.n	8002a46 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a26:	f043 0204 	orr.w	r2, r3, #4
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	e00b      	b.n	8002a5e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	693b      	ldr	r3, [r7, #16]
        return;
 8002a5c:	e082      	b.n	8002b64 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	095b      	lsrs	r3, r3, #5
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d014      	beq.n	8002a94 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6e:	f043 0201 	orr.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	0a1b      	lsrs	r3, r3, #8
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00c      	beq.n	8002aba <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa4:	f043 0208 	orr.w	r2, r3, #8
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002aac:	2300      	movs	r3, #0
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d04f      	beq.n	8002b62 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ad0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d104      	bne.n	8002aee <HAL_SPI_IRQHandler+0x17e>
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d034      	beq.n	8002b58 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0203 	bic.w	r2, r2, #3
 8002afc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d011      	beq.n	8002b2a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0a:	4a18      	ldr	r2, [pc, #96]	; (8002b6c <HAL_SPI_IRQHandler+0x1fc>)
 8002b0c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe ff6b 	bl	80019ee <HAL_DMA_Abort_IT>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d005      	beq.n	8002b2a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d016      	beq.n	8002b60 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b36:	4a0d      	ldr	r2, [pc, #52]	; (8002b6c <HAL_SPI_IRQHandler+0x1fc>)
 8002b38:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe ff55 	bl	80019ee <HAL_DMA_Abort_IT>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002b56:	e003      	b.n	8002b60 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f813 	bl	8002b84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002b5e:	e000      	b.n	8002b62 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002b60:	bf00      	nop
    return;
 8002b62:	bf00      	nop
  }
}
 8002b64:	3720      	adds	r7, #32
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	08002b99 	.word	0x08002b99

08002b70 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f7ff ffe6 	bl	8002b84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002bb8:	bf00      	nop
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f103 020c 	add.w	r2, r3, #12
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	7812      	ldrb	r2, [r2, #0]
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10f      	bne.n	8002c1c <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c0a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d102      	bne.n	8002c1c <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f95e 	bl	8002ed8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	330c      	adds	r3, #12
 8002c36:	7812      	ldrb	r2, [r2, #0]
 8002c38:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10f      	bne.n	8002c7c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c6a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d102      	bne.n	8002c7c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f92e 	bl	8002ed8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	b292      	uxth	r2, r2
 8002c98:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9e:	1c9a      	adds	r2, r3, #2
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10f      	bne.n	8002cdc <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cca:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d102      	bne.n	8002cdc <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f8fe 	bl	8002ed8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	881a      	ldrh	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	1c9a      	adds	r2, r3, #2
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10f      	bne.n	8002d3a <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d28:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d102      	bne.n	8002d3a <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f8cf 	bl	8002ed8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d54:	f7fe fcbe 	bl	80016d4 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	4413      	add	r3, r2
 8002d62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d64:	f7fe fcb6 	bl	80016d4 <HAL_GetTick>
 8002d68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d6a:	4b39      	ldr	r3, [pc, #228]	; (8002e50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	015b      	lsls	r3, r3, #5
 8002d70:	0d1b      	lsrs	r3, r3, #20
 8002d72:	69fa      	ldr	r2, [r7, #28]
 8002d74:	fb02 f303 	mul.w	r3, r2, r3
 8002d78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d7a:	e054      	b.n	8002e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d82:	d050      	beq.n	8002e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d84:	f7fe fca6 	bl	80016d4 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d902      	bls.n	8002d9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d13d      	bne.n	8002e16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002da8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002db2:	d111      	bne.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dbc:	d004      	beq.n	8002dc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc6:	d107      	bne.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de0:	d10f      	bne.n	8002e02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e017      	b.n	8002e46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	bf0c      	ite	eq
 8002e36:	2301      	moveq	r3, #1
 8002e38:	2300      	movne	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d19b      	bne.n	8002d7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000000 	.word	0x20000000

08002e54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e60:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <SPI_EndRxTxTransaction+0x7c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a1b      	ldr	r2, [pc, #108]	; (8002ed4 <SPI_EndRxTxTransaction+0x80>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	0d5b      	lsrs	r3, r3, #21
 8002e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e70:	fb02 f303 	mul.w	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e7e:	d112      	bne.n	8002ea6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2200      	movs	r2, #0
 8002e88:	2180      	movs	r1, #128	; 0x80
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f7ff ff5a 	bl	8002d44 <SPI_WaitFlagStateUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d016      	beq.n	8002ec4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9a:	f043 0220 	orr.w	r2, r3, #32
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e00f      	b.n	8002ec6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebc:	2b80      	cmp	r3, #128	; 0x80
 8002ebe:	d0f2      	beq.n	8002ea6 <SPI_EndRxTxTransaction+0x52>
 8002ec0:	e000      	b.n	8002ec4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002ec2:	bf00      	nop
  }

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000000 	.word	0x20000000
 8002ed4:	165e9f81 	.word	0x165e9f81

08002ed8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002ee0:	4b35      	ldr	r3, [pc, #212]	; (8002fb8 <SPI_CloseRxTx_ISR+0xe0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a35      	ldr	r2, [pc, #212]	; (8002fbc <SPI_CloseRxTx_ISR+0xe4>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	0a5b      	lsrs	r3, r3, #9
 8002eec:	2264      	movs	r2, #100	; 0x64
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ef4:	f7fe fbee 	bl	80016d4 <HAL_GetTick>
 8002ef8:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0220 	bic.w	r2, r2, #32
 8002f08:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d106      	bne.n	8002f1e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f14:	f043 0220 	orr.w	r2, r3, #32
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f1c:	e009      	b.n	8002f32 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0eb      	beq.n	8002f0a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	2164      	movs	r1, #100	; 0x64
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff ff8c 	bl	8002e54 <SPI_EndRxTxTransaction>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d005      	beq.n	8002f4e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f46:	f043 0220 	orr.w	r2, r3, #32
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d115      	bne.n	8002fa0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d107      	bne.n	8002f90 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff fdf1 	bl	8002b70 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002f8e:	e00e      	b.n	8002fae <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7fe f917 	bl	80011cc <HAL_SPI_TxRxCpltCallback>
}
 8002f9e:	e006      	b.n	8002fae <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff fdeb 	bl	8002b84 <HAL_SPI_ErrorCallback>
}
 8002fae:	bf00      	nop
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000000 	.word	0x20000000
 8002fbc:	057619f1 	.word	0x057619f1

08002fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e041      	b.n	8003056 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d106      	bne.n	8002fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fe f9d4 	bl	8001394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4610      	mov	r0, r2
 8003000:	f000 f95e 	bl	80032c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b02      	cmp	r3, #2
 8003072:	d122      	bne.n	80030ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b02      	cmp	r3, #2
 8003080:	d11b      	bne.n	80030ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f06f 0202 	mvn.w	r2, #2
 800308a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f8ee 	bl	8003282 <HAL_TIM_IC_CaptureCallback>
 80030a6:	e005      	b.n	80030b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f8e0 	bl	800326e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f8f1 	bl	8003296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d122      	bne.n	800310e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d11b      	bne.n	800310e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f06f 0204 	mvn.w	r2, #4
 80030de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f8c4 	bl	8003282 <HAL_TIM_IC_CaptureCallback>
 80030fa:	e005      	b.n	8003108 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f8b6 	bl	800326e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f8c7 	bl	8003296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b08      	cmp	r3, #8
 800311a:	d122      	bne.n	8003162 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b08      	cmp	r3, #8
 8003128:	d11b      	bne.n	8003162 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f06f 0208 	mvn.w	r2, #8
 8003132:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2204      	movs	r2, #4
 8003138:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f89a 	bl	8003282 <HAL_TIM_IC_CaptureCallback>
 800314e:	e005      	b.n	800315c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f88c 	bl	800326e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f89d 	bl	8003296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b10      	cmp	r3, #16
 800316e:	d122      	bne.n	80031b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	2b10      	cmp	r3, #16
 800317c:	d11b      	bne.n	80031b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f06f 0210 	mvn.w	r2, #16
 8003186:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2208      	movs	r2, #8
 800318c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f870 	bl	8003282 <HAL_TIM_IC_CaptureCallback>
 80031a2:	e005      	b.n	80031b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f862 	bl	800326e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f873 	bl	8003296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d10e      	bne.n	80031e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d107      	bne.n	80031e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f06f 0201 	mvn.w	r2, #1
 80031da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7fe f81f 	bl	8001220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ec:	2b80      	cmp	r3, #128	; 0x80
 80031ee:	d10e      	bne.n	800320e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fa:	2b80      	cmp	r3, #128	; 0x80
 80031fc:	d107      	bne.n	800320e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f8e3 	bl	80033d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003218:	2b40      	cmp	r3, #64	; 0x40
 800321a:	d10e      	bne.n	800323a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003226:	2b40      	cmp	r3, #64	; 0x40
 8003228:	d107      	bne.n	800323a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f838 	bl	80032aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b20      	cmp	r3, #32
 8003246:	d10e      	bne.n	8003266 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b20      	cmp	r3, #32
 8003254:	d107      	bne.n	8003266 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f06f 0220 	mvn.w	r2, #32
 800325e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f8ad 	bl	80033c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a34      	ldr	r2, [pc, #208]	; (80033a4 <TIM_Base_SetConfig+0xe4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d00f      	beq.n	80032f8 <TIM_Base_SetConfig+0x38>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032de:	d00b      	beq.n	80032f8 <TIM_Base_SetConfig+0x38>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a31      	ldr	r2, [pc, #196]	; (80033a8 <TIM_Base_SetConfig+0xe8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d007      	beq.n	80032f8 <TIM_Base_SetConfig+0x38>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a30      	ldr	r2, [pc, #192]	; (80033ac <TIM_Base_SetConfig+0xec>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d003      	beq.n	80032f8 <TIM_Base_SetConfig+0x38>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a2f      	ldr	r2, [pc, #188]	; (80033b0 <TIM_Base_SetConfig+0xf0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d108      	bne.n	800330a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a25      	ldr	r2, [pc, #148]	; (80033a4 <TIM_Base_SetConfig+0xe4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d01b      	beq.n	800334a <TIM_Base_SetConfig+0x8a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003318:	d017      	beq.n	800334a <TIM_Base_SetConfig+0x8a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a22      	ldr	r2, [pc, #136]	; (80033a8 <TIM_Base_SetConfig+0xe8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d013      	beq.n	800334a <TIM_Base_SetConfig+0x8a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a21      	ldr	r2, [pc, #132]	; (80033ac <TIM_Base_SetConfig+0xec>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00f      	beq.n	800334a <TIM_Base_SetConfig+0x8a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a20      	ldr	r2, [pc, #128]	; (80033b0 <TIM_Base_SetConfig+0xf0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00b      	beq.n	800334a <TIM_Base_SetConfig+0x8a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a1f      	ldr	r2, [pc, #124]	; (80033b4 <TIM_Base_SetConfig+0xf4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d007      	beq.n	800334a <TIM_Base_SetConfig+0x8a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a1e      	ldr	r2, [pc, #120]	; (80033b8 <TIM_Base_SetConfig+0xf8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d003      	beq.n	800334a <TIM_Base_SetConfig+0x8a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a1d      	ldr	r2, [pc, #116]	; (80033bc <TIM_Base_SetConfig+0xfc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d108      	bne.n	800335c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a08      	ldr	r2, [pc, #32]	; (80033a4 <TIM_Base_SetConfig+0xe4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d103      	bne.n	8003390 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	615a      	str	r2, [r3, #20]
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40010000 	.word	0x40010000
 80033a8:	40000400 	.word	0x40000400
 80033ac:	40000800 	.word	0x40000800
 80033b0:	40000c00 	.word	0x40000c00
 80033b4:	40014000 	.word	0x40014000
 80033b8:	40014400 	.word	0x40014400
 80033bc:	40014800 	.word	0x40014800

080033c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e03f      	b.n	800347a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fd ffe8 	bl	80013e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2224      	movs	r2, #36	; 0x24
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800342a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fd15 	bl	8003e5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003440:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003450:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003460:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e047      	b.n	8003524 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d106      	bne.n	80034ae <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7fd ff9b 	bl	80013e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2224      	movs	r2, #36	; 0x24
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fcc8 	bl	8003e5c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80034ea:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695a      	ldr	r2, [r3, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0208 	orr.w	r2, r2, #8
 80034fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800350a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	4613      	mov	r3, r2
 8003538:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b20      	cmp	r3, #32
 8003544:	d130      	bne.n	80035a8 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <HAL_UART_Transmit_IT+0x26>
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e029      	b.n	80035aa <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_UART_Transmit_IT+0x38>
 8003560:	2302      	movs	r3, #2
 8003562:	e022      	b.n	80035aa <HAL_UART_Transmit_IT+0x7e>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	88fa      	ldrh	r2, [r7, #6]
 8003576:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	88fa      	ldrh	r2, [r7, #6]
 800357c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2221      	movs	r2, #33	; 0x21
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035a2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	e000      	b.n	80035aa <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80035a8:	2302      	movs	r3, #2
  }
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
	...

080035b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b0ba      	sub	sp, #232	; 0xe8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80035de:	2300      	movs	r3, #0
 80035e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80035f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10f      	bne.n	800361e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b00      	cmp	r3, #0
 8003608:	d009      	beq.n	800361e <HAL_UART_IRQHandler+0x66>
 800360a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fb65 	bl	8003ce6 <UART_Receive_IT>
      return;
 800361c:	e256      	b.n	8003acc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800361e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 80de 	beq.w	80037e4 <HAL_UART_IRQHandler+0x22c>
 8003628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d106      	bne.n	8003642 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003638:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 80d1 	beq.w	80037e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_UART_IRQHandler+0xae>
 800364e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f043 0201 	orr.w	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00b      	beq.n	800368a <HAL_UART_IRQHandler+0xd2>
 8003672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d005      	beq.n	800368a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f043 0202 	orr.w	r2, r3, #2
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800368a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00b      	beq.n	80036ae <HAL_UART_IRQHandler+0xf6>
 8003696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f043 0204 	orr.w	r2, r3, #4
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d011      	beq.n	80036de <HAL_UART_IRQHandler+0x126>
 80036ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d105      	bne.n	80036d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f043 0208 	orr.w	r2, r3, #8
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 81ed 	beq.w	8003ac2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d008      	beq.n	8003706 <HAL_UART_IRQHandler+0x14e>
 80036f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 faf0 	bl	8003ce6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003710:	2b40      	cmp	r3, #64	; 0x40
 8003712:	bf0c      	ite	eq
 8003714:	2301      	moveq	r3, #1
 8003716:	2300      	movne	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d103      	bne.n	8003732 <HAL_UART_IRQHandler+0x17a>
 800372a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800372e:	2b00      	cmp	r3, #0
 8003730:	d04f      	beq.n	80037d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f9f8 	bl	8003b28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003742:	2b40      	cmp	r3, #64	; 0x40
 8003744:	d141      	bne.n	80037ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3314      	adds	r3, #20
 800374c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003754:	e853 3f00 	ldrex	r3, [r3]
 8003758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800375c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3314      	adds	r3, #20
 800376e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003772:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003776:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800377e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003782:	e841 2300 	strex	r3, r2, [r1]
 8003786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800378a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1d9      	bne.n	8003746 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	2b00      	cmp	r3, #0
 8003798:	d013      	beq.n	80037c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	4a7d      	ldr	r2, [pc, #500]	; (8003994 <HAL_UART_IRQHandler+0x3dc>)
 80037a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe f921 	bl	80019ee <HAL_DMA_Abort_IT>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d016      	beq.n	80037e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037bc:	4610      	mov	r0, r2
 80037be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c0:	e00e      	b.n	80037e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f99a 	bl	8003afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c8:	e00a      	b.n	80037e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f996 	bl	8003afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d0:	e006      	b.n	80037e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f992 	bl	8003afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80037de:	e170      	b.n	8003ac2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e0:	bf00      	nop
    return;
 80037e2:	e16e      	b.n	8003ac2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	f040 814a 	bne.w	8003a82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f2:	f003 0310 	and.w	r3, r3, #16
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 8143 	beq.w	8003a82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 813c 	beq.w	8003a82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800380a:	2300      	movs	r3, #0
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382a:	2b40      	cmp	r3, #64	; 0x40
 800382c:	f040 80b4 	bne.w	8003998 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800383c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 8140 	beq.w	8003ac6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800384a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800384e:	429a      	cmp	r2, r3
 8003850:	f080 8139 	bcs.w	8003ac6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800385a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003866:	f000 8088 	beq.w	800397a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	330c      	adds	r3, #12
 8003870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003874:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003880:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003888:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	330c      	adds	r3, #12
 8003892:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003896:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800389a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038a6:	e841 2300 	strex	r3, r2, [r1]
 80038aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1d9      	bne.n	800386a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3314      	adds	r3, #20
 80038bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038c0:	e853 3f00 	ldrex	r3, [r3]
 80038c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3314      	adds	r3, #20
 80038d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038e6:	e841 2300 	strex	r3, r2, [r1]
 80038ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1e1      	bne.n	80038b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3314      	adds	r3, #20
 80038f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038fc:	e853 3f00 	ldrex	r3, [r3]
 8003900:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003908:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3314      	adds	r3, #20
 8003912:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003916:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003918:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800391c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e3      	bne.n	80038f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	330c      	adds	r3, #12
 800393e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003942:	e853 3f00 	ldrex	r3, [r3]
 8003946:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800394a:	f023 0310 	bic.w	r3, r3, #16
 800394e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	330c      	adds	r3, #12
 8003958:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800395c:	65ba      	str	r2, [r7, #88]	; 0x58
 800395e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003960:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003962:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003964:	e841 2300 	strex	r3, r2, [r1]
 8003968:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800396a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e3      	bne.n	8003938 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	4618      	mov	r0, r3
 8003976:	f7fd ffca 	bl	800190e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003982:	b29b      	uxth	r3, r3
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	b29b      	uxth	r3, r3
 8003988:	4619      	mov	r1, r3
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f8c0 	bl	8003b10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003990:	e099      	b.n	8003ac6 <HAL_UART_IRQHandler+0x50e>
 8003992:	bf00      	nop
 8003994:	08003bef 	.word	0x08003bef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 808b 	beq.w	8003aca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80039b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8086 	beq.w	8003aca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	330c      	adds	r3, #12
 80039c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	330c      	adds	r3, #12
 80039de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80039e2:	647a      	str	r2, [r7, #68]	; 0x44
 80039e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e3      	bne.n	80039be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3314      	adds	r3, #20
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	623b      	str	r3, [r7, #32]
   return(result);
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3314      	adds	r3, #20
 8003a16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a1a:	633a      	str	r2, [r7, #48]	; 0x30
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e3      	bne.n	80039f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	330c      	adds	r3, #12
 8003a42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	e853 3f00 	ldrex	r3, [r3]
 8003a4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0310 	bic.w	r3, r3, #16
 8003a52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a60:	61fa      	str	r2, [r7, #28]
 8003a62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	69b9      	ldr	r1, [r7, #24]
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e3      	bne.n	8003a3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a78:	4619      	mov	r1, r3
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f848 	bl	8003b10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a80:	e023      	b.n	8003aca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x4ea>
 8003a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f8bb 	bl	8003c16 <UART_Transmit_IT>
    return;
 8003aa0:	e014      	b.n	8003acc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00e      	beq.n	8003acc <HAL_UART_IRQHandler+0x514>
 8003aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d008      	beq.n	8003acc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f8fb 	bl	8003cb6 <UART_EndTransmit_IT>
    return;
 8003ac0:	e004      	b.n	8003acc <HAL_UART_IRQHandler+0x514>
    return;
 8003ac2:	bf00      	nop
 8003ac4:	e002      	b.n	8003acc <HAL_UART_IRQHandler+0x514>
      return;
 8003ac6:	bf00      	nop
 8003ac8:	e000      	b.n	8003acc <HAL_UART_IRQHandler+0x514>
      return;
 8003aca:	bf00      	nop
  }
}
 8003acc:	37e8      	adds	r7, #232	; 0xe8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop

08003ad4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b095      	sub	sp, #84	; 0x54
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	330c      	adds	r3, #12
 8003b36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b3a:	e853 3f00 	ldrex	r3, [r3]
 8003b3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	330c      	adds	r3, #12
 8003b4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b50:	643a      	str	r2, [r7, #64]	; 0x40
 8003b52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b58:	e841 2300 	strex	r3, r2, [r1]
 8003b5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e5      	bne.n	8003b30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3314      	adds	r3, #20
 8003b6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3314      	adds	r3, #20
 8003b82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e5      	bne.n	8003b64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d119      	bne.n	8003bd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	330c      	adds	r3, #12
 8003ba6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	e853 3f00 	ldrex	r3, [r3]
 8003bae:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f023 0310 	bic.w	r3, r3, #16
 8003bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	330c      	adds	r3, #12
 8003bbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bc0:	61ba      	str	r2, [r7, #24]
 8003bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	6979      	ldr	r1, [r7, #20]
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	613b      	str	r3, [r7, #16]
   return(result);
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e5      	bne.n	8003ba0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003be2:	bf00      	nop
 8003be4:	3754      	adds	r7, #84	; 0x54
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f7ff ff77 	bl	8003afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b085      	sub	sp, #20
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b21      	cmp	r3, #33	; 0x21
 8003c28:	d13e      	bne.n	8003ca8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c32:	d114      	bne.n	8003c5e <UART_Transmit_IT+0x48>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d110      	bne.n	8003c5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	1c9a      	adds	r2, r3, #2
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	621a      	str	r2, [r3, #32]
 8003c5c:	e008      	b.n	8003c70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	1c59      	adds	r1, r3, #1
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6211      	str	r1, [r2, #32]
 8003c68:	781a      	ldrb	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10f      	bne.n	8003ca4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ca2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	e000      	b.n	8003caa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ca8:	2302      	movs	r3, #2
  }
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ccc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff fefc 	bl	8003ad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b08c      	sub	sp, #48	; 0x30
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b22      	cmp	r3, #34	; 0x22
 8003cf8:	f040 80ab 	bne.w	8003e52 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d04:	d117      	bne.n	8003d36 <UART_Receive_IT+0x50>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d113      	bne.n	8003d36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2e:	1c9a      	adds	r2, r3, #2
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	629a      	str	r2, [r3, #40]	; 0x28
 8003d34:	e026      	b.n	8003d84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d48:	d007      	beq.n	8003d5a <UART_Receive_IT+0x74>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10a      	bne.n	8003d68 <UART_Receive_IT+0x82>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d64:	701a      	strb	r2, [r3, #0]
 8003d66:	e008      	b.n	8003d7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	4619      	mov	r1, r3
 8003d92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d15a      	bne.n	8003e4e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0220 	bic.w	r2, r2, #32
 8003da6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003db6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0201 	bic.w	r2, r2, #1
 8003dc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d135      	bne.n	8003e44 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	330c      	adds	r3, #12
 8003de4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	e853 3f00 	ldrex	r3, [r3]
 8003dec:	613b      	str	r3, [r7, #16]
   return(result);
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f023 0310 	bic.w	r3, r3, #16
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfe:	623a      	str	r2, [r7, #32]
 8003e00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	69f9      	ldr	r1, [r7, #28]
 8003e04:	6a3a      	ldr	r2, [r7, #32]
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e5      	bne.n	8003dde <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0310 	and.w	r3, r3, #16
 8003e1c:	2b10      	cmp	r3, #16
 8003e1e:	d10a      	bne.n	8003e36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff fe67 	bl	8003b10 <HAL_UARTEx_RxEventCallback>
 8003e42:	e002      	b.n	8003e4a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff fe4f 	bl	8003ae8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e002      	b.n	8003e54 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e000      	b.n	8003e54 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
  }
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3730      	adds	r7, #48	; 0x30
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e60:	b0c0      	sub	sp, #256	; 0x100
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e78:	68d9      	ldr	r1, [r3, #12]
 8003e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	ea40 0301 	orr.w	r3, r0, r1
 8003e84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003eb4:	f021 010c 	bic.w	r1, r1, #12
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed6:	6999      	ldr	r1, [r3, #24]
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	ea40 0301 	orr.w	r3, r0, r1
 8003ee2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	4b8f      	ldr	r3, [pc, #572]	; (8004128 <UART_SetConfig+0x2cc>)
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d005      	beq.n	8003efc <UART_SetConfig+0xa0>
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4b8d      	ldr	r3, [pc, #564]	; (800412c <UART_SetConfig+0x2d0>)
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d104      	bne.n	8003f06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003efc:	f7fe fc06 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 8003f00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f04:	e003      	b.n	8003f0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f06:	f7fe fbed 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 8003f0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f18:	f040 810c 	bne.w	8004134 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f20:	2200      	movs	r2, #0
 8003f22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f2e:	4622      	mov	r2, r4
 8003f30:	462b      	mov	r3, r5
 8003f32:	1891      	adds	r1, r2, r2
 8003f34:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f36:	415b      	adcs	r3, r3
 8003f38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f3e:	4621      	mov	r1, r4
 8003f40:	eb12 0801 	adds.w	r8, r2, r1
 8003f44:	4629      	mov	r1, r5
 8003f46:	eb43 0901 	adc.w	r9, r3, r1
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f5e:	4690      	mov	r8, r2
 8003f60:	4699      	mov	r9, r3
 8003f62:	4623      	mov	r3, r4
 8003f64:	eb18 0303 	adds.w	r3, r8, r3
 8003f68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f6c:	462b      	mov	r3, r5
 8003f6e:	eb49 0303 	adc.w	r3, r9, r3
 8003f72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	18db      	adds	r3, r3, r3
 8003f8e:	653b      	str	r3, [r7, #80]	; 0x50
 8003f90:	4613      	mov	r3, r2
 8003f92:	eb42 0303 	adc.w	r3, r2, r3
 8003f96:	657b      	str	r3, [r7, #84]	; 0x54
 8003f98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fa0:	f7fc fc50 	bl	8000844 <__aeabi_uldivmod>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4b61      	ldr	r3, [pc, #388]	; (8004130 <UART_SetConfig+0x2d4>)
 8003faa:	fba3 2302 	umull	r2, r3, r3, r2
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	011c      	lsls	r4, r3, #4
 8003fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003fc4:	4642      	mov	r2, r8
 8003fc6:	464b      	mov	r3, r9
 8003fc8:	1891      	adds	r1, r2, r2
 8003fca:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fcc:	415b      	adcs	r3, r3
 8003fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fd4:	4641      	mov	r1, r8
 8003fd6:	eb12 0a01 	adds.w	sl, r2, r1
 8003fda:	4649      	mov	r1, r9
 8003fdc:	eb43 0b01 	adc.w	fp, r3, r1
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ff0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ff4:	4692      	mov	sl, r2
 8003ff6:	469b      	mov	fp, r3
 8003ff8:	4643      	mov	r3, r8
 8003ffa:	eb1a 0303 	adds.w	r3, sl, r3
 8003ffe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004002:	464b      	mov	r3, r9
 8004004:	eb4b 0303 	adc.w	r3, fp, r3
 8004008:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004018:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800401c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004020:	460b      	mov	r3, r1
 8004022:	18db      	adds	r3, r3, r3
 8004024:	643b      	str	r3, [r7, #64]	; 0x40
 8004026:	4613      	mov	r3, r2
 8004028:	eb42 0303 	adc.w	r3, r2, r3
 800402c:	647b      	str	r3, [r7, #68]	; 0x44
 800402e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004032:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004036:	f7fc fc05 	bl	8000844 <__aeabi_uldivmod>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4611      	mov	r1, r2
 8004040:	4b3b      	ldr	r3, [pc, #236]	; (8004130 <UART_SetConfig+0x2d4>)
 8004042:	fba3 2301 	umull	r2, r3, r3, r1
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	2264      	movs	r2, #100	; 0x64
 800404a:	fb02 f303 	mul.w	r3, r2, r3
 800404e:	1acb      	subs	r3, r1, r3
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004056:	4b36      	ldr	r3, [pc, #216]	; (8004130 <UART_SetConfig+0x2d4>)
 8004058:	fba3 2302 	umull	r2, r3, r3, r2
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004064:	441c      	add	r4, r3
 8004066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800406a:	2200      	movs	r2, #0
 800406c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004070:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004074:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004078:	4642      	mov	r2, r8
 800407a:	464b      	mov	r3, r9
 800407c:	1891      	adds	r1, r2, r2
 800407e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004080:	415b      	adcs	r3, r3
 8004082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004084:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004088:	4641      	mov	r1, r8
 800408a:	1851      	adds	r1, r2, r1
 800408c:	6339      	str	r1, [r7, #48]	; 0x30
 800408e:	4649      	mov	r1, r9
 8004090:	414b      	adcs	r3, r1
 8004092:	637b      	str	r3, [r7, #52]	; 0x34
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040a0:	4659      	mov	r1, fp
 80040a2:	00cb      	lsls	r3, r1, #3
 80040a4:	4651      	mov	r1, sl
 80040a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040aa:	4651      	mov	r1, sl
 80040ac:	00ca      	lsls	r2, r1, #3
 80040ae:	4610      	mov	r0, r2
 80040b0:	4619      	mov	r1, r3
 80040b2:	4603      	mov	r3, r0
 80040b4:	4642      	mov	r2, r8
 80040b6:	189b      	adds	r3, r3, r2
 80040b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040bc:	464b      	mov	r3, r9
 80040be:	460a      	mov	r2, r1
 80040c0:	eb42 0303 	adc.w	r3, r2, r3
 80040c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040dc:	460b      	mov	r3, r1
 80040de:	18db      	adds	r3, r3, r3
 80040e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040e2:	4613      	mov	r3, r2
 80040e4:	eb42 0303 	adc.w	r3, r2, r3
 80040e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040f2:	f7fc fba7 	bl	8000844 <__aeabi_uldivmod>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <UART_SetConfig+0x2d4>)
 80040fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	2164      	movs	r1, #100	; 0x64
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	3332      	adds	r3, #50	; 0x32
 800410e:	4a08      	ldr	r2, [pc, #32]	; (8004130 <UART_SetConfig+0x2d4>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	f003 0207 	and.w	r2, r3, #7
 800411a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4422      	add	r2, r4
 8004122:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004124:	e105      	b.n	8004332 <UART_SetConfig+0x4d6>
 8004126:	bf00      	nop
 8004128:	40011000 	.word	0x40011000
 800412c:	40011400 	.word	0x40011400
 8004130:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004138:	2200      	movs	r2, #0
 800413a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800413e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004142:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004146:	4642      	mov	r2, r8
 8004148:	464b      	mov	r3, r9
 800414a:	1891      	adds	r1, r2, r2
 800414c:	6239      	str	r1, [r7, #32]
 800414e:	415b      	adcs	r3, r3
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
 8004152:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004156:	4641      	mov	r1, r8
 8004158:	1854      	adds	r4, r2, r1
 800415a:	4649      	mov	r1, r9
 800415c:	eb43 0501 	adc.w	r5, r3, r1
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	00eb      	lsls	r3, r5, #3
 800416a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800416e:	00e2      	lsls	r2, r4, #3
 8004170:	4614      	mov	r4, r2
 8004172:	461d      	mov	r5, r3
 8004174:	4643      	mov	r3, r8
 8004176:	18e3      	adds	r3, r4, r3
 8004178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800417c:	464b      	mov	r3, r9
 800417e:	eb45 0303 	adc.w	r3, r5, r3
 8004182:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004192:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041a2:	4629      	mov	r1, r5
 80041a4:	008b      	lsls	r3, r1, #2
 80041a6:	4621      	mov	r1, r4
 80041a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ac:	4621      	mov	r1, r4
 80041ae:	008a      	lsls	r2, r1, #2
 80041b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041b4:	f7fc fb46 	bl	8000844 <__aeabi_uldivmod>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4b60      	ldr	r3, [pc, #384]	; (8004340 <UART_SetConfig+0x4e4>)
 80041be:	fba3 2302 	umull	r2, r3, r3, r2
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	011c      	lsls	r4, r3, #4
 80041c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041d8:	4642      	mov	r2, r8
 80041da:	464b      	mov	r3, r9
 80041dc:	1891      	adds	r1, r2, r2
 80041de:	61b9      	str	r1, [r7, #24]
 80041e0:	415b      	adcs	r3, r3
 80041e2:	61fb      	str	r3, [r7, #28]
 80041e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041e8:	4641      	mov	r1, r8
 80041ea:	1851      	adds	r1, r2, r1
 80041ec:	6139      	str	r1, [r7, #16]
 80041ee:	4649      	mov	r1, r9
 80041f0:	414b      	adcs	r3, r1
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004200:	4659      	mov	r1, fp
 8004202:	00cb      	lsls	r3, r1, #3
 8004204:	4651      	mov	r1, sl
 8004206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800420a:	4651      	mov	r1, sl
 800420c:	00ca      	lsls	r2, r1, #3
 800420e:	4610      	mov	r0, r2
 8004210:	4619      	mov	r1, r3
 8004212:	4603      	mov	r3, r0
 8004214:	4642      	mov	r2, r8
 8004216:	189b      	adds	r3, r3, r2
 8004218:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800421c:	464b      	mov	r3, r9
 800421e:	460a      	mov	r2, r1
 8004220:	eb42 0303 	adc.w	r3, r2, r3
 8004224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	67bb      	str	r3, [r7, #120]	; 0x78
 8004232:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004240:	4649      	mov	r1, r9
 8004242:	008b      	lsls	r3, r1, #2
 8004244:	4641      	mov	r1, r8
 8004246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800424a:	4641      	mov	r1, r8
 800424c:	008a      	lsls	r2, r1, #2
 800424e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004252:	f7fc faf7 	bl	8000844 <__aeabi_uldivmod>
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	4b39      	ldr	r3, [pc, #228]	; (8004340 <UART_SetConfig+0x4e4>)
 800425c:	fba3 1302 	umull	r1, r3, r3, r2
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	2164      	movs	r1, #100	; 0x64
 8004264:	fb01 f303 	mul.w	r3, r1, r3
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	3332      	adds	r3, #50	; 0x32
 800426e:	4a34      	ldr	r2, [pc, #208]	; (8004340 <UART_SetConfig+0x4e4>)
 8004270:	fba2 2303 	umull	r2, r3, r2, r3
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800427a:	441c      	add	r4, r3
 800427c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004280:	2200      	movs	r2, #0
 8004282:	673b      	str	r3, [r7, #112]	; 0x70
 8004284:	677a      	str	r2, [r7, #116]	; 0x74
 8004286:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800428a:	4642      	mov	r2, r8
 800428c:	464b      	mov	r3, r9
 800428e:	1891      	adds	r1, r2, r2
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	415b      	adcs	r3, r3
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800429a:	4641      	mov	r1, r8
 800429c:	1851      	adds	r1, r2, r1
 800429e:	6039      	str	r1, [r7, #0]
 80042a0:	4649      	mov	r1, r9
 80042a2:	414b      	adcs	r3, r1
 80042a4:	607b      	str	r3, [r7, #4]
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042b2:	4659      	mov	r1, fp
 80042b4:	00cb      	lsls	r3, r1, #3
 80042b6:	4651      	mov	r1, sl
 80042b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042bc:	4651      	mov	r1, sl
 80042be:	00ca      	lsls	r2, r1, #3
 80042c0:	4610      	mov	r0, r2
 80042c2:	4619      	mov	r1, r3
 80042c4:	4603      	mov	r3, r0
 80042c6:	4642      	mov	r2, r8
 80042c8:	189b      	adds	r3, r3, r2
 80042ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80042cc:	464b      	mov	r3, r9
 80042ce:	460a      	mov	r2, r1
 80042d0:	eb42 0303 	adc.w	r3, r2, r3
 80042d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	663b      	str	r3, [r7, #96]	; 0x60
 80042e0:	667a      	str	r2, [r7, #100]	; 0x64
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80042ee:	4649      	mov	r1, r9
 80042f0:	008b      	lsls	r3, r1, #2
 80042f2:	4641      	mov	r1, r8
 80042f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042f8:	4641      	mov	r1, r8
 80042fa:	008a      	lsls	r2, r1, #2
 80042fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004300:	f7fc faa0 	bl	8000844 <__aeabi_uldivmod>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4b0d      	ldr	r3, [pc, #52]	; (8004340 <UART_SetConfig+0x4e4>)
 800430a:	fba3 1302 	umull	r1, r3, r3, r2
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	2164      	movs	r1, #100	; 0x64
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	3332      	adds	r3, #50	; 0x32
 800431c:	4a08      	ldr	r2, [pc, #32]	; (8004340 <UART_SetConfig+0x4e4>)
 800431e:	fba2 2303 	umull	r2, r3, r2, r3
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	f003 020f 	and.w	r2, r3, #15
 8004328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4422      	add	r2, r4
 8004330:	609a      	str	r2, [r3, #8]
}
 8004332:	bf00      	nop
 8004334:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004338:	46bd      	mov	sp, r7
 800433a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800433e:	bf00      	nop
 8004340:	51eb851f 	.word	0x51eb851f

08004344 <__libc_init_array>:
 8004344:	b570      	push	{r4, r5, r6, lr}
 8004346:	4d0d      	ldr	r5, [pc, #52]	; (800437c <__libc_init_array+0x38>)
 8004348:	4c0d      	ldr	r4, [pc, #52]	; (8004380 <__libc_init_array+0x3c>)
 800434a:	1b64      	subs	r4, r4, r5
 800434c:	10a4      	asrs	r4, r4, #2
 800434e:	2600      	movs	r6, #0
 8004350:	42a6      	cmp	r6, r4
 8004352:	d109      	bne.n	8004368 <__libc_init_array+0x24>
 8004354:	4d0b      	ldr	r5, [pc, #44]	; (8004384 <__libc_init_array+0x40>)
 8004356:	4c0c      	ldr	r4, [pc, #48]	; (8004388 <__libc_init_array+0x44>)
 8004358:	f000 f820 	bl	800439c <_init>
 800435c:	1b64      	subs	r4, r4, r5
 800435e:	10a4      	asrs	r4, r4, #2
 8004360:	2600      	movs	r6, #0
 8004362:	42a6      	cmp	r6, r4
 8004364:	d105      	bne.n	8004372 <__libc_init_array+0x2e>
 8004366:	bd70      	pop	{r4, r5, r6, pc}
 8004368:	f855 3b04 	ldr.w	r3, [r5], #4
 800436c:	4798      	blx	r3
 800436e:	3601      	adds	r6, #1
 8004370:	e7ee      	b.n	8004350 <__libc_init_array+0xc>
 8004372:	f855 3b04 	ldr.w	r3, [r5], #4
 8004376:	4798      	blx	r3
 8004378:	3601      	adds	r6, #1
 800437a:	e7f2      	b.n	8004362 <__libc_init_array+0x1e>
 800437c:	080043d4 	.word	0x080043d4
 8004380:	080043d4 	.word	0x080043d4
 8004384:	080043d4 	.word	0x080043d4
 8004388:	080043d8 	.word	0x080043d8

0800438c <memset>:
 800438c:	4402      	add	r2, r0
 800438e:	4603      	mov	r3, r0
 8004390:	4293      	cmp	r3, r2
 8004392:	d100      	bne.n	8004396 <memset+0xa>
 8004394:	4770      	bx	lr
 8004396:	f803 1b01 	strb.w	r1, [r3], #1
 800439a:	e7f9      	b.n	8004390 <memset+0x4>

0800439c <_init>:
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439e:	bf00      	nop
 80043a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a2:	bc08      	pop	{r3}
 80043a4:	469e      	mov	lr, r3
 80043a6:	4770      	bx	lr

080043a8 <_fini>:
 80043a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043aa:	bf00      	nop
 80043ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ae:	bc08      	pop	{r3}
 80043b0:	469e      	mov	lr, r3
 80043b2:	4770      	bx	lr
