
W2812B_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000930c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  080095a4  080095a4  000195a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098e4  080098e4  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080098e4  080098e4  000198e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098ec  080098ec  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098ec  080098ec  000198ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098f0  080098f0  000198f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080098f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08009904  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08009964  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006f4  240000d0  080099c4  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  240007c4  080099c4  000207c4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a5a2  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002fc8  00000000  00000000  0003a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012a0  00000000  00000000  0003d668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001188  00000000  00000000  0003e908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ae80  00000000  00000000  0003fa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000181ea  00000000  00000000  0007a910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001822cb  00000000  00000000  00092afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00214dc5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004f40  00000000  00000000  00214e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800958c 	.word	0x0800958c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800958c 	.word	0x0800958c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <SystemInit+0x104>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <SystemInit+0x104>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b3b      	ldr	r3, [pc, #236]	; (80006e0 <SystemInit+0x104>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a3a      	ldr	r2, [pc, #232]	; (80006e0 <SystemInit+0x104>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b39      	ldr	r3, [pc, #228]	; (80006e4 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b36      	ldr	r3, [pc, #216]	; (80006e4 <SystemInit+0x108>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a34      	ldr	r2, [pc, #208]	; (80006e4 <SystemInit+0x108>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b33      	ldr	r3, [pc, #204]	; (80006e8 <SystemInit+0x10c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a32      	ldr	r2, [pc, #200]	; (80006e8 <SystemInit+0x10c>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <SystemInit+0x10c>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2f      	ldr	r3, [pc, #188]	; (80006e8 <SystemInit+0x10c>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492e      	ldr	r1, [pc, #184]	; (80006e8 <SystemInit+0x10c>)
 8000630:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <SystemInit+0x110>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemInit+0x108>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a26      	ldr	r2, [pc, #152]	; (80006e4 <SystemInit+0x108>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <SystemInit+0x10c>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <SystemInit+0x10c>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000666:	4a22      	ldr	r2, [pc, #136]	; (80006f0 <SystemInit+0x114>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SystemInit+0x10c>)
 800066c:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemInit+0x118>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <SystemInit+0x10c>)
 8000672:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemInit+0x11c>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <SystemInit+0x10c>)
 800067e:	4a1e      	ldr	r2, [pc, #120]	; (80006f8 <SystemInit+0x11c>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <SystemInit+0x10c>)
 800068a:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <SystemInit+0x11c>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <SystemInit+0x10c>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <SystemInit+0x10c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <SystemInit+0x10c>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <SystemInit+0x10c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <SystemInit+0x120>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a14      	ldr	r2, [pc, #80]	; (80006fc <SystemInit+0x120>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <SystemInit+0x124>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <SystemInit+0x128>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x12c>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <SystemInit+0x130>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006ce:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <SystemInit+0x104>)
 80006d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d4:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	52002000 	.word	0x52002000
 80006e8:	58024400 	.word	0x58024400
 80006ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f0:	02020200 	.word	0x02020200
 80006f4:	01ff0000 	.word	0x01ff0000
 80006f8:	01010280 	.word	0x01010280
 80006fc:	580000c0 	.word	0x580000c0
 8000700:	5c001000 	.word	0x5c001000
 8000704:	ffff0000 	.word	0xffff0000
 8000708:	51008108 	.word	0x51008108
 800070c:	52004000 	.word	0x52004000

08000710 <byteToW2812BEncode1>:

uint8_t LEDBuffer[NUM_LED_WS2812S*9 + 20];


void byteToW2812BEncode1(uint8_t dataIn, uint8_t* Array3Output)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	71fb      	strb	r3, [r7, #7]
	memcpy(Array3Output,&W2812LUT[dataIn*3],3);
 800071c:	79fa      	ldrb	r2, [r7, #7]
 800071e:	4613      	mov	r3, r2
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	4413      	add	r3, r2
 8000724:	4a05      	ldr	r2, [pc, #20]	; (800073c <byteToW2812BEncode1+0x2c>)
 8000726:	4413      	add	r3, r2
 8000728:	2203      	movs	r2, #3
 800072a:	4619      	mov	r1, r3
 800072c:	6838      	ldr	r0, [r7, #0]
 800072e:	f008 ff17 	bl	8009560 <memcpy>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	080095b4 	.word	0x080095b4

08000740 <W2812B_Init>:
					| (((dataIn >> 1) & 0x1) << 4) | (((dataIn ) & 0x1) << 1);

}

void W2812B_Init(SPI_HandleTypeDef *hspi)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit_DMA(hspi,LEDBuffer,NUM_LED_WS2812S  * 9 + 20);
 8000748:	225c      	movs	r2, #92	; 0x5c
 800074a:	4904      	ldr	r1, [pc, #16]	; (800075c <W2812B_Init+0x1c>)
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f006 ff79 	bl	8007644 <HAL_SPI_Transmit_DMA>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	240000ec 	.word	0x240000ec

08000760 <W2812B_UpdateData>:

void W2812B_UpdateData(W2812BStructure *input)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	for(int i = 0;i<NUM_LED_WS2812S;i++)
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	e035      	b.n	80007da <W2812B_UpdateData+0x7a>
	{
		byteToW2812BEncode1(input[i].G,&LEDBuffer[20+i*9]);
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	4613      	mov	r3, r2
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	4413      	add	r3, r2
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	7858      	ldrb	r0, [r3, #1]
 800077c:	68fa      	ldr	r2, [r7, #12]
 800077e:	4613      	mov	r3, r2
 8000780:	00db      	lsls	r3, r3, #3
 8000782:	4413      	add	r3, r2
 8000784:	3314      	adds	r3, #20
 8000786:	4a19      	ldr	r2, [pc, #100]	; (80007ec <W2812B_UpdateData+0x8c>)
 8000788:	4413      	add	r3, r2
 800078a:	4619      	mov	r1, r3
 800078c:	f7ff ffc0 	bl	8000710 <byteToW2812BEncode1>
		byteToW2812BEncode1(input[i].R,&LEDBuffer[20+i*9+3]);
 8000790:	68fa      	ldr	r2, [r7, #12]
 8000792:	4613      	mov	r3, r2
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	4413      	add	r3, r2
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	4413      	add	r3, r2
 800079c:	7818      	ldrb	r0, [r3, #0]
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	4613      	mov	r3, r2
 80007a2:	00db      	lsls	r3, r3, #3
 80007a4:	4413      	add	r3, r2
 80007a6:	3317      	adds	r3, #23
 80007a8:	4a10      	ldr	r2, [pc, #64]	; (80007ec <W2812B_UpdateData+0x8c>)
 80007aa:	4413      	add	r3, r2
 80007ac:	4619      	mov	r1, r3
 80007ae:	f7ff ffaf 	bl	8000710 <byteToW2812BEncode1>
		byteToW2812BEncode1(input[i].B,&LEDBuffer[20+i*9+6]);
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	4613      	mov	r3, r2
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	4413      	add	r3, r2
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	7898      	ldrb	r0, [r3, #2]
 80007c0:	68fa      	ldr	r2, [r7, #12]
 80007c2:	4613      	mov	r3, r2
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	4413      	add	r3, r2
 80007c8:	331a      	adds	r3, #26
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <W2812B_UpdateData+0x8c>)
 80007cc:	4413      	add	r3, r2
 80007ce:	4619      	mov	r1, r3
 80007d0:	f7ff ff9e 	bl	8000710 <byteToW2812BEncode1>
	for(int i = 0;i<NUM_LED_WS2812S;i++)
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	3301      	adds	r3, #1
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	2b07      	cmp	r3, #7
 80007de:	ddc6      	ble.n	800076e <W2812B_UpdateData+0xe>
	}
}
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	240000ec 	.word	0x240000ec

080007f0 <HToRGB>:
void HToRGB(int h,W2812BStructure *input)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
	uint8_t mode= h/256;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	da00      	bge.n	8000802 <HToRGB+0x12>
 8000800:	33ff      	adds	r3, #255	; 0xff
 8000802:	121b      	asrs	r3, r3, #8
 8000804:	73fb      	strb	r3, [r7, #15]
	uint8_t state = h%256;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	425a      	negs	r2, r3
 800080a:	b2db      	uxtb	r3, r3
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	bf58      	it	pl
 8000810:	4253      	negpl	r3, r2
 8000812:	73bb      	strb	r3, [r7, #14]

	switch (mode) {
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	2b04      	cmp	r3, #4
 8000818:	d842      	bhi.n	80008a0 <HToRGB+0xb0>
 800081a:	a201      	add	r2, pc, #4	; (adr r2, 8000820 <HToRGB+0x30>)
 800081c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000820:	08000835 	.word	0x08000835
 8000824:	08000849 	.word	0x08000849
 8000828:	08000861 	.word	0x08000861
 800082c:	08000875 	.word	0x08000875
 8000830:	0800088d 	.word	0x0800088d
	case 0:
		input->B = 0;
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	2200      	movs	r2, #0
 8000838:	709a      	strb	r2, [r3, #2]
		input->G = state;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	7bba      	ldrb	r2, [r7, #14]
 800083e:	705a      	strb	r2, [r3, #1]
		input->R = 255;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	22ff      	movs	r2, #255	; 0xff
 8000844:	701a      	strb	r2, [r3, #0]
		break;
 8000846:	e037      	b.n	80008b8 <HToRGB+0xc8>
	case 1:
		input->B = 0;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	2200      	movs	r2, #0
 800084c:	709a      	strb	r2, [r3, #2]
		input->G = 255;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	22ff      	movs	r2, #255	; 0xff
 8000852:	705a      	strb	r2, [r3, #1]
		input->R = 255-state;
 8000854:	7bbb      	ldrb	r3, [r7, #14]
 8000856:	43db      	mvns	r3, r3
 8000858:	b2da      	uxtb	r2, r3
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	701a      	strb	r2, [r3, #0]
		break;
 800085e:	e02b      	b.n	80008b8 <HToRGB+0xc8>
	case 2:
		input->B = state;
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	7bba      	ldrb	r2, [r7, #14]
 8000864:	709a      	strb	r2, [r3, #2]
		input->G = 255;
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	22ff      	movs	r2, #255	; 0xff
 800086a:	705a      	strb	r2, [r3, #1]
		input->R = 0;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
		break;
 8000872:	e021      	b.n	80008b8 <HToRGB+0xc8>
	case 3:
		input->B = 255;
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	22ff      	movs	r2, #255	; 0xff
 8000878:	709a      	strb	r2, [r3, #2]
		input->G = 255-state;
 800087a:	7bbb      	ldrb	r3, [r7, #14]
 800087c:	43db      	mvns	r3, r3
 800087e:	b2da      	uxtb	r2, r3
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	705a      	strb	r2, [r3, #1]
		input->R = 0;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
		break;
 800088a:	e015      	b.n	80008b8 <HToRGB+0xc8>
	case 4:
		input->B = 255;
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	22ff      	movs	r2, #255	; 0xff
 8000890:	709a      	strb	r2, [r3, #2]
		input->G = 0;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	2200      	movs	r2, #0
 8000896:	705a      	strb	r2, [r3, #1]
		input->R = state;
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	7bba      	ldrb	r2, [r7, #14]
 800089c:	701a      	strb	r2, [r3, #0]
		break;
 800089e:	e00b      	b.n	80008b8 <HToRGB+0xc8>
	default:
	case 5:
		input->B = 255-state;
 80008a0:	7bbb      	ldrb	r3, [r7, #14]
 80008a2:	43db      	mvns	r3, r3
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	709a      	strb	r2, [r3, #2]
		input->G = 0;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	2200      	movs	r2, #0
 80008ae:	705a      	strb	r2, [r3, #1]
		input->R = 255;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	22ff      	movs	r2, #255	; 0xff
 80008b4:	701a      	strb	r2, [r3, #0]
		break;
 80008b6:	bf00      	nop


	}
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008ca:	4b5d      	ldr	r3, [pc, #372]	; (8000a40 <main+0x17c>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d11b      	bne.n	800090e <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008d6:	f3bf 8f4f 	dsb	sy
}
 80008da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008dc:	f3bf 8f6f 	isb	sy
}
 80008e0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008e2:	4b57      	ldr	r3, [pc, #348]	; (8000a40 <main+0x17c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008ea:	f3bf 8f4f 	dsb	sy
}
 80008ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008f0:	f3bf 8f6f 	isb	sy
}
 80008f4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008f6:	4b52      	ldr	r3, [pc, #328]	; (8000a40 <main+0x17c>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a51      	ldr	r2, [pc, #324]	; (8000a40 <main+0x17c>)
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000902:	f3bf 8f4f 	dsb	sy
}
 8000906:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000908:	f3bf 8f6f 	isb	sy
}
 800090c:	e000      	b.n	8000910 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800090e:	bf00      	nop
  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000910:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000914:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000916:	bf00      	nop
 8000918:	4b4a      	ldr	r3, [pc, #296]	; (8000a44 <main+0x180>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000920:	2b00      	cmp	r3, #0
 8000922:	d004      	beq.n	800092e <main+0x6a>
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	1e5a      	subs	r2, r3, #1
 8000928:	60fa      	str	r2, [r7, #12]
 800092a:	2b00      	cmp	r3, #0
 800092c:	dcf4      	bgt.n	8000918 <main+0x54>
  if ( timeout < 0 )
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2b00      	cmp	r3, #0
 8000932:	da01      	bge.n	8000938 <main+0x74>
  {
  Error_Handler();
 8000934:	f000 fabc 	bl	8000eb0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000938:	f000 fdc4 	bl	80014c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093c:	f000 f88e 	bl	8000a5c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000940:	4b40      	ldr	r3, [pc, #256]	; (8000a44 <main+0x180>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000946:	4a3f      	ldr	r2, [pc, #252]	; (8000a44 <main+0x180>)
 8000948:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800094c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000950:	4b3c      	ldr	r3, [pc, #240]	; (8000a44 <main+0x180>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800095e:	2000      	movs	r0, #0
 8000960:	f004 f88c 	bl	8004a7c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000964:	2100      	movs	r1, #0
 8000966:	2000      	movs	r0, #0
 8000968:	f004 f8a2 	bl	8004ab0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800096c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000970:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000972:	bf00      	nop
 8000974:	4b33      	ldr	r3, [pc, #204]	; (8000a44 <main+0x180>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800097c:	2b00      	cmp	r3, #0
 800097e:	d104      	bne.n	800098a <main+0xc6>
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	1e5a      	subs	r2, r3, #1
 8000984:	60fa      	str	r2, [r7, #12]
 8000986:	2b00      	cmp	r3, #0
 8000988:	dcf4      	bgt.n	8000974 <main+0xb0>
if ( timeout < 0 )
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2b00      	cmp	r3, #0
 800098e:	da01      	bge.n	8000994 <main+0xd0>
{
Error_Handler();
 8000990:	f000 fa8e 	bl	8000eb0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000994:	f000 fa26 	bl	8000de4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000998:	f000 f8e4 	bl	8000b64 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800099c:	f000 f984 	bl	8000ca8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009a0:	f000 f9ce 	bl	8000d40 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 80009a4:	f000 f9fe 	bl	8000da4 <MX_DMA_Init>
  MX_SPI1_Init();
 80009a8:	f000 f928 	bl	8000bfc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  GPIOB->OTYPER = GPIOB->OTYPER | GPIO_PIN_5; // set output  open drain
 80009ac:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <main+0x184>)
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	4a25      	ldr	r2, [pc, #148]	; (8000a48 <main+0x184>)
 80009b2:	f043 0320 	orr.w	r3, r3, #32
 80009b6:	6053      	str	r3, [r2, #4]
  W2812B_Init(&hspi1);
 80009b8:	4824      	ldr	r0, [pc, #144]	; (8000a4c <main+0x188>)
 80009ba:	f7ff fec1 	bl	8000740 <W2812B_Init>
	  static int h =0;
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_Delay(1);
 80009be:	2001      	movs	r0, #1
 80009c0:	f000 fe12 	bl	80015e8 <HAL_Delay>
		for (int i = 0; i < 8; i++) {
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	e01f      	b.n	8000a0a <main+0x146>

			HToRGB((h + 192*i) % 1536, &LED[i]);
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	4613      	mov	r3, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	4413      	add	r3, r2
 80009d2:	019b      	lsls	r3, r3, #6
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <main+0x18c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	441a      	add	r2, r3
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <main+0x190>)
 80009de:	fb83 1302 	smull	r1, r3, r3, r2
 80009e2:	1219      	asrs	r1, r3, #8
 80009e4:	17d3      	asrs	r3, r2, #31
 80009e6:	1ac8      	subs	r0, r1, r3
 80009e8:	4603      	mov	r3, r0
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	4403      	add	r3, r0
 80009ee:	025b      	lsls	r3, r3, #9
 80009f0:	1ad0      	subs	r0, r2, r3
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	4613      	mov	r3, r2
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	4413      	add	r3, r2
 80009fa:	4a17      	ldr	r2, [pc, #92]	; (8000a58 <main+0x194>)
 80009fc:	4413      	add	r3, r2
 80009fe:	4619      	mov	r1, r3
 8000a00:	f7ff fef6 	bl	80007f0 <HToRGB>
		for (int i = 0; i < 8; i++) {
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	3301      	adds	r3, #1
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	2b07      	cmp	r3, #7
 8000a0e:	dddc      	ble.n	80009ca <main+0x106>
		}


		h++;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <main+0x18c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <main+0x18c>)
 8000a18:	6013      	str	r3, [r2, #0]
		h%=1536;
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <main+0x18c>)
 8000a1c:	6819      	ldr	r1, [r3, #0]
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <main+0x190>)
 8000a20:	fb83 2301 	smull	r2, r3, r3, r1
 8000a24:	121a      	asrs	r2, r3, #8
 8000a26:	17cb      	asrs	r3, r1, #31
 8000a28:	1ad2      	subs	r2, r2, r3
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	4413      	add	r3, r2
 8000a30:	025b      	lsls	r3, r3, #9
 8000a32:	1aca      	subs	r2, r1, r3
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <main+0x18c>)
 8000a36:	601a      	str	r2, [r3, #0]
	  W2812B_UpdateData(LED);
 8000a38:	4807      	ldr	r0, [pc, #28]	; (8000a58 <main+0x194>)
 8000a3a:	f7ff fe91 	bl	8000760 <W2812B_UpdateData>
  {
 8000a3e:	e7be      	b.n	80009be <main+0xfa>
 8000a40:	e000ed00 	.word	0xe000ed00
 8000a44:	58024400 	.word	0x58024400
 8000a48:	58020400 	.word	0x58020400
 8000a4c:	24000204 	.word	0x24000204
 8000a50:	240007b4 	.word	0x240007b4
 8000a54:	2aaaaaab 	.word	0x2aaaaaab
 8000a58:	2400079c 	.word	0x2400079c

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b09c      	sub	sp, #112	; 0x70
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a66:	224c      	movs	r2, #76	; 0x4c
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f008 fd86 	bl	800957c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2220      	movs	r2, #32
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f008 fd80 	bl	800957c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a7c:	2004      	movs	r0, #4
 8000a7e:	f004 f973 	bl	8004d68 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <SystemClock_Config+0xfc>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	4a33      	ldr	r2, [pc, #204]	; (8000b58 <SystemClock_Config+0xfc>)
 8000a8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a90:	6193      	str	r3, [r2, #24]
 8000a92:	4b31      	ldr	r3, [pc, #196]	; (8000b58 <SystemClock_Config+0xfc>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <SystemClock_Config+0x100>)
 8000a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa0:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <SystemClock_Config+0x100>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000aa8:	4b2c      	ldr	r3, [pc, #176]	; (8000b5c <SystemClock_Config+0x100>)
 8000aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ab4:	bf00      	nop
 8000ab6:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <SystemClock_Config+0xfc>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ac2:	d1f8      	bne.n	8000ab6 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000ac4:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <SystemClock_Config+0x104>)
 8000ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac8:	f023 0303 	bic.w	r3, r3, #3
 8000acc:	4a24      	ldr	r2, [pc, #144]	; (8000b60 <SystemClock_Config+0x104>)
 8000ace:	f043 0302 	orr.w	r3, r3, #2
 8000ad2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ad8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000aea:	2378      	movs	r3, #120	; 0x78
 8000aec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000af2:	2307      	movs	r3, #7
 8000af4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000afa:	230c      	movs	r3, #12
 8000afc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f004 f996 	bl	8004e3c <HAL_RCC_OscConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000b16:	f000 f9cb 	bl	8000eb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1a:	233f      	movs	r3, #63	; 0x3f
 8000b1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b26:	2308      	movs	r3, #8
 8000b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b2a:	2340      	movs	r3, #64	; 0x40
 8000b2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b2e:	2340      	movs	r3, #64	; 0x40
 8000b30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b36:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b38:	2340      	movs	r3, #64	; 0x40
 8000b3a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2104      	movs	r1, #4
 8000b40:	4618      	mov	r0, r3
 8000b42:	f004 fd89 	bl	8005658 <HAL_RCC_ClockConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000b4c:	f000 f9b0 	bl	8000eb0 <Error_Handler>
  }
}
 8000b50:	bf00      	nop
 8000b52:	3770      	adds	r7, #112	; 0x70
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	58024800 	.word	0x58024800
 8000b5c:	58000400 	.word	0x58000400
 8000b60:	58024400 	.word	0x58024400

08000b64 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b68:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <MX_ETH_Init+0x80>)
 8000b6a:	4a1f      	ldr	r2, [pc, #124]	; (8000be8 <MX_ETH_Init+0x84>)
 8000b6c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <MX_ETH_Init+0x88>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_ETH_Init+0x88>)
 8000b76:	2280      	movs	r2, #128	; 0x80
 8000b78:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <MX_ETH_Init+0x88>)
 8000b7c:	22e1      	movs	r2, #225	; 0xe1
 8000b7e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_ETH_Init+0x88>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <MX_ETH_Init+0x88>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_ETH_Init+0x88>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b92:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_ETH_Init+0x80>)
 8000b94:	4a15      	ldr	r2, [pc, #84]	; (8000bec <MX_ETH_Init+0x88>)
 8000b96:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <MX_ETH_Init+0x80>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_ETH_Init+0x80>)
 8000ba0:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <MX_ETH_Init+0x8c>)
 8000ba2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_ETH_Init+0x80>)
 8000ba6:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <MX_ETH_Init+0x90>)
 8000ba8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_ETH_Init+0x80>)
 8000bac:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000bb0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000bb2:	480c      	ldr	r0, [pc, #48]	; (8000be4 <MX_ETH_Init+0x80>)
 8000bb4:	f003 f996 	bl	8003ee4 <HAL_ETH_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000bbe:	f000 f977 	bl	8000eb0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000bc2:	2234      	movs	r2, #52	; 0x34
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_ETH_Init+0x94>)
 8000bc8:	f008 fcd8 	bl	800957c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <MX_ETH_Init+0x94>)
 8000bce:	2221      	movs	r2, #33	; 0x21
 8000bd0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_ETH_Init+0x94>)
 8000bd4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000bd8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <MX_ETH_Init+0x94>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2400017c 	.word	0x2400017c
 8000be8:	40028000 	.word	0x40028000
 8000bec:	240007b8 	.word	0x240007b8
 8000bf0:	24000070 	.word	0x24000070
 8000bf4:	24000010 	.word	0x24000010
 8000bf8:	24000148 	.word	0x24000148

08000bfc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c00:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c02:	4a28      	ldr	r2, [pc, #160]	; (8000ca4 <MX_SPI1_Init+0xa8>)
 8000c04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c06:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c08:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c0e:	4b24      	ldr	r3, [pc, #144]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c14:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c16:	2207      	movs	r2, #7
 8000c18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c1a:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c20:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c26:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c28:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c8e:	f006 fbd7 	bl	8007440 <HAL_SPI_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000c98:	f000 f90a 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	24000204 	.word	0x24000204
 8000ca4:	40013000 	.word	0x40013000

08000ca8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cac:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cae:	4a23      	ldr	r2, [pc, #140]	; (8000d3c <MX_USART3_UART_Init+0x94>)
 8000cb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cce:	220c      	movs	r2, #12
 8000cd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cf0:	4811      	ldr	r0, [pc, #68]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cf2:	f007 f928 	bl	8007f46 <HAL_UART_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cfc:	f000 f8d8 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d00:	2100      	movs	r1, #0
 8000d02:	480d      	ldr	r0, [pc, #52]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000d04:	f008 f880 	bl	8008e08 <HAL_UARTEx_SetTxFifoThreshold>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d0e:	f000 f8cf 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d12:	2100      	movs	r1, #0
 8000d14:	4808      	ldr	r0, [pc, #32]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000d16:	f008 f8b5 	bl	8008e84 <HAL_UARTEx_SetRxFifoThreshold>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d20:	f000 f8c6 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000d26:	f008 f836 	bl	8008d96 <HAL_UARTEx_DisableFifoMode>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d30:	f000 f8be 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	24000304 	.word	0x24000304
 8000d3c:	40004800 	.word	0x40004800

08000d40 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d44:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d46:	4a16      	ldr	r2, [pc, #88]	; (8000da0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000d48:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d4c:	2209      	movs	r2, #9
 8000d4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d52:	2202      	movs	r2, #2
 8000d54:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d5e:	2202      	movs	r2, #2
 8000d60:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d88:	f003 fea6 	bl	8004ad8 <HAL_PCD_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d92:	f000 f88d 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	24000394 	.word	0x24000394
 8000da0:	40080000 	.word	0x40080000

08000da4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <MX_DMA_Init+0x3c>)
 8000dac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000db0:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <MX_DMA_Init+0x3c>)
 8000db2:	f043 0302 	orr.w	r3, r3, #2
 8000db6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_DMA_Init+0x3c>)
 8000dbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2038      	movs	r0, #56	; 0x38
 8000dce:	f000 fd2a 	bl	8001826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000dd2:	2038      	movs	r0, #56	; 0x38
 8000dd4:	f000 fd41 	bl	800185a <HAL_NVIC_EnableIRQ>

}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	58024400 	.word	0x58024400

08000de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	4b30      	ldr	r3, [pc, #192]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df0:	4a2e      	ldr	r2, [pc, #184]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfa:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e08:	4b28      	ldr	r3, [pc, #160]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0e:	4a27      	ldr	r2, [pc, #156]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e18:	4b24      	ldr	r3, [pc, #144]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	4b21      	ldr	r3, [pc, #132]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2c:	4a1f      	ldr	r2, [pc, #124]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e36:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4a:	4a18      	ldr	r2, [pc, #96]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e54:	4b15      	ldr	r3, [pc, #84]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e62:	4b12      	ldr	r3, [pc, #72]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e68:	4a10      	ldr	r2, [pc, #64]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e6a:	f043 0308 	orr.w	r3, r3, #8
 8000e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e86:	4a09      	ldr	r2, [pc, #36]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_GPIO_Init+0xc8>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]

}
 8000e9e:	bf00      	nop
 8000ea0:	371c      	adds	r7, #28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	58024400 	.word	0x58024400

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <Error_Handler+0x8>
	...

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <HAL_MspInit+0x30>)
 8000ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ec8:	4a08      	ldr	r2, [pc, #32]	; (8000eec <HAL_MspInit+0x30>)
 8000eca:	f043 0302 	orr.w	r3, r3, #2
 8000ece:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_MspInit+0x30>)
 8000ed4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	58024400 	.word	0x58024400

08000ef0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08e      	sub	sp, #56	; 0x38
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a59      	ldr	r2, [pc, #356]	; (8001074 <HAL_ETH_MspInit+0x184>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	f040 80ab 	bne.w	800106a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f14:	4b58      	ldr	r3, [pc, #352]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f1a:	4a57      	ldr	r2, [pc, #348]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f20:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f24:	4b54      	ldr	r3, [pc, #336]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f2e:	623b      	str	r3, [r7, #32]
 8000f30:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f32:	4b51      	ldr	r3, [pc, #324]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f38:	4a4f      	ldr	r2, [pc, #316]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f3e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f42:	4b4d      	ldr	r3, [pc, #308]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f50:	4b49      	ldr	r3, [pc, #292]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f56:	4a48      	ldr	r2, [pc, #288]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f60:	4b45      	ldr	r3, [pc, #276]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6a:	61bb      	str	r3, [r7, #24]
 8000f6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	4b42      	ldr	r3, [pc, #264]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f74:	4a40      	ldr	r2, [pc, #256]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7e:	4b3e      	ldr	r3, [pc, #248]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b3a      	ldr	r3, [pc, #232]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f92:	4a39      	ldr	r2, [pc, #228]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9c:	4b36      	ldr	r3, [pc, #216]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4b33      	ldr	r3, [pc, #204]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb0:	4a31      	ldr	r2, [pc, #196]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000fb2:	f043 0302 	orr.w	r3, r3, #2
 8000fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fba:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	4a2a      	ldr	r2, [pc, #168]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd8:	4b27      	ldr	r3, [pc, #156]	; (8001078 <HAL_ETH_MspInit+0x188>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000fe6:	2332      	movs	r3, #50	; 0x32
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff6:	230b      	movs	r3, #11
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	481e      	ldr	r0, [pc, #120]	; (800107c <HAL_ETH_MspInit+0x18c>)
 8001002:	f003 fb8b 	bl	800471c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001006:	2386      	movs	r3, #134	; 0x86
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001016:	230b      	movs	r3, #11
 8001018:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101e:	4619      	mov	r1, r3
 8001020:	4817      	ldr	r0, [pc, #92]	; (8001080 <HAL_ETH_MspInit+0x190>)
 8001022:	f003 fb7b 	bl	800471c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001038:	230b      	movs	r3, #11
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001040:	4619      	mov	r1, r3
 8001042:	4810      	ldr	r0, [pc, #64]	; (8001084 <HAL_ETH_MspInit+0x194>)
 8001044:	f003 fb6a 	bl	800471c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001048:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800105a:	230b      	movs	r3, #11
 800105c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800105e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001062:	4619      	mov	r1, r3
 8001064:	4808      	ldr	r0, [pc, #32]	; (8001088 <HAL_ETH_MspInit+0x198>)
 8001066:	f003 fb59 	bl	800471c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800106a:	bf00      	nop
 800106c:	3738      	adds	r7, #56	; 0x38
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40028000 	.word	0x40028000
 8001078:	58024400 	.word	0x58024400
 800107c:	58020800 	.word	0x58020800
 8001080:	58020000 	.word	0x58020000
 8001084:	58020400 	.word	0x58020400
 8001088:	58021800 	.word	0x58021800

0800108c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b0ba      	sub	sp, #232	; 0xe8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	22bc      	movs	r2, #188	; 0xbc
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f008 fa65 	bl	800957c <memset>
  if(hspi->Instance==SPI1)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a52      	ldr	r2, [pc, #328]	; (8001200 <HAL_SPI_MspInit+0x174>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	f040 809c 	bne.w	80011f6 <HAL_SPI_MspInit+0x16a>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c8:	f107 0318 	add.w	r3, r7, #24
 80010cc:	4618      	mov	r0, r3
 80010ce:	f004 fe4f 	bl	8005d70 <HAL_RCCEx_PeriphCLKConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80010d8:	f7ff feea 	bl	8000eb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010dc:	4b49      	ldr	r3, [pc, #292]	; (8001204 <HAL_SPI_MspInit+0x178>)
 80010de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010e2:	4a48      	ldr	r2, [pc, #288]	; (8001204 <HAL_SPI_MspInit+0x178>)
 80010e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80010ec:	4b45      	ldr	r3, [pc, #276]	; (8001204 <HAL_SPI_MspInit+0x178>)
 80010ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b42      	ldr	r3, [pc, #264]	; (8001204 <HAL_SPI_MspInit+0x178>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001100:	4a40      	ldr	r2, [pc, #256]	; (8001204 <HAL_SPI_MspInit+0x178>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800110a:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <HAL_SPI_MspInit+0x178>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001118:	4b3a      	ldr	r3, [pc, #232]	; (8001204 <HAL_SPI_MspInit+0x178>)
 800111a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111e:	4a39      	ldr	r2, [pc, #228]	; (8001204 <HAL_SPI_MspInit+0x178>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001128:	4b36      	ldr	r3, [pc, #216]	; (8001204 <HAL_SPI_MspInit+0x178>)
 800112a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001136:	2360      	movs	r3, #96	; 0x60
 8001138:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800114e:	2305      	movs	r3, #5
 8001150:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001158:	4619      	mov	r1, r3
 800115a:	482b      	ldr	r0, [pc, #172]	; (8001208 <HAL_SPI_MspInit+0x17c>)
 800115c:	f003 fade 	bl	800471c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001160:	2320      	movs	r3, #32
 8001162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001178:	2305      	movs	r3, #5
 800117a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001182:	4619      	mov	r1, r3
 8001184:	4821      	ldr	r0, [pc, #132]	; (800120c <HAL_SPI_MspInit+0x180>)
 8001186:	f003 fac9 	bl	800471c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream0;
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <HAL_SPI_MspInit+0x184>)
 800118c:	4a21      	ldr	r2, [pc, #132]	; (8001214 <HAL_SPI_MspInit+0x188>)
 800118e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001190:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <HAL_SPI_MspInit+0x184>)
 8001192:	2226      	movs	r2, #38	; 0x26
 8001194:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <HAL_SPI_MspInit+0x184>)
 8001198:	2240      	movs	r2, #64	; 0x40
 800119a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800119c:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <HAL_SPI_MspInit+0x184>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_SPI_MspInit+0x184>)
 80011a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <HAL_SPI_MspInit+0x184>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_SPI_MspInit+0x184>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <HAL_SPI_MspInit+0x184>)
 80011b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011bc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <HAL_SPI_MspInit+0x184>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_SPI_MspInit+0x184>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80011ca:	4811      	ldr	r0, [pc, #68]	; (8001210 <HAL_SPI_MspInit+0x184>)
 80011cc:	f000 fb60 	bl	8001890 <HAL_DMA_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 80011d6:	f7ff fe6b 	bl	8000eb0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <HAL_SPI_MspInit+0x184>)
 80011de:	679a      	str	r2, [r3, #120]	; 0x78
 80011e0:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <HAL_SPI_MspInit+0x184>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	2023      	movs	r0, #35	; 0x23
 80011ec:	f000 fb1b 	bl	8001826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011f0:	2023      	movs	r0, #35	; 0x23
 80011f2:	f000 fb32 	bl	800185a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011f6:	bf00      	nop
 80011f8:	37e8      	adds	r7, #232	; 0xe8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40013000 	.word	0x40013000
 8001204:	58024400 	.word	0x58024400
 8001208:	58020000 	.word	0x58020000
 800120c:	58020400 	.word	0x58020400
 8001210:	2400028c 	.word	0x2400028c
 8001214:	40020410 	.word	0x40020410

08001218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b0b8      	sub	sp, #224	; 0xe0
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	22bc      	movs	r2, #188	; 0xbc
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f008 f99f 	bl	800957c <memset>
  if(huart->Instance==USART3)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a25      	ldr	r2, [pc, #148]	; (80012d8 <HAL_UART_MspInit+0xc0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d142      	bne.n	80012ce <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001248:	2302      	movs	r3, #2
 800124a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	4618      	mov	r0, r3
 8001258:	f004 fd8a 	bl	8005d70 <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001262:	f7ff fe25 	bl	8000eb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <HAL_UART_MspInit+0xc4>)
 8001268:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800126c:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <HAL_UART_MspInit+0xc4>)
 800126e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001272:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HAL_UART_MspInit+0xc4>)
 8001278:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800127c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_UART_MspInit+0xc4>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128a:	4a14      	ldr	r2, [pc, #80]	; (80012dc <HAL_UART_MspInit+0xc4>)
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_UART_MspInit+0xc4>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012bc:	2307      	movs	r3, #7
 80012be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <HAL_UART_MspInit+0xc8>)
 80012ca:	f003 fa27 	bl	800471c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012ce:	bf00      	nop
 80012d0:	37e0      	adds	r7, #224	; 0xe0
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40004800 	.word	0x40004800
 80012dc:	58024400 	.word	0x58024400
 80012e0:	58020c00 	.word	0x58020c00

080012e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0b8      	sub	sp, #224	; 0xe0
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	22bc      	movs	r2, #188	; 0xbc
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f008 f939 	bl	800957c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a36      	ldr	r2, [pc, #216]	; (80013e8 <HAL_PCD_MspInit+0x104>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d165      	bne.n	80013e0 <HAL_PCD_MspInit+0xfc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001314:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001318:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800131a:	2301      	movs	r3, #1
 800131c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 800131e:	2318      	movs	r3, #24
 8001320:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001322:	2302      	movs	r3, #2
 8001324:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001326:	2304      	movs	r3, #4
 8001328:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800132a:	2302      	movs	r3, #2
 800132c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800132e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001332:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001338:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800133c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	4618      	mov	r0, r3
 8001346:	f004 fd13 	bl	8005d70 <HAL_RCCEx_PeriphCLKConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001350:	f7ff fdae 	bl	8000eb0 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001354:	f003 fd62 	bl	8004e1c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b24      	ldr	r3, [pc, #144]	; (80013ec <HAL_PCD_MspInit+0x108>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135e:	4a23      	ldr	r2, [pc, #140]	; (80013ec <HAL_PCD_MspInit+0x108>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <HAL_PCD_MspInit+0x108>)
 800136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001376:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800137a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001390:	230a      	movs	r3, #10
 8001392:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800139a:	4619      	mov	r1, r3
 800139c:	4814      	ldr	r0, [pc, #80]	; (80013f0 <HAL_PCD_MspInit+0x10c>)
 800139e:	f003 f9bd 	bl	800471c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013ba:	4619      	mov	r1, r3
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <HAL_PCD_MspInit+0x10c>)
 80013be:	f003 f9ad 	bl	800471c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_PCD_MspInit+0x108>)
 80013c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013c8:	4a08      	ldr	r2, [pc, #32]	; (80013ec <HAL_PCD_MspInit+0x108>)
 80013ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_PCD_MspInit+0x108>)
 80013d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013e0:	bf00      	nop
 80013e2:	37e0      	adds	r7, #224	; 0xe0
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40080000 	.word	0x40080000
 80013ec:	58024400 	.word	0x58024400
 80013f0:	58020000 	.word	0x58020000

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <NMI_Handler+0x4>

080013fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler+0x4>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler+0x4>

08001412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001440:	f000 f8b2 	bl	80015a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <SPI1_IRQHandler+0x10>)
 800144e:	f006 fa3f 	bl	80078d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	24000204 	.word	0x24000204

0800145c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <DMA2_Stream0_IRQHandler+0x10>)
 8001462:	f001 fa21 	bl	80028a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2400028c 	.word	0x2400028c

08001470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001474:	f7ff f8b2 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800147a:	490d      	ldr	r1, [pc, #52]	; (80014b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800147c:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001480:	e002      	b.n	8001488 <LoopCopyDataInit>

08001482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001486:	3304      	adds	r3, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800148c:	d3f9      	bcc.n	8001482 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001490:	4c0a      	ldr	r4, [pc, #40]	; (80014bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001494:	e001      	b.n	800149a <LoopFillZerobss>

08001496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001498:	3204      	adds	r2, #4

0800149a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800149c:	d3fb      	bcc.n	8001496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800149e:	f008 f83b 	bl	8009518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014a2:	f7ff fa0f 	bl	80008c4 <main>
  bx  lr
 80014a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014b0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80014b4:	080098f4 	.word	0x080098f4
  ldr r2, =_sbss
 80014b8:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80014bc:	240007c4 	.word	0x240007c4

080014c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC3_IRQHandler>
	...

080014c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ca:	2003      	movs	r0, #3
 80014cc:	f000 f9a0 	bl	8001810 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014d0:	f004 fa78 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 80014d4:	4602      	mov	r2, r0
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_Init+0x68>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	f003 030f 	and.w	r3, r3, #15
 80014e0:	4913      	ldr	r1, [pc, #76]	; (8001530 <HAL_Init+0x6c>)
 80014e2:	5ccb      	ldrb	r3, [r1, r3]
 80014e4:	f003 031f 	and.w	r3, r3, #31
 80014e8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_Init+0x68>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <HAL_Init+0x6c>)
 80014f8:	5cd3      	ldrb	r3, [r2, r3]
 80014fa:	f003 031f 	and.w	r3, r3, #31
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	fa22 f303 	lsr.w	r3, r2, r3
 8001504:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <HAL_Init+0x70>)
 8001506:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <HAL_Init+0x74>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800150e:	2000      	movs	r0, #0
 8001510:	f000 f814 	bl	800153c <HAL_InitTick>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e002      	b.n	8001524 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800151e:	f7ff fccd 	bl	8000ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	58024400 	.word	0x58024400
 8001530:	080095a4 	.word	0x080095a4
 8001534:	24000004 	.word	0x24000004
 8001538:	24000000 	.word	0x24000000

0800153c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_InitTick+0x60>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e021      	b.n	8001594 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <HAL_InitTick+0x64>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <HAL_InitTick+0x60>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001562:	fbb2 f3f3 	udiv	r3, r2, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f985 	bl	8001876 <HAL_SYSTICK_Config>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e00e      	b.n	8001594 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d80a      	bhi.n	8001592 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800157c:	2200      	movs	r2, #0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f000 f94f 	bl	8001826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001588:	4a06      	ldr	r2, [pc, #24]	; (80015a4 <HAL_InitTick+0x68>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e000      	b.n	8001594 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	2400000c 	.word	0x2400000c
 80015a0:	24000000 	.word	0x24000000
 80015a4:	24000008 	.word	0x24000008

080015a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_IncTick+0x20>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x24>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_IncTick+0x24>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	2400000c 	.word	0x2400000c
 80015cc:	240007c0 	.word	0x240007c0

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <HAL_GetTick+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	240007c0 	.word	0x240007c0

080015e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff ffee 	bl	80015d0 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d005      	beq.n	800160e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_Delay+0x44>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800160e:	bf00      	nop
 8001610:	f7ff ffde 	bl	80015d0 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	429a      	cmp	r2, r3
 800161e:	d8f7      	bhi.n	8001610 <HAL_Delay+0x28>
  {
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2400000c 	.word	0x2400000c

08001630 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <HAL_GetREVID+0x14>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	0c1b      	lsrs	r3, r3, #16
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	5c001000 	.word	0x5c001000

08001648 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001658:	4904      	ldr	r1, [pc, #16]	; (800166c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	58000400 	.word	0x58000400

08001670 <__NVIC_SetPriorityGrouping>:
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800168c:	4013      	ands	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	4313      	orrs	r3, r2
 800169c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169e:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <__NVIC_SetPriorityGrouping+0x40>)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	60d3      	str	r3, [r2, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00
 80016b4:	05fa0000 	.word	0x05fa0000

080016b8 <__NVIC_GetPriorityGrouping>:
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <__NVIC_GetPriorityGrouping+0x18>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	f003 0307 	and.w	r3, r3, #7
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_EnableIRQ>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	db0b      	blt.n	80016fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	4907      	ldr	r1, [pc, #28]	; (800170c <__NVIC_EnableIRQ+0x38>)
 80016ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	2001      	movs	r0, #1
 80016f6:	fa00 f202 	lsl.w	r2, r0, r2
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000e100 	.word	0xe000e100

08001710 <__NVIC_SetPriority>:
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800171c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0a      	blt.n	800173a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	490c      	ldr	r1, [pc, #48]	; (800175c <__NVIC_SetPriority+0x4c>)
 800172a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001738:	e00a      	b.n	8001750 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4908      	ldr	r1, [pc, #32]	; (8001760 <__NVIC_SetPriority+0x50>)
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	3b04      	subs	r3, #4
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	440b      	add	r3, r1
 800174e:	761a      	strb	r2, [r3, #24]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <NVIC_EncodePriority>:
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f1c3 0307 	rsb	r3, r3, #7
 800177e:	2b04      	cmp	r3, #4
 8001780:	bf28      	it	cs
 8001782:	2304      	movcs	r3, #4
 8001784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	2b06      	cmp	r3, #6
 800178c:	d902      	bls.n	8001794 <NVIC_EncodePriority+0x30>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3b03      	subs	r3, #3
 8001792:	e000      	b.n	8001796 <NVIC_EncodePriority+0x32>
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	43d9      	mvns	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	4313      	orrs	r3, r2
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017dc:	d301      	bcc.n	80017e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017de:	2301      	movs	r3, #1
 80017e0:	e00f      	b.n	8001802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <SysTick_Config+0x40>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ea:	210f      	movs	r1, #15
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f7ff ff8e 	bl	8001710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <SysTick_Config+0x40>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fa:	4b04      	ldr	r3, [pc, #16]	; (800180c <SysTick_Config+0x40>)
 80017fc:	2207      	movs	r2, #7
 80017fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	e000e010 	.word	0xe000e010

08001810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff29 	bl	8001670 <__NVIC_SetPriorityGrouping>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001834:	f7ff ff40 	bl	80016b8 <__NVIC_GetPriorityGrouping>
 8001838:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	6978      	ldr	r0, [r7, #20]
 8001840:	f7ff ff90 	bl	8001764 <NVIC_EncodePriority>
 8001844:	4602      	mov	r2, r0
 8001846:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff5f 	bl	8001710 <__NVIC_SetPriority>
}
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff33 	bl	80016d4 <__NVIC_EnableIRQ>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ffa4 	bl	80017cc <SysTick_Config>
 8001884:	4603      	mov	r3, r0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001898:	f7ff fe9a 	bl	80015d0 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e316      	b.n	8001ed6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a66      	ldr	r2, [pc, #408]	; (8001a48 <HAL_DMA_Init+0x1b8>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d04a      	beq.n	8001948 <HAL_DMA_Init+0xb8>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a65      	ldr	r2, [pc, #404]	; (8001a4c <HAL_DMA_Init+0x1bc>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d045      	beq.n	8001948 <HAL_DMA_Init+0xb8>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a63      	ldr	r2, [pc, #396]	; (8001a50 <HAL_DMA_Init+0x1c0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d040      	beq.n	8001948 <HAL_DMA_Init+0xb8>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a62      	ldr	r2, [pc, #392]	; (8001a54 <HAL_DMA_Init+0x1c4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d03b      	beq.n	8001948 <HAL_DMA_Init+0xb8>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a60      	ldr	r2, [pc, #384]	; (8001a58 <HAL_DMA_Init+0x1c8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d036      	beq.n	8001948 <HAL_DMA_Init+0xb8>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a5f      	ldr	r2, [pc, #380]	; (8001a5c <HAL_DMA_Init+0x1cc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d031      	beq.n	8001948 <HAL_DMA_Init+0xb8>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a5d      	ldr	r2, [pc, #372]	; (8001a60 <HAL_DMA_Init+0x1d0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d02c      	beq.n	8001948 <HAL_DMA_Init+0xb8>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a5c      	ldr	r2, [pc, #368]	; (8001a64 <HAL_DMA_Init+0x1d4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d027      	beq.n	8001948 <HAL_DMA_Init+0xb8>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a5a      	ldr	r2, [pc, #360]	; (8001a68 <HAL_DMA_Init+0x1d8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d022      	beq.n	8001948 <HAL_DMA_Init+0xb8>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a59      	ldr	r2, [pc, #356]	; (8001a6c <HAL_DMA_Init+0x1dc>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d01d      	beq.n	8001948 <HAL_DMA_Init+0xb8>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a57      	ldr	r2, [pc, #348]	; (8001a70 <HAL_DMA_Init+0x1e0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d018      	beq.n	8001948 <HAL_DMA_Init+0xb8>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a56      	ldr	r2, [pc, #344]	; (8001a74 <HAL_DMA_Init+0x1e4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d013      	beq.n	8001948 <HAL_DMA_Init+0xb8>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a54      	ldr	r2, [pc, #336]	; (8001a78 <HAL_DMA_Init+0x1e8>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00e      	beq.n	8001948 <HAL_DMA_Init+0xb8>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a53      	ldr	r2, [pc, #332]	; (8001a7c <HAL_DMA_Init+0x1ec>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d009      	beq.n	8001948 <HAL_DMA_Init+0xb8>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a51      	ldr	r2, [pc, #324]	; (8001a80 <HAL_DMA_Init+0x1f0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d004      	beq.n	8001948 <HAL_DMA_Init+0xb8>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a50      	ldr	r2, [pc, #320]	; (8001a84 <HAL_DMA_Init+0x1f4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d101      	bne.n	800194c <HAL_DMA_Init+0xbc>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_DMA_Init+0xbe>
 800194c:	2300      	movs	r3, #0
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 813b 	beq.w	8001bca <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2202      	movs	r2, #2
 8001960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a37      	ldr	r2, [pc, #220]	; (8001a48 <HAL_DMA_Init+0x1b8>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d04a      	beq.n	8001a04 <HAL_DMA_Init+0x174>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a36      	ldr	r2, [pc, #216]	; (8001a4c <HAL_DMA_Init+0x1bc>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d045      	beq.n	8001a04 <HAL_DMA_Init+0x174>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a34      	ldr	r2, [pc, #208]	; (8001a50 <HAL_DMA_Init+0x1c0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d040      	beq.n	8001a04 <HAL_DMA_Init+0x174>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a33      	ldr	r2, [pc, #204]	; (8001a54 <HAL_DMA_Init+0x1c4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d03b      	beq.n	8001a04 <HAL_DMA_Init+0x174>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a31      	ldr	r2, [pc, #196]	; (8001a58 <HAL_DMA_Init+0x1c8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d036      	beq.n	8001a04 <HAL_DMA_Init+0x174>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a30      	ldr	r2, [pc, #192]	; (8001a5c <HAL_DMA_Init+0x1cc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d031      	beq.n	8001a04 <HAL_DMA_Init+0x174>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a2e      	ldr	r2, [pc, #184]	; (8001a60 <HAL_DMA_Init+0x1d0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d02c      	beq.n	8001a04 <HAL_DMA_Init+0x174>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a2d      	ldr	r2, [pc, #180]	; (8001a64 <HAL_DMA_Init+0x1d4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d027      	beq.n	8001a04 <HAL_DMA_Init+0x174>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a2b      	ldr	r2, [pc, #172]	; (8001a68 <HAL_DMA_Init+0x1d8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d022      	beq.n	8001a04 <HAL_DMA_Init+0x174>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a2a      	ldr	r2, [pc, #168]	; (8001a6c <HAL_DMA_Init+0x1dc>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d01d      	beq.n	8001a04 <HAL_DMA_Init+0x174>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a28      	ldr	r2, [pc, #160]	; (8001a70 <HAL_DMA_Init+0x1e0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d018      	beq.n	8001a04 <HAL_DMA_Init+0x174>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a27      	ldr	r2, [pc, #156]	; (8001a74 <HAL_DMA_Init+0x1e4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d013      	beq.n	8001a04 <HAL_DMA_Init+0x174>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a25      	ldr	r2, [pc, #148]	; (8001a78 <HAL_DMA_Init+0x1e8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d00e      	beq.n	8001a04 <HAL_DMA_Init+0x174>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a24      	ldr	r2, [pc, #144]	; (8001a7c <HAL_DMA_Init+0x1ec>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d009      	beq.n	8001a04 <HAL_DMA_Init+0x174>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <HAL_DMA_Init+0x1f0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d004      	beq.n	8001a04 <HAL_DMA_Init+0x174>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <HAL_DMA_Init+0x1f4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d108      	bne.n	8001a16 <HAL_DMA_Init+0x186>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	e007      	b.n	8001a26 <HAL_DMA_Init+0x196>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0201 	bic.w	r2, r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a26:	e02f      	b.n	8001a88 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a28:	f7ff fdd2 	bl	80015d0 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d928      	bls.n	8001a88 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2220      	movs	r2, #32
 8001a3a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2203      	movs	r2, #3
 8001a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e246      	b.n	8001ed6 <HAL_DMA_Init+0x646>
 8001a48:	40020010 	.word	0x40020010
 8001a4c:	40020028 	.word	0x40020028
 8001a50:	40020040 	.word	0x40020040
 8001a54:	40020058 	.word	0x40020058
 8001a58:	40020070 	.word	0x40020070
 8001a5c:	40020088 	.word	0x40020088
 8001a60:	400200a0 	.word	0x400200a0
 8001a64:	400200b8 	.word	0x400200b8
 8001a68:	40020410 	.word	0x40020410
 8001a6c:	40020428 	.word	0x40020428
 8001a70:	40020440 	.word	0x40020440
 8001a74:	40020458 	.word	0x40020458
 8001a78:	40020470 	.word	0x40020470
 8001a7c:	40020488 	.word	0x40020488
 8001a80:	400204a0 	.word	0x400204a0
 8001a84:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1c8      	bne.n	8001a28 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	4b83      	ldr	r3, [pc, #524]	; (8001cb0 <HAL_DMA_Init+0x420>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001aae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d107      	bne.n	8001aec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001aec:	4b71      	ldr	r3, [pc, #452]	; (8001cb4 <HAL_DMA_Init+0x424>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b71      	ldr	r3, [pc, #452]	; (8001cb8 <HAL_DMA_Init+0x428>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001af8:	d328      	bcc.n	8001b4c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b28      	cmp	r3, #40	; 0x28
 8001b00:	d903      	bls.n	8001b0a <HAL_DMA_Init+0x27a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b2e      	cmp	r3, #46	; 0x2e
 8001b08:	d917      	bls.n	8001b3a <HAL_DMA_Init+0x2aa>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b3e      	cmp	r3, #62	; 0x3e
 8001b10:	d903      	bls.n	8001b1a <HAL_DMA_Init+0x28a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b42      	cmp	r3, #66	; 0x42
 8001b18:	d90f      	bls.n	8001b3a <HAL_DMA_Init+0x2aa>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b46      	cmp	r3, #70	; 0x46
 8001b20:	d903      	bls.n	8001b2a <HAL_DMA_Init+0x29a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b48      	cmp	r3, #72	; 0x48
 8001b28:	d907      	bls.n	8001b3a <HAL_DMA_Init+0x2aa>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b4e      	cmp	r3, #78	; 0x4e
 8001b30:	d905      	bls.n	8001b3e <HAL_DMA_Init+0x2ae>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b52      	cmp	r3, #82	; 0x52
 8001b38:	d801      	bhi.n	8001b3e <HAL_DMA_Init+0x2ae>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <HAL_DMA_Init+0x2b0>
 8001b3e:	2300      	movs	r3, #0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b4a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f023 0307 	bic.w	r3, r3, #7
 8001b62:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d117      	bne.n	8001ba6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00e      	beq.n	8001ba6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f002 f821 	bl	8003bd0 <DMA_CheckFifoParam>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d008      	beq.n	8001ba6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2240      	movs	r2, #64	; 0x40
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e197      	b.n	8001ed6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f001 ff5c 	bl	8003a6c <DMA_CalcBaseAndBitshift>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	223f      	movs	r2, #63	; 0x3f
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	e0cd      	b.n	8001d66 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a3b      	ldr	r2, [pc, #236]	; (8001cbc <HAL_DMA_Init+0x42c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d022      	beq.n	8001c1a <HAL_DMA_Init+0x38a>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a39      	ldr	r2, [pc, #228]	; (8001cc0 <HAL_DMA_Init+0x430>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d01d      	beq.n	8001c1a <HAL_DMA_Init+0x38a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a38      	ldr	r2, [pc, #224]	; (8001cc4 <HAL_DMA_Init+0x434>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d018      	beq.n	8001c1a <HAL_DMA_Init+0x38a>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a36      	ldr	r2, [pc, #216]	; (8001cc8 <HAL_DMA_Init+0x438>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d013      	beq.n	8001c1a <HAL_DMA_Init+0x38a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a35      	ldr	r2, [pc, #212]	; (8001ccc <HAL_DMA_Init+0x43c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d00e      	beq.n	8001c1a <HAL_DMA_Init+0x38a>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a33      	ldr	r2, [pc, #204]	; (8001cd0 <HAL_DMA_Init+0x440>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d009      	beq.n	8001c1a <HAL_DMA_Init+0x38a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a32      	ldr	r2, [pc, #200]	; (8001cd4 <HAL_DMA_Init+0x444>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d004      	beq.n	8001c1a <HAL_DMA_Init+0x38a>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a30      	ldr	r2, [pc, #192]	; (8001cd8 <HAL_DMA_Init+0x448>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d101      	bne.n	8001c1e <HAL_DMA_Init+0x38e>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_DMA_Init+0x390>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 8097 	beq.w	8001d54 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a24      	ldr	r2, [pc, #144]	; (8001cbc <HAL_DMA_Init+0x42c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d021      	beq.n	8001c74 <HAL_DMA_Init+0x3e4>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a22      	ldr	r2, [pc, #136]	; (8001cc0 <HAL_DMA_Init+0x430>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d01c      	beq.n	8001c74 <HAL_DMA_Init+0x3e4>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a21      	ldr	r2, [pc, #132]	; (8001cc4 <HAL_DMA_Init+0x434>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d017      	beq.n	8001c74 <HAL_DMA_Init+0x3e4>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1f      	ldr	r2, [pc, #124]	; (8001cc8 <HAL_DMA_Init+0x438>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d012      	beq.n	8001c74 <HAL_DMA_Init+0x3e4>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1e      	ldr	r2, [pc, #120]	; (8001ccc <HAL_DMA_Init+0x43c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d00d      	beq.n	8001c74 <HAL_DMA_Init+0x3e4>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1c      	ldr	r2, [pc, #112]	; (8001cd0 <HAL_DMA_Init+0x440>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d008      	beq.n	8001c74 <HAL_DMA_Init+0x3e4>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a1b      	ldr	r2, [pc, #108]	; (8001cd4 <HAL_DMA_Init+0x444>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d003      	beq.n	8001c74 <HAL_DMA_Init+0x3e4>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a19      	ldr	r2, [pc, #100]	; (8001cd8 <HAL_DMA_Init+0x448>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2202      	movs	r2, #2
 8001c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_DMA_Init+0x44c>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b40      	cmp	r3, #64	; 0x40
 8001c9c:	d020      	beq.n	8001ce0 <HAL_DMA_Init+0x450>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b80      	cmp	r3, #128	; 0x80
 8001ca4:	d102      	bne.n	8001cac <HAL_DMA_Init+0x41c>
 8001ca6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001caa:	e01a      	b.n	8001ce2 <HAL_DMA_Init+0x452>
 8001cac:	2300      	movs	r3, #0
 8001cae:	e018      	b.n	8001ce2 <HAL_DMA_Init+0x452>
 8001cb0:	fe10803f 	.word	0xfe10803f
 8001cb4:	5c001000 	.word	0x5c001000
 8001cb8:	ffff0000 	.word	0xffff0000
 8001cbc:	58025408 	.word	0x58025408
 8001cc0:	5802541c 	.word	0x5802541c
 8001cc4:	58025430 	.word	0x58025430
 8001cc8:	58025444 	.word	0x58025444
 8001ccc:	58025458 	.word	0x58025458
 8001cd0:	5802546c 	.word	0x5802546c
 8001cd4:	58025480 	.word	0x58025480
 8001cd8:	58025494 	.word	0x58025494
 8001cdc:	fffe000f 	.word	0xfffe000f
 8001ce0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68d2      	ldr	r2, [r2, #12]
 8001ce6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ce8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001cf0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001cf8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d10:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b6e      	ldr	r3, [pc, #440]	; (8001ee0 <HAL_DMA_Init+0x650>)
 8001d28:	4413      	add	r3, r2
 8001d2a:	4a6e      	ldr	r2, [pc, #440]	; (8001ee4 <HAL_DMA_Init+0x654>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	009a      	lsls	r2, r3, #2
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f001 fe97 	bl	8003a6c <DMA_CalcBaseAndBitshift>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	e008      	b.n	8001d66 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2240      	movs	r2, #64	; 0x40
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e0b7      	b.n	8001ed6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a5f      	ldr	r2, [pc, #380]	; (8001ee8 <HAL_DMA_Init+0x658>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d072      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a5d      	ldr	r2, [pc, #372]	; (8001eec <HAL_DMA_Init+0x65c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d06d      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a5c      	ldr	r2, [pc, #368]	; (8001ef0 <HAL_DMA_Init+0x660>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d068      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a5a      	ldr	r2, [pc, #360]	; (8001ef4 <HAL_DMA_Init+0x664>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d063      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a59      	ldr	r2, [pc, #356]	; (8001ef8 <HAL_DMA_Init+0x668>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d05e      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a57      	ldr	r2, [pc, #348]	; (8001efc <HAL_DMA_Init+0x66c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d059      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a56      	ldr	r2, [pc, #344]	; (8001f00 <HAL_DMA_Init+0x670>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d054      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a54      	ldr	r2, [pc, #336]	; (8001f04 <HAL_DMA_Init+0x674>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d04f      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a53      	ldr	r2, [pc, #332]	; (8001f08 <HAL_DMA_Init+0x678>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d04a      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a51      	ldr	r2, [pc, #324]	; (8001f0c <HAL_DMA_Init+0x67c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d045      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a50      	ldr	r2, [pc, #320]	; (8001f10 <HAL_DMA_Init+0x680>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d040      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a4e      	ldr	r2, [pc, #312]	; (8001f14 <HAL_DMA_Init+0x684>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d03b      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a4d      	ldr	r2, [pc, #308]	; (8001f18 <HAL_DMA_Init+0x688>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d036      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a4b      	ldr	r2, [pc, #300]	; (8001f1c <HAL_DMA_Init+0x68c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d031      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a4a      	ldr	r2, [pc, #296]	; (8001f20 <HAL_DMA_Init+0x690>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d02c      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a48      	ldr	r2, [pc, #288]	; (8001f24 <HAL_DMA_Init+0x694>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d027      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a47      	ldr	r2, [pc, #284]	; (8001f28 <HAL_DMA_Init+0x698>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d022      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a45      	ldr	r2, [pc, #276]	; (8001f2c <HAL_DMA_Init+0x69c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d01d      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a44      	ldr	r2, [pc, #272]	; (8001f30 <HAL_DMA_Init+0x6a0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d018      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a42      	ldr	r2, [pc, #264]	; (8001f34 <HAL_DMA_Init+0x6a4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d013      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a41      	ldr	r2, [pc, #260]	; (8001f38 <HAL_DMA_Init+0x6a8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d00e      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a3f      	ldr	r2, [pc, #252]	; (8001f3c <HAL_DMA_Init+0x6ac>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d009      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a3e      	ldr	r2, [pc, #248]	; (8001f40 <HAL_DMA_Init+0x6b0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d004      	beq.n	8001e56 <HAL_DMA_Init+0x5c6>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a3c      	ldr	r2, [pc, #240]	; (8001f44 <HAL_DMA_Init+0x6b4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d101      	bne.n	8001e5a <HAL_DMA_Init+0x5ca>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <HAL_DMA_Init+0x5cc>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d032      	beq.n	8001ec6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f001 ff31 	bl	8003cc8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b80      	cmp	r3, #128	; 0x80
 8001e6c:	d102      	bne.n	8001e74 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e88:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d010      	beq.n	8001eb4 <HAL_DMA_Init+0x624>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d80c      	bhi.n	8001eb4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f001 ffae 	bl	8003dfc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	e008      	b.n	8001ec6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	a7fdabf8 	.word	0xa7fdabf8
 8001ee4:	cccccccd 	.word	0xcccccccd
 8001ee8:	40020010 	.word	0x40020010
 8001eec:	40020028 	.word	0x40020028
 8001ef0:	40020040 	.word	0x40020040
 8001ef4:	40020058 	.word	0x40020058
 8001ef8:	40020070 	.word	0x40020070
 8001efc:	40020088 	.word	0x40020088
 8001f00:	400200a0 	.word	0x400200a0
 8001f04:	400200b8 	.word	0x400200b8
 8001f08:	40020410 	.word	0x40020410
 8001f0c:	40020428 	.word	0x40020428
 8001f10:	40020440 	.word	0x40020440
 8001f14:	40020458 	.word	0x40020458
 8001f18:	40020470 	.word	0x40020470
 8001f1c:	40020488 	.word	0x40020488
 8001f20:	400204a0 	.word	0x400204a0
 8001f24:	400204b8 	.word	0x400204b8
 8001f28:	58025408 	.word	0x58025408
 8001f2c:	5802541c 	.word	0x5802541c
 8001f30:	58025430 	.word	0x58025430
 8001f34:	58025444 	.word	0x58025444
 8001f38:	58025458 	.word	0x58025458
 8001f3c:	5802546c 	.word	0x5802546c
 8001f40:	58025480 	.word	0x58025480
 8001f44:	58025494 	.word	0x58025494

08001f48 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e226      	b.n	80023b2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_DMA_Start_IT+0x2a>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e21f      	b.n	80023b2 <HAL_DMA_Start_IT+0x46a>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	f040 820a 	bne.w	800239c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a68      	ldr	r2, [pc, #416]	; (800213c <HAL_DMA_Start_IT+0x1f4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d04a      	beq.n	8002036 <HAL_DMA_Start_IT+0xee>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a66      	ldr	r2, [pc, #408]	; (8002140 <HAL_DMA_Start_IT+0x1f8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d045      	beq.n	8002036 <HAL_DMA_Start_IT+0xee>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a65      	ldr	r2, [pc, #404]	; (8002144 <HAL_DMA_Start_IT+0x1fc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d040      	beq.n	8002036 <HAL_DMA_Start_IT+0xee>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a63      	ldr	r2, [pc, #396]	; (8002148 <HAL_DMA_Start_IT+0x200>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d03b      	beq.n	8002036 <HAL_DMA_Start_IT+0xee>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a62      	ldr	r2, [pc, #392]	; (800214c <HAL_DMA_Start_IT+0x204>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d036      	beq.n	8002036 <HAL_DMA_Start_IT+0xee>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a60      	ldr	r2, [pc, #384]	; (8002150 <HAL_DMA_Start_IT+0x208>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d031      	beq.n	8002036 <HAL_DMA_Start_IT+0xee>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a5f      	ldr	r2, [pc, #380]	; (8002154 <HAL_DMA_Start_IT+0x20c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d02c      	beq.n	8002036 <HAL_DMA_Start_IT+0xee>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a5d      	ldr	r2, [pc, #372]	; (8002158 <HAL_DMA_Start_IT+0x210>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d027      	beq.n	8002036 <HAL_DMA_Start_IT+0xee>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a5c      	ldr	r2, [pc, #368]	; (800215c <HAL_DMA_Start_IT+0x214>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d022      	beq.n	8002036 <HAL_DMA_Start_IT+0xee>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a5a      	ldr	r2, [pc, #360]	; (8002160 <HAL_DMA_Start_IT+0x218>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d01d      	beq.n	8002036 <HAL_DMA_Start_IT+0xee>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a59      	ldr	r2, [pc, #356]	; (8002164 <HAL_DMA_Start_IT+0x21c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d018      	beq.n	8002036 <HAL_DMA_Start_IT+0xee>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a57      	ldr	r2, [pc, #348]	; (8002168 <HAL_DMA_Start_IT+0x220>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <HAL_DMA_Start_IT+0xee>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a56      	ldr	r2, [pc, #344]	; (800216c <HAL_DMA_Start_IT+0x224>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d00e      	beq.n	8002036 <HAL_DMA_Start_IT+0xee>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a54      	ldr	r2, [pc, #336]	; (8002170 <HAL_DMA_Start_IT+0x228>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d009      	beq.n	8002036 <HAL_DMA_Start_IT+0xee>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a53      	ldr	r2, [pc, #332]	; (8002174 <HAL_DMA_Start_IT+0x22c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d004      	beq.n	8002036 <HAL_DMA_Start_IT+0xee>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a51      	ldr	r2, [pc, #324]	; (8002178 <HAL_DMA_Start_IT+0x230>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d108      	bne.n	8002048 <HAL_DMA_Start_IT+0x100>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0201 	bic.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	e007      	b.n	8002058 <HAL_DMA_Start_IT+0x110>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f001 fb58 	bl	8003714 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a34      	ldr	r2, [pc, #208]	; (800213c <HAL_DMA_Start_IT+0x1f4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d04a      	beq.n	8002104 <HAL_DMA_Start_IT+0x1bc>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a33      	ldr	r2, [pc, #204]	; (8002140 <HAL_DMA_Start_IT+0x1f8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d045      	beq.n	8002104 <HAL_DMA_Start_IT+0x1bc>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a31      	ldr	r2, [pc, #196]	; (8002144 <HAL_DMA_Start_IT+0x1fc>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d040      	beq.n	8002104 <HAL_DMA_Start_IT+0x1bc>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a30      	ldr	r2, [pc, #192]	; (8002148 <HAL_DMA_Start_IT+0x200>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d03b      	beq.n	8002104 <HAL_DMA_Start_IT+0x1bc>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a2e      	ldr	r2, [pc, #184]	; (800214c <HAL_DMA_Start_IT+0x204>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d036      	beq.n	8002104 <HAL_DMA_Start_IT+0x1bc>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a2d      	ldr	r2, [pc, #180]	; (8002150 <HAL_DMA_Start_IT+0x208>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d031      	beq.n	8002104 <HAL_DMA_Start_IT+0x1bc>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a2b      	ldr	r2, [pc, #172]	; (8002154 <HAL_DMA_Start_IT+0x20c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d02c      	beq.n	8002104 <HAL_DMA_Start_IT+0x1bc>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a2a      	ldr	r2, [pc, #168]	; (8002158 <HAL_DMA_Start_IT+0x210>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d027      	beq.n	8002104 <HAL_DMA_Start_IT+0x1bc>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a28      	ldr	r2, [pc, #160]	; (800215c <HAL_DMA_Start_IT+0x214>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d022      	beq.n	8002104 <HAL_DMA_Start_IT+0x1bc>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a27      	ldr	r2, [pc, #156]	; (8002160 <HAL_DMA_Start_IT+0x218>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d01d      	beq.n	8002104 <HAL_DMA_Start_IT+0x1bc>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a25      	ldr	r2, [pc, #148]	; (8002164 <HAL_DMA_Start_IT+0x21c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d018      	beq.n	8002104 <HAL_DMA_Start_IT+0x1bc>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a24      	ldr	r2, [pc, #144]	; (8002168 <HAL_DMA_Start_IT+0x220>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d013      	beq.n	8002104 <HAL_DMA_Start_IT+0x1bc>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a22      	ldr	r2, [pc, #136]	; (800216c <HAL_DMA_Start_IT+0x224>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d00e      	beq.n	8002104 <HAL_DMA_Start_IT+0x1bc>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a21      	ldr	r2, [pc, #132]	; (8002170 <HAL_DMA_Start_IT+0x228>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d009      	beq.n	8002104 <HAL_DMA_Start_IT+0x1bc>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a1f      	ldr	r2, [pc, #124]	; (8002174 <HAL_DMA_Start_IT+0x22c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d004      	beq.n	8002104 <HAL_DMA_Start_IT+0x1bc>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1e      	ldr	r2, [pc, #120]	; (8002178 <HAL_DMA_Start_IT+0x230>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d101      	bne.n	8002108 <HAL_DMA_Start_IT+0x1c0>
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <HAL_DMA_Start_IT+0x1c2>
 8002108:	2300      	movs	r3, #0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d036      	beq.n	800217c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 021e 	bic.w	r2, r3, #30
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0216 	orr.w	r2, r2, #22
 8002120:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d03e      	beq.n	80021a8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0208 	orr.w	r2, r2, #8
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	e035      	b.n	80021a8 <HAL_DMA_Start_IT+0x260>
 800213c:	40020010 	.word	0x40020010
 8002140:	40020028 	.word	0x40020028
 8002144:	40020040 	.word	0x40020040
 8002148:	40020058 	.word	0x40020058
 800214c:	40020070 	.word	0x40020070
 8002150:	40020088 	.word	0x40020088
 8002154:	400200a0 	.word	0x400200a0
 8002158:	400200b8 	.word	0x400200b8
 800215c:	40020410 	.word	0x40020410
 8002160:	40020428 	.word	0x40020428
 8002164:	40020440 	.word	0x40020440
 8002168:	40020458 	.word	0x40020458
 800216c:	40020470 	.word	0x40020470
 8002170:	40020488 	.word	0x40020488
 8002174:	400204a0 	.word	0x400204a0
 8002178:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 020e 	bic.w	r2, r3, #14
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 020a 	orr.w	r2, r2, #10
 800218e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0204 	orr.w	r2, r2, #4
 80021a6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a83      	ldr	r2, [pc, #524]	; (80023bc <HAL_DMA_Start_IT+0x474>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d072      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a82      	ldr	r2, [pc, #520]	; (80023c0 <HAL_DMA_Start_IT+0x478>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d06d      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a80      	ldr	r2, [pc, #512]	; (80023c4 <HAL_DMA_Start_IT+0x47c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d068      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a7f      	ldr	r2, [pc, #508]	; (80023c8 <HAL_DMA_Start_IT+0x480>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d063      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a7d      	ldr	r2, [pc, #500]	; (80023cc <HAL_DMA_Start_IT+0x484>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d05e      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a7c      	ldr	r2, [pc, #496]	; (80023d0 <HAL_DMA_Start_IT+0x488>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d059      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a7a      	ldr	r2, [pc, #488]	; (80023d4 <HAL_DMA_Start_IT+0x48c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d054      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a79      	ldr	r2, [pc, #484]	; (80023d8 <HAL_DMA_Start_IT+0x490>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d04f      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a77      	ldr	r2, [pc, #476]	; (80023dc <HAL_DMA_Start_IT+0x494>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d04a      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a76      	ldr	r2, [pc, #472]	; (80023e0 <HAL_DMA_Start_IT+0x498>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d045      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a74      	ldr	r2, [pc, #464]	; (80023e4 <HAL_DMA_Start_IT+0x49c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d040      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a73      	ldr	r2, [pc, #460]	; (80023e8 <HAL_DMA_Start_IT+0x4a0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d03b      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a71      	ldr	r2, [pc, #452]	; (80023ec <HAL_DMA_Start_IT+0x4a4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d036      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a70      	ldr	r2, [pc, #448]	; (80023f0 <HAL_DMA_Start_IT+0x4a8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d031      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a6e      	ldr	r2, [pc, #440]	; (80023f4 <HAL_DMA_Start_IT+0x4ac>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d02c      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a6d      	ldr	r2, [pc, #436]	; (80023f8 <HAL_DMA_Start_IT+0x4b0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d027      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a6b      	ldr	r2, [pc, #428]	; (80023fc <HAL_DMA_Start_IT+0x4b4>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d022      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a6a      	ldr	r2, [pc, #424]	; (8002400 <HAL_DMA_Start_IT+0x4b8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d01d      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a68      	ldr	r2, [pc, #416]	; (8002404 <HAL_DMA_Start_IT+0x4bc>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d018      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a67      	ldr	r2, [pc, #412]	; (8002408 <HAL_DMA_Start_IT+0x4c0>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d013      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a65      	ldr	r2, [pc, #404]	; (800240c <HAL_DMA_Start_IT+0x4c4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00e      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a64      	ldr	r2, [pc, #400]	; (8002410 <HAL_DMA_Start_IT+0x4c8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d009      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a62      	ldr	r2, [pc, #392]	; (8002414 <HAL_DMA_Start_IT+0x4cc>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d004      	beq.n	8002298 <HAL_DMA_Start_IT+0x350>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a61      	ldr	r2, [pc, #388]	; (8002418 <HAL_DMA_Start_IT+0x4d0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d101      	bne.n	800229c <HAL_DMA_Start_IT+0x354>
 8002298:	2301      	movs	r3, #1
 800229a:	e000      	b.n	800229e <HAL_DMA_Start_IT+0x356>
 800229c:	2300      	movs	r3, #0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d01a      	beq.n	80022d8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022be:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d007      	beq.n	80022d8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022d6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a37      	ldr	r2, [pc, #220]	; (80023bc <HAL_DMA_Start_IT+0x474>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d04a      	beq.n	8002378 <HAL_DMA_Start_IT+0x430>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a36      	ldr	r2, [pc, #216]	; (80023c0 <HAL_DMA_Start_IT+0x478>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d045      	beq.n	8002378 <HAL_DMA_Start_IT+0x430>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a34      	ldr	r2, [pc, #208]	; (80023c4 <HAL_DMA_Start_IT+0x47c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d040      	beq.n	8002378 <HAL_DMA_Start_IT+0x430>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a33      	ldr	r2, [pc, #204]	; (80023c8 <HAL_DMA_Start_IT+0x480>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d03b      	beq.n	8002378 <HAL_DMA_Start_IT+0x430>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a31      	ldr	r2, [pc, #196]	; (80023cc <HAL_DMA_Start_IT+0x484>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d036      	beq.n	8002378 <HAL_DMA_Start_IT+0x430>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a30      	ldr	r2, [pc, #192]	; (80023d0 <HAL_DMA_Start_IT+0x488>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d031      	beq.n	8002378 <HAL_DMA_Start_IT+0x430>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a2e      	ldr	r2, [pc, #184]	; (80023d4 <HAL_DMA_Start_IT+0x48c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d02c      	beq.n	8002378 <HAL_DMA_Start_IT+0x430>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a2d      	ldr	r2, [pc, #180]	; (80023d8 <HAL_DMA_Start_IT+0x490>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d027      	beq.n	8002378 <HAL_DMA_Start_IT+0x430>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a2b      	ldr	r2, [pc, #172]	; (80023dc <HAL_DMA_Start_IT+0x494>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d022      	beq.n	8002378 <HAL_DMA_Start_IT+0x430>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a2a      	ldr	r2, [pc, #168]	; (80023e0 <HAL_DMA_Start_IT+0x498>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d01d      	beq.n	8002378 <HAL_DMA_Start_IT+0x430>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a28      	ldr	r2, [pc, #160]	; (80023e4 <HAL_DMA_Start_IT+0x49c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d018      	beq.n	8002378 <HAL_DMA_Start_IT+0x430>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a27      	ldr	r2, [pc, #156]	; (80023e8 <HAL_DMA_Start_IT+0x4a0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d013      	beq.n	8002378 <HAL_DMA_Start_IT+0x430>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a25      	ldr	r2, [pc, #148]	; (80023ec <HAL_DMA_Start_IT+0x4a4>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00e      	beq.n	8002378 <HAL_DMA_Start_IT+0x430>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a24      	ldr	r2, [pc, #144]	; (80023f0 <HAL_DMA_Start_IT+0x4a8>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d009      	beq.n	8002378 <HAL_DMA_Start_IT+0x430>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a22      	ldr	r2, [pc, #136]	; (80023f4 <HAL_DMA_Start_IT+0x4ac>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d004      	beq.n	8002378 <HAL_DMA_Start_IT+0x430>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a21      	ldr	r2, [pc, #132]	; (80023f8 <HAL_DMA_Start_IT+0x4b0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d108      	bne.n	800238a <HAL_DMA_Start_IT+0x442>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	e012      	b.n	80023b0 <HAL_DMA_Start_IT+0x468>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0201 	orr.w	r2, r2, #1
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	e009      	b.n	80023b0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80023b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40020010 	.word	0x40020010
 80023c0:	40020028 	.word	0x40020028
 80023c4:	40020040 	.word	0x40020040
 80023c8:	40020058 	.word	0x40020058
 80023cc:	40020070 	.word	0x40020070
 80023d0:	40020088 	.word	0x40020088
 80023d4:	400200a0 	.word	0x400200a0
 80023d8:	400200b8 	.word	0x400200b8
 80023dc:	40020410 	.word	0x40020410
 80023e0:	40020428 	.word	0x40020428
 80023e4:	40020440 	.word	0x40020440
 80023e8:	40020458 	.word	0x40020458
 80023ec:	40020470 	.word	0x40020470
 80023f0:	40020488 	.word	0x40020488
 80023f4:	400204a0 	.word	0x400204a0
 80023f8:	400204b8 	.word	0x400204b8
 80023fc:	58025408 	.word	0x58025408
 8002400:	5802541c 	.word	0x5802541c
 8002404:	58025430 	.word	0x58025430
 8002408:	58025444 	.word	0x58025444
 800240c:	58025458 	.word	0x58025458
 8002410:	5802546c 	.word	0x5802546c
 8002414:	58025480 	.word	0x58025480
 8002418:	58025494 	.word	0x58025494

0800241c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e237      	b.n	800289e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d004      	beq.n	8002444 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2280      	movs	r2, #128	; 0x80
 800243e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e22c      	b.n	800289e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a5c      	ldr	r2, [pc, #368]	; (80025bc <HAL_DMA_Abort_IT+0x1a0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d04a      	beq.n	80024e4 <HAL_DMA_Abort_IT+0xc8>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a5b      	ldr	r2, [pc, #364]	; (80025c0 <HAL_DMA_Abort_IT+0x1a4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d045      	beq.n	80024e4 <HAL_DMA_Abort_IT+0xc8>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a59      	ldr	r2, [pc, #356]	; (80025c4 <HAL_DMA_Abort_IT+0x1a8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d040      	beq.n	80024e4 <HAL_DMA_Abort_IT+0xc8>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a58      	ldr	r2, [pc, #352]	; (80025c8 <HAL_DMA_Abort_IT+0x1ac>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d03b      	beq.n	80024e4 <HAL_DMA_Abort_IT+0xc8>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a56      	ldr	r2, [pc, #344]	; (80025cc <HAL_DMA_Abort_IT+0x1b0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d036      	beq.n	80024e4 <HAL_DMA_Abort_IT+0xc8>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a55      	ldr	r2, [pc, #340]	; (80025d0 <HAL_DMA_Abort_IT+0x1b4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d031      	beq.n	80024e4 <HAL_DMA_Abort_IT+0xc8>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a53      	ldr	r2, [pc, #332]	; (80025d4 <HAL_DMA_Abort_IT+0x1b8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d02c      	beq.n	80024e4 <HAL_DMA_Abort_IT+0xc8>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a52      	ldr	r2, [pc, #328]	; (80025d8 <HAL_DMA_Abort_IT+0x1bc>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d027      	beq.n	80024e4 <HAL_DMA_Abort_IT+0xc8>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a50      	ldr	r2, [pc, #320]	; (80025dc <HAL_DMA_Abort_IT+0x1c0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d022      	beq.n	80024e4 <HAL_DMA_Abort_IT+0xc8>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a4f      	ldr	r2, [pc, #316]	; (80025e0 <HAL_DMA_Abort_IT+0x1c4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d01d      	beq.n	80024e4 <HAL_DMA_Abort_IT+0xc8>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a4d      	ldr	r2, [pc, #308]	; (80025e4 <HAL_DMA_Abort_IT+0x1c8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d018      	beq.n	80024e4 <HAL_DMA_Abort_IT+0xc8>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a4c      	ldr	r2, [pc, #304]	; (80025e8 <HAL_DMA_Abort_IT+0x1cc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d013      	beq.n	80024e4 <HAL_DMA_Abort_IT+0xc8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a4a      	ldr	r2, [pc, #296]	; (80025ec <HAL_DMA_Abort_IT+0x1d0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00e      	beq.n	80024e4 <HAL_DMA_Abort_IT+0xc8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a49      	ldr	r2, [pc, #292]	; (80025f0 <HAL_DMA_Abort_IT+0x1d4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d009      	beq.n	80024e4 <HAL_DMA_Abort_IT+0xc8>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a47      	ldr	r2, [pc, #284]	; (80025f4 <HAL_DMA_Abort_IT+0x1d8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d004      	beq.n	80024e4 <HAL_DMA_Abort_IT+0xc8>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a46      	ldr	r2, [pc, #280]	; (80025f8 <HAL_DMA_Abort_IT+0x1dc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d101      	bne.n	80024e8 <HAL_DMA_Abort_IT+0xcc>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <HAL_DMA_Abort_IT+0xce>
 80024e8:	2300      	movs	r3, #0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 8086 	beq.w	80025fc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2204      	movs	r2, #4
 80024f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a2f      	ldr	r2, [pc, #188]	; (80025bc <HAL_DMA_Abort_IT+0x1a0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d04a      	beq.n	8002598 <HAL_DMA_Abort_IT+0x17c>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a2e      	ldr	r2, [pc, #184]	; (80025c0 <HAL_DMA_Abort_IT+0x1a4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d045      	beq.n	8002598 <HAL_DMA_Abort_IT+0x17c>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a2c      	ldr	r2, [pc, #176]	; (80025c4 <HAL_DMA_Abort_IT+0x1a8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d040      	beq.n	8002598 <HAL_DMA_Abort_IT+0x17c>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a2b      	ldr	r2, [pc, #172]	; (80025c8 <HAL_DMA_Abort_IT+0x1ac>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d03b      	beq.n	8002598 <HAL_DMA_Abort_IT+0x17c>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a29      	ldr	r2, [pc, #164]	; (80025cc <HAL_DMA_Abort_IT+0x1b0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d036      	beq.n	8002598 <HAL_DMA_Abort_IT+0x17c>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a28      	ldr	r2, [pc, #160]	; (80025d0 <HAL_DMA_Abort_IT+0x1b4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d031      	beq.n	8002598 <HAL_DMA_Abort_IT+0x17c>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a26      	ldr	r2, [pc, #152]	; (80025d4 <HAL_DMA_Abort_IT+0x1b8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d02c      	beq.n	8002598 <HAL_DMA_Abort_IT+0x17c>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a25      	ldr	r2, [pc, #148]	; (80025d8 <HAL_DMA_Abort_IT+0x1bc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d027      	beq.n	8002598 <HAL_DMA_Abort_IT+0x17c>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a23      	ldr	r2, [pc, #140]	; (80025dc <HAL_DMA_Abort_IT+0x1c0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d022      	beq.n	8002598 <HAL_DMA_Abort_IT+0x17c>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a22      	ldr	r2, [pc, #136]	; (80025e0 <HAL_DMA_Abort_IT+0x1c4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d01d      	beq.n	8002598 <HAL_DMA_Abort_IT+0x17c>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a20      	ldr	r2, [pc, #128]	; (80025e4 <HAL_DMA_Abort_IT+0x1c8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d018      	beq.n	8002598 <HAL_DMA_Abort_IT+0x17c>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1f      	ldr	r2, [pc, #124]	; (80025e8 <HAL_DMA_Abort_IT+0x1cc>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d013      	beq.n	8002598 <HAL_DMA_Abort_IT+0x17c>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a1d      	ldr	r2, [pc, #116]	; (80025ec <HAL_DMA_Abort_IT+0x1d0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00e      	beq.n	8002598 <HAL_DMA_Abort_IT+0x17c>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a1c      	ldr	r2, [pc, #112]	; (80025f0 <HAL_DMA_Abort_IT+0x1d4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d009      	beq.n	8002598 <HAL_DMA_Abort_IT+0x17c>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1a      	ldr	r2, [pc, #104]	; (80025f4 <HAL_DMA_Abort_IT+0x1d8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d004      	beq.n	8002598 <HAL_DMA_Abort_IT+0x17c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <HAL_DMA_Abort_IT+0x1dc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d108      	bne.n	80025aa <HAL_DMA_Abort_IT+0x18e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	e178      	b.n	800289c <HAL_DMA_Abort_IT+0x480>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0201 	bic.w	r2, r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e16f      	b.n	800289c <HAL_DMA_Abort_IT+0x480>
 80025bc:	40020010 	.word	0x40020010
 80025c0:	40020028 	.word	0x40020028
 80025c4:	40020040 	.word	0x40020040
 80025c8:	40020058 	.word	0x40020058
 80025cc:	40020070 	.word	0x40020070
 80025d0:	40020088 	.word	0x40020088
 80025d4:	400200a0 	.word	0x400200a0
 80025d8:	400200b8 	.word	0x400200b8
 80025dc:	40020410 	.word	0x40020410
 80025e0:	40020428 	.word	0x40020428
 80025e4:	40020440 	.word	0x40020440
 80025e8:	40020458 	.word	0x40020458
 80025ec:	40020470 	.word	0x40020470
 80025f0:	40020488 	.word	0x40020488
 80025f4:	400204a0 	.word	0x400204a0
 80025f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 020e 	bic.w	r2, r2, #14
 800260a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a6c      	ldr	r2, [pc, #432]	; (80027c4 <HAL_DMA_Abort_IT+0x3a8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d04a      	beq.n	80026ac <HAL_DMA_Abort_IT+0x290>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a6b      	ldr	r2, [pc, #428]	; (80027c8 <HAL_DMA_Abort_IT+0x3ac>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d045      	beq.n	80026ac <HAL_DMA_Abort_IT+0x290>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a69      	ldr	r2, [pc, #420]	; (80027cc <HAL_DMA_Abort_IT+0x3b0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d040      	beq.n	80026ac <HAL_DMA_Abort_IT+0x290>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a68      	ldr	r2, [pc, #416]	; (80027d0 <HAL_DMA_Abort_IT+0x3b4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d03b      	beq.n	80026ac <HAL_DMA_Abort_IT+0x290>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a66      	ldr	r2, [pc, #408]	; (80027d4 <HAL_DMA_Abort_IT+0x3b8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d036      	beq.n	80026ac <HAL_DMA_Abort_IT+0x290>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a65      	ldr	r2, [pc, #404]	; (80027d8 <HAL_DMA_Abort_IT+0x3bc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d031      	beq.n	80026ac <HAL_DMA_Abort_IT+0x290>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a63      	ldr	r2, [pc, #396]	; (80027dc <HAL_DMA_Abort_IT+0x3c0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d02c      	beq.n	80026ac <HAL_DMA_Abort_IT+0x290>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a62      	ldr	r2, [pc, #392]	; (80027e0 <HAL_DMA_Abort_IT+0x3c4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d027      	beq.n	80026ac <HAL_DMA_Abort_IT+0x290>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a60      	ldr	r2, [pc, #384]	; (80027e4 <HAL_DMA_Abort_IT+0x3c8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d022      	beq.n	80026ac <HAL_DMA_Abort_IT+0x290>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a5f      	ldr	r2, [pc, #380]	; (80027e8 <HAL_DMA_Abort_IT+0x3cc>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d01d      	beq.n	80026ac <HAL_DMA_Abort_IT+0x290>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a5d      	ldr	r2, [pc, #372]	; (80027ec <HAL_DMA_Abort_IT+0x3d0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d018      	beq.n	80026ac <HAL_DMA_Abort_IT+0x290>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a5c      	ldr	r2, [pc, #368]	; (80027f0 <HAL_DMA_Abort_IT+0x3d4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d013      	beq.n	80026ac <HAL_DMA_Abort_IT+0x290>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a5a      	ldr	r2, [pc, #360]	; (80027f4 <HAL_DMA_Abort_IT+0x3d8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00e      	beq.n	80026ac <HAL_DMA_Abort_IT+0x290>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a59      	ldr	r2, [pc, #356]	; (80027f8 <HAL_DMA_Abort_IT+0x3dc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d009      	beq.n	80026ac <HAL_DMA_Abort_IT+0x290>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a57      	ldr	r2, [pc, #348]	; (80027fc <HAL_DMA_Abort_IT+0x3e0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d004      	beq.n	80026ac <HAL_DMA_Abort_IT+0x290>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a56      	ldr	r2, [pc, #344]	; (8002800 <HAL_DMA_Abort_IT+0x3e4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d108      	bne.n	80026be <HAL_DMA_Abort_IT+0x2a2>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0201 	bic.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	e007      	b.n	80026ce <HAL_DMA_Abort_IT+0x2b2>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0201 	bic.w	r2, r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a3c      	ldr	r2, [pc, #240]	; (80027c4 <HAL_DMA_Abort_IT+0x3a8>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d072      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a3a      	ldr	r2, [pc, #232]	; (80027c8 <HAL_DMA_Abort_IT+0x3ac>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d06d      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a39      	ldr	r2, [pc, #228]	; (80027cc <HAL_DMA_Abort_IT+0x3b0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d068      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a37      	ldr	r2, [pc, #220]	; (80027d0 <HAL_DMA_Abort_IT+0x3b4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d063      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a36      	ldr	r2, [pc, #216]	; (80027d4 <HAL_DMA_Abort_IT+0x3b8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d05e      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a34      	ldr	r2, [pc, #208]	; (80027d8 <HAL_DMA_Abort_IT+0x3bc>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d059      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a33      	ldr	r2, [pc, #204]	; (80027dc <HAL_DMA_Abort_IT+0x3c0>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d054      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a31      	ldr	r2, [pc, #196]	; (80027e0 <HAL_DMA_Abort_IT+0x3c4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d04f      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a30      	ldr	r2, [pc, #192]	; (80027e4 <HAL_DMA_Abort_IT+0x3c8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d04a      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a2e      	ldr	r2, [pc, #184]	; (80027e8 <HAL_DMA_Abort_IT+0x3cc>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d045      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a2d      	ldr	r2, [pc, #180]	; (80027ec <HAL_DMA_Abort_IT+0x3d0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d040      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a2b      	ldr	r2, [pc, #172]	; (80027f0 <HAL_DMA_Abort_IT+0x3d4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d03b      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a2a      	ldr	r2, [pc, #168]	; (80027f4 <HAL_DMA_Abort_IT+0x3d8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d036      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a28      	ldr	r2, [pc, #160]	; (80027f8 <HAL_DMA_Abort_IT+0x3dc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d031      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a27      	ldr	r2, [pc, #156]	; (80027fc <HAL_DMA_Abort_IT+0x3e0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d02c      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a25      	ldr	r2, [pc, #148]	; (8002800 <HAL_DMA_Abort_IT+0x3e4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d027      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a24      	ldr	r2, [pc, #144]	; (8002804 <HAL_DMA_Abort_IT+0x3e8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d022      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a22      	ldr	r2, [pc, #136]	; (8002808 <HAL_DMA_Abort_IT+0x3ec>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d01d      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a21      	ldr	r2, [pc, #132]	; (800280c <HAL_DMA_Abort_IT+0x3f0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d018      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1f      	ldr	r2, [pc, #124]	; (8002810 <HAL_DMA_Abort_IT+0x3f4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d013      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a1e      	ldr	r2, [pc, #120]	; (8002814 <HAL_DMA_Abort_IT+0x3f8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00e      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1c      	ldr	r2, [pc, #112]	; (8002818 <HAL_DMA_Abort_IT+0x3fc>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d009      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1b      	ldr	r2, [pc, #108]	; (800281c <HAL_DMA_Abort_IT+0x400>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d004      	beq.n	80027be <HAL_DMA_Abort_IT+0x3a2>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a19      	ldr	r2, [pc, #100]	; (8002820 <HAL_DMA_Abort_IT+0x404>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d132      	bne.n	8002824 <HAL_DMA_Abort_IT+0x408>
 80027be:	2301      	movs	r3, #1
 80027c0:	e031      	b.n	8002826 <HAL_DMA_Abort_IT+0x40a>
 80027c2:	bf00      	nop
 80027c4:	40020010 	.word	0x40020010
 80027c8:	40020028 	.word	0x40020028
 80027cc:	40020040 	.word	0x40020040
 80027d0:	40020058 	.word	0x40020058
 80027d4:	40020070 	.word	0x40020070
 80027d8:	40020088 	.word	0x40020088
 80027dc:	400200a0 	.word	0x400200a0
 80027e0:	400200b8 	.word	0x400200b8
 80027e4:	40020410 	.word	0x40020410
 80027e8:	40020428 	.word	0x40020428
 80027ec:	40020440 	.word	0x40020440
 80027f0:	40020458 	.word	0x40020458
 80027f4:	40020470 	.word	0x40020470
 80027f8:	40020488 	.word	0x40020488
 80027fc:	400204a0 	.word	0x400204a0
 8002800:	400204b8 	.word	0x400204b8
 8002804:	58025408 	.word	0x58025408
 8002808:	5802541c 	.word	0x5802541c
 800280c:	58025430 	.word	0x58025430
 8002810:	58025444 	.word	0x58025444
 8002814:	58025458 	.word	0x58025458
 8002818:	5802546c 	.word	0x5802546c
 800281c:	58025480 	.word	0x58025480
 8002820:	58025494 	.word	0x58025494
 8002824:	2300      	movs	r3, #0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d028      	beq.n	800287c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002834:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002838:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	2201      	movs	r2, #1
 800284a:	409a      	lsls	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002858:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00c      	beq.n	800287c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800286c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002870:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800287a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop

080028a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028b4:	4b67      	ldr	r3, [pc, #412]	; (8002a54 <HAL_DMA_IRQHandler+0x1ac>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a67      	ldr	r2, [pc, #412]	; (8002a58 <HAL_DMA_IRQHandler+0x1b0>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	0a9b      	lsrs	r3, r3, #10
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028cc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a5f      	ldr	r2, [pc, #380]	; (8002a5c <HAL_DMA_IRQHandler+0x1b4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d04a      	beq.n	800297a <HAL_DMA_IRQHandler+0xd2>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a5d      	ldr	r2, [pc, #372]	; (8002a60 <HAL_DMA_IRQHandler+0x1b8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d045      	beq.n	800297a <HAL_DMA_IRQHandler+0xd2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a5c      	ldr	r2, [pc, #368]	; (8002a64 <HAL_DMA_IRQHandler+0x1bc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d040      	beq.n	800297a <HAL_DMA_IRQHandler+0xd2>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a5a      	ldr	r2, [pc, #360]	; (8002a68 <HAL_DMA_IRQHandler+0x1c0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d03b      	beq.n	800297a <HAL_DMA_IRQHandler+0xd2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a59      	ldr	r2, [pc, #356]	; (8002a6c <HAL_DMA_IRQHandler+0x1c4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d036      	beq.n	800297a <HAL_DMA_IRQHandler+0xd2>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a57      	ldr	r2, [pc, #348]	; (8002a70 <HAL_DMA_IRQHandler+0x1c8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d031      	beq.n	800297a <HAL_DMA_IRQHandler+0xd2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a56      	ldr	r2, [pc, #344]	; (8002a74 <HAL_DMA_IRQHandler+0x1cc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d02c      	beq.n	800297a <HAL_DMA_IRQHandler+0xd2>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a54      	ldr	r2, [pc, #336]	; (8002a78 <HAL_DMA_IRQHandler+0x1d0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d027      	beq.n	800297a <HAL_DMA_IRQHandler+0xd2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a53      	ldr	r2, [pc, #332]	; (8002a7c <HAL_DMA_IRQHandler+0x1d4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d022      	beq.n	800297a <HAL_DMA_IRQHandler+0xd2>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a51      	ldr	r2, [pc, #324]	; (8002a80 <HAL_DMA_IRQHandler+0x1d8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d01d      	beq.n	800297a <HAL_DMA_IRQHandler+0xd2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a50      	ldr	r2, [pc, #320]	; (8002a84 <HAL_DMA_IRQHandler+0x1dc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d018      	beq.n	800297a <HAL_DMA_IRQHandler+0xd2>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a4e      	ldr	r2, [pc, #312]	; (8002a88 <HAL_DMA_IRQHandler+0x1e0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d013      	beq.n	800297a <HAL_DMA_IRQHandler+0xd2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a4d      	ldr	r2, [pc, #308]	; (8002a8c <HAL_DMA_IRQHandler+0x1e4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d00e      	beq.n	800297a <HAL_DMA_IRQHandler+0xd2>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a4b      	ldr	r2, [pc, #300]	; (8002a90 <HAL_DMA_IRQHandler+0x1e8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d009      	beq.n	800297a <HAL_DMA_IRQHandler+0xd2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a4a      	ldr	r2, [pc, #296]	; (8002a94 <HAL_DMA_IRQHandler+0x1ec>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d004      	beq.n	800297a <HAL_DMA_IRQHandler+0xd2>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a48      	ldr	r2, [pc, #288]	; (8002a98 <HAL_DMA_IRQHandler+0x1f0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d101      	bne.n	800297e <HAL_DMA_IRQHandler+0xd6>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_DMA_IRQHandler+0xd8>
 800297e:	2300      	movs	r3, #0
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 842b 	beq.w	80031dc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	2208      	movs	r2, #8
 8002990:	409a      	lsls	r2, r3
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 80a2 	beq.w	8002ae0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a2e      	ldr	r2, [pc, #184]	; (8002a5c <HAL_DMA_IRQHandler+0x1b4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d04a      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x194>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a2d      	ldr	r2, [pc, #180]	; (8002a60 <HAL_DMA_IRQHandler+0x1b8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d045      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x194>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a2b      	ldr	r2, [pc, #172]	; (8002a64 <HAL_DMA_IRQHandler+0x1bc>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d040      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x194>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a2a      	ldr	r2, [pc, #168]	; (8002a68 <HAL_DMA_IRQHandler+0x1c0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d03b      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x194>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a28      	ldr	r2, [pc, #160]	; (8002a6c <HAL_DMA_IRQHandler+0x1c4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d036      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x194>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a27      	ldr	r2, [pc, #156]	; (8002a70 <HAL_DMA_IRQHandler+0x1c8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d031      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x194>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a25      	ldr	r2, [pc, #148]	; (8002a74 <HAL_DMA_IRQHandler+0x1cc>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d02c      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x194>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a24      	ldr	r2, [pc, #144]	; (8002a78 <HAL_DMA_IRQHandler+0x1d0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d027      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x194>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a22      	ldr	r2, [pc, #136]	; (8002a7c <HAL_DMA_IRQHandler+0x1d4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d022      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x194>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a21      	ldr	r2, [pc, #132]	; (8002a80 <HAL_DMA_IRQHandler+0x1d8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d01d      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x194>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <HAL_DMA_IRQHandler+0x1dc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d018      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x194>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1e      	ldr	r2, [pc, #120]	; (8002a88 <HAL_DMA_IRQHandler+0x1e0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d013      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x194>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <HAL_DMA_IRQHandler+0x1e4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00e      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x194>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1b      	ldr	r2, [pc, #108]	; (8002a90 <HAL_DMA_IRQHandler+0x1e8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d009      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x194>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a19      	ldr	r2, [pc, #100]	; (8002a94 <HAL_DMA_IRQHandler+0x1ec>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d004      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x194>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a18      	ldr	r2, [pc, #96]	; (8002a98 <HAL_DMA_IRQHandler+0x1f0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d12f      	bne.n	8002a9c <HAL_DMA_IRQHandler+0x1f4>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	bf14      	ite	ne
 8002a4a:	2301      	movne	r3, #1
 8002a4c:	2300      	moveq	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	e02e      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x208>
 8002a52:	bf00      	nop
 8002a54:	24000000 	.word	0x24000000
 8002a58:	1b4e81b5 	.word	0x1b4e81b5
 8002a5c:	40020010 	.word	0x40020010
 8002a60:	40020028 	.word	0x40020028
 8002a64:	40020040 	.word	0x40020040
 8002a68:	40020058 	.word	0x40020058
 8002a6c:	40020070 	.word	0x40020070
 8002a70:	40020088 	.word	0x40020088
 8002a74:	400200a0 	.word	0x400200a0
 8002a78:	400200b8 	.word	0x400200b8
 8002a7c:	40020410 	.word	0x40020410
 8002a80:	40020428 	.word	0x40020428
 8002a84:	40020440 	.word	0x40020440
 8002a88:	40020458 	.word	0x40020458
 8002a8c:	40020470 	.word	0x40020470
 8002a90:	40020488 	.word	0x40020488
 8002a94:	400204a0 	.word	0x400204a0
 8002a98:	400204b8 	.word	0x400204b8
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bf14      	ite	ne
 8002aaa:	2301      	movne	r3, #1
 8002aac:	2300      	moveq	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d015      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0204 	bic.w	r2, r2, #4
 8002ac2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	2208      	movs	r2, #8
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	f043 0201 	orr.w	r2, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	fa22 f303 	lsr.w	r3, r2, r3
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d06e      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a69      	ldr	r2, [pc, #420]	; (8002ca0 <HAL_DMA_IRQHandler+0x3f8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d04a      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x2ee>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a67      	ldr	r2, [pc, #412]	; (8002ca4 <HAL_DMA_IRQHandler+0x3fc>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d045      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x2ee>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a66      	ldr	r2, [pc, #408]	; (8002ca8 <HAL_DMA_IRQHandler+0x400>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d040      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x2ee>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a64      	ldr	r2, [pc, #400]	; (8002cac <HAL_DMA_IRQHandler+0x404>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d03b      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x2ee>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a63      	ldr	r2, [pc, #396]	; (8002cb0 <HAL_DMA_IRQHandler+0x408>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d036      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x2ee>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a61      	ldr	r2, [pc, #388]	; (8002cb4 <HAL_DMA_IRQHandler+0x40c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d031      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x2ee>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a60      	ldr	r2, [pc, #384]	; (8002cb8 <HAL_DMA_IRQHandler+0x410>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d02c      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x2ee>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a5e      	ldr	r2, [pc, #376]	; (8002cbc <HAL_DMA_IRQHandler+0x414>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d027      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x2ee>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a5d      	ldr	r2, [pc, #372]	; (8002cc0 <HAL_DMA_IRQHandler+0x418>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d022      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x2ee>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a5b      	ldr	r2, [pc, #364]	; (8002cc4 <HAL_DMA_IRQHandler+0x41c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d01d      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x2ee>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a5a      	ldr	r2, [pc, #360]	; (8002cc8 <HAL_DMA_IRQHandler+0x420>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d018      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x2ee>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a58      	ldr	r2, [pc, #352]	; (8002ccc <HAL_DMA_IRQHandler+0x424>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x2ee>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a57      	ldr	r2, [pc, #348]	; (8002cd0 <HAL_DMA_IRQHandler+0x428>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00e      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x2ee>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a55      	ldr	r2, [pc, #340]	; (8002cd4 <HAL_DMA_IRQHandler+0x42c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d009      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x2ee>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a54      	ldr	r2, [pc, #336]	; (8002cd8 <HAL_DMA_IRQHandler+0x430>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d004      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x2ee>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a52      	ldr	r2, [pc, #328]	; (8002cdc <HAL_DMA_IRQHandler+0x434>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d10a      	bne.n	8002bac <HAL_DMA_IRQHandler+0x304>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	e003      	b.n	8002bb4 <HAL_DMA_IRQHandler+0x30c>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00d      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbc:	f003 031f 	and.w	r3, r3, #31
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bcc:	f043 0202 	orr.w	r2, r3, #2
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	2204      	movs	r2, #4
 8002bde:	409a      	lsls	r2, r3
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 808f 	beq.w	8002d08 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a2c      	ldr	r2, [pc, #176]	; (8002ca0 <HAL_DMA_IRQHandler+0x3f8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d04a      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x3e2>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a2a      	ldr	r2, [pc, #168]	; (8002ca4 <HAL_DMA_IRQHandler+0x3fc>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d045      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x3e2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a29      	ldr	r2, [pc, #164]	; (8002ca8 <HAL_DMA_IRQHandler+0x400>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d040      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x3e2>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a27      	ldr	r2, [pc, #156]	; (8002cac <HAL_DMA_IRQHandler+0x404>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d03b      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x3e2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a26      	ldr	r2, [pc, #152]	; (8002cb0 <HAL_DMA_IRQHandler+0x408>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d036      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x3e2>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a24      	ldr	r2, [pc, #144]	; (8002cb4 <HAL_DMA_IRQHandler+0x40c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d031      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x3e2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a23      	ldr	r2, [pc, #140]	; (8002cb8 <HAL_DMA_IRQHandler+0x410>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d02c      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x3e2>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a21      	ldr	r2, [pc, #132]	; (8002cbc <HAL_DMA_IRQHandler+0x414>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d027      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x3e2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a20      	ldr	r2, [pc, #128]	; (8002cc0 <HAL_DMA_IRQHandler+0x418>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d022      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x3e2>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1e      	ldr	r2, [pc, #120]	; (8002cc4 <HAL_DMA_IRQHandler+0x41c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d01d      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x3e2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <HAL_DMA_IRQHandler+0x420>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d018      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x3e2>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ccc <HAL_DMA_IRQHandler+0x424>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d013      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x3e2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a1a      	ldr	r2, [pc, #104]	; (8002cd0 <HAL_DMA_IRQHandler+0x428>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d00e      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x3e2>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a18      	ldr	r2, [pc, #96]	; (8002cd4 <HAL_DMA_IRQHandler+0x42c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d009      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x3e2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a17      	ldr	r2, [pc, #92]	; (8002cd8 <HAL_DMA_IRQHandler+0x430>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d004      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x3e2>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a15      	ldr	r2, [pc, #84]	; (8002cdc <HAL_DMA_IRQHandler+0x434>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d12a      	bne.n	8002ce0 <HAL_DMA_IRQHandler+0x438>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf14      	ite	ne
 8002c98:	2301      	movne	r3, #1
 8002c9a:	2300      	moveq	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	e023      	b.n	8002ce8 <HAL_DMA_IRQHandler+0x440>
 8002ca0:	40020010 	.word	0x40020010
 8002ca4:	40020028 	.word	0x40020028
 8002ca8:	40020040 	.word	0x40020040
 8002cac:	40020058 	.word	0x40020058
 8002cb0:	40020070 	.word	0x40020070
 8002cb4:	40020088 	.word	0x40020088
 8002cb8:	400200a0 	.word	0x400200a0
 8002cbc:	400200b8 	.word	0x400200b8
 8002cc0:	40020410 	.word	0x40020410
 8002cc4:	40020428 	.word	0x40020428
 8002cc8:	40020440 	.word	0x40020440
 8002ccc:	40020458 	.word	0x40020458
 8002cd0:	40020470 	.word	0x40020470
 8002cd4:	40020488 	.word	0x40020488
 8002cd8:	400204a0 	.word	0x400204a0
 8002cdc:	400204b8 	.word	0x400204b8
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00d      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	f043 0204 	orr.w	r2, r3, #4
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	2210      	movs	r2, #16
 8002d12:	409a      	lsls	r2, r3
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 80a6 	beq.w	8002e6a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a85      	ldr	r2, [pc, #532]	; (8002f38 <HAL_DMA_IRQHandler+0x690>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d04a      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x516>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a83      	ldr	r2, [pc, #524]	; (8002f3c <HAL_DMA_IRQHandler+0x694>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d045      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x516>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a82      	ldr	r2, [pc, #520]	; (8002f40 <HAL_DMA_IRQHandler+0x698>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d040      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x516>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a80      	ldr	r2, [pc, #512]	; (8002f44 <HAL_DMA_IRQHandler+0x69c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d03b      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x516>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a7f      	ldr	r2, [pc, #508]	; (8002f48 <HAL_DMA_IRQHandler+0x6a0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d036      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x516>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a7d      	ldr	r2, [pc, #500]	; (8002f4c <HAL_DMA_IRQHandler+0x6a4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d031      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x516>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a7c      	ldr	r2, [pc, #496]	; (8002f50 <HAL_DMA_IRQHandler+0x6a8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d02c      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x516>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a7a      	ldr	r2, [pc, #488]	; (8002f54 <HAL_DMA_IRQHandler+0x6ac>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d027      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x516>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a79      	ldr	r2, [pc, #484]	; (8002f58 <HAL_DMA_IRQHandler+0x6b0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d022      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x516>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a77      	ldr	r2, [pc, #476]	; (8002f5c <HAL_DMA_IRQHandler+0x6b4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d01d      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x516>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a76      	ldr	r2, [pc, #472]	; (8002f60 <HAL_DMA_IRQHandler+0x6b8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d018      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x516>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a74      	ldr	r2, [pc, #464]	; (8002f64 <HAL_DMA_IRQHandler+0x6bc>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x516>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a73      	ldr	r2, [pc, #460]	; (8002f68 <HAL_DMA_IRQHandler+0x6c0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00e      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x516>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a71      	ldr	r2, [pc, #452]	; (8002f6c <HAL_DMA_IRQHandler+0x6c4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d009      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x516>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a70      	ldr	r2, [pc, #448]	; (8002f70 <HAL_DMA_IRQHandler+0x6c8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d004      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x516>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a6e      	ldr	r2, [pc, #440]	; (8002f74 <HAL_DMA_IRQHandler+0x6cc>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d10a      	bne.n	8002dd4 <HAL_DMA_IRQHandler+0x52c>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf14      	ite	ne
 8002dcc:	2301      	movne	r3, #1
 8002dce:	2300      	moveq	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	e009      	b.n	8002de8 <HAL_DMA_IRQHandler+0x540>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bf14      	ite	ne
 8002de2:	2301      	movne	r3, #1
 8002de4:	2300      	moveq	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d03e      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df0:	f003 031f 	and.w	r3, r3, #31
 8002df4:	2210      	movs	r2, #16
 8002df6:	409a      	lsls	r2, r3
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d018      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d108      	bne.n	8002e2a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d024      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	4798      	blx	r3
 8002e28:	e01f      	b.n	8002e6a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d01b      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	4798      	blx	r3
 8002e3a:	e016      	b.n	8002e6a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d107      	bne.n	8002e5a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0208 	bic.w	r2, r2, #8
 8002e58:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	2220      	movs	r2, #32
 8002e74:	409a      	lsls	r2, r3
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8110 	beq.w	80030a0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a2c      	ldr	r2, [pc, #176]	; (8002f38 <HAL_DMA_IRQHandler+0x690>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d04a      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x678>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a2b      	ldr	r2, [pc, #172]	; (8002f3c <HAL_DMA_IRQHandler+0x694>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d045      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x678>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a29      	ldr	r2, [pc, #164]	; (8002f40 <HAL_DMA_IRQHandler+0x698>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d040      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x678>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a28      	ldr	r2, [pc, #160]	; (8002f44 <HAL_DMA_IRQHandler+0x69c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d03b      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x678>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a26      	ldr	r2, [pc, #152]	; (8002f48 <HAL_DMA_IRQHandler+0x6a0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d036      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x678>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a25      	ldr	r2, [pc, #148]	; (8002f4c <HAL_DMA_IRQHandler+0x6a4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d031      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x678>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a23      	ldr	r2, [pc, #140]	; (8002f50 <HAL_DMA_IRQHandler+0x6a8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d02c      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x678>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a22      	ldr	r2, [pc, #136]	; (8002f54 <HAL_DMA_IRQHandler+0x6ac>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d027      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x678>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a20      	ldr	r2, [pc, #128]	; (8002f58 <HAL_DMA_IRQHandler+0x6b0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d022      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x678>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <HAL_DMA_IRQHandler+0x6b4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d01d      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x678>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1d      	ldr	r2, [pc, #116]	; (8002f60 <HAL_DMA_IRQHandler+0x6b8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d018      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x678>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1c      	ldr	r2, [pc, #112]	; (8002f64 <HAL_DMA_IRQHandler+0x6bc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d013      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x678>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1a      	ldr	r2, [pc, #104]	; (8002f68 <HAL_DMA_IRQHandler+0x6c0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00e      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x678>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a19      	ldr	r2, [pc, #100]	; (8002f6c <HAL_DMA_IRQHandler+0x6c4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d009      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x678>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a17      	ldr	r2, [pc, #92]	; (8002f70 <HAL_DMA_IRQHandler+0x6c8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d004      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x678>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a16      	ldr	r2, [pc, #88]	; (8002f74 <HAL_DMA_IRQHandler+0x6cc>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d12b      	bne.n	8002f78 <HAL_DMA_IRQHandler+0x6d0>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	bf14      	ite	ne
 8002f2e:	2301      	movne	r3, #1
 8002f30:	2300      	moveq	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	e02a      	b.n	8002f8c <HAL_DMA_IRQHandler+0x6e4>
 8002f36:	bf00      	nop
 8002f38:	40020010 	.word	0x40020010
 8002f3c:	40020028 	.word	0x40020028
 8002f40:	40020040 	.word	0x40020040
 8002f44:	40020058 	.word	0x40020058
 8002f48:	40020070 	.word	0x40020070
 8002f4c:	40020088 	.word	0x40020088
 8002f50:	400200a0 	.word	0x400200a0
 8002f54:	400200b8 	.word	0x400200b8
 8002f58:	40020410 	.word	0x40020410
 8002f5c:	40020428 	.word	0x40020428
 8002f60:	40020440 	.word	0x40020440
 8002f64:	40020458 	.word	0x40020458
 8002f68:	40020470 	.word	0x40020470
 8002f6c:	40020488 	.word	0x40020488
 8002f70:	400204a0 	.word	0x400204a0
 8002f74:	400204b8 	.word	0x400204b8
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	bf14      	ite	ne
 8002f86:	2301      	movne	r3, #1
 8002f88:	2300      	moveq	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8087 	beq.w	80030a0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d139      	bne.n	8003022 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0216 	bic.w	r2, r2, #22
 8002fbc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fcc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d103      	bne.n	8002fde <HAL_DMA_IRQHandler+0x736>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0208 	bic.w	r2, r2, #8
 8002fec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	223f      	movs	r2, #63	; 0x3f
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 834a 	beq.w	80036ac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	4798      	blx	r3
          }
          return;
 8003020:	e344      	b.n	80036ac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d018      	beq.n	8003062 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d108      	bne.n	8003050 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	2b00      	cmp	r3, #0
 8003044:	d02c      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	4798      	blx	r3
 800304e:	e027      	b.n	80030a0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003054:	2b00      	cmp	r3, #0
 8003056:	d023      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	4798      	blx	r3
 8003060:	e01e      	b.n	80030a0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10f      	bne.n	8003090 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0210 	bic.w	r2, r2, #16
 800307e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8306 	beq.w	80036b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 8088 	beq.w	80031c8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2204      	movs	r2, #4
 80030bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a7a      	ldr	r2, [pc, #488]	; (80032b0 <HAL_DMA_IRQHandler+0xa08>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d04a      	beq.n	8003160 <HAL_DMA_IRQHandler+0x8b8>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a79      	ldr	r2, [pc, #484]	; (80032b4 <HAL_DMA_IRQHandler+0xa0c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d045      	beq.n	8003160 <HAL_DMA_IRQHandler+0x8b8>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a77      	ldr	r2, [pc, #476]	; (80032b8 <HAL_DMA_IRQHandler+0xa10>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d040      	beq.n	8003160 <HAL_DMA_IRQHandler+0x8b8>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a76      	ldr	r2, [pc, #472]	; (80032bc <HAL_DMA_IRQHandler+0xa14>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d03b      	beq.n	8003160 <HAL_DMA_IRQHandler+0x8b8>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a74      	ldr	r2, [pc, #464]	; (80032c0 <HAL_DMA_IRQHandler+0xa18>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d036      	beq.n	8003160 <HAL_DMA_IRQHandler+0x8b8>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a73      	ldr	r2, [pc, #460]	; (80032c4 <HAL_DMA_IRQHandler+0xa1c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d031      	beq.n	8003160 <HAL_DMA_IRQHandler+0x8b8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a71      	ldr	r2, [pc, #452]	; (80032c8 <HAL_DMA_IRQHandler+0xa20>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d02c      	beq.n	8003160 <HAL_DMA_IRQHandler+0x8b8>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a70      	ldr	r2, [pc, #448]	; (80032cc <HAL_DMA_IRQHandler+0xa24>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d027      	beq.n	8003160 <HAL_DMA_IRQHandler+0x8b8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a6e      	ldr	r2, [pc, #440]	; (80032d0 <HAL_DMA_IRQHandler+0xa28>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d022      	beq.n	8003160 <HAL_DMA_IRQHandler+0x8b8>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a6d      	ldr	r2, [pc, #436]	; (80032d4 <HAL_DMA_IRQHandler+0xa2c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d01d      	beq.n	8003160 <HAL_DMA_IRQHandler+0x8b8>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a6b      	ldr	r2, [pc, #428]	; (80032d8 <HAL_DMA_IRQHandler+0xa30>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d018      	beq.n	8003160 <HAL_DMA_IRQHandler+0x8b8>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a6a      	ldr	r2, [pc, #424]	; (80032dc <HAL_DMA_IRQHandler+0xa34>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d013      	beq.n	8003160 <HAL_DMA_IRQHandler+0x8b8>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a68      	ldr	r2, [pc, #416]	; (80032e0 <HAL_DMA_IRQHandler+0xa38>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d00e      	beq.n	8003160 <HAL_DMA_IRQHandler+0x8b8>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a67      	ldr	r2, [pc, #412]	; (80032e4 <HAL_DMA_IRQHandler+0xa3c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d009      	beq.n	8003160 <HAL_DMA_IRQHandler+0x8b8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a65      	ldr	r2, [pc, #404]	; (80032e8 <HAL_DMA_IRQHandler+0xa40>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d004      	beq.n	8003160 <HAL_DMA_IRQHandler+0x8b8>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a64      	ldr	r2, [pc, #400]	; (80032ec <HAL_DMA_IRQHandler+0xa44>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d108      	bne.n	8003172 <HAL_DMA_IRQHandler+0x8ca>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0201 	bic.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	e007      	b.n	8003182 <HAL_DMA_IRQHandler+0x8da>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0201 	bic.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3301      	adds	r3, #1
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318a:	429a      	cmp	r2, r3
 800318c:	d307      	bcc.n	800319e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1f2      	bne.n	8003182 <HAL_DMA_IRQHandler+0x8da>
 800319c:	e000      	b.n	80031a0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800319e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d004      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2203      	movs	r2, #3
 80031ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80031be:	e003      	b.n	80031c8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 8272 	beq.w	80036b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	4798      	blx	r3
 80031da:	e26c      	b.n	80036b6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a43      	ldr	r2, [pc, #268]	; (80032f0 <HAL_DMA_IRQHandler+0xa48>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d022      	beq.n	800322c <HAL_DMA_IRQHandler+0x984>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a42      	ldr	r2, [pc, #264]	; (80032f4 <HAL_DMA_IRQHandler+0xa4c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d01d      	beq.n	800322c <HAL_DMA_IRQHandler+0x984>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a40      	ldr	r2, [pc, #256]	; (80032f8 <HAL_DMA_IRQHandler+0xa50>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d018      	beq.n	800322c <HAL_DMA_IRQHandler+0x984>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a3f      	ldr	r2, [pc, #252]	; (80032fc <HAL_DMA_IRQHandler+0xa54>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d013      	beq.n	800322c <HAL_DMA_IRQHandler+0x984>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a3d      	ldr	r2, [pc, #244]	; (8003300 <HAL_DMA_IRQHandler+0xa58>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00e      	beq.n	800322c <HAL_DMA_IRQHandler+0x984>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a3c      	ldr	r2, [pc, #240]	; (8003304 <HAL_DMA_IRQHandler+0xa5c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d009      	beq.n	800322c <HAL_DMA_IRQHandler+0x984>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a3a      	ldr	r2, [pc, #232]	; (8003308 <HAL_DMA_IRQHandler+0xa60>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <HAL_DMA_IRQHandler+0x984>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a39      	ldr	r2, [pc, #228]	; (800330c <HAL_DMA_IRQHandler+0xa64>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d101      	bne.n	8003230 <HAL_DMA_IRQHandler+0x988>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <HAL_DMA_IRQHandler+0x98a>
 8003230:	2300      	movs	r3, #0
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 823f 	beq.w	80036b6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	2204      	movs	r2, #4
 800324a:	409a      	lsls	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80cd 	beq.w	80033f0 <HAL_DMA_IRQHandler+0xb48>
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80c7 	beq.w	80033f0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	2204      	movs	r2, #4
 800326c:	409a      	lsls	r2, r3
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d049      	beq.n	8003310 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8210 	beq.w	80036b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003298:	e20a      	b.n	80036b0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 8206 	beq.w	80036b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032ac:	e200      	b.n	80036b0 <HAL_DMA_IRQHandler+0xe08>
 80032ae:	bf00      	nop
 80032b0:	40020010 	.word	0x40020010
 80032b4:	40020028 	.word	0x40020028
 80032b8:	40020040 	.word	0x40020040
 80032bc:	40020058 	.word	0x40020058
 80032c0:	40020070 	.word	0x40020070
 80032c4:	40020088 	.word	0x40020088
 80032c8:	400200a0 	.word	0x400200a0
 80032cc:	400200b8 	.word	0x400200b8
 80032d0:	40020410 	.word	0x40020410
 80032d4:	40020428 	.word	0x40020428
 80032d8:	40020440 	.word	0x40020440
 80032dc:	40020458 	.word	0x40020458
 80032e0:	40020470 	.word	0x40020470
 80032e4:	40020488 	.word	0x40020488
 80032e8:	400204a0 	.word	0x400204a0
 80032ec:	400204b8 	.word	0x400204b8
 80032f0:	58025408 	.word	0x58025408
 80032f4:	5802541c 	.word	0x5802541c
 80032f8:	58025430 	.word	0x58025430
 80032fc:	58025444 	.word	0x58025444
 8003300:	58025458 	.word	0x58025458
 8003304:	5802546c 	.word	0x5802546c
 8003308:	58025480 	.word	0x58025480
 800330c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	d160      	bne.n	80033dc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a7f      	ldr	r2, [pc, #508]	; (800351c <HAL_DMA_IRQHandler+0xc74>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d04a      	beq.n	80033ba <HAL_DMA_IRQHandler+0xb12>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a7d      	ldr	r2, [pc, #500]	; (8003520 <HAL_DMA_IRQHandler+0xc78>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d045      	beq.n	80033ba <HAL_DMA_IRQHandler+0xb12>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a7c      	ldr	r2, [pc, #496]	; (8003524 <HAL_DMA_IRQHandler+0xc7c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d040      	beq.n	80033ba <HAL_DMA_IRQHandler+0xb12>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a7a      	ldr	r2, [pc, #488]	; (8003528 <HAL_DMA_IRQHandler+0xc80>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d03b      	beq.n	80033ba <HAL_DMA_IRQHandler+0xb12>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a79      	ldr	r2, [pc, #484]	; (800352c <HAL_DMA_IRQHandler+0xc84>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d036      	beq.n	80033ba <HAL_DMA_IRQHandler+0xb12>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a77      	ldr	r2, [pc, #476]	; (8003530 <HAL_DMA_IRQHandler+0xc88>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d031      	beq.n	80033ba <HAL_DMA_IRQHandler+0xb12>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a76      	ldr	r2, [pc, #472]	; (8003534 <HAL_DMA_IRQHandler+0xc8c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d02c      	beq.n	80033ba <HAL_DMA_IRQHandler+0xb12>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a74      	ldr	r2, [pc, #464]	; (8003538 <HAL_DMA_IRQHandler+0xc90>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d027      	beq.n	80033ba <HAL_DMA_IRQHandler+0xb12>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a73      	ldr	r2, [pc, #460]	; (800353c <HAL_DMA_IRQHandler+0xc94>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d022      	beq.n	80033ba <HAL_DMA_IRQHandler+0xb12>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a71      	ldr	r2, [pc, #452]	; (8003540 <HAL_DMA_IRQHandler+0xc98>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d01d      	beq.n	80033ba <HAL_DMA_IRQHandler+0xb12>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a70      	ldr	r2, [pc, #448]	; (8003544 <HAL_DMA_IRQHandler+0xc9c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d018      	beq.n	80033ba <HAL_DMA_IRQHandler+0xb12>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a6e      	ldr	r2, [pc, #440]	; (8003548 <HAL_DMA_IRQHandler+0xca0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d013      	beq.n	80033ba <HAL_DMA_IRQHandler+0xb12>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a6d      	ldr	r2, [pc, #436]	; (800354c <HAL_DMA_IRQHandler+0xca4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00e      	beq.n	80033ba <HAL_DMA_IRQHandler+0xb12>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a6b      	ldr	r2, [pc, #428]	; (8003550 <HAL_DMA_IRQHandler+0xca8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d009      	beq.n	80033ba <HAL_DMA_IRQHandler+0xb12>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a6a      	ldr	r2, [pc, #424]	; (8003554 <HAL_DMA_IRQHandler+0xcac>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d004      	beq.n	80033ba <HAL_DMA_IRQHandler+0xb12>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a68      	ldr	r2, [pc, #416]	; (8003558 <HAL_DMA_IRQHandler+0xcb0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d108      	bne.n	80033cc <HAL_DMA_IRQHandler+0xb24>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0208 	bic.w	r2, r2, #8
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	e007      	b.n	80033dc <HAL_DMA_IRQHandler+0xb34>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0204 	bic.w	r2, r2, #4
 80033da:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 8165 	beq.w	80036b0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033ee:	e15f      	b.n	80036b0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	2202      	movs	r2, #2
 80033fa:	409a      	lsls	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 80c5 	beq.w	8003590 <HAL_DMA_IRQHandler+0xce8>
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 80bf 	beq.w	8003590 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003416:	f003 031f 	and.w	r3, r3, #31
 800341a:	2202      	movs	r2, #2
 800341c:	409a      	lsls	r2, r3
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d018      	beq.n	800345e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d109      	bne.n	800344a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 813a 	beq.w	80036b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003448:	e134      	b.n	80036b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 8130 	beq.w	80036b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800345c:	e12a      	b.n	80036b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b00      	cmp	r3, #0
 8003466:	f040 8089 	bne.w	800357c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a2b      	ldr	r2, [pc, #172]	; (800351c <HAL_DMA_IRQHandler+0xc74>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d04a      	beq.n	800350a <HAL_DMA_IRQHandler+0xc62>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a29      	ldr	r2, [pc, #164]	; (8003520 <HAL_DMA_IRQHandler+0xc78>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d045      	beq.n	800350a <HAL_DMA_IRQHandler+0xc62>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a28      	ldr	r2, [pc, #160]	; (8003524 <HAL_DMA_IRQHandler+0xc7c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d040      	beq.n	800350a <HAL_DMA_IRQHandler+0xc62>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a26      	ldr	r2, [pc, #152]	; (8003528 <HAL_DMA_IRQHandler+0xc80>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d03b      	beq.n	800350a <HAL_DMA_IRQHandler+0xc62>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a25      	ldr	r2, [pc, #148]	; (800352c <HAL_DMA_IRQHandler+0xc84>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d036      	beq.n	800350a <HAL_DMA_IRQHandler+0xc62>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a23      	ldr	r2, [pc, #140]	; (8003530 <HAL_DMA_IRQHandler+0xc88>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d031      	beq.n	800350a <HAL_DMA_IRQHandler+0xc62>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a22      	ldr	r2, [pc, #136]	; (8003534 <HAL_DMA_IRQHandler+0xc8c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d02c      	beq.n	800350a <HAL_DMA_IRQHandler+0xc62>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a20      	ldr	r2, [pc, #128]	; (8003538 <HAL_DMA_IRQHandler+0xc90>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d027      	beq.n	800350a <HAL_DMA_IRQHandler+0xc62>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1f      	ldr	r2, [pc, #124]	; (800353c <HAL_DMA_IRQHandler+0xc94>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <HAL_DMA_IRQHandler+0xc62>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a1d      	ldr	r2, [pc, #116]	; (8003540 <HAL_DMA_IRQHandler+0xc98>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01d      	beq.n	800350a <HAL_DMA_IRQHandler+0xc62>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1c      	ldr	r2, [pc, #112]	; (8003544 <HAL_DMA_IRQHandler+0xc9c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d018      	beq.n	800350a <HAL_DMA_IRQHandler+0xc62>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1a      	ldr	r2, [pc, #104]	; (8003548 <HAL_DMA_IRQHandler+0xca0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <HAL_DMA_IRQHandler+0xc62>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a19      	ldr	r2, [pc, #100]	; (800354c <HAL_DMA_IRQHandler+0xca4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00e      	beq.n	800350a <HAL_DMA_IRQHandler+0xc62>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a17      	ldr	r2, [pc, #92]	; (8003550 <HAL_DMA_IRQHandler+0xca8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d009      	beq.n	800350a <HAL_DMA_IRQHandler+0xc62>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a16      	ldr	r2, [pc, #88]	; (8003554 <HAL_DMA_IRQHandler+0xcac>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_DMA_IRQHandler+0xc62>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a14      	ldr	r2, [pc, #80]	; (8003558 <HAL_DMA_IRQHandler+0xcb0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d128      	bne.n	800355c <HAL_DMA_IRQHandler+0xcb4>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0214 	bic.w	r2, r2, #20
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e027      	b.n	800356c <HAL_DMA_IRQHandler+0xcc4>
 800351c:	40020010 	.word	0x40020010
 8003520:	40020028 	.word	0x40020028
 8003524:	40020040 	.word	0x40020040
 8003528:	40020058 	.word	0x40020058
 800352c:	40020070 	.word	0x40020070
 8003530:	40020088 	.word	0x40020088
 8003534:	400200a0 	.word	0x400200a0
 8003538:	400200b8 	.word	0x400200b8
 800353c:	40020410 	.word	0x40020410
 8003540:	40020428 	.word	0x40020428
 8003544:	40020440 	.word	0x40020440
 8003548:	40020458 	.word	0x40020458
 800354c:	40020470 	.word	0x40020470
 8003550:	40020488 	.word	0x40020488
 8003554:	400204a0 	.word	0x400204a0
 8003558:	400204b8 	.word	0x400204b8
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 020a 	bic.w	r2, r2, #10
 800356a:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 8097 	beq.w	80036b4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800358e:	e091      	b.n	80036b4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	2208      	movs	r2, #8
 800359a:	409a      	lsls	r2, r3
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8088 	beq.w	80036b6 <HAL_DMA_IRQHandler+0xe0e>
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 8082 	beq.w	80036b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a41      	ldr	r2, [pc, #260]	; (80036bc <HAL_DMA_IRQHandler+0xe14>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d04a      	beq.n	8003652 <HAL_DMA_IRQHandler+0xdaa>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a3f      	ldr	r2, [pc, #252]	; (80036c0 <HAL_DMA_IRQHandler+0xe18>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d045      	beq.n	8003652 <HAL_DMA_IRQHandler+0xdaa>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a3e      	ldr	r2, [pc, #248]	; (80036c4 <HAL_DMA_IRQHandler+0xe1c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d040      	beq.n	8003652 <HAL_DMA_IRQHandler+0xdaa>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a3c      	ldr	r2, [pc, #240]	; (80036c8 <HAL_DMA_IRQHandler+0xe20>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d03b      	beq.n	8003652 <HAL_DMA_IRQHandler+0xdaa>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a3b      	ldr	r2, [pc, #236]	; (80036cc <HAL_DMA_IRQHandler+0xe24>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d036      	beq.n	8003652 <HAL_DMA_IRQHandler+0xdaa>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a39      	ldr	r2, [pc, #228]	; (80036d0 <HAL_DMA_IRQHandler+0xe28>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d031      	beq.n	8003652 <HAL_DMA_IRQHandler+0xdaa>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a38      	ldr	r2, [pc, #224]	; (80036d4 <HAL_DMA_IRQHandler+0xe2c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d02c      	beq.n	8003652 <HAL_DMA_IRQHandler+0xdaa>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a36      	ldr	r2, [pc, #216]	; (80036d8 <HAL_DMA_IRQHandler+0xe30>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d027      	beq.n	8003652 <HAL_DMA_IRQHandler+0xdaa>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a35      	ldr	r2, [pc, #212]	; (80036dc <HAL_DMA_IRQHandler+0xe34>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d022      	beq.n	8003652 <HAL_DMA_IRQHandler+0xdaa>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a33      	ldr	r2, [pc, #204]	; (80036e0 <HAL_DMA_IRQHandler+0xe38>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d01d      	beq.n	8003652 <HAL_DMA_IRQHandler+0xdaa>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a32      	ldr	r2, [pc, #200]	; (80036e4 <HAL_DMA_IRQHandler+0xe3c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d018      	beq.n	8003652 <HAL_DMA_IRQHandler+0xdaa>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a30      	ldr	r2, [pc, #192]	; (80036e8 <HAL_DMA_IRQHandler+0xe40>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d013      	beq.n	8003652 <HAL_DMA_IRQHandler+0xdaa>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a2f      	ldr	r2, [pc, #188]	; (80036ec <HAL_DMA_IRQHandler+0xe44>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00e      	beq.n	8003652 <HAL_DMA_IRQHandler+0xdaa>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a2d      	ldr	r2, [pc, #180]	; (80036f0 <HAL_DMA_IRQHandler+0xe48>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d009      	beq.n	8003652 <HAL_DMA_IRQHandler+0xdaa>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a2c      	ldr	r2, [pc, #176]	; (80036f4 <HAL_DMA_IRQHandler+0xe4c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d004      	beq.n	8003652 <HAL_DMA_IRQHandler+0xdaa>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a2a      	ldr	r2, [pc, #168]	; (80036f8 <HAL_DMA_IRQHandler+0xe50>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d108      	bne.n	8003664 <HAL_DMA_IRQHandler+0xdbc>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 021c 	bic.w	r2, r2, #28
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	e007      	b.n	8003674 <HAL_DMA_IRQHandler+0xdcc>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 020e 	bic.w	r2, r2, #14
 8003672:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	2201      	movs	r2, #1
 800367e:	409a      	lsls	r2, r3
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	4798      	blx	r3
 80036aa:	e004      	b.n	80036b6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80036ac:	bf00      	nop
 80036ae:	e002      	b.n	80036b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036b0:	bf00      	nop
 80036b2:	e000      	b.n	80036b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036b4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80036b6:	3728      	adds	r7, #40	; 0x28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40020010 	.word	0x40020010
 80036c0:	40020028 	.word	0x40020028
 80036c4:	40020040 	.word	0x40020040
 80036c8:	40020058 	.word	0x40020058
 80036cc:	40020070 	.word	0x40020070
 80036d0:	40020088 	.word	0x40020088
 80036d4:	400200a0 	.word	0x400200a0
 80036d8:	400200b8 	.word	0x400200b8
 80036dc:	40020410 	.word	0x40020410
 80036e0:	40020428 	.word	0x40020428
 80036e4:	40020440 	.word	0x40020440
 80036e8:	40020458 	.word	0x40020458
 80036ec:	40020470 	.word	0x40020470
 80036f0:	40020488 	.word	0x40020488
 80036f4:	400204a0 	.word	0x400204a0
 80036f8:	400204b8 	.word	0x400204b8

080036fc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003726:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a7f      	ldr	r2, [pc, #508]	; (8003930 <DMA_SetConfig+0x21c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d072      	beq.n	800381e <DMA_SetConfig+0x10a>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a7d      	ldr	r2, [pc, #500]	; (8003934 <DMA_SetConfig+0x220>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d06d      	beq.n	800381e <DMA_SetConfig+0x10a>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a7c      	ldr	r2, [pc, #496]	; (8003938 <DMA_SetConfig+0x224>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d068      	beq.n	800381e <DMA_SetConfig+0x10a>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a7a      	ldr	r2, [pc, #488]	; (800393c <DMA_SetConfig+0x228>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d063      	beq.n	800381e <DMA_SetConfig+0x10a>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a79      	ldr	r2, [pc, #484]	; (8003940 <DMA_SetConfig+0x22c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d05e      	beq.n	800381e <DMA_SetConfig+0x10a>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a77      	ldr	r2, [pc, #476]	; (8003944 <DMA_SetConfig+0x230>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d059      	beq.n	800381e <DMA_SetConfig+0x10a>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a76      	ldr	r2, [pc, #472]	; (8003948 <DMA_SetConfig+0x234>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d054      	beq.n	800381e <DMA_SetConfig+0x10a>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a74      	ldr	r2, [pc, #464]	; (800394c <DMA_SetConfig+0x238>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d04f      	beq.n	800381e <DMA_SetConfig+0x10a>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a73      	ldr	r2, [pc, #460]	; (8003950 <DMA_SetConfig+0x23c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d04a      	beq.n	800381e <DMA_SetConfig+0x10a>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a71      	ldr	r2, [pc, #452]	; (8003954 <DMA_SetConfig+0x240>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d045      	beq.n	800381e <DMA_SetConfig+0x10a>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a70      	ldr	r2, [pc, #448]	; (8003958 <DMA_SetConfig+0x244>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d040      	beq.n	800381e <DMA_SetConfig+0x10a>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a6e      	ldr	r2, [pc, #440]	; (800395c <DMA_SetConfig+0x248>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d03b      	beq.n	800381e <DMA_SetConfig+0x10a>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a6d      	ldr	r2, [pc, #436]	; (8003960 <DMA_SetConfig+0x24c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d036      	beq.n	800381e <DMA_SetConfig+0x10a>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a6b      	ldr	r2, [pc, #428]	; (8003964 <DMA_SetConfig+0x250>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d031      	beq.n	800381e <DMA_SetConfig+0x10a>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a6a      	ldr	r2, [pc, #424]	; (8003968 <DMA_SetConfig+0x254>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d02c      	beq.n	800381e <DMA_SetConfig+0x10a>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a68      	ldr	r2, [pc, #416]	; (800396c <DMA_SetConfig+0x258>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d027      	beq.n	800381e <DMA_SetConfig+0x10a>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a67      	ldr	r2, [pc, #412]	; (8003970 <DMA_SetConfig+0x25c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d022      	beq.n	800381e <DMA_SetConfig+0x10a>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a65      	ldr	r2, [pc, #404]	; (8003974 <DMA_SetConfig+0x260>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d01d      	beq.n	800381e <DMA_SetConfig+0x10a>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a64      	ldr	r2, [pc, #400]	; (8003978 <DMA_SetConfig+0x264>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d018      	beq.n	800381e <DMA_SetConfig+0x10a>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a62      	ldr	r2, [pc, #392]	; (800397c <DMA_SetConfig+0x268>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <DMA_SetConfig+0x10a>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a61      	ldr	r2, [pc, #388]	; (8003980 <DMA_SetConfig+0x26c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00e      	beq.n	800381e <DMA_SetConfig+0x10a>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a5f      	ldr	r2, [pc, #380]	; (8003984 <DMA_SetConfig+0x270>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d009      	beq.n	800381e <DMA_SetConfig+0x10a>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a5e      	ldr	r2, [pc, #376]	; (8003988 <DMA_SetConfig+0x274>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d004      	beq.n	800381e <DMA_SetConfig+0x10a>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a5c      	ldr	r2, [pc, #368]	; (800398c <DMA_SetConfig+0x278>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <DMA_SetConfig+0x10e>
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <DMA_SetConfig+0x110>
 8003822:	2300      	movs	r3, #0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00d      	beq.n	8003844 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003830:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d004      	beq.n	8003844 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003842:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a39      	ldr	r2, [pc, #228]	; (8003930 <DMA_SetConfig+0x21c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d04a      	beq.n	80038e4 <DMA_SetConfig+0x1d0>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a38      	ldr	r2, [pc, #224]	; (8003934 <DMA_SetConfig+0x220>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d045      	beq.n	80038e4 <DMA_SetConfig+0x1d0>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a36      	ldr	r2, [pc, #216]	; (8003938 <DMA_SetConfig+0x224>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d040      	beq.n	80038e4 <DMA_SetConfig+0x1d0>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a35      	ldr	r2, [pc, #212]	; (800393c <DMA_SetConfig+0x228>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d03b      	beq.n	80038e4 <DMA_SetConfig+0x1d0>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a33      	ldr	r2, [pc, #204]	; (8003940 <DMA_SetConfig+0x22c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d036      	beq.n	80038e4 <DMA_SetConfig+0x1d0>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a32      	ldr	r2, [pc, #200]	; (8003944 <DMA_SetConfig+0x230>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d031      	beq.n	80038e4 <DMA_SetConfig+0x1d0>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a30      	ldr	r2, [pc, #192]	; (8003948 <DMA_SetConfig+0x234>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d02c      	beq.n	80038e4 <DMA_SetConfig+0x1d0>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a2f      	ldr	r2, [pc, #188]	; (800394c <DMA_SetConfig+0x238>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d027      	beq.n	80038e4 <DMA_SetConfig+0x1d0>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a2d      	ldr	r2, [pc, #180]	; (8003950 <DMA_SetConfig+0x23c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d022      	beq.n	80038e4 <DMA_SetConfig+0x1d0>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2c      	ldr	r2, [pc, #176]	; (8003954 <DMA_SetConfig+0x240>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d01d      	beq.n	80038e4 <DMA_SetConfig+0x1d0>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a2a      	ldr	r2, [pc, #168]	; (8003958 <DMA_SetConfig+0x244>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d018      	beq.n	80038e4 <DMA_SetConfig+0x1d0>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a29      	ldr	r2, [pc, #164]	; (800395c <DMA_SetConfig+0x248>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d013      	beq.n	80038e4 <DMA_SetConfig+0x1d0>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a27      	ldr	r2, [pc, #156]	; (8003960 <DMA_SetConfig+0x24c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00e      	beq.n	80038e4 <DMA_SetConfig+0x1d0>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a26      	ldr	r2, [pc, #152]	; (8003964 <DMA_SetConfig+0x250>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d009      	beq.n	80038e4 <DMA_SetConfig+0x1d0>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a24      	ldr	r2, [pc, #144]	; (8003968 <DMA_SetConfig+0x254>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d004      	beq.n	80038e4 <DMA_SetConfig+0x1d0>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a23      	ldr	r2, [pc, #140]	; (800396c <DMA_SetConfig+0x258>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d101      	bne.n	80038e8 <DMA_SetConfig+0x1d4>
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <DMA_SetConfig+0x1d6>
 80038e8:	2300      	movs	r3, #0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d059      	beq.n	80039a2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	223f      	movs	r2, #63	; 0x3f
 80038f8:	409a      	lsls	r2, r3
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800390c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b40      	cmp	r3, #64	; 0x40
 800391c:	d138      	bne.n	8003990 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800392e:	e086      	b.n	8003a3e <DMA_SetConfig+0x32a>
 8003930:	40020010 	.word	0x40020010
 8003934:	40020028 	.word	0x40020028
 8003938:	40020040 	.word	0x40020040
 800393c:	40020058 	.word	0x40020058
 8003940:	40020070 	.word	0x40020070
 8003944:	40020088 	.word	0x40020088
 8003948:	400200a0 	.word	0x400200a0
 800394c:	400200b8 	.word	0x400200b8
 8003950:	40020410 	.word	0x40020410
 8003954:	40020428 	.word	0x40020428
 8003958:	40020440 	.word	0x40020440
 800395c:	40020458 	.word	0x40020458
 8003960:	40020470 	.word	0x40020470
 8003964:	40020488 	.word	0x40020488
 8003968:	400204a0 	.word	0x400204a0
 800396c:	400204b8 	.word	0x400204b8
 8003970:	58025408 	.word	0x58025408
 8003974:	5802541c 	.word	0x5802541c
 8003978:	58025430 	.word	0x58025430
 800397c:	58025444 	.word	0x58025444
 8003980:	58025458 	.word	0x58025458
 8003984:	5802546c 	.word	0x5802546c
 8003988:	58025480 	.word	0x58025480
 800398c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	60da      	str	r2, [r3, #12]
}
 80039a0:	e04d      	b.n	8003a3e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a29      	ldr	r2, [pc, #164]	; (8003a4c <DMA_SetConfig+0x338>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d022      	beq.n	80039f2 <DMA_SetConfig+0x2de>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a27      	ldr	r2, [pc, #156]	; (8003a50 <DMA_SetConfig+0x33c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d01d      	beq.n	80039f2 <DMA_SetConfig+0x2de>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a26      	ldr	r2, [pc, #152]	; (8003a54 <DMA_SetConfig+0x340>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d018      	beq.n	80039f2 <DMA_SetConfig+0x2de>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a24      	ldr	r2, [pc, #144]	; (8003a58 <DMA_SetConfig+0x344>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d013      	beq.n	80039f2 <DMA_SetConfig+0x2de>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a23      	ldr	r2, [pc, #140]	; (8003a5c <DMA_SetConfig+0x348>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00e      	beq.n	80039f2 <DMA_SetConfig+0x2de>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a21      	ldr	r2, [pc, #132]	; (8003a60 <DMA_SetConfig+0x34c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d009      	beq.n	80039f2 <DMA_SetConfig+0x2de>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a20      	ldr	r2, [pc, #128]	; (8003a64 <DMA_SetConfig+0x350>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d004      	beq.n	80039f2 <DMA_SetConfig+0x2de>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a1e      	ldr	r2, [pc, #120]	; (8003a68 <DMA_SetConfig+0x354>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d101      	bne.n	80039f6 <DMA_SetConfig+0x2e2>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <DMA_SetConfig+0x2e4>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d020      	beq.n	8003a3e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	2201      	movs	r2, #1
 8003a06:	409a      	lsls	r2, r3
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	2b40      	cmp	r3, #64	; 0x40
 8003a1a:	d108      	bne.n	8003a2e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	60da      	str	r2, [r3, #12]
}
 8003a2c:	e007      	b.n	8003a3e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	60da      	str	r2, [r3, #12]
}
 8003a3e:	bf00      	nop
 8003a40:	371c      	adds	r7, #28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	58025408 	.word	0x58025408
 8003a50:	5802541c 	.word	0x5802541c
 8003a54:	58025430 	.word	0x58025430
 8003a58:	58025444 	.word	0x58025444
 8003a5c:	58025458 	.word	0x58025458
 8003a60:	5802546c 	.word	0x5802546c
 8003a64:	58025480 	.word	0x58025480
 8003a68:	58025494 	.word	0x58025494

08003a6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a42      	ldr	r2, [pc, #264]	; (8003b84 <DMA_CalcBaseAndBitshift+0x118>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d04a      	beq.n	8003b14 <DMA_CalcBaseAndBitshift+0xa8>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a41      	ldr	r2, [pc, #260]	; (8003b88 <DMA_CalcBaseAndBitshift+0x11c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d045      	beq.n	8003b14 <DMA_CalcBaseAndBitshift+0xa8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a3f      	ldr	r2, [pc, #252]	; (8003b8c <DMA_CalcBaseAndBitshift+0x120>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d040      	beq.n	8003b14 <DMA_CalcBaseAndBitshift+0xa8>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a3e      	ldr	r2, [pc, #248]	; (8003b90 <DMA_CalcBaseAndBitshift+0x124>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d03b      	beq.n	8003b14 <DMA_CalcBaseAndBitshift+0xa8>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a3c      	ldr	r2, [pc, #240]	; (8003b94 <DMA_CalcBaseAndBitshift+0x128>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d036      	beq.n	8003b14 <DMA_CalcBaseAndBitshift+0xa8>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a3b      	ldr	r2, [pc, #236]	; (8003b98 <DMA_CalcBaseAndBitshift+0x12c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d031      	beq.n	8003b14 <DMA_CalcBaseAndBitshift+0xa8>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a39      	ldr	r2, [pc, #228]	; (8003b9c <DMA_CalcBaseAndBitshift+0x130>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d02c      	beq.n	8003b14 <DMA_CalcBaseAndBitshift+0xa8>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a38      	ldr	r2, [pc, #224]	; (8003ba0 <DMA_CalcBaseAndBitshift+0x134>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d027      	beq.n	8003b14 <DMA_CalcBaseAndBitshift+0xa8>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a36      	ldr	r2, [pc, #216]	; (8003ba4 <DMA_CalcBaseAndBitshift+0x138>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d022      	beq.n	8003b14 <DMA_CalcBaseAndBitshift+0xa8>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a35      	ldr	r2, [pc, #212]	; (8003ba8 <DMA_CalcBaseAndBitshift+0x13c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d01d      	beq.n	8003b14 <DMA_CalcBaseAndBitshift+0xa8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a33      	ldr	r2, [pc, #204]	; (8003bac <DMA_CalcBaseAndBitshift+0x140>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d018      	beq.n	8003b14 <DMA_CalcBaseAndBitshift+0xa8>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a32      	ldr	r2, [pc, #200]	; (8003bb0 <DMA_CalcBaseAndBitshift+0x144>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d013      	beq.n	8003b14 <DMA_CalcBaseAndBitshift+0xa8>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a30      	ldr	r2, [pc, #192]	; (8003bb4 <DMA_CalcBaseAndBitshift+0x148>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00e      	beq.n	8003b14 <DMA_CalcBaseAndBitshift+0xa8>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a2f      	ldr	r2, [pc, #188]	; (8003bb8 <DMA_CalcBaseAndBitshift+0x14c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d009      	beq.n	8003b14 <DMA_CalcBaseAndBitshift+0xa8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a2d      	ldr	r2, [pc, #180]	; (8003bbc <DMA_CalcBaseAndBitshift+0x150>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <DMA_CalcBaseAndBitshift+0xa8>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a2c      	ldr	r2, [pc, #176]	; (8003bc0 <DMA_CalcBaseAndBitshift+0x154>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d101      	bne.n	8003b18 <DMA_CalcBaseAndBitshift+0xac>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <DMA_CalcBaseAndBitshift+0xae>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d024      	beq.n	8003b68 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	3b10      	subs	r3, #16
 8003b26:	4a27      	ldr	r2, [pc, #156]	; (8003bc4 <DMA_CalcBaseAndBitshift+0x158>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	4a24      	ldr	r2, [pc, #144]	; (8003bc8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003b38:	5cd3      	ldrb	r3, [r2, r3]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d908      	bls.n	8003b58 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4b1f      	ldr	r3, [pc, #124]	; (8003bcc <DMA_CalcBaseAndBitshift+0x160>)
 8003b4e:	4013      	ands	r3, r2
 8003b50:	1d1a      	adds	r2, r3, #4
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	659a      	str	r2, [r3, #88]	; 0x58
 8003b56:	e00d      	b.n	8003b74 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <DMA_CalcBaseAndBitshift+0x160>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6593      	str	r3, [r2, #88]	; 0x58
 8003b66:	e005      	b.n	8003b74 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	40020010 	.word	0x40020010
 8003b88:	40020028 	.word	0x40020028
 8003b8c:	40020040 	.word	0x40020040
 8003b90:	40020058 	.word	0x40020058
 8003b94:	40020070 	.word	0x40020070
 8003b98:	40020088 	.word	0x40020088
 8003b9c:	400200a0 	.word	0x400200a0
 8003ba0:	400200b8 	.word	0x400200b8
 8003ba4:	40020410 	.word	0x40020410
 8003ba8:	40020428 	.word	0x40020428
 8003bac:	40020440 	.word	0x40020440
 8003bb0:	40020458 	.word	0x40020458
 8003bb4:	40020470 	.word	0x40020470
 8003bb8:	40020488 	.word	0x40020488
 8003bbc:	400204a0 	.word	0x400204a0
 8003bc0:	400204b8 	.word	0x400204b8
 8003bc4:	aaaaaaab 	.word	0xaaaaaaab
 8003bc8:	080098b4 	.word	0x080098b4
 8003bcc:	fffffc00 	.word	0xfffffc00

08003bd0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d120      	bne.n	8003c26 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d858      	bhi.n	8003c9e <DMA_CheckFifoParam+0xce>
 8003bec:	a201      	add	r2, pc, #4	; (adr r2, 8003bf4 <DMA_CheckFifoParam+0x24>)
 8003bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf2:	bf00      	nop
 8003bf4:	08003c05 	.word	0x08003c05
 8003bf8:	08003c17 	.word	0x08003c17
 8003bfc:	08003c05 	.word	0x08003c05
 8003c00:	08003c9f 	.word	0x08003c9f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d048      	beq.n	8003ca2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c14:	e045      	b.n	8003ca2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c1e:	d142      	bne.n	8003ca6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c24:	e03f      	b.n	8003ca6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c2e:	d123      	bne.n	8003c78 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d838      	bhi.n	8003caa <DMA_CheckFifoParam+0xda>
 8003c38:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <DMA_CheckFifoParam+0x70>)
 8003c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3e:	bf00      	nop
 8003c40:	08003c51 	.word	0x08003c51
 8003c44:	08003c57 	.word	0x08003c57
 8003c48:	08003c51 	.word	0x08003c51
 8003c4c:	08003c69 	.word	0x08003c69
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	73fb      	strb	r3, [r7, #15]
        break;
 8003c54:	e030      	b.n	8003cb8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d025      	beq.n	8003cae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c66:	e022      	b.n	8003cae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c70:	d11f      	bne.n	8003cb2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c76:	e01c      	b.n	8003cb2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d902      	bls.n	8003c86 <DMA_CheckFifoParam+0xb6>
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d003      	beq.n	8003c8c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003c84:	e018      	b.n	8003cb8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	73fb      	strb	r3, [r7, #15]
        break;
 8003c8a:	e015      	b.n	8003cb8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00e      	beq.n	8003cb6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8003c9c:	e00b      	b.n	8003cb6 <DMA_CheckFifoParam+0xe6>
        break;
 8003c9e:	bf00      	nop
 8003ca0:	e00a      	b.n	8003cb8 <DMA_CheckFifoParam+0xe8>
        break;
 8003ca2:	bf00      	nop
 8003ca4:	e008      	b.n	8003cb8 <DMA_CheckFifoParam+0xe8>
        break;
 8003ca6:	bf00      	nop
 8003ca8:	e006      	b.n	8003cb8 <DMA_CheckFifoParam+0xe8>
        break;
 8003caa:	bf00      	nop
 8003cac:	e004      	b.n	8003cb8 <DMA_CheckFifoParam+0xe8>
        break;
 8003cae:	bf00      	nop
 8003cb0:	e002      	b.n	8003cb8 <DMA_CheckFifoParam+0xe8>
        break;
 8003cb2:	bf00      	nop
 8003cb4:	e000      	b.n	8003cb8 <DMA_CheckFifoParam+0xe8>
    break;
 8003cb6:	bf00      	nop
    }
  }

  return status;
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop

08003cc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a38      	ldr	r2, [pc, #224]	; (8003dbc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d022      	beq.n	8003d26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a36      	ldr	r2, [pc, #216]	; (8003dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d01d      	beq.n	8003d26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a35      	ldr	r2, [pc, #212]	; (8003dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d018      	beq.n	8003d26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a33      	ldr	r2, [pc, #204]	; (8003dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a32      	ldr	r2, [pc, #200]	; (8003dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00e      	beq.n	8003d26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a30      	ldr	r2, [pc, #192]	; (8003dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d009      	beq.n	8003d26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a2f      	ldr	r2, [pc, #188]	; (8003dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a2d      	ldr	r2, [pc, #180]	; (8003dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d101      	bne.n	8003d2a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d01a      	beq.n	8003d66 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	3b08      	subs	r3, #8
 8003d38:	4a28      	ldr	r2, [pc, #160]	; (8003ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3e:	091b      	lsrs	r3, r3, #4
 8003d40:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4b26      	ldr	r3, [pc, #152]	; (8003de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a24      	ldr	r2, [pc, #144]	; (8003de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003d54:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f003 031f 	and.w	r3, r3, #31
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003d64:	e024      	b.n	8003db0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	3b10      	subs	r3, #16
 8003d6e:	4a1e      	ldr	r2, [pc, #120]	; (8003de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4a1c      	ldr	r2, [pc, #112]	; (8003dec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d806      	bhi.n	8003d8e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4a1b      	ldr	r2, [pc, #108]	; (8003df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d902      	bls.n	8003d8e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	461a      	mov	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a16      	ldr	r2, [pc, #88]	; (8003df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003da0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	2201      	movs	r2, #1
 8003daa:	409a      	lsls	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	58025408 	.word	0x58025408
 8003dc0:	5802541c 	.word	0x5802541c
 8003dc4:	58025430 	.word	0x58025430
 8003dc8:	58025444 	.word	0x58025444
 8003dcc:	58025458 	.word	0x58025458
 8003dd0:	5802546c 	.word	0x5802546c
 8003dd4:	58025480 	.word	0x58025480
 8003dd8:	58025494 	.word	0x58025494
 8003ddc:	cccccccd 	.word	0xcccccccd
 8003de0:	16009600 	.word	0x16009600
 8003de4:	58025880 	.word	0x58025880
 8003de8:	aaaaaaab 	.word	0xaaaaaaab
 8003dec:	400204b8 	.word	0x400204b8
 8003df0:	4002040f 	.word	0x4002040f
 8003df4:	10008200 	.word	0x10008200
 8003df8:	40020880 	.word	0x40020880

08003dfc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d04a      	beq.n	8003ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d847      	bhi.n	8003ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a25      	ldr	r2, [pc, #148]	; (8003eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d022      	beq.n	8003e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a24      	ldr	r2, [pc, #144]	; (8003eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d01d      	beq.n	8003e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a22      	ldr	r2, [pc, #136]	; (8003ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d018      	beq.n	8003e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a21      	ldr	r2, [pc, #132]	; (8003ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d013      	beq.n	8003e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a1f      	ldr	r2, [pc, #124]	; (8003ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00e      	beq.n	8003e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a1e      	ldr	r2, [pc, #120]	; (8003ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d009      	beq.n	8003e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a1c      	ldr	r2, [pc, #112]	; (8003ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d004      	beq.n	8003e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a1b      	ldr	r2, [pc, #108]	; (8003ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d101      	bne.n	8003e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4b17      	ldr	r3, [pc, #92]	; (8003ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a15      	ldr	r2, [pc, #84]	; (8003ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003e84:	671a      	str	r2, [r3, #112]	; 0x70
 8003e86:	e009      	b.n	8003e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4b14      	ldr	r3, [pc, #80]	; (8003edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	461a      	mov	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a11      	ldr	r2, [pc, #68]	; (8003ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003e9a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	58025408 	.word	0x58025408
 8003eb8:	5802541c 	.word	0x5802541c
 8003ebc:	58025430 	.word	0x58025430
 8003ec0:	58025444 	.word	0x58025444
 8003ec4:	58025458 	.word	0x58025458
 8003ec8:	5802546c 	.word	0x5802546c
 8003ecc:	58025480 	.word	0x58025480
 8003ed0:	58025494 	.word	0x58025494
 8003ed4:	1600963f 	.word	0x1600963f
 8003ed8:	58025940 	.word	0x58025940
 8003edc:	1000823f 	.word	0x1000823f
 8003ee0:	40020940 	.word	0x40020940

08003ee4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e0c8      	b.n	8004088 <HAL_ETH_Init+0x1a4>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fc fff6 	bl	8000ef0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2223      	movs	r2, #35	; 0x23
 8003f08:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f0a:	4b61      	ldr	r3, [pc, #388]	; (8004090 <HAL_ETH_Init+0x1ac>)
 8003f0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f10:	4a5f      	ldr	r2, [pc, #380]	; (8004090 <HAL_ETH_Init+0x1ac>)
 8003f12:	f043 0302 	orr.w	r3, r3, #2
 8003f16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f1a:	4b5d      	ldr	r3, [pc, #372]	; (8004090 <HAL_ETH_Init+0x1ac>)
 8003f1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	7a1b      	ldrb	r3, [r3, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d103      	bne.n	8003f38 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003f30:	2000      	movs	r0, #0
 8003f32:	f7fd fb89 	bl	8001648 <HAL_SYSCFG_ETHInterfaceSelect>
 8003f36:	e003      	b.n	8003f40 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003f38:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003f3c:	f7fd fb84 	bl	8001648 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6812      	ldr	r2, [r2, #0]
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f58:	f7fd fb3a 	bl	80015d0 <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003f5e:	e00f      	b.n	8003f80 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003f60:	f7fd fb36 	bl	80015d0 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f6e:	d907      	bls.n	8003f80 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2204      	movs	r2, #4
 8003f74:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	22e0      	movs	r2, #224	; 0xe0
 8003f7a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e083      	b.n	8004088 <HAL_ETH_Init+0x1a4>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e6      	bne.n	8003f60 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fac2 	bl	800451c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003f98:	f001 fe8e 	bl	8005cb8 <HAL_RCC_GetHCLKFreq>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	4a3d      	ldr	r2, [pc, #244]	; (8004094 <HAL_ETH_Init+0x1b0>)
 8003fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa4:	0c9a      	lsrs	r2, r3, #18
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3a01      	subs	r2, #1
 8003fac:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 fa15 	bl	80043e0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fbe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003fc2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fd2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <HAL_ETH_Init+0x10e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	22e0      	movs	r2, #224	; 0xe0
 8003fec:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e04a      	b.n	8004088 <HAL_ETH_Init+0x1a4>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ffa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003ffe:	4b26      	ldr	r3, [pc, #152]	; (8004098 <HAL_ETH_Init+0x1b4>)
 8004000:	4013      	ands	r3, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6952      	ldr	r2, [r2, #20]
 8004006:	0051      	lsls	r1, r2, #1
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6812      	ldr	r2, [r2, #0]
 800400c:	430b      	orrs	r3, r1
 800400e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004012:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fad8 	bl	80045cc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fb1e 	bl	800465e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	3305      	adds	r3, #5
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	021a      	lsls	r2, r3, #8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	3304      	adds	r3, #4
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	4619      	mov	r1, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	3303      	adds	r3, #3
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	061a      	lsls	r2, r3, #24
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	3302      	adds	r3, #2
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	041b      	lsls	r3, r3, #16
 8004054:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	3301      	adds	r3, #1
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004060:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800406e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004070:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2210      	movs	r2, #16
 800407e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2210      	movs	r2, #16
 8004084:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	58024400 	.word	0x58024400
 8004094:	431bde83 	.word	0x431bde83
 8004098:	ffff8001 	.word	0xffff8001

0800409c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80040ae:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	791b      	ldrb	r3, [r3, #4]
 80040b4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80040b6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	7b1b      	ldrb	r3, [r3, #12]
 80040bc:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80040be:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	7b5b      	ldrb	r3, [r3, #13]
 80040c4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80040c6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	7b9b      	ldrb	r3, [r3, #14]
 80040cc:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80040ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	7bdb      	ldrb	r3, [r3, #15]
 80040d4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80040d6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	7c12      	ldrb	r2, [r2, #16]
 80040dc:	2a00      	cmp	r2, #0
 80040de:	d102      	bne.n	80040e6 <ETH_SetMACConfig+0x4a>
 80040e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80040e4:	e000      	b.n	80040e8 <ETH_SetMACConfig+0x4c>
 80040e6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80040e8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	7c52      	ldrb	r2, [r2, #17]
 80040ee:	2a00      	cmp	r2, #0
 80040f0:	d102      	bne.n	80040f8 <ETH_SetMACConfig+0x5c>
 80040f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040f6:	e000      	b.n	80040fa <ETH_SetMACConfig+0x5e>
 80040f8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80040fa:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	7c9b      	ldrb	r3, [r3, #18]
 8004100:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004102:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004108:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800410e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	7f1b      	ldrb	r3, [r3, #28]
 8004114:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004116:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	7f5b      	ldrb	r3, [r3, #29]
 800411c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800411e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	7f92      	ldrb	r2, [r2, #30]
 8004124:	2a00      	cmp	r2, #0
 8004126:	d102      	bne.n	800412e <ETH_SetMACConfig+0x92>
 8004128:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800412c:	e000      	b.n	8004130 <ETH_SetMACConfig+0x94>
 800412e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004130:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	7fdb      	ldrb	r3, [r3, #31]
 8004136:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004138:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004140:	2a00      	cmp	r2, #0
 8004142:	d102      	bne.n	800414a <ETH_SetMACConfig+0xae>
 8004144:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004148:	e000      	b.n	800414c <ETH_SetMACConfig+0xb0>
 800414a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800414c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004152:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800415a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800415c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4b56      	ldr	r3, [pc, #344]	; (80042c8 <ETH_SetMACConfig+0x22c>)
 800416e:	4013      	ands	r3, r2
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	68f9      	ldr	r1, [r7, #12]
 8004176:	430b      	orrs	r3, r1
 8004178:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004186:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004188:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004190:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004192:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800419a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800419c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80041a4:	2a00      	cmp	r2, #0
 80041a6:	d102      	bne.n	80041ae <ETH_SetMACConfig+0x112>
 80041a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041ac:	e000      	b.n	80041b0 <ETH_SetMACConfig+0x114>
 80041ae:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80041b0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	4b42      	ldr	r3, [pc, #264]	; (80042cc <ETH_SetMACConfig+0x230>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	68f9      	ldr	r1, [r7, #12]
 80041ca:	430b      	orrs	r3, r1
 80041cc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041d4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	4b3a      	ldr	r3, [pc, #232]	; (80042d0 <ETH_SetMACConfig+0x234>)
 80041e6:	4013      	ands	r3, r2
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	68f9      	ldr	r1, [r7, #12]
 80041ee:	430b      	orrs	r3, r1
 80041f0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80041f8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80041fe:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004206:	2a00      	cmp	r2, #0
 8004208:	d101      	bne.n	800420e <ETH_SetMACConfig+0x172>
 800420a:	2280      	movs	r2, #128	; 0x80
 800420c:	e000      	b.n	8004210 <ETH_SetMACConfig+0x174>
 800420e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004210:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004216:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004222:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004226:	4013      	ands	r3, r2
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6812      	ldr	r2, [r2, #0]
 800422c:	68f9      	ldr	r1, [r7, #12]
 800422e:	430b      	orrs	r3, r1
 8004230:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004238:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004240:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424e:	f023 0103 	bic.w	r1, r3, #3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	430a      	orrs	r2, r1
 800425a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004266:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004282:	2a00      	cmp	r2, #0
 8004284:	d101      	bne.n	800428a <ETH_SetMACConfig+0x1ee>
 8004286:	2240      	movs	r2, #64	; 0x40
 8004288:	e000      	b.n	800428c <ETH_SetMACConfig+0x1f0>
 800428a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800428c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004294:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004296:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800429e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80042ac:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	00048083 	.word	0x00048083
 80042cc:	c0f88000 	.word	0xc0f88000
 80042d0:	fffffef0 	.word	0xfffffef0

080042d4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b38      	ldr	r3, [pc, #224]	; (80043cc <ETH_SetDMAConfig+0xf8>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	6811      	ldr	r1, [r2, #0]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	430b      	orrs	r3, r1
 80042f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042fa:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	791b      	ldrb	r3, [r3, #4]
 8004300:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004306:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	7b1b      	ldrb	r3, [r3, #12]
 800430c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	4b2c      	ldr	r3, [pc, #176]	; (80043d0 <ETH_SetDMAConfig+0xfc>)
 800431e:	4013      	ands	r3, r2
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	68f9      	ldr	r1, [r7, #12]
 8004326:	430b      	orrs	r3, r1
 8004328:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800432c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	7b5b      	ldrb	r3, [r3, #13]
 8004332:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004344:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004348:	4b22      	ldr	r3, [pc, #136]	; (80043d4 <ETH_SetDMAConfig+0x100>)
 800434a:	4013      	ands	r3, r2
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	68f9      	ldr	r1, [r7, #12]
 8004352:	430b      	orrs	r3, r1
 8004354:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004358:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	7d1b      	ldrb	r3, [r3, #20]
 8004364:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004366:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	7f5b      	ldrb	r3, [r3, #29]
 800436c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800437a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800437e:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <ETH_SetDMAConfig+0x104>)
 8004380:	4013      	ands	r3, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6812      	ldr	r2, [r2, #0]
 8004386:	68f9      	ldr	r1, [r7, #12]
 8004388:	430b      	orrs	r3, r1
 800438a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800438e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	7f1b      	ldrb	r3, [r3, #28]
 8004396:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800439c:	4313      	orrs	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <ETH_SetDMAConfig+0x108>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6812      	ldr	r2, [r2, #0]
 80043b4:	68f9      	ldr	r1, [r7, #12]
 80043b6:	430b      	orrs	r3, r1
 80043b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043bc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	ffff87fd 	.word	0xffff87fd
 80043d0:	ffff2ffe 	.word	0xffff2ffe
 80043d4:	fffec000 	.word	0xfffec000
 80043d8:	ffc0efef 	.word	0xffc0efef
 80043dc:	7fc0ffff 	.word	0x7fc0ffff

080043e0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b0a4      	sub	sp, #144	; 0x90
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80043e8:	2301      	movs	r3, #1
 80043ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80043ee:	2300      	movs	r3, #0
 80043f0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80043f8:	2300      	movs	r3, #0
 80043fa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80043fe:	2301      	movs	r3, #1
 8004400:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004404:	2301      	movs	r3, #1
 8004406:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800440a:	2301      	movs	r3, #1
 800440c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004410:	2300      	movs	r3, #0
 8004412:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004416:	2301      	movs	r3, #1
 8004418:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800441c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004420:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004422:	2300      	movs	r3, #0
 8004424:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004428:	2300      	movs	r3, #0
 800442a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800442c:	2300      	movs	r3, #0
 800442e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004432:	2300      	movs	r3, #0
 8004434:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004438:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800443c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800443e:	2300      	movs	r3, #0
 8004440:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004444:	2300      	movs	r3, #0
 8004446:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800444e:	2300      	movs	r3, #0
 8004450:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004454:	2300      	movs	r3, #0
 8004456:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800445a:	2300      	movs	r3, #0
 800445c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800445e:	2300      	movs	r3, #0
 8004460:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004462:	2300      	movs	r3, #0
 8004464:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004466:	2300      	movs	r3, #0
 8004468:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800446c:	2300      	movs	r3, #0
 800446e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004472:	2301      	movs	r3, #1
 8004474:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004478:	2320      	movs	r3, #32
 800447a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004484:	2300      	movs	r3, #0
 8004486:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800448a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800448e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004490:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004494:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004496:	2300      	movs	r3, #0
 8004498:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800449c:	2302      	movs	r3, #2
 800449e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80044a8:	2300      	movs	r3, #0
 80044aa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80044b4:	2301      	movs	r3, #1
 80044b6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80044ba:	2300      	movs	r3, #0
 80044bc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80044be:	2301      	movs	r3, #1
 80044c0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80044c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044c8:	4619      	mov	r1, r3
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff fde6 	bl	800409c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80044d0:	2301      	movs	r3, #1
 80044d2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80044d4:	2301      	movs	r3, #1
 80044d6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80044d8:	2300      	movs	r3, #0
 80044da:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80044dc:	2300      	movs	r3, #0
 80044de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80044e2:	2300      	movs	r3, #0
 80044e4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80044e6:	2300      	movs	r3, #0
 80044e8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80044ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80044ee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80044f0:	2300      	movs	r3, #0
 80044f2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80044f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80044f8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80044fa:	2300      	movs	r3, #0
 80044fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8004500:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004504:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004506:	f107 0308 	add.w	r3, r7, #8
 800450a:	4619      	mov	r1, r3
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff fee1 	bl	80042d4 <ETH_SetDMAConfig>
}
 8004512:	bf00      	nop
 8004514:	3790      	adds	r7, #144	; 0x90
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800452c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004534:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004536:	f001 fbbf 	bl	8005cb8 <HAL_RCC_GetHCLKFreq>
 800453a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4a1e      	ldr	r2, [pc, #120]	; (80045b8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d908      	bls.n	8004556 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	4a1d      	ldr	r2, [pc, #116]	; (80045bc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d804      	bhi.n	8004556 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	e027      	b.n	80045a6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	4a18      	ldr	r2, [pc, #96]	; (80045bc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d908      	bls.n	8004570 <ETH_MAC_MDIO_ClkConfig+0x54>
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	4a17      	ldr	r2, [pc, #92]	; (80045c0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d204      	bcs.n	8004570 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	e01a      	b.n	80045a6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4a13      	ldr	r2, [pc, #76]	; (80045c0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d303      	bcc.n	8004580 <ETH_MAC_MDIO_ClkConfig+0x64>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4a12      	ldr	r2, [pc, #72]	; (80045c4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d911      	bls.n	80045a4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	4a10      	ldr	r2, [pc, #64]	; (80045c4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d908      	bls.n	800459a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4a0f      	ldr	r2, [pc, #60]	; (80045c8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d804      	bhi.n	800459a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	e005      	b.n	80045a6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	e000      	b.n	80045a6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80045a4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80045b0:	bf00      	nop
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	01312cff 	.word	0x01312cff
 80045bc:	02160ebf 	.word	0x02160ebf
 80045c0:	03938700 	.word	0x03938700
 80045c4:	05f5e0ff 	.word	0x05f5e0ff
 80045c8:	08f0d17f 	.word	0x08f0d17f

080045cc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80045d4:	2300      	movs	r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	e01d      	b.n	8004616 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68d9      	ldr	r1, [r3, #12]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4613      	mov	r3, r2
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	4413      	add	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	440b      	add	r3, r1
 80045ea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2200      	movs	r2, #0
 80045f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2200      	movs	r2, #0
 80045fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2200      	movs	r2, #0
 8004602:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004604:	68b9      	ldr	r1, [r7, #8]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	3206      	adds	r2, #6
 800460c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3301      	adds	r3, #1
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b03      	cmp	r3, #3
 800461a:	d9de      	bls.n	80045da <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800462a:	461a      	mov	r2, r3
 800462c:	2303      	movs	r3, #3
 800462e:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800463e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800464e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004652:	bf00      	nop
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	e024      	b.n	80046b6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6919      	ldr	r1, [r3, #16]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4613      	mov	r3, r2
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	4413      	add	r3, r2
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	440b      	add	r3, r1
 800467c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2200      	movs	r2, #0
 8004688:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2200      	movs	r2, #0
 800468e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2200      	movs	r2, #0
 8004694:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2200      	movs	r2, #0
 800469a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2200      	movs	r2, #0
 80046a0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3310      	adds	r3, #16
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3301      	adds	r3, #1
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	d9d7      	bls.n	800466c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e2:	461a      	mov	r2, r3
 80046e4:	2303      	movs	r3, #3
 80046e6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800470a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800470e:	bf00      	nop
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800471c:	b480      	push	{r7}
 800471e:	b089      	sub	sp, #36	; 0x24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004726:	2300      	movs	r3, #0
 8004728:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800472a:	4b89      	ldr	r3, [pc, #548]	; (8004950 <HAL_GPIO_Init+0x234>)
 800472c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800472e:	e194      	b.n	8004a5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	2101      	movs	r1, #1
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	fa01 f303 	lsl.w	r3, r1, r3
 800473c:	4013      	ands	r3, r2
 800473e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8186 	beq.w	8004a54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d00b      	beq.n	8004768 <HAL_GPIO_Init+0x4c>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b02      	cmp	r3, #2
 8004756:	d007      	beq.n	8004768 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800475c:	2b11      	cmp	r3, #17
 800475e:	d003      	beq.n	8004768 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b12      	cmp	r3, #18
 8004766:	d130      	bne.n	80047ca <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	2203      	movs	r2, #3
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4013      	ands	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	68da      	ldr	r2, [r3, #12]
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4313      	orrs	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800479e:	2201      	movs	r2, #1
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	43db      	mvns	r3, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4013      	ands	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	091b      	lsrs	r3, r3, #4
 80047b4:	f003 0201 	and.w	r2, r3, #1
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	2203      	movs	r2, #3
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	43db      	mvns	r3, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4013      	ands	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d003      	beq.n	800480a <HAL_GPIO_Init+0xee>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b12      	cmp	r3, #18
 8004808:	d123      	bne.n	8004852 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	08da      	lsrs	r2, r3, #3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3208      	adds	r2, #8
 8004812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	220f      	movs	r2, #15
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	43db      	mvns	r3, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4013      	ands	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4313      	orrs	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	08da      	lsrs	r2, r3, #3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3208      	adds	r2, #8
 800484c:	69b9      	ldr	r1, [r7, #24]
 800484e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	2203      	movs	r2, #3
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	43db      	mvns	r3, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4013      	ands	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f003 0203 	and.w	r2, r3, #3
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	4313      	orrs	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 80e0 	beq.w	8004a54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004894:	4b2f      	ldr	r3, [pc, #188]	; (8004954 <HAL_GPIO_Init+0x238>)
 8004896:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800489a:	4a2e      	ldr	r2, [pc, #184]	; (8004954 <HAL_GPIO_Init+0x238>)
 800489c:	f043 0302 	orr.w	r3, r3, #2
 80048a0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80048a4:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <HAL_GPIO_Init+0x238>)
 80048a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048b2:	4a29      	ldr	r2, [pc, #164]	; (8004958 <HAL_GPIO_Init+0x23c>)
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	089b      	lsrs	r3, r3, #2
 80048b8:	3302      	adds	r3, #2
 80048ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	220f      	movs	r2, #15
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	43db      	mvns	r3, r3
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	4013      	ands	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a20      	ldr	r2, [pc, #128]	; (800495c <HAL_GPIO_Init+0x240>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d052      	beq.n	8004984 <HAL_GPIO_Init+0x268>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a1f      	ldr	r2, [pc, #124]	; (8004960 <HAL_GPIO_Init+0x244>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d031      	beq.n	800494a <HAL_GPIO_Init+0x22e>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a1e      	ldr	r2, [pc, #120]	; (8004964 <HAL_GPIO_Init+0x248>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d02b      	beq.n	8004946 <HAL_GPIO_Init+0x22a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <HAL_GPIO_Init+0x24c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d025      	beq.n	8004942 <HAL_GPIO_Init+0x226>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a1c      	ldr	r2, [pc, #112]	; (800496c <HAL_GPIO_Init+0x250>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d01f      	beq.n	800493e <HAL_GPIO_Init+0x222>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a1b      	ldr	r2, [pc, #108]	; (8004970 <HAL_GPIO_Init+0x254>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d019      	beq.n	800493a <HAL_GPIO_Init+0x21e>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a1a      	ldr	r2, [pc, #104]	; (8004974 <HAL_GPIO_Init+0x258>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d013      	beq.n	8004936 <HAL_GPIO_Init+0x21a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a19      	ldr	r2, [pc, #100]	; (8004978 <HAL_GPIO_Init+0x25c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00d      	beq.n	8004932 <HAL_GPIO_Init+0x216>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a18      	ldr	r2, [pc, #96]	; (800497c <HAL_GPIO_Init+0x260>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d007      	beq.n	800492e <HAL_GPIO_Init+0x212>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a17      	ldr	r2, [pc, #92]	; (8004980 <HAL_GPIO_Init+0x264>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d101      	bne.n	800492a <HAL_GPIO_Init+0x20e>
 8004926:	2309      	movs	r3, #9
 8004928:	e02d      	b.n	8004986 <HAL_GPIO_Init+0x26a>
 800492a:	230a      	movs	r3, #10
 800492c:	e02b      	b.n	8004986 <HAL_GPIO_Init+0x26a>
 800492e:	2308      	movs	r3, #8
 8004930:	e029      	b.n	8004986 <HAL_GPIO_Init+0x26a>
 8004932:	2307      	movs	r3, #7
 8004934:	e027      	b.n	8004986 <HAL_GPIO_Init+0x26a>
 8004936:	2306      	movs	r3, #6
 8004938:	e025      	b.n	8004986 <HAL_GPIO_Init+0x26a>
 800493a:	2305      	movs	r3, #5
 800493c:	e023      	b.n	8004986 <HAL_GPIO_Init+0x26a>
 800493e:	2304      	movs	r3, #4
 8004940:	e021      	b.n	8004986 <HAL_GPIO_Init+0x26a>
 8004942:	2303      	movs	r3, #3
 8004944:	e01f      	b.n	8004986 <HAL_GPIO_Init+0x26a>
 8004946:	2302      	movs	r3, #2
 8004948:	e01d      	b.n	8004986 <HAL_GPIO_Init+0x26a>
 800494a:	2301      	movs	r3, #1
 800494c:	e01b      	b.n	8004986 <HAL_GPIO_Init+0x26a>
 800494e:	bf00      	nop
 8004950:	58000080 	.word	0x58000080
 8004954:	58024400 	.word	0x58024400
 8004958:	58000400 	.word	0x58000400
 800495c:	58020000 	.word	0x58020000
 8004960:	58020400 	.word	0x58020400
 8004964:	58020800 	.word	0x58020800
 8004968:	58020c00 	.word	0x58020c00
 800496c:	58021000 	.word	0x58021000
 8004970:	58021400 	.word	0x58021400
 8004974:	58021800 	.word	0x58021800
 8004978:	58021c00 	.word	0x58021c00
 800497c:	58022000 	.word	0x58022000
 8004980:	58022400 	.word	0x58022400
 8004984:	2300      	movs	r3, #0
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	f002 0203 	and.w	r2, r2, #3
 800498c:	0092      	lsls	r2, r2, #2
 800498e:	4093      	lsls	r3, r2
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	4313      	orrs	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004996:	4938      	ldr	r1, [pc, #224]	; (8004a78 <HAL_GPIO_Init+0x35c>)
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	089b      	lsrs	r3, r3, #2
 800499c:	3302      	adds	r3, #2
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	43db      	mvns	r3, r3
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	4013      	ands	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	43db      	mvns	r3, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	4013      	ands	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	43db      	mvns	r3, r3
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4013      	ands	r3, r2
 8004a08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004a1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	43db      	mvns	r3, r3
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	4013      	ands	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	3301      	adds	r3, #1
 8004a58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f47f ae63 	bne.w	8004730 <HAL_GPIO_Init+0x14>
  }
}
 8004a6a:	bf00      	nop
 8004a6c:	bf00      	nop
 8004a6e:	3724      	adds	r7, #36	; 0x24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	58000400 	.word	0x58000400

08004a7c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004a84:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <HAL_HSEM_FastTake+0x2c>)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3320      	adds	r3, #32
 8004a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a8e:	4a07      	ldr	r2, [pc, #28]	; (8004aac <HAL_HSEM_FastTake+0x30>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d101      	bne.n	8004a98 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	e000      	b.n	8004a9a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	58026400 	.word	0x58026400
 8004aac:	80000300 	.word	0x80000300

08004ab0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004aba:	4906      	ldr	r1, [pc, #24]	; (8004ad4 <HAL_HSEM_Release+0x24>)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	58026400 	.word	0x58026400

08004ad8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ada:	b08f      	sub	sp, #60	; 0x3c
 8004adc:	af0a      	add	r7, sp, #40	; 0x28
 8004ade:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e116      	b.n	8004d18 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d106      	bne.n	8004b0a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7fc fbed 	bl	80012e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2203      	movs	r2, #3
 8004b0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d102      	bne.n	8004b24 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f004 faa5 	bl	8009078 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	687e      	ldr	r6, [r7, #4]
 8004b36:	466d      	mov	r5, sp
 8004b38:	f106 0410 	add.w	r4, r6, #16
 8004b3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b48:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b4c:	1d33      	adds	r3, r6, #4
 8004b4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b50:	6838      	ldr	r0, [r7, #0]
 8004b52:	f004 fa23 	bl	8008f9c <USB_CoreInit>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e0d7      	b.n	8004d18 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f004 fa93 	bl	800909a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b74:	2300      	movs	r3, #0
 8004b76:	73fb      	strb	r3, [r7, #15]
 8004b78:	e04a      	b.n	8004c10 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b7a:	7bfa      	ldrb	r2, [r7, #15]
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	1a9b      	subs	r3, r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	440b      	add	r3, r1
 8004b88:	333d      	adds	r3, #61	; 0x3d
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b8e:	7bfa      	ldrb	r2, [r7, #15]
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	1a9b      	subs	r3, r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	440b      	add	r3, r1
 8004b9c:	333c      	adds	r3, #60	; 0x3c
 8004b9e:	7bfa      	ldrb	r2, [r7, #15]
 8004ba0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004ba2:	7bfa      	ldrb	r2, [r7, #15]
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	b298      	uxth	r0, r3
 8004ba8:	6879      	ldr	r1, [r7, #4]
 8004baa:	4613      	mov	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	1a9b      	subs	r3, r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	440b      	add	r3, r1
 8004bb4:	3342      	adds	r3, #66	; 0x42
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004bba:	7bfa      	ldrb	r2, [r7, #15]
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	1a9b      	subs	r3, r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	333f      	adds	r3, #63	; 0x3f
 8004bca:	2200      	movs	r2, #0
 8004bcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004bce:	7bfa      	ldrb	r2, [r7, #15]
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	1a9b      	subs	r3, r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	3344      	adds	r3, #68	; 0x44
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004be2:	7bfa      	ldrb	r2, [r7, #15]
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	1a9b      	subs	r3, r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	3348      	adds	r3, #72	; 0x48
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004bf6:	7bfa      	ldrb	r2, [r7, #15]
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	1a9b      	subs	r3, r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	440b      	add	r3, r1
 8004c04:	3350      	adds	r3, #80	; 0x50
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	73fb      	strb	r3, [r7, #15]
 8004c10:	7bfa      	ldrb	r2, [r7, #15]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d3af      	bcc.n	8004b7a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	73fb      	strb	r3, [r7, #15]
 8004c1e:	e044      	b.n	8004caa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c20:	7bfa      	ldrb	r2, [r7, #15]
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	4613      	mov	r3, r2
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	1a9b      	subs	r3, r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c36:	7bfa      	ldrb	r2, [r7, #15]
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	440b      	add	r3, r1
 8004c44:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004c48:	7bfa      	ldrb	r2, [r7, #15]
 8004c4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c4c:	7bfa      	ldrb	r2, [r7, #15]
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	4613      	mov	r3, r2
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	1a9b      	subs	r3, r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004c5e:	2200      	movs	r2, #0
 8004c60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c62:	7bfa      	ldrb	r2, [r7, #15]
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	4613      	mov	r3, r2
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	440b      	add	r3, r1
 8004c70:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c78:	7bfa      	ldrb	r2, [r7, #15]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c8e:	7bfa      	ldrb	r2, [r7, #15]
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	4613      	mov	r3, r2
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	1a9b      	subs	r3, r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	440b      	add	r3, r1
 8004c9c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	73fb      	strb	r3, [r7, #15]
 8004caa:	7bfa      	ldrb	r2, [r7, #15]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d3b5      	bcc.n	8004c20 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	603b      	str	r3, [r7, #0]
 8004cba:	687e      	ldr	r6, [r7, #4]
 8004cbc:	466d      	mov	r5, sp
 8004cbe:	f106 0410 	add.w	r4, r6, #16
 8004cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004cce:	e885 0003 	stmia.w	r5, {r0, r1}
 8004cd2:	1d33      	adds	r3, r6, #4
 8004cd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cd6:	6838      	ldr	r0, [r7, #0]
 8004cd8:	f004 fa0a 	bl	80090f0 <USB_DevInit>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e014      	b.n	8004d18 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d102      	bne.n	8004d0c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f80a 	bl	8004d20 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f004 fbac 	bl	800946e <USB_DevDisconnect>

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d20 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d4e:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <HAL_PCDEx_ActivateLPM+0x44>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	10000003 	.word	0x10000003

08004d68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004d70:	4b29      	ldr	r3, [pc, #164]	; (8004e18 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	2b06      	cmp	r3, #6
 8004d7a:	d00a      	beq.n	8004d92 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004d7c:	4b26      	ldr	r3, [pc, #152]	; (8004e18 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d001      	beq.n	8004d8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e040      	b.n	8004e10 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e03e      	b.n	8004e10 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004d92:	4b21      	ldr	r3, [pc, #132]	; (8004e18 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004d9a:	491f      	ldr	r1, [pc, #124]	; (8004e18 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004da2:	f7fc fc15 	bl	80015d0 <HAL_GetTick>
 8004da6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004da8:	e009      	b.n	8004dbe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004daa:	f7fc fc11 	bl	80015d0 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004db8:	d901      	bls.n	8004dbe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e028      	b.n	8004e10 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004dbe:	4b16      	ldr	r3, [pc, #88]	; (8004e18 <HAL_PWREx_ConfigSupply+0xb0>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dca:	d1ee      	bne.n	8004daa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b1e      	cmp	r3, #30
 8004dd0:	d008      	beq.n	8004de4 <HAL_PWREx_ConfigSupply+0x7c>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b2e      	cmp	r3, #46	; 0x2e
 8004dd6:	d005      	beq.n	8004de4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b1d      	cmp	r3, #29
 8004ddc:	d002      	beq.n	8004de4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b2d      	cmp	r3, #45	; 0x2d
 8004de2:	d114      	bne.n	8004e0e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004de4:	f7fc fbf4 	bl	80015d0 <HAL_GetTick>
 8004de8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004dea:	e009      	b.n	8004e00 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004dec:	f7fc fbf0 	bl	80015d0 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dfa:	d901      	bls.n	8004e00 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e007      	b.n	8004e10 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e0c:	d1ee      	bne.n	8004dec <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	58024800 	.word	0x58024800

08004e1c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004e20:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	4a04      	ldr	r2, [pc, #16]	; (8004e38 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e2a:	60d3      	str	r3, [r2, #12]
}
 8004e2c:	bf00      	nop
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	58024800 	.word	0x58024800

08004e3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08c      	sub	sp, #48	; 0x30
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e3fd      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 8087 	beq.w	8004f6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e5c:	4b99      	ldr	r3, [pc, #612]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e66:	4b97      	ldr	r3, [pc, #604]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6e:	2b10      	cmp	r3, #16
 8004e70:	d007      	beq.n	8004e82 <HAL_RCC_OscConfig+0x46>
 8004e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e74:	2b18      	cmp	r3, #24
 8004e76:	d110      	bne.n	8004e9a <HAL_RCC_OscConfig+0x5e>
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d10b      	bne.n	8004e9a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e82:	4b90      	ldr	r3, [pc, #576]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d06c      	beq.n	8004f68 <HAL_RCC_OscConfig+0x12c>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d168      	bne.n	8004f68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e3d7      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea2:	d106      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x76>
 8004ea4:	4b87      	ldr	r3, [pc, #540]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a86      	ldr	r2, [pc, #536]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	e02e      	b.n	8004f10 <HAL_RCC_OscConfig+0xd4>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x98>
 8004eba:	4b82      	ldr	r3, [pc, #520]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a81      	ldr	r2, [pc, #516]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	4b7f      	ldr	r3, [pc, #508]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a7e      	ldr	r2, [pc, #504]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004ecc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	e01d      	b.n	8004f10 <HAL_RCC_OscConfig+0xd4>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004edc:	d10c      	bne.n	8004ef8 <HAL_RCC_OscConfig+0xbc>
 8004ede:	4b79      	ldr	r3, [pc, #484]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a78      	ldr	r2, [pc, #480]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	4b76      	ldr	r3, [pc, #472]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a75      	ldr	r2, [pc, #468]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	e00b      	b.n	8004f10 <HAL_RCC_OscConfig+0xd4>
 8004ef8:	4b72      	ldr	r3, [pc, #456]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a71      	ldr	r2, [pc, #452]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	4b6f      	ldr	r3, [pc, #444]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a6e      	ldr	r2, [pc, #440]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d013      	beq.n	8004f40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fc fb5a 	bl	80015d0 <HAL_GetTick>
 8004f1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f20:	f7fc fb56 	bl	80015d0 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b64      	cmp	r3, #100	; 0x64
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e38b      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f32:	4b64      	ldr	r3, [pc, #400]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0xe4>
 8004f3e:	e014      	b.n	8004f6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f40:	f7fc fb46 	bl	80015d0 <HAL_GetTick>
 8004f44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f48:	f7fc fb42 	bl	80015d0 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b64      	cmp	r3, #100	; 0x64
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e377      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f5a:	4b5a      	ldr	r3, [pc, #360]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0x10c>
 8004f66:	e000      	b.n	8004f6a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 80ae 	beq.w	80050d4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f78:	4b52      	ldr	r3, [pc, #328]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f82:	4b50      	ldr	r3, [pc, #320]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f86:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d007      	beq.n	8004f9e <HAL_RCC_OscConfig+0x162>
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	2b18      	cmp	r3, #24
 8004f92:	d13a      	bne.n	800500a <HAL_RCC_OscConfig+0x1ce>
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d135      	bne.n	800500a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f9e:	4b49      	ldr	r3, [pc, #292]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x17a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e349      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb6:	f7fc fb3b 	bl	8001630 <HAL_GetREVID>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	f241 0203 	movw	r2, #4099	; 0x1003
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d817      	bhi.n	8004ff4 <HAL_RCC_OscConfig+0x1b8>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2b40      	cmp	r3, #64	; 0x40
 8004fca:	d108      	bne.n	8004fde <HAL_RCC_OscConfig+0x1a2>
 8004fcc:	4b3d      	ldr	r3, [pc, #244]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004fd4:	4a3b      	ldr	r2, [pc, #236]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fda:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fdc:	e07a      	b.n	80050d4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fde:	4b39      	ldr	r3, [pc, #228]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	031b      	lsls	r3, r3, #12
 8004fec:	4935      	ldr	r1, [pc, #212]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ff2:	e06f      	b.n	80050d4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff4:	4b33      	ldr	r3, [pc, #204]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	061b      	lsls	r3, r3, #24
 8005002:	4930      	ldr	r1, [pc, #192]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8005004:	4313      	orrs	r3, r2
 8005006:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005008:	e064      	b.n	80050d4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d045      	beq.n	800509e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005012:	4b2c      	ldr	r3, [pc, #176]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f023 0219 	bic.w	r2, r3, #25
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	4929      	ldr	r1, [pc, #164]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8005020:	4313      	orrs	r3, r2
 8005022:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005024:	f7fc fad4 	bl	80015d0 <HAL_GetTick>
 8005028:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800502c:	f7fc fad0 	bl	80015d0 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e305      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800503e:	4b21      	ldr	r3, [pc, #132]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f0      	beq.n	800502c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800504a:	f7fc faf1 	bl	8001630 <HAL_GetREVID>
 800504e:	4603      	mov	r3, r0
 8005050:	f241 0203 	movw	r2, #4099	; 0x1003
 8005054:	4293      	cmp	r3, r2
 8005056:	d817      	bhi.n	8005088 <HAL_RCC_OscConfig+0x24c>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b40      	cmp	r3, #64	; 0x40
 800505e:	d108      	bne.n	8005072 <HAL_RCC_OscConfig+0x236>
 8005060:	4b18      	ldr	r3, [pc, #96]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005068:	4a16      	ldr	r2, [pc, #88]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 800506a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800506e:	6053      	str	r3, [r2, #4]
 8005070:	e030      	b.n	80050d4 <HAL_RCC_OscConfig+0x298>
 8005072:	4b14      	ldr	r3, [pc, #80]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	031b      	lsls	r3, r3, #12
 8005080:	4910      	ldr	r1, [pc, #64]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8005082:	4313      	orrs	r3, r2
 8005084:	604b      	str	r3, [r1, #4]
 8005086:	e025      	b.n	80050d4 <HAL_RCC_OscConfig+0x298>
 8005088:	4b0e      	ldr	r3, [pc, #56]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	061b      	lsls	r3, r3, #24
 8005096:	490b      	ldr	r1, [pc, #44]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 8005098:	4313      	orrs	r3, r2
 800509a:	604b      	str	r3, [r1, #4]
 800509c:	e01a      	b.n	80050d4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800509e:	4b09      	ldr	r3, [pc, #36]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a08      	ldr	r2, [pc, #32]	; (80050c4 <HAL_RCC_OscConfig+0x288>)
 80050a4:	f023 0301 	bic.w	r3, r3, #1
 80050a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050aa:	f7fc fa91 	bl	80015d0 <HAL_GetTick>
 80050ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050b0:	e00a      	b.n	80050c8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050b2:	f7fc fa8d 	bl	80015d0 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d903      	bls.n	80050c8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e2c2      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
 80050c4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050c8:	4b94      	ldr	r3, [pc, #592]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1ee      	bne.n	80050b2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 80a9 	beq.w	8005234 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050e2:	4b8e      	ldr	r3, [pc, #568]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050ec:	4b8b      	ldr	r3, [pc, #556]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 80050ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d007      	beq.n	8005108 <HAL_RCC_OscConfig+0x2cc>
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	2b18      	cmp	r3, #24
 80050fc:	d13a      	bne.n	8005174 <HAL_RCC_OscConfig+0x338>
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	2b01      	cmp	r3, #1
 8005106:	d135      	bne.n	8005174 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005108:	4b84      	ldr	r3, [pc, #528]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <HAL_RCC_OscConfig+0x2e4>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	2b80      	cmp	r3, #128	; 0x80
 800511a:	d001      	beq.n	8005120 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e294      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005120:	f7fc fa86 	bl	8001630 <HAL_GetREVID>
 8005124:	4603      	mov	r3, r0
 8005126:	f241 0203 	movw	r2, #4099	; 0x1003
 800512a:	4293      	cmp	r3, r2
 800512c:	d817      	bhi.n	800515e <HAL_RCC_OscConfig+0x322>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	2b20      	cmp	r3, #32
 8005134:	d108      	bne.n	8005148 <HAL_RCC_OscConfig+0x30c>
 8005136:	4b79      	ldr	r3, [pc, #484]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800513e:	4a77      	ldr	r2, [pc, #476]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 8005140:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005144:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005146:	e075      	b.n	8005234 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005148:	4b74      	ldr	r3, [pc, #464]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	069b      	lsls	r3, r3, #26
 8005156:	4971      	ldr	r1, [pc, #452]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 8005158:	4313      	orrs	r3, r2
 800515a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800515c:	e06a      	b.n	8005234 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800515e:	4b6f      	ldr	r3, [pc, #444]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	061b      	lsls	r3, r3, #24
 800516c:	496b      	ldr	r1, [pc, #428]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 800516e:	4313      	orrs	r3, r2
 8005170:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005172:	e05f      	b.n	8005234 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d042      	beq.n	8005202 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800517c:	4b67      	ldr	r3, [pc, #412]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a66      	ldr	r2, [pc, #408]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 8005182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005188:	f7fc fa22 	bl	80015d0 <HAL_GetTick>
 800518c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005190:	f7fc fa1e 	bl	80015d0 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e253      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051a2:	4b5e      	ldr	r3, [pc, #376]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0f0      	beq.n	8005190 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051ae:	f7fc fa3f 	bl	8001630 <HAL_GetREVID>
 80051b2:	4603      	mov	r3, r0
 80051b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d817      	bhi.n	80051ec <HAL_RCC_OscConfig+0x3b0>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d108      	bne.n	80051d6 <HAL_RCC_OscConfig+0x39a>
 80051c4:	4b55      	ldr	r3, [pc, #340]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80051cc:	4a53      	ldr	r2, [pc, #332]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 80051ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051d2:	6053      	str	r3, [r2, #4]
 80051d4:	e02e      	b.n	8005234 <HAL_RCC_OscConfig+0x3f8>
 80051d6:	4b51      	ldr	r3, [pc, #324]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	069b      	lsls	r3, r3, #26
 80051e4:	494d      	ldr	r1, [pc, #308]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	604b      	str	r3, [r1, #4]
 80051ea:	e023      	b.n	8005234 <HAL_RCC_OscConfig+0x3f8>
 80051ec:	4b4b      	ldr	r3, [pc, #300]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	061b      	lsls	r3, r3, #24
 80051fa:	4948      	ldr	r1, [pc, #288]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60cb      	str	r3, [r1, #12]
 8005200:	e018      	b.n	8005234 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005202:	4b46      	ldr	r3, [pc, #280]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a45      	ldr	r2, [pc, #276]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 8005208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800520c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520e:	f7fc f9df 	bl	80015d0 <HAL_GetTick>
 8005212:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005216:	f7fc f9db 	bl	80015d0 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e210      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005228:	4b3c      	ldr	r3, [pc, #240]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1f0      	bne.n	8005216 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b00      	cmp	r3, #0
 800523e:	d036      	beq.n	80052ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d019      	beq.n	800527c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005248:	4b34      	ldr	r3, [pc, #208]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 800524a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800524c:	4a33      	ldr	r2, [pc, #204]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005254:	f7fc f9bc 	bl	80015d0 <HAL_GetTick>
 8005258:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800525c:	f7fc f9b8 	bl	80015d0 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e1ed      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800526e:	4b2b      	ldr	r3, [pc, #172]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 8005270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0f0      	beq.n	800525c <HAL_RCC_OscConfig+0x420>
 800527a:	e018      	b.n	80052ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800527c:	4b27      	ldr	r3, [pc, #156]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 800527e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005280:	4a26      	ldr	r2, [pc, #152]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 8005282:	f023 0301 	bic.w	r3, r3, #1
 8005286:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005288:	f7fc f9a2 	bl	80015d0 <HAL_GetTick>
 800528c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005290:	f7fc f99e 	bl	80015d0 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e1d3      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052a2:	4b1e      	ldr	r3, [pc, #120]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 80052a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d038      	beq.n	800532c <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d019      	beq.n	80052f6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052c2:	4b16      	ldr	r3, [pc, #88]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a15      	ldr	r2, [pc, #84]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 80052c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80052ce:	f7fc f97f 	bl	80015d0 <HAL_GetTick>
 80052d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80052d4:	e008      	b.n	80052e8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80052d6:	f7fc f97b 	bl	80015d0 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e1b0      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80052e8:	4b0c      	ldr	r3, [pc, #48]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d0f0      	beq.n	80052d6 <HAL_RCC_OscConfig+0x49a>
 80052f4:	e01a      	b.n	800532c <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052f6:	4b09      	ldr	r3, [pc, #36]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a08      	ldr	r2, [pc, #32]	; (800531c <HAL_RCC_OscConfig+0x4e0>)
 80052fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005300:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005302:	f7fc f965 	bl	80015d0 <HAL_GetTick>
 8005306:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005308:	e00a      	b.n	8005320 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800530a:	f7fc f961 	bl	80015d0 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d903      	bls.n	8005320 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e196      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
 800531c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005320:	4b99      	ldr	r3, [pc, #612]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1ee      	bne.n	800530a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0304 	and.w	r3, r3, #4
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 8081 	beq.w	800543c <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800533a:	4b94      	ldr	r3, [pc, #592]	; (800558c <HAL_RCC_OscConfig+0x750>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a93      	ldr	r2, [pc, #588]	; (800558c <HAL_RCC_OscConfig+0x750>)
 8005340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005344:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005346:	f7fc f943 	bl	80015d0 <HAL_GetTick>
 800534a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800534c:	e008      	b.n	8005360 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800534e:	f7fc f93f 	bl	80015d0 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b64      	cmp	r3, #100	; 0x64
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e174      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005360:	4b8a      	ldr	r3, [pc, #552]	; (800558c <HAL_RCC_OscConfig+0x750>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0f0      	beq.n	800534e <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d106      	bne.n	8005382 <HAL_RCC_OscConfig+0x546>
 8005374:	4b84      	ldr	r3, [pc, #528]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 8005376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005378:	4a83      	ldr	r2, [pc, #524]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	6713      	str	r3, [r2, #112]	; 0x70
 8005380:	e02d      	b.n	80053de <HAL_RCC_OscConfig+0x5a2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10c      	bne.n	80053a4 <HAL_RCC_OscConfig+0x568>
 800538a:	4b7f      	ldr	r3, [pc, #508]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538e:	4a7e      	ldr	r2, [pc, #504]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	6713      	str	r3, [r2, #112]	; 0x70
 8005396:	4b7c      	ldr	r3, [pc, #496]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 8005398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539a:	4a7b      	ldr	r2, [pc, #492]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 800539c:	f023 0304 	bic.w	r3, r3, #4
 80053a0:	6713      	str	r3, [r2, #112]	; 0x70
 80053a2:	e01c      	b.n	80053de <HAL_RCC_OscConfig+0x5a2>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	2b05      	cmp	r3, #5
 80053aa:	d10c      	bne.n	80053c6 <HAL_RCC_OscConfig+0x58a>
 80053ac:	4b76      	ldr	r3, [pc, #472]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 80053ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b0:	4a75      	ldr	r2, [pc, #468]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 80053b2:	f043 0304 	orr.w	r3, r3, #4
 80053b6:	6713      	str	r3, [r2, #112]	; 0x70
 80053b8:	4b73      	ldr	r3, [pc, #460]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 80053ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053bc:	4a72      	ldr	r2, [pc, #456]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 80053be:	f043 0301 	orr.w	r3, r3, #1
 80053c2:	6713      	str	r3, [r2, #112]	; 0x70
 80053c4:	e00b      	b.n	80053de <HAL_RCC_OscConfig+0x5a2>
 80053c6:	4b70      	ldr	r3, [pc, #448]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 80053c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ca:	4a6f      	ldr	r2, [pc, #444]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 80053cc:	f023 0301 	bic.w	r3, r3, #1
 80053d0:	6713      	str	r3, [r2, #112]	; 0x70
 80053d2:	4b6d      	ldr	r3, [pc, #436]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 80053d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d6:	4a6c      	ldr	r2, [pc, #432]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 80053d8:	f023 0304 	bic.w	r3, r3, #4
 80053dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d015      	beq.n	8005412 <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e6:	f7fc f8f3 	bl	80015d0 <HAL_GetTick>
 80053ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053ec:	e00a      	b.n	8005404 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ee:	f7fc f8ef 	bl	80015d0 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d901      	bls.n	8005404 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e122      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005404:	4b60      	ldr	r3, [pc, #384]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 8005406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0ee      	beq.n	80053ee <HAL_RCC_OscConfig+0x5b2>
 8005410:	e014      	b.n	800543c <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005412:	f7fc f8dd 	bl	80015d0 <HAL_GetTick>
 8005416:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005418:	e00a      	b.n	8005430 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800541a:	f7fc f8d9 	bl	80015d0 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	f241 3288 	movw	r2, #5000	; 0x1388
 8005428:	4293      	cmp	r3, r2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e10c      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005430:	4b55      	ldr	r3, [pc, #340]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 8005432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1ee      	bne.n	800541a <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 8101 	beq.w	8005648 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005446:	4b50      	ldr	r3, [pc, #320]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800544e:	2b18      	cmp	r3, #24
 8005450:	f000 80bc 	beq.w	80055cc <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	2b02      	cmp	r3, #2
 800545a:	f040 809d 	bne.w	8005598 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800545e:	4b4a      	ldr	r3, [pc, #296]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a49      	ldr	r2, [pc, #292]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 8005464:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546a:	f7fc f8b1 	bl	80015d0 <HAL_GetTick>
 800546e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005470:	e008      	b.n	8005484 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005472:	f7fc f8ad 	bl	80015d0 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d901      	bls.n	8005484 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e0e2      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005484:	4b40      	ldr	r3, [pc, #256]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1f0      	bne.n	8005472 <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005490:	4b3d      	ldr	r3, [pc, #244]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 8005492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005494:	4b3e      	ldr	r3, [pc, #248]	; (8005590 <HAL_RCC_OscConfig+0x754>)
 8005496:	4013      	ands	r3, r2
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054a0:	0112      	lsls	r2, r2, #4
 80054a2:	430a      	orrs	r2, r1
 80054a4:	4938      	ldr	r1, [pc, #224]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	628b      	str	r3, [r1, #40]	; 0x28
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	3b01      	subs	r3, #1
 80054b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b8:	3b01      	subs	r3, #1
 80054ba:	025b      	lsls	r3, r3, #9
 80054bc:	b29b      	uxth	r3, r3
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c4:	3b01      	subs	r3, #1
 80054c6:	041b      	lsls	r3, r3, #16
 80054c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d2:	3b01      	subs	r3, #1
 80054d4:	061b      	lsls	r3, r3, #24
 80054d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80054da:	492b      	ldr	r1, [pc, #172]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80054e0:	4b29      	ldr	r3, [pc, #164]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	4a28      	ldr	r2, [pc, #160]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 80054e6:	f023 0301 	bic.w	r3, r3, #1
 80054ea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80054ec:	4b26      	ldr	r3, [pc, #152]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 80054ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f0:	4b28      	ldr	r3, [pc, #160]	; (8005594 <HAL_RCC_OscConfig+0x758>)
 80054f2:	4013      	ands	r3, r2
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80054f8:	00d2      	lsls	r2, r2, #3
 80054fa:	4923      	ldr	r1, [pc, #140]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005500:	4b21      	ldr	r3, [pc, #132]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 8005502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005504:	f023 020c 	bic.w	r2, r3, #12
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	491e      	ldr	r1, [pc, #120]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 800550e:	4313      	orrs	r3, r2
 8005510:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005512:	4b1d      	ldr	r3, [pc, #116]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 8005514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005516:	f023 0202 	bic.w	r2, r3, #2
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551e:	491a      	ldr	r1, [pc, #104]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 8005520:	4313      	orrs	r3, r2
 8005522:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005524:	4b18      	ldr	r3, [pc, #96]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	4a17      	ldr	r2, [pc, #92]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 800552a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800552e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005530:	4b15      	ldr	r3, [pc, #84]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	4a14      	ldr	r2, [pc, #80]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 8005536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800553a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800553c:	4b12      	ldr	r3, [pc, #72]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	4a11      	ldr	r2, [pc, #68]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 8005542:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005546:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005548:	4b0f      	ldr	r3, [pc, #60]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	4a0e      	ldr	r2, [pc, #56]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 800554e:	f043 0301 	orr.w	r3, r3, #1
 8005552:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005554:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a0b      	ldr	r2, [pc, #44]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 800555a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800555e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005560:	f7fc f836 	bl	80015d0 <HAL_GetTick>
 8005564:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005568:	f7fc f832 	bl	80015d0 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e067      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800557a:	4b03      	ldr	r3, [pc, #12]	; (8005588 <HAL_RCC_OscConfig+0x74c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0f0      	beq.n	8005568 <HAL_RCC_OscConfig+0x72c>
 8005586:	e05f      	b.n	8005648 <HAL_RCC_OscConfig+0x80c>
 8005588:	58024400 	.word	0x58024400
 800558c:	58024800 	.word	0x58024800
 8005590:	fffffc0c 	.word	0xfffffc0c
 8005594:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005598:	4b2e      	ldr	r3, [pc, #184]	; (8005654 <HAL_RCC_OscConfig+0x818>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a2d      	ldr	r2, [pc, #180]	; (8005654 <HAL_RCC_OscConfig+0x818>)
 800559e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a4:	f7fc f814 	bl	80015d0 <HAL_GetTick>
 80055a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055ac:	f7fc f810 	bl	80015d0 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e045      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055be:	4b25      	ldr	r3, [pc, #148]	; (8005654 <HAL_RCC_OscConfig+0x818>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f0      	bne.n	80055ac <HAL_RCC_OscConfig+0x770>
 80055ca:	e03d      	b.n	8005648 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80055cc:	4b21      	ldr	r3, [pc, #132]	; (8005654 <HAL_RCC_OscConfig+0x818>)
 80055ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80055d2:	4b20      	ldr	r3, [pc, #128]	; (8005654 <HAL_RCC_OscConfig+0x818>)
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d031      	beq.n	8005644 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f003 0203 	and.w	r2, r3, #3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d12a      	bne.n	8005644 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	091b      	lsrs	r3, r3, #4
 80055f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d122      	bne.n	8005644 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800560a:	429a      	cmp	r2, r3
 800560c:	d11a      	bne.n	8005644 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	0a5b      	lsrs	r3, r3, #9
 8005612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800561c:	429a      	cmp	r2, r3
 800561e:	d111      	bne.n	8005644 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	0c1b      	lsrs	r3, r3, #16
 8005624:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800562e:	429a      	cmp	r2, r3
 8005630:	d108      	bne.n	8005644 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	0e1b      	lsrs	r3, r3, #24
 8005636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005640:	429a      	cmp	r2, r3
 8005642:	d001      	beq.n	8005648 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3730      	adds	r7, #48	; 0x30
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	58024400 	.word	0x58024400

08005658 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e19c      	b.n	80059a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800566c:	4b8a      	ldr	r3, [pc, #552]	; (8005898 <HAL_RCC_ClockConfig+0x240>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d910      	bls.n	800569c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800567a:	4b87      	ldr	r3, [pc, #540]	; (8005898 <HAL_RCC_ClockConfig+0x240>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f023 020f 	bic.w	r2, r3, #15
 8005682:	4985      	ldr	r1, [pc, #532]	; (8005898 <HAL_RCC_ClockConfig+0x240>)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	4313      	orrs	r3, r2
 8005688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800568a:	4b83      	ldr	r3, [pc, #524]	; (8005898 <HAL_RCC_ClockConfig+0x240>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 030f 	and.w	r3, r3, #15
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d001      	beq.n	800569c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e184      	b.n	80059a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d010      	beq.n	80056ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	4b7b      	ldr	r3, [pc, #492]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d908      	bls.n	80056ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056b8:	4b78      	ldr	r3, [pc, #480]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	4975      	ldr	r1, [pc, #468]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d010      	beq.n	80056f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	695a      	ldr	r2, [r3, #20]
 80056da:	4b70      	ldr	r3, [pc, #448]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d908      	bls.n	80056f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056e6:	4b6d      	ldr	r3, [pc, #436]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	496a      	ldr	r1, [pc, #424]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b00      	cmp	r3, #0
 8005702:	d010      	beq.n	8005726 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699a      	ldr	r2, [r3, #24]
 8005708:	4b64      	ldr	r3, [pc, #400]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005710:	429a      	cmp	r2, r3
 8005712:	d908      	bls.n	8005726 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005714:	4b61      	ldr	r3, [pc, #388]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	495e      	ldr	r1, [pc, #376]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 8005722:	4313      	orrs	r3, r2
 8005724:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b00      	cmp	r3, #0
 8005730:	d010      	beq.n	8005754 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69da      	ldr	r2, [r3, #28]
 8005736:	4b59      	ldr	r3, [pc, #356]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800573e:	429a      	cmp	r2, r3
 8005740:	d908      	bls.n	8005754 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005742:	4b56      	ldr	r3, [pc, #344]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	4953      	ldr	r1, [pc, #332]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 8005750:	4313      	orrs	r3, r2
 8005752:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d010      	beq.n	8005782 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	4b4d      	ldr	r3, [pc, #308]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	f003 030f 	and.w	r3, r3, #15
 800576c:	429a      	cmp	r2, r3
 800576e:	d908      	bls.n	8005782 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005770:	4b4a      	ldr	r3, [pc, #296]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	f023 020f 	bic.w	r2, r3, #15
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	4947      	ldr	r1, [pc, #284]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 800577e:	4313      	orrs	r3, r2
 8005780:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d055      	beq.n	800583a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800578e:	4b43      	ldr	r3, [pc, #268]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	4940      	ldr	r1, [pc, #256]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 800579c:	4313      	orrs	r3, r2
 800579e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d107      	bne.n	80057b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057a8:	4b3c      	ldr	r3, [pc, #240]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d121      	bne.n	80057f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e0f6      	b.n	80059a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d107      	bne.n	80057d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057c0:	4b36      	ldr	r3, [pc, #216]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d115      	bne.n	80057f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e0ea      	b.n	80059a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d107      	bne.n	80057e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057d8:	4b30      	ldr	r3, [pc, #192]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d109      	bne.n	80057f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e0de      	b.n	80059a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057e8:	4b2c      	ldr	r3, [pc, #176]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e0d6      	b.n	80059a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057f8:	4b28      	ldr	r3, [pc, #160]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f023 0207 	bic.w	r2, r3, #7
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	4925      	ldr	r1, [pc, #148]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 8005806:	4313      	orrs	r3, r2
 8005808:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580a:	f7fb fee1 	bl	80015d0 <HAL_GetTick>
 800580e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005810:	e00a      	b.n	8005828 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005812:	f7fb fedd 	bl	80015d0 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005820:	4293      	cmp	r3, r2
 8005822:	d901      	bls.n	8005828 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e0be      	b.n	80059a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005828:	4b1c      	ldr	r3, [pc, #112]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	429a      	cmp	r2, r3
 8005838:	d1eb      	bne.n	8005812 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d010      	beq.n	8005868 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	4b14      	ldr	r3, [pc, #80]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	f003 030f 	and.w	r3, r3, #15
 8005852:	429a      	cmp	r2, r3
 8005854:	d208      	bcs.n	8005868 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005856:	4b11      	ldr	r3, [pc, #68]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	f023 020f 	bic.w	r2, r3, #15
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	490e      	ldr	r1, [pc, #56]	; (800589c <HAL_RCC_ClockConfig+0x244>)
 8005864:	4313      	orrs	r3, r2
 8005866:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005868:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <HAL_RCC_ClockConfig+0x240>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d214      	bcs.n	80058a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005876:	4b08      	ldr	r3, [pc, #32]	; (8005898 <HAL_RCC_ClockConfig+0x240>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f023 020f 	bic.w	r2, r3, #15
 800587e:	4906      	ldr	r1, [pc, #24]	; (8005898 <HAL_RCC_ClockConfig+0x240>)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	4313      	orrs	r3, r2
 8005884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005886:	4b04      	ldr	r3, [pc, #16]	; (8005898 <HAL_RCC_ClockConfig+0x240>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d005      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e086      	b.n	80059a6 <HAL_RCC_ClockConfig+0x34e>
 8005898:	52002000 	.word	0x52002000
 800589c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d010      	beq.n	80058ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	691a      	ldr	r2, [r3, #16]
 80058b0:	4b3f      	ldr	r3, [pc, #252]	; (80059b0 <HAL_RCC_ClockConfig+0x358>)
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d208      	bcs.n	80058ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058bc:	4b3c      	ldr	r3, [pc, #240]	; (80059b0 <HAL_RCC_ClockConfig+0x358>)
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	4939      	ldr	r1, [pc, #228]	; (80059b0 <HAL_RCC_ClockConfig+0x358>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d010      	beq.n	80058fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695a      	ldr	r2, [r3, #20]
 80058de:	4b34      	ldr	r3, [pc, #208]	; (80059b0 <HAL_RCC_ClockConfig+0x358>)
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d208      	bcs.n	80058fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80058ea:	4b31      	ldr	r3, [pc, #196]	; (80059b0 <HAL_RCC_ClockConfig+0x358>)
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	492e      	ldr	r1, [pc, #184]	; (80059b0 <HAL_RCC_ClockConfig+0x358>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	2b00      	cmp	r3, #0
 8005906:	d010      	beq.n	800592a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	699a      	ldr	r2, [r3, #24]
 800590c:	4b28      	ldr	r3, [pc, #160]	; (80059b0 <HAL_RCC_ClockConfig+0x358>)
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005914:	429a      	cmp	r2, r3
 8005916:	d208      	bcs.n	800592a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005918:	4b25      	ldr	r3, [pc, #148]	; (80059b0 <HAL_RCC_ClockConfig+0x358>)
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	4922      	ldr	r1, [pc, #136]	; (80059b0 <HAL_RCC_ClockConfig+0x358>)
 8005926:	4313      	orrs	r3, r2
 8005928:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0320 	and.w	r3, r3, #32
 8005932:	2b00      	cmp	r3, #0
 8005934:	d010      	beq.n	8005958 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69da      	ldr	r2, [r3, #28]
 800593a:	4b1d      	ldr	r3, [pc, #116]	; (80059b0 <HAL_RCC_ClockConfig+0x358>)
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005942:	429a      	cmp	r2, r3
 8005944:	d208      	bcs.n	8005958 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005946:	4b1a      	ldr	r3, [pc, #104]	; (80059b0 <HAL_RCC_ClockConfig+0x358>)
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	4917      	ldr	r1, [pc, #92]	; (80059b0 <HAL_RCC_ClockConfig+0x358>)
 8005954:	4313      	orrs	r3, r2
 8005956:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005958:	f000 f834 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 800595c:	4602      	mov	r2, r0
 800595e:	4b14      	ldr	r3, [pc, #80]	; (80059b0 <HAL_RCC_ClockConfig+0x358>)
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	0a1b      	lsrs	r3, r3, #8
 8005964:	f003 030f 	and.w	r3, r3, #15
 8005968:	4912      	ldr	r1, [pc, #72]	; (80059b4 <HAL_RCC_ClockConfig+0x35c>)
 800596a:	5ccb      	ldrb	r3, [r1, r3]
 800596c:	f003 031f 	and.w	r3, r3, #31
 8005970:	fa22 f303 	lsr.w	r3, r2, r3
 8005974:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005976:	4b0e      	ldr	r3, [pc, #56]	; (80059b0 <HAL_RCC_ClockConfig+0x358>)
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	4a0d      	ldr	r2, [pc, #52]	; (80059b4 <HAL_RCC_ClockConfig+0x35c>)
 8005980:	5cd3      	ldrb	r3, [r2, r3]
 8005982:	f003 031f 	and.w	r3, r3, #31
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	fa22 f303 	lsr.w	r3, r2, r3
 800598c:	4a0a      	ldr	r2, [pc, #40]	; (80059b8 <HAL_RCC_ClockConfig+0x360>)
 800598e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005990:	4a0a      	ldr	r2, [pc, #40]	; (80059bc <HAL_RCC_ClockConfig+0x364>)
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005996:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <HAL_RCC_ClockConfig+0x368>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4618      	mov	r0, r3
 800599c:	f7fb fdce 	bl	800153c <HAL_InitTick>
 80059a0:	4603      	mov	r3, r0
 80059a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	58024400 	.word	0x58024400
 80059b4:	080095a4 	.word	0x080095a4
 80059b8:	24000004 	.word	0x24000004
 80059bc:	24000000 	.word	0x24000000
 80059c0:	24000008 	.word	0x24000008

080059c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b089      	sub	sp, #36	; 0x24
 80059c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059ca:	4bb3      	ldr	r3, [pc, #716]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059d2:	2b18      	cmp	r3, #24
 80059d4:	f200 8155 	bhi.w	8005c82 <HAL_RCC_GetSysClockFreq+0x2be>
 80059d8:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80059da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059de:	bf00      	nop
 80059e0:	08005a45 	.word	0x08005a45
 80059e4:	08005c83 	.word	0x08005c83
 80059e8:	08005c83 	.word	0x08005c83
 80059ec:	08005c83 	.word	0x08005c83
 80059f0:	08005c83 	.word	0x08005c83
 80059f4:	08005c83 	.word	0x08005c83
 80059f8:	08005c83 	.word	0x08005c83
 80059fc:	08005c83 	.word	0x08005c83
 8005a00:	08005a6b 	.word	0x08005a6b
 8005a04:	08005c83 	.word	0x08005c83
 8005a08:	08005c83 	.word	0x08005c83
 8005a0c:	08005c83 	.word	0x08005c83
 8005a10:	08005c83 	.word	0x08005c83
 8005a14:	08005c83 	.word	0x08005c83
 8005a18:	08005c83 	.word	0x08005c83
 8005a1c:	08005c83 	.word	0x08005c83
 8005a20:	08005a71 	.word	0x08005a71
 8005a24:	08005c83 	.word	0x08005c83
 8005a28:	08005c83 	.word	0x08005c83
 8005a2c:	08005c83 	.word	0x08005c83
 8005a30:	08005c83 	.word	0x08005c83
 8005a34:	08005c83 	.word	0x08005c83
 8005a38:	08005c83 	.word	0x08005c83
 8005a3c:	08005c83 	.word	0x08005c83
 8005a40:	08005a77 	.word	0x08005a77
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a44:	4b94      	ldr	r3, [pc, #592]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d009      	beq.n	8005a64 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a50:	4b91      	ldr	r3, [pc, #580]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	08db      	lsrs	r3, r3, #3
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	4a90      	ldr	r2, [pc, #576]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a60:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005a62:	e111      	b.n	8005c88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005a64:	4b8d      	ldr	r3, [pc, #564]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a66:	61bb      	str	r3, [r7, #24]
    break;
 8005a68:	e10e      	b.n	8005c88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005a6a:	4b8d      	ldr	r3, [pc, #564]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a6c:	61bb      	str	r3, [r7, #24]
    break;
 8005a6e:	e10b      	b.n	8005c88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005a70:	4b8c      	ldr	r3, [pc, #560]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005a72:	61bb      	str	r3, [r7, #24]
    break;
 8005a74:	e108      	b.n	8005c88 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a76:	4b88      	ldr	r3, [pc, #544]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005a80:	4b85      	ldr	r3, [pc, #532]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a84:	091b      	lsrs	r3, r3, #4
 8005a86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a8a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005a8c:	4b82      	ldr	r3, [pc, #520]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005a96:	4b80      	ldr	r3, [pc, #512]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9a:	08db      	lsrs	r3, r3, #3
 8005a9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	fb02 f303 	mul.w	r3, r2, r3
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 80e1 	beq.w	8005c7c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	f000 8083 	beq.w	8005bc8 <HAL_RCC_GetSysClockFreq+0x204>
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	f200 80a1 	bhi.w	8005c0c <HAL_RCC_GetSysClockFreq+0x248>
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x114>
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d056      	beq.n	8005b84 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005ad6:	e099      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ad8:	4b6f      	ldr	r3, [pc, #444]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0320 	and.w	r3, r3, #32
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d02d      	beq.n	8005b40 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ae4:	4b6c      	ldr	r3, [pc, #432]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	08db      	lsrs	r3, r3, #3
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	4a6b      	ldr	r2, [pc, #428]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005af0:	fa22 f303 	lsr.w	r3, r2, r3
 8005af4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	ee07 3a90 	vmov	s15, r3
 8005afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b0e:	4b62      	ldr	r3, [pc, #392]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b16:	ee07 3a90 	vmov	s15, r3
 8005b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b22:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005ca8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005b3e:	e087      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	ee07 3a90 	vmov	s15, r3
 8005b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005cac <HAL_RCC_GetSysClockFreq+0x2e8>
 8005b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b52:	4b51      	ldr	r3, [pc, #324]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b5a:	ee07 3a90 	vmov	s15, r3
 8005b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b62:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b66:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005ca8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b82:	e065      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	ee07 3a90 	vmov	s15, r3
 8005b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b8e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005cb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b96:	4b40      	ldr	r3, [pc, #256]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b9e:	ee07 3a90 	vmov	s15, r3
 8005ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005baa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005ca8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bc6:	e043      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005cb4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bda:	4b2f      	ldr	r3, [pc, #188]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bea:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005ca8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c0a:	e021      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	ee07 3a90 	vmov	s15, r3
 8005c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c16:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005cb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c1e:	4b1e      	ldr	r3, [pc, #120]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c32:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005ca8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c4e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005c50:	4b11      	ldr	r3, [pc, #68]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c54:	0a5b      	lsrs	r3, r3, #9
 8005c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	ee07 3a90 	vmov	s15, r3
 8005c64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c68:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c74:	ee17 3a90 	vmov	r3, s15
 8005c78:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005c7a:	e005      	b.n	8005c88 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	61bb      	str	r3, [r7, #24]
    break;
 8005c80:	e002      	b.n	8005c88 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005c82:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c84:	61bb      	str	r3, [r7, #24]
    break;
 8005c86:	bf00      	nop
  }

  return sysclockfreq;
 8005c88:	69bb      	ldr	r3, [r7, #24]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3724      	adds	r7, #36	; 0x24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	58024400 	.word	0x58024400
 8005c9c:	03d09000 	.word	0x03d09000
 8005ca0:	003d0900 	.word	0x003d0900
 8005ca4:	007a1200 	.word	0x007a1200
 8005ca8:	46000000 	.word	0x46000000
 8005cac:	4c742400 	.word	0x4c742400
 8005cb0:	4a742400 	.word	0x4a742400
 8005cb4:	4af42400 	.word	0x4af42400

08005cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005cbe:	f7ff fe81 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	4b10      	ldr	r3, [pc, #64]	; (8005d08 <HAL_RCC_GetHCLKFreq+0x50>)
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	0a1b      	lsrs	r3, r3, #8
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	490f      	ldr	r1, [pc, #60]	; (8005d0c <HAL_RCC_GetHCLKFreq+0x54>)
 8005cd0:	5ccb      	ldrb	r3, [r1, r3]
 8005cd2:	f003 031f 	and.w	r3, r3, #31
 8005cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cda:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <HAL_RCC_GetHCLKFreq+0x50>)
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	f003 030f 	and.w	r3, r3, #15
 8005ce4:	4a09      	ldr	r2, [pc, #36]	; (8005d0c <HAL_RCC_GetHCLKFreq+0x54>)
 8005ce6:	5cd3      	ldrb	r3, [r2, r3]
 8005ce8:	f003 031f 	and.w	r3, r3, #31
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf2:	4a07      	ldr	r2, [pc, #28]	; (8005d10 <HAL_RCC_GetHCLKFreq+0x58>)
 8005cf4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005cf6:	4a07      	ldr	r2, [pc, #28]	; (8005d14 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005cfc:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <HAL_RCC_GetHCLKFreq+0x58>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	58024400 	.word	0x58024400
 8005d0c:	080095a4 	.word	0x080095a4
 8005d10:	24000004 	.word	0x24000004
 8005d14:	24000000 	.word	0x24000000

08005d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005d1c:	f7ff ffcc 	bl	8005cb8 <HAL_RCC_GetHCLKFreq>
 8005d20:	4602      	mov	r2, r0
 8005d22:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	091b      	lsrs	r3, r3, #4
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	4904      	ldr	r1, [pc, #16]	; (8005d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d2e:	5ccb      	ldrb	r3, [r1, r3]
 8005d30:	f003 031f 	and.w	r3, r3, #31
 8005d34:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	58024400 	.word	0x58024400
 8005d40:	080095a4 	.word	0x080095a4

08005d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005d48:	f7ff ffb6 	bl	8005cb8 <HAL_RCC_GetHCLKFreq>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	0a1b      	lsrs	r3, r3, #8
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	4904      	ldr	r1, [pc, #16]	; (8005d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d5a:	5ccb      	ldrb	r3, [r1, r3]
 8005d5c:	f003 031f 	and.w	r3, r3, #31
 8005d60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	58024400 	.word	0x58024400
 8005d6c:	080095a4 	.word	0x080095a4

08005d70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d78:	2300      	movs	r3, #0
 8005d7a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d03f      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d94:	d02a      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005d96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d9a:	d824      	bhi.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005d9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005da0:	d018      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005da2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005da6:	d81e      	bhi.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005dac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005db0:	d007      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005db2:	e018      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005db4:	4ba3      	ldr	r3, [pc, #652]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	4aa2      	ldr	r2, [pc, #648]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005dc0:	e015      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	2102      	movs	r1, #2
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f001 f9d5 	bl	8007178 <RCCEx_PLL2_Config>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005dd2:	e00c      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3324      	adds	r3, #36	; 0x24
 8005dd8:	2102      	movs	r1, #2
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f001 fa7e 	bl	80072dc <RCCEx_PLL3_Config>
 8005de0:	4603      	mov	r3, r0
 8005de2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005de4:	e003      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	75fb      	strb	r3, [r7, #23]
      break;
 8005dea:	e000      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dee:	7dfb      	ldrb	r3, [r7, #23]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d109      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005df4:	4b93      	ldr	r3, [pc, #588]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e00:	4990      	ldr	r1, [pc, #576]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	650b      	str	r3, [r1, #80]	; 0x50
 8005e06:	e001      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e08:	7dfb      	ldrb	r3, [r7, #23]
 8005e0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d03d      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d826      	bhi.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005e20:	a201      	add	r2, pc, #4	; (adr r2, 8005e28 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e26:	bf00      	nop
 8005e28:	08005e3d 	.word	0x08005e3d
 8005e2c:	08005e4b 	.word	0x08005e4b
 8005e30:	08005e5d 	.word	0x08005e5d
 8005e34:	08005e75 	.word	0x08005e75
 8005e38:	08005e75 	.word	0x08005e75
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e3c:	4b81      	ldr	r3, [pc, #516]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	4a80      	ldr	r2, [pc, #512]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e48:	e015      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	2100      	movs	r1, #0
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 f991 	bl	8007178 <RCCEx_PLL2_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e5a:	e00c      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3324      	adds	r3, #36	; 0x24
 8005e60:	2100      	movs	r1, #0
 8005e62:	4618      	mov	r0, r3
 8005e64:	f001 fa3a 	bl	80072dc <RCCEx_PLL3_Config>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e6c:	e003      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	75fb      	strb	r3, [r7, #23]
      break;
 8005e72:	e000      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d109      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e7c:	4b71      	ldr	r3, [pc, #452]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e80:	f023 0207 	bic.w	r2, r3, #7
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e88:	496e      	ldr	r1, [pc, #440]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	650b      	str	r3, [r1, #80]	; 0x50
 8005e8e:	e001      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
 8005e92:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d042      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ea8:	d02b      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eae:	d825      	bhi.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005eb0:	2bc0      	cmp	r3, #192	; 0xc0
 8005eb2:	d028      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005eb4:	2bc0      	cmp	r3, #192	; 0xc0
 8005eb6:	d821      	bhi.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005eb8:	2b80      	cmp	r3, #128	; 0x80
 8005eba:	d016      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005ebc:	2b80      	cmp	r3, #128	; 0x80
 8005ebe:	d81d      	bhi.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005ec4:	2b40      	cmp	r3, #64	; 0x40
 8005ec6:	d007      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005ec8:	e018      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eca:	4b5e      	ldr	r3, [pc, #376]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	4a5d      	ldr	r2, [pc, #372]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005ed6:	e017      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3304      	adds	r3, #4
 8005edc:	2100      	movs	r1, #0
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f001 f94a 	bl	8007178 <RCCEx_PLL2_Config>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005ee8:	e00e      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3324      	adds	r3, #36	; 0x24
 8005eee:	2100      	movs	r1, #0
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 f9f3 	bl	80072dc <RCCEx_PLL3_Config>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005efa:	e005      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	75fb      	strb	r3, [r7, #23]
      break;
 8005f00:	e002      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005f02:	bf00      	nop
 8005f04:	e000      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005f06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d109      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005f0e:	4b4d      	ldr	r3, [pc, #308]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f12:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1a:	494a      	ldr	r1, [pc, #296]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	650b      	str	r3, [r1, #80]	; 0x50
 8005f20:	e001      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
 8005f24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d049      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f3c:	d030      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005f3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f42:	d82a      	bhi.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005f44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005f48:	d02c      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005f4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005f4e:	d824      	bhi.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f54:	d018      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f5a:	d81e      	bhi.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005f60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f64:	d007      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005f66:	e018      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f68:	4b36      	ldr	r3, [pc, #216]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	4a35      	ldr	r2, [pc, #212]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f74:	e017      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3304      	adds	r3, #4
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f001 f8fb 	bl	8007178 <RCCEx_PLL2_Config>
 8005f82:	4603      	mov	r3, r0
 8005f84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005f86:	e00e      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	3324      	adds	r3, #36	; 0x24
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f001 f9a4 	bl	80072dc <RCCEx_PLL3_Config>
 8005f94:	4603      	mov	r3, r0
 8005f96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f98:	e005      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f9e:	e002      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005fa0:	bf00      	nop
 8005fa2:	e000      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fa6:	7dfb      	ldrb	r3, [r7, #23]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10a      	bne.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005fac:	4b25      	ldr	r3, [pc, #148]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005fba:	4922      	ldr	r1, [pc, #136]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	658b      	str	r3, [r1, #88]	; 0x58
 8005fc0:	e001      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
 8005fc4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d04b      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005fd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fdc:	d030      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005fde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fe2:	d82a      	bhi.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005fe4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005fe8:	d02e      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005fea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005fee:	d824      	bhi.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005ff0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ff4:	d018      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005ff6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ffa:	d81e      	bhi.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d003      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006004:	d007      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006006:	e018      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006008:	4b0e      	ldr	r3, [pc, #56]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	4a0d      	ldr	r2, [pc, #52]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800600e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006012:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006014:	e019      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3304      	adds	r3, #4
 800601a:	2100      	movs	r1, #0
 800601c:	4618      	mov	r0, r3
 800601e:	f001 f8ab 	bl	8007178 <RCCEx_PLL2_Config>
 8006022:	4603      	mov	r3, r0
 8006024:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006026:	e010      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3324      	adds	r3, #36	; 0x24
 800602c:	2100      	movs	r1, #0
 800602e:	4618      	mov	r0, r3
 8006030:	f001 f954 	bl	80072dc <RCCEx_PLL3_Config>
 8006034:	4603      	mov	r3, r0
 8006036:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006038:	e007      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	75fb      	strb	r3, [r7, #23]
      break;
 800603e:	e004      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006040:	bf00      	nop
 8006042:	e002      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006044:	58024400 	.word	0x58024400
      break;
 8006048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800604a:	7dfb      	ldrb	r3, [r7, #23]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10a      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006050:	4b99      	ldr	r3, [pc, #612]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006054:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800605e:	4996      	ldr	r1, [pc, #600]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006060:	4313      	orrs	r3, r2
 8006062:	658b      	str	r3, [r1, #88]	; 0x58
 8006064:	e001      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006066:	7dfb      	ldrb	r3, [r7, #23]
 8006068:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d032      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800607a:	2b30      	cmp	r3, #48	; 0x30
 800607c:	d01c      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800607e:	2b30      	cmp	r3, #48	; 0x30
 8006080:	d817      	bhi.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006082:	2b20      	cmp	r3, #32
 8006084:	d00c      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006086:	2b20      	cmp	r3, #32
 8006088:	d813      	bhi.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d016      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800608e:	2b10      	cmp	r3, #16
 8006090:	d10f      	bne.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006092:	4b89      	ldr	r3, [pc, #548]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006096:	4a88      	ldr	r2, [pc, #544]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800609c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800609e:	e00e      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	3304      	adds	r3, #4
 80060a4:	2102      	movs	r1, #2
 80060a6:	4618      	mov	r0, r3
 80060a8:	f001 f866 	bl	8007178 <RCCEx_PLL2_Config>
 80060ac:	4603      	mov	r3, r0
 80060ae:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80060b0:	e005      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	75fb      	strb	r3, [r7, #23]
      break;
 80060b6:	e002      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80060b8:	bf00      	nop
 80060ba:	e000      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80060bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060be:	7dfb      	ldrb	r3, [r7, #23]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d109      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80060c4:	4b7c      	ldr	r3, [pc, #496]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80060c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d0:	4979      	ldr	r1, [pc, #484]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80060d6:	e001      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d8:	7dfb      	ldrb	r3, [r7, #23]
 80060da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d047      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060f0:	d030      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80060f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060f6:	d82a      	bhi.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80060f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060fc:	d02c      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80060fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006102:	d824      	bhi.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006108:	d018      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800610a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800610e:	d81e      	bhi.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006118:	d007      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800611a:	e018      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800611c:	4b66      	ldr	r3, [pc, #408]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006120:	4a65      	ldr	r2, [pc, #404]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006126:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006128:	e017      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	3304      	adds	r3, #4
 800612e:	2100      	movs	r1, #0
 8006130:	4618      	mov	r0, r3
 8006132:	f001 f821 	bl	8007178 <RCCEx_PLL2_Config>
 8006136:	4603      	mov	r3, r0
 8006138:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800613a:	e00e      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3324      	adds	r3, #36	; 0x24
 8006140:	2100      	movs	r1, #0
 8006142:	4618      	mov	r0, r3
 8006144:	f001 f8ca 	bl	80072dc <RCCEx_PLL3_Config>
 8006148:	4603      	mov	r3, r0
 800614a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800614c:	e005      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	75fb      	strb	r3, [r7, #23]
      break;
 8006152:	e002      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006154:	bf00      	nop
 8006156:	e000      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006158:	bf00      	nop
    }

    if(ret == HAL_OK)
 800615a:	7dfb      	ldrb	r3, [r7, #23]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d109      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006160:	4b55      	ldr	r3, [pc, #340]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006164:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800616c:	4952      	ldr	r1, [pc, #328]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800616e:	4313      	orrs	r3, r2
 8006170:	650b      	str	r3, [r1, #80]	; 0x50
 8006172:	e001      	b.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006174:	7dfb      	ldrb	r3, [r7, #23]
 8006176:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d049      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800618c:	d02e      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800618e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006192:	d828      	bhi.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006194:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006198:	d02a      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800619a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800619e:	d822      	bhi.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80061a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80061a4:	d026      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80061a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80061aa:	d81c      	bhi.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80061ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061b0:	d010      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80061b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061b6:	d816      	bhi.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01d      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80061bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c0:	d111      	bne.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	3304      	adds	r3, #4
 80061c6:	2101      	movs	r1, #1
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 ffd5 	bl	8007178 <RCCEx_PLL2_Config>
 80061ce:	4603      	mov	r3, r0
 80061d0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80061d2:	e012      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3324      	adds	r3, #36	; 0x24
 80061d8:	2101      	movs	r1, #1
 80061da:	4618      	mov	r0, r3
 80061dc:	f001 f87e 	bl	80072dc <RCCEx_PLL3_Config>
 80061e0:	4603      	mov	r3, r0
 80061e2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80061e4:	e009      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	75fb      	strb	r3, [r7, #23]
      break;
 80061ea:	e006      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80061ec:	bf00      	nop
 80061ee:	e004      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80061f0:	bf00      	nop
 80061f2:	e002      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80061f4:	bf00      	nop
 80061f6:	e000      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80061f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061fa:	7dfb      	ldrb	r3, [r7, #23]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d109      	bne.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006200:	4b2d      	ldr	r3, [pc, #180]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006204:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800620c:	492a      	ldr	r1, [pc, #168]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800620e:	4313      	orrs	r3, r2
 8006210:	650b      	str	r3, [r1, #80]	; 0x50
 8006212:	e001      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006214:	7dfb      	ldrb	r3, [r7, #23]
 8006216:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d04d      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800622a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800622e:	d02e      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006234:	d828      	bhi.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800623a:	d02a      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800623c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006240:	d822      	bhi.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006242:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006246:	d026      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006248:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800624c:	d81c      	bhi.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800624e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006252:	d010      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006258:	d816      	bhi.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01d      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800625e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006262:	d111      	bne.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3304      	adds	r3, #4
 8006268:	2101      	movs	r1, #1
 800626a:	4618      	mov	r0, r3
 800626c:	f000 ff84 	bl	8007178 <RCCEx_PLL2_Config>
 8006270:	4603      	mov	r3, r0
 8006272:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006274:	e012      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3324      	adds	r3, #36	; 0x24
 800627a:	2101      	movs	r1, #1
 800627c:	4618      	mov	r0, r3
 800627e:	f001 f82d 	bl	80072dc <RCCEx_PLL3_Config>
 8006282:	4603      	mov	r3, r0
 8006284:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006286:	e009      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	75fb      	strb	r3, [r7, #23]
      break;
 800628c:	e006      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800628e:	bf00      	nop
 8006290:	e004      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006292:	bf00      	nop
 8006294:	e002      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006296:	bf00      	nop
 8006298:	e000      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800629a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800629c:	7dfb      	ldrb	r3, [r7, #23]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10c      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80062a2:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80062a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80062b0:	4901      	ldr	r1, [pc, #4]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	658b      	str	r3, [r1, #88]	; 0x58
 80062b6:	e003      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80062b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062bc:	7dfb      	ldrb	r3, [r7, #23]
 80062be:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d02f      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062d4:	d00e      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80062d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062da:	d814      	bhi.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d015      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80062e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062e4:	d10f      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062e6:	4baf      	ldr	r3, [pc, #700]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ea:	4aae      	ldr	r2, [pc, #696]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80062f2:	e00c      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3304      	adds	r3, #4
 80062f8:	2101      	movs	r1, #1
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 ff3c 	bl	8007178 <RCCEx_PLL2_Config>
 8006300:	4603      	mov	r3, r0
 8006302:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006304:	e003      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	75fb      	strb	r3, [r7, #23]
      break;
 800630a:	e000      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800630c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800630e:	7dfb      	ldrb	r3, [r7, #23]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d109      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006314:	4ba3      	ldr	r3, [pc, #652]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006318:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006320:	49a0      	ldr	r1, [pc, #640]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006322:	4313      	orrs	r3, r2
 8006324:	650b      	str	r3, [r1, #80]	; 0x50
 8006326:	e001      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006328:	7dfb      	ldrb	r3, [r7, #23]
 800632a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d032      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633c:	2b03      	cmp	r3, #3
 800633e:	d81b      	bhi.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006340:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006346:	bf00      	nop
 8006348:	0800637f 	.word	0x0800637f
 800634c:	08006359 	.word	0x08006359
 8006350:	08006367 	.word	0x08006367
 8006354:	0800637f 	.word	0x0800637f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006358:	4b92      	ldr	r3, [pc, #584]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	4a91      	ldr	r2, [pc, #580]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800635e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006362:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006364:	e00c      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	3304      	adds	r3, #4
 800636a:	2102      	movs	r1, #2
 800636c:	4618      	mov	r0, r3
 800636e:	f000 ff03 	bl	8007178 <RCCEx_PLL2_Config>
 8006372:	4603      	mov	r3, r0
 8006374:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006376:	e003      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	75fb      	strb	r3, [r7, #23]
      break;
 800637c:	e000      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800637e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d109      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006386:	4b87      	ldr	r3, [pc, #540]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800638a:	f023 0203 	bic.w	r2, r3, #3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006392:	4984      	ldr	r1, [pc, #528]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006394:	4313      	orrs	r3, r2
 8006396:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006398:	e001      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800639a:	7dfb      	ldrb	r3, [r7, #23]
 800639c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 8086 	beq.w	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063ac:	4b7e      	ldr	r3, [pc, #504]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a7d      	ldr	r2, [pc, #500]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80063b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063b8:	f7fb f90a 	bl	80015d0 <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063be:	e009      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063c0:	f7fb f906 	bl	80015d0 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b64      	cmp	r3, #100	; 0x64
 80063cc:	d902      	bls.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	75fb      	strb	r3, [r7, #23]
        break;
 80063d2:	e005      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063d4:	4b74      	ldr	r3, [pc, #464]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0ef      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80063e0:	7dfb      	ldrb	r3, [r7, #23]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d166      	bne.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80063e6:	4b6f      	ldr	r3, [pc, #444]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80063e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80063f0:	4053      	eors	r3, r2
 80063f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d013      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063fa:	4b6a      	ldr	r3, [pc, #424]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80063fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006402:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006404:	4b67      	ldr	r3, [pc, #412]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006408:	4a66      	ldr	r2, [pc, #408]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800640a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800640e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006410:	4b64      	ldr	r3, [pc, #400]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006414:	4a63      	ldr	r2, [pc, #396]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800641a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800641c:	4a61      	ldr	r2, [pc, #388]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800642c:	d115      	bne.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642e:	f7fb f8cf 	bl	80015d0 <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006434:	e00b      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006436:	f7fb f8cb 	bl	80015d0 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	f241 3288 	movw	r2, #5000	; 0x1388
 8006444:	4293      	cmp	r3, r2
 8006446:	d902      	bls.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	75fb      	strb	r3, [r7, #23]
            break;
 800644c:	e005      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800644e:	4b55      	ldr	r3, [pc, #340]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0ed      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800645a:	7dfb      	ldrb	r3, [r7, #23]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d126      	bne.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800646a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800646e:	d10d      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006470:	4b4c      	ldr	r3, [pc, #304]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800647e:	0919      	lsrs	r1, r3, #4
 8006480:	4b4a      	ldr	r3, [pc, #296]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006482:	400b      	ands	r3, r1
 8006484:	4947      	ldr	r1, [pc, #284]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006486:	4313      	orrs	r3, r2
 8006488:	610b      	str	r3, [r1, #16]
 800648a:	e005      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800648c:	4b45      	ldr	r3, [pc, #276]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	4a44      	ldr	r2, [pc, #272]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006492:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006496:	6113      	str	r3, [r2, #16]
 8006498:	4b42      	ldr	r3, [pc, #264]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800649a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80064a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064a6:	493f      	ldr	r1, [pc, #252]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	670b      	str	r3, [r1, #112]	; 0x70
 80064ac:	e004      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
 80064b0:	75bb      	strb	r3, [r7, #22]
 80064b2:	e001      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b4:	7dfb      	ldrb	r3, [r7, #23]
 80064b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 8085 	beq.w	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ca:	2b28      	cmp	r3, #40	; 0x28
 80064cc:	d866      	bhi.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80064ce:	a201      	add	r2, pc, #4	; (adr r2, 80064d4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80064d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d4:	080065b1 	.word	0x080065b1
 80064d8:	0800659d 	.word	0x0800659d
 80064dc:	0800659d 	.word	0x0800659d
 80064e0:	0800659d 	.word	0x0800659d
 80064e4:	0800659d 	.word	0x0800659d
 80064e8:	0800659d 	.word	0x0800659d
 80064ec:	0800659d 	.word	0x0800659d
 80064f0:	0800659d 	.word	0x0800659d
 80064f4:	08006579 	.word	0x08006579
 80064f8:	0800659d 	.word	0x0800659d
 80064fc:	0800659d 	.word	0x0800659d
 8006500:	0800659d 	.word	0x0800659d
 8006504:	0800659d 	.word	0x0800659d
 8006508:	0800659d 	.word	0x0800659d
 800650c:	0800659d 	.word	0x0800659d
 8006510:	0800659d 	.word	0x0800659d
 8006514:	0800658b 	.word	0x0800658b
 8006518:	0800659d 	.word	0x0800659d
 800651c:	0800659d 	.word	0x0800659d
 8006520:	0800659d 	.word	0x0800659d
 8006524:	0800659d 	.word	0x0800659d
 8006528:	0800659d 	.word	0x0800659d
 800652c:	0800659d 	.word	0x0800659d
 8006530:	0800659d 	.word	0x0800659d
 8006534:	080065b1 	.word	0x080065b1
 8006538:	0800659d 	.word	0x0800659d
 800653c:	0800659d 	.word	0x0800659d
 8006540:	0800659d 	.word	0x0800659d
 8006544:	0800659d 	.word	0x0800659d
 8006548:	0800659d 	.word	0x0800659d
 800654c:	0800659d 	.word	0x0800659d
 8006550:	0800659d 	.word	0x0800659d
 8006554:	080065b1 	.word	0x080065b1
 8006558:	0800659d 	.word	0x0800659d
 800655c:	0800659d 	.word	0x0800659d
 8006560:	0800659d 	.word	0x0800659d
 8006564:	0800659d 	.word	0x0800659d
 8006568:	0800659d 	.word	0x0800659d
 800656c:	0800659d 	.word	0x0800659d
 8006570:	0800659d 	.word	0x0800659d
 8006574:	080065b1 	.word	0x080065b1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	3304      	adds	r3, #4
 800657c:	2101      	movs	r1, #1
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fdfa 	bl	8007178 <RCCEx_PLL2_Config>
 8006584:	4603      	mov	r3, r0
 8006586:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006588:	e013      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	3324      	adds	r3, #36	; 0x24
 800658e:	2101      	movs	r1, #1
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fea3 	bl	80072dc <RCCEx_PLL3_Config>
 8006596:	4603      	mov	r3, r0
 8006598:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800659a:	e00a      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	75fb      	strb	r3, [r7, #23]
      break;
 80065a0:	e007      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80065a2:	bf00      	nop
 80065a4:	58024400 	.word	0x58024400
 80065a8:	58024800 	.word	0x58024800
 80065ac:	00ffffcf 	.word	0x00ffffcf
      break;
 80065b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d109      	bne.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80065b8:	4b96      	ldr	r3, [pc, #600]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80065ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065bc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065c4:	4993      	ldr	r1, [pc, #588]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	654b      	str	r3, [r1, #84]	; 0x54
 80065ca:	e001      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065cc:	7dfb      	ldrb	r3, [r7, #23]
 80065ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d038      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065e0:	2b05      	cmp	r3, #5
 80065e2:	d821      	bhi.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80065e4:	a201      	add	r2, pc, #4	; (adr r2, 80065ec <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80065e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ea:	bf00      	nop
 80065ec:	0800662f 	.word	0x0800662f
 80065f0:	08006605 	.word	0x08006605
 80065f4:	08006617 	.word	0x08006617
 80065f8:	0800662f 	.word	0x0800662f
 80065fc:	0800662f 	.word	0x0800662f
 8006600:	0800662f 	.word	0x0800662f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3304      	adds	r3, #4
 8006608:	2101      	movs	r1, #1
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fdb4 	bl	8007178 <RCCEx_PLL2_Config>
 8006610:	4603      	mov	r3, r0
 8006612:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006614:	e00c      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	3324      	adds	r3, #36	; 0x24
 800661a:	2101      	movs	r1, #1
 800661c:	4618      	mov	r0, r3
 800661e:	f000 fe5d 	bl	80072dc <RCCEx_PLL3_Config>
 8006622:	4603      	mov	r3, r0
 8006624:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006626:	e003      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	75fb      	strb	r3, [r7, #23]
      break;
 800662c:	e000      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800662e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006630:	7dfb      	ldrb	r3, [r7, #23]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d109      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006636:	4b77      	ldr	r3, [pc, #476]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800663a:	f023 0207 	bic.w	r2, r3, #7
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006642:	4974      	ldr	r1, [pc, #464]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006644:	4313      	orrs	r3, r2
 8006646:	654b      	str	r3, [r1, #84]	; 0x54
 8006648:	e001      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664a:	7dfb      	ldrb	r3, [r7, #23]
 800664c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b00      	cmp	r3, #0
 8006658:	d03a      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006660:	2b05      	cmp	r3, #5
 8006662:	d821      	bhi.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006664:	a201      	add	r2, pc, #4	; (adr r2, 800666c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666a:	bf00      	nop
 800666c:	080066af 	.word	0x080066af
 8006670:	08006685 	.word	0x08006685
 8006674:	08006697 	.word	0x08006697
 8006678:	080066af 	.word	0x080066af
 800667c:	080066af 	.word	0x080066af
 8006680:	080066af 	.word	0x080066af
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	3304      	adds	r3, #4
 8006688:	2101      	movs	r1, #1
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fd74 	bl	8007178 <RCCEx_PLL2_Config>
 8006690:	4603      	mov	r3, r0
 8006692:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006694:	e00c      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3324      	adds	r3, #36	; 0x24
 800669a:	2101      	movs	r1, #1
 800669c:	4618      	mov	r0, r3
 800669e:	f000 fe1d 	bl	80072dc <RCCEx_PLL3_Config>
 80066a2:	4603      	mov	r3, r0
 80066a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80066a6:	e003      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	75fb      	strb	r3, [r7, #23]
      break;
 80066ac:	e000      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80066ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066b0:	7dfb      	ldrb	r3, [r7, #23]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10a      	bne.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066b6:	4b57      	ldr	r3, [pc, #348]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80066b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ba:	f023 0207 	bic.w	r2, r3, #7
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c4:	4953      	ldr	r1, [pc, #332]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	658b      	str	r3, [r1, #88]	; 0x58
 80066ca:	e001      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066cc:	7dfb      	ldrb	r3, [r7, #23]
 80066ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d04b      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066e6:	d02e      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80066e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066ec:	d828      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80066ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f2:	d02a      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80066f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f8:	d822      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80066fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066fe:	d026      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006700:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006704:	d81c      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800670a:	d010      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800670c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006710:	d816      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006712:	2b00      	cmp	r3, #0
 8006714:	d01d      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006716:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800671a:	d111      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3304      	adds	r3, #4
 8006720:	2100      	movs	r1, #0
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fd28 	bl	8007178 <RCCEx_PLL2_Config>
 8006728:	4603      	mov	r3, r0
 800672a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800672c:	e012      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3324      	adds	r3, #36	; 0x24
 8006732:	2102      	movs	r1, #2
 8006734:	4618      	mov	r0, r3
 8006736:	f000 fdd1 	bl	80072dc <RCCEx_PLL3_Config>
 800673a:	4603      	mov	r3, r0
 800673c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800673e:	e009      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	75fb      	strb	r3, [r7, #23]
      break;
 8006744:	e006      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006746:	bf00      	nop
 8006748:	e004      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800674a:	bf00      	nop
 800674c:	e002      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800674e:	bf00      	nop
 8006750:	e000      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006752:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006754:	7dfb      	ldrb	r3, [r7, #23]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10a      	bne.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800675a:	4b2e      	ldr	r3, [pc, #184]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800675c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006768:	492a      	ldr	r1, [pc, #168]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800676a:	4313      	orrs	r3, r2
 800676c:	654b      	str	r3, [r1, #84]	; 0x54
 800676e:	e001      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006770:	7dfb      	ldrb	r3, [r7, #23]
 8006772:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677c:	2b00      	cmp	r3, #0
 800677e:	d04d      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006786:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800678a:	d02e      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800678c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006790:	d828      	bhi.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006796:	d02a      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800679c:	d822      	bhi.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800679e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067a2:	d026      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80067a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067a8:	d81c      	bhi.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80067aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ae:	d010      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80067b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067b4:	d816      	bhi.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d01d      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80067ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067be:	d111      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3304      	adds	r3, #4
 80067c4:	2100      	movs	r1, #0
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fcd6 	bl	8007178 <RCCEx_PLL2_Config>
 80067cc:	4603      	mov	r3, r0
 80067ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80067d0:	e012      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3324      	adds	r3, #36	; 0x24
 80067d6:	2102      	movs	r1, #2
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 fd7f 	bl	80072dc <RCCEx_PLL3_Config>
 80067de:	4603      	mov	r3, r0
 80067e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80067e2:	e009      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	75fb      	strb	r3, [r7, #23]
      break;
 80067e8:	e006      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80067ea:	bf00      	nop
 80067ec:	e004      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80067ee:	bf00      	nop
 80067f0:	e002      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80067f2:	bf00      	nop
 80067f4:	e000      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80067f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067f8:	7dfb      	ldrb	r3, [r7, #23]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10c      	bne.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067fe:	4b05      	ldr	r3, [pc, #20]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006802:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800680c:	4901      	ldr	r1, [pc, #4]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800680e:	4313      	orrs	r3, r2
 8006810:	658b      	str	r3, [r1, #88]	; 0x58
 8006812:	e003      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006814:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006818:	7dfb      	ldrb	r3, [r7, #23]
 800681a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006824:	2b00      	cmp	r3, #0
 8006826:	d04b      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800682e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006832:	d02e      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006834:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006838:	d828      	bhi.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800683a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800683e:	d02a      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006844:	d822      	bhi.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006846:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800684a:	d026      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800684c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006850:	d81c      	bhi.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006856:	d010      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800685c:	d816      	bhi.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800685e:	2b00      	cmp	r3, #0
 8006860:	d01d      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006866:	d111      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3304      	adds	r3, #4
 800686c:	2100      	movs	r1, #0
 800686e:	4618      	mov	r0, r3
 8006870:	f000 fc82 	bl	8007178 <RCCEx_PLL2_Config>
 8006874:	4603      	mov	r3, r0
 8006876:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006878:	e012      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	3324      	adds	r3, #36	; 0x24
 800687e:	2102      	movs	r1, #2
 8006880:	4618      	mov	r0, r3
 8006882:	f000 fd2b 	bl	80072dc <RCCEx_PLL3_Config>
 8006886:	4603      	mov	r3, r0
 8006888:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800688a:	e009      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	75fb      	strb	r3, [r7, #23]
      break;
 8006890:	e006      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006892:	bf00      	nop
 8006894:	e004      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006896:	bf00      	nop
 8006898:	e002      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800689a:	bf00      	nop
 800689c:	e000      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800689e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10a      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80068a6:	4b9d      	ldr	r3, [pc, #628]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068b4:	4999      	ldr	r1, [pc, #612]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	658b      	str	r3, [r1, #88]	; 0x58
 80068ba:	e001      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068bc:	7dfb      	ldrb	r3, [r7, #23]
 80068be:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0308 	and.w	r3, r3, #8
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01a      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d6:	d10a      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3324      	adds	r3, #36	; 0x24
 80068dc:	2102      	movs	r1, #2
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fcfc 	bl	80072dc <RCCEx_PLL3_Config>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80068ee:	4b8b      	ldr	r3, [pc, #556]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068fc:	4987      	ldr	r1, [pc, #540]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0310 	and.w	r3, r3, #16
 800690a:	2b00      	cmp	r3, #0
 800690c:	d01a      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006918:	d10a      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3324      	adds	r3, #36	; 0x24
 800691e:	2102      	movs	r1, #2
 8006920:	4618      	mov	r0, r3
 8006922:	f000 fcdb 	bl	80072dc <RCCEx_PLL3_Config>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006930:	4b7a      	ldr	r3, [pc, #488]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006934:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800693e:	4977      	ldr	r1, [pc, #476]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006940:	4313      	orrs	r3, r2
 8006942:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d034      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006956:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800695a:	d01d      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800695c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006960:	d817      	bhi.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800696a:	d009      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800696c:	e011      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	3304      	adds	r3, #4
 8006972:	2100      	movs	r1, #0
 8006974:	4618      	mov	r0, r3
 8006976:	f000 fbff 	bl	8007178 <RCCEx_PLL2_Config>
 800697a:	4603      	mov	r3, r0
 800697c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800697e:	e00c      	b.n	800699a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3324      	adds	r3, #36	; 0x24
 8006984:	2102      	movs	r1, #2
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fca8 	bl	80072dc <RCCEx_PLL3_Config>
 800698c:	4603      	mov	r3, r0
 800698e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006990:	e003      	b.n	800699a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	75fb      	strb	r3, [r7, #23]
      break;
 8006996:	e000      	b.n	800699a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006998:	bf00      	nop
    }

    if(ret == HAL_OK)
 800699a:	7dfb      	ldrb	r3, [r7, #23]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10a      	bne.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069a0:	4b5e      	ldr	r3, [pc, #376]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80069a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80069ae:	495b      	ldr	r1, [pc, #364]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	658b      	str	r3, [r1, #88]	; 0x58
 80069b4:	e001      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
 80069b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d033      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069d0:	d01c      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80069d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069d6:	d816      	bhi.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80069d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069dc:	d003      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80069de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069e2:	d007      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80069e4:	e00f      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069e6:	4b4d      	ldr	r3, [pc, #308]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80069e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ea:	4a4c      	ldr	r2, [pc, #304]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80069ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80069f2:	e00c      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3324      	adds	r3, #36	; 0x24
 80069f8:	2101      	movs	r1, #1
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fc6e 	bl	80072dc <RCCEx_PLL3_Config>
 8006a00:	4603      	mov	r3, r0
 8006a02:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006a04:	e003      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	75fb      	strb	r3, [r7, #23]
      break;
 8006a0a:	e000      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a0e:	7dfb      	ldrb	r3, [r7, #23]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a14:	4b41      	ldr	r3, [pc, #260]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a22:	493e      	ldr	r1, [pc, #248]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	654b      	str	r3, [r1, #84]	; 0x54
 8006a28:	e001      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
 8006a2c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d029      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a46:	d007      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006a48:	e00f      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a4a:	4b34      	ldr	r3, [pc, #208]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4e:	4a33      	ldr	r2, [pc, #204]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006a56:	e00b      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	2102      	movs	r1, #2
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fb8a 	bl	8007178 <RCCEx_PLL2_Config>
 8006a64:	4603      	mov	r3, r0
 8006a66:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006a68:	e002      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d109      	bne.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a76:	4b29      	ldr	r3, [pc, #164]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a82:	4926      	ldr	r1, [pc, #152]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006a88:	e001      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a8a:	7dfb      	ldrb	r3, [r7, #23]
 8006a8c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	3324      	adds	r3, #36	; 0x24
 8006a9e:	2102      	movs	r1, #2
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 fc1b 	bl	80072dc <RCCEx_PLL3_Config>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d033      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ac0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ac4:	d017      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aca:	d811      	bhi.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ad0:	d013      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ad6:	d80b      	bhi.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d010      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae0:	d106      	bne.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ae2:	4b0e      	ldr	r3, [pc, #56]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae6:	4a0d      	ldr	r2, [pc, #52]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006aee:	e007      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	75fb      	strb	r3, [r7, #23]
      break;
 8006af4:	e004      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006af6:	bf00      	nop
 8006af8:	e002      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006afa:	bf00      	nop
 8006afc:	e000      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10c      	bne.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b06:	4b05      	ldr	r3, [pc, #20]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b12:	4902      	ldr	r1, [pc, #8]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	654b      	str	r3, [r1, #84]	; 0x54
 8006b18:	e004      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006b1a:	bf00      	nop
 8006b1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
 8006b22:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d008      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b30:	4b31      	ldr	r3, [pc, #196]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3c:	492e      	ldr	r1, [pc, #184]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d009      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006b4e:	4b2a      	ldr	r3, [pc, #168]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006b5c:	4926      	ldr	r1, [pc, #152]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d008      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b6e:	4b22      	ldr	r3, [pc, #136]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b72:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b7a:	491f      	ldr	r1, [pc, #124]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00d      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b8c:	4b1a      	ldr	r3, [pc, #104]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	4a19      	ldr	r2, [pc, #100]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006b92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b96:	6113      	str	r3, [r2, #16]
 8006b98:	4b17      	ldr	r3, [pc, #92]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006b9a:	691a      	ldr	r2, [r3, #16]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006ba2:	4915      	ldr	r1, [pc, #84]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	da08      	bge.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006bb0:	4b11      	ldr	r3, [pc, #68]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bbc:	490e      	ldr	r1, [pc, #56]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d009      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006bce:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bdc:	4906      	ldr	r1, [pc, #24]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006be2:	7dbb      	ldrb	r3, [r7, #22]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	e000      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3718      	adds	r7, #24
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	58024400 	.word	0x58024400

08006bfc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006c00:	f7ff f85a 	bl	8005cb8 <HAL_RCC_GetHCLKFreq>
 8006c04:	4602      	mov	r2, r0
 8006c06:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	091b      	lsrs	r3, r3, #4
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	4904      	ldr	r1, [pc, #16]	; (8006c24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006c12:	5ccb      	ldrb	r3, [r1, r3]
 8006c14:	f003 031f 	and.w	r3, r3, #31
 8006c18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	58024400 	.word	0x58024400
 8006c24:	080095a4 	.word	0x080095a4

08006c28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b089      	sub	sp, #36	; 0x24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c30:	4ba1      	ldr	r3, [pc, #644]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	f003 0303 	and.w	r3, r3, #3
 8006c38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006c3a:	4b9f      	ldr	r3, [pc, #636]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3e:	0b1b      	lsrs	r3, r3, #12
 8006c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006c46:	4b9c      	ldr	r3, [pc, #624]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4a:	091b      	lsrs	r3, r3, #4
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006c52:	4b99      	ldr	r3, [pc, #612]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c56:	08db      	lsrs	r3, r3, #3
 8006c58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	fb02 f303 	mul.w	r3, r2, r3
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 8111 	beq.w	8006e98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	f000 8083 	beq.w	8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	f200 80a1 	bhi.w	8006dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d056      	beq.n	8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006c92:	e099      	b.n	8006dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c94:	4b88      	ldr	r3, [pc, #544]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0320 	and.w	r3, r3, #32
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d02d      	beq.n	8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ca0:	4b85      	ldr	r3, [pc, #532]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	08db      	lsrs	r3, r3, #3
 8006ca6:	f003 0303 	and.w	r3, r3, #3
 8006caa:	4a84      	ldr	r2, [pc, #528]	; (8006ebc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006cac:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	ee07 3a90 	vmov	s15, r3
 8006cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	ee07 3a90 	vmov	s15, r3
 8006cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cca:	4b7b      	ldr	r3, [pc, #492]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cde:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006cfa:	e087      	b.n	8006e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d0e:	4b6a      	ldr	r3, [pc, #424]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d22:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d3e:	e065      	b.n	8006e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d52:	4b59      	ldr	r3, [pc, #356]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d66:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d82:	e043      	b.n	8006e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006ecc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d96:	4b48      	ldr	r3, [pc, #288]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d9e:	ee07 3a90 	vmov	s15, r3
 8006da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006daa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dc6:	e021      	b.n	8006e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	ee07 3a90 	vmov	s15, r3
 8006dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dda:	4b37      	ldr	r3, [pc, #220]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de2:	ee07 3a90 	vmov	s15, r3
 8006de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dee:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006e0c:	4b2a      	ldr	r3, [pc, #168]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e10:	0a5b      	lsrs	r3, r3, #9
 8006e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e16:	ee07 3a90 	vmov	s15, r3
 8006e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e26:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e32:	ee17 2a90 	vmov	r2, s15
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006e3a:	4b1f      	ldr	r3, [pc, #124]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3e:	0c1b      	lsrs	r3, r3, #16
 8006e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e44:	ee07 3a90 	vmov	s15, r3
 8006e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e54:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e60:	ee17 2a90 	vmov	r2, s15
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006e68:	4b13      	ldr	r3, [pc, #76]	; (8006eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6c:	0e1b      	lsrs	r3, r3, #24
 8006e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e72:	ee07 3a90 	vmov	s15, r3
 8006e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e82:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e8e:	ee17 2a90 	vmov	r2, s15
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e96:	e008      	b.n	8006eaa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	609a      	str	r2, [r3, #8]
}
 8006eaa:	bf00      	nop
 8006eac:	3724      	adds	r7, #36	; 0x24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	58024400 	.word	0x58024400
 8006ebc:	03d09000 	.word	0x03d09000
 8006ec0:	46000000 	.word	0x46000000
 8006ec4:	4c742400 	.word	0x4c742400
 8006ec8:	4a742400 	.word	0x4a742400
 8006ecc:	4af42400 	.word	0x4af42400

08006ed0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b089      	sub	sp, #36	; 0x24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ed8:	4ba1      	ldr	r3, [pc, #644]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006edc:	f003 0303 	and.w	r3, r3, #3
 8006ee0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006ee2:	4b9f      	ldr	r3, [pc, #636]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee6:	0d1b      	lsrs	r3, r3, #20
 8006ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006eee:	4b9c      	ldr	r3, [pc, #624]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef2:	0a1b      	lsrs	r3, r3, #8
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006efa:	4b99      	ldr	r3, [pc, #612]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efe:	08db      	lsrs	r3, r3, #3
 8006f00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	fb02 f303 	mul.w	r3, r2, r3
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 8111 	beq.w	8007140 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	f000 8083 	beq.w	800702c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	f200 80a1 	bhi.w	8007070 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d056      	beq.n	8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006f3a:	e099      	b.n	8007070 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f3c:	4b88      	ldr	r3, [pc, #544]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0320 	and.w	r3, r3, #32
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d02d      	beq.n	8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f48:	4b85      	ldr	r3, [pc, #532]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	08db      	lsrs	r3, r3, #3
 8006f4e:	f003 0303 	and.w	r3, r3, #3
 8006f52:	4a84      	ldr	r2, [pc, #528]	; (8007164 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006f54:	fa22 f303 	lsr.w	r3, r2, r3
 8006f58:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	ee07 3a90 	vmov	s15, r3
 8006f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	ee07 3a90 	vmov	s15, r3
 8006f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f72:	4b7b      	ldr	r3, [pc, #492]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006fa2:	e087      	b.n	80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800716c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb6:	4b6a      	ldr	r3, [pc, #424]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fbe:	ee07 3a90 	vmov	s15, r3
 8006fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fe6:	e065      	b.n	80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffa:	4b59      	ldr	r3, [pc, #356]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700a:	ed97 6a03 	vldr	s12, [r7, #12]
 800700e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800701e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007026:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800702a:	e043      	b.n	80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007036:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007174 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800703a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800703e:	4b48      	ldr	r3, [pc, #288]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800704e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007052:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800705e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800706e:	e021      	b.n	80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	ee07 3a90 	vmov	s15, r3
 8007076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800707e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007082:	4b37      	ldr	r3, [pc, #220]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007092:	ed97 6a03 	vldr	s12, [r7, #12]
 8007096:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007168 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800709a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800709e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80070b4:	4b2a      	ldr	r3, [pc, #168]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	0a5b      	lsrs	r3, r3, #9
 80070ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80070d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070da:	ee17 2a90 	vmov	r2, s15
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80070e2:	4b1f      	ldr	r3, [pc, #124]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	0c1b      	lsrs	r3, r3, #16
 80070e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ec:	ee07 3a90 	vmov	s15, r3
 80070f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007108:	ee17 2a90 	vmov	r2, s15
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007110:	4b13      	ldr	r3, [pc, #76]	; (8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007114:	0e1b      	lsrs	r3, r3, #24
 8007116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800712a:	edd7 6a07 	vldr	s13, [r7, #28]
 800712e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007136:	ee17 2a90 	vmov	r2, s15
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800713e:	e008      	b.n	8007152 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	609a      	str	r2, [r3, #8]
}
 8007152:	bf00      	nop
 8007154:	3724      	adds	r7, #36	; 0x24
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	58024400 	.word	0x58024400
 8007164:	03d09000 	.word	0x03d09000
 8007168:	46000000 	.word	0x46000000
 800716c:	4c742400 	.word	0x4c742400
 8007170:	4a742400 	.word	0x4a742400
 8007174:	4af42400 	.word	0x4af42400

08007178 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007186:	4b53      	ldr	r3, [pc, #332]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 8007188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	2b03      	cmp	r3, #3
 8007190:	d101      	bne.n	8007196 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e099      	b.n	80072ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007196:	4b4f      	ldr	r3, [pc, #316]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a4e      	ldr	r2, [pc, #312]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 800719c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071a2:	f7fa fa15 	bl	80015d0 <HAL_GetTick>
 80071a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071a8:	e008      	b.n	80071bc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80071aa:	f7fa fa11 	bl	80015d0 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d901      	bls.n	80071bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e086      	b.n	80072ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071bc:	4b45      	ldr	r3, [pc, #276]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1f0      	bne.n	80071aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80071c8:	4b42      	ldr	r3, [pc, #264]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 80071ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	031b      	lsls	r3, r3, #12
 80071d6:	493f      	ldr	r1, [pc, #252]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	628b      	str	r3, [r1, #40]	; 0x28
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	3b01      	subs	r3, #1
 80071e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	025b      	lsls	r3, r3, #9
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	431a      	orrs	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	3b01      	subs	r3, #1
 80071f8:	041b      	lsls	r3, r3, #16
 80071fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80071fe:	431a      	orrs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	3b01      	subs	r3, #1
 8007206:	061b      	lsls	r3, r3, #24
 8007208:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800720c:	4931      	ldr	r1, [pc, #196]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 800720e:	4313      	orrs	r3, r2
 8007210:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007212:	4b30      	ldr	r3, [pc, #192]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 8007214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007216:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	492d      	ldr	r1, [pc, #180]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 8007220:	4313      	orrs	r3, r2
 8007222:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007224:	4b2b      	ldr	r3, [pc, #172]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 8007226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007228:	f023 0220 	bic.w	r2, r3, #32
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	4928      	ldr	r1, [pc, #160]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 8007232:	4313      	orrs	r3, r2
 8007234:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007236:	4b27      	ldr	r3, [pc, #156]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 8007238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723a:	4a26      	ldr	r2, [pc, #152]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 800723c:	f023 0310 	bic.w	r3, r3, #16
 8007240:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007242:	4b24      	ldr	r3, [pc, #144]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 8007244:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007246:	4b24      	ldr	r3, [pc, #144]	; (80072d8 <RCCEx_PLL2_Config+0x160>)
 8007248:	4013      	ands	r3, r2
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	69d2      	ldr	r2, [r2, #28]
 800724e:	00d2      	lsls	r2, r2, #3
 8007250:	4920      	ldr	r1, [pc, #128]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 8007252:	4313      	orrs	r3, r2
 8007254:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007256:	4b1f      	ldr	r3, [pc, #124]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 8007258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725a:	4a1e      	ldr	r2, [pc, #120]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 800725c:	f043 0310 	orr.w	r3, r3, #16
 8007260:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d106      	bne.n	8007276 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007268:	4b1a      	ldr	r3, [pc, #104]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 800726a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726c:	4a19      	ldr	r2, [pc, #100]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 800726e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007272:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007274:	e00f      	b.n	8007296 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d106      	bne.n	800728a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800727c:	4b15      	ldr	r3, [pc, #84]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 800727e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007280:	4a14      	ldr	r2, [pc, #80]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 8007282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007286:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007288:	e005      	b.n	8007296 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800728a:	4b12      	ldr	r3, [pc, #72]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 800728c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728e:	4a11      	ldr	r2, [pc, #68]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 8007290:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007294:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007296:	4b0f      	ldr	r3, [pc, #60]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a0e      	ldr	r2, [pc, #56]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 800729c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80072a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072a2:	f7fa f995 	bl	80015d0 <HAL_GetTick>
 80072a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072a8:	e008      	b.n	80072bc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80072aa:	f7fa f991 	bl	80015d0 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d901      	bls.n	80072bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e006      	b.n	80072ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072bc:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <RCCEx_PLL2_Config+0x15c>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0f0      	beq.n	80072aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	58024400 	.word	0x58024400
 80072d8:	ffff0007 	.word	0xffff0007

080072dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072ea:	4b53      	ldr	r3, [pc, #332]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 80072ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d101      	bne.n	80072fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e099      	b.n	800742e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80072fa:	4b4f      	ldr	r3, [pc, #316]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a4e      	ldr	r2, [pc, #312]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 8007300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007306:	f7fa f963 	bl	80015d0 <HAL_GetTick>
 800730a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800730c:	e008      	b.n	8007320 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800730e:	f7fa f95f 	bl	80015d0 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	2b02      	cmp	r3, #2
 800731a:	d901      	bls.n	8007320 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e086      	b.n	800742e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007320:	4b45      	ldr	r3, [pc, #276]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1f0      	bne.n	800730e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800732c:	4b42      	ldr	r3, [pc, #264]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 800732e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007330:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	051b      	lsls	r3, r3, #20
 800733a:	493f      	ldr	r1, [pc, #252]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 800733c:	4313      	orrs	r3, r2
 800733e:	628b      	str	r3, [r1, #40]	; 0x28
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	3b01      	subs	r3, #1
 8007346:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	3b01      	subs	r3, #1
 8007350:	025b      	lsls	r3, r3, #9
 8007352:	b29b      	uxth	r3, r3
 8007354:	431a      	orrs	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	3b01      	subs	r3, #1
 800735c:	041b      	lsls	r3, r3, #16
 800735e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	3b01      	subs	r3, #1
 800736a:	061b      	lsls	r3, r3, #24
 800736c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007370:	4931      	ldr	r1, [pc, #196]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 8007372:	4313      	orrs	r3, r2
 8007374:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007376:	4b30      	ldr	r3, [pc, #192]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 8007378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	492d      	ldr	r1, [pc, #180]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 8007384:	4313      	orrs	r3, r2
 8007386:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007388:	4b2b      	ldr	r3, [pc, #172]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 800738a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	4928      	ldr	r1, [pc, #160]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 8007396:	4313      	orrs	r3, r2
 8007398:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800739a:	4b27      	ldr	r3, [pc, #156]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 800739c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739e:	4a26      	ldr	r2, [pc, #152]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 80073a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80073a6:	4b24      	ldr	r3, [pc, #144]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 80073a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073aa:	4b24      	ldr	r3, [pc, #144]	; (800743c <RCCEx_PLL3_Config+0x160>)
 80073ac:	4013      	ands	r3, r2
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	69d2      	ldr	r2, [r2, #28]
 80073b2:	00d2      	lsls	r2, r2, #3
 80073b4:	4920      	ldr	r1, [pc, #128]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80073ba:	4b1f      	ldr	r3, [pc, #124]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 80073bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073be:	4a1e      	ldr	r2, [pc, #120]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 80073c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d106      	bne.n	80073da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80073cc:	4b1a      	ldr	r3, [pc, #104]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 80073ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d0:	4a19      	ldr	r2, [pc, #100]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 80073d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80073d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80073d8:	e00f      	b.n	80073fa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d106      	bne.n	80073ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80073e0:	4b15      	ldr	r3, [pc, #84]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	4a14      	ldr	r2, [pc, #80]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 80073e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80073ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80073ec:	e005      	b.n	80073fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80073ee:	4b12      	ldr	r3, [pc, #72]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 80073f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f2:	4a11      	ldr	r2, [pc, #68]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 80073f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80073fa:	4b0f      	ldr	r3, [pc, #60]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a0e      	ldr	r2, [pc, #56]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 8007400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007406:	f7fa f8e3 	bl	80015d0 <HAL_GetTick>
 800740a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800740c:	e008      	b.n	8007420 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800740e:	f7fa f8df 	bl	80015d0 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	2b02      	cmp	r3, #2
 800741a:	d901      	bls.n	8007420 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e006      	b.n	800742e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007420:	4b05      	ldr	r3, [pc, #20]	; (8007438 <RCCEx_PLL3_Config+0x15c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d0f0      	beq.n	800740e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800742c:	7bfb      	ldrb	r3, [r7, #15]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	58024400 	.word	0x58024400
 800743c:	ffff0007 	.word	0xffff0007

08007440 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8007448:	2300      	movs	r3, #0
 800744a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e0eb      	b.n	800762e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a75      	ldr	r2, [pc, #468]	; (8007638 <HAL_SPI_Init+0x1f8>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d00f      	beq.n	8007486 <HAL_SPI_Init+0x46>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a74      	ldr	r2, [pc, #464]	; (800763c <HAL_SPI_Init+0x1fc>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d00a      	beq.n	8007486 <HAL_SPI_Init+0x46>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a72      	ldr	r2, [pc, #456]	; (8007640 <HAL_SPI_Init+0x200>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d005      	beq.n	8007486 <HAL_SPI_Init+0x46>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	2b0f      	cmp	r3, #15
 8007480:	d901      	bls.n	8007486 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e0d3      	b.n	800762e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fd42 	bl	8007f10 <SPI_GetPacketSize>
 800748c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a69      	ldr	r2, [pc, #420]	; (8007638 <HAL_SPI_Init+0x1f8>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00c      	beq.n	80074b2 <HAL_SPI_Init+0x72>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a67      	ldr	r2, [pc, #412]	; (800763c <HAL_SPI_Init+0x1fc>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d007      	beq.n	80074b2 <HAL_SPI_Init+0x72>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a66      	ldr	r2, [pc, #408]	; (8007640 <HAL_SPI_Init+0x200>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d002      	beq.n	80074b2 <HAL_SPI_Init+0x72>
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2b08      	cmp	r3, #8
 80074b0:	d811      	bhi.n	80074d6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80074b6:	4a60      	ldr	r2, [pc, #384]	; (8007638 <HAL_SPI_Init+0x1f8>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d009      	beq.n	80074d0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a5e      	ldr	r2, [pc, #376]	; (800763c <HAL_SPI_Init+0x1fc>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d004      	beq.n	80074d0 <HAL_SPI_Init+0x90>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a5d      	ldr	r2, [pc, #372]	; (8007640 <HAL_SPI_Init+0x200>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d104      	bne.n	80074da <HAL_SPI_Init+0x9a>
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2b10      	cmp	r3, #16
 80074d4:	d901      	bls.n	80074da <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e0a9      	b.n	800762e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d106      	bne.n	80074f4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7f9 fdcc 	bl	800108c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0201 	bic.w	r2, r2, #1
 800750a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007514:	d119      	bne.n	800754a <HAL_SPI_Init+0x10a>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800751e:	d103      	bne.n	8007528 <HAL_SPI_Init+0xe8>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007524:	2b00      	cmp	r3, #0
 8007526:	d008      	beq.n	800753a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10c      	bne.n	800754a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007534:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007538:	d107      	bne.n	800754a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007548:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	69da      	ldr	r2, [r3, #28]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007552:	431a      	orrs	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	431a      	orrs	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800755c:	ea42 0103 	orr.w	r1, r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	431a      	orrs	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	431a      	orrs	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	431a      	orrs	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	431a      	orrs	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	431a      	orrs	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	431a      	orrs	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	431a      	orrs	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075aa:	ea42 0103 	orr.w	r1, r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d113      	bne.n	80075ea <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075d4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075e8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0201 	bic.w	r2, r2, #1
 80075f8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	40013000 	.word	0x40013000
 800763c:	40003800 	.word	0x40003800
 8007640:	40003c00 	.word	0x40003c00

08007644 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	4613      	mov	r3, r2
 8007650:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800765c:	2b01      	cmp	r3, #1
 800765e:	d101      	bne.n	8007664 <HAL_SPI_Transmit_DMA+0x20>
 8007660:	2302      	movs	r3, #2
 8007662:	e128      	b.n	80078b6 <HAL_SPI_Transmit_DMA+0x272>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b01      	cmp	r3, #1
 8007676:	d007      	beq.n	8007688 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8007678:	2302      	movs	r3, #2
 800767a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007684:	7dfb      	ldrb	r3, [r7, #23]
 8007686:	e116      	b.n	80078b6 <HAL_SPI_Transmit_DMA+0x272>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d002      	beq.n	8007694 <HAL_SPI_Transmit_DMA+0x50>
 800768e:	88fb      	ldrh	r3, [r7, #6]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d107      	bne.n	80076a4 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80076a0:	7dfb      	ldrb	r3, [r7, #23]
 80076a2:	e108      	b.n	80078b6 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2203      	movs	r2, #3
 80076a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	88fa      	ldrh	r2, [r7, #6]
 80076be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	88fa      	ldrh	r2, [r7, #6]
 80076c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80076f4:	d107      	bne.n	8007706 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007704:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	2b0f      	cmp	r3, #15
 800770c:	d905      	bls.n	800771a <HAL_SPI_Transmit_DMA+0xd6>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007718:	d10f      	bne.n	800773a <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800771e:	2b07      	cmp	r3, #7
 8007720:	d913      	bls.n	800774a <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800772c:	d00d      	beq.n	800774a <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007732:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007738:	d007      	beq.n	800774a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007746:	7dfb      	ldrb	r3, [r7, #23]
 8007748:	e0b5      	b.n	80078b6 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	2b07      	cmp	r3, #7
 8007750:	d820      	bhi.n	8007794 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800775c:	d109      	bne.n	8007772 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007764:	b29b      	uxth	r3, r3
 8007766:	3301      	adds	r3, #1
 8007768:	105b      	asrs	r3, r3, #1
 800776a:	b29a      	uxth	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800777c:	d11e      	bne.n	80077bc <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007784:	b29b      	uxth	r3, r3
 8007786:	3303      	adds	r3, #3
 8007788:	109b      	asrs	r3, r3, #2
 800778a:	b29a      	uxth	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007792:	e013      	b.n	80077bc <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	2b0f      	cmp	r3, #15
 800779a:	d80f      	bhi.n	80077bc <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077a6:	d109      	bne.n	80077bc <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	3301      	adds	r3, #1
 80077b2:	105b      	asrs	r3, r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077c0:	4a3f      	ldr	r2, [pc, #252]	; (80078c0 <HAL_SPI_Transmit_DMA+0x27c>)
 80077c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077c8:	4a3e      	ldr	r2, [pc, #248]	; (80078c4 <HAL_SPI_Transmit_DMA+0x280>)
 80077ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077d0:	4a3d      	ldr	r2, [pc, #244]	; (80078c8 <HAL_SPI_Transmit_DMA+0x284>)
 80077d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077d8:	2200      	movs	r2, #0
 80077da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	689a      	ldr	r2, [r3, #8]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077ea:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077f4:	4619      	mov	r1, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3320      	adds	r3, #32
 80077fc:	461a      	mov	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007804:	b29b      	uxth	r3, r3
 8007806:	f7fa fb9f 	bl	8001f48 <HAL_DMA_Start_IT>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00f      	beq.n	8007830 <HAL_SPI_Transmit_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007816:	f043 0210 	orr.w	r2, r3, #16
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 800782c:	7dfb      	ldrb	r3, [r7, #23]
 800782e:	e042      	b.n	80078b6 <HAL_SPI_Transmit_DMA+0x272>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800783a:	d108      	bne.n	800784e <HAL_SPI_Transmit_DMA+0x20a>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6859      	ldr	r1, [r3, #4]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	4b21      	ldr	r3, [pc, #132]	; (80078cc <HAL_SPI_Transmit_DMA+0x288>)
 8007848:	400b      	ands	r3, r1
 800784a:	6053      	str	r3, [r2, #4]
 800784c:	e009      	b.n	8007862 <HAL_SPI_Transmit_DMA+0x21e>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	4b1d      	ldr	r3, [pc, #116]	; (80078cc <HAL_SPI_Transmit_DMA+0x288>)
 8007856:	4013      	ands	r3, r2
 8007858:	88f9      	ldrh	r1, [r7, #6]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	6812      	ldr	r2, [r2, #0]
 800785e:	430b      	orrs	r3, r1
 8007860:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	689a      	ldr	r2, [r3, #8]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007870:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	691a      	ldr	r2, [r3, #16]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8007880:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f042 0201 	orr.w	r2, r2, #1
 8007890:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800789a:	d107      	bne.n	80078ac <HAL_SPI_Transmit_DMA+0x268>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078aa:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	08007d3b 	.word	0x08007d3b
 80078c4:	08007cf5 	.word	0x08007cf5
 80078c8:	08007d57 	.word	0x08007d57
 80078cc:	ffff0000 	.word	0xffff0000

080078d0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b08a      	sub	sp, #40	; 0x28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80078e8:	6a3a      	ldr	r2, [r7, #32]
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	4013      	ands	r3, r2
 80078ee:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80078f8:	2300      	movs	r3, #0
 80078fa:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007902:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3330      	adds	r3, #48	; 0x30
 800790a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007912:	2b00      	cmp	r3, #0
 8007914:	d113      	bne.n	800793e <HAL_SPI_IRQHandler+0x6e>
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	f003 0320 	and.w	r3, r3, #32
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10e      	bne.n	800793e <HAL_SPI_IRQHandler+0x6e>
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	f003 0304 	and.w	r3, r3, #4
 8007926:	2b00      	cmp	r3, #0
 8007928:	d009      	beq.n	800793e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	4798      	blx	r3
    handled = 1UL;
 800793a:	2301      	movs	r3, #1
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10f      	bne.n	8007968 <HAL_SPI_IRQHandler+0x98>
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00a      	beq.n	8007968 <HAL_SPI_IRQHandler+0x98>
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	f003 0304 	and.w	r3, r3, #4
 8007958:	2b00      	cmp	r3, #0
 800795a:	d105      	bne.n	8007968 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	4798      	blx	r3
    handled = 1UL;
 8007964:	2301      	movs	r3, #1
 8007966:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10f      	bne.n	8007992 <HAL_SPI_IRQHandler+0xc2>
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	f003 0302 	and.w	r3, r3, #2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00a      	beq.n	8007992 <HAL_SPI_IRQHandler+0xc2>
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	f003 0304 	and.w	r3, r3, #4
 8007982:	2b00      	cmp	r3, #0
 8007984:	d105      	bne.n	8007992 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	4798      	blx	r3
    handled = 1UL;
 800798e:	2301      	movs	r3, #1
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	2b00      	cmp	r3, #0
 8007996:	f040 816f 	bne.w	8007c78 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	f003 0308 	and.w	r3, r3, #8
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 80a0 	beq.w	8007ae6 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	699a      	ldr	r2, [r3, #24]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f042 0208 	orr.w	r2, r2, #8
 80079b4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	699a      	ldr	r2, [r3, #24]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f042 0210 	orr.w	r2, r2, #16
 80079c4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	699a      	ldr	r2, [r3, #24]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079d4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	691a      	ldr	r2, [r3, #16]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 0208 	bic.w	r2, r2, #8
 80079e4:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00f      	beq.n	8007a10 <HAL_SPI_IRQHandler+0x140>
 80079f0:	7cfb      	ldrb	r3, [r7, #19]
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	d004      	beq.n	8007a00 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d007      	beq.n	8007a10 <HAL_SPI_IRQHandler+0x140>
 8007a00:	7cfb      	ldrb	r3, [r7, #19]
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d059      	beq.n	8007aba <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d154      	bne.n	8007aba <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d13d      	bne.n	8007a9a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007a1e:	e036      	b.n	8007a8e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	2b0f      	cmp	r3, #15
 8007a26:	d90b      	bls.n	8007a40 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007a32:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a38:	1d1a      	adds	r2, r3, #4
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	665a      	str	r2, [r3, #100]	; 0x64
 8007a3e:	e01d      	b.n	8007a7c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	2b07      	cmp	r3, #7
 8007a46:	d90b      	bls.n	8007a60 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	8812      	ldrh	r2, [r2, #0]
 8007a50:	b292      	uxth	r2, r2
 8007a52:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a58:	1c9a      	adds	r2, r3, #2
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	665a      	str	r2, [r3, #100]	; 0x64
 8007a5e:	e00d      	b.n	8007a7c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a6c:	7812      	ldrb	r2, [r2, #0]
 8007a6e:	b2d2      	uxtb	r2, r2
 8007a70:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a76:	1c5a      	adds	r2, r3, #1
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	3b01      	subs	r3, #1
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1c2      	bne.n	8007a20 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f998 	bl	8007dd0 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f914 	bl	8007ce0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007ab8:	e0e3      	b.n	8007c82 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007aba:	7cfb      	ldrb	r3, [r7, #19]
 8007abc:	2b05      	cmp	r3, #5
 8007abe:	d103      	bne.n	8007ac8 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f8f9 	bl	8007cb8 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8007ac6:	e0d9      	b.n	8007c7c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007ac8:	7cfb      	ldrb	r3, [r7, #19]
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	d103      	bne.n	8007ad6 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f8e8 	bl	8007ca4 <HAL_SPI_RxCpltCallback>
    return;
 8007ad4:	e0d2      	b.n	8007c7c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007ad6:	7cfb      	ldrb	r3, [r7, #19]
 8007ad8:	2b03      	cmp	r3, #3
 8007ada:	f040 80cf 	bne.w	8007c7c <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f8d6 	bl	8007c90 <HAL_SPI_TxCpltCallback>
    return;
 8007ae4:	e0ca      	b.n	8007c7c <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00d      	beq.n	8007b0c <HAL_SPI_IRQHandler+0x23c>
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	f003 0308 	and.w	r3, r3, #8
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d008      	beq.n	8007b0c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	699a      	ldr	r2, [r3, #24]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b08:	619a      	str	r2, [r3, #24]

    return;
 8007b0a:	e0ba      	b.n	8007c82 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 80b5 	beq.w	8007c82 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00f      	beq.n	8007b42 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b28:	f043 0204 	orr.w	r2, r3, #4
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	699a      	ldr	r2, [r3, #24]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b40:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00f      	beq.n	8007b6c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b52:	f043 0201 	orr.w	r2, r3, #1
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	699a      	ldr	r2, [r3, #24]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b6a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00f      	beq.n	8007b96 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b7c:	f043 0208 	orr.w	r2, r3, #8
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	699a      	ldr	r2, [r3, #24]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b94:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	f003 0320 	and.w	r3, r3, #32
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00f      	beq.n	8007bc0 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ba6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	699a      	ldr	r2, [r3, #24]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 0220 	orr.w	r2, r2, #32
 8007bbe:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d05a      	beq.n	8007c80 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f022 0201 	bic.w	r2, r2, #1
 8007bd8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6919      	ldr	r1, [r3, #16]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	4b28      	ldr	r3, [pc, #160]	; (8007c88 <HAL_SPI_IRQHandler+0x3b8>)
 8007be6:	400b      	ands	r3, r1
 8007be8:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007bf0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007bf4:	d138      	bne.n	8007c68 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689a      	ldr	r2, [r3, #8]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007c04:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d013      	beq.n	8007c36 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c12:	4a1e      	ldr	r2, [pc, #120]	; (8007c8c <HAL_SPI_IRQHandler+0x3bc>)
 8007c14:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fa fbfe 	bl	800241c <HAL_DMA_Abort_IT>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d007      	beq.n	8007c36 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d020      	beq.n	8007c80 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c42:	4a12      	ldr	r2, [pc, #72]	; (8007c8c <HAL_SPI_IRQHandler+0x3bc>)
 8007c44:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fa fbe6 	bl	800241c <HAL_DMA_Abort_IT>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d014      	beq.n	8007c80 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007c66:	e00b      	b.n	8007c80 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f835 	bl	8007ce0 <HAL_SPI_ErrorCallback>
    return;
 8007c76:	e003      	b.n	8007c80 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8007c78:	bf00      	nop
 8007c7a:	e002      	b.n	8007c82 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007c7c:	bf00      	nop
 8007c7e:	e000      	b.n	8007c82 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8007c80:	bf00      	nop
  }
}
 8007c82:	3728      	adds	r7, #40	; 0x28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	fffffc94 	.word	0xfffffc94
 8007c8c:	08007d9d 	.word	0x08007d9d

08007c90 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d00:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b07      	cmp	r3, #7
 8007d0c:	d011      	beq.n	8007d32 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d18:	d103      	bne.n	8007d22 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f7ff ffb8 	bl	8007c90 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8007d20:	e007      	b.n	8007d32 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	691a      	ldr	r2, [r3, #16]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f042 0208 	orr.w	r2, r2, #8
 8007d30:	611a      	str	r2, [r3, #16]
}
 8007d32:	bf00      	nop
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d46:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f7ff ffbf 	bl	8007ccc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d4e:	bf00      	nop
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d62:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7fb fcc9 	bl	80036fc <HAL_DMA_GetError>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d011      	beq.n	8007d94 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 f82d 	bl	8007dd0 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d7c:	f043 0210 	orr.w	r2, r3, #16
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f7ff ffa6 	bl	8007ce0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007d94:	bf00      	nop
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f7ff ff8c 	bl	8007ce0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007dc8:	bf00      	nop
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	699a      	ldr	r2, [r3, #24]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f042 0208 	orr.w	r2, r2, #8
 8007dee:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	699a      	ldr	r2, [r3, #24]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0210 	orr.w	r2, r2, #16
 8007dfe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 0201 	bic.w	r2, r2, #1
 8007e0e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6919      	ldr	r1, [r3, #16]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	4b3c      	ldr	r3, [pc, #240]	; (8007f0c <SPI_CloseTransfer+0x13c>)
 8007e1c:	400b      	ands	r3, r1
 8007e1e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689a      	ldr	r2, [r3, #8]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007e2e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b04      	cmp	r3, #4
 8007e3a:	d014      	beq.n	8007e66 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f003 0320 	and.w	r3, r3, #32
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00f      	beq.n	8007e66 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	699a      	ldr	r2, [r3, #24]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f042 0220 	orr.w	r2, r2, #32
 8007e64:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d014      	beq.n	8007e9c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00f      	beq.n	8007e9c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e82:	f043 0204 	orr.w	r2, r3, #4
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	699a      	ldr	r2, [r3, #24]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e9a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00f      	beq.n	8007ec6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eac:	f043 0201 	orr.w	r2, r3, #1
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	699a      	ldr	r2, [r3, #24]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ec4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00f      	beq.n	8007ef0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ed6:	f043 0208 	orr.w	r2, r3, #8
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	699a      	ldr	r2, [r3, #24]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007eee:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007f00:	bf00      	nop
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	fffffc90 	.word	0xfffffc90

08007f10 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f1c:	095b      	lsrs	r3, r3, #5
 8007f1e:	3301      	adds	r3, #1
 8007f20:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	3301      	adds	r3, #1
 8007f28:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	3307      	adds	r3, #7
 8007f2e:	08db      	lsrs	r3, r3, #3
 8007f30:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	fb02 f303 	mul.w	r3, r2, r3
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b082      	sub	sp, #8
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d101      	bne.n	8007f58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e042      	b.n	8007fde <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d106      	bne.n	8007f70 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7f9 f954 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2224      	movs	r2, #36	; 0x24
 8007f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f022 0201 	bic.w	r2, r2, #1
 8007f86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f82d 	bl	8007fe8 <UART_SetConfig>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d101      	bne.n	8007f98 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	e022      	b.n	8007fde <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d002      	beq.n	8007fa6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fd8b 	bl	8008abc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fb4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	689a      	ldr	r2, [r3, #8]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fc4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f042 0201 	orr.w	r2, r2, #1
 8007fd4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fe12 	bl	8008c00 <UART_CheckIdleState>
 8007fdc:	4603      	mov	r3, r0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
	...

08007fe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fec:	b092      	sub	sp, #72	; 0x48
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	689a      	ldr	r2, [r3, #8]
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	431a      	orrs	r2, r3
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	431a      	orrs	r2, r3
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	4313      	orrs	r3, r2
 800800e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	4bbe      	ldr	r3, [pc, #760]	; (8008310 <UART_SetConfig+0x328>)
 8008018:	4013      	ands	r3, r2
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	6812      	ldr	r2, [r2, #0]
 800801e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008020:	430b      	orrs	r3, r1
 8008022:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	68da      	ldr	r2, [r3, #12]
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	430a      	orrs	r2, r1
 8008038:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4ab3      	ldr	r2, [pc, #716]	; (8008314 <UART_SetConfig+0x32c>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d004      	beq.n	8008054 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008050:	4313      	orrs	r3, r2
 8008052:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689a      	ldr	r2, [r3, #8]
 800805a:	4baf      	ldr	r3, [pc, #700]	; (8008318 <UART_SetConfig+0x330>)
 800805c:	4013      	ands	r3, r2
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	6812      	ldr	r2, [r2, #0]
 8008062:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008064:	430b      	orrs	r3, r1
 8008066:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806e:	f023 010f 	bic.w	r1, r3, #15
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	430a      	orrs	r2, r1
 800807c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4aa6      	ldr	r2, [pc, #664]	; (800831c <UART_SetConfig+0x334>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d177      	bne.n	8008178 <UART_SetConfig+0x190>
 8008088:	4ba5      	ldr	r3, [pc, #660]	; (8008320 <UART_SetConfig+0x338>)
 800808a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800808c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008090:	2b28      	cmp	r3, #40	; 0x28
 8008092:	d86d      	bhi.n	8008170 <UART_SetConfig+0x188>
 8008094:	a201      	add	r2, pc, #4	; (adr r2, 800809c <UART_SetConfig+0xb4>)
 8008096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809a:	bf00      	nop
 800809c:	08008141 	.word	0x08008141
 80080a0:	08008171 	.word	0x08008171
 80080a4:	08008171 	.word	0x08008171
 80080a8:	08008171 	.word	0x08008171
 80080ac:	08008171 	.word	0x08008171
 80080b0:	08008171 	.word	0x08008171
 80080b4:	08008171 	.word	0x08008171
 80080b8:	08008171 	.word	0x08008171
 80080bc:	08008149 	.word	0x08008149
 80080c0:	08008171 	.word	0x08008171
 80080c4:	08008171 	.word	0x08008171
 80080c8:	08008171 	.word	0x08008171
 80080cc:	08008171 	.word	0x08008171
 80080d0:	08008171 	.word	0x08008171
 80080d4:	08008171 	.word	0x08008171
 80080d8:	08008171 	.word	0x08008171
 80080dc:	08008151 	.word	0x08008151
 80080e0:	08008171 	.word	0x08008171
 80080e4:	08008171 	.word	0x08008171
 80080e8:	08008171 	.word	0x08008171
 80080ec:	08008171 	.word	0x08008171
 80080f0:	08008171 	.word	0x08008171
 80080f4:	08008171 	.word	0x08008171
 80080f8:	08008171 	.word	0x08008171
 80080fc:	08008159 	.word	0x08008159
 8008100:	08008171 	.word	0x08008171
 8008104:	08008171 	.word	0x08008171
 8008108:	08008171 	.word	0x08008171
 800810c:	08008171 	.word	0x08008171
 8008110:	08008171 	.word	0x08008171
 8008114:	08008171 	.word	0x08008171
 8008118:	08008171 	.word	0x08008171
 800811c:	08008161 	.word	0x08008161
 8008120:	08008171 	.word	0x08008171
 8008124:	08008171 	.word	0x08008171
 8008128:	08008171 	.word	0x08008171
 800812c:	08008171 	.word	0x08008171
 8008130:	08008171 	.word	0x08008171
 8008134:	08008171 	.word	0x08008171
 8008138:	08008171 	.word	0x08008171
 800813c:	08008169 	.word	0x08008169
 8008140:	2301      	movs	r3, #1
 8008142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008146:	e222      	b.n	800858e <UART_SetConfig+0x5a6>
 8008148:	2304      	movs	r3, #4
 800814a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800814e:	e21e      	b.n	800858e <UART_SetConfig+0x5a6>
 8008150:	2308      	movs	r3, #8
 8008152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008156:	e21a      	b.n	800858e <UART_SetConfig+0x5a6>
 8008158:	2310      	movs	r3, #16
 800815a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800815e:	e216      	b.n	800858e <UART_SetConfig+0x5a6>
 8008160:	2320      	movs	r3, #32
 8008162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008166:	e212      	b.n	800858e <UART_SetConfig+0x5a6>
 8008168:	2340      	movs	r3, #64	; 0x40
 800816a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800816e:	e20e      	b.n	800858e <UART_SetConfig+0x5a6>
 8008170:	2380      	movs	r3, #128	; 0x80
 8008172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008176:	e20a      	b.n	800858e <UART_SetConfig+0x5a6>
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a69      	ldr	r2, [pc, #420]	; (8008324 <UART_SetConfig+0x33c>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d130      	bne.n	80081e4 <UART_SetConfig+0x1fc>
 8008182:	4b67      	ldr	r3, [pc, #412]	; (8008320 <UART_SetConfig+0x338>)
 8008184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008186:	f003 0307 	and.w	r3, r3, #7
 800818a:	2b05      	cmp	r3, #5
 800818c:	d826      	bhi.n	80081dc <UART_SetConfig+0x1f4>
 800818e:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <UART_SetConfig+0x1ac>)
 8008190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008194:	080081ad 	.word	0x080081ad
 8008198:	080081b5 	.word	0x080081b5
 800819c:	080081bd 	.word	0x080081bd
 80081a0:	080081c5 	.word	0x080081c5
 80081a4:	080081cd 	.word	0x080081cd
 80081a8:	080081d5 	.word	0x080081d5
 80081ac:	2300      	movs	r3, #0
 80081ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081b2:	e1ec      	b.n	800858e <UART_SetConfig+0x5a6>
 80081b4:	2304      	movs	r3, #4
 80081b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ba:	e1e8      	b.n	800858e <UART_SetConfig+0x5a6>
 80081bc:	2308      	movs	r3, #8
 80081be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081c2:	e1e4      	b.n	800858e <UART_SetConfig+0x5a6>
 80081c4:	2310      	movs	r3, #16
 80081c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ca:	e1e0      	b.n	800858e <UART_SetConfig+0x5a6>
 80081cc:	2320      	movs	r3, #32
 80081ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081d2:	e1dc      	b.n	800858e <UART_SetConfig+0x5a6>
 80081d4:	2340      	movs	r3, #64	; 0x40
 80081d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081da:	e1d8      	b.n	800858e <UART_SetConfig+0x5a6>
 80081dc:	2380      	movs	r3, #128	; 0x80
 80081de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081e2:	e1d4      	b.n	800858e <UART_SetConfig+0x5a6>
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a4f      	ldr	r2, [pc, #316]	; (8008328 <UART_SetConfig+0x340>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d130      	bne.n	8008250 <UART_SetConfig+0x268>
 80081ee:	4b4c      	ldr	r3, [pc, #304]	; (8008320 <UART_SetConfig+0x338>)
 80081f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081f2:	f003 0307 	and.w	r3, r3, #7
 80081f6:	2b05      	cmp	r3, #5
 80081f8:	d826      	bhi.n	8008248 <UART_SetConfig+0x260>
 80081fa:	a201      	add	r2, pc, #4	; (adr r2, 8008200 <UART_SetConfig+0x218>)
 80081fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008200:	08008219 	.word	0x08008219
 8008204:	08008221 	.word	0x08008221
 8008208:	08008229 	.word	0x08008229
 800820c:	08008231 	.word	0x08008231
 8008210:	08008239 	.word	0x08008239
 8008214:	08008241 	.word	0x08008241
 8008218:	2300      	movs	r3, #0
 800821a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800821e:	e1b6      	b.n	800858e <UART_SetConfig+0x5a6>
 8008220:	2304      	movs	r3, #4
 8008222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008226:	e1b2      	b.n	800858e <UART_SetConfig+0x5a6>
 8008228:	2308      	movs	r3, #8
 800822a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800822e:	e1ae      	b.n	800858e <UART_SetConfig+0x5a6>
 8008230:	2310      	movs	r3, #16
 8008232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008236:	e1aa      	b.n	800858e <UART_SetConfig+0x5a6>
 8008238:	2320      	movs	r3, #32
 800823a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800823e:	e1a6      	b.n	800858e <UART_SetConfig+0x5a6>
 8008240:	2340      	movs	r3, #64	; 0x40
 8008242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008246:	e1a2      	b.n	800858e <UART_SetConfig+0x5a6>
 8008248:	2380      	movs	r3, #128	; 0x80
 800824a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800824e:	e19e      	b.n	800858e <UART_SetConfig+0x5a6>
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a35      	ldr	r2, [pc, #212]	; (800832c <UART_SetConfig+0x344>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d130      	bne.n	80082bc <UART_SetConfig+0x2d4>
 800825a:	4b31      	ldr	r3, [pc, #196]	; (8008320 <UART_SetConfig+0x338>)
 800825c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825e:	f003 0307 	and.w	r3, r3, #7
 8008262:	2b05      	cmp	r3, #5
 8008264:	d826      	bhi.n	80082b4 <UART_SetConfig+0x2cc>
 8008266:	a201      	add	r2, pc, #4	; (adr r2, 800826c <UART_SetConfig+0x284>)
 8008268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826c:	08008285 	.word	0x08008285
 8008270:	0800828d 	.word	0x0800828d
 8008274:	08008295 	.word	0x08008295
 8008278:	0800829d 	.word	0x0800829d
 800827c:	080082a5 	.word	0x080082a5
 8008280:	080082ad 	.word	0x080082ad
 8008284:	2300      	movs	r3, #0
 8008286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800828a:	e180      	b.n	800858e <UART_SetConfig+0x5a6>
 800828c:	2304      	movs	r3, #4
 800828e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008292:	e17c      	b.n	800858e <UART_SetConfig+0x5a6>
 8008294:	2308      	movs	r3, #8
 8008296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800829a:	e178      	b.n	800858e <UART_SetConfig+0x5a6>
 800829c:	2310      	movs	r3, #16
 800829e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082a2:	e174      	b.n	800858e <UART_SetConfig+0x5a6>
 80082a4:	2320      	movs	r3, #32
 80082a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082aa:	e170      	b.n	800858e <UART_SetConfig+0x5a6>
 80082ac:	2340      	movs	r3, #64	; 0x40
 80082ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082b2:	e16c      	b.n	800858e <UART_SetConfig+0x5a6>
 80082b4:	2380      	movs	r3, #128	; 0x80
 80082b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ba:	e168      	b.n	800858e <UART_SetConfig+0x5a6>
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a1b      	ldr	r2, [pc, #108]	; (8008330 <UART_SetConfig+0x348>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d142      	bne.n	800834c <UART_SetConfig+0x364>
 80082c6:	4b16      	ldr	r3, [pc, #88]	; (8008320 <UART_SetConfig+0x338>)
 80082c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ca:	f003 0307 	and.w	r3, r3, #7
 80082ce:	2b05      	cmp	r3, #5
 80082d0:	d838      	bhi.n	8008344 <UART_SetConfig+0x35c>
 80082d2:	a201      	add	r2, pc, #4	; (adr r2, 80082d8 <UART_SetConfig+0x2f0>)
 80082d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d8:	080082f1 	.word	0x080082f1
 80082dc:	080082f9 	.word	0x080082f9
 80082e0:	08008301 	.word	0x08008301
 80082e4:	08008309 	.word	0x08008309
 80082e8:	08008335 	.word	0x08008335
 80082ec:	0800833d 	.word	0x0800833d
 80082f0:	2300      	movs	r3, #0
 80082f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f6:	e14a      	b.n	800858e <UART_SetConfig+0x5a6>
 80082f8:	2304      	movs	r3, #4
 80082fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fe:	e146      	b.n	800858e <UART_SetConfig+0x5a6>
 8008300:	2308      	movs	r3, #8
 8008302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008306:	e142      	b.n	800858e <UART_SetConfig+0x5a6>
 8008308:	2310      	movs	r3, #16
 800830a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800830e:	e13e      	b.n	800858e <UART_SetConfig+0x5a6>
 8008310:	cfff69f3 	.word	0xcfff69f3
 8008314:	58000c00 	.word	0x58000c00
 8008318:	11fff4ff 	.word	0x11fff4ff
 800831c:	40011000 	.word	0x40011000
 8008320:	58024400 	.word	0x58024400
 8008324:	40004400 	.word	0x40004400
 8008328:	40004800 	.word	0x40004800
 800832c:	40004c00 	.word	0x40004c00
 8008330:	40005000 	.word	0x40005000
 8008334:	2320      	movs	r3, #32
 8008336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833a:	e128      	b.n	800858e <UART_SetConfig+0x5a6>
 800833c:	2340      	movs	r3, #64	; 0x40
 800833e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008342:	e124      	b.n	800858e <UART_SetConfig+0x5a6>
 8008344:	2380      	movs	r3, #128	; 0x80
 8008346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834a:	e120      	b.n	800858e <UART_SetConfig+0x5a6>
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4acb      	ldr	r2, [pc, #812]	; (8008680 <UART_SetConfig+0x698>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d176      	bne.n	8008444 <UART_SetConfig+0x45c>
 8008356:	4bcb      	ldr	r3, [pc, #812]	; (8008684 <UART_SetConfig+0x69c>)
 8008358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800835a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800835e:	2b28      	cmp	r3, #40	; 0x28
 8008360:	d86c      	bhi.n	800843c <UART_SetConfig+0x454>
 8008362:	a201      	add	r2, pc, #4	; (adr r2, 8008368 <UART_SetConfig+0x380>)
 8008364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008368:	0800840d 	.word	0x0800840d
 800836c:	0800843d 	.word	0x0800843d
 8008370:	0800843d 	.word	0x0800843d
 8008374:	0800843d 	.word	0x0800843d
 8008378:	0800843d 	.word	0x0800843d
 800837c:	0800843d 	.word	0x0800843d
 8008380:	0800843d 	.word	0x0800843d
 8008384:	0800843d 	.word	0x0800843d
 8008388:	08008415 	.word	0x08008415
 800838c:	0800843d 	.word	0x0800843d
 8008390:	0800843d 	.word	0x0800843d
 8008394:	0800843d 	.word	0x0800843d
 8008398:	0800843d 	.word	0x0800843d
 800839c:	0800843d 	.word	0x0800843d
 80083a0:	0800843d 	.word	0x0800843d
 80083a4:	0800843d 	.word	0x0800843d
 80083a8:	0800841d 	.word	0x0800841d
 80083ac:	0800843d 	.word	0x0800843d
 80083b0:	0800843d 	.word	0x0800843d
 80083b4:	0800843d 	.word	0x0800843d
 80083b8:	0800843d 	.word	0x0800843d
 80083bc:	0800843d 	.word	0x0800843d
 80083c0:	0800843d 	.word	0x0800843d
 80083c4:	0800843d 	.word	0x0800843d
 80083c8:	08008425 	.word	0x08008425
 80083cc:	0800843d 	.word	0x0800843d
 80083d0:	0800843d 	.word	0x0800843d
 80083d4:	0800843d 	.word	0x0800843d
 80083d8:	0800843d 	.word	0x0800843d
 80083dc:	0800843d 	.word	0x0800843d
 80083e0:	0800843d 	.word	0x0800843d
 80083e4:	0800843d 	.word	0x0800843d
 80083e8:	0800842d 	.word	0x0800842d
 80083ec:	0800843d 	.word	0x0800843d
 80083f0:	0800843d 	.word	0x0800843d
 80083f4:	0800843d 	.word	0x0800843d
 80083f8:	0800843d 	.word	0x0800843d
 80083fc:	0800843d 	.word	0x0800843d
 8008400:	0800843d 	.word	0x0800843d
 8008404:	0800843d 	.word	0x0800843d
 8008408:	08008435 	.word	0x08008435
 800840c:	2301      	movs	r3, #1
 800840e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008412:	e0bc      	b.n	800858e <UART_SetConfig+0x5a6>
 8008414:	2304      	movs	r3, #4
 8008416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800841a:	e0b8      	b.n	800858e <UART_SetConfig+0x5a6>
 800841c:	2308      	movs	r3, #8
 800841e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008422:	e0b4      	b.n	800858e <UART_SetConfig+0x5a6>
 8008424:	2310      	movs	r3, #16
 8008426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800842a:	e0b0      	b.n	800858e <UART_SetConfig+0x5a6>
 800842c:	2320      	movs	r3, #32
 800842e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008432:	e0ac      	b.n	800858e <UART_SetConfig+0x5a6>
 8008434:	2340      	movs	r3, #64	; 0x40
 8008436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800843a:	e0a8      	b.n	800858e <UART_SetConfig+0x5a6>
 800843c:	2380      	movs	r3, #128	; 0x80
 800843e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008442:	e0a4      	b.n	800858e <UART_SetConfig+0x5a6>
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a8f      	ldr	r2, [pc, #572]	; (8008688 <UART_SetConfig+0x6a0>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d130      	bne.n	80084b0 <UART_SetConfig+0x4c8>
 800844e:	4b8d      	ldr	r3, [pc, #564]	; (8008684 <UART_SetConfig+0x69c>)
 8008450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008452:	f003 0307 	and.w	r3, r3, #7
 8008456:	2b05      	cmp	r3, #5
 8008458:	d826      	bhi.n	80084a8 <UART_SetConfig+0x4c0>
 800845a:	a201      	add	r2, pc, #4	; (adr r2, 8008460 <UART_SetConfig+0x478>)
 800845c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008460:	08008479 	.word	0x08008479
 8008464:	08008481 	.word	0x08008481
 8008468:	08008489 	.word	0x08008489
 800846c:	08008491 	.word	0x08008491
 8008470:	08008499 	.word	0x08008499
 8008474:	080084a1 	.word	0x080084a1
 8008478:	2300      	movs	r3, #0
 800847a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800847e:	e086      	b.n	800858e <UART_SetConfig+0x5a6>
 8008480:	2304      	movs	r3, #4
 8008482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008486:	e082      	b.n	800858e <UART_SetConfig+0x5a6>
 8008488:	2308      	movs	r3, #8
 800848a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800848e:	e07e      	b.n	800858e <UART_SetConfig+0x5a6>
 8008490:	2310      	movs	r3, #16
 8008492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008496:	e07a      	b.n	800858e <UART_SetConfig+0x5a6>
 8008498:	2320      	movs	r3, #32
 800849a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849e:	e076      	b.n	800858e <UART_SetConfig+0x5a6>
 80084a0:	2340      	movs	r3, #64	; 0x40
 80084a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084a6:	e072      	b.n	800858e <UART_SetConfig+0x5a6>
 80084a8:	2380      	movs	r3, #128	; 0x80
 80084aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ae:	e06e      	b.n	800858e <UART_SetConfig+0x5a6>
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a75      	ldr	r2, [pc, #468]	; (800868c <UART_SetConfig+0x6a4>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d130      	bne.n	800851c <UART_SetConfig+0x534>
 80084ba:	4b72      	ldr	r3, [pc, #456]	; (8008684 <UART_SetConfig+0x69c>)
 80084bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084be:	f003 0307 	and.w	r3, r3, #7
 80084c2:	2b05      	cmp	r3, #5
 80084c4:	d826      	bhi.n	8008514 <UART_SetConfig+0x52c>
 80084c6:	a201      	add	r2, pc, #4	; (adr r2, 80084cc <UART_SetConfig+0x4e4>)
 80084c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084cc:	080084e5 	.word	0x080084e5
 80084d0:	080084ed 	.word	0x080084ed
 80084d4:	080084f5 	.word	0x080084f5
 80084d8:	080084fd 	.word	0x080084fd
 80084dc:	08008505 	.word	0x08008505
 80084e0:	0800850d 	.word	0x0800850d
 80084e4:	2300      	movs	r3, #0
 80084e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ea:	e050      	b.n	800858e <UART_SetConfig+0x5a6>
 80084ec:	2304      	movs	r3, #4
 80084ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084f2:	e04c      	b.n	800858e <UART_SetConfig+0x5a6>
 80084f4:	2308      	movs	r3, #8
 80084f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084fa:	e048      	b.n	800858e <UART_SetConfig+0x5a6>
 80084fc:	2310      	movs	r3, #16
 80084fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008502:	e044      	b.n	800858e <UART_SetConfig+0x5a6>
 8008504:	2320      	movs	r3, #32
 8008506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800850a:	e040      	b.n	800858e <UART_SetConfig+0x5a6>
 800850c:	2340      	movs	r3, #64	; 0x40
 800850e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008512:	e03c      	b.n	800858e <UART_SetConfig+0x5a6>
 8008514:	2380      	movs	r3, #128	; 0x80
 8008516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800851a:	e038      	b.n	800858e <UART_SetConfig+0x5a6>
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a5b      	ldr	r2, [pc, #364]	; (8008690 <UART_SetConfig+0x6a8>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d130      	bne.n	8008588 <UART_SetConfig+0x5a0>
 8008526:	4b57      	ldr	r3, [pc, #348]	; (8008684 <UART_SetConfig+0x69c>)
 8008528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852a:	f003 0307 	and.w	r3, r3, #7
 800852e:	2b05      	cmp	r3, #5
 8008530:	d826      	bhi.n	8008580 <UART_SetConfig+0x598>
 8008532:	a201      	add	r2, pc, #4	; (adr r2, 8008538 <UART_SetConfig+0x550>)
 8008534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008538:	08008551 	.word	0x08008551
 800853c:	08008559 	.word	0x08008559
 8008540:	08008561 	.word	0x08008561
 8008544:	08008569 	.word	0x08008569
 8008548:	08008571 	.word	0x08008571
 800854c:	08008579 	.word	0x08008579
 8008550:	2302      	movs	r3, #2
 8008552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008556:	e01a      	b.n	800858e <UART_SetConfig+0x5a6>
 8008558:	2304      	movs	r3, #4
 800855a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800855e:	e016      	b.n	800858e <UART_SetConfig+0x5a6>
 8008560:	2308      	movs	r3, #8
 8008562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008566:	e012      	b.n	800858e <UART_SetConfig+0x5a6>
 8008568:	2310      	movs	r3, #16
 800856a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800856e:	e00e      	b.n	800858e <UART_SetConfig+0x5a6>
 8008570:	2320      	movs	r3, #32
 8008572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008576:	e00a      	b.n	800858e <UART_SetConfig+0x5a6>
 8008578:	2340      	movs	r3, #64	; 0x40
 800857a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800857e:	e006      	b.n	800858e <UART_SetConfig+0x5a6>
 8008580:	2380      	movs	r3, #128	; 0x80
 8008582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008586:	e002      	b.n	800858e <UART_SetConfig+0x5a6>
 8008588:	2380      	movs	r3, #128	; 0x80
 800858a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a3f      	ldr	r2, [pc, #252]	; (8008690 <UART_SetConfig+0x6a8>)
 8008594:	4293      	cmp	r3, r2
 8008596:	f040 80f8 	bne.w	800878a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800859a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800859e:	2b20      	cmp	r3, #32
 80085a0:	dc46      	bgt.n	8008630 <UART_SetConfig+0x648>
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	f2c0 8082 	blt.w	80086ac <UART_SetConfig+0x6c4>
 80085a8:	3b02      	subs	r3, #2
 80085aa:	2b1e      	cmp	r3, #30
 80085ac:	d87e      	bhi.n	80086ac <UART_SetConfig+0x6c4>
 80085ae:	a201      	add	r2, pc, #4	; (adr r2, 80085b4 <UART_SetConfig+0x5cc>)
 80085b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b4:	08008637 	.word	0x08008637
 80085b8:	080086ad 	.word	0x080086ad
 80085bc:	0800863f 	.word	0x0800863f
 80085c0:	080086ad 	.word	0x080086ad
 80085c4:	080086ad 	.word	0x080086ad
 80085c8:	080086ad 	.word	0x080086ad
 80085cc:	0800864f 	.word	0x0800864f
 80085d0:	080086ad 	.word	0x080086ad
 80085d4:	080086ad 	.word	0x080086ad
 80085d8:	080086ad 	.word	0x080086ad
 80085dc:	080086ad 	.word	0x080086ad
 80085e0:	080086ad 	.word	0x080086ad
 80085e4:	080086ad 	.word	0x080086ad
 80085e8:	080086ad 	.word	0x080086ad
 80085ec:	0800865f 	.word	0x0800865f
 80085f0:	080086ad 	.word	0x080086ad
 80085f4:	080086ad 	.word	0x080086ad
 80085f8:	080086ad 	.word	0x080086ad
 80085fc:	080086ad 	.word	0x080086ad
 8008600:	080086ad 	.word	0x080086ad
 8008604:	080086ad 	.word	0x080086ad
 8008608:	080086ad 	.word	0x080086ad
 800860c:	080086ad 	.word	0x080086ad
 8008610:	080086ad 	.word	0x080086ad
 8008614:	080086ad 	.word	0x080086ad
 8008618:	080086ad 	.word	0x080086ad
 800861c:	080086ad 	.word	0x080086ad
 8008620:	080086ad 	.word	0x080086ad
 8008624:	080086ad 	.word	0x080086ad
 8008628:	080086ad 	.word	0x080086ad
 800862c:	0800869f 	.word	0x0800869f
 8008630:	2b40      	cmp	r3, #64	; 0x40
 8008632:	d037      	beq.n	80086a4 <UART_SetConfig+0x6bc>
 8008634:	e03a      	b.n	80086ac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008636:	f7fe fae1 	bl	8006bfc <HAL_RCCEx_GetD3PCLK1Freq>
 800863a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800863c:	e03c      	b.n	80086b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800863e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008642:	4618      	mov	r0, r3
 8008644:	f7fe faf0 	bl	8006c28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800864c:	e034      	b.n	80086b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800864e:	f107 0318 	add.w	r3, r7, #24
 8008652:	4618      	mov	r0, r3
 8008654:	f7fe fc3c 	bl	8006ed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800865c:	e02c      	b.n	80086b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800865e:	4b09      	ldr	r3, [pc, #36]	; (8008684 <UART_SetConfig+0x69c>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 0320 	and.w	r3, r3, #32
 8008666:	2b00      	cmp	r3, #0
 8008668:	d016      	beq.n	8008698 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800866a:	4b06      	ldr	r3, [pc, #24]	; (8008684 <UART_SetConfig+0x69c>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	08db      	lsrs	r3, r3, #3
 8008670:	f003 0303 	and.w	r3, r3, #3
 8008674:	4a07      	ldr	r2, [pc, #28]	; (8008694 <UART_SetConfig+0x6ac>)
 8008676:	fa22 f303 	lsr.w	r3, r2, r3
 800867a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800867c:	e01c      	b.n	80086b8 <UART_SetConfig+0x6d0>
 800867e:	bf00      	nop
 8008680:	40011400 	.word	0x40011400
 8008684:	58024400 	.word	0x58024400
 8008688:	40007800 	.word	0x40007800
 800868c:	40007c00 	.word	0x40007c00
 8008690:	58000c00 	.word	0x58000c00
 8008694:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008698:	4b9e      	ldr	r3, [pc, #632]	; (8008914 <UART_SetConfig+0x92c>)
 800869a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800869c:	e00c      	b.n	80086b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800869e:	4b9e      	ldr	r3, [pc, #632]	; (8008918 <UART_SetConfig+0x930>)
 80086a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086a2:	e009      	b.n	80086b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086aa:	e005      	b.n	80086b8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80086ac:	2300      	movs	r3, #0
 80086ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80086b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f000 81e0 	beq.w	8008a80 <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c4:	4a95      	ldr	r2, [pc, #596]	; (800891c <UART_SetConfig+0x934>)
 80086c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ca:	461a      	mov	r2, r3
 80086cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80086d2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	685a      	ldr	r2, [r3, #4]
 80086d8:	4613      	mov	r3, r2
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	4413      	add	r3, r2
 80086de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d305      	bcc.n	80086f0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d903      	bls.n	80086f8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80086f6:	e1c3      	b.n	8008a80 <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086fa:	2200      	movs	r2, #0
 80086fc:	60bb      	str	r3, [r7, #8]
 80086fe:	60fa      	str	r2, [r7, #12]
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008704:	4a85      	ldr	r2, [pc, #532]	; (800891c <UART_SetConfig+0x934>)
 8008706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800870a:	b29b      	uxth	r3, r3
 800870c:	2200      	movs	r2, #0
 800870e:	603b      	str	r3, [r7, #0]
 8008710:	607a      	str	r2, [r7, #4]
 8008712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008716:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800871a:	f7f7 fddd 	bl	80002d8 <__aeabi_uldivmod>
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	4610      	mov	r0, r2
 8008724:	4619      	mov	r1, r3
 8008726:	f04f 0200 	mov.w	r2, #0
 800872a:	f04f 0300 	mov.w	r3, #0
 800872e:	020b      	lsls	r3, r1, #8
 8008730:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008734:	0202      	lsls	r2, r0, #8
 8008736:	6979      	ldr	r1, [r7, #20]
 8008738:	6849      	ldr	r1, [r1, #4]
 800873a:	0849      	lsrs	r1, r1, #1
 800873c:	2000      	movs	r0, #0
 800873e:	460c      	mov	r4, r1
 8008740:	4605      	mov	r5, r0
 8008742:	eb12 0804 	adds.w	r8, r2, r4
 8008746:	eb43 0905 	adc.w	r9, r3, r5
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	469a      	mov	sl, r3
 8008752:	4693      	mov	fp, r2
 8008754:	4652      	mov	r2, sl
 8008756:	465b      	mov	r3, fp
 8008758:	4640      	mov	r0, r8
 800875a:	4649      	mov	r1, r9
 800875c:	f7f7 fdbc 	bl	80002d8 <__aeabi_uldivmod>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	4613      	mov	r3, r2
 8008766:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800876e:	d308      	bcc.n	8008782 <UART_SetConfig+0x79a>
 8008770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008776:	d204      	bcs.n	8008782 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800877e:	60da      	str	r2, [r3, #12]
 8008780:	e17e      	b.n	8008a80 <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008788:	e17a      	b.n	8008a80 <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008792:	f040 80c7 	bne.w	8008924 <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 8008796:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800879a:	2b20      	cmp	r3, #32
 800879c:	dc48      	bgt.n	8008830 <UART_SetConfig+0x848>
 800879e:	2b00      	cmp	r3, #0
 80087a0:	db7b      	blt.n	800889a <UART_SetConfig+0x8b2>
 80087a2:	2b20      	cmp	r3, #32
 80087a4:	d879      	bhi.n	800889a <UART_SetConfig+0x8b2>
 80087a6:	a201      	add	r2, pc, #4	; (adr r2, 80087ac <UART_SetConfig+0x7c4>)
 80087a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ac:	08008837 	.word	0x08008837
 80087b0:	0800883f 	.word	0x0800883f
 80087b4:	0800889b 	.word	0x0800889b
 80087b8:	0800889b 	.word	0x0800889b
 80087bc:	08008847 	.word	0x08008847
 80087c0:	0800889b 	.word	0x0800889b
 80087c4:	0800889b 	.word	0x0800889b
 80087c8:	0800889b 	.word	0x0800889b
 80087cc:	08008857 	.word	0x08008857
 80087d0:	0800889b 	.word	0x0800889b
 80087d4:	0800889b 	.word	0x0800889b
 80087d8:	0800889b 	.word	0x0800889b
 80087dc:	0800889b 	.word	0x0800889b
 80087e0:	0800889b 	.word	0x0800889b
 80087e4:	0800889b 	.word	0x0800889b
 80087e8:	0800889b 	.word	0x0800889b
 80087ec:	08008867 	.word	0x08008867
 80087f0:	0800889b 	.word	0x0800889b
 80087f4:	0800889b 	.word	0x0800889b
 80087f8:	0800889b 	.word	0x0800889b
 80087fc:	0800889b 	.word	0x0800889b
 8008800:	0800889b 	.word	0x0800889b
 8008804:	0800889b 	.word	0x0800889b
 8008808:	0800889b 	.word	0x0800889b
 800880c:	0800889b 	.word	0x0800889b
 8008810:	0800889b 	.word	0x0800889b
 8008814:	0800889b 	.word	0x0800889b
 8008818:	0800889b 	.word	0x0800889b
 800881c:	0800889b 	.word	0x0800889b
 8008820:	0800889b 	.word	0x0800889b
 8008824:	0800889b 	.word	0x0800889b
 8008828:	0800889b 	.word	0x0800889b
 800882c:	0800888d 	.word	0x0800888d
 8008830:	2b40      	cmp	r3, #64	; 0x40
 8008832:	d02e      	beq.n	8008892 <UART_SetConfig+0x8aa>
 8008834:	e031      	b.n	800889a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008836:	f7fd fa6f 	bl	8005d18 <HAL_RCC_GetPCLK1Freq>
 800883a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800883c:	e033      	b.n	80088a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800883e:	f7fd fa81 	bl	8005d44 <HAL_RCC_GetPCLK2Freq>
 8008842:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008844:	e02f      	b.n	80088a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800884a:	4618      	mov	r0, r3
 800884c:	f7fe f9ec 	bl	8006c28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008854:	e027      	b.n	80088a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008856:	f107 0318 	add.w	r3, r7, #24
 800885a:	4618      	mov	r0, r3
 800885c:	f7fe fb38 	bl	8006ed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008864:	e01f      	b.n	80088a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008866:	4b2e      	ldr	r3, [pc, #184]	; (8008920 <UART_SetConfig+0x938>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0320 	and.w	r3, r3, #32
 800886e:	2b00      	cmp	r3, #0
 8008870:	d009      	beq.n	8008886 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008872:	4b2b      	ldr	r3, [pc, #172]	; (8008920 <UART_SetConfig+0x938>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	08db      	lsrs	r3, r3, #3
 8008878:	f003 0303 	and.w	r3, r3, #3
 800887c:	4a25      	ldr	r2, [pc, #148]	; (8008914 <UART_SetConfig+0x92c>)
 800887e:	fa22 f303 	lsr.w	r3, r2, r3
 8008882:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008884:	e00f      	b.n	80088a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008886:	4b23      	ldr	r3, [pc, #140]	; (8008914 <UART_SetConfig+0x92c>)
 8008888:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800888a:	e00c      	b.n	80088a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800888c:	4b22      	ldr	r3, [pc, #136]	; (8008918 <UART_SetConfig+0x930>)
 800888e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008890:	e009      	b.n	80088a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008898:	e005      	b.n	80088a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800889a:	2300      	movs	r3, #0
 800889c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80088a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f000 80e9 	beq.w	8008a80 <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b2:	4a1a      	ldr	r2, [pc, #104]	; (800891c <UART_SetConfig+0x934>)
 80088b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088b8:	461a      	mov	r2, r3
 80088ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80088c0:	005a      	lsls	r2, r3, #1
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	085b      	lsrs	r3, r3, #1
 80088c8:	441a      	add	r2, r3
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	2b0f      	cmp	r3, #15
 80088da:	d916      	bls.n	800890a <UART_SetConfig+0x922>
 80088dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088e2:	d212      	bcs.n	800890a <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	f023 030f 	bic.w	r3, r3, #15
 80088ec:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f0:	085b      	lsrs	r3, r3, #1
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	f003 0307 	and.w	r3, r3, #7
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80088fc:	4313      	orrs	r3, r2
 80088fe:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008906:	60da      	str	r2, [r3, #12]
 8008908:	e0ba      	b.n	8008a80 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008910:	e0b6      	b.n	8008a80 <UART_SetConfig+0xa98>
 8008912:	bf00      	nop
 8008914:	03d09000 	.word	0x03d09000
 8008918:	003d0900 	.word	0x003d0900
 800891c:	080098bc 	.word	0x080098bc
 8008920:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008924:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008928:	2b20      	cmp	r3, #32
 800892a:	dc49      	bgt.n	80089c0 <UART_SetConfig+0x9d8>
 800892c:	2b00      	cmp	r3, #0
 800892e:	db7c      	blt.n	8008a2a <UART_SetConfig+0xa42>
 8008930:	2b20      	cmp	r3, #32
 8008932:	d87a      	bhi.n	8008a2a <UART_SetConfig+0xa42>
 8008934:	a201      	add	r2, pc, #4	; (adr r2, 800893c <UART_SetConfig+0x954>)
 8008936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893a:	bf00      	nop
 800893c:	080089c7 	.word	0x080089c7
 8008940:	080089cf 	.word	0x080089cf
 8008944:	08008a2b 	.word	0x08008a2b
 8008948:	08008a2b 	.word	0x08008a2b
 800894c:	080089d7 	.word	0x080089d7
 8008950:	08008a2b 	.word	0x08008a2b
 8008954:	08008a2b 	.word	0x08008a2b
 8008958:	08008a2b 	.word	0x08008a2b
 800895c:	080089e7 	.word	0x080089e7
 8008960:	08008a2b 	.word	0x08008a2b
 8008964:	08008a2b 	.word	0x08008a2b
 8008968:	08008a2b 	.word	0x08008a2b
 800896c:	08008a2b 	.word	0x08008a2b
 8008970:	08008a2b 	.word	0x08008a2b
 8008974:	08008a2b 	.word	0x08008a2b
 8008978:	08008a2b 	.word	0x08008a2b
 800897c:	080089f7 	.word	0x080089f7
 8008980:	08008a2b 	.word	0x08008a2b
 8008984:	08008a2b 	.word	0x08008a2b
 8008988:	08008a2b 	.word	0x08008a2b
 800898c:	08008a2b 	.word	0x08008a2b
 8008990:	08008a2b 	.word	0x08008a2b
 8008994:	08008a2b 	.word	0x08008a2b
 8008998:	08008a2b 	.word	0x08008a2b
 800899c:	08008a2b 	.word	0x08008a2b
 80089a0:	08008a2b 	.word	0x08008a2b
 80089a4:	08008a2b 	.word	0x08008a2b
 80089a8:	08008a2b 	.word	0x08008a2b
 80089ac:	08008a2b 	.word	0x08008a2b
 80089b0:	08008a2b 	.word	0x08008a2b
 80089b4:	08008a2b 	.word	0x08008a2b
 80089b8:	08008a2b 	.word	0x08008a2b
 80089bc:	08008a1d 	.word	0x08008a1d
 80089c0:	2b40      	cmp	r3, #64	; 0x40
 80089c2:	d02e      	beq.n	8008a22 <UART_SetConfig+0xa3a>
 80089c4:	e031      	b.n	8008a2a <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089c6:	f7fd f9a7 	bl	8005d18 <HAL_RCC_GetPCLK1Freq>
 80089ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80089cc:	e033      	b.n	8008a36 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089ce:	f7fd f9b9 	bl	8005d44 <HAL_RCC_GetPCLK2Freq>
 80089d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80089d4:	e02f      	b.n	8008a36 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fe f924 	bl	8006c28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089e4:	e027      	b.n	8008a36 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089e6:	f107 0318 	add.w	r3, r7, #24
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe fa70 	bl	8006ed0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089f4:	e01f      	b.n	8008a36 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089f6:	4b2d      	ldr	r3, [pc, #180]	; (8008aac <UART_SetConfig+0xac4>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 0320 	and.w	r3, r3, #32
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d009      	beq.n	8008a16 <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a02:	4b2a      	ldr	r3, [pc, #168]	; (8008aac <UART_SetConfig+0xac4>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	08db      	lsrs	r3, r3, #3
 8008a08:	f003 0303 	and.w	r3, r3, #3
 8008a0c:	4a28      	ldr	r2, [pc, #160]	; (8008ab0 <UART_SetConfig+0xac8>)
 8008a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a14:	e00f      	b.n	8008a36 <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 8008a16:	4b26      	ldr	r3, [pc, #152]	; (8008ab0 <UART_SetConfig+0xac8>)
 8008a18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a1a:	e00c      	b.n	8008a36 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a1c:	4b25      	ldr	r3, [pc, #148]	; (8008ab4 <UART_SetConfig+0xacc>)
 8008a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a20:	e009      	b.n	8008a36 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a28:	e005      	b.n	8008a36 <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008a34:	bf00      	nop
    }

    if (pclk != 0U)
 8008a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d021      	beq.n	8008a80 <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a40:	4a1d      	ldr	r2, [pc, #116]	; (8008ab8 <UART_SetConfig+0xad0>)
 8008a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a46:	461a      	mov	r2, r3
 8008a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	085b      	lsrs	r3, r3, #1
 8008a54:	441a      	add	r2, r3
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a64:	2b0f      	cmp	r3, #15
 8008a66:	d908      	bls.n	8008a7a <UART_SetConfig+0xa92>
 8008a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a6e:	d204      	bcs.n	8008a7a <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a76:	60da      	str	r2, [r3, #12]
 8008a78:	e002      	b.n	8008a80 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	2200      	movs	r2, #0
 8008a94:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008a9c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3748      	adds	r7, #72	; 0x48
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008aaa:	bf00      	nop
 8008aac:	58024400 	.word	0x58024400
 8008ab0:	03d09000 	.word	0x03d09000
 8008ab4:	003d0900 	.word	0x003d0900
 8008ab8:	080098bc 	.word	0x080098bc

08008abc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00a      	beq.n	8008ae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aea:	f003 0302 	and.w	r3, r3, #2
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00a      	beq.n	8008b08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	430a      	orrs	r2, r1
 8008b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0c:	f003 0304 	and.w	r3, r3, #4
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00a      	beq.n	8008b2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	430a      	orrs	r2, r1
 8008b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2e:	f003 0308 	and.w	r3, r3, #8
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00a      	beq.n	8008b4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b50:	f003 0310 	and.w	r3, r3, #16
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00a      	beq.n	8008b6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b72:	f003 0320 	and.w	r3, r3, #32
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d01a      	beq.n	8008bd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bba:	d10a      	bne.n	8008bd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00a      	beq.n	8008bf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	605a      	str	r2, [r3, #4]
  }
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af02      	add	r7, sp, #8
 8008c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c10:	f7f8 fcde 	bl	80015d0 <HAL_GetTick>
 8008c14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0308 	and.w	r3, r3, #8
 8008c20:	2b08      	cmp	r3, #8
 8008c22:	d10e      	bne.n	8008c42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f82f 	bl	8008c96 <UART_WaitOnFlagUntilTimeout>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d001      	beq.n	8008c42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e025      	b.n	8008c8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 0304 	and.w	r3, r3, #4
 8008c4c:	2b04      	cmp	r3, #4
 8008c4e:	d10e      	bne.n	8008c6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f819 	bl	8008c96 <UART_WaitOnFlagUntilTimeout>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d001      	beq.n	8008c6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e00f      	b.n	8008c8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2220      	movs	r2, #32
 8008c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2220      	movs	r2, #32
 8008c7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b084      	sub	sp, #16
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	60f8      	str	r0, [r7, #12]
 8008c9e:	60b9      	str	r1, [r7, #8]
 8008ca0:	603b      	str	r3, [r7, #0]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ca6:	e062      	b.n	8008d6e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cae:	d05e      	beq.n	8008d6e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cb0:	f7f8 fc8e 	bl	80015d0 <HAL_GetTick>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	69ba      	ldr	r2, [r7, #24]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d302      	bcc.n	8008cc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d11d      	bne.n	8008d02 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008cd4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	689a      	ldr	r2, [r3, #8]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f022 0201 	bic.w	r2, r2, #1
 8008ce4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2220      	movs	r2, #32
 8008cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2220      	movs	r2, #32
 8008cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e045      	b.n	8008d8e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0304 	and.w	r3, r3, #4
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d02e      	beq.n	8008d6e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	69db      	ldr	r3, [r3, #28]
 8008d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d1e:	d126      	bne.n	8008d6e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d38:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	689a      	ldr	r2, [r3, #8]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f022 0201 	bic.w	r2, r2, #1
 8008d48:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2220      	movs	r2, #32
 8008d56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2220      	movs	r2, #32
 8008d5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e00f      	b.n	8008d8e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	69da      	ldr	r2, [r3, #28]
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	4013      	ands	r3, r2
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	bf0c      	ite	eq
 8008d7e:	2301      	moveq	r3, #1
 8008d80:	2300      	movne	r3, #0
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	461a      	mov	r2, r3
 8008d86:	79fb      	ldrb	r3, [r7, #7]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d08d      	beq.n	8008ca8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b085      	sub	sp, #20
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d101      	bne.n	8008dac <HAL_UARTEx_DisableFifoMode+0x16>
 8008da8:	2302      	movs	r3, #2
 8008daa:	e027      	b.n	8008dfc <HAL_UARTEx_DisableFifoMode+0x66>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2224      	movs	r2, #36	; 0x24
 8008db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f022 0201 	bic.w	r2, r2, #1
 8008dd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008dda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2220      	movs	r2, #32
 8008dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3714      	adds	r7, #20
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d101      	bne.n	8008e20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	e02d      	b.n	8008e7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2224      	movs	r2, #36	; 0x24
 8008e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f022 0201 	bic.w	r2, r2, #1
 8008e46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 f84f 	bl	8008f00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2220      	movs	r2, #32
 8008e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d101      	bne.n	8008e9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e98:	2302      	movs	r3, #2
 8008e9a:	e02d      	b.n	8008ef8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2224      	movs	r2, #36	; 0x24
 8008ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f022 0201 	bic.w	r2, r2, #1
 8008ec2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	430a      	orrs	r2, r1
 8008ed6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f811 	bl	8008f00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2220      	movs	r2, #32
 8008eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d108      	bne.n	8008f22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f20:	e031      	b.n	8008f86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f22:	2310      	movs	r3, #16
 8008f24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f26:	2310      	movs	r3, #16
 8008f28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	0e5b      	lsrs	r3, r3, #25
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	f003 0307 	and.w	r3, r3, #7
 8008f38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	0f5b      	lsrs	r3, r3, #29
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	f003 0307 	and.w	r3, r3, #7
 8008f48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f4a:	7bbb      	ldrb	r3, [r7, #14]
 8008f4c:	7b3a      	ldrb	r2, [r7, #12]
 8008f4e:	4911      	ldr	r1, [pc, #68]	; (8008f94 <UARTEx_SetNbDataToProcess+0x94>)
 8008f50:	5c8a      	ldrb	r2, [r1, r2]
 8008f52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f56:	7b3a      	ldrb	r2, [r7, #12]
 8008f58:	490f      	ldr	r1, [pc, #60]	; (8008f98 <UARTEx_SetNbDataToProcess+0x98>)
 8008f5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
 8008f6a:	7b7a      	ldrb	r2, [r7, #13]
 8008f6c:	4909      	ldr	r1, [pc, #36]	; (8008f94 <UARTEx_SetNbDataToProcess+0x94>)
 8008f6e:	5c8a      	ldrb	r2, [r1, r2]
 8008f70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f74:	7b7a      	ldrb	r2, [r7, #13]
 8008f76:	4908      	ldr	r1, [pc, #32]	; (8008f98 <UARTEx_SetNbDataToProcess+0x98>)
 8008f78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f86:	bf00      	nop
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	080098d4 	.word	0x080098d4
 8008f98:	080098dc 	.word	0x080098dc

08008f9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	f107 001c 	add.w	r0, r7, #28
 8008faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d120      	bne.n	8008ff6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68da      	ldr	r2, [r3, #12]
 8008fc4:	4b2a      	ldr	r3, [pc, #168]	; (8009070 <USB_CoreInit+0xd4>)
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d105      	bne.n	8008fea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fa60 	bl	80094b0 <USB_CoreReset>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73fb      	strb	r3, [r7, #15]
 8008ff4:	e01a      	b.n	800902c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 fa54 	bl	80094b0 <USB_CoreReset>
 8009008:	4603      	mov	r3, r0
 800900a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800900c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800900e:	2b00      	cmp	r3, #0
 8009010:	d106      	bne.n	8009020 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009016:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	639a      	str	r2, [r3, #56]	; 0x38
 800901e:	e005      	b.n	800902c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009024:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800902c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902e:	2b01      	cmp	r3, #1
 8009030:	d116      	bne.n	8009060 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009036:	b29a      	uxth	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009040:	4b0c      	ldr	r3, [pc, #48]	; (8009074 <USB_CoreInit+0xd8>)
 8009042:	4313      	orrs	r3, r2
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f043 0206 	orr.w	r2, r3, #6
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f043 0220 	orr.w	r2, r3, #32
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009060:	7bfb      	ldrb	r3, [r7, #15]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800906c:	b004      	add	sp, #16
 800906e:	4770      	bx	lr
 8009070:	ffbdffbf 	.word	0xffbdffbf
 8009074:	03ee0000 	.word	0x03ee0000

08009078 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	f023 0201 	bic.w	r2, r3, #1
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	370c      	adds	r7, #12
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b082      	sub	sp, #8
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	460b      	mov	r3, r1
 80090a4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80090b2:	78fb      	ldrb	r3, [r7, #3]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d106      	bne.n	80090c6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	60da      	str	r2, [r3, #12]
 80090c4:	e00b      	b.n	80090de <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80090c6:	78fb      	ldrb	r3, [r7, #3]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d106      	bne.n	80090da <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	60da      	str	r2, [r3, #12]
 80090d8:	e001      	b.n	80090de <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e003      	b.n	80090e6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80090de:	2032      	movs	r0, #50	; 0x32
 80090e0:	f7f8 fa82 	bl	80015e8 <HAL_Delay>

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
	...

080090f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090f0:	b084      	sub	sp, #16
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b086      	sub	sp, #24
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
 80090fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80090fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800910a:	2300      	movs	r3, #0
 800910c:	613b      	str	r3, [r7, #16]
 800910e:	e009      	b.n	8009124 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	3340      	adds	r3, #64	; 0x40
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	4413      	add	r3, r2
 800911a:	2200      	movs	r2, #0
 800911c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	3301      	adds	r3, #1
 8009122:	613b      	str	r3, [r7, #16]
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	2b0e      	cmp	r3, #14
 8009128:	d9f2      	bls.n	8009110 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800912a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800912c:	2b00      	cmp	r3, #0
 800912e:	d11c      	bne.n	800916a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800913e:	f043 0302 	orr.w	r3, r3, #2
 8009142:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009148:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	601a      	str	r2, [r3, #0]
 8009168:	e005      	b.n	8009176 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800917c:	461a      	mov	r2, r3
 800917e:	2300      	movs	r3, #0
 8009180:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009188:	4619      	mov	r1, r3
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009190:	461a      	mov	r2, r3
 8009192:	680b      	ldr	r3, [r1, #0]
 8009194:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009198:	2b01      	cmp	r3, #1
 800919a:	d10c      	bne.n	80091b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800919c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d104      	bne.n	80091ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80091a2:	2100      	movs	r1, #0
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f949 	bl	800943c <USB_SetDevSpeed>
 80091aa:	e008      	b.n	80091be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80091ac:	2101      	movs	r1, #1
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f944 	bl	800943c <USB_SetDevSpeed>
 80091b4:	e003      	b.n	80091be <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80091b6:	2103      	movs	r1, #3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f93f 	bl	800943c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80091be:	2110      	movs	r1, #16
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f8f3 	bl	80093ac <USB_FlushTxFifo>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d001      	beq.n	80091d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f911 	bl	80093f8 <USB_FlushRxFifo>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e6:	461a      	mov	r2, r3
 80091e8:	2300      	movs	r3, #0
 80091ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f2:	461a      	mov	r2, r3
 80091f4:	2300      	movs	r3, #0
 80091f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091fe:	461a      	mov	r2, r3
 8009200:	2300      	movs	r3, #0
 8009202:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009204:	2300      	movs	r3, #0
 8009206:	613b      	str	r3, [r7, #16]
 8009208:	e043      	b.n	8009292 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	015a      	lsls	r2, r3, #5
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	4413      	add	r3, r2
 8009212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800921c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009220:	d118      	bne.n	8009254 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10a      	bne.n	800923e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	015a      	lsls	r2, r3, #5
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4413      	add	r3, r2
 8009230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009234:	461a      	mov	r2, r3
 8009236:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800923a:	6013      	str	r3, [r2, #0]
 800923c:	e013      	b.n	8009266 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	015a      	lsls	r2, r3, #5
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	4413      	add	r3, r2
 8009246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800924a:	461a      	mov	r2, r3
 800924c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009250:	6013      	str	r3, [r2, #0]
 8009252:	e008      	b.n	8009266 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	015a      	lsls	r2, r3, #5
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	4413      	add	r3, r2
 800925c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009260:	461a      	mov	r2, r3
 8009262:	2300      	movs	r3, #0
 8009264:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	4413      	add	r3, r2
 800926e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009272:	461a      	mov	r2, r3
 8009274:	2300      	movs	r3, #0
 8009276:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	015a      	lsls	r2, r3, #5
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	4413      	add	r3, r2
 8009280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009284:	461a      	mov	r2, r3
 8009286:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800928a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	3301      	adds	r3, #1
 8009290:	613b      	str	r3, [r7, #16]
 8009292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	429a      	cmp	r2, r3
 8009298:	d3b7      	bcc.n	800920a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800929a:	2300      	movs	r3, #0
 800929c:	613b      	str	r3, [r7, #16]
 800929e:	e043      	b.n	8009328 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092b6:	d118      	bne.n	80092ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10a      	bne.n	80092d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ca:	461a      	mov	r2, r3
 80092cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092d0:	6013      	str	r3, [r2, #0]
 80092d2:	e013      	b.n	80092fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	015a      	lsls	r2, r3, #5
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	4413      	add	r3, r2
 80092dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e0:	461a      	mov	r2, r3
 80092e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80092e6:	6013      	str	r3, [r2, #0]
 80092e8:	e008      	b.n	80092fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	015a      	lsls	r2, r3, #5
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	4413      	add	r3, r2
 80092f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f6:	461a      	mov	r2, r3
 80092f8:	2300      	movs	r3, #0
 80092fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	015a      	lsls	r2, r3, #5
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	4413      	add	r3, r2
 8009304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009308:	461a      	mov	r2, r3
 800930a:	2300      	movs	r3, #0
 800930c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	015a      	lsls	r2, r3, #5
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	4413      	add	r3, r2
 8009316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800931a:	461a      	mov	r2, r3
 800931c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009320:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	3301      	adds	r3, #1
 8009326:	613b      	str	r3, [r7, #16]
 8009328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	429a      	cmp	r2, r3
 800932e:	d3b7      	bcc.n	80092a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800933e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009342:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009350:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009354:	2b00      	cmp	r3, #0
 8009356:	d105      	bne.n	8009364 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	f043 0210 	orr.w	r2, r3, #16
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	699a      	ldr	r2, [r3, #24]
 8009368:	4b0e      	ldr	r3, [pc, #56]	; (80093a4 <USB_DevInit+0x2b4>)
 800936a:	4313      	orrs	r3, r2
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009372:	2b00      	cmp	r3, #0
 8009374:	d005      	beq.n	8009382 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	f043 0208 	orr.w	r2, r3, #8
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009384:	2b01      	cmp	r3, #1
 8009386:	d105      	bne.n	8009394 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	699a      	ldr	r2, [r3, #24]
 800938c:	4b06      	ldr	r3, [pc, #24]	; (80093a8 <USB_DevInit+0x2b8>)
 800938e:	4313      	orrs	r3, r2
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009394:	7dfb      	ldrb	r3, [r7, #23]
}
 8009396:	4618      	mov	r0, r3
 8009398:	3718      	adds	r7, #24
 800939a:	46bd      	mov	sp, r7
 800939c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093a0:	b004      	add	sp, #16
 80093a2:	4770      	bx	lr
 80093a4:	803c3800 	.word	0x803c3800
 80093a8:	40000004 	.word	0x40000004

080093ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80093b6:	2300      	movs	r3, #0
 80093b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	019b      	lsls	r3, r3, #6
 80093be:	f043 0220 	orr.w	r2, r3, #32
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	3301      	adds	r3, #1
 80093ca:	60fb      	str	r3, [r7, #12]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	4a09      	ldr	r2, [pc, #36]	; (80093f4 <USB_FlushTxFifo+0x48>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d901      	bls.n	80093d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80093d4:	2303      	movs	r3, #3
 80093d6:	e006      	b.n	80093e6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	f003 0320 	and.w	r3, r3, #32
 80093e0:	2b20      	cmp	r3, #32
 80093e2:	d0f0      	beq.n	80093c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	00030d40 	.word	0x00030d40

080093f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009400:	2300      	movs	r3, #0
 8009402:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2210      	movs	r2, #16
 8009408:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	3301      	adds	r3, #1
 800940e:	60fb      	str	r3, [r7, #12]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	4a09      	ldr	r2, [pc, #36]	; (8009438 <USB_FlushRxFifo+0x40>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d901      	bls.n	800941c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009418:	2303      	movs	r3, #3
 800941a:	e006      	b.n	800942a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	f003 0310 	and.w	r3, r3, #16
 8009424:	2b10      	cmp	r3, #16
 8009426:	d0f0      	beq.n	800940a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	00030d40 	.word	0x00030d40

0800943c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	460b      	mov	r3, r1
 8009446:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	78fb      	ldrb	r3, [r7, #3]
 8009456:	68f9      	ldr	r1, [r7, #12]
 8009458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800945c:	4313      	orrs	r3, r2
 800945e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800946e:	b480      	push	{r7}
 8009470:	b085      	sub	sp, #20
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009488:	f023 0303 	bic.w	r3, r3, #3
 800948c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800949c:	f043 0302 	orr.w	r3, r3, #2
 80094a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80094b8:	2300      	movs	r3, #0
 80094ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	3301      	adds	r3, #1
 80094c0:	60fb      	str	r3, [r7, #12]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	4a13      	ldr	r2, [pc, #76]	; (8009514 <USB_CoreReset+0x64>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d901      	bls.n	80094ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80094ca:	2303      	movs	r3, #3
 80094cc:	e01b      	b.n	8009506 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	daf2      	bge.n	80094bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80094d6:	2300      	movs	r3, #0
 80094d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	f043 0201 	orr.w	r2, r3, #1
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	3301      	adds	r3, #1
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	4a09      	ldr	r2, [pc, #36]	; (8009514 <USB_CoreReset+0x64>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d901      	bls.n	80094f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80094f4:	2303      	movs	r3, #3
 80094f6:	e006      	b.n	8009506 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	f003 0301 	and.w	r3, r3, #1
 8009500:	2b01      	cmp	r3, #1
 8009502:	d0f0      	beq.n	80094e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	00030d40 	.word	0x00030d40

08009518 <__libc_init_array>:
 8009518:	b570      	push	{r4, r5, r6, lr}
 800951a:	4d0d      	ldr	r5, [pc, #52]	; (8009550 <__libc_init_array+0x38>)
 800951c:	4c0d      	ldr	r4, [pc, #52]	; (8009554 <__libc_init_array+0x3c>)
 800951e:	1b64      	subs	r4, r4, r5
 8009520:	10a4      	asrs	r4, r4, #2
 8009522:	2600      	movs	r6, #0
 8009524:	42a6      	cmp	r6, r4
 8009526:	d109      	bne.n	800953c <__libc_init_array+0x24>
 8009528:	4d0b      	ldr	r5, [pc, #44]	; (8009558 <__libc_init_array+0x40>)
 800952a:	4c0c      	ldr	r4, [pc, #48]	; (800955c <__libc_init_array+0x44>)
 800952c:	f000 f82e 	bl	800958c <_init>
 8009530:	1b64      	subs	r4, r4, r5
 8009532:	10a4      	asrs	r4, r4, #2
 8009534:	2600      	movs	r6, #0
 8009536:	42a6      	cmp	r6, r4
 8009538:	d105      	bne.n	8009546 <__libc_init_array+0x2e>
 800953a:	bd70      	pop	{r4, r5, r6, pc}
 800953c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009540:	4798      	blx	r3
 8009542:	3601      	adds	r6, #1
 8009544:	e7ee      	b.n	8009524 <__libc_init_array+0xc>
 8009546:	f855 3b04 	ldr.w	r3, [r5], #4
 800954a:	4798      	blx	r3
 800954c:	3601      	adds	r6, #1
 800954e:	e7f2      	b.n	8009536 <__libc_init_array+0x1e>
 8009550:	080098ec 	.word	0x080098ec
 8009554:	080098ec 	.word	0x080098ec
 8009558:	080098ec 	.word	0x080098ec
 800955c:	080098f0 	.word	0x080098f0

08009560 <memcpy>:
 8009560:	440a      	add	r2, r1
 8009562:	4291      	cmp	r1, r2
 8009564:	f100 33ff 	add.w	r3, r0, #4294967295
 8009568:	d100      	bne.n	800956c <memcpy+0xc>
 800956a:	4770      	bx	lr
 800956c:	b510      	push	{r4, lr}
 800956e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009572:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009576:	4291      	cmp	r1, r2
 8009578:	d1f9      	bne.n	800956e <memcpy+0xe>
 800957a:	bd10      	pop	{r4, pc}

0800957c <memset>:
 800957c:	4402      	add	r2, r0
 800957e:	4603      	mov	r3, r0
 8009580:	4293      	cmp	r3, r2
 8009582:	d100      	bne.n	8009586 <memset+0xa>
 8009584:	4770      	bx	lr
 8009586:	f803 1b01 	strb.w	r1, [r3], #1
 800958a:	e7f9      	b.n	8009580 <memset+0x4>

0800958c <_init>:
 800958c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958e:	bf00      	nop
 8009590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009592:	bc08      	pop	{r3}
 8009594:	469e      	mov	lr, r3
 8009596:	4770      	bx	lr

08009598 <_fini>:
 8009598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959a:	bf00      	nop
 800959c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800959e:	bc08      	pop	{r3}
 80095a0:	469e      	mov	lr, r3
 80095a2:	4770      	bx	lr
