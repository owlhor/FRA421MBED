
H745_Dualcore_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ed4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800616c  0800616c  0001616c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061a4  080061a4  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080061a4  080061a4  000161a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061ac  080061ac  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061ac  080061ac  000161ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061b0  080061b0  000161b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080061b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  080061c4  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08006224  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006b4  240000d0  08006284  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000784  08006284  00020784  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000193aa  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000028db  00000000  00000000  000394a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001030  00000000  00000000  0003bd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000f48  00000000  00000000  0003cdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a30b  00000000  00000000  0003dd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000146b0  00000000  00000000  0007800b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00180149  00000000  00000000  0008c6bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0020c804  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000449c  00000000  00000000  0020c854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006154 	.word	0x08006154

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006154 	.word	0x08006154

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b45      	ldr	r3, [pc, #276]	; (800082c <main+0x124>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 fa53 	bl	8000bdc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fc81 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f87f 	bl	800083c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b3b      	ldr	r3, [pc, #236]	; (800082c <main+0x124>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a39      	ldr	r2, [pc, #228]	; (800082c <main+0x124>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b37      	ldr	r3, [pc, #220]	; (800082c <main+0x124>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f001 fc51 	bl	8002004 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f001 fc67 	bl	8002038 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b2e      	ldr	r3, [pc, #184]	; (800082c <main+0x124>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 fa25 	bl	8000bdc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f9a1 	bl	8000ad8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000796:	f000 f8d5 	bl	8000944 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800079a:	f000 f91f 	bl	80009dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800079e:	f000 f969 	bl	8000a74 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SRAM4->state1);
 80007a2:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	461a      	mov	r2, r3
 80007ac:	2101      	movs	r1, #1
 80007ae:	4820      	ldr	r0, [pc, #128]	; (8000830 <main+0x128>)
 80007b0:	f001 fbd2 	bl	8001f58 <HAL_GPIO_WritePin>
	  chk2 = SRAM4->state1;
 80007b4:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <main+0x12c>)
 80007bc:	6013      	str	r3, [r2, #0]

	  if(HAL_GetTick()-timestamp_ld2 >= 500){
 80007be:	f000 fcc3 	bl	8001148 <HAL_GetTick>
 80007c2:	4602      	mov	r2, r0
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <main+0x130>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007ce:	d309      	bcc.n	80007e4 <main+0xdc>
		  timestamp_ld2 = HAL_GetTick();
 80007d0:	f000 fcba 	bl	8001148 <HAL_GetTick>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4a18      	ldr	r2, [pc, #96]	; (8000838 <main+0x130>)
 80007d8:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007de:	4814      	ldr	r0, [pc, #80]	; (8000830 <main+0x128>)
 80007e0:	f001 fbd3 	bl	8001f8a <HAL_GPIO_TogglePin>

	  register int i;

	  //// if semaphore ok -> instantly lock

	  if(HAL_HSEM_Take(5, 8) == HAL_OK){
 80007e4:	2108      	movs	r1, #8
 80007e6:	2005      	movs	r0, #5
 80007e8:	f001 fbea 	bl	8001fc0 <HAL_HSEM_Take>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d117      	bne.n	8000822 <main+0x11a>

		  //// Same task as above
		  for(i = 0; i < 500;i++){
 80007f2:	2400      	movs	r4, #0
 80007f4:	e00e      	b.n	8000814 <main+0x10c>

		  		  //// checkif SRAM4->DATA[i] != SRAM4->DATA[0] unequal
		  		  //// if unequal -> CM4 is writing while CM7 is reading
		  		  //// if data not sync -> crash for(;;);
		  		  if(SRAM4->DATA[i] != SRAM4->DATA[0]){
 80007f6:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 80007fa:	00a3      	lsls	r3, r4, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	685a      	ldr	r2, [r3, #4]
 8000800:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	429a      	cmp	r2, r3
 8000808:	d003      	beq.n	8000812 <main+0x10a>
		  			  //for(;;);
		  			  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800080a:	2101      	movs	r1, #1
 800080c:	4808      	ldr	r0, [pc, #32]	; (8000830 <main+0x128>)
 800080e:	f001 fbbc 	bl	8001f8a <HAL_GPIO_TogglePin>
		  for(i = 0; i < 500;i++){
 8000812:	3401      	adds	r4, #1
 8000814:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 8000818:	dbed      	blt.n	80007f6 <main+0xee>
		  		  }
		  	  }
	  HAL_HSEM_Release(5, 8);
 800081a:	2108      	movs	r1, #8
 800081c:	2005      	movs	r0, #5
 800081e:	f001 fc0b 	bl	8002038 <HAL_HSEM_Release>
	  }
	  HAL_Delay(1);
 8000822:	2001      	movs	r0, #1
 8000824:	f000 fc9c 	bl	8001160 <HAL_Delay>
  {
 8000828:	e7bb      	b.n	80007a2 <main+0x9a>
 800082a:	bf00      	nop
 800082c:	58024400 	.word	0x58024400
 8000830:	58020400 	.word	0x58020400
 8000834:	24000774 	.word	0x24000774
 8000838:	24000770 	.word	0x24000770

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b09c      	sub	sp, #112	; 0x70
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000846:	224c      	movs	r2, #76	; 0x4c
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f005 fc7a 	bl	8006144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2220      	movs	r2, #32
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f005 fc74 	bl	8006144 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800085c:	2004      	movs	r0, #4
 800085e:	f001 fd47 	bl	80022f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b34      	ldr	r3, [pc, #208]	; (8000938 <SystemClock_Config+0xfc>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	4a33      	ldr	r2, [pc, #204]	; (8000938 <SystemClock_Config+0xfc>)
 800086c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000870:	6193      	str	r3, [r2, #24]
 8000872:	4b31      	ldr	r3, [pc, #196]	; (8000938 <SystemClock_Config+0xfc>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	4b2f      	ldr	r3, [pc, #188]	; (800093c <SystemClock_Config+0x100>)
 800087e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000880:	4a2e      	ldr	r2, [pc, #184]	; (800093c <SystemClock_Config+0x100>)
 8000882:	f043 0301 	orr.w	r3, r3, #1
 8000886:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000888:	4b2c      	ldr	r3, [pc, #176]	; (800093c <SystemClock_Config+0x100>)
 800088a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000894:	bf00      	nop
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <SystemClock_Config+0xfc>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800089e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008a2:	d1f8      	bne.n	8000896 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80008a4:	4b26      	ldr	r3, [pc, #152]	; (8000940 <SystemClock_Config+0x104>)
 80008a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a8:	f023 0303 	bic.w	r3, r3, #3
 80008ac:	4a24      	ldr	r2, [pc, #144]	; (8000940 <SystemClock_Config+0x104>)
 80008ae:	f043 0302 	orr.w	r3, r3, #2
 80008b2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b4:	2301      	movs	r3, #1
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	2302      	movs	r3, #2
 80008c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c2:	2302      	movs	r3, #2
 80008c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80008ca:	2378      	movs	r3, #120	; 0x78
 80008cc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008da:	230c      	movs	r3, #12
 80008dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008de:	2300      	movs	r3, #0
 80008e0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 fd6a 	bl	80023c4 <HAL_RCC_OscConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80008f6:	f000 f971 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	233f      	movs	r3, #63	; 0x3f
 80008fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fe:	2303      	movs	r3, #3
 8000900:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000906:	2308      	movs	r3, #8
 8000908:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800090a:	2340      	movs	r3, #64	; 0x40
 800090c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800090e:	2340      	movs	r3, #64	; 0x40
 8000910:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000916:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000918:	2340      	movs	r3, #64	; 0x40
 800091a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2104      	movs	r1, #4
 8000920:	4618      	mov	r0, r3
 8000922:	f002 f97d 	bl	8002c20 <HAL_RCC_ClockConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800092c:	f000 f956 	bl	8000bdc <Error_Handler>
  }
}
 8000930:	bf00      	nop
 8000932:	3770      	adds	r7, #112	; 0x70
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	58024800 	.word	0x58024800
 800093c:	58000400 	.word	0x58000400
 8000940:	58024400 	.word	0x58024400

08000944 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <MX_ETH_Init+0x80>)
 800094a:	4a1f      	ldr	r2, [pc, #124]	; (80009c8 <MX_ETH_Init+0x84>)
 800094c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_ETH_Init+0x88>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_ETH_Init+0x88>)
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_ETH_Init+0x88>)
 800095c:	22e1      	movs	r2, #225	; 0xe1
 800095e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_ETH_Init+0x88>)
 8000962:	2200      	movs	r2, #0
 8000964:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_ETH_Init+0x88>)
 8000968:	2200      	movs	r2, #0
 800096a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_ETH_Init+0x88>)
 800096e:	2200      	movs	r2, #0
 8000970:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_ETH_Init+0x80>)
 8000974:	4a15      	ldr	r2, [pc, #84]	; (80009cc <MX_ETH_Init+0x88>)
 8000976:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_ETH_Init+0x80>)
 800097a:	2201      	movs	r2, #1
 800097c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_ETH_Init+0x80>)
 8000980:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <MX_ETH_Init+0x8c>)
 8000982:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_ETH_Init+0x80>)
 8000986:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <MX_ETH_Init+0x90>)
 8000988:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_ETH_Init+0x80>)
 800098c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000990:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000992:	480c      	ldr	r0, [pc, #48]	; (80009c4 <MX_ETH_Init+0x80>)
 8000994:	f000 fd0c 	bl	80013b0 <HAL_ETH_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800099e:	f000 f91d 	bl	8000bdc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009a2:	2238      	movs	r2, #56	; 0x38
 80009a4:	2100      	movs	r1, #0
 80009a6:	480c      	ldr	r0, [pc, #48]	; (80009d8 <MX_ETH_Init+0x94>)
 80009a8:	f005 fbcc 	bl	8006144 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_ETH_Init+0x94>)
 80009ae:	2221      	movs	r2, #33	; 0x21
 80009b0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_ETH_Init+0x94>)
 80009b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009b8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <MX_ETH_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	24000124 	.word	0x24000124
 80009c8:	40028000 	.word	0x40028000
 80009cc:	24000778 	.word	0x24000778
 80009d0:	24000070 	.word	0x24000070
 80009d4:	24000010 	.word	0x24000010
 80009d8:	240000ec 	.word	0x240000ec

080009dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e0:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 80009e2:	4a23      	ldr	r2, [pc, #140]	; (8000a70 <MX_USART3_UART_Init+0x94>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a24:	4811      	ldr	r0, [pc, #68]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a26:	f003 ffef 	bl	8004a08 <HAL_UART_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a30:	f000 f8d4 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a34:	2100      	movs	r1, #0
 8000a36:	480d      	ldr	r0, [pc, #52]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a38:	f004 ff8c 	bl	8005954 <HAL_UARTEx_SetTxFifoThreshold>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a42:	f000 f8cb 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a4a:	f004 ffc1 	bl	80059d0 <HAL_UARTEx_SetRxFifoThreshold>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a54:	f000 f8c2 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a5a:	f004 ff42 	bl	80058e2 <HAL_UARTEx_DisableFifoMode>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a64:	f000 f8ba 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	240001d4 	.word	0x240001d4
 8000a70:	40004800 	.word	0x40004800

08000a74 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a7a:	4a16      	ldr	r2, [pc, #88]	; (8000ad4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a7e:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a80:	2209      	movs	r2, #9
 8000a82:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a86:	2202      	movs	r2, #2
 8000a88:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000abc:	f001 fad0 	bl	8002060 <HAL_PCD_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ac6:	f000 f889 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	24000264 	.word	0x24000264
 8000ad4:	40080000 	.word	0x40080000

08000ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08c      	sub	sp, #48	; 0x30
 8000adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	4b39      	ldr	r3, [pc, #228]	; (8000bd4 <MX_GPIO_Init+0xfc>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af4:	4a37      	ldr	r2, [pc, #220]	; (8000bd4 <MX_GPIO_Init+0xfc>)
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afe:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b04:	f003 0304 	and.w	r3, r3, #4
 8000b08:	61bb      	str	r3, [r7, #24]
 8000b0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0c:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b12:	4a30      	ldr	r2, [pc, #192]	; (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1c:	4b2d      	ldr	r3, [pc, #180]	; (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b30:	4a28      	ldr	r2, [pc, #160]	; (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3a:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4e:	4a21      	ldr	r2, [pc, #132]	; (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b58:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6c:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b6e:	f043 0308 	orr.w	r3, r3, #8
 8000b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7c:	f003 0308 	and.w	r3, r3, #8
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ba8:	480b      	ldr	r0, [pc, #44]	; (8000bd8 <MX_GPIO_Init+0x100>)
 8000baa:	f001 f9d5 	bl	8001f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bae:	f244 0301 	movw	r3, #16385	; 0x4001
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_GPIO_Init+0x100>)
 8000bc8:	f001 f816 	bl	8001bf8 <HAL_GPIO_Init>

}
 8000bcc:	bf00      	nop
 8000bce:	3730      	adds	r7, #48	; 0x30
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	58024400 	.word	0x58024400
 8000bd8:	58020400 	.word	0x58020400

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_MspInit+0x30>)
 8000bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bf4:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_MspInit+0x30>)
 8000bf6:	f043 0302 	orr.w	r3, r3, #2
 8000bfa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_MspInit+0x30>)
 8000c00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	58024400 	.word	0x58024400

08000c1c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08e      	sub	sp, #56	; 0x38
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a59      	ldr	r2, [pc, #356]	; (8000da0 <HAL_ETH_MspInit+0x184>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	f040 80ab 	bne.w	8000d96 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c40:	4b58      	ldr	r3, [pc, #352]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c46:	4a57      	ldr	r2, [pc, #348]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c4c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c50:	4b54      	ldr	r3, [pc, #336]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c5a:	623b      	str	r3, [r7, #32]
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c5e:	4b51      	ldr	r3, [pc, #324]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c64:	4a4f      	ldr	r2, [pc, #316]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c6e:	4b4d      	ldr	r3, [pc, #308]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c7c:	4b49      	ldr	r3, [pc, #292]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c82:	4a48      	ldr	r2, [pc, #288]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c8c:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	61bb      	str	r3, [r7, #24]
 8000c98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	4a40      	ldr	r2, [pc, #256]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000caa:	4b3e      	ldr	r3, [pc, #248]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b3a      	ldr	r3, [pc, #232]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbe:	4a39      	ldr	r2, [pc, #228]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc8:	4b36      	ldr	r3, [pc, #216]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cdc:	4a31      	ldr	r2, [pc, #196]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cde:	f043 0302 	orr.w	r3, r3, #2
 8000ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf4:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfa:	4a2a      	ldr	r2, [pc, #168]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d04:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <HAL_ETH_MspInit+0x188>)
 8000d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d12:	2332      	movs	r3, #50	; 0x32
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d22:	230b      	movs	r3, #11
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	481e      	ldr	r0, [pc, #120]	; (8000da8 <HAL_ETH_MspInit+0x18c>)
 8000d2e:	f000 ff63 	bl	8001bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d32:	2386      	movs	r3, #134	; 0x86
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d42:	230b      	movs	r3, #11
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4817      	ldr	r0, [pc, #92]	; (8000dac <HAL_ETH_MspInit+0x190>)
 8000d4e:	f000 ff53 	bl	8001bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d64:	230b      	movs	r3, #11
 8000d66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4810      	ldr	r0, [pc, #64]	; (8000db0 <HAL_ETH_MspInit+0x194>)
 8000d70:	f000 ff42 	bl	8001bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d86:	230b      	movs	r3, #11
 8000d88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4808      	ldr	r0, [pc, #32]	; (8000db4 <HAL_ETH_MspInit+0x198>)
 8000d92:	f000 ff31 	bl	8001bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3738      	adds	r7, #56	; 0x38
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40028000 	.word	0x40028000
 8000da4:	58024400 	.word	0x58024400
 8000da8:	58020800 	.word	0x58020800
 8000dac:	58020000 	.word	0x58020000
 8000db0:	58020400 	.word	0x58020400
 8000db4:	58021800 	.word	0x58021800

08000db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b0b8      	sub	sp, #224	; 0xe0
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	22bc      	movs	r2, #188	; 0xbc
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f005 f9b3 	bl	8006144 <memset>
  if(huart->Instance==USART3)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a25      	ldr	r2, [pc, #148]	; (8000e78 <HAL_UART_MspInit+0xc0>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d142      	bne.n	8000e6e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000de8:	2302      	movs	r3, #2
 8000dea:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df2:	f107 0310 	add.w	r3, r7, #16
 8000df6:	4618      	mov	r0, r3
 8000df8:	f002 fa9e 	bl	8003338 <HAL_RCCEx_PeriphCLKConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e02:	f7ff feeb 	bl	8000bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e06:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e0c:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2a:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e2c:	f043 0308 	orr.w	r3, r3, #8
 8000e30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e5c:	2307      	movs	r3, #7
 8000e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e62:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e66:	4619      	mov	r1, r3
 8000e68:	4805      	ldr	r0, [pc, #20]	; (8000e80 <HAL_UART_MspInit+0xc8>)
 8000e6a:	f000 fec5 	bl	8001bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	37e0      	adds	r7, #224	; 0xe0
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40004800 	.word	0x40004800
 8000e7c:	58024400 	.word	0x58024400
 8000e80:	58020c00 	.word	0x58020c00

08000e84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0b8      	sub	sp, #224	; 0xe0
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	22bc      	movs	r2, #188	; 0xbc
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f005 f94d 	bl	8006144 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a36      	ldr	r2, [pc, #216]	; (8000f88 <HAL_PCD_MspInit+0x104>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d165      	bne.n	8000f80 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000eb4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000eb8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000ebe:	2318      	movs	r3, #24
 8000ec0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000ece:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ed2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000ed8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000edc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f002 fa27 	bl	8003338 <HAL_RCCEx_PeriphCLKConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000ef0:	f7ff fe74 	bl	8000bdc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000ef4:	f001 fa56 	bl	80023a4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef8:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <HAL_PCD_MspInit+0x108>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efe:	4a23      	ldr	r2, [pc, #140]	; (8000f8c <HAL_PCD_MspInit+0x108>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f08:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <HAL_PCD_MspInit+0x108>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f16:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f30:	230a      	movs	r3, #10
 8000f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4814      	ldr	r0, [pc, #80]	; (8000f90 <HAL_PCD_MspInit+0x10c>)
 8000f3e:	f000 fe5b 	bl	8001bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480c      	ldr	r0, [pc, #48]	; (8000f90 <HAL_PCD_MspInit+0x10c>)
 8000f5e:	f000 fe4b 	bl	8001bf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_PCD_MspInit+0x108>)
 8000f64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f68:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <HAL_PCD_MspInit+0x108>)
 8000f6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f6e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_PCD_MspInit+0x108>)
 8000f74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f80:	bf00      	nop
 8000f82:	37e0      	adds	r7, #224	; 0xe0
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40080000 	.word	0x40080000
 8000f8c:	58024400 	.word	0x58024400
 8000f90:	58020000 	.word	0x58020000

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <NMI_Handler+0x4>

08000f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe0:	f000 f89e 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001020 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fec:	f7ff faf6 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ff2:	490d      	ldr	r1, [pc, #52]	; (8001028 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	; (800102c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001008:	4c0a      	ldr	r4, [pc, #40]	; (8001034 <LoopFillZerobss+0x22>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001016:	f005 f871 	bl	80060fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101a:	f7ff fb75 	bl	8000708 <main>
  bx  lr
 800101e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001020:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001024:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001028:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800102c:	080061b4 	.word	0x080061b4
  ldr r2, =_sbss
 8001030:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001034:	24000784 	.word	0x24000784

08001038 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC3_IRQHandler>
	...

0800103c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001042:	2003      	movs	r0, #3
 8001044:	f000 f982 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001048:	f001 ffa0 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 800104c:	4602      	mov	r2, r0
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_Init+0x68>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	0a1b      	lsrs	r3, r3, #8
 8001054:	f003 030f 	and.w	r3, r3, #15
 8001058:	4913      	ldr	r1, [pc, #76]	; (80010a8 <HAL_Init+0x6c>)
 800105a:	5ccb      	ldrb	r3, [r1, r3]
 800105c:	f003 031f 	and.w	r3, r3, #31
 8001060:	fa22 f303 	lsr.w	r3, r2, r3
 8001064:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <HAL_Init+0x68>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <HAL_Init+0x6c>)
 8001070:	5cd3      	ldrb	r3, [r2, r3]
 8001072:	f003 031f 	and.w	r3, r3, #31
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	fa22 f303 	lsr.w	r3, r2, r3
 800107c:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <HAL_Init+0x70>)
 800107e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001080:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <HAL_Init+0x74>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001086:	2000      	movs	r0, #0
 8001088:	f000 f814 	bl	80010b4 <HAL_InitTick>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e002      	b.n	800109c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001096:	f7ff fda7 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	58024400 	.word	0x58024400
 80010a8:	0800616c 	.word	0x0800616c
 80010ac:	24000004 	.word	0x24000004
 80010b0:	24000000 	.word	0x24000000

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_InitTick+0x60>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e021      	b.n	800110c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <HAL_InitTick+0x64>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_InitTick+0x60>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f959 	bl	8001396 <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00e      	b.n	800110c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d80a      	bhi.n	800110a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f000 f931 	bl	8001362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <HAL_InitTick+0x68>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2400000c 	.word	0x2400000c
 8001118:	24000000 	.word	0x24000000
 800111c:	24000008 	.word	0x24000008

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	2400000c 	.word	0x2400000c
 8001144:	24000780 	.word	0x24000780

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	24000780 	.word	0x24000780

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff ffee 	bl	8001148 <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001178:	d005      	beq.n	8001186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_Delay+0x44>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001186:	bf00      	nop
 8001188:	f7ff ffde 	bl	8001148 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f7      	bhi.n	8001188 <HAL_Delay+0x28>
  {
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2400000c 	.word	0x2400000c

080011a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <HAL_GetREVID+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	0c1b      	lsrs	r3, r3, #16
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	5c001000 	.word	0x5c001000

080011c0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80011d0:	4904      	ldr	r1, [pc, #16]	; (80011e4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	58000400 	.word	0x58000400

080011e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <__NVIC_SetPriorityGrouping+0x40>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	4313      	orrs	r3, r2
 8001214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <__NVIC_SetPriorityGrouping+0x40>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	60d3      	str	r3, [r2, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00
 800122c:	05fa0000 	.word	0x05fa0000

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	; (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	; (800129c <__NVIC_SetPriority+0x50>)
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff8e 	bl	800124c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff47 	bl	80011e8 <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff5e 	bl	8001230 <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ff90 	bl	80012a0 <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff5f 	bl	800124c <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ffb2 	bl	8001308 <SysTick_Config>
 80013a4:	4603      	mov	r3, r0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e0cf      	b.n	8001562 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d106      	bne.n	80013da <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2223      	movs	r2, #35	; 0x23
 80013d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fc21 	bl	8000c1c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	4b64      	ldr	r3, [pc, #400]	; (800156c <HAL_ETH_Init+0x1bc>)
 80013dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013e0:	4a62      	ldr	r2, [pc, #392]	; (800156c <HAL_ETH_Init+0x1bc>)
 80013e2:	f043 0302 	orr.w	r3, r3, #2
 80013e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013ea:	4b60      	ldr	r3, [pc, #384]	; (800156c <HAL_ETH_Init+0x1bc>)
 80013ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	7a1b      	ldrb	r3, [r3, #8]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d103      	bne.n	8001408 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff fedd 	bl	80011c0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001406:	e003      	b.n	8001410 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001408:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800140c:	f7ff fed8 	bl	80011c0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001410:	4b57      	ldr	r3, [pc, #348]	; (8001570 <HAL_ETH_Init+0x1c0>)
 8001412:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800142a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800142c:	f7ff fe8c 	bl	8001148 <HAL_GetTick>
 8001430:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001432:	e011      	b.n	8001458 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001434:	f7ff fe88 	bl	8001148 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001442:	d909      	bls.n	8001458 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2204      	movs	r2, #4
 8001448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	22e0      	movs	r2, #224	; 0xe0
 8001450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e084      	b.n	8001562 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1e4      	bne.n	8001434 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f886 	bl	800157c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001470:	f001 ff06 	bl	8003280 <HAL_RCC_GetHCLKFreq>
 8001474:	4603      	mov	r3, r0
 8001476:	4a3f      	ldr	r2, [pc, #252]	; (8001574 <HAL_ETH_Init+0x1c4>)
 8001478:	fba2 2303 	umull	r2, r3, r2, r3
 800147c:	0c9a      	lsrs	r2, r3, #18
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	3a01      	subs	r2, #1
 8001484:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 fa71 	bl	8001970 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001496:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800149a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014aa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d009      	beq.n	80014ce <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	22e0      	movs	r2, #224	; 0xe0
 80014c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e049      	b.n	8001562 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80014da:	4b27      	ldr	r3, [pc, #156]	; (8001578 <HAL_ETH_Init+0x1c8>)
 80014dc:	4013      	ands	r3, r2
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6952      	ldr	r2, [r2, #20]
 80014e2:	0051      	lsls	r1, r2, #1
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	430b      	orrs	r3, r1
 80014ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014ee:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 fad9 	bl	8001aaa <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 fb1f 	bl	8001b3c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	3305      	adds	r3, #5
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	021a      	lsls	r2, r3, #8
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	3304      	adds	r3, #4
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	3303      	adds	r3, #3
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	061a      	lsls	r2, r3, #24
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	3302      	adds	r3, #2
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	041b      	lsls	r3, r3, #16
 8001530:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	3301      	adds	r3, #1
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800153c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800154a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800154c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2210      	movs	r2, #16
 800155c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	58024400 	.word	0x58024400
 8001570:	58000400 	.word	0x58000400
 8001574:	431bde83 	.word	0x431bde83
 8001578:	ffff8001 	.word	0xffff8001

0800157c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800158c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001594:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001596:	f001 fe73 	bl	8003280 <HAL_RCC_GetHCLKFreq>
 800159a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	4a1e      	ldr	r2, [pc, #120]	; (8001618 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d908      	bls.n	80015b6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	4a1d      	ldr	r2, [pc, #116]	; (800161c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d804      	bhi.n	80015b6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	e027      	b.n	8001606 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	4a18      	ldr	r2, [pc, #96]	; (800161c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d908      	bls.n	80015d0 <HAL_ETH_SetMDIOClockRange+0x54>
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d204      	bcs.n	80015d0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	e01a      	b.n	8001606 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	4a13      	ldr	r2, [pc, #76]	; (8001620 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d303      	bcc.n	80015e0 <HAL_ETH_SetMDIOClockRange+0x64>
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d911      	bls.n	8001604 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d908      	bls.n	80015fa <HAL_ETH_SetMDIOClockRange+0x7e>
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <HAL_ETH_SetMDIOClockRange+0xac>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d804      	bhi.n	80015fa <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	e005      	b.n	8001606 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	e000      	b.n	8001606 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001604:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	01312cff 	.word	0x01312cff
 800161c:	02160ebf 	.word	0x02160ebf
 8001620:	03938700 	.word	0x03938700
 8001624:	05f5e0ff 	.word	0x05f5e0ff
 8001628:	08f0d17f 	.word	0x08f0d17f

0800162c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800163e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	791b      	ldrb	r3, [r3, #4]
 8001644:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001646:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	7b1b      	ldrb	r3, [r3, #12]
 800164c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800164e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	7b5b      	ldrb	r3, [r3, #13]
 8001654:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001656:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	7b9b      	ldrb	r3, [r3, #14]
 800165c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800165e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	7bdb      	ldrb	r3, [r3, #15]
 8001664:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001666:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	7c12      	ldrb	r2, [r2, #16]
 800166c:	2a00      	cmp	r2, #0
 800166e:	d102      	bne.n	8001676 <ETH_SetMACConfig+0x4a>
 8001670:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001674:	e000      	b.n	8001678 <ETH_SetMACConfig+0x4c>
 8001676:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001678:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	7c52      	ldrb	r2, [r2, #17]
 800167e:	2a00      	cmp	r2, #0
 8001680:	d102      	bne.n	8001688 <ETH_SetMACConfig+0x5c>
 8001682:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001686:	e000      	b.n	800168a <ETH_SetMACConfig+0x5e>
 8001688:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800168a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	7c9b      	ldrb	r3, [r3, #18]
 8001690:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001692:	431a      	orrs	r2, r3
               macconf->Speed |
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001698:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800169e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	7f1b      	ldrb	r3, [r3, #28]
 80016a4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80016a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	7f5b      	ldrb	r3, [r3, #29]
 80016ac:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80016ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	7f92      	ldrb	r2, [r2, #30]
 80016b4:	2a00      	cmp	r2, #0
 80016b6:	d102      	bne.n	80016be <ETH_SetMACConfig+0x92>
 80016b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016bc:	e000      	b.n	80016c0 <ETH_SetMACConfig+0x94>
 80016be:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80016c0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	7fdb      	ldrb	r3, [r3, #31]
 80016c6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80016c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	f892 2020 	ldrb.w	r2, [r2, #32]
 80016d0:	2a00      	cmp	r2, #0
 80016d2:	d102      	bne.n	80016da <ETH_SetMACConfig+0xae>
 80016d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016d8:	e000      	b.n	80016dc <ETH_SetMACConfig+0xb0>
 80016da:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80016dc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80016e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80016ea:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80016ec:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b56      	ldr	r3, [pc, #344]	; (8001858 <ETH_SetMACConfig+0x22c>)
 80016fe:	4013      	ands	r3, r2
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	68f9      	ldr	r1, [r7, #12]
 8001706:	430b      	orrs	r3, r1
 8001708:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001716:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001718:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001720:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001722:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800172a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800172c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001734:	2a00      	cmp	r2, #0
 8001736:	d102      	bne.n	800173e <ETH_SetMACConfig+0x112>
 8001738:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800173c:	e000      	b.n	8001740 <ETH_SetMACConfig+0x114>
 800173e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001740:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001746:	4313      	orrs	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	4b42      	ldr	r3, [pc, #264]	; (800185c <ETH_SetMACConfig+0x230>)
 8001752:	4013      	ands	r3, r2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	68f9      	ldr	r1, [r7, #12]
 800175a:	430b      	orrs	r3, r1
 800175c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001764:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800176a:	4313      	orrs	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	4b3a      	ldr	r3, [pc, #232]	; (8001860 <ETH_SetMACConfig+0x234>)
 8001776:	4013      	ands	r3, r2
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	68f9      	ldr	r1, [r7, #12]
 800177e:	430b      	orrs	r3, r1
 8001780:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001788:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800178e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001796:	2a00      	cmp	r2, #0
 8001798:	d101      	bne.n	800179e <ETH_SetMACConfig+0x172>
 800179a:	2280      	movs	r2, #128	; 0x80
 800179c:	e000      	b.n	80017a0 <ETH_SetMACConfig+0x174>
 800179e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80017a0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80017a8:	4313      	orrs	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80017b2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80017b6:	4013      	ands	r3, r2
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	68f9      	ldr	r1, [r7, #12]
 80017be:	430b      	orrs	r3, r1
 80017c0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80017c8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80017d0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017de:	f023 0103 	bic.w	r1, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80017f6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001812:	2a00      	cmp	r2, #0
 8001814:	d101      	bne.n	800181a <ETH_SetMACConfig+0x1ee>
 8001816:	2240      	movs	r2, #64	; 0x40
 8001818:	e000      	b.n	800181c <ETH_SetMACConfig+0x1f0>
 800181a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800181c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001824:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001826:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800182e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001830:	4313      	orrs	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800183c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	430a      	orrs	r2, r1
 8001848:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	00048083 	.word	0x00048083
 800185c:	c0f88000 	.word	0xc0f88000
 8001860:	fffffef0 	.word	0xfffffef0

08001864 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b38      	ldr	r3, [pc, #224]	; (800195c <ETH_SetDMAConfig+0xf8>)
 800187a:	4013      	ands	r3, r2
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	6811      	ldr	r1, [r2, #0]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	430b      	orrs	r3, r1
 8001886:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800188a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	791b      	ldrb	r3, [r3, #4]
 8001890:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001896:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	7b1b      	ldrb	r3, [r3, #12]
 800189c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800189e:	4313      	orrs	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <ETH_SetDMAConfig+0xfc>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	68f9      	ldr	r1, [r7, #12]
 80018b6:	430b      	orrs	r3, r1
 80018b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018bc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	7b5b      	ldrb	r3, [r3, #13]
 80018c2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80018c8:	4313      	orrs	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80018d8:	4b22      	ldr	r3, [pc, #136]	; (8001964 <ETH_SetDMAConfig+0x100>)
 80018da:	4013      	ands	r3, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	68f9      	ldr	r1, [r7, #12]
 80018e2:	430b      	orrs	r3, r1
 80018e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018e8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	7d1b      	ldrb	r3, [r3, #20]
 80018f4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80018f6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	7f5b      	ldrb	r3, [r3, #29]
 80018fc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80018fe:	4313      	orrs	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800190a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <ETH_SetDMAConfig+0x104>)
 8001910:	4013      	ands	r3, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6812      	ldr	r2, [r2, #0]
 8001916:	68f9      	ldr	r1, [r7, #12]
 8001918:	430b      	orrs	r3, r1
 800191a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800191e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	7f1b      	ldrb	r3, [r3, #28]
 8001926:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800192c:	4313      	orrs	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001938:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <ETH_SetDMAConfig+0x108>)
 800193e:	4013      	ands	r3, r2
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	68f9      	ldr	r1, [r7, #12]
 8001946:	430b      	orrs	r3, r1
 8001948:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800194c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	ffff87fd 	.word	0xffff87fd
 8001960:	ffff2ffe 	.word	0xffff2ffe
 8001964:	fffec000 	.word	0xfffec000
 8001968:	ffc0efef 	.word	0xffc0efef
 800196c:	7fc0ffff 	.word	0x7fc0ffff

08001970 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b0a4      	sub	sp, #144	; 0x90
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001978:	2301      	movs	r3, #1
 800197a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800197e:	2300      	movs	r3, #0
 8001980:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800198e:	2301      	movs	r3, #1
 8001990:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001994:	2301      	movs	r3, #1
 8001996:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800199a:	2301      	movs	r3, #1
 800199c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80019a6:	2301      	movs	r3, #1
 80019a8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80019ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80019c8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80019cc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80019d4:	2300      	movs	r3, #0
 80019d6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80019d8:	2301      	movs	r3, #1
 80019da:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80019ea:	2300      	movs	r3, #0
 80019ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80019f2:	2300      	movs	r3, #0
 80019f4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a02:	2301      	movs	r3, #1
 8001a04:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001a08:	2320      	movs	r3, #32
 8001a0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001a1a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a24:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001a44:	2301      	movs	r3, #1
 8001a46:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a58:	4619      	mov	r1, r3
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff fde6 	bl	800162c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a60:	2301      	movs	r3, #1
 8001a62:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a64:	2301      	movs	r3, #1
 8001a66:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a7a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a7e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a88:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001a90:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a96:	f107 0308 	add.w	r3, r7, #8
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff fee1 	bl	8001864 <ETH_SetDMAConfig>
}
 8001aa2:	bf00      	nop
 8001aa4:	3790      	adds	r7, #144	; 0x90
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	e01d      	b.n	8001af4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68d9      	ldr	r1, [r3, #12]
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	440b      	add	r3, r1
 8001ac8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001ae2:	68b9      	ldr	r1, [r7, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	3206      	adds	r2, #6
 8001aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3301      	adds	r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d9de      	bls.n	8001ab8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	e023      	b.n	8001b92 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6919      	ldr	r1, [r3, #16]
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	4613      	mov	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	440b      	add	r3, r1
 8001b5a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2200      	movs	r2, #0
 8001b66:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2200      	movs	r2, #0
 8001b72:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	3212      	adds	r2, #18
 8001b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d9d8      	bls.n	8001b4a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691a      	ldr	r2, [r3, #16]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c06:	4b89      	ldr	r3, [pc, #548]	; (8001e2c <HAL_GPIO_Init+0x234>)
 8001c08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c0a:	e194      	b.n	8001f36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2101      	movs	r1, #1
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8186 	beq.w	8001f30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d005      	beq.n	8001c3c <HAL_GPIO_Init+0x44>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d130      	bne.n	8001c9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	2203      	movs	r2, #3
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c72:	2201      	movs	r2, #1
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f003 0201 	and.w	r2, r3, #1
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d017      	beq.n	8001cda <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d123      	bne.n	8001d2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	08da      	lsrs	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3208      	adds	r2, #8
 8001cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	691a      	ldr	r2, [r3, #16]
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	08da      	lsrs	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3208      	adds	r2, #8
 8001d28:	69b9      	ldr	r1, [r7, #24]
 8001d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	2203      	movs	r2, #3
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0203 	and.w	r2, r3, #3
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80e0 	beq.w	8001f30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d70:	4b2f      	ldr	r3, [pc, #188]	; (8001e30 <HAL_GPIO_Init+0x238>)
 8001d72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d76:	4a2e      	ldr	r2, [pc, #184]	; (8001e30 <HAL_GPIO_Init+0x238>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d80:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <HAL_GPIO_Init+0x238>)
 8001d82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d8e:	4a29      	ldr	r2, [pc, #164]	; (8001e34 <HAL_GPIO_Init+0x23c>)
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	089b      	lsrs	r3, r3, #2
 8001d94:	3302      	adds	r3, #2
 8001d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	220f      	movs	r2, #15
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a20      	ldr	r2, [pc, #128]	; (8001e38 <HAL_GPIO_Init+0x240>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d052      	beq.n	8001e60 <HAL_GPIO_Init+0x268>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a1f      	ldr	r2, [pc, #124]	; (8001e3c <HAL_GPIO_Init+0x244>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d031      	beq.n	8001e26 <HAL_GPIO_Init+0x22e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a1e      	ldr	r2, [pc, #120]	; (8001e40 <HAL_GPIO_Init+0x248>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d02b      	beq.n	8001e22 <HAL_GPIO_Init+0x22a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a1d      	ldr	r2, [pc, #116]	; (8001e44 <HAL_GPIO_Init+0x24c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d025      	beq.n	8001e1e <HAL_GPIO_Init+0x226>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <HAL_GPIO_Init+0x250>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d01f      	beq.n	8001e1a <HAL_GPIO_Init+0x222>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a1b      	ldr	r2, [pc, #108]	; (8001e4c <HAL_GPIO_Init+0x254>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d019      	beq.n	8001e16 <HAL_GPIO_Init+0x21e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a1a      	ldr	r2, [pc, #104]	; (8001e50 <HAL_GPIO_Init+0x258>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_GPIO_Init+0x21a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a19      	ldr	r2, [pc, #100]	; (8001e54 <HAL_GPIO_Init+0x25c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00d      	beq.n	8001e0e <HAL_GPIO_Init+0x216>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a18      	ldr	r2, [pc, #96]	; (8001e58 <HAL_GPIO_Init+0x260>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d007      	beq.n	8001e0a <HAL_GPIO_Init+0x212>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <HAL_GPIO_Init+0x264>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d101      	bne.n	8001e06 <HAL_GPIO_Init+0x20e>
 8001e02:	2309      	movs	r3, #9
 8001e04:	e02d      	b.n	8001e62 <HAL_GPIO_Init+0x26a>
 8001e06:	230a      	movs	r3, #10
 8001e08:	e02b      	b.n	8001e62 <HAL_GPIO_Init+0x26a>
 8001e0a:	2308      	movs	r3, #8
 8001e0c:	e029      	b.n	8001e62 <HAL_GPIO_Init+0x26a>
 8001e0e:	2307      	movs	r3, #7
 8001e10:	e027      	b.n	8001e62 <HAL_GPIO_Init+0x26a>
 8001e12:	2306      	movs	r3, #6
 8001e14:	e025      	b.n	8001e62 <HAL_GPIO_Init+0x26a>
 8001e16:	2305      	movs	r3, #5
 8001e18:	e023      	b.n	8001e62 <HAL_GPIO_Init+0x26a>
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	e021      	b.n	8001e62 <HAL_GPIO_Init+0x26a>
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e01f      	b.n	8001e62 <HAL_GPIO_Init+0x26a>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e01d      	b.n	8001e62 <HAL_GPIO_Init+0x26a>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e01b      	b.n	8001e62 <HAL_GPIO_Init+0x26a>
 8001e2a:	bf00      	nop
 8001e2c:	58000080 	.word	0x58000080
 8001e30:	58024400 	.word	0x58024400
 8001e34:	58000400 	.word	0x58000400
 8001e38:	58020000 	.word	0x58020000
 8001e3c:	58020400 	.word	0x58020400
 8001e40:	58020800 	.word	0x58020800
 8001e44:	58020c00 	.word	0x58020c00
 8001e48:	58021000 	.word	0x58021000
 8001e4c:	58021400 	.word	0x58021400
 8001e50:	58021800 	.word	0x58021800
 8001e54:	58021c00 	.word	0x58021c00
 8001e58:	58022000 	.word	0x58022000
 8001e5c:	58022400 	.word	0x58022400
 8001e60:	2300      	movs	r3, #0
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	f002 0203 	and.w	r2, r2, #3
 8001e68:	0092      	lsls	r2, r2, #2
 8001e6a:	4093      	lsls	r3, r2
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e72:	4938      	ldr	r1, [pc, #224]	; (8001f54 <HAL_GPIO_Init+0x35c>)
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	3302      	adds	r3, #2
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	3301      	adds	r3, #1
 8001f34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f47f ae63 	bne.w	8001c0c <HAL_GPIO_Init+0x14>
  }
}
 8001f46:	bf00      	nop
 8001f48:	bf00      	nop
 8001f4a:	3724      	adds	r7, #36	; 0x24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	58000400 	.word	0x58000400

08001f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	807b      	strh	r3, [r7, #2]
 8001f64:	4613      	mov	r3, r2
 8001f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f68:	787b      	ldrb	r3, [r7, #1]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6e:	887a      	ldrh	r2, [r7, #2]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f74:	e003      	b.n	8001f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f76:	887b      	ldrh	r3, [r7, #2]
 8001f78:	041a      	lsls	r2, r3, #16
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	619a      	str	r2, [r3, #24]
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b085      	sub	sp, #20
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f9c:	887a      	ldrh	r2, [r7, #2]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	041a      	lsls	r2, r3, #16
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	43d9      	mvns	r1, r3
 8001fa8:	887b      	ldrh	r3, [r7, #2]
 8001faa:	400b      	ands	r3, r1
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	619a      	str	r2, [r3, #24]
}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8001fca:	490c      	ldr	r1, [pc, #48]	; (8001ffc <HAL_HSEM_Take+0x3c>)
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <HAL_HSEM_Take+0x40>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8001fd8:	4a08      	ldr	r2, [pc, #32]	; (8001ffc <HAL_HSEM_Take+0x3c>)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fe0:	6839      	ldr	r1, [r7, #0]
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <HAL_HSEM_Take+0x40>)
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d101      	bne.n	8001fee <HAL_HSEM_Take+0x2e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e000      	b.n	8001ff0 <HAL_HSEM_Take+0x30>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	58026400 	.word	0x58026400
 8002000:	80000300 	.word	0x80000300

08002004 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800200c:	4a08      	ldr	r2, [pc, #32]	; (8002030 <HAL_HSEM_FastTake+0x2c>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3320      	adds	r3, #32
 8002012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002016:	4a07      	ldr	r2, [pc, #28]	; (8002034 <HAL_HSEM_FastTake+0x30>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d101      	bne.n	8002020 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	e000      	b.n	8002022 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
}
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	58026400 	.word	0x58026400
 8002034:	80000300 	.word	0x80000300

08002038 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002042:	4906      	ldr	r1, [pc, #24]	; (800205c <HAL_HSEM_Release+0x24>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	58026400 	.word	0x58026400

08002060 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002062:	b08f      	sub	sp, #60	; 0x3c
 8002064:	af0a      	add	r7, sp, #40	; 0x28
 8002066:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e116      	b.n	80022a0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	d106      	bne.n	8002092 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7fe fef9 	bl	8000e84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2203      	movs	r2, #3
 8002096:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d102      	bne.n	80020ac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f003 fd87 	bl	8005bc4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	687e      	ldr	r6, [r7, #4]
 80020be:	466d      	mov	r5, sp
 80020c0:	f106 0410 	add.w	r4, r6, #16
 80020c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80020d4:	1d33      	adds	r3, r6, #4
 80020d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020d8:	6838      	ldr	r0, [r7, #0]
 80020da:	f003 fd05 	bl	8005ae8 <USB_CoreInit>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0d7      	b.n	80022a0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2100      	movs	r1, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f003 fd75 	bl	8005be6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	e04a      	b.n	8002198 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	333d      	adds	r3, #61	; 0x3d
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	333c      	adds	r3, #60	; 0x3c
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	b298      	uxth	r0, r3
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	3344      	adds	r3, #68	; 0x44
 800213e:	4602      	mov	r2, r0
 8002140:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	3340      	adds	r3, #64	; 0x40
 8002152:	2200      	movs	r2, #0
 8002154:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002156:	7bfa      	ldrb	r2, [r7, #15]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	3348      	adds	r3, #72	; 0x48
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	334c      	adds	r3, #76	; 0x4c
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	3354      	adds	r3, #84	; 0x54
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	3301      	adds	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d3af      	bcc.n	8002102 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	e044      	b.n	8002232 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021d4:	7bfa      	ldrb	r2, [r7, #15]
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021ea:	7bfa      	ldrb	r2, [r7, #15]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002200:	7bfa      	ldrb	r2, [r7, #15]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002216:	7bfa      	ldrb	r2, [r7, #15]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	3301      	adds	r3, #1
 8002230:	73fb      	strb	r3, [r7, #15]
 8002232:	7bfa      	ldrb	r2, [r7, #15]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	429a      	cmp	r2, r3
 800223a:	d3b5      	bcc.n	80021a8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	603b      	str	r3, [r7, #0]
 8002242:	687e      	ldr	r6, [r7, #4]
 8002244:	466d      	mov	r5, sp
 8002246:	f106 0410 	add.w	r4, r6, #16
 800224a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800224c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800224e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002252:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002256:	e885 0003 	stmia.w	r5, {r0, r1}
 800225a:	1d33      	adds	r3, r6, #4
 800225c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800225e:	6838      	ldr	r0, [r7, #0]
 8002260:	f003 fd0e 	bl	8005c80 <USB_DevInit>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2202      	movs	r2, #2
 800226e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e014      	b.n	80022a0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	2b01      	cmp	r3, #1
 800228c:	d102      	bne.n	8002294 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f80a 	bl	80022a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f003 fecc 	bl	8006036 <USB_DevDisconnect>

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_PCDEx_ActivateLPM+0x44>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	10000003 	.word	0x10000003

080022f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80022f8:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	2b06      	cmp	r3, #6
 8002302:	d00a      	beq.n	800231a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002304:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	429a      	cmp	r2, r3
 8002310:	d001      	beq.n	8002316 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e040      	b.n	8002398 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e03e      	b.n	8002398 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800231a:	4b21      	ldr	r3, [pc, #132]	; (80023a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002322:	491f      	ldr	r1, [pc, #124]	; (80023a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4313      	orrs	r3, r2
 8002328:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800232a:	f7fe ff0d 	bl	8001148 <HAL_GetTick>
 800232e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002330:	e009      	b.n	8002346 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002332:	f7fe ff09 	bl	8001148 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002340:	d901      	bls.n	8002346 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e028      	b.n	8002398 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002346:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800234e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002352:	d1ee      	bne.n	8002332 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b1e      	cmp	r3, #30
 8002358:	d008      	beq.n	800236c <HAL_PWREx_ConfigSupply+0x7c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b2e      	cmp	r3, #46	; 0x2e
 800235e:	d005      	beq.n	800236c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b1d      	cmp	r3, #29
 8002364:	d002      	beq.n	800236c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b2d      	cmp	r3, #45	; 0x2d
 800236a:	d114      	bne.n	8002396 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800236c:	f7fe feec 	bl	8001148 <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002372:	e009      	b.n	8002388 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002374:	f7fe fee8 	bl	8001148 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002382:	d901      	bls.n	8002388 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e007      	b.n	8002398 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002394:	d1ee      	bne.n	8002374 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	58024800 	.word	0x58024800

080023a4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80023ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023b2:	60d3      	str	r3, [r2, #12]
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	58024800 	.word	0x58024800

080023c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08c      	sub	sp, #48	; 0x30
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d102      	bne.n	80023d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	f000 bc1d 	b.w	8002c12 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 8087 	beq.w	80024f4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e6:	4b99      	ldr	r3, [pc, #612]	; (800264c <HAL_RCC_OscConfig+0x288>)
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023f0:	4b96      	ldr	r3, [pc, #600]	; (800264c <HAL_RCC_OscConfig+0x288>)
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f8:	2b10      	cmp	r3, #16
 80023fa:	d007      	beq.n	800240c <HAL_RCC_OscConfig+0x48>
 80023fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fe:	2b18      	cmp	r3, #24
 8002400:	d110      	bne.n	8002424 <HAL_RCC_OscConfig+0x60>
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d10b      	bne.n	8002424 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240c:	4b8f      	ldr	r3, [pc, #572]	; (800264c <HAL_RCC_OscConfig+0x288>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d06c      	beq.n	80024f2 <HAL_RCC_OscConfig+0x12e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d168      	bne.n	80024f2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e3f6      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242c:	d106      	bne.n	800243c <HAL_RCC_OscConfig+0x78>
 800242e:	4b87      	ldr	r3, [pc, #540]	; (800264c <HAL_RCC_OscConfig+0x288>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a86      	ldr	r2, [pc, #536]	; (800264c <HAL_RCC_OscConfig+0x288>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e02e      	b.n	800249a <HAL_RCC_OscConfig+0xd6>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10c      	bne.n	800245e <HAL_RCC_OscConfig+0x9a>
 8002444:	4b81      	ldr	r3, [pc, #516]	; (800264c <HAL_RCC_OscConfig+0x288>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a80      	ldr	r2, [pc, #512]	; (800264c <HAL_RCC_OscConfig+0x288>)
 800244a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	4b7e      	ldr	r3, [pc, #504]	; (800264c <HAL_RCC_OscConfig+0x288>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a7d      	ldr	r2, [pc, #500]	; (800264c <HAL_RCC_OscConfig+0x288>)
 8002456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	e01d      	b.n	800249a <HAL_RCC_OscConfig+0xd6>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002466:	d10c      	bne.n	8002482 <HAL_RCC_OscConfig+0xbe>
 8002468:	4b78      	ldr	r3, [pc, #480]	; (800264c <HAL_RCC_OscConfig+0x288>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a77      	ldr	r2, [pc, #476]	; (800264c <HAL_RCC_OscConfig+0x288>)
 800246e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b75      	ldr	r3, [pc, #468]	; (800264c <HAL_RCC_OscConfig+0x288>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a74      	ldr	r2, [pc, #464]	; (800264c <HAL_RCC_OscConfig+0x288>)
 800247a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	e00b      	b.n	800249a <HAL_RCC_OscConfig+0xd6>
 8002482:	4b72      	ldr	r3, [pc, #456]	; (800264c <HAL_RCC_OscConfig+0x288>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a71      	ldr	r2, [pc, #452]	; (800264c <HAL_RCC_OscConfig+0x288>)
 8002488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	4b6f      	ldr	r3, [pc, #444]	; (800264c <HAL_RCC_OscConfig+0x288>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a6e      	ldr	r2, [pc, #440]	; (800264c <HAL_RCC_OscConfig+0x288>)
 8002494:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002498:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d013      	beq.n	80024ca <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7fe fe51 	bl	8001148 <HAL_GetTick>
 80024a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024aa:	f7fe fe4d 	bl	8001148 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b64      	cmp	r3, #100	; 0x64
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e3aa      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024bc:	4b63      	ldr	r3, [pc, #396]	; (800264c <HAL_RCC_OscConfig+0x288>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0xe6>
 80024c8:	e014      	b.n	80024f4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ca:	f7fe fe3d 	bl	8001148 <HAL_GetTick>
 80024ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d2:	f7fe fe39 	bl	8001148 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b64      	cmp	r3, #100	; 0x64
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e396      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024e4:	4b59      	ldr	r3, [pc, #356]	; (800264c <HAL_RCC_OscConfig+0x288>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x10e>
 80024f0:	e000      	b.n	80024f4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80cb 	beq.w	8002698 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002502:	4b52      	ldr	r3, [pc, #328]	; (800264c <HAL_RCC_OscConfig+0x288>)
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800250a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800250c:	4b4f      	ldr	r3, [pc, #316]	; (800264c <HAL_RCC_OscConfig+0x288>)
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <HAL_RCC_OscConfig+0x164>
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	2b18      	cmp	r3, #24
 800251c:	d156      	bne.n	80025cc <HAL_RCC_OscConfig+0x208>
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d151      	bne.n	80025cc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002528:	4b48      	ldr	r3, [pc, #288]	; (800264c <HAL_RCC_OscConfig+0x288>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_RCC_OscConfig+0x17c>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e368      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002540:	4b42      	ldr	r3, [pc, #264]	; (800264c <HAL_RCC_OscConfig+0x288>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f023 0219 	bic.w	r2, r3, #25
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	493f      	ldr	r1, [pc, #252]	; (800264c <HAL_RCC_OscConfig+0x288>)
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002552:	f7fe fdf9 	bl	8001148 <HAL_GetTick>
 8002556:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800255a:	f7fe fdf5 	bl	8001148 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e352      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800256c:	4b37      	ldr	r3, [pc, #220]	; (800264c <HAL_RCC_OscConfig+0x288>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002578:	f7fe fe16 	bl	80011a8 <HAL_GetREVID>
 800257c:	4603      	mov	r3, r0
 800257e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002582:	4293      	cmp	r3, r2
 8002584:	d817      	bhi.n	80025b6 <HAL_RCC_OscConfig+0x1f2>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b40      	cmp	r3, #64	; 0x40
 800258c:	d108      	bne.n	80025a0 <HAL_RCC_OscConfig+0x1dc>
 800258e:	4b2f      	ldr	r3, [pc, #188]	; (800264c <HAL_RCC_OscConfig+0x288>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002596:	4a2d      	ldr	r2, [pc, #180]	; (800264c <HAL_RCC_OscConfig+0x288>)
 8002598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800259c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800259e:	e07b      	b.n	8002698 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a0:	4b2a      	ldr	r3, [pc, #168]	; (800264c <HAL_RCC_OscConfig+0x288>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	031b      	lsls	r3, r3, #12
 80025ae:	4927      	ldr	r1, [pc, #156]	; (800264c <HAL_RCC_OscConfig+0x288>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b4:	e070      	b.n	8002698 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b6:	4b25      	ldr	r3, [pc, #148]	; (800264c <HAL_RCC_OscConfig+0x288>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	061b      	lsls	r3, r3, #24
 80025c4:	4921      	ldr	r1, [pc, #132]	; (800264c <HAL_RCC_OscConfig+0x288>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ca:	e065      	b.n	8002698 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d048      	beq.n	8002666 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025d4:	4b1d      	ldr	r3, [pc, #116]	; (800264c <HAL_RCC_OscConfig+0x288>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 0219 	bic.w	r2, r3, #25
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	491a      	ldr	r1, [pc, #104]	; (800264c <HAL_RCC_OscConfig+0x288>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e6:	f7fe fdaf 	bl	8001148 <HAL_GetTick>
 80025ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ee:	f7fe fdab 	bl	8001148 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e308      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002600:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_RCC_OscConfig+0x288>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260c:	f7fe fdcc 	bl	80011a8 <HAL_GetREVID>
 8002610:	4603      	mov	r3, r0
 8002612:	f241 0203 	movw	r2, #4099	; 0x1003
 8002616:	4293      	cmp	r3, r2
 8002618:	d81a      	bhi.n	8002650 <HAL_RCC_OscConfig+0x28c>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	2b40      	cmp	r3, #64	; 0x40
 8002620:	d108      	bne.n	8002634 <HAL_RCC_OscConfig+0x270>
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_RCC_OscConfig+0x288>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800262a:	4a08      	ldr	r2, [pc, #32]	; (800264c <HAL_RCC_OscConfig+0x288>)
 800262c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002630:	6053      	str	r3, [r2, #4]
 8002632:	e031      	b.n	8002698 <HAL_RCC_OscConfig+0x2d4>
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_RCC_OscConfig+0x288>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	031b      	lsls	r3, r3, #12
 8002642:	4902      	ldr	r1, [pc, #8]	; (800264c <HAL_RCC_OscConfig+0x288>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]
 8002648:	e026      	b.n	8002698 <HAL_RCC_OscConfig+0x2d4>
 800264a:	bf00      	nop
 800264c:	58024400 	.word	0x58024400
 8002650:	4b9a      	ldr	r3, [pc, #616]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	061b      	lsls	r3, r3, #24
 800265e:	4997      	ldr	r1, [pc, #604]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]
 8002664:	e018      	b.n	8002698 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002666:	4b95      	ldr	r3, [pc, #596]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a94      	ldr	r2, [pc, #592]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002672:	f7fe fd69 	bl	8001148 <HAL_GetTick>
 8002676:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800267a:	f7fe fd65 	bl	8001148 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e2c2      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800268c:	4b8b      	ldr	r3, [pc, #556]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f0      	bne.n	800267a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80a9 	beq.w	80027f8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a6:	4b85      	ldr	r3, [pc, #532]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026b0:	4b82      	ldr	r3, [pc, #520]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d007      	beq.n	80026cc <HAL_RCC_OscConfig+0x308>
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	2b18      	cmp	r3, #24
 80026c0:	d13a      	bne.n	8002738 <HAL_RCC_OscConfig+0x374>
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d135      	bne.n	8002738 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026cc:	4b7b      	ldr	r3, [pc, #492]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_OscConfig+0x320>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	2b80      	cmp	r3, #128	; 0x80
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e296      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026e4:	f7fe fd60 	bl	80011a8 <HAL_GetREVID>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d817      	bhi.n	8002722 <HAL_RCC_OscConfig+0x35e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	d108      	bne.n	800270c <HAL_RCC_OscConfig+0x348>
 80026fa:	4b70      	ldr	r3, [pc, #448]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002702:	4a6e      	ldr	r2, [pc, #440]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002704:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002708:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800270a:	e075      	b.n	80027f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800270c:	4b6b      	ldr	r3, [pc, #428]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	069b      	lsls	r3, r3, #26
 800271a:	4968      	ldr	r1, [pc, #416]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002720:	e06a      	b.n	80027f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002722:	4b66      	ldr	r3, [pc, #408]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	061b      	lsls	r3, r3, #24
 8002730:	4962      	ldr	r1, [pc, #392]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002732:	4313      	orrs	r3, r2
 8002734:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002736:	e05f      	b.n	80027f8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d042      	beq.n	80027c6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002740:	4b5e      	ldr	r3, [pc, #376]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a5d      	ldr	r2, [pc, #372]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800274a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7fe fcfc 	bl	8001148 <HAL_GetTick>
 8002750:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002754:	f7fe fcf8 	bl	8001148 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e255      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002766:	4b55      	ldr	r3, [pc, #340]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002772:	f7fe fd19 	bl	80011a8 <HAL_GetREVID>
 8002776:	4603      	mov	r3, r0
 8002778:	f241 0203 	movw	r2, #4099	; 0x1003
 800277c:	4293      	cmp	r3, r2
 800277e:	d817      	bhi.n	80027b0 <HAL_RCC_OscConfig+0x3ec>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	2b20      	cmp	r3, #32
 8002786:	d108      	bne.n	800279a <HAL_RCC_OscConfig+0x3d6>
 8002788:	4b4c      	ldr	r3, [pc, #304]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002790:	4a4a      	ldr	r2, [pc, #296]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002792:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002796:	6053      	str	r3, [r2, #4]
 8002798:	e02e      	b.n	80027f8 <HAL_RCC_OscConfig+0x434>
 800279a:	4b48      	ldr	r3, [pc, #288]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	069b      	lsls	r3, r3, #26
 80027a8:	4944      	ldr	r1, [pc, #272]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]
 80027ae:	e023      	b.n	80027f8 <HAL_RCC_OscConfig+0x434>
 80027b0:	4b42      	ldr	r3, [pc, #264]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	061b      	lsls	r3, r3, #24
 80027be:	493f      	ldr	r1, [pc, #252]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60cb      	str	r3, [r1, #12]
 80027c4:	e018      	b.n	80027f8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027c6:	4b3d      	ldr	r3, [pc, #244]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a3c      	ldr	r2, [pc, #240]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 80027cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7fe fcb9 	bl	8001148 <HAL_GetTick>
 80027d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80027da:	f7fe fcb5 	bl	8001148 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e212      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027ec:	4b33      	ldr	r3, [pc, #204]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f0      	bne.n	80027da <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d036      	beq.n	8002872 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d019      	beq.n	8002840 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280c:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 800280e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002810:	4a2a      	ldr	r2, [pc, #168]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7fe fc96 	bl	8001148 <HAL_GetTick>
 800281c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002820:	f7fe fc92 	bl	8001148 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e1ef      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002832:	4b22      	ldr	r3, [pc, #136]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x45c>
 800283e:	e018      	b.n	8002872 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002840:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002844:	4a1d      	ldr	r2, [pc, #116]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002846:	f023 0301 	bic.w	r3, r3, #1
 800284a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f7fe fc7c 	bl	8001148 <HAL_GetTick>
 8002850:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002854:	f7fe fc78 	bl	8001148 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e1d5      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002866:	4b15      	ldr	r3, [pc, #84]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0320 	and.w	r3, r3, #32
 800287a:	2b00      	cmp	r3, #0
 800287c:	d039      	beq.n	80028f2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d01c      	beq.n	80028c0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002886:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a0c      	ldr	r2, [pc, #48]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 800288c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002890:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002892:	f7fe fc59 	bl	8001148 <HAL_GetTick>
 8002896:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800289a:	f7fe fc55 	bl	8001148 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e1b2      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <HAL_RCC_OscConfig+0x4f8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x4d6>
 80028b8:	e01b      	b.n	80028f2 <HAL_RCC_OscConfig+0x52e>
 80028ba:	bf00      	nop
 80028bc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028c0:	4b9b      	ldr	r3, [pc, #620]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a9a      	ldr	r2, [pc, #616]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 80028c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028cc:	f7fe fc3c 	bl	8001148 <HAL_GetTick>
 80028d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80028d4:	f7fe fc38 	bl	8001148 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e195      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028e6:	4b92      	ldr	r3, [pc, #584]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 8081 	beq.w	8002a02 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002900:	4b8c      	ldr	r3, [pc, #560]	; (8002b34 <HAL_RCC_OscConfig+0x770>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a8b      	ldr	r2, [pc, #556]	; (8002b34 <HAL_RCC_OscConfig+0x770>)
 8002906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800290c:	f7fe fc1c 	bl	8001148 <HAL_GetTick>
 8002910:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002914:	f7fe fc18 	bl	8001148 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e175      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002926:	4b83      	ldr	r3, [pc, #524]	; (8002b34 <HAL_RCC_OscConfig+0x770>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d106      	bne.n	8002948 <HAL_RCC_OscConfig+0x584>
 800293a:	4b7d      	ldr	r3, [pc, #500]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	4a7c      	ldr	r2, [pc, #496]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6713      	str	r3, [r2, #112]	; 0x70
 8002946:	e02d      	b.n	80029a4 <HAL_RCC_OscConfig+0x5e0>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10c      	bne.n	800296a <HAL_RCC_OscConfig+0x5a6>
 8002950:	4b77      	ldr	r3, [pc, #476]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002954:	4a76      	ldr	r2, [pc, #472]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002956:	f023 0301 	bic.w	r3, r3, #1
 800295a:	6713      	str	r3, [r2, #112]	; 0x70
 800295c:	4b74      	ldr	r3, [pc, #464]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002960:	4a73      	ldr	r2, [pc, #460]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002962:	f023 0304 	bic.w	r3, r3, #4
 8002966:	6713      	str	r3, [r2, #112]	; 0x70
 8002968:	e01c      	b.n	80029a4 <HAL_RCC_OscConfig+0x5e0>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b05      	cmp	r3, #5
 8002970:	d10c      	bne.n	800298c <HAL_RCC_OscConfig+0x5c8>
 8002972:	4b6f      	ldr	r3, [pc, #444]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002976:	4a6e      	ldr	r2, [pc, #440]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002978:	f043 0304 	orr.w	r3, r3, #4
 800297c:	6713      	str	r3, [r2, #112]	; 0x70
 800297e:	4b6c      	ldr	r3, [pc, #432]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	4a6b      	ldr	r2, [pc, #428]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6713      	str	r3, [r2, #112]	; 0x70
 800298a:	e00b      	b.n	80029a4 <HAL_RCC_OscConfig+0x5e0>
 800298c:	4b68      	ldr	r3, [pc, #416]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	4a67      	ldr	r2, [pc, #412]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002992:	f023 0301 	bic.w	r3, r3, #1
 8002996:	6713      	str	r3, [r2, #112]	; 0x70
 8002998:	4b65      	ldr	r3, [pc, #404]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	4a64      	ldr	r2, [pc, #400]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 800299e:	f023 0304 	bic.w	r3, r3, #4
 80029a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d015      	beq.n	80029d8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ac:	f7fe fbcc 	bl	8001148 <HAL_GetTick>
 80029b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b4:	f7fe fbc8 	bl	8001148 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e123      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029ca:	4b59      	ldr	r3, [pc, #356]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0ee      	beq.n	80029b4 <HAL_RCC_OscConfig+0x5f0>
 80029d6:	e014      	b.n	8002a02 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d8:	f7fe fbb6 	bl	8001148 <HAL_GetTick>
 80029dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e0:	f7fe fbb2 	bl	8001148 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e10d      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029f6:	4b4e      	ldr	r3, [pc, #312]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1ee      	bne.n	80029e0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8102 	beq.w	8002c10 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a0c:	4b48      	ldr	r3, [pc, #288]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a14:	2b18      	cmp	r3, #24
 8002a16:	f000 80bd 	beq.w	8002b94 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	f040 809e 	bne.w	8002b60 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a24:	4b42      	ldr	r3, [pc, #264]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a41      	ldr	r2, [pc, #260]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe fb8a 	bl	8001148 <HAL_GetTick>
 8002a34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a38:	f7fe fb86 	bl	8001148 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e0e3      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a4a:	4b39      	ldr	r3, [pc, #228]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a56:	4b36      	ldr	r3, [pc, #216]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a5a:	4b37      	ldr	r3, [pc, #220]	; (8002b38 <HAL_RCC_OscConfig+0x774>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a66:	0112      	lsls	r2, r2, #4
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	4931      	ldr	r1, [pc, #196]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	628b      	str	r3, [r1, #40]	; 0x28
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	3b01      	subs	r3, #1
 8002a76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	025b      	lsls	r3, r3, #9
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	041b      	lsls	r3, r3, #16
 8002a8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	061b      	lsls	r3, r3, #24
 8002a9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002aa0:	4923      	ldr	r1, [pc, #140]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002aa6:	4b22      	ldr	r3, [pc, #136]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	4a21      	ldr	r2, [pc, #132]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ab2:	4b1f      	ldr	r3, [pc, #124]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ab6:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <HAL_RCC_OscConfig+0x778>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002abe:	00d2      	lsls	r2, r2, #3
 8002ac0:	491b      	ldr	r1, [pc, #108]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ac6:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aca:	f023 020c 	bic.w	r2, r3, #12
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	4917      	ldr	r1, [pc, #92]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ad8:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	f023 0202 	bic.w	r2, r3, #2
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae4:	4912      	ldr	r1, [pc, #72]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	4a10      	ldr	r2, [pc, #64]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afa:	4a0d      	ldr	r2, [pc, #52]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <HAL_RCC_OscConfig+0x76c>)
 8002b20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b26:	f7fe fb0f 	bl	8001148 <HAL_GetTick>
 8002b2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b2c:	e011      	b.n	8002b52 <HAL_RCC_OscConfig+0x78e>
 8002b2e:	bf00      	nop
 8002b30:	58024400 	.word	0x58024400
 8002b34:	58024800 	.word	0x58024800
 8002b38:	fffffc0c 	.word	0xfffffc0c
 8002b3c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b40:	f7fe fb02 	bl	8001148 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e05f      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b52:	4b32      	ldr	r3, [pc, #200]	; (8002c1c <HAL_RCC_OscConfig+0x858>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x77c>
 8002b5e:	e057      	b.n	8002c10 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b60:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <HAL_RCC_OscConfig+0x858>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a2d      	ldr	r2, [pc, #180]	; (8002c1c <HAL_RCC_OscConfig+0x858>)
 8002b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fe faec 	bl	8001148 <HAL_GetTick>
 8002b70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b74:	f7fe fae8 	bl	8001148 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e045      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b86:	4b25      	ldr	r3, [pc, #148]	; (8002c1c <HAL_RCC_OscConfig+0x858>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x7b0>
 8002b92:	e03d      	b.n	8002c10 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b94:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <HAL_RCC_OscConfig+0x858>)
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b9a:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <HAL_RCC_OscConfig+0x858>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d031      	beq.n	8002c0c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	f003 0203 	and.w	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d12a      	bne.n	8002c0c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d122      	bne.n	8002c0c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d11a      	bne.n	8002c0c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	0a5b      	lsrs	r3, r3, #9
 8002bda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d111      	bne.n	8002c0c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	0c1b      	lsrs	r3, r3, #16
 8002bec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d108      	bne.n	8002c0c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	0e1b      	lsrs	r3, r3, #24
 8002bfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c06:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3730      	adds	r7, #48	; 0x30
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	58024400 	.word	0x58024400

08002c20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e19c      	b.n	8002f6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c34:	4b8a      	ldr	r3, [pc, #552]	; (8002e60 <HAL_RCC_ClockConfig+0x240>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d910      	bls.n	8002c64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b87      	ldr	r3, [pc, #540]	; (8002e60 <HAL_RCC_ClockConfig+0x240>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 020f 	bic.w	r2, r3, #15
 8002c4a:	4985      	ldr	r1, [pc, #532]	; (8002e60 <HAL_RCC_ClockConfig+0x240>)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b83      	ldr	r3, [pc, #524]	; (8002e60 <HAL_RCC_ClockConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e184      	b.n	8002f6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d010      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	4b7b      	ldr	r3, [pc, #492]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d908      	bls.n	8002c92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c80:	4b78      	ldr	r3, [pc, #480]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	4975      	ldr	r1, [pc, #468]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d010      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	4b70      	ldr	r3, [pc, #448]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d908      	bls.n	8002cc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cae:	4b6d      	ldr	r3, [pc, #436]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	496a      	ldr	r1, [pc, #424]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d010      	beq.n	8002cee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699a      	ldr	r2, [r3, #24]
 8002cd0:	4b64      	ldr	r3, [pc, #400]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d908      	bls.n	8002cee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cdc:	4b61      	ldr	r3, [pc, #388]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	495e      	ldr	r1, [pc, #376]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d010      	beq.n	8002d1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69da      	ldr	r2, [r3, #28]
 8002cfe:	4b59      	ldr	r3, [pc, #356]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d908      	bls.n	8002d1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d0a:	4b56      	ldr	r3, [pc, #344]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	4953      	ldr	r1, [pc, #332]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d010      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	4b4d      	ldr	r3, [pc, #308]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d908      	bls.n	8002d4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d38:	4b4a      	ldr	r3, [pc, #296]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f023 020f 	bic.w	r2, r3, #15
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4947      	ldr	r1, [pc, #284]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d055      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d56:	4b43      	ldr	r3, [pc, #268]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	4940      	ldr	r1, [pc, #256]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d107      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d70:	4b3c      	ldr	r3, [pc, #240]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d121      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0f6      	b.n	8002f6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d88:	4b36      	ldr	r3, [pc, #216]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d115      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0ea      	b.n	8002f6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d107      	bne.n	8002db0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002da0:	4b30      	ldr	r3, [pc, #192]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d109      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0de      	b.n	8002f6e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002db0:	4b2c      	ldr	r3, [pc, #176]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0d6      	b.n	8002f6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dc0:	4b28      	ldr	r3, [pc, #160]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	f023 0207 	bic.w	r2, r3, #7
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	4925      	ldr	r1, [pc, #148]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd2:	f7fe f9b9 	bl	8001148 <HAL_GetTick>
 8002dd6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd8:	e00a      	b.n	8002df0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dda:	f7fe f9b5 	bl	8001148 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e0be      	b.n	8002f6e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df0:	4b1c      	ldr	r3, [pc, #112]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d1eb      	bne.n	8002dda <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d010      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d208      	bcs.n	8002e30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e1e:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	f023 020f 	bic.w	r2, r3, #15
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	490e      	ldr	r1, [pc, #56]	; (8002e64 <HAL_RCC_ClockConfig+0x244>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <HAL_RCC_ClockConfig+0x240>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 030f 	and.w	r3, r3, #15
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d214      	bcs.n	8002e68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3e:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <HAL_RCC_ClockConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 020f 	bic.w	r2, r3, #15
 8002e46:	4906      	ldr	r1, [pc, #24]	; (8002e60 <HAL_RCC_ClockConfig+0x240>)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <HAL_RCC_ClockConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d005      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e086      	b.n	8002f6e <HAL_RCC_ClockConfig+0x34e>
 8002e60:	52002000 	.word	0x52002000
 8002e64:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d010      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	4b3f      	ldr	r3, [pc, #252]	; (8002f78 <HAL_RCC_ClockConfig+0x358>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d208      	bcs.n	8002e96 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e84:	4b3c      	ldr	r3, [pc, #240]	; (8002f78 <HAL_RCC_ClockConfig+0x358>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	4939      	ldr	r1, [pc, #228]	; (8002f78 <HAL_RCC_ClockConfig+0x358>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d010      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	4b34      	ldr	r3, [pc, #208]	; (8002f78 <HAL_RCC_ClockConfig+0x358>)
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d208      	bcs.n	8002ec4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002eb2:	4b31      	ldr	r3, [pc, #196]	; (8002f78 <HAL_RCC_ClockConfig+0x358>)
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	492e      	ldr	r1, [pc, #184]	; (8002f78 <HAL_RCC_ClockConfig+0x358>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d010      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699a      	ldr	r2, [r3, #24]
 8002ed4:	4b28      	ldr	r3, [pc, #160]	; (8002f78 <HAL_RCC_ClockConfig+0x358>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d208      	bcs.n	8002ef2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ee0:	4b25      	ldr	r3, [pc, #148]	; (8002f78 <HAL_RCC_ClockConfig+0x358>)
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	4922      	ldr	r1, [pc, #136]	; (8002f78 <HAL_RCC_ClockConfig+0x358>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d010      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69da      	ldr	r2, [r3, #28]
 8002f02:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_RCC_ClockConfig+0x358>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d208      	bcs.n	8002f20 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <HAL_RCC_ClockConfig+0x358>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	4917      	ldr	r1, [pc, #92]	; (8002f78 <HAL_RCC_ClockConfig+0x358>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f20:	f000 f834 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 8002f24:	4602      	mov	r2, r0
 8002f26:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <HAL_RCC_ClockConfig+0x358>)
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	0a1b      	lsrs	r3, r3, #8
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	4912      	ldr	r1, [pc, #72]	; (8002f7c <HAL_RCC_ClockConfig+0x35c>)
 8002f32:	5ccb      	ldrb	r3, [r1, r3]
 8002f34:	f003 031f 	and.w	r3, r3, #31
 8002f38:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <HAL_RCC_ClockConfig+0x358>)
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	4a0d      	ldr	r2, [pc, #52]	; (8002f7c <HAL_RCC_ClockConfig+0x35c>)
 8002f48:	5cd3      	ldrb	r3, [r2, r3]
 8002f4a:	f003 031f 	and.w	r3, r3, #31
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
 8002f54:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <HAL_RCC_ClockConfig+0x360>)
 8002f56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f58:	4a0a      	ldr	r2, [pc, #40]	; (8002f84 <HAL_RCC_ClockConfig+0x364>)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <HAL_RCC_ClockConfig+0x368>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe f8a6 	bl	80010b4 <HAL_InitTick>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	58024400 	.word	0x58024400
 8002f7c:	0800616c 	.word	0x0800616c
 8002f80:	24000004 	.word	0x24000004
 8002f84:	24000000 	.word	0x24000000
 8002f88:	24000008 	.word	0x24000008

08002f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b089      	sub	sp, #36	; 0x24
 8002f90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f92:	4bb3      	ldr	r3, [pc, #716]	; (8003260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f9a:	2b18      	cmp	r3, #24
 8002f9c:	f200 8155 	bhi.w	800324a <HAL_RCC_GetSysClockFreq+0x2be>
 8002fa0:	a201      	add	r2, pc, #4	; (adr r2, 8002fa8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa6:	bf00      	nop
 8002fa8:	0800300d 	.word	0x0800300d
 8002fac:	0800324b 	.word	0x0800324b
 8002fb0:	0800324b 	.word	0x0800324b
 8002fb4:	0800324b 	.word	0x0800324b
 8002fb8:	0800324b 	.word	0x0800324b
 8002fbc:	0800324b 	.word	0x0800324b
 8002fc0:	0800324b 	.word	0x0800324b
 8002fc4:	0800324b 	.word	0x0800324b
 8002fc8:	08003033 	.word	0x08003033
 8002fcc:	0800324b 	.word	0x0800324b
 8002fd0:	0800324b 	.word	0x0800324b
 8002fd4:	0800324b 	.word	0x0800324b
 8002fd8:	0800324b 	.word	0x0800324b
 8002fdc:	0800324b 	.word	0x0800324b
 8002fe0:	0800324b 	.word	0x0800324b
 8002fe4:	0800324b 	.word	0x0800324b
 8002fe8:	08003039 	.word	0x08003039
 8002fec:	0800324b 	.word	0x0800324b
 8002ff0:	0800324b 	.word	0x0800324b
 8002ff4:	0800324b 	.word	0x0800324b
 8002ff8:	0800324b 	.word	0x0800324b
 8002ffc:	0800324b 	.word	0x0800324b
 8003000:	0800324b 	.word	0x0800324b
 8003004:	0800324b 	.word	0x0800324b
 8003008:	0800303f 	.word	0x0800303f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800300c:	4b94      	ldr	r3, [pc, #592]	; (8003260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b00      	cmp	r3, #0
 8003016:	d009      	beq.n	800302c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003018:	4b91      	ldr	r3, [pc, #580]	; (8003260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	08db      	lsrs	r3, r3, #3
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	4a90      	ldr	r2, [pc, #576]	; (8003264 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003024:	fa22 f303 	lsr.w	r3, r2, r3
 8003028:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800302a:	e111      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800302c:	4b8d      	ldr	r3, [pc, #564]	; (8003264 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800302e:	61bb      	str	r3, [r7, #24]
    break;
 8003030:	e10e      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003032:	4b8d      	ldr	r3, [pc, #564]	; (8003268 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003034:	61bb      	str	r3, [r7, #24]
    break;
 8003036:	e10b      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003038:	4b8c      	ldr	r3, [pc, #560]	; (800326c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800303a:	61bb      	str	r3, [r7, #24]
    break;
 800303c:	e108      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800303e:	4b88      	ldr	r3, [pc, #544]	; (8003260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003048:	4b85      	ldr	r3, [pc, #532]	; (8003260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003052:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003054:	4b82      	ldr	r3, [pc, #520]	; (8003260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800305e:	4b80      	ldr	r3, [pc, #512]	; (8003260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003062:	08db      	lsrs	r3, r3, #3
 8003064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003076:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80e1 	beq.w	8003244 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b02      	cmp	r3, #2
 8003086:	f000 8083 	beq.w	8003190 <HAL_RCC_GetSysClockFreq+0x204>
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b02      	cmp	r3, #2
 800308e:	f200 80a1 	bhi.w	80031d4 <HAL_RCC_GetSysClockFreq+0x248>
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x114>
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d056      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x1c0>
 800309e:	e099      	b.n	80031d4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030a0:	4b6f      	ldr	r3, [pc, #444]	; (8003260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0320 	and.w	r3, r3, #32
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d02d      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030ac:	4b6c      	ldr	r3, [pc, #432]	; (8003260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	08db      	lsrs	r3, r3, #3
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	4a6b      	ldr	r2, [pc, #428]	; (8003264 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
 80030bc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	ee07 3a90 	vmov	s15, r3
 80030c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030d6:	4b62      	ldr	r3, [pc, #392]	; (8003260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030de:	ee07 3a90 	vmov	s15, r3
 80030e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003270 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003102:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003106:	e087      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003112:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003274 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800311a:	4b51      	ldr	r3, [pc, #324]	; (8003260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003122:	ee07 3a90 	vmov	s15, r3
 8003126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800312a:	ed97 6a02 	vldr	s12, [r7, #8]
 800312e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003270 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800313a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800313e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800314a:	e065      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	ee07 3a90 	vmov	s15, r3
 8003152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003156:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003278 <HAL_RCC_GetSysClockFreq+0x2ec>
 800315a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800315e:	4b40      	ldr	r3, [pc, #256]	; (8003260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003166:	ee07 3a90 	vmov	s15, r3
 800316a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800316e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003172:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003270 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800317a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800317e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800318a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800318e:	e043      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	ee07 3a90 	vmov	s15, r3
 8003196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800327c <HAL_RCC_GetSysClockFreq+0x2f0>
 800319e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031a2:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031aa:	ee07 3a90 	vmov	s15, r3
 80031ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003270 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031d2:	e021      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003278 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031e6:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ee:	ee07 3a90 	vmov	s15, r3
 80031f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003270 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800320a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800320e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003216:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003218:	4b11      	ldr	r3, [pc, #68]	; (8003260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	0a5b      	lsrs	r3, r3, #9
 800321e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003222:	3301      	adds	r3, #1
 8003224:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	ee07 3a90 	vmov	s15, r3
 800322c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003230:	edd7 6a07 	vldr	s13, [r7, #28]
 8003234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800323c:	ee17 3a90 	vmov	r3, s15
 8003240:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003242:	e005      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	61bb      	str	r3, [r7, #24]
    break;
 8003248:	e002      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800324a:	4b07      	ldr	r3, [pc, #28]	; (8003268 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800324c:	61bb      	str	r3, [r7, #24]
    break;
 800324e:	bf00      	nop
  }

  return sysclockfreq;
 8003250:	69bb      	ldr	r3, [r7, #24]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3724      	adds	r7, #36	; 0x24
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	58024400 	.word	0x58024400
 8003264:	03d09000 	.word	0x03d09000
 8003268:	003d0900 	.word	0x003d0900
 800326c:	007a1200 	.word	0x007a1200
 8003270:	46000000 	.word	0x46000000
 8003274:	4c742400 	.word	0x4c742400
 8003278:	4a742400 	.word	0x4a742400
 800327c:	4af42400 	.word	0x4af42400

08003280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003286:	f7ff fe81 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 800328a:	4602      	mov	r2, r0
 800328c:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	0a1b      	lsrs	r3, r3, #8
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	490f      	ldr	r1, [pc, #60]	; (80032d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003298:	5ccb      	ldrb	r3, [r1, r3]
 800329a:	f003 031f 	and.w	r3, r3, #31
 800329e:	fa22 f303 	lsr.w	r3, r2, r3
 80032a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032a4:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80032ae:	5cd3      	ldrb	r3, [r2, r3]
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ba:	4a07      	ldr	r2, [pc, #28]	; (80032d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80032bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032be:	4a07      	ldr	r2, [pc, #28]	; (80032dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80032c4:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80032c6:	681b      	ldr	r3, [r3, #0]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	58024400 	.word	0x58024400
 80032d4:	0800616c 	.word	0x0800616c
 80032d8:	24000004 	.word	0x24000004
 80032dc:	24000000 	.word	0x24000000

080032e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80032e4:	f7ff ffcc 	bl	8003280 <HAL_RCC_GetHCLKFreq>
 80032e8:	4602      	mov	r2, r0
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	091b      	lsrs	r3, r3, #4
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	4904      	ldr	r1, [pc, #16]	; (8003308 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032f6:	5ccb      	ldrb	r3, [r1, r3]
 80032f8:	f003 031f 	and.w	r3, r3, #31
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003300:	4618      	mov	r0, r3
 8003302:	bd80      	pop	{r7, pc}
 8003304:	58024400 	.word	0x58024400
 8003308:	0800616c 	.word	0x0800616c

0800330c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003310:	f7ff ffb6 	bl	8003280 <HAL_RCC_GetHCLKFreq>
 8003314:	4602      	mov	r2, r0
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	0a1b      	lsrs	r3, r3, #8
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	4904      	ldr	r1, [pc, #16]	; (8003334 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003322:	5ccb      	ldrb	r3, [r1, r3]
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800332c:	4618      	mov	r0, r3
 800332e:	bd80      	pop	{r7, pc}
 8003330:	58024400 	.word	0x58024400
 8003334:	0800616c 	.word	0x0800616c

08003338 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003340:	2300      	movs	r3, #0
 8003342:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003344:	2300      	movs	r3, #0
 8003346:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d03f      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003358:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800335c:	d02a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800335e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003362:	d824      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003364:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003368:	d018      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800336a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800336e:	d81e      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003378:	d007      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800337a:	e018      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800337c:	4ba3      	ldr	r3, [pc, #652]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	4aa2      	ldr	r2, [pc, #648]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003386:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003388:	e015      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3304      	adds	r3, #4
 800338e:	2102      	movs	r1, #2
 8003390:	4618      	mov	r0, r3
 8003392:	f001 f9d5 	bl	8004740 <RCCEx_PLL2_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800339a:	e00c      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3324      	adds	r3, #36	; 0x24
 80033a0:	2102      	movs	r1, #2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f001 fa7e 	bl	80048a4 <RCCEx_PLL3_Config>
 80033a8:	4603      	mov	r3, r0
 80033aa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80033ac:	e003      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	75fb      	strb	r3, [r7, #23]
      break;
 80033b2:	e000      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80033bc:	4b93      	ldr	r3, [pc, #588]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033c8:	4990      	ldr	r1, [pc, #576]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	650b      	str	r3, [r1, #80]	; 0x50
 80033ce:	e001      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
 80033d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d03d      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d826      	bhi.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80033e8:	a201      	add	r2, pc, #4	; (adr r2, 80033f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80033ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ee:	bf00      	nop
 80033f0:	08003405 	.word	0x08003405
 80033f4:	08003413 	.word	0x08003413
 80033f8:	08003425 	.word	0x08003425
 80033fc:	0800343d 	.word	0x0800343d
 8003400:	0800343d 	.word	0x0800343d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003404:	4b81      	ldr	r3, [pc, #516]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	4a80      	ldr	r2, [pc, #512]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800340a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800340e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003410:	e015      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3304      	adds	r3, #4
 8003416:	2100      	movs	r1, #0
 8003418:	4618      	mov	r0, r3
 800341a:	f001 f991 	bl	8004740 <RCCEx_PLL2_Config>
 800341e:	4603      	mov	r3, r0
 8003420:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003422:	e00c      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3324      	adds	r3, #36	; 0x24
 8003428:	2100      	movs	r1, #0
 800342a:	4618      	mov	r0, r3
 800342c:	f001 fa3a 	bl	80048a4 <RCCEx_PLL3_Config>
 8003430:	4603      	mov	r3, r0
 8003432:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003434:	e003      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	75fb      	strb	r3, [r7, #23]
      break;
 800343a:	e000      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800343c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800343e:	7dfb      	ldrb	r3, [r7, #23]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d109      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003444:	4b71      	ldr	r3, [pc, #452]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003448:	f023 0207 	bic.w	r2, r3, #7
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003450:	496e      	ldr	r1, [pc, #440]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003452:	4313      	orrs	r3, r2
 8003454:	650b      	str	r3, [r1, #80]	; 0x50
 8003456:	e001      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003458:	7dfb      	ldrb	r3, [r7, #23]
 800345a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003464:	2b00      	cmp	r3, #0
 8003466:	d042      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003470:	d02b      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003476:	d825      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003478:	2bc0      	cmp	r3, #192	; 0xc0
 800347a:	d028      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 800347c:	2bc0      	cmp	r3, #192	; 0xc0
 800347e:	d821      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003480:	2b80      	cmp	r3, #128	; 0x80
 8003482:	d016      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003484:	2b80      	cmp	r3, #128	; 0x80
 8003486:	d81d      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	d007      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003490:	e018      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003492:	4b5e      	ldr	r3, [pc, #376]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	4a5d      	ldr	r2, [pc, #372]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800349c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800349e:	e017      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3304      	adds	r3, #4
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 f94a 	bl	8004740 <RCCEx_PLL2_Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80034b0:	e00e      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3324      	adds	r3, #36	; 0x24
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f001 f9f3 	bl	80048a4 <RCCEx_PLL3_Config>
 80034be:	4603      	mov	r3, r0
 80034c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80034c2:	e005      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	75fb      	strb	r3, [r7, #23]
      break;
 80034c8:	e002      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80034ca:	bf00      	nop
 80034cc:	e000      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80034ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80034d6:	4b4d      	ldr	r3, [pc, #308]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e2:	494a      	ldr	r1, [pc, #296]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	650b      	str	r3, [r1, #80]	; 0x50
 80034e8:	e001      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ea:	7dfb      	ldrb	r3, [r7, #23]
 80034ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d049      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003500:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003504:	d030      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003506:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800350a:	d82a      	bhi.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800350c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003510:	d02c      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003512:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003516:	d824      	bhi.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003518:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800351c:	d018      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800351e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003522:	d81e      	bhi.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003528:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800352c:	d007      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800352e:	e018      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003530:	4b36      	ldr	r3, [pc, #216]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	4a35      	ldr	r2, [pc, #212]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800353a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800353c:	e017      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3304      	adds	r3, #4
 8003542:	2100      	movs	r1, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f001 f8fb 	bl	8004740 <RCCEx_PLL2_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800354e:	e00e      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3324      	adds	r3, #36	; 0x24
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f001 f9a4 	bl	80048a4 <RCCEx_PLL3_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003560:	e005      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	75fb      	strb	r3, [r7, #23]
      break;
 8003566:	e002      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003568:	bf00      	nop
 800356a:	e000      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800356c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800356e:	7dfb      	ldrb	r3, [r7, #23]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003574:	4b25      	ldr	r3, [pc, #148]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003582:	4922      	ldr	r1, [pc, #136]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003584:	4313      	orrs	r3, r2
 8003586:	658b      	str	r3, [r1, #88]	; 0x58
 8003588:	e001      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358a:	7dfb      	ldrb	r3, [r7, #23]
 800358c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003596:	2b00      	cmp	r3, #0
 8003598:	d04b      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035a4:	d030      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80035a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035aa:	d82a      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80035ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035b0:	d02e      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80035b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035b6:	d824      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80035b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035bc:	d018      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80035be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035c2:	d81e      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80035c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035cc:	d007      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80035ce:	e018      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d0:	4b0e      	ldr	r3, [pc, #56]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	4a0d      	ldr	r2, [pc, #52]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035dc:	e019      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3304      	adds	r3, #4
 80035e2:	2100      	movs	r1, #0
 80035e4:	4618      	mov	r0, r3
 80035e6:	f001 f8ab 	bl	8004740 <RCCEx_PLL2_Config>
 80035ea:	4603      	mov	r3, r0
 80035ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80035ee:	e010      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3324      	adds	r3, #36	; 0x24
 80035f4:	2100      	movs	r1, #0
 80035f6:	4618      	mov	r0, r3
 80035f8:	f001 f954 	bl	80048a4 <RCCEx_PLL3_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003600:	e007      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	75fb      	strb	r3, [r7, #23]
      break;
 8003606:	e004      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003608:	bf00      	nop
 800360a:	e002      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800360c:	58024400 	.word	0x58024400
      break;
 8003610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003612:	7dfb      	ldrb	r3, [r7, #23]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10a      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003618:	4b99      	ldr	r3, [pc, #612]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003626:	4996      	ldr	r1, [pc, #600]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003628:	4313      	orrs	r3, r2
 800362a:	658b      	str	r3, [r1, #88]	; 0x58
 800362c:	e001      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800362e:	7dfb      	ldrb	r3, [r7, #23]
 8003630:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d032      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003642:	2b30      	cmp	r3, #48	; 0x30
 8003644:	d01c      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003646:	2b30      	cmp	r3, #48	; 0x30
 8003648:	d817      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800364a:	2b20      	cmp	r3, #32
 800364c:	d00c      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800364e:	2b20      	cmp	r3, #32
 8003650:	d813      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003652:	2b00      	cmp	r3, #0
 8003654:	d016      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003656:	2b10      	cmp	r3, #16
 8003658:	d10f      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800365a:	4b89      	ldr	r3, [pc, #548]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	4a88      	ldr	r2, [pc, #544]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003664:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003666:	e00e      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3304      	adds	r3, #4
 800366c:	2102      	movs	r1, #2
 800366e:	4618      	mov	r0, r3
 8003670:	f001 f866 	bl	8004740 <RCCEx_PLL2_Config>
 8003674:	4603      	mov	r3, r0
 8003676:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003678:	e005      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	75fb      	strb	r3, [r7, #23]
      break;
 800367e:	e002      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003680:	bf00      	nop
 8003682:	e000      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003684:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003686:	7dfb      	ldrb	r3, [r7, #23]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800368c:	4b7c      	ldr	r3, [pc, #496]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800368e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003690:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003698:	4979      	ldr	r1, [pc, #484]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800369a:	4313      	orrs	r3, r2
 800369c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800369e:	e001      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
 80036a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d047      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036b8:	d030      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80036ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036be:	d82a      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80036c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036c4:	d02c      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80036c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036ca:	d824      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80036cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d0:	d018      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80036d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d6:	d81e      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80036dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e0:	d007      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80036e2:	e018      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e4:	4b66      	ldr	r3, [pc, #408]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	4a65      	ldr	r2, [pc, #404]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80036ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80036f0:	e017      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3304      	adds	r3, #4
 80036f6:	2100      	movs	r1, #0
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 f821 	bl	8004740 <RCCEx_PLL2_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003702:	e00e      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3324      	adds	r3, #36	; 0x24
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f001 f8ca 	bl	80048a4 <RCCEx_PLL3_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003714:	e005      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	75fb      	strb	r3, [r7, #23]
      break;
 800371a:	e002      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800371c:	bf00      	nop
 800371e:	e000      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003722:	7dfb      	ldrb	r3, [r7, #23]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d109      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003728:	4b55      	ldr	r3, [pc, #340]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800372a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003734:	4952      	ldr	r1, [pc, #328]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003736:	4313      	orrs	r3, r2
 8003738:	650b      	str	r3, [r1, #80]	; 0x50
 800373a:	e001      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373c:	7dfb      	ldrb	r3, [r7, #23]
 800373e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d049      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003754:	d02e      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003756:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800375a:	d828      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 800375c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003760:	d02a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003762:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003766:	d822      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003768:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800376c:	d026      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x484>
 800376e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003772:	d81c      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003778:	d010      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800377a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800377e:	d816      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d01d      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003788:	d111      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3304      	adds	r3, #4
 800378e:	2101      	movs	r1, #1
 8003790:	4618      	mov	r0, r3
 8003792:	f000 ffd5 	bl	8004740 <RCCEx_PLL2_Config>
 8003796:	4603      	mov	r3, r0
 8003798:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800379a:	e012      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3324      	adds	r3, #36	; 0x24
 80037a0:	2101      	movs	r1, #1
 80037a2:	4618      	mov	r0, r3
 80037a4:	f001 f87e 	bl	80048a4 <RCCEx_PLL3_Config>
 80037a8:	4603      	mov	r3, r0
 80037aa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80037ac:	e009      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
      break;
 80037b2:	e006      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80037b4:	bf00      	nop
 80037b6:	e004      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80037b8:	bf00      	nop
 80037ba:	e002      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80037bc:	bf00      	nop
 80037be:	e000      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80037c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c2:	7dfb      	ldrb	r3, [r7, #23]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d109      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037c8:	4b2d      	ldr	r3, [pc, #180]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037cc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d4:	492a      	ldr	r1, [pc, #168]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	650b      	str	r3, [r1, #80]	; 0x50
 80037da:	e001      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037dc:	7dfb      	ldrb	r3, [r7, #23]
 80037de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d04d      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037f6:	d02e      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80037f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037fc:	d828      	bhi.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80037fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003802:	d02a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003808:	d822      	bhi.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800380a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800380e:	d026      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003810:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003814:	d81c      	bhi.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800381a:	d010      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800381c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003820:	d816      	bhi.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d01d      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003826:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800382a:	d111      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3304      	adds	r3, #4
 8003830:	2101      	movs	r1, #1
 8003832:	4618      	mov	r0, r3
 8003834:	f000 ff84 	bl	8004740 <RCCEx_PLL2_Config>
 8003838:	4603      	mov	r3, r0
 800383a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800383c:	e012      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3324      	adds	r3, #36	; 0x24
 8003842:	2101      	movs	r1, #1
 8003844:	4618      	mov	r0, r3
 8003846:	f001 f82d 	bl	80048a4 <RCCEx_PLL3_Config>
 800384a:	4603      	mov	r3, r0
 800384c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800384e:	e009      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	75fb      	strb	r3, [r7, #23]
      break;
 8003854:	e006      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003856:	bf00      	nop
 8003858:	e004      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800385a:	bf00      	nop
 800385c:	e002      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800385e:	bf00      	nop
 8003860:	e000      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003864:	7dfb      	ldrb	r3, [r7, #23]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10c      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800386c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003878:	4901      	ldr	r1, [pc, #4]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800387a:	4313      	orrs	r3, r2
 800387c:	658b      	str	r3, [r1, #88]	; 0x58
 800387e:	e003      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003880:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003884:	7dfb      	ldrb	r3, [r7, #23]
 8003886:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d02f      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800389c:	d00e      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x584>
 800389e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038a2:	d814      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x596>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d015      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80038a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038ac:	d10f      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ae:	4baf      	ldr	r3, [pc, #700]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	4aae      	ldr	r2, [pc, #696]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80038ba:	e00c      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3304      	adds	r3, #4
 80038c0:	2101      	movs	r1, #1
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 ff3c 	bl	8004740 <RCCEx_PLL2_Config>
 80038c8:	4603      	mov	r3, r0
 80038ca:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80038cc:	e003      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	75fb      	strb	r3, [r7, #23]
      break;
 80038d2:	e000      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80038d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038dc:	4ba3      	ldr	r3, [pc, #652]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038e8:	49a0      	ldr	r1, [pc, #640]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	650b      	str	r3, [r1, #80]	; 0x50
 80038ee:	e001      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d032      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	2b03      	cmp	r3, #3
 8003906:	d81b      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003908:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390e:	bf00      	nop
 8003910:	08003947 	.word	0x08003947
 8003914:	08003921 	.word	0x08003921
 8003918:	0800392f 	.word	0x0800392f
 800391c:	08003947 	.word	0x08003947
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003920:	4b92      	ldr	r3, [pc, #584]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	4a91      	ldr	r2, [pc, #580]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800392a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800392c:	e00c      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3304      	adds	r3, #4
 8003932:	2102      	movs	r1, #2
 8003934:	4618      	mov	r0, r3
 8003936:	f000 ff03 	bl	8004740 <RCCEx_PLL2_Config>
 800393a:	4603      	mov	r3, r0
 800393c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800393e:	e003      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	75fb      	strb	r3, [r7, #23]
      break;
 8003944:	e000      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003948:	7dfb      	ldrb	r3, [r7, #23]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800394e:	4b87      	ldr	r3, [pc, #540]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003952:	f023 0203 	bic.w	r2, r3, #3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	4984      	ldr	r1, [pc, #528]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800395c:	4313      	orrs	r3, r2
 800395e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003960:	e001      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003962:	7dfb      	ldrb	r3, [r7, #23]
 8003964:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 8086 	beq.w	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003974:	4b7e      	ldr	r3, [pc, #504]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a7d      	ldr	r2, [pc, #500]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800397a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003980:	f7fd fbe2 	bl	8001148 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003986:	e009      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003988:	f7fd fbde 	bl	8001148 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b64      	cmp	r3, #100	; 0x64
 8003994:	d902      	bls.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	75fb      	strb	r3, [r7, #23]
        break;
 800399a:	e005      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800399c:	4b74      	ldr	r3, [pc, #464]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0ef      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80039a8:	7dfb      	ldrb	r3, [r7, #23]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d166      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80039ae:	4b6f      	ldr	r3, [pc, #444]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039b8:	4053      	eors	r3, r2
 80039ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d013      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039c2:	4b6a      	ldr	r3, [pc, #424]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039cc:	4b67      	ldr	r3, [pc, #412]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d0:	4a66      	ldr	r2, [pc, #408]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039d8:	4b64      	ldr	r3, [pc, #400]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	4a63      	ldr	r2, [pc, #396]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80039e4:	4a61      	ldr	r2, [pc, #388]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039f4:	d115      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f6:	f7fd fba7 	bl	8001148 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039fc:	e00b      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fe:	f7fd fba3 	bl	8001148 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d902      	bls.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	75fb      	strb	r3, [r7, #23]
            break;
 8003a14:	e005      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a16:	4b55      	ldr	r3, [pc, #340]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0ed      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d126      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a36:	d10d      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003a38:	4b4c      	ldr	r3, [pc, #304]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a46:	0919      	lsrs	r1, r3, #4
 8003a48:	4b4a      	ldr	r3, [pc, #296]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003a4a:	400b      	ands	r3, r1
 8003a4c:	4947      	ldr	r1, [pc, #284]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	610b      	str	r3, [r1, #16]
 8003a52:	e005      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003a54:	4b45      	ldr	r3, [pc, #276]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	4a44      	ldr	r2, [pc, #272]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a5e:	6113      	str	r3, [r2, #16]
 8003a60:	4b42      	ldr	r3, [pc, #264]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6e:	493f      	ldr	r1, [pc, #252]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	670b      	str	r3, [r1, #112]	; 0x70
 8003a74:	e004      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
 8003a78:	75bb      	strb	r3, [r7, #22]
 8003a7a:	e001      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8085 	beq.w	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a92:	2b28      	cmp	r3, #40	; 0x28
 8003a94:	d866      	bhi.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003a96:	a201      	add	r2, pc, #4	; (adr r2, 8003a9c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9c:	08003b79 	.word	0x08003b79
 8003aa0:	08003b65 	.word	0x08003b65
 8003aa4:	08003b65 	.word	0x08003b65
 8003aa8:	08003b65 	.word	0x08003b65
 8003aac:	08003b65 	.word	0x08003b65
 8003ab0:	08003b65 	.word	0x08003b65
 8003ab4:	08003b65 	.word	0x08003b65
 8003ab8:	08003b65 	.word	0x08003b65
 8003abc:	08003b41 	.word	0x08003b41
 8003ac0:	08003b65 	.word	0x08003b65
 8003ac4:	08003b65 	.word	0x08003b65
 8003ac8:	08003b65 	.word	0x08003b65
 8003acc:	08003b65 	.word	0x08003b65
 8003ad0:	08003b65 	.word	0x08003b65
 8003ad4:	08003b65 	.word	0x08003b65
 8003ad8:	08003b65 	.word	0x08003b65
 8003adc:	08003b53 	.word	0x08003b53
 8003ae0:	08003b65 	.word	0x08003b65
 8003ae4:	08003b65 	.word	0x08003b65
 8003ae8:	08003b65 	.word	0x08003b65
 8003aec:	08003b65 	.word	0x08003b65
 8003af0:	08003b65 	.word	0x08003b65
 8003af4:	08003b65 	.word	0x08003b65
 8003af8:	08003b65 	.word	0x08003b65
 8003afc:	08003b79 	.word	0x08003b79
 8003b00:	08003b65 	.word	0x08003b65
 8003b04:	08003b65 	.word	0x08003b65
 8003b08:	08003b65 	.word	0x08003b65
 8003b0c:	08003b65 	.word	0x08003b65
 8003b10:	08003b65 	.word	0x08003b65
 8003b14:	08003b65 	.word	0x08003b65
 8003b18:	08003b65 	.word	0x08003b65
 8003b1c:	08003b79 	.word	0x08003b79
 8003b20:	08003b65 	.word	0x08003b65
 8003b24:	08003b65 	.word	0x08003b65
 8003b28:	08003b65 	.word	0x08003b65
 8003b2c:	08003b65 	.word	0x08003b65
 8003b30:	08003b65 	.word	0x08003b65
 8003b34:	08003b65 	.word	0x08003b65
 8003b38:	08003b65 	.word	0x08003b65
 8003b3c:	08003b79 	.word	0x08003b79
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3304      	adds	r3, #4
 8003b44:	2101      	movs	r1, #1
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fdfa 	bl	8004740 <RCCEx_PLL2_Config>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003b50:	e013      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3324      	adds	r3, #36	; 0x24
 8003b56:	2101      	movs	r1, #1
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 fea3 	bl	80048a4 <RCCEx_PLL3_Config>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003b62:	e00a      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	75fb      	strb	r3, [r7, #23]
      break;
 8003b68:	e007      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b6a:	bf00      	nop
 8003b6c:	58024400 	.word	0x58024400
 8003b70:	58024800 	.word	0x58024800
 8003b74:	00ffffcf 	.word	0x00ffffcf
      break;
 8003b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b7a:	7dfb      	ldrb	r3, [r7, #23]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d109      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b80:	4b96      	ldr	r3, [pc, #600]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b84:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b8c:	4993      	ldr	r1, [pc, #588]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	654b      	str	r3, [r1, #84]	; 0x54
 8003b92:	e001      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b94:	7dfb      	ldrb	r3, [r7, #23]
 8003b96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d038      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba8:	2b05      	cmp	r3, #5
 8003baa:	d821      	bhi.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003bac:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb2:	bf00      	nop
 8003bb4:	08003bf7 	.word	0x08003bf7
 8003bb8:	08003bcd 	.word	0x08003bcd
 8003bbc:	08003bdf 	.word	0x08003bdf
 8003bc0:	08003bf7 	.word	0x08003bf7
 8003bc4:	08003bf7 	.word	0x08003bf7
 8003bc8:	08003bf7 	.word	0x08003bf7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fdb4 	bl	8004740 <RCCEx_PLL2_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003bdc:	e00c      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3324      	adds	r3, #36	; 0x24
 8003be2:	2101      	movs	r1, #1
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fe5d 	bl	80048a4 <RCCEx_PLL3_Config>
 8003bea:	4603      	mov	r3, r0
 8003bec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003bee:	e003      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8003bf4:	e000      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bf8:	7dfb      	ldrb	r3, [r7, #23]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003bfe:	4b77      	ldr	r3, [pc, #476]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c02:	f023 0207 	bic.w	r2, r3, #7
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0a:	4974      	ldr	r1, [pc, #464]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	654b      	str	r3, [r1, #84]	; 0x54
 8003c10:	e001      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c12:	7dfb      	ldrb	r3, [r7, #23]
 8003c14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d03a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c28:	2b05      	cmp	r3, #5
 8003c2a:	d821      	bhi.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003c2c:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c32:	bf00      	nop
 8003c34:	08003c77 	.word	0x08003c77
 8003c38:	08003c4d 	.word	0x08003c4d
 8003c3c:	08003c5f 	.word	0x08003c5f
 8003c40:	08003c77 	.word	0x08003c77
 8003c44:	08003c77 	.word	0x08003c77
 8003c48:	08003c77 	.word	0x08003c77
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	2101      	movs	r1, #1
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fd74 	bl	8004740 <RCCEx_PLL2_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003c5c:	e00c      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3324      	adds	r3, #36	; 0x24
 8003c62:	2101      	movs	r1, #1
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 fe1d 	bl	80048a4 <RCCEx_PLL3_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003c6e:	e003      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	75fb      	strb	r3, [r7, #23]
      break;
 8003c74:	e000      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c78:	7dfb      	ldrb	r3, [r7, #23]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10a      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c7e:	4b57      	ldr	r3, [pc, #348]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c82:	f023 0207 	bic.w	r2, r3, #7
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8c:	4953      	ldr	r1, [pc, #332]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	658b      	str	r3, [r1, #88]	; 0x58
 8003c92:	e001      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
 8003c96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d04b      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cae:	d02e      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cb4:	d828      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cba:	d02a      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc0:	d822      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003cc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cc6:	d026      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003cc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ccc:	d81c      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cd2:	d010      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cd8:	d816      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d01d      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ce2:	d111      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	2100      	movs	r1, #0
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fd28 	bl	8004740 <RCCEx_PLL2_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003cf4:	e012      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3324      	adds	r3, #36	; 0x24
 8003cfa:	2102      	movs	r1, #2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fdd1 	bl	80048a4 <RCCEx_PLL3_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003d06:	e009      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d0c:	e006      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003d0e:	bf00      	nop
 8003d10:	e004      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003d12:	bf00      	nop
 8003d14:	e002      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003d16:	bf00      	nop
 8003d18:	e000      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10a      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d22:	4b2e      	ldr	r3, [pc, #184]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d30:	492a      	ldr	r1, [pc, #168]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	654b      	str	r3, [r1, #84]	; 0x54
 8003d36:	e001      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d38:	7dfb      	ldrb	r3, [r7, #23]
 8003d3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d04d      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d4e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d52:	d02e      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003d54:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d58:	d828      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5e:	d02a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d64:	d822      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003d66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d6a:	d026      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003d6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d70:	d81c      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d76:	d010      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7c:	d816      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01d      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d86:	d111      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fcd6 	bl	8004740 <RCCEx_PLL2_Config>
 8003d94:	4603      	mov	r3, r0
 8003d96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d98:	e012      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3324      	adds	r3, #36	; 0x24
 8003d9e:	2102      	movs	r1, #2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 fd7f 	bl	80048a4 <RCCEx_PLL3_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003daa:	e009      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	75fb      	strb	r3, [r7, #23]
      break;
 8003db0:	e006      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003db2:	bf00      	nop
 8003db4:	e004      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003db6:	bf00      	nop
 8003db8:	e002      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003dba:	bf00      	nop
 8003dbc:	e000      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dc0:	7dfb      	ldrb	r3, [r7, #23]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10c      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dd4:	4901      	ldr	r1, [pc, #4]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	658b      	str	r3, [r1, #88]	; 0x58
 8003dda:	e003      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003ddc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de0:	7dfb      	ldrb	r3, [r7, #23]
 8003de2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d04b      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003df6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003dfa:	d02e      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003dfc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e00:	d828      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e06:	d02a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e0c:	d822      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003e0e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e12:	d026      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003e14:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e18:	d81c      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003e1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e1e:	d010      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003e20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e24:	d816      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01d      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e2e:	d111      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3304      	adds	r3, #4
 8003e34:	2100      	movs	r1, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fc82 	bl	8004740 <RCCEx_PLL2_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e40:	e012      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3324      	adds	r3, #36	; 0x24
 8003e46:	2102      	movs	r1, #2
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fd2b 	bl	80048a4 <RCCEx_PLL3_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e52:	e009      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	75fb      	strb	r3, [r7, #23]
      break;
 8003e58:	e006      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003e5a:	bf00      	nop
 8003e5c:	e004      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003e5e:	bf00      	nop
 8003e60:	e002      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003e62:	bf00      	nop
 8003e64:	e000      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10a      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e6e:	4b9d      	ldr	r3, [pc, #628]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e7c:	4999      	ldr	r1, [pc, #612]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	658b      	str	r3, [r1, #88]	; 0x58
 8003e82:	e001      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e84:	7dfb      	ldrb	r3, [r7, #23]
 8003e86:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9e:	d10a      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3324      	adds	r3, #36	; 0x24
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fcfc 	bl	80048a4 <RCCEx_PLL3_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003eb6:	4b8b      	ldr	r3, [pc, #556]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ec4:	4987      	ldr	r1, [pc, #540]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0310 	and.w	r3, r3, #16
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d01a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee0:	d10a      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3324      	adds	r3, #36	; 0x24
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fcdb 	bl	80048a4 <RCCEx_PLL3_Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ef8:	4b7a      	ldr	r3, [pc, #488]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f06:	4977      	ldr	r1, [pc, #476]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d034      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f22:	d01d      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003f24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f28:	d817      	bhi.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f32:	d009      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003f34:	e011      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fbff 	bl	8004740 <RCCEx_PLL2_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f46:	e00c      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3324      	adds	r3, #36	; 0x24
 8003f4c:	2102      	movs	r1, #2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fca8 	bl	80048a4 <RCCEx_PLL3_Config>
 8003f54:	4603      	mov	r3, r0
 8003f56:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f58:	e003      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f5e:	e000      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10a      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f68:	4b5e      	ldr	r3, [pc, #376]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f76:	495b      	ldr	r1, [pc, #364]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	658b      	str	r3, [r1, #88]	; 0x58
 8003f7c:	e001      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
 8003f80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d033      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f98:	d01c      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003f9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f9e:	d816      	bhi.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003fa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fa4:	d003      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003fa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003faa:	d007      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003fac:	e00f      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fae:	4b4d      	ldr	r3, [pc, #308]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	4a4c      	ldr	r2, [pc, #304]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003fba:	e00c      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3324      	adds	r3, #36	; 0x24
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fc6e 	bl	80048a4 <RCCEx_PLL3_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003fcc:	e003      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd6:	7dfb      	ldrb	r3, [r7, #23]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10a      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fdc:	4b41      	ldr	r3, [pc, #260]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fea:	493e      	ldr	r1, [pc, #248]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	654b      	str	r3, [r1, #84]	; 0x54
 8003ff0:	e001      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff2:	7dfb      	ldrb	r3, [r7, #23]
 8003ff4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d029      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800400a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400e:	d007      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004010:	e00f      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004012:	4b34      	ldr	r3, [pc, #208]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	4a33      	ldr	r2, [pc, #204]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800401c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800401e:	e00b      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3304      	adds	r3, #4
 8004024:	2102      	movs	r1, #2
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fb8a 	bl	8004740 <RCCEx_PLL2_Config>
 800402c:	4603      	mov	r3, r0
 800402e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004030:	e002      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	75fb      	strb	r3, [r7, #23]
      break;
 8004036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004038:	7dfb      	ldrb	r3, [r7, #23]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800403e:	4b29      	ldr	r3, [pc, #164]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004042:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404a:	4926      	ldr	r1, [pc, #152]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800404c:	4313      	orrs	r3, r2
 800404e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004050:	e001      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004052:	7dfb      	ldrb	r3, [r7, #23]
 8004054:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3324      	adds	r3, #36	; 0x24
 8004066:	2102      	movs	r1, #2
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fc1b 	bl	80048a4 <RCCEx_PLL3_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d033      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800408c:	d017      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800408e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004092:	d811      	bhi.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004098:	d013      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800409a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800409e:	d80b      	bhi.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d010      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80040a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040a8:	d106      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040aa:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ae:	4a0d      	ldr	r2, [pc, #52]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80040b6:	e007      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	75fb      	strb	r3, [r7, #23]
      break;
 80040bc:	e004      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80040be:	bf00      	nop
 80040c0:	e002      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80040c2:	bf00      	nop
 80040c4:	e000      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80040c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040c8:	7dfb      	ldrb	r3, [r7, #23]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040ce:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040da:	4902      	ldr	r1, [pc, #8]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	654b      	str	r3, [r1, #84]	; 0x54
 80040e0:	e004      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80040e2:	bf00      	nop
 80040e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e8:	7dfb      	ldrb	r3, [r7, #23]
 80040ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040f8:	4b31      	ldr	r3, [pc, #196]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004104:	492e      	ldr	r1, [pc, #184]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004106:	4313      	orrs	r3, r2
 8004108:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004116:	4b2a      	ldr	r3, [pc, #168]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004124:	4926      	ldr	r1, [pc, #152]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004126:	4313      	orrs	r3, r2
 8004128:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004136:	4b22      	ldr	r3, [pc, #136]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004142:	491f      	ldr	r1, [pc, #124]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004144:	4313      	orrs	r3, r2
 8004146:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00d      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004154:	4b1a      	ldr	r3, [pc, #104]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	4a19      	ldr	r2, [pc, #100]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800415a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800415e:	6113      	str	r3, [r2, #16]
 8004160:	4b17      	ldr	r3, [pc, #92]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800416a:	4915      	ldr	r1, [pc, #84]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800416c:	4313      	orrs	r3, r2
 800416e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	da08      	bge.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004178:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800417a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004184:	490e      	ldr	r1, [pc, #56]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004186:	4313      	orrs	r3, r2
 8004188:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d009      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004196:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	4906      	ldr	r1, [pc, #24]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80041aa:	7dbb      	ldrb	r3, [r7, #22]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	e000      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	58024400 	.word	0x58024400

080041c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80041c8:	f7ff f85a 	bl	8003280 <HAL_RCC_GetHCLKFreq>
 80041cc:	4602      	mov	r2, r0
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	091b      	lsrs	r3, r3, #4
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	4904      	ldr	r1, [pc, #16]	; (80041ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80041da:	5ccb      	ldrb	r3, [r1, r3]
 80041dc:	f003 031f 	and.w	r3, r3, #31
 80041e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	58024400 	.word	0x58024400
 80041ec:	0800616c 	.word	0x0800616c

080041f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b089      	sub	sp, #36	; 0x24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041f8:	4ba1      	ldr	r3, [pc, #644]	; (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004202:	4b9f      	ldr	r3, [pc, #636]	; (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004206:	0b1b      	lsrs	r3, r3, #12
 8004208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800420c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800420e:	4b9c      	ldr	r3, [pc, #624]	; (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	091b      	lsrs	r3, r3, #4
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800421a:	4b99      	ldr	r3, [pc, #612]	; (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800421c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421e:	08db      	lsrs	r3, r3, #3
 8004220:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004232:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 8111 	beq.w	8004460 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b02      	cmp	r3, #2
 8004242:	f000 8083 	beq.w	800434c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	2b02      	cmp	r3, #2
 800424a:	f200 80a1 	bhi.w	8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d056      	beq.n	8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800425a:	e099      	b.n	8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800425c:	4b88      	ldr	r3, [pc, #544]	; (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	d02d      	beq.n	80042c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004268:	4b85      	ldr	r3, [pc, #532]	; (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	08db      	lsrs	r3, r3, #3
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	4a84      	ldr	r2, [pc, #528]	; (8004484 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004274:	fa22 f303 	lsr.w	r3, r2, r3
 8004278:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	ee07 3a90 	vmov	s15, r3
 8004280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	ee07 3a90 	vmov	s15, r3
 800428a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800428e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004292:	4b7b      	ldr	r3, [pc, #492]	; (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800429a:	ee07 3a90 	vmov	s15, r3
 800429e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80042a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80042c2:	e087      	b.n	80043d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800448c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80042d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042d6:	4b6a      	ldr	r3, [pc, #424]	; (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042de:	ee07 3a90 	vmov	s15, r3
 80042e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80042ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004302:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004306:	e065      	b.n	80043d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004312:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800431a:	4b59      	ldr	r3, [pc, #356]	; (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800432a:	ed97 6a03 	vldr	s12, [r7, #12]
 800432e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800433a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800433e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004346:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800434a:	e043      	b.n	80043d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004356:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800435a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435e:	4b48      	ldr	r3, [pc, #288]	; (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004372:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800437a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800437e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800438e:	e021      	b.n	80043d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800439e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043a2:	4b37      	ldr	r3, [pc, #220]	; (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80043b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80043d4:	4b2a      	ldr	r3, [pc, #168]	; (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	0a5b      	lsrs	r3, r3, #9
 80043da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80043f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043fa:	ee17 2a90 	vmov	r2, s15
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004402:	4b1f      	ldr	r3, [pc, #124]	; (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004406:	0c1b      	lsrs	r3, r3, #16
 8004408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800440c:	ee07 3a90 	vmov	s15, r3
 8004410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004414:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004418:	ee37 7a87 	vadd.f32	s14, s15, s14
 800441c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004428:	ee17 2a90 	vmov	r2, s15
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004430:	4b13      	ldr	r3, [pc, #76]	; (8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	0e1b      	lsrs	r3, r3, #24
 8004436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004442:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004446:	ee37 7a87 	vadd.f32	s14, s15, s14
 800444a:	edd7 6a07 	vldr	s13, [r7, #28]
 800444e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004456:	ee17 2a90 	vmov	r2, s15
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800445e:	e008      	b.n	8004472 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	609a      	str	r2, [r3, #8]
}
 8004472:	bf00      	nop
 8004474:	3724      	adds	r7, #36	; 0x24
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	58024400 	.word	0x58024400
 8004484:	03d09000 	.word	0x03d09000
 8004488:	46000000 	.word	0x46000000
 800448c:	4c742400 	.word	0x4c742400
 8004490:	4a742400 	.word	0x4a742400
 8004494:	4af42400 	.word	0x4af42400

08004498 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004498:	b480      	push	{r7}
 800449a:	b089      	sub	sp, #36	; 0x24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044a0:	4ba1      	ldr	r3, [pc, #644]	; (8004728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a4:	f003 0303 	and.w	r3, r3, #3
 80044a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80044aa:	4b9f      	ldr	r3, [pc, #636]	; (8004728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	0d1b      	lsrs	r3, r3, #20
 80044b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80044b6:	4b9c      	ldr	r3, [pc, #624]	; (8004728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	0a1b      	lsrs	r3, r3, #8
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80044c2:	4b99      	ldr	r3, [pc, #612]	; (8004728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c6:	08db      	lsrs	r3, r3, #3
 80044c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	fb02 f303 	mul.w	r3, r2, r3
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 8111 	beq.w	8004708 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	f000 8083 	beq.w	80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	f200 80a1 	bhi.w	8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d056      	beq.n	80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004502:	e099      	b.n	8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004504:	4b88      	ldr	r3, [pc, #544]	; (8004728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d02d      	beq.n	800456c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004510:	4b85      	ldr	r3, [pc, #532]	; (8004728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	08db      	lsrs	r3, r3, #3
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	4a84      	ldr	r2, [pc, #528]	; (800472c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
 8004520:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	ee07 3a90 	vmov	s15, r3
 8004528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800453a:	4b7b      	ldr	r3, [pc, #492]	; (8004728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800454a:	ed97 6a03 	vldr	s12, [r7, #12]
 800454e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004730 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800455a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800455e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004566:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800456a:	e087      	b.n	800467c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004576:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004734 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800457a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800457e:	4b6a      	ldr	r3, [pc, #424]	; (8004728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004592:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004730 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800459a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800459e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045ae:	e065      	b.n	800467c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80045be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c2:	4b59      	ldr	r3, [pc, #356]	; (8004728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80045d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004730 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045f2:	e043      	b.n	800467c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800473c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004606:	4b48      	ldr	r3, [pc, #288]	; (8004728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004616:	ed97 6a03 	vldr	s12, [r7, #12]
 800461a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004730 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800461e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800462a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004632:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004636:	e021      	b.n	800467c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004642:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004738 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464a:	4b37      	ldr	r3, [pc, #220]	; (8004728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465a:	ed97 6a03 	vldr	s12, [r7, #12]
 800465e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004730 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800466e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004676:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800467a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800467c:	4b2a      	ldr	r3, [pc, #168]	; (8004728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	0a5b      	lsrs	r3, r3, #9
 8004682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004692:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004696:	edd7 6a07 	vldr	s13, [r7, #28]
 800469a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800469e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046a2:	ee17 2a90 	vmov	r2, s15
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80046aa:	4b1f      	ldr	r3, [pc, #124]	; (8004728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	0c1b      	lsrs	r3, r3, #16
 80046b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046b4:	ee07 3a90 	vmov	s15, r3
 80046b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80046c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046d0:	ee17 2a90 	vmov	r2, s15
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80046d8:	4b13      	ldr	r3, [pc, #76]	; (8004728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	0e1b      	lsrs	r3, r3, #24
 80046de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80046f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046fe:	ee17 2a90 	vmov	r2, s15
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004706:	e008      	b.n	800471a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	609a      	str	r2, [r3, #8]
}
 800471a:	bf00      	nop
 800471c:	3724      	adds	r7, #36	; 0x24
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	58024400 	.word	0x58024400
 800472c:	03d09000 	.word	0x03d09000
 8004730:	46000000 	.word	0x46000000
 8004734:	4c742400 	.word	0x4c742400
 8004738:	4a742400 	.word	0x4a742400
 800473c:	4af42400 	.word	0x4af42400

08004740 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800474e:	4b53      	ldr	r3, [pc, #332]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b03      	cmp	r3, #3
 8004758:	d101      	bne.n	800475e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e099      	b.n	8004892 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800475e:	4b4f      	ldr	r3, [pc, #316]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a4e      	ldr	r2, [pc, #312]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004764:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800476a:	f7fc fced 	bl	8001148 <HAL_GetTick>
 800476e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004770:	e008      	b.n	8004784 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004772:	f7fc fce9 	bl	8001148 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e086      	b.n	8004892 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004784:	4b45      	ldr	r3, [pc, #276]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1f0      	bne.n	8004772 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004790:	4b42      	ldr	r3, [pc, #264]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	031b      	lsls	r3, r3, #12
 800479e:	493f      	ldr	r1, [pc, #252]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	628b      	str	r3, [r1, #40]	; 0x28
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	3b01      	subs	r3, #1
 80047aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	025b      	lsls	r3, r3, #9
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	431a      	orrs	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	3b01      	subs	r3, #1
 80047c0:	041b      	lsls	r3, r3, #16
 80047c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	061b      	lsls	r3, r3, #24
 80047d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047d4:	4931      	ldr	r1, [pc, #196]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80047da:	4b30      	ldr	r3, [pc, #192]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	492d      	ldr	r1, [pc, #180]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80047ec:	4b2b      	ldr	r3, [pc, #172]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	f023 0220 	bic.w	r2, r3, #32
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	4928      	ldr	r1, [pc, #160]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80047fe:	4b27      	ldr	r3, [pc, #156]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	4a26      	ldr	r2, [pc, #152]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004804:	f023 0310 	bic.w	r3, r3, #16
 8004808:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800480a:	4b24      	ldr	r3, [pc, #144]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 800480c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800480e:	4b24      	ldr	r3, [pc, #144]	; (80048a0 <RCCEx_PLL2_Config+0x160>)
 8004810:	4013      	ands	r3, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	69d2      	ldr	r2, [r2, #28]
 8004816:	00d2      	lsls	r2, r2, #3
 8004818:	4920      	ldr	r1, [pc, #128]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 800481a:	4313      	orrs	r3, r2
 800481c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800481e:	4b1f      	ldr	r3, [pc, #124]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	4a1e      	ldr	r2, [pc, #120]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004824:	f043 0310 	orr.w	r3, r3, #16
 8004828:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d106      	bne.n	800483e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004830:	4b1a      	ldr	r3, [pc, #104]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	4a19      	ldr	r2, [pc, #100]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004836:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800483a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800483c:	e00f      	b.n	800485e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d106      	bne.n	8004852 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004844:	4b15      	ldr	r3, [pc, #84]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	4a14      	ldr	r2, [pc, #80]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 800484a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800484e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004850:	e005      	b.n	800485e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004852:	4b12      	ldr	r3, [pc, #72]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	4a11      	ldr	r2, [pc, #68]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004858:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800485c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800485e:	4b0f      	ldr	r3, [pc, #60]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a0e      	ldr	r2, [pc, #56]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004864:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800486a:	f7fc fc6d 	bl	8001148 <HAL_GetTick>
 800486e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004870:	e008      	b.n	8004884 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004872:	f7fc fc69 	bl	8001148 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e006      	b.n	8004892 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004884:	4b05      	ldr	r3, [pc, #20]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004890:	7bfb      	ldrb	r3, [r7, #15]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	58024400 	.word	0x58024400
 80048a0:	ffff0007 	.word	0xffff0007

080048a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048b2:	4b53      	ldr	r3, [pc, #332]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	2b03      	cmp	r3, #3
 80048bc:	d101      	bne.n	80048c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e099      	b.n	80049f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80048c2:	4b4f      	ldr	r3, [pc, #316]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a4e      	ldr	r2, [pc, #312]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80048c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ce:	f7fc fc3b 	bl	8001148 <HAL_GetTick>
 80048d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048d4:	e008      	b.n	80048e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80048d6:	f7fc fc37 	bl	8001148 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e086      	b.n	80049f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048e8:	4b45      	ldr	r3, [pc, #276]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1f0      	bne.n	80048d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80048f4:	4b42      	ldr	r3, [pc, #264]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	051b      	lsls	r3, r3, #20
 8004902:	493f      	ldr	r1, [pc, #252]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 8004904:	4313      	orrs	r3, r2
 8004906:	628b      	str	r3, [r1, #40]	; 0x28
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	3b01      	subs	r3, #1
 800490e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	3b01      	subs	r3, #1
 8004918:	025b      	lsls	r3, r3, #9
 800491a:	b29b      	uxth	r3, r3
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	3b01      	subs	r3, #1
 8004924:	041b      	lsls	r3, r3, #16
 8004926:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	3b01      	subs	r3, #1
 8004932:	061b      	lsls	r3, r3, #24
 8004934:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004938:	4931      	ldr	r1, [pc, #196]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 800493a:	4313      	orrs	r3, r2
 800493c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800493e:	4b30      	ldr	r3, [pc, #192]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	492d      	ldr	r1, [pc, #180]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 800494c:	4313      	orrs	r3, r2
 800494e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004950:	4b2b      	ldr	r3, [pc, #172]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	4928      	ldr	r1, [pc, #160]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 800495e:	4313      	orrs	r3, r2
 8004960:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004962:	4b27      	ldr	r3, [pc, #156]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	4a26      	ldr	r2, [pc, #152]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 8004968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800496c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800496e:	4b24      	ldr	r3, [pc, #144]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 8004970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004972:	4b24      	ldr	r3, [pc, #144]	; (8004a04 <RCCEx_PLL3_Config+0x160>)
 8004974:	4013      	ands	r3, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	69d2      	ldr	r2, [r2, #28]
 800497a:	00d2      	lsls	r2, r2, #3
 800497c:	4920      	ldr	r1, [pc, #128]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 800497e:	4313      	orrs	r3, r2
 8004980:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004982:	4b1f      	ldr	r3, [pc, #124]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004986:	4a1e      	ldr	r2, [pc, #120]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 8004988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800498c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d106      	bne.n	80049a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004994:	4b1a      	ldr	r3, [pc, #104]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	4a19      	ldr	r2, [pc, #100]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 800499a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800499e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049a0:	e00f      	b.n	80049c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d106      	bne.n	80049b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80049a8:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	4a14      	ldr	r2, [pc, #80]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80049ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049b4:	e005      	b.n	80049c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80049b6:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	4a11      	ldr	r2, [pc, #68]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80049bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80049c2:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a0e      	ldr	r2, [pc, #56]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80049c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ce:	f7fc fbbb 	bl	8001148 <HAL_GetTick>
 80049d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049d4:	e008      	b.n	80049e8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80049d6:	f7fc fbb7 	bl	8001148 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d901      	bls.n	80049e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e006      	b.n	80049f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049e8:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0f0      	beq.n	80049d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	58024400 	.word	0x58024400
 8004a04:	ffff0007 	.word	0xffff0007

08004a08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e042      	b.n	8004aa0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d106      	bne.n	8004a32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7fc f9c3 	bl	8000db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2224      	movs	r2, #36	; 0x24
 8004a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0201 	bic.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f82c 	bl	8004aa8 <UART_SetConfig>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e022      	b.n	8004aa0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d002      	beq.n	8004a68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fd88 	bl	8005578 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fe0f 	bl	80056bc <UART_CheckIdleState>
 8004a9e:	4603      	mov	r3, r0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aac:	b092      	sub	sp, #72	; 0x48
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4bbe      	ldr	r3, [pc, #760]	; (8004dd0 <UART_SetConfig+0x328>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	6812      	ldr	r2, [r2, #0]
 8004ade:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ae0:	430b      	orrs	r3, r1
 8004ae2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4ab3      	ldr	r2, [pc, #716]	; (8004dd4 <UART_SetConfig+0x32c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d004      	beq.n	8004b14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b10:	4313      	orrs	r3, r2
 8004b12:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	4baf      	ldr	r3, [pc, #700]	; (8004dd8 <UART_SetConfig+0x330>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	6812      	ldr	r2, [r2, #0]
 8004b22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b24:	430b      	orrs	r3, r1
 8004b26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	f023 010f 	bic.w	r1, r3, #15
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4aa6      	ldr	r2, [pc, #664]	; (8004ddc <UART_SetConfig+0x334>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d177      	bne.n	8004c38 <UART_SetConfig+0x190>
 8004b48:	4ba5      	ldr	r3, [pc, #660]	; (8004de0 <UART_SetConfig+0x338>)
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b50:	2b28      	cmp	r3, #40	; 0x28
 8004b52:	d86d      	bhi.n	8004c30 <UART_SetConfig+0x188>
 8004b54:	a201      	add	r2, pc, #4	; (adr r2, 8004b5c <UART_SetConfig+0xb4>)
 8004b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5a:	bf00      	nop
 8004b5c:	08004c01 	.word	0x08004c01
 8004b60:	08004c31 	.word	0x08004c31
 8004b64:	08004c31 	.word	0x08004c31
 8004b68:	08004c31 	.word	0x08004c31
 8004b6c:	08004c31 	.word	0x08004c31
 8004b70:	08004c31 	.word	0x08004c31
 8004b74:	08004c31 	.word	0x08004c31
 8004b78:	08004c31 	.word	0x08004c31
 8004b7c:	08004c09 	.word	0x08004c09
 8004b80:	08004c31 	.word	0x08004c31
 8004b84:	08004c31 	.word	0x08004c31
 8004b88:	08004c31 	.word	0x08004c31
 8004b8c:	08004c31 	.word	0x08004c31
 8004b90:	08004c31 	.word	0x08004c31
 8004b94:	08004c31 	.word	0x08004c31
 8004b98:	08004c31 	.word	0x08004c31
 8004b9c:	08004c11 	.word	0x08004c11
 8004ba0:	08004c31 	.word	0x08004c31
 8004ba4:	08004c31 	.word	0x08004c31
 8004ba8:	08004c31 	.word	0x08004c31
 8004bac:	08004c31 	.word	0x08004c31
 8004bb0:	08004c31 	.word	0x08004c31
 8004bb4:	08004c31 	.word	0x08004c31
 8004bb8:	08004c31 	.word	0x08004c31
 8004bbc:	08004c19 	.word	0x08004c19
 8004bc0:	08004c31 	.word	0x08004c31
 8004bc4:	08004c31 	.word	0x08004c31
 8004bc8:	08004c31 	.word	0x08004c31
 8004bcc:	08004c31 	.word	0x08004c31
 8004bd0:	08004c31 	.word	0x08004c31
 8004bd4:	08004c31 	.word	0x08004c31
 8004bd8:	08004c31 	.word	0x08004c31
 8004bdc:	08004c21 	.word	0x08004c21
 8004be0:	08004c31 	.word	0x08004c31
 8004be4:	08004c31 	.word	0x08004c31
 8004be8:	08004c31 	.word	0x08004c31
 8004bec:	08004c31 	.word	0x08004c31
 8004bf0:	08004c31 	.word	0x08004c31
 8004bf4:	08004c31 	.word	0x08004c31
 8004bf8:	08004c31 	.word	0x08004c31
 8004bfc:	08004c29 	.word	0x08004c29
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c06:	e222      	b.n	800504e <UART_SetConfig+0x5a6>
 8004c08:	2304      	movs	r3, #4
 8004c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c0e:	e21e      	b.n	800504e <UART_SetConfig+0x5a6>
 8004c10:	2308      	movs	r3, #8
 8004c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c16:	e21a      	b.n	800504e <UART_SetConfig+0x5a6>
 8004c18:	2310      	movs	r3, #16
 8004c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c1e:	e216      	b.n	800504e <UART_SetConfig+0x5a6>
 8004c20:	2320      	movs	r3, #32
 8004c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c26:	e212      	b.n	800504e <UART_SetConfig+0x5a6>
 8004c28:	2340      	movs	r3, #64	; 0x40
 8004c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c2e:	e20e      	b.n	800504e <UART_SetConfig+0x5a6>
 8004c30:	2380      	movs	r3, #128	; 0x80
 8004c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c36:	e20a      	b.n	800504e <UART_SetConfig+0x5a6>
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a69      	ldr	r2, [pc, #420]	; (8004de4 <UART_SetConfig+0x33c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d130      	bne.n	8004ca4 <UART_SetConfig+0x1fc>
 8004c42:	4b67      	ldr	r3, [pc, #412]	; (8004de0 <UART_SetConfig+0x338>)
 8004c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	2b05      	cmp	r3, #5
 8004c4c:	d826      	bhi.n	8004c9c <UART_SetConfig+0x1f4>
 8004c4e:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <UART_SetConfig+0x1ac>)
 8004c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c54:	08004c6d 	.word	0x08004c6d
 8004c58:	08004c75 	.word	0x08004c75
 8004c5c:	08004c7d 	.word	0x08004c7d
 8004c60:	08004c85 	.word	0x08004c85
 8004c64:	08004c8d 	.word	0x08004c8d
 8004c68:	08004c95 	.word	0x08004c95
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c72:	e1ec      	b.n	800504e <UART_SetConfig+0x5a6>
 8004c74:	2304      	movs	r3, #4
 8004c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c7a:	e1e8      	b.n	800504e <UART_SetConfig+0x5a6>
 8004c7c:	2308      	movs	r3, #8
 8004c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c82:	e1e4      	b.n	800504e <UART_SetConfig+0x5a6>
 8004c84:	2310      	movs	r3, #16
 8004c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c8a:	e1e0      	b.n	800504e <UART_SetConfig+0x5a6>
 8004c8c:	2320      	movs	r3, #32
 8004c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c92:	e1dc      	b.n	800504e <UART_SetConfig+0x5a6>
 8004c94:	2340      	movs	r3, #64	; 0x40
 8004c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c9a:	e1d8      	b.n	800504e <UART_SetConfig+0x5a6>
 8004c9c:	2380      	movs	r3, #128	; 0x80
 8004c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ca2:	e1d4      	b.n	800504e <UART_SetConfig+0x5a6>
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a4f      	ldr	r2, [pc, #316]	; (8004de8 <UART_SetConfig+0x340>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d130      	bne.n	8004d10 <UART_SetConfig+0x268>
 8004cae:	4b4c      	ldr	r3, [pc, #304]	; (8004de0 <UART_SetConfig+0x338>)
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	2b05      	cmp	r3, #5
 8004cb8:	d826      	bhi.n	8004d08 <UART_SetConfig+0x260>
 8004cba:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <UART_SetConfig+0x218>)
 8004cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc0:	08004cd9 	.word	0x08004cd9
 8004cc4:	08004ce1 	.word	0x08004ce1
 8004cc8:	08004ce9 	.word	0x08004ce9
 8004ccc:	08004cf1 	.word	0x08004cf1
 8004cd0:	08004cf9 	.word	0x08004cf9
 8004cd4:	08004d01 	.word	0x08004d01
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cde:	e1b6      	b.n	800504e <UART_SetConfig+0x5a6>
 8004ce0:	2304      	movs	r3, #4
 8004ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ce6:	e1b2      	b.n	800504e <UART_SetConfig+0x5a6>
 8004ce8:	2308      	movs	r3, #8
 8004cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cee:	e1ae      	b.n	800504e <UART_SetConfig+0x5a6>
 8004cf0:	2310      	movs	r3, #16
 8004cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cf6:	e1aa      	b.n	800504e <UART_SetConfig+0x5a6>
 8004cf8:	2320      	movs	r3, #32
 8004cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cfe:	e1a6      	b.n	800504e <UART_SetConfig+0x5a6>
 8004d00:	2340      	movs	r3, #64	; 0x40
 8004d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d06:	e1a2      	b.n	800504e <UART_SetConfig+0x5a6>
 8004d08:	2380      	movs	r3, #128	; 0x80
 8004d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d0e:	e19e      	b.n	800504e <UART_SetConfig+0x5a6>
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a35      	ldr	r2, [pc, #212]	; (8004dec <UART_SetConfig+0x344>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d130      	bne.n	8004d7c <UART_SetConfig+0x2d4>
 8004d1a:	4b31      	ldr	r3, [pc, #196]	; (8004de0 <UART_SetConfig+0x338>)
 8004d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	2b05      	cmp	r3, #5
 8004d24:	d826      	bhi.n	8004d74 <UART_SetConfig+0x2cc>
 8004d26:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <UART_SetConfig+0x284>)
 8004d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2c:	08004d45 	.word	0x08004d45
 8004d30:	08004d4d 	.word	0x08004d4d
 8004d34:	08004d55 	.word	0x08004d55
 8004d38:	08004d5d 	.word	0x08004d5d
 8004d3c:	08004d65 	.word	0x08004d65
 8004d40:	08004d6d 	.word	0x08004d6d
 8004d44:	2300      	movs	r3, #0
 8004d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d4a:	e180      	b.n	800504e <UART_SetConfig+0x5a6>
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d52:	e17c      	b.n	800504e <UART_SetConfig+0x5a6>
 8004d54:	2308      	movs	r3, #8
 8004d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d5a:	e178      	b.n	800504e <UART_SetConfig+0x5a6>
 8004d5c:	2310      	movs	r3, #16
 8004d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d62:	e174      	b.n	800504e <UART_SetConfig+0x5a6>
 8004d64:	2320      	movs	r3, #32
 8004d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d6a:	e170      	b.n	800504e <UART_SetConfig+0x5a6>
 8004d6c:	2340      	movs	r3, #64	; 0x40
 8004d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d72:	e16c      	b.n	800504e <UART_SetConfig+0x5a6>
 8004d74:	2380      	movs	r3, #128	; 0x80
 8004d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d7a:	e168      	b.n	800504e <UART_SetConfig+0x5a6>
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a1b      	ldr	r2, [pc, #108]	; (8004df0 <UART_SetConfig+0x348>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d142      	bne.n	8004e0c <UART_SetConfig+0x364>
 8004d86:	4b16      	ldr	r3, [pc, #88]	; (8004de0 <UART_SetConfig+0x338>)
 8004d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	2b05      	cmp	r3, #5
 8004d90:	d838      	bhi.n	8004e04 <UART_SetConfig+0x35c>
 8004d92:	a201      	add	r2, pc, #4	; (adr r2, 8004d98 <UART_SetConfig+0x2f0>)
 8004d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d98:	08004db1 	.word	0x08004db1
 8004d9c:	08004db9 	.word	0x08004db9
 8004da0:	08004dc1 	.word	0x08004dc1
 8004da4:	08004dc9 	.word	0x08004dc9
 8004da8:	08004df5 	.word	0x08004df5
 8004dac:	08004dfd 	.word	0x08004dfd
 8004db0:	2300      	movs	r3, #0
 8004db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004db6:	e14a      	b.n	800504e <UART_SetConfig+0x5a6>
 8004db8:	2304      	movs	r3, #4
 8004dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dbe:	e146      	b.n	800504e <UART_SetConfig+0x5a6>
 8004dc0:	2308      	movs	r3, #8
 8004dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dc6:	e142      	b.n	800504e <UART_SetConfig+0x5a6>
 8004dc8:	2310      	movs	r3, #16
 8004dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dce:	e13e      	b.n	800504e <UART_SetConfig+0x5a6>
 8004dd0:	cfff69f3 	.word	0xcfff69f3
 8004dd4:	58000c00 	.word	0x58000c00
 8004dd8:	11fff4ff 	.word	0x11fff4ff
 8004ddc:	40011000 	.word	0x40011000
 8004de0:	58024400 	.word	0x58024400
 8004de4:	40004400 	.word	0x40004400
 8004de8:	40004800 	.word	0x40004800
 8004dec:	40004c00 	.word	0x40004c00
 8004df0:	40005000 	.word	0x40005000
 8004df4:	2320      	movs	r3, #32
 8004df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dfa:	e128      	b.n	800504e <UART_SetConfig+0x5a6>
 8004dfc:	2340      	movs	r3, #64	; 0x40
 8004dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e02:	e124      	b.n	800504e <UART_SetConfig+0x5a6>
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e0a:	e120      	b.n	800504e <UART_SetConfig+0x5a6>
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4acb      	ldr	r2, [pc, #812]	; (8005140 <UART_SetConfig+0x698>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d176      	bne.n	8004f04 <UART_SetConfig+0x45c>
 8004e16:	4bcb      	ldr	r3, [pc, #812]	; (8005144 <UART_SetConfig+0x69c>)
 8004e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e1e:	2b28      	cmp	r3, #40	; 0x28
 8004e20:	d86c      	bhi.n	8004efc <UART_SetConfig+0x454>
 8004e22:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <UART_SetConfig+0x380>)
 8004e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e28:	08004ecd 	.word	0x08004ecd
 8004e2c:	08004efd 	.word	0x08004efd
 8004e30:	08004efd 	.word	0x08004efd
 8004e34:	08004efd 	.word	0x08004efd
 8004e38:	08004efd 	.word	0x08004efd
 8004e3c:	08004efd 	.word	0x08004efd
 8004e40:	08004efd 	.word	0x08004efd
 8004e44:	08004efd 	.word	0x08004efd
 8004e48:	08004ed5 	.word	0x08004ed5
 8004e4c:	08004efd 	.word	0x08004efd
 8004e50:	08004efd 	.word	0x08004efd
 8004e54:	08004efd 	.word	0x08004efd
 8004e58:	08004efd 	.word	0x08004efd
 8004e5c:	08004efd 	.word	0x08004efd
 8004e60:	08004efd 	.word	0x08004efd
 8004e64:	08004efd 	.word	0x08004efd
 8004e68:	08004edd 	.word	0x08004edd
 8004e6c:	08004efd 	.word	0x08004efd
 8004e70:	08004efd 	.word	0x08004efd
 8004e74:	08004efd 	.word	0x08004efd
 8004e78:	08004efd 	.word	0x08004efd
 8004e7c:	08004efd 	.word	0x08004efd
 8004e80:	08004efd 	.word	0x08004efd
 8004e84:	08004efd 	.word	0x08004efd
 8004e88:	08004ee5 	.word	0x08004ee5
 8004e8c:	08004efd 	.word	0x08004efd
 8004e90:	08004efd 	.word	0x08004efd
 8004e94:	08004efd 	.word	0x08004efd
 8004e98:	08004efd 	.word	0x08004efd
 8004e9c:	08004efd 	.word	0x08004efd
 8004ea0:	08004efd 	.word	0x08004efd
 8004ea4:	08004efd 	.word	0x08004efd
 8004ea8:	08004eed 	.word	0x08004eed
 8004eac:	08004efd 	.word	0x08004efd
 8004eb0:	08004efd 	.word	0x08004efd
 8004eb4:	08004efd 	.word	0x08004efd
 8004eb8:	08004efd 	.word	0x08004efd
 8004ebc:	08004efd 	.word	0x08004efd
 8004ec0:	08004efd 	.word	0x08004efd
 8004ec4:	08004efd 	.word	0x08004efd
 8004ec8:	08004ef5 	.word	0x08004ef5
 8004ecc:	2301      	movs	r3, #1
 8004ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ed2:	e0bc      	b.n	800504e <UART_SetConfig+0x5a6>
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eda:	e0b8      	b.n	800504e <UART_SetConfig+0x5a6>
 8004edc:	2308      	movs	r3, #8
 8004ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ee2:	e0b4      	b.n	800504e <UART_SetConfig+0x5a6>
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eea:	e0b0      	b.n	800504e <UART_SetConfig+0x5a6>
 8004eec:	2320      	movs	r3, #32
 8004eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ef2:	e0ac      	b.n	800504e <UART_SetConfig+0x5a6>
 8004ef4:	2340      	movs	r3, #64	; 0x40
 8004ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004efa:	e0a8      	b.n	800504e <UART_SetConfig+0x5a6>
 8004efc:	2380      	movs	r3, #128	; 0x80
 8004efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f02:	e0a4      	b.n	800504e <UART_SetConfig+0x5a6>
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a8f      	ldr	r2, [pc, #572]	; (8005148 <UART_SetConfig+0x6a0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d130      	bne.n	8004f70 <UART_SetConfig+0x4c8>
 8004f0e:	4b8d      	ldr	r3, [pc, #564]	; (8005144 <UART_SetConfig+0x69c>)
 8004f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	2b05      	cmp	r3, #5
 8004f18:	d826      	bhi.n	8004f68 <UART_SetConfig+0x4c0>
 8004f1a:	a201      	add	r2, pc, #4	; (adr r2, 8004f20 <UART_SetConfig+0x478>)
 8004f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f20:	08004f39 	.word	0x08004f39
 8004f24:	08004f41 	.word	0x08004f41
 8004f28:	08004f49 	.word	0x08004f49
 8004f2c:	08004f51 	.word	0x08004f51
 8004f30:	08004f59 	.word	0x08004f59
 8004f34:	08004f61 	.word	0x08004f61
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f3e:	e086      	b.n	800504e <UART_SetConfig+0x5a6>
 8004f40:	2304      	movs	r3, #4
 8004f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f46:	e082      	b.n	800504e <UART_SetConfig+0x5a6>
 8004f48:	2308      	movs	r3, #8
 8004f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f4e:	e07e      	b.n	800504e <UART_SetConfig+0x5a6>
 8004f50:	2310      	movs	r3, #16
 8004f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f56:	e07a      	b.n	800504e <UART_SetConfig+0x5a6>
 8004f58:	2320      	movs	r3, #32
 8004f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5e:	e076      	b.n	800504e <UART_SetConfig+0x5a6>
 8004f60:	2340      	movs	r3, #64	; 0x40
 8004f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f66:	e072      	b.n	800504e <UART_SetConfig+0x5a6>
 8004f68:	2380      	movs	r3, #128	; 0x80
 8004f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f6e:	e06e      	b.n	800504e <UART_SetConfig+0x5a6>
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a75      	ldr	r2, [pc, #468]	; (800514c <UART_SetConfig+0x6a4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d130      	bne.n	8004fdc <UART_SetConfig+0x534>
 8004f7a:	4b72      	ldr	r3, [pc, #456]	; (8005144 <UART_SetConfig+0x69c>)
 8004f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	2b05      	cmp	r3, #5
 8004f84:	d826      	bhi.n	8004fd4 <UART_SetConfig+0x52c>
 8004f86:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <UART_SetConfig+0x4e4>)
 8004f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8c:	08004fa5 	.word	0x08004fa5
 8004f90:	08004fad 	.word	0x08004fad
 8004f94:	08004fb5 	.word	0x08004fb5
 8004f98:	08004fbd 	.word	0x08004fbd
 8004f9c:	08004fc5 	.word	0x08004fc5
 8004fa0:	08004fcd 	.word	0x08004fcd
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004faa:	e050      	b.n	800504e <UART_SetConfig+0x5a6>
 8004fac:	2304      	movs	r3, #4
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb2:	e04c      	b.n	800504e <UART_SetConfig+0x5a6>
 8004fb4:	2308      	movs	r3, #8
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fba:	e048      	b.n	800504e <UART_SetConfig+0x5a6>
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc2:	e044      	b.n	800504e <UART_SetConfig+0x5a6>
 8004fc4:	2320      	movs	r3, #32
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fca:	e040      	b.n	800504e <UART_SetConfig+0x5a6>
 8004fcc:	2340      	movs	r3, #64	; 0x40
 8004fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fd2:	e03c      	b.n	800504e <UART_SetConfig+0x5a6>
 8004fd4:	2380      	movs	r3, #128	; 0x80
 8004fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fda:	e038      	b.n	800504e <UART_SetConfig+0x5a6>
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a5b      	ldr	r2, [pc, #364]	; (8005150 <UART_SetConfig+0x6a8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d130      	bne.n	8005048 <UART_SetConfig+0x5a0>
 8004fe6:	4b57      	ldr	r3, [pc, #348]	; (8005144 <UART_SetConfig+0x69c>)
 8004fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	2b05      	cmp	r3, #5
 8004ff0:	d826      	bhi.n	8005040 <UART_SetConfig+0x598>
 8004ff2:	a201      	add	r2, pc, #4	; (adr r2, 8004ff8 <UART_SetConfig+0x550>)
 8004ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff8:	08005011 	.word	0x08005011
 8004ffc:	08005019 	.word	0x08005019
 8005000:	08005021 	.word	0x08005021
 8005004:	08005029 	.word	0x08005029
 8005008:	08005031 	.word	0x08005031
 800500c:	08005039 	.word	0x08005039
 8005010:	2302      	movs	r3, #2
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005016:	e01a      	b.n	800504e <UART_SetConfig+0x5a6>
 8005018:	2304      	movs	r3, #4
 800501a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501e:	e016      	b.n	800504e <UART_SetConfig+0x5a6>
 8005020:	2308      	movs	r3, #8
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005026:	e012      	b.n	800504e <UART_SetConfig+0x5a6>
 8005028:	2310      	movs	r3, #16
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502e:	e00e      	b.n	800504e <UART_SetConfig+0x5a6>
 8005030:	2320      	movs	r3, #32
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005036:	e00a      	b.n	800504e <UART_SetConfig+0x5a6>
 8005038:	2340      	movs	r3, #64	; 0x40
 800503a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800503e:	e006      	b.n	800504e <UART_SetConfig+0x5a6>
 8005040:	2380      	movs	r3, #128	; 0x80
 8005042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005046:	e002      	b.n	800504e <UART_SetConfig+0x5a6>
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a3f      	ldr	r2, [pc, #252]	; (8005150 <UART_SetConfig+0x6a8>)
 8005054:	4293      	cmp	r3, r2
 8005056:	f040 80f8 	bne.w	800524a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800505a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800505e:	2b20      	cmp	r3, #32
 8005060:	dc46      	bgt.n	80050f0 <UART_SetConfig+0x648>
 8005062:	2b02      	cmp	r3, #2
 8005064:	f2c0 8082 	blt.w	800516c <UART_SetConfig+0x6c4>
 8005068:	3b02      	subs	r3, #2
 800506a:	2b1e      	cmp	r3, #30
 800506c:	d87e      	bhi.n	800516c <UART_SetConfig+0x6c4>
 800506e:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <UART_SetConfig+0x5cc>)
 8005070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005074:	080050f7 	.word	0x080050f7
 8005078:	0800516d 	.word	0x0800516d
 800507c:	080050ff 	.word	0x080050ff
 8005080:	0800516d 	.word	0x0800516d
 8005084:	0800516d 	.word	0x0800516d
 8005088:	0800516d 	.word	0x0800516d
 800508c:	0800510f 	.word	0x0800510f
 8005090:	0800516d 	.word	0x0800516d
 8005094:	0800516d 	.word	0x0800516d
 8005098:	0800516d 	.word	0x0800516d
 800509c:	0800516d 	.word	0x0800516d
 80050a0:	0800516d 	.word	0x0800516d
 80050a4:	0800516d 	.word	0x0800516d
 80050a8:	0800516d 	.word	0x0800516d
 80050ac:	0800511f 	.word	0x0800511f
 80050b0:	0800516d 	.word	0x0800516d
 80050b4:	0800516d 	.word	0x0800516d
 80050b8:	0800516d 	.word	0x0800516d
 80050bc:	0800516d 	.word	0x0800516d
 80050c0:	0800516d 	.word	0x0800516d
 80050c4:	0800516d 	.word	0x0800516d
 80050c8:	0800516d 	.word	0x0800516d
 80050cc:	0800516d 	.word	0x0800516d
 80050d0:	0800516d 	.word	0x0800516d
 80050d4:	0800516d 	.word	0x0800516d
 80050d8:	0800516d 	.word	0x0800516d
 80050dc:	0800516d 	.word	0x0800516d
 80050e0:	0800516d 	.word	0x0800516d
 80050e4:	0800516d 	.word	0x0800516d
 80050e8:	0800516d 	.word	0x0800516d
 80050ec:	0800515f 	.word	0x0800515f
 80050f0:	2b40      	cmp	r3, #64	; 0x40
 80050f2:	d037      	beq.n	8005164 <UART_SetConfig+0x6bc>
 80050f4:	e03a      	b.n	800516c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80050f6:	f7ff f865 	bl	80041c4 <HAL_RCCEx_GetD3PCLK1Freq>
 80050fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80050fc:	e03c      	b.n	8005178 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff f874 	bl	80041f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800510c:	e034      	b.n	8005178 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800510e:	f107 0318 	add.w	r3, r7, #24
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff f9c0 	bl	8004498 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800511c:	e02c      	b.n	8005178 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800511e:	4b09      	ldr	r3, [pc, #36]	; (8005144 <UART_SetConfig+0x69c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	2b00      	cmp	r3, #0
 8005128:	d016      	beq.n	8005158 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800512a:	4b06      	ldr	r3, [pc, #24]	; (8005144 <UART_SetConfig+0x69c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	08db      	lsrs	r3, r3, #3
 8005130:	f003 0303 	and.w	r3, r3, #3
 8005134:	4a07      	ldr	r2, [pc, #28]	; (8005154 <UART_SetConfig+0x6ac>)
 8005136:	fa22 f303 	lsr.w	r3, r2, r3
 800513a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800513c:	e01c      	b.n	8005178 <UART_SetConfig+0x6d0>
 800513e:	bf00      	nop
 8005140:	40011400 	.word	0x40011400
 8005144:	58024400 	.word	0x58024400
 8005148:	40007800 	.word	0x40007800
 800514c:	40007c00 	.word	0x40007c00
 8005150:	58000c00 	.word	0x58000c00
 8005154:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005158:	4b9d      	ldr	r3, [pc, #628]	; (80053d0 <UART_SetConfig+0x928>)
 800515a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800515c:	e00c      	b.n	8005178 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800515e:	4b9d      	ldr	r3, [pc, #628]	; (80053d4 <UART_SetConfig+0x92c>)
 8005160:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005162:	e009      	b.n	8005178 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005164:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005168:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800516a:	e005      	b.n	8005178 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005176:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 81de 	beq.w	800553c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	4a94      	ldr	r2, [pc, #592]	; (80053d8 <UART_SetConfig+0x930>)
 8005186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800518a:	461a      	mov	r2, r3
 800518c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800518e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005192:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	4613      	mov	r3, r2
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	4413      	add	r3, r2
 800519e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d305      	bcc.n	80051b0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d903      	bls.n	80051b8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80051b6:	e1c1      	b.n	800553c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ba:	2200      	movs	r2, #0
 80051bc:	60bb      	str	r3, [r7, #8]
 80051be:	60fa      	str	r2, [r7, #12]
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	4a84      	ldr	r2, [pc, #528]	; (80053d8 <UART_SetConfig+0x930>)
 80051c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	2200      	movs	r2, #0
 80051ce:	603b      	str	r3, [r7, #0]
 80051d0:	607a      	str	r2, [r7, #4]
 80051d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051da:	f7fb f87d 	bl	80002d8 <__aeabi_uldivmod>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4610      	mov	r0, r2
 80051e4:	4619      	mov	r1, r3
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	020b      	lsls	r3, r1, #8
 80051f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051f4:	0202      	lsls	r2, r0, #8
 80051f6:	6979      	ldr	r1, [r7, #20]
 80051f8:	6849      	ldr	r1, [r1, #4]
 80051fa:	0849      	lsrs	r1, r1, #1
 80051fc:	2000      	movs	r0, #0
 80051fe:	460c      	mov	r4, r1
 8005200:	4605      	mov	r5, r0
 8005202:	eb12 0804 	adds.w	r8, r2, r4
 8005206:	eb43 0905 	adc.w	r9, r3, r5
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	469a      	mov	sl, r3
 8005212:	4693      	mov	fp, r2
 8005214:	4652      	mov	r2, sl
 8005216:	465b      	mov	r3, fp
 8005218:	4640      	mov	r0, r8
 800521a:	4649      	mov	r1, r9
 800521c:	f7fb f85c 	bl	80002d8 <__aeabi_uldivmod>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4613      	mov	r3, r2
 8005226:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800522e:	d308      	bcc.n	8005242 <UART_SetConfig+0x79a>
 8005230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005236:	d204      	bcs.n	8005242 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800523e:	60da      	str	r2, [r3, #12]
 8005240:	e17c      	b.n	800553c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005248:	e178      	b.n	800553c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005252:	f040 80c5 	bne.w	80053e0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005256:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800525a:	2b20      	cmp	r3, #32
 800525c:	dc48      	bgt.n	80052f0 <UART_SetConfig+0x848>
 800525e:	2b00      	cmp	r3, #0
 8005260:	db7b      	blt.n	800535a <UART_SetConfig+0x8b2>
 8005262:	2b20      	cmp	r3, #32
 8005264:	d879      	bhi.n	800535a <UART_SetConfig+0x8b2>
 8005266:	a201      	add	r2, pc, #4	; (adr r2, 800526c <UART_SetConfig+0x7c4>)
 8005268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526c:	080052f7 	.word	0x080052f7
 8005270:	080052ff 	.word	0x080052ff
 8005274:	0800535b 	.word	0x0800535b
 8005278:	0800535b 	.word	0x0800535b
 800527c:	08005307 	.word	0x08005307
 8005280:	0800535b 	.word	0x0800535b
 8005284:	0800535b 	.word	0x0800535b
 8005288:	0800535b 	.word	0x0800535b
 800528c:	08005317 	.word	0x08005317
 8005290:	0800535b 	.word	0x0800535b
 8005294:	0800535b 	.word	0x0800535b
 8005298:	0800535b 	.word	0x0800535b
 800529c:	0800535b 	.word	0x0800535b
 80052a0:	0800535b 	.word	0x0800535b
 80052a4:	0800535b 	.word	0x0800535b
 80052a8:	0800535b 	.word	0x0800535b
 80052ac:	08005327 	.word	0x08005327
 80052b0:	0800535b 	.word	0x0800535b
 80052b4:	0800535b 	.word	0x0800535b
 80052b8:	0800535b 	.word	0x0800535b
 80052bc:	0800535b 	.word	0x0800535b
 80052c0:	0800535b 	.word	0x0800535b
 80052c4:	0800535b 	.word	0x0800535b
 80052c8:	0800535b 	.word	0x0800535b
 80052cc:	0800535b 	.word	0x0800535b
 80052d0:	0800535b 	.word	0x0800535b
 80052d4:	0800535b 	.word	0x0800535b
 80052d8:	0800535b 	.word	0x0800535b
 80052dc:	0800535b 	.word	0x0800535b
 80052e0:	0800535b 	.word	0x0800535b
 80052e4:	0800535b 	.word	0x0800535b
 80052e8:	0800535b 	.word	0x0800535b
 80052ec:	0800534d 	.word	0x0800534d
 80052f0:	2b40      	cmp	r3, #64	; 0x40
 80052f2:	d02e      	beq.n	8005352 <UART_SetConfig+0x8aa>
 80052f4:	e031      	b.n	800535a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f6:	f7fd fff3 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 80052fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80052fc:	e033      	b.n	8005366 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052fe:	f7fe f805 	bl	800330c <HAL_RCC_GetPCLK2Freq>
 8005302:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005304:	e02f      	b.n	8005366 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe ff70 	bl	80041f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005314:	e027      	b.n	8005366 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005316:	f107 0318 	add.w	r3, r7, #24
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff f8bc 	bl	8004498 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005324:	e01f      	b.n	8005366 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005326:	4b2d      	ldr	r3, [pc, #180]	; (80053dc <UART_SetConfig+0x934>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b00      	cmp	r3, #0
 8005330:	d009      	beq.n	8005346 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005332:	4b2a      	ldr	r3, [pc, #168]	; (80053dc <UART_SetConfig+0x934>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	08db      	lsrs	r3, r3, #3
 8005338:	f003 0303 	and.w	r3, r3, #3
 800533c:	4a24      	ldr	r2, [pc, #144]	; (80053d0 <UART_SetConfig+0x928>)
 800533e:	fa22 f303 	lsr.w	r3, r2, r3
 8005342:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005344:	e00f      	b.n	8005366 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005346:	4b22      	ldr	r3, [pc, #136]	; (80053d0 <UART_SetConfig+0x928>)
 8005348:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800534a:	e00c      	b.n	8005366 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800534c:	4b21      	ldr	r3, [pc, #132]	; (80053d4 <UART_SetConfig+0x92c>)
 800534e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005350:	e009      	b.n	8005366 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005358:	e005      	b.n	8005366 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005364:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80e7 	beq.w	800553c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	4a19      	ldr	r2, [pc, #100]	; (80053d8 <UART_SetConfig+0x930>)
 8005374:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005378:	461a      	mov	r2, r3
 800537a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005380:	005a      	lsls	r2, r3, #1
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	085b      	lsrs	r3, r3, #1
 8005388:	441a      	add	r2, r3
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005392:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	2b0f      	cmp	r3, #15
 8005398:	d916      	bls.n	80053c8 <UART_SetConfig+0x920>
 800539a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a0:	d212      	bcs.n	80053c8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	f023 030f 	bic.w	r3, r3, #15
 80053aa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	085b      	lsrs	r3, r3, #1
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80053ba:	4313      	orrs	r3, r2
 80053bc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80053c4:	60da      	str	r2, [r3, #12]
 80053c6:	e0b9      	b.n	800553c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80053ce:	e0b5      	b.n	800553c <UART_SetConfig+0xa94>
 80053d0:	03d09000 	.word	0x03d09000
 80053d4:	003d0900 	.word	0x003d0900
 80053d8:	0800617c 	.word	0x0800617c
 80053dc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80053e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	dc49      	bgt.n	800547c <UART_SetConfig+0x9d4>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	db7c      	blt.n	80054e6 <UART_SetConfig+0xa3e>
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d87a      	bhi.n	80054e6 <UART_SetConfig+0xa3e>
 80053f0:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <UART_SetConfig+0x950>)
 80053f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f6:	bf00      	nop
 80053f8:	08005483 	.word	0x08005483
 80053fc:	0800548b 	.word	0x0800548b
 8005400:	080054e7 	.word	0x080054e7
 8005404:	080054e7 	.word	0x080054e7
 8005408:	08005493 	.word	0x08005493
 800540c:	080054e7 	.word	0x080054e7
 8005410:	080054e7 	.word	0x080054e7
 8005414:	080054e7 	.word	0x080054e7
 8005418:	080054a3 	.word	0x080054a3
 800541c:	080054e7 	.word	0x080054e7
 8005420:	080054e7 	.word	0x080054e7
 8005424:	080054e7 	.word	0x080054e7
 8005428:	080054e7 	.word	0x080054e7
 800542c:	080054e7 	.word	0x080054e7
 8005430:	080054e7 	.word	0x080054e7
 8005434:	080054e7 	.word	0x080054e7
 8005438:	080054b3 	.word	0x080054b3
 800543c:	080054e7 	.word	0x080054e7
 8005440:	080054e7 	.word	0x080054e7
 8005444:	080054e7 	.word	0x080054e7
 8005448:	080054e7 	.word	0x080054e7
 800544c:	080054e7 	.word	0x080054e7
 8005450:	080054e7 	.word	0x080054e7
 8005454:	080054e7 	.word	0x080054e7
 8005458:	080054e7 	.word	0x080054e7
 800545c:	080054e7 	.word	0x080054e7
 8005460:	080054e7 	.word	0x080054e7
 8005464:	080054e7 	.word	0x080054e7
 8005468:	080054e7 	.word	0x080054e7
 800546c:	080054e7 	.word	0x080054e7
 8005470:	080054e7 	.word	0x080054e7
 8005474:	080054e7 	.word	0x080054e7
 8005478:	080054d9 	.word	0x080054d9
 800547c:	2b40      	cmp	r3, #64	; 0x40
 800547e:	d02e      	beq.n	80054de <UART_SetConfig+0xa36>
 8005480:	e031      	b.n	80054e6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005482:	f7fd ff2d 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 8005486:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005488:	e033      	b.n	80054f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800548a:	f7fd ff3f 	bl	800330c <HAL_RCC_GetPCLK2Freq>
 800548e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005490:	e02f      	b.n	80054f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005496:	4618      	mov	r0, r3
 8005498:	f7fe feaa 	bl	80041f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054a0:	e027      	b.n	80054f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054a2:	f107 0318 	add.w	r3, r7, #24
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fe fff6 	bl	8004498 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054b0:	e01f      	b.n	80054f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054b2:	4b2d      	ldr	r3, [pc, #180]	; (8005568 <UART_SetConfig+0xac0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d009      	beq.n	80054d2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054be:	4b2a      	ldr	r3, [pc, #168]	; (8005568 <UART_SetConfig+0xac0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	08db      	lsrs	r3, r3, #3
 80054c4:	f003 0303 	and.w	r3, r3, #3
 80054c8:	4a28      	ldr	r2, [pc, #160]	; (800556c <UART_SetConfig+0xac4>)
 80054ca:	fa22 f303 	lsr.w	r3, r2, r3
 80054ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054d0:	e00f      	b.n	80054f2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80054d2:	4b26      	ldr	r3, [pc, #152]	; (800556c <UART_SetConfig+0xac4>)
 80054d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054d6:	e00c      	b.n	80054f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80054d8:	4b25      	ldr	r3, [pc, #148]	; (8005570 <UART_SetConfig+0xac8>)
 80054da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054dc:	e009      	b.n	80054f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054e4:	e005      	b.n	80054f2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80054f0:	bf00      	nop
    }

    if (pclk != 0U)
 80054f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d021      	beq.n	800553c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	4a1d      	ldr	r2, [pc, #116]	; (8005574 <UART_SetConfig+0xacc>)
 80054fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005502:	461a      	mov	r2, r3
 8005504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005506:	fbb3 f2f2 	udiv	r2, r3, r2
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	085b      	lsrs	r3, r3, #1
 8005510:	441a      	add	r2, r3
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	fbb2 f3f3 	udiv	r3, r2, r3
 800551a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551e:	2b0f      	cmp	r3, #15
 8005520:	d909      	bls.n	8005536 <UART_SetConfig+0xa8e>
 8005522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005528:	d205      	bcs.n	8005536 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800552a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552c:	b29a      	uxth	r2, r3
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60da      	str	r2, [r3, #12]
 8005534:	e002      	b.n	800553c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	2201      	movs	r2, #1
 8005540:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	2201      	movs	r2, #1
 8005548:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2200      	movs	r2, #0
 8005550:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2200      	movs	r2, #0
 8005556:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005558:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800555c:	4618      	mov	r0, r3
 800555e:	3748      	adds	r7, #72	; 0x48
 8005560:	46bd      	mov	sp, r7
 8005562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005566:	bf00      	nop
 8005568:	58024400 	.word	0x58024400
 800556c:	03d09000 	.word	0x03d09000
 8005570:	003d0900 	.word	0x003d0900
 8005574:	0800617c 	.word	0x0800617c

08005578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	d01a      	beq.n	800568e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005676:	d10a      	bne.n	800568e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	605a      	str	r2, [r3, #4]
  }
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056cc:	f7fb fd3c 	bl	8001148 <HAL_GetTick>
 80056d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d10e      	bne.n	80056fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f82f 	bl	8005752 <UART_WaitOnFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e025      	b.n	800574a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b04      	cmp	r3, #4
 800570a:	d10e      	bne.n	800572a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800570c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f819 	bl	8005752 <UART_WaitOnFlagUntilTimeout>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e00f      	b.n	800574a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2220      	movs	r2, #32
 800572e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b09c      	sub	sp, #112	; 0x70
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	603b      	str	r3, [r7, #0]
 800575e:	4613      	mov	r3, r2
 8005760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005762:	e0a9      	b.n	80058b8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005764:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576a:	f000 80a5 	beq.w	80058b8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576e:	f7fb fceb 	bl	8001148 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800577a:	429a      	cmp	r2, r3
 800577c:	d302      	bcc.n	8005784 <UART_WaitOnFlagUntilTimeout+0x32>
 800577e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005780:	2b00      	cmp	r3, #0
 8005782:	d140      	bne.n	8005806 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005794:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005798:	667b      	str	r3, [r7, #100]	; 0x64
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1e6      	bne.n	8005784 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3308      	adds	r3, #8
 80057bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c8:	f023 0301 	bic.w	r3, r3, #1
 80057cc:	663b      	str	r3, [r7, #96]	; 0x60
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3308      	adds	r3, #8
 80057d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80057d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057de:	e841 2300 	strex	r3, r2, [r1]
 80057e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1e5      	bne.n	80057b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e069      	b.n	80058da <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b00      	cmp	r3, #0
 8005812:	d051      	beq.n	80058b8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800581e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005822:	d149      	bne.n	80058b8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800582c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005836:	e853 3f00 	ldrex	r3, [r3]
 800583a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005842:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	461a      	mov	r2, r3
 800584a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800584c:	637b      	str	r3, [r7, #52]	; 0x34
 800584e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005854:	e841 2300 	strex	r3, r2, [r1]
 8005858:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800585a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e6      	bne.n	800582e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3308      	adds	r3, #8
 8005866:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	e853 3f00 	ldrex	r3, [r3]
 800586e:	613b      	str	r3, [r7, #16]
   return(result);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f023 0301 	bic.w	r3, r3, #1
 8005876:	66bb      	str	r3, [r7, #104]	; 0x68
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3308      	adds	r3, #8
 800587e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005880:	623a      	str	r2, [r7, #32]
 8005882:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	69f9      	ldr	r1, [r7, #28]
 8005886:	6a3a      	ldr	r2, [r7, #32]
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	61bb      	str	r3, [r7, #24]
   return(result);
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e5      	bne.n	8005860 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2220      	movs	r2, #32
 80058a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2220      	movs	r2, #32
 80058a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e010      	b.n	80058da <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69da      	ldr	r2, [r3, #28]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	4013      	ands	r3, r2
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	bf0c      	ite	eq
 80058c8:	2301      	moveq	r3, #1
 80058ca:	2300      	movne	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	461a      	mov	r2, r3
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	f43f af46 	beq.w	8005764 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3770      	adds	r7, #112	; 0x70
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b085      	sub	sp, #20
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_UARTEx_DisableFifoMode+0x16>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e027      	b.n	8005948 <HAL_UARTEx_DisableFifoMode+0x66>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2224      	movs	r2, #36	; 0x24
 8005904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0201 	bic.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005926:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005968:	2302      	movs	r3, #2
 800596a:	e02d      	b.n	80059c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2224      	movs	r2, #36	; 0x24
 8005978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0201 	bic.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f84f 	bl	8005a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d101      	bne.n	80059e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059e4:	2302      	movs	r3, #2
 80059e6:	e02d      	b.n	8005a44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2224      	movs	r2, #36	; 0x24
 80059f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0201 	bic.w	r2, r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f811 	bl	8005a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d108      	bne.n	8005a6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a6c:	e031      	b.n	8005ad2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a6e:	2310      	movs	r3, #16
 8005a70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a72:	2310      	movs	r3, #16
 8005a74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	0e5b      	lsrs	r3, r3, #25
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	0f5b      	lsrs	r3, r3, #29
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	f003 0307 	and.w	r3, r3, #7
 8005a94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a96:	7bbb      	ldrb	r3, [r7, #14]
 8005a98:	7b3a      	ldrb	r2, [r7, #12]
 8005a9a:	4911      	ldr	r1, [pc, #68]	; (8005ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8005a9c:	5c8a      	ldrb	r2, [r1, r2]
 8005a9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005aa2:	7b3a      	ldrb	r2, [r7, #12]
 8005aa4:	490f      	ldr	r1, [pc, #60]	; (8005ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8005aa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005aa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
 8005ab6:	7b7a      	ldrb	r2, [r7, #13]
 8005ab8:	4909      	ldr	r1, [pc, #36]	; (8005ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8005aba:	5c8a      	ldrb	r2, [r1, r2]
 8005abc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ac0:	7b7a      	ldrb	r2, [r7, #13]
 8005ac2:	4908      	ldr	r1, [pc, #32]	; (8005ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8005ac4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ac6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005ad2:	bf00      	nop
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	08006194 	.word	0x08006194
 8005ae4:	0800619c 	.word	0x0800619c

08005ae8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ae8:	b084      	sub	sp, #16
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b084      	sub	sp, #16
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	f107 001c 	add.w	r0, r7, #28
 8005af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d120      	bne.n	8005b42 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	4b2a      	ldr	r3, [pc, #168]	; (8005bbc <USB_CoreInit+0xd4>)
 8005b12:	4013      	ands	r3, r2
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d105      	bne.n	8005b36 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 faac 	bl	8006094 <USB_CoreReset>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	73fb      	strb	r3, [r7, #15]
 8005b40:	e01a      	b.n	8005b78 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 faa0 	bl	8006094 <USB_CoreReset>
 8005b54:	4603      	mov	r3, r0
 8005b56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d106      	bne.n	8005b6c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	639a      	str	r2, [r3, #56]	; 0x38
 8005b6a:	e005      	b.n	8005b78 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d116      	bne.n	8005bac <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b8c:	4b0c      	ldr	r3, [pc, #48]	; (8005bc0 <USB_CoreInit+0xd8>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f043 0206 	orr.w	r2, r3, #6
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f043 0220 	orr.w	r2, r3, #32
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bb8:	b004      	add	sp, #16
 8005bba:	4770      	bx	lr
 8005bbc:	ffbdffbf 	.word	0xffbdffbf
 8005bc0:	03ee0000 	.word	0x03ee0000

08005bc4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f023 0201 	bic.w	r2, r3, #1
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b084      	sub	sp, #16
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c02:	78fb      	ldrb	r3, [r7, #3]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d115      	bne.n	8005c34 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c14:	2001      	movs	r0, #1
 8005c16:	f7fb faa3 	bl	8001160 <HAL_Delay>
      ms++;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fa29 	bl	8006078 <USB_GetMode>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d01e      	beq.n	8005c6a <USB_SetCurrentMode+0x84>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b31      	cmp	r3, #49	; 0x31
 8005c30:	d9f0      	bls.n	8005c14 <USB_SetCurrentMode+0x2e>
 8005c32:	e01a      	b.n	8005c6a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c34:	78fb      	ldrb	r3, [r7, #3]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d115      	bne.n	8005c66 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c46:	2001      	movs	r0, #1
 8005c48:	f7fb fa8a 	bl	8001160 <HAL_Delay>
      ms++;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fa10 	bl	8006078 <USB_GetMode>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <USB_SetCurrentMode+0x84>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b31      	cmp	r3, #49	; 0x31
 8005c62:	d9f0      	bls.n	8005c46 <USB_SetCurrentMode+0x60>
 8005c64:	e001      	b.n	8005c6a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e005      	b.n	8005c76 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b32      	cmp	r3, #50	; 0x32
 8005c6e:	d101      	bne.n	8005c74 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c80:	b084      	sub	sp, #16
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b086      	sub	sp, #24
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	613b      	str	r3, [r7, #16]
 8005c9e:	e009      	b.n	8005cb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	3340      	adds	r3, #64	; 0x40
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	2200      	movs	r2, #0
 8005cac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	613b      	str	r3, [r7, #16]
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	2b0e      	cmp	r3, #14
 8005cb8:	d9f2      	bls.n	8005ca0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d11c      	bne.n	8005cfa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cce:	f043 0302 	orr.w	r3, r3, #2
 8005cd2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	e005      	b.n	8005d06 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2300      	movs	r3, #0
 8005d10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d18:	4619      	mov	r1, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d20:	461a      	mov	r2, r3
 8005d22:	680b      	ldr	r3, [r1, #0]
 8005d24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d10c      	bne.n	8005d46 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d104      	bne.n	8005d3c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d32:	2100      	movs	r1, #0
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f965 	bl	8006004 <USB_SetDevSpeed>
 8005d3a:	e008      	b.n	8005d4e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f960 	bl	8006004 <USB_SetDevSpeed>
 8005d44:	e003      	b.n	8005d4e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d46:	2103      	movs	r1, #3
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f95b 	bl	8006004 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d4e:	2110      	movs	r1, #16
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f8f3 	bl	8005f3c <USB_FlushTxFifo>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f91f 	bl	8005fa4 <USB_FlushRxFifo>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d001      	beq.n	8005d70 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d76:	461a      	mov	r2, r3
 8005d78:	2300      	movs	r3, #0
 8005d7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d82:	461a      	mov	r2, r3
 8005d84:	2300      	movs	r3, #0
 8005d86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8e:	461a      	mov	r2, r3
 8005d90:	2300      	movs	r3, #0
 8005d92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d94:	2300      	movs	r3, #0
 8005d96:	613b      	str	r3, [r7, #16]
 8005d98:	e043      	b.n	8005e22 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005db0:	d118      	bne.n	8005de4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10a      	bne.n	8005dce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	e013      	b.n	8005df6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	e008      	b.n	8005df6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df0:	461a      	mov	r2, r3
 8005df2:	2300      	movs	r3, #0
 8005df4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e02:	461a      	mov	r2, r3
 8005e04:	2300      	movs	r3, #0
 8005e06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e14:	461a      	mov	r2, r3
 8005e16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	613b      	str	r3, [r7, #16]
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d3b7      	bcc.n	8005d9a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	613b      	str	r3, [r7, #16]
 8005e2e:	e043      	b.n	8005eb8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e46:	d118      	bne.n	8005e7a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10a      	bne.n	8005e64 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	e013      	b.n	8005e8c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e70:	461a      	mov	r2, r3
 8005e72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	e008      	b.n	8005e8c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e86:	461a      	mov	r2, r3
 8005e88:	2300      	movs	r3, #0
 8005e8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e98:	461a      	mov	r2, r3
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005eb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	613b      	str	r3, [r7, #16]
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d3b7      	bcc.n	8005e30 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ece:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ed2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ee0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d105      	bne.n	8005ef4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	f043 0210 	orr.w	r2, r3, #16
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	699a      	ldr	r2, [r3, #24]
 8005ef8:	4b0e      	ldr	r3, [pc, #56]	; (8005f34 <USB_DevInit+0x2b4>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d005      	beq.n	8005f12 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f043 0208 	orr.w	r2, r3, #8
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d105      	bne.n	8005f24 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	699a      	ldr	r2, [r3, #24]
 8005f1c:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <USB_DevInit+0x2b8>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f30:	b004      	add	sp, #16
 8005f32:	4770      	bx	lr
 8005f34:	803c3800 	.word	0x803c3800
 8005f38:	40000004 	.word	0x40000004

08005f3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4a13      	ldr	r2, [pc, #76]	; (8005fa0 <USB_FlushTxFifo+0x64>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d901      	bls.n	8005f5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e01b      	b.n	8005f94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	daf2      	bge.n	8005f4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	019b      	lsls	r3, r3, #6
 8005f6c:	f043 0220 	orr.w	r2, r3, #32
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	3301      	adds	r3, #1
 8005f78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4a08      	ldr	r2, [pc, #32]	; (8005fa0 <USB_FlushTxFifo+0x64>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d901      	bls.n	8005f86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e006      	b.n	8005f94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f003 0320 	and.w	r3, r3, #32
 8005f8e:	2b20      	cmp	r3, #32
 8005f90:	d0f0      	beq.n	8005f74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	00030d40 	.word	0x00030d40

08005fa4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	4a11      	ldr	r2, [pc, #68]	; (8006000 <USB_FlushRxFifo+0x5c>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d901      	bls.n	8005fc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e018      	b.n	8005ff4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	daf2      	bge.n	8005fb0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2210      	movs	r2, #16
 8005fd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	4a08      	ldr	r2, [pc, #32]	; (8006000 <USB_FlushRxFifo+0x5c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d901      	bls.n	8005fe6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e006      	b.n	8005ff4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f003 0310 	and.w	r3, r3, #16
 8005fee:	2b10      	cmp	r3, #16
 8005ff0:	d0f0      	beq.n	8005fd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	00030d40 	.word	0x00030d40

08006004 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	68f9      	ldr	r1, [r7, #12]
 8006020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006024:	4313      	orrs	r3, r2
 8006026:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006036:	b480      	push	{r7}
 8006038:	b085      	sub	sp, #20
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006050:	f023 0303 	bic.w	r3, r3, #3
 8006054:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006064:	f043 0302 	orr.w	r3, r3, #2
 8006068:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	f003 0301 	and.w	r3, r3, #1
}
 8006088:	4618      	mov	r0, r3
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3301      	adds	r3, #1
 80060a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4a13      	ldr	r2, [pc, #76]	; (80060f8 <USB_CoreReset+0x64>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d901      	bls.n	80060b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e01b      	b.n	80060ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	daf2      	bge.n	80060a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f043 0201 	orr.w	r2, r3, #1
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3301      	adds	r3, #1
 80060ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4a09      	ldr	r2, [pc, #36]	; (80060f8 <USB_CoreReset+0x64>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d901      	bls.n	80060dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e006      	b.n	80060ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d0f0      	beq.n	80060ca <USB_CoreReset+0x36>

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	00030d40 	.word	0x00030d40

080060fc <__libc_init_array>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	4d0d      	ldr	r5, [pc, #52]	; (8006134 <__libc_init_array+0x38>)
 8006100:	4c0d      	ldr	r4, [pc, #52]	; (8006138 <__libc_init_array+0x3c>)
 8006102:	1b64      	subs	r4, r4, r5
 8006104:	10a4      	asrs	r4, r4, #2
 8006106:	2600      	movs	r6, #0
 8006108:	42a6      	cmp	r6, r4
 800610a:	d109      	bne.n	8006120 <__libc_init_array+0x24>
 800610c:	4d0b      	ldr	r5, [pc, #44]	; (800613c <__libc_init_array+0x40>)
 800610e:	4c0c      	ldr	r4, [pc, #48]	; (8006140 <__libc_init_array+0x44>)
 8006110:	f000 f820 	bl	8006154 <_init>
 8006114:	1b64      	subs	r4, r4, r5
 8006116:	10a4      	asrs	r4, r4, #2
 8006118:	2600      	movs	r6, #0
 800611a:	42a6      	cmp	r6, r4
 800611c:	d105      	bne.n	800612a <__libc_init_array+0x2e>
 800611e:	bd70      	pop	{r4, r5, r6, pc}
 8006120:	f855 3b04 	ldr.w	r3, [r5], #4
 8006124:	4798      	blx	r3
 8006126:	3601      	adds	r6, #1
 8006128:	e7ee      	b.n	8006108 <__libc_init_array+0xc>
 800612a:	f855 3b04 	ldr.w	r3, [r5], #4
 800612e:	4798      	blx	r3
 8006130:	3601      	adds	r6, #1
 8006132:	e7f2      	b.n	800611a <__libc_init_array+0x1e>
 8006134:	080061ac 	.word	0x080061ac
 8006138:	080061ac 	.word	0x080061ac
 800613c:	080061ac 	.word	0x080061ac
 8006140:	080061b0 	.word	0x080061b0

08006144 <memset>:
 8006144:	4402      	add	r2, r0
 8006146:	4603      	mov	r3, r0
 8006148:	4293      	cmp	r3, r2
 800614a:	d100      	bne.n	800614e <memset+0xa>
 800614c:	4770      	bx	lr
 800614e:	f803 1b01 	strb.w	r1, [r3], #1
 8006152:	e7f9      	b.n	8006148 <memset+0x4>

08006154 <_init>:
 8006154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006156:	bf00      	nop
 8006158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800615a:	bc08      	pop	{r3}
 800615c:	469e      	mov	lr, r3
 800615e:	4770      	bx	lr

08006160 <_fini>:
 8006160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006162:	bf00      	nop
 8006164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006166:	bc08      	pop	{r3}
 8006168:	469e      	mov	lr, r3
 800616a:	4770      	bx	lr
