
H745_Dualcore_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078ec  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007b84  08007b84  00017b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bbc  08007bbc  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08007bbc  08007bbc  00017bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bc4  08007bc4  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bc4  08007bc4  00017bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bc8  08007bc8  00017bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08007bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08007bdc  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08007c3c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000074c  240000d0  08007c9c  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400081c  08007c9c  0002081c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001dca7  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003019  00000000  00000000  0003dde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000015d0  00000000  00000000  00040e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001113  00000000  00000000  000423d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003b89b  00000000  00000000  000434eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001d377  00000000  00000000  0007ed86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0018c70f  00000000  00000000  0009c0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005e84  00000000  00000000  0022880c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005d  00000000  00000000  0022e690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007b6c 	.word	0x08007b6c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08007b6c 	.word	0x08007b6c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b3b      	ldr	r3, [pc, #236]	; (80007fc <main+0xfc>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 fb73 	bl	8000e14 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fe25 	bl	800137c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f86f 	bl	8000814 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b31      	ldr	r3, [pc, #196]	; (80007fc <main+0xfc>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a2f      	ldr	r2, [pc, #188]	; (80007fc <main+0xfc>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <main+0xfc>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f001 fdff 	bl	8002358 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f001 fe15 	bl	800238c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b24      	ldr	r3, [pc, #144]	; (80007fc <main+0xfc>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 fb45 	bl	8000e14 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 fa89 	bl	8000ca0 <MX_GPIO_Init>
  MX_ETH_Init();
 800078e:	f000 f8c5 	bl	800091c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000792:	f000 fa07 	bl	8000ba4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000796:	f000 fa51 	bl	8000c3c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 800079a:	f000 f90b 	bl	80009b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800079e:	f000 f9b5 	bl	8000b0c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 80007a2:	4817      	ldr	r0, [pc, #92]	; (8000800 <main+0x100>)
 80007a4:	f004 fb32 	bl	8004e0c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007a8:	2100      	movs	r1, #0
 80007aa:	4815      	ldr	r0, [pc, #84]	; (8000800 <main+0x100>)
 80007ac:	f004 fc78 	bl	80050a0 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim2);
 80007b0:	4814      	ldr	r0, [pc, #80]	; (8000804 <main+0x104>)
 80007b2:	f004 fb9b 	bl	8004eec <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SRAM4->state1);
 80007b6:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	461a      	mov	r2, r3
 80007c0:	2101      	movs	r1, #1
 80007c2:	4811      	ldr	r0, [pc, #68]	; (8000808 <main+0x108>)
 80007c4:	f001 fd94 	bl	80022f0 <HAL_GPIO_WritePin>
	  chk2 = SRAM4->state1;
 80007c8:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a0f      	ldr	r2, [pc, #60]	; (800080c <main+0x10c>)
 80007d0:	6013      	str	r3, [r2, #0]

	  if(HAL_GetTick()-timestamp_ld2 >= 500){
 80007d2:	f000 fe59 	bl	8001488 <HAL_GetTick>
 80007d6:	4602      	mov	r2, r0
 80007d8:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <main+0x110>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007e2:	d3e8      	bcc.n	80007b6 <main+0xb6>
		  timestamp_ld2 = HAL_GetTick();
 80007e4:	f000 fe50 	bl	8001488 <HAL_GetTick>
 80007e8:	4603      	mov	r3, r0
 80007ea:	4a09      	ldr	r2, [pc, #36]	; (8000810 <main+0x110>)
 80007ec:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <main+0x108>)
 80007f4:	f001 fd95 	bl	8002322 <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SRAM4->state1);
 80007f8:	e7dd      	b.n	80007b6 <main+0xb6>
 80007fa:	bf00      	nop
 80007fc:	58024400 	.word	0x58024400
 8000800:	240001d4 	.word	0x240001d4
 8000804:	24000220 	.word	0x24000220
 8000808:	58020400 	.word	0x58020400
 800080c:	2400080c 	.word	0x2400080c
 8000810:	24000808 	.word	0x24000808

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b09c      	sub	sp, #112	; 0x70
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	224c      	movs	r2, #76	; 0x4c
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f007 f976 	bl	8007b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2220      	movs	r2, #32
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f007 f970 	bl	8007b14 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000834:	2004      	movs	r0, #4
 8000836:	f001 ff05 	bl	8002644 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b34      	ldr	r3, [pc, #208]	; (8000910 <SystemClock_Config+0xfc>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	4a33      	ldr	r2, [pc, #204]	; (8000910 <SystemClock_Config+0xfc>)
 8000844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000848:	6193      	str	r3, [r2, #24]
 800084a:	4b31      	ldr	r3, [pc, #196]	; (8000910 <SystemClock_Config+0xfc>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <SystemClock_Config+0x100>)
 8000856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000858:	4a2e      	ldr	r2, [pc, #184]	; (8000914 <SystemClock_Config+0x100>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000860:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <SystemClock_Config+0x100>)
 8000862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800086c:	bf00      	nop
 800086e:	4b28      	ldr	r3, [pc, #160]	; (8000910 <SystemClock_Config+0xfc>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800087a:	d1f8      	bne.n	800086e <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800087c:	4b26      	ldr	r3, [pc, #152]	; (8000918 <SystemClock_Config+0x104>)
 800087e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000880:	f023 0303 	bic.w	r3, r3, #3
 8000884:	4a24      	ldr	r2, [pc, #144]	; (8000918 <SystemClock_Config+0x104>)
 8000886:	f043 0302 	orr.w	r3, r3, #2
 800088a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800088c:	2301      	movs	r3, #1
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000890:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089a:	2302      	movs	r3, #2
 800089c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800089e:	2301      	movs	r3, #1
 80008a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80008a2:	2378      	movs	r3, #120	; 0x78
 80008a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008b2:	230c      	movs	r3, #12
 80008b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 ff28 	bl	8002718 <HAL_RCC_OscConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80008ce:	f000 faa1 	bl	8000e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d2:	233f      	movs	r3, #63	; 0x3f
 80008d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d6:	2303      	movs	r3, #3
 80008d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008de:	2308      	movs	r3, #8
 80008e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008e2:	2340      	movs	r3, #64	; 0x40
 80008e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008e6:	2340      	movs	r3, #64	; 0x40
 80008e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008f0:	2340      	movs	r3, #64	; 0x40
 80008f2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2104      	movs	r1, #4
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fb3b 	bl	8002f74 <HAL_RCC_ClockConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000904:	f000 fa86 	bl	8000e14 <Error_Handler>
  }
}
 8000908:	bf00      	nop
 800090a:	3770      	adds	r7, #112	; 0x70
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	58024800 	.word	0x58024800
 8000914:	58000400 	.word	0x58000400
 8000918:	58024400 	.word	0x58024400

0800091c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <MX_ETH_Init+0x80>)
 8000922:	4a1f      	ldr	r2, [pc, #124]	; (80009a0 <MX_ETH_Init+0x84>)
 8000924:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <MX_ETH_Init+0x88>)
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_ETH_Init+0x88>)
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <MX_ETH_Init+0x88>)
 8000934:	22e1      	movs	r2, #225	; 0xe1
 8000936:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000938:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_ETH_Init+0x88>)
 800093a:	2200      	movs	r2, #0
 800093c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <MX_ETH_Init+0x88>)
 8000940:	2200      	movs	r2, #0
 8000942:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000944:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_ETH_Init+0x88>)
 8000946:	2200      	movs	r2, #0
 8000948:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_ETH_Init+0x80>)
 800094c:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <MX_ETH_Init+0x88>)
 800094e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_ETH_Init+0x80>)
 8000952:	2201      	movs	r2, #1
 8000954:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_ETH_Init+0x80>)
 8000958:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <MX_ETH_Init+0x8c>)
 800095a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_ETH_Init+0x80>)
 800095e:	4a13      	ldr	r2, [pc, #76]	; (80009ac <MX_ETH_Init+0x90>)
 8000960:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_ETH_Init+0x80>)
 8000964:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000968:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800096a:	480c      	ldr	r0, [pc, #48]	; (800099c <MX_ETH_Init+0x80>)
 800096c:	f000 feec 	bl	8001748 <HAL_ETH_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000976:	f000 fa4d 	bl	8000e14 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800097a:	2238      	movs	r2, #56	; 0x38
 800097c:	2100      	movs	r1, #0
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <MX_ETH_Init+0x94>)
 8000980:	f007 f8c8 	bl	8007b14 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_ETH_Init+0x94>)
 8000986:	2221      	movs	r2, #33	; 0x21
 8000988:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_ETH_Init+0x94>)
 800098c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000990:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_ETH_Init+0x94>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	24000124 	.word	0x24000124
 80009a0:	40028000 	.word	0x40028000
 80009a4:	24000810 	.word	0x24000810
 80009a8:	24000070 	.word	0x24000070
 80009ac:	24000010 	.word	0x24000010
 80009b0:	240000ec 	.word	0x240000ec

080009b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b09a      	sub	sp, #104	; 0x68
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
 80009e4:	615a      	str	r2, [r3, #20]
 80009e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	222c      	movs	r2, #44	; 0x2c
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f007 f890 	bl	8007b14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009f4:	4b43      	ldr	r3, [pc, #268]	; (8000b04 <MX_TIM1_Init+0x150>)
 80009f6:	4a44      	ldr	r2, [pc, #272]	; (8000b08 <MX_TIM1_Init+0x154>)
 80009f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 152;
 80009fa:	4b42      	ldr	r3, [pc, #264]	; (8000b04 <MX_TIM1_Init+0x150>)
 80009fc:	2298      	movs	r2, #152	; 0x98
 80009fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a00:	4b40      	ldr	r3, [pc, #256]	; (8000b04 <MX_TIM1_Init+0x150>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3;
 8000a06:	4b3f      	ldr	r3, [pc, #252]	; (8000b04 <MX_TIM1_Init+0x150>)
 8000a08:	2203      	movs	r2, #3
 8000a0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0c:	4b3d      	ldr	r3, [pc, #244]	; (8000b04 <MX_TIM1_Init+0x150>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a12:	4b3c      	ldr	r3, [pc, #240]	; (8000b04 <MX_TIM1_Init+0x150>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a18:	4b3a      	ldr	r3, [pc, #232]	; (8000b04 <MX_TIM1_Init+0x150>)
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a1e:	4839      	ldr	r0, [pc, #228]	; (8000b04 <MX_TIM1_Init+0x150>)
 8000a20:	f004 f99c 	bl	8004d5c <HAL_TIM_Base_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a2a:	f000 f9f3 	bl	8000e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a32:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4832      	ldr	r0, [pc, #200]	; (8000b04 <MX_TIM1_Init+0x150>)
 8000a3c:	f004 fe72 	bl	8005724 <HAL_TIM_ConfigClockSource>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a46:	f000 f9e5 	bl	8000e14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a4a:	482e      	ldr	r0, [pc, #184]	; (8000b04 <MX_TIM1_Init+0x150>)
 8000a4c:	f004 fac6 	bl	8004fdc <HAL_TIM_PWM_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a56:	f000 f9dd 	bl	8000e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4825      	ldr	r0, [pc, #148]	; (8000b04 <MX_TIM1_Init+0x150>)
 8000a6e:	f005 fbad 	bl	80061cc <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000a78:	f000 f9cc 	bl	8000e14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7c:	2360      	movs	r3, #96	; 0x60
 8000a7e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a84:	2300      	movs	r3, #0
 8000a86:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a90:	2300      	movs	r3, #0
 8000a92:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a94:	2300      	movs	r3, #0
 8000a96:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4818      	ldr	r0, [pc, #96]	; (8000b04 <MX_TIM1_Init+0x150>)
 8000aa2:	f004 fd2b 	bl	80054fc <HAL_TIM_PWM_ConfigChannel>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000aac:	f000 f9b2 	bl	8000e14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ad2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4807      	ldr	r0, [pc, #28]	; (8000b04 <MX_TIM1_Init+0x150>)
 8000ae6:	f005 fbff 	bl	80062e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000af0:	f000 f990 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <MX_TIM1_Init+0x150>)
 8000af6:	f000 fab9 	bl	800106c <HAL_TIM_MspPostInit>

}
 8000afa:	bf00      	nop
 8000afc:	3768      	adds	r7, #104	; 0x68
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	240001d4 	.word	0x240001d4
 8000b08:	40010000 	.word	0x40010000

08000b0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <MX_TIM2_Init+0x94>)
 8000b2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <MX_TIM2_Init+0x94>)
 8000b34:	2202      	movs	r2, #2
 8000b36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b38:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <MX_TIM2_Init+0x94>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4;
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <MX_TIM2_Init+0x94>)
 8000b40:	2204      	movs	r2, #4
 8000b42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_TIM2_Init+0x94>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <MX_TIM2_Init+0x94>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b50:	4813      	ldr	r0, [pc, #76]	; (8000ba0 <MX_TIM2_Init+0x94>)
 8000b52:	f004 f903 	bl	8004d5c <HAL_TIM_Base_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b5c:	f000 f95a 	bl	8000e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <MX_TIM2_Init+0x94>)
 8000b6e:	f004 fdd9 	bl	8005724 <HAL_TIM_ConfigClockSource>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b78:	f000 f94c 	bl	8000e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_TIM2_Init+0x94>)
 8000b8a:	f005 fb1f 	bl	80061cc <HAL_TIMEx_MasterConfigSynchronization>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b94:	f000 f93e 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	24000220 	.word	0x24000220

08000ba4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ba8:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000baa:	4a23      	ldr	r2, [pc, #140]	; (8000c38 <MX_USART3_UART_Init+0x94>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bec:	4811      	ldr	r0, [pc, #68]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000bee:	f005 fc17 	bl	8006420 <HAL_UART_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bf8:	f000 f90c 	bl	8000e14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	480d      	ldr	r0, [pc, #52]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000c00:	f006 fbb4 	bl	800736c <HAL_UARTEx_SetTxFifoThreshold>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c0a:	f000 f903 	bl	8000e14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4808      	ldr	r0, [pc, #32]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000c12:	f006 fbe9 	bl	80073e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c1c:	f000 f8fa 	bl	8000e14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_USART3_UART_Init+0x90>)
 8000c22:	f006 fb6a 	bl	80072fa <HAL_UARTEx_DisableFifoMode>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c2c:	f000 f8f2 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2400026c 	.word	0x2400026c
 8000c38:	40004800 	.word	0x40004800

08000c3c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c42:	4a16      	ldr	r2, [pc, #88]	; (8000c9c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c44:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c48:	2209      	movs	r2, #9
 8000c4a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c4e:	2202      	movs	r2, #2
 8000c50:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c84:	f001 fb96 	bl	80023b4 <HAL_PCD_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c8e:	f000 f8c1 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	240002fc 	.word	0x240002fc
 8000c9c:	40080000 	.word	0x40080000

08000ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08c      	sub	sp, #48	; 0x30
 8000ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	4b4a      	ldr	r3, [pc, #296]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	4a48      	ldr	r2, [pc, #288]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc6:	4b46      	ldr	r3, [pc, #280]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
 8000cd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd4:	4b42      	ldr	r3, [pc, #264]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cda:	4a41      	ldr	r2, [pc, #260]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce4:	4b3e      	ldr	r3, [pc, #248]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b3b      	ldr	r3, [pc, #236]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	4a39      	ldr	r2, [pc, #228]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d02:	4b37      	ldr	r3, [pc, #220]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d10:	4b33      	ldr	r3, [pc, #204]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d16:	4a32      	ldr	r2, [pc, #200]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d20:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2e:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	4a2a      	ldr	r2, [pc, #168]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000d36:	f043 0310 	orr.w	r3, r3, #16
 8000d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3e:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d44:	f003 0310 	and.w	r3, r3, #16
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4c:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d52:	4a23      	ldr	r2, [pc, #140]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5c:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d70:	4a1b      	ldr	r2, [pc, #108]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d7a:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <MX_GPIO_Init+0x140>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d84:	603b      	str	r3, [r7, #0]
 8000d86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CC_I2_GPIO_Port, CC_I2_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2108      	movs	r1, #8
 8000d8c:	4815      	ldr	r0, [pc, #84]	; (8000de4 <MX_GPIO_Init+0x144>)
 8000d8e:	f001 faaf 	bl	80022f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d98:	4813      	ldr	r0, [pc, #76]	; (8000de8 <MX_GPIO_Init+0x148>)
 8000d9a:	f001 faa9 	bl	80022f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CC_I2_Pin */
  GPIO_InitStruct.Pin = CC_I2_Pin;
 8000d9e:	2308      	movs	r3, #8
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000da2:	2311      	movs	r3, #17
 8000da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CC_I2_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	480b      	ldr	r0, [pc, #44]	; (8000de4 <MX_GPIO_Init+0x144>)
 8000db6:	f001 f8eb 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000dba:	f244 0301 	movw	r3, #16385	; 0x4001
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_GPIO_Init+0x148>)
 8000dd4:	f001 f8dc 	bl	8001f90 <HAL_GPIO_Init>

}
 8000dd8:	bf00      	nop
 8000dda:	3730      	adds	r7, #48	; 0x30
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	58024400 	.word	0x58024400
 8000de4:	58020000 	.word	0x58020000
 8000de8:	58020400 	.word	0x58020400

08000dec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2){
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d103      	bne.n	8000e04 <HAL_TIM_PeriodElapsedCallback+0x18>
		HAL_GPIO_TogglePin(CC_I2_GPIO_Port, CC_I2_Pin);
 8000dfc:	2108      	movs	r1, #8
 8000dfe:	4804      	ldr	r0, [pc, #16]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000e00:	f001 fa8f 	bl	8002322 <HAL_GPIO_TogglePin>
	}
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	24000220 	.word	0x24000220
 8000e10:	58020000 	.word	0x58020000

08000e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e18:	b672      	cpsid	i
}
 8000e1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <Error_Handler+0x8>
	...

08000e20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_MspInit+0x30>)
 8000e28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e2c:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <HAL_MspInit+0x30>)
 8000e2e:	f043 0302 	orr.w	r3, r3, #2
 8000e32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_MspInit+0x30>)
 8000e38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	58024400 	.word	0x58024400

08000e54 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08e      	sub	sp, #56	; 0x38
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a59      	ldr	r2, [pc, #356]	; (8000fd8 <HAL_ETH_MspInit+0x184>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	f040 80ab 	bne.w	8000fce <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e78:	4b58      	ldr	r3, [pc, #352]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000e7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e7e:	4a57      	ldr	r2, [pc, #348]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e84:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e88:	4b54      	ldr	r3, [pc, #336]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000e8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e92:	623b      	str	r3, [r7, #32]
 8000e94:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e96:	4b51      	ldr	r3, [pc, #324]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000e98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e9c:	4a4f      	ldr	r2, [pc, #316]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ea6:	4b4d      	ldr	r3, [pc, #308]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000ea8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000eb4:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000eb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eba:	4a48      	ldr	r2, [pc, #288]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ec4:	4b45      	ldr	r3, [pc, #276]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000ec6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ece:	61bb      	str	r3, [r7, #24]
 8000ed0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	4b42      	ldr	r3, [pc, #264]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed8:	4a40      	ldr	r2, [pc, #256]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee2:	4b3e      	ldr	r3, [pc, #248]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef6:	4a39      	ldr	r2, [pc, #228]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f00:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	4b33      	ldr	r3, [pc, #204]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f14:	4a31      	ldr	r2, [pc, #196]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f2c:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f32:	4a2a      	ldr	r2, [pc, #168]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f3c:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <HAL_ETH_MspInit+0x188>)
 8000f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f4a:	2332      	movs	r3, #50	; 0x32
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f5a:	230b      	movs	r3, #11
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f62:	4619      	mov	r1, r3
 8000f64:	481e      	ldr	r0, [pc, #120]	; (8000fe0 <HAL_ETH_MspInit+0x18c>)
 8000f66:	f001 f813 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f6a:	2386      	movs	r3, #134	; 0x86
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f7a:	230b      	movs	r3, #11
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	4619      	mov	r1, r3
 8000f84:	4817      	ldr	r0, [pc, #92]	; (8000fe4 <HAL_ETH_MspInit+0x190>)
 8000f86:	f001 f803 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f9c:	230b      	movs	r3, #11
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4810      	ldr	r0, [pc, #64]	; (8000fe8 <HAL_ETH_MspInit+0x194>)
 8000fa8:	f000 fff2 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fbe:	230b      	movs	r3, #11
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4808      	ldr	r0, [pc, #32]	; (8000fec <HAL_ETH_MspInit+0x198>)
 8000fca:	f000 ffe1 	bl	8001f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000fce:	bf00      	nop
 8000fd0:	3738      	adds	r7, #56	; 0x38
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40028000 	.word	0x40028000
 8000fdc:	58024400 	.word	0x58024400
 8000fe0:	58020800 	.word	0x58020800
 8000fe4:	58020000 	.word	0x58020000
 8000fe8:	58020400 	.word	0x58020400
 8000fec:	58021800 	.word	0x58021800

08000ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a19      	ldr	r2, [pc, #100]	; (8001064 <HAL_TIM_Base_MspInit+0x74>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d10f      	bne.n	8001022 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_TIM_Base_MspInit+0x78>)
 8001004:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001008:	4a17      	ldr	r2, [pc, #92]	; (8001068 <HAL_TIM_Base_MspInit+0x78>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_TIM_Base_MspInit+0x78>)
 8001014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001020:	e01b      	b.n	800105a <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM2)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800102a:	d116      	bne.n	800105a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_TIM_Base_MspInit+0x78>)
 800102e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001032:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <HAL_TIM_Base_MspInit+0x78>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_TIM_Base_MspInit+0x78>)
 800103e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	201c      	movs	r0, #28
 8001050:	f000 fb45 	bl	80016de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001054:	201c      	movs	r0, #28
 8001056:	f000 fb5c 	bl	8001712 <HAL_NVIC_EnableIRQ>
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40010000 	.word	0x40010000
 8001068:	58024400 	.word	0x58024400

0800106c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <HAL_TIM_MspPostInit+0x6c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d11f      	bne.n	80010ce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <HAL_TIM_MspPostInit+0x70>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001094:	4a11      	ldr	r2, [pc, #68]	; (80010dc <HAL_TIM_MspPostInit+0x70>)
 8001096:	f043 0310 	orr.w	r3, r3, #16
 800109a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <HAL_TIM_MspPostInit+0x70>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a4:	f003 0310 	and.w	r3, r3, #16
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b2:	2312      	movs	r3, #18
 80010b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010be:	2301      	movs	r3, #1
 80010c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <HAL_TIM_MspPostInit+0x74>)
 80010ca:	f000 ff61 	bl	8001f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	3720      	adds	r7, #32
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40010000 	.word	0x40010000
 80010dc:	58024400 	.word	0x58024400
 80010e0:	58021000 	.word	0x58021000

080010e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0b8      	sub	sp, #224	; 0xe0
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	22bc      	movs	r2, #188	; 0xbc
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f006 fd05 	bl	8007b14 <memset>
  if(huart->Instance==USART3)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a25      	ldr	r2, [pc, #148]	; (80011a4 <HAL_UART_MspInit+0xc0>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d142      	bne.n	800119a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001114:	2302      	movs	r3, #2
 8001116:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001118:	2300      	movs	r3, #0
 800111a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	4618      	mov	r0, r3
 8001124:	f002 fab2 	bl	800368c <HAL_RCCEx_PeriphCLKConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800112e:	f7ff fe71 	bl	8000e14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001132:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <HAL_UART_MspInit+0xc4>)
 8001134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001138:	4a1b      	ldr	r2, [pc, #108]	; (80011a8 <HAL_UART_MspInit+0xc4>)
 800113a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800113e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_UART_MspInit+0xc4>)
 8001144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001148:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_UART_MspInit+0xc4>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001156:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <HAL_UART_MspInit+0xc4>)
 8001158:	f043 0308 	orr.w	r3, r3, #8
 800115c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_UART_MspInit+0xc4>)
 8001162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800116e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001172:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001188:	2307      	movs	r3, #7
 800118a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800118e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <HAL_UART_MspInit+0xc8>)
 8001196:	f000 fefb 	bl	8001f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	37e0      	adds	r7, #224	; 0xe0
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40004800 	.word	0x40004800
 80011a8:	58024400 	.word	0x58024400
 80011ac:	58020c00 	.word	0x58020c00

080011b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b0b8      	sub	sp, #224	; 0xe0
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	22bc      	movs	r2, #188	; 0xbc
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f006 fc9f 	bl	8007b14 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a36      	ldr	r2, [pc, #216]	; (80012b4 <HAL_PCD_MspInit+0x104>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d165      	bne.n	80012ac <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011e4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80011e6:	2301      	movs	r3, #1
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 80011ea:	2318      	movs	r3, #24
 80011ec:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011ee:	2302      	movs	r3, #2
 80011f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80011f2:	2304      	movs	r3, #4
 80011f4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80011fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011fe:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001204:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001208:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4618      	mov	r0, r3
 8001212:	f002 fa3b 	bl	800368c <HAL_RCCEx_PeriphCLKConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800121c:	f7ff fdfa 	bl	8000e14 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001220:	f001 fa6a 	bl	80026f8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <HAL_PCD_MspInit+0x108>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122a:	4a23      	ldr	r2, [pc, #140]	; (80012b8 <HAL_PCD_MspInit+0x108>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001234:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_PCD_MspInit+0x108>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001242:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001246:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800125c:	230a      	movs	r3, #10
 800125e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001266:	4619      	mov	r1, r3
 8001268:	4814      	ldr	r0, [pc, #80]	; (80012bc <HAL_PCD_MspInit+0x10c>)
 800126a:	f000 fe91 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800126e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001272:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001286:	4619      	mov	r1, r3
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <HAL_PCD_MspInit+0x10c>)
 800128a:	f000 fe81 	bl	8001f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_PCD_MspInit+0x108>)
 8001290:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001294:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_PCD_MspInit+0x108>)
 8001296:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800129a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_PCD_MspInit+0x108>)
 80012a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012ac:	bf00      	nop
 80012ae:	37e0      	adds	r7, #224	; 0xe0
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40080000 	.word	0x40080000
 80012b8:	58024400 	.word	0x58024400
 80012bc:	58020000 	.word	0x58020000

080012c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <NMI_Handler+0x4>

080012c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <MemManage_Handler+0x4>

080012d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <BusFault_Handler+0x4>

080012d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <UsageFault_Handler+0x4>

080012de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130c:	f000 f8a8 	bl	8001460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}

08001314 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <TIM2_IRQHandler+0x10>)
 800131a:	f003 ffcf 	bl	80052bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	24000220 	.word	0x24000220

08001328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001360 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800132c:	f7ff f952 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001330:	480c      	ldr	r0, [pc, #48]	; (8001364 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001332:	490d      	ldr	r1, [pc, #52]	; (8001368 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001334:	4a0d      	ldr	r2, [pc, #52]	; (800136c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001348:	4c0a      	ldr	r4, [pc, #40]	; (8001374 <LoopFillZerobss+0x22>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001356:	f006 fbe5 	bl	8007b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135a:	f7ff f9d1 	bl	8000700 <main>
  bx  lr
 800135e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001360:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001364:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001368:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800136c:	08007bcc 	.word	0x08007bcc
  ldr r2, =_sbss
 8001370:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001374:	2400081c 	.word	0x2400081c

08001378 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC3_IRQHandler>
	...

0800137c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001382:	2003      	movs	r0, #3
 8001384:	f000 f9a0 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001388:	f001 ffaa 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 800138c:	4602      	mov	r2, r0
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_Init+0x68>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	0a1b      	lsrs	r3, r3, #8
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	4913      	ldr	r1, [pc, #76]	; (80013e8 <HAL_Init+0x6c>)
 800139a:	5ccb      	ldrb	r3, [r1, r3]
 800139c:	f003 031f 	and.w	r3, r3, #31
 80013a0:	fa22 f303 	lsr.w	r3, r2, r3
 80013a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_Init+0x68>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <HAL_Init+0x6c>)
 80013b0:	5cd3      	ldrb	r3, [r2, r3]
 80013b2:	f003 031f 	and.w	r3, r3, #31
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	fa22 f303 	lsr.w	r3, r2, r3
 80013bc:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <HAL_Init+0x70>)
 80013be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013c0:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <HAL_Init+0x74>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c6:	2000      	movs	r0, #0
 80013c8:	f000 f814 	bl	80013f4 <HAL_InitTick>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e002      	b.n	80013dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013d6:	f7ff fd23 	bl	8000e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	58024400 	.word	0x58024400
 80013e8:	08007b84 	.word	0x08007b84
 80013ec:	24000004 	.word	0x24000004
 80013f0:	24000000 	.word	0x24000000

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_InitTick+0x60>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e021      	b.n	800144c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <HAL_InitTick+0x64>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_InitTick+0x60>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001416:	fbb3 f3f1 	udiv	r3, r3, r1
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f985 	bl	800172e <HAL_SYSTICK_Config>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e00e      	b.n	800144c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b0f      	cmp	r3, #15
 8001432:	d80a      	bhi.n	800144a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001434:	2200      	movs	r2, #0
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f000 f94f 	bl	80016de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001440:	4a06      	ldr	r2, [pc, #24]	; (800145c <HAL_InitTick+0x68>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e000      	b.n	800144c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2400000c 	.word	0x2400000c
 8001458:	24000000 	.word	0x24000000
 800145c:	24000008 	.word	0x24000008

08001460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x20>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_IncTick+0x24>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <HAL_IncTick+0x24>)
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	2400000c 	.word	0x2400000c
 8001484:	24000818 	.word	0x24000818

08001488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <HAL_GetTick+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	24000818 	.word	0x24000818

080014a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff ffee 	bl	8001488 <HAL_GetTick>
 80014ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b8:	d005      	beq.n	80014c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_Delay+0x44>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c6:	bf00      	nop
 80014c8:	f7ff ffde 	bl	8001488 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d8f7      	bhi.n	80014c8 <HAL_Delay+0x28>
  {
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2400000c 	.word	0x2400000c

080014e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <HAL_GetREVID+0x14>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	0c1b      	lsrs	r3, r3, #16
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	5c001000 	.word	0x5c001000

08001500 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001510:	4904      	ldr	r1, [pc, #16]	; (8001524 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	58000400 	.word	0x58000400

08001528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <__NVIC_SetPriorityGrouping+0x40>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001544:	4013      	ands	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 8001552:	4313      	orrs	r3, r2
 8001554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001556:	4a04      	ldr	r2, [pc, #16]	; (8001568 <__NVIC_SetPriorityGrouping+0x40>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	60d3      	str	r3, [r2, #12]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00
 800156c:	05fa0000 	.word	0x05fa0000

08001570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <__NVIC_GetPriorityGrouping+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 0307 	and.w	r3, r3, #7
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db0b      	blt.n	80015b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	f003 021f 	and.w	r2, r3, #31
 80015a4:	4907      	ldr	r1, [pc, #28]	; (80015c4 <__NVIC_EnableIRQ+0x38>)
 80015a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	2001      	movs	r0, #1
 80015ae:	fa00 f202 	lsl.w	r2, r0, r2
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	; (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	; (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001694:	d301      	bcc.n	800169a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001696:	2301      	movs	r3, #1
 8001698:	e00f      	b.n	80016ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <SysTick_Config+0x40>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a2:	210f      	movs	r1, #15
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	f7ff ff8e 	bl	80015c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <SysTick_Config+0x40>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SysTick_Config+0x40>)
 80016b4:	2207      	movs	r2, #7
 80016b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff29 	bl	8001528 <__NVIC_SetPriorityGrouping>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016ec:	f7ff ff40 	bl	8001570 <__NVIC_GetPriorityGrouping>
 80016f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	6978      	ldr	r0, [r7, #20]
 80016f8:	f7ff ff90 	bl	800161c <NVIC_EncodePriority>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff5f 	bl	80015c8 <__NVIC_SetPriority>
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800171c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff33 	bl	800158c <__NVIC_EnableIRQ>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffa4 	bl	8001684 <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e0cf      	b.n	80018fa <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001760:	2b00      	cmp	r3, #0
 8001762:	d106      	bne.n	8001772 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2223      	movs	r2, #35	; 0x23
 8001768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff fb71 	bl	8000e54 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	4b64      	ldr	r3, [pc, #400]	; (8001904 <HAL_ETH_Init+0x1bc>)
 8001774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001778:	4a62      	ldr	r2, [pc, #392]	; (8001904 <HAL_ETH_Init+0x1bc>)
 800177a:	f043 0302 	orr.w	r3, r3, #2
 800177e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001782:	4b60      	ldr	r3, [pc, #384]	; (8001904 <HAL_ETH_Init+0x1bc>)
 8001784:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7a1b      	ldrb	r3, [r3, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d103      	bne.n	80017a0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001798:	2000      	movs	r0, #0
 800179a:	f7ff feb1 	bl	8001500 <HAL_SYSCFG_ETHInterfaceSelect>
 800179e:	e003      	b.n	80017a8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80017a0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80017a4:	f7ff feac 	bl	8001500 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80017a8:	4b57      	ldr	r3, [pc, #348]	; (8001908 <HAL_ETH_Init+0x1c0>)
 80017aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017c4:	f7ff fe60 	bl	8001488 <HAL_GetTick>
 80017c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017ca:	e011      	b.n	80017f0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80017cc:	f7ff fe5c 	bl	8001488 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017da:	d909      	bls.n	80017f0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2204      	movs	r2, #4
 80017e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	22e0      	movs	r2, #224	; 0xe0
 80017e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e084      	b.n	80018fa <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1e4      	bne.n	80017cc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f886 	bl	8001914 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001808:	f001 fee4 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 800180c:	4603      	mov	r3, r0
 800180e:	4a3f      	ldr	r2, [pc, #252]	; (800190c <HAL_ETH_Init+0x1c4>)
 8001810:	fba2 2303 	umull	r2, r3, r2, r3
 8001814:	0c9a      	lsrs	r2, r3, #18
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	3a01      	subs	r2, #1
 800181c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 fa71 	bl	8001d08 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800182e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001832:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800183e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001842:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d009      	beq.n	8001866 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	22e0      	movs	r2, #224	; 0xe0
 800185e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e049      	b.n	80018fa <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001872:	4b27      	ldr	r3, [pc, #156]	; (8001910 <HAL_ETH_Init+0x1c8>)
 8001874:	4013      	ands	r3, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6952      	ldr	r2, [r2, #20]
 800187a:	0051      	lsls	r1, r2, #1
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	430b      	orrs	r3, r1
 8001882:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001886:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fad9 	bl	8001e42 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 fb1f 	bl	8001ed4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	3305      	adds	r3, #5
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	021a      	lsls	r2, r3, #8
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	3304      	adds	r3, #4
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	3303      	adds	r3, #3
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	061a      	lsls	r2, r3, #24
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	3302      	adds	r3, #2
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	041b      	lsls	r3, r3, #16
 80018c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	3301      	adds	r3, #1
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018d4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018e2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2210      	movs	r2, #16
 80018f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	58024400 	.word	0x58024400
 8001908:	58000400 	.word	0x58000400
 800190c:	431bde83 	.word	0x431bde83
 8001910:	ffff8001 	.word	0xffff8001

08001914 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001924:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800192c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800192e:	f001 fe51 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 8001932:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d908      	bls.n	800194e <HAL_ETH_SetMDIOClockRange+0x3a>
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d804      	bhi.n	800194e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e027      	b.n	800199e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	4a18      	ldr	r2, [pc, #96]	; (80019b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d908      	bls.n	8001968 <HAL_ETH_SetMDIOClockRange+0x54>
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d204      	bcs.n	8001968 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	e01a      	b.n	800199e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	4a13      	ldr	r2, [pc, #76]	; (80019b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d303      	bcc.n	8001978 <HAL_ETH_SetMDIOClockRange+0x64>
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d911      	bls.n	800199c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4a10      	ldr	r2, [pc, #64]	; (80019bc <HAL_ETH_SetMDIOClockRange+0xa8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d908      	bls.n	8001992 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d804      	bhi.n	8001992 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e005      	b.n	800199e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	e000      	b.n	800199e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800199c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	01312cff 	.word	0x01312cff
 80019b4:	02160ebf 	.word	0x02160ebf
 80019b8:	03938700 	.word	0x03938700
 80019bc:	05f5e0ff 	.word	0x05f5e0ff
 80019c0:	08f0d17f 	.word	0x08f0d17f

080019c4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80019d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	791b      	ldrb	r3, [r3, #4]
 80019dc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80019de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	7b1b      	ldrb	r3, [r3, #12]
 80019e4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80019e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	7b5b      	ldrb	r3, [r3, #13]
 80019ec:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80019ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	7b9b      	ldrb	r3, [r3, #14]
 80019f4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80019f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	7bdb      	ldrb	r3, [r3, #15]
 80019fc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80019fe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	7c12      	ldrb	r2, [r2, #16]
 8001a04:	2a00      	cmp	r2, #0
 8001a06:	d102      	bne.n	8001a0e <ETH_SetMACConfig+0x4a>
 8001a08:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a0c:	e000      	b.n	8001a10 <ETH_SetMACConfig+0x4c>
 8001a0e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a10:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	7c52      	ldrb	r2, [r2, #17]
 8001a16:	2a00      	cmp	r2, #0
 8001a18:	d102      	bne.n	8001a20 <ETH_SetMACConfig+0x5c>
 8001a1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a1e:	e000      	b.n	8001a22 <ETH_SetMACConfig+0x5e>
 8001a20:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	7c9b      	ldrb	r3, [r3, #18]
 8001a28:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a2a:	431a      	orrs	r2, r3
               macconf->Speed |
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a30:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001a36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	7f1b      	ldrb	r3, [r3, #28]
 8001a3c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001a3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	7f5b      	ldrb	r3, [r3, #29]
 8001a44:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a46:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	7f92      	ldrb	r2, [r2, #30]
 8001a4c:	2a00      	cmp	r2, #0
 8001a4e:	d102      	bne.n	8001a56 <ETH_SetMACConfig+0x92>
 8001a50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a54:	e000      	b.n	8001a58 <ETH_SetMACConfig+0x94>
 8001a56:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a58:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	7fdb      	ldrb	r3, [r3, #31]
 8001a5e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a60:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a68:	2a00      	cmp	r2, #0
 8001a6a:	d102      	bne.n	8001a72 <ETH_SetMACConfig+0xae>
 8001a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a70:	e000      	b.n	8001a74 <ETH_SetMACConfig+0xb0>
 8001a72:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a74:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a82:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001a84:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b56      	ldr	r3, [pc, #344]	; (8001bf0 <ETH_SetMACConfig+0x22c>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	68f9      	ldr	r1, [r7, #12]
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001aae:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ab0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ab8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001aba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001ac2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001ac4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001acc:	2a00      	cmp	r2, #0
 8001ace:	d102      	bne.n	8001ad6 <ETH_SetMACConfig+0x112>
 8001ad0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ad4:	e000      	b.n	8001ad8 <ETH_SetMACConfig+0x114>
 8001ad6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001ad8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4b42      	ldr	r3, [pc, #264]	; (8001bf4 <ETH_SetMACConfig+0x230>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	68f9      	ldr	r1, [r7, #12]
 8001af2:	430b      	orrs	r3, r1
 8001af4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001afc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b02:	4313      	orrs	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	4b3a      	ldr	r3, [pc, #232]	; (8001bf8 <ETH_SetMACConfig+0x234>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	68f9      	ldr	r1, [r7, #12]
 8001b16:	430b      	orrs	r3, r1
 8001b18:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b20:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b26:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001b2e:	2a00      	cmp	r2, #0
 8001b30:	d101      	bne.n	8001b36 <ETH_SetMACConfig+0x172>
 8001b32:	2280      	movs	r2, #128	; 0x80
 8001b34:	e000      	b.n	8001b38 <ETH_SetMACConfig+0x174>
 8001b36:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001b38:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b40:	4313      	orrs	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b4a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001b4e:	4013      	ands	r3, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	68f9      	ldr	r1, [r7, #12]
 8001b56:	430b      	orrs	r3, r1
 8001b58:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001b60:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001b68:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b76:	f023 0103 	bic.w	r1, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001b8e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001baa:	2a00      	cmp	r2, #0
 8001bac:	d101      	bne.n	8001bb2 <ETH_SetMACConfig+0x1ee>
 8001bae:	2240      	movs	r2, #64	; 0x40
 8001bb0:	e000      	b.n	8001bb4 <ETH_SetMACConfig+0x1f0>
 8001bb2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001bb4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001bbc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001bbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001bc6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001bd4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	00048083 	.word	0x00048083
 8001bf4:	c0f88000 	.word	0xc0f88000
 8001bf8:	fffffef0 	.word	0xfffffef0

08001bfc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b38      	ldr	r3, [pc, #224]	; (8001cf4 <ETH_SetDMAConfig+0xf8>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	6811      	ldr	r1, [r2, #0]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	430b      	orrs	r3, r1
 8001c1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c22:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	791b      	ldrb	r3, [r3, #4]
 8001c28:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c2e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	7b1b      	ldrb	r3, [r3, #12]
 8001c34:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c36:	4313      	orrs	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <ETH_SetDMAConfig+0xfc>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	68f9      	ldr	r1, [r7, #12]
 8001c4e:	430b      	orrs	r3, r1
 8001c50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c54:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	7b5b      	ldrb	r3, [r3, #13]
 8001c5a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c60:	4313      	orrs	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c6c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001c70:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <ETH_SetDMAConfig+0x100>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	68f9      	ldr	r1, [r7, #12]
 8001c7a:	430b      	orrs	r3, r1
 8001c7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c80:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	7d1b      	ldrb	r3, [r3, #20]
 8001c8c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c8e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	7f5b      	ldrb	r3, [r3, #29]
 8001c94:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c96:	4313      	orrs	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001ca6:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <ETH_SetDMAConfig+0x104>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	68f9      	ldr	r1, [r7, #12]
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cb6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	7f1b      	ldrb	r3, [r3, #28]
 8001cbe:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <ETH_SetDMAConfig+0x108>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	68f9      	ldr	r1, [r7, #12]
 8001cde:	430b      	orrs	r3, r1
 8001ce0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ce4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	ffff87fd 	.word	0xffff87fd
 8001cf8:	ffff2ffe 	.word	0xffff2ffe
 8001cfc:	fffec000 	.word	0xfffec000
 8001d00:	ffc0efef 	.word	0xffc0efef
 8001d04:	7fc0ffff 	.word	0x7fc0ffff

08001d08 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b0a4      	sub	sp, #144	; 0x90
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001d10:	2301      	movs	r3, #1
 8001d12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d16:	2300      	movs	r3, #0
 8001d18:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d26:	2301      	movs	r3, #1
 8001d28:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d48:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001d60:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001d64:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001d70:	2301      	movs	r3, #1
 8001d72:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001d82:	2300      	movs	r3, #0
 8001d84:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001da0:	2320      	movs	r3, #32
 8001da2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001da6:	2301      	movs	r3, #1
 8001da8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001db2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001db8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dbc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001de2:	2300      	movs	r3, #0
 8001de4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001de6:	2301      	movs	r3, #1
 8001de8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df0:	4619      	mov	r1, r3
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff fde6 	bl	80019c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e12:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e16:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e20:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001e28:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e2e:	f107 0308 	add.w	r3, r7, #8
 8001e32:	4619      	mov	r1, r3
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff fee1 	bl	8001bfc <ETH_SetDMAConfig>
}
 8001e3a:	bf00      	nop
 8001e3c:	3790      	adds	r7, #144	; 0x90
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b085      	sub	sp, #20
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	e01d      	b.n	8001e8c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68d9      	ldr	r1, [r3, #12]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	440b      	add	r3, r1
 8001e60:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2200      	movs	r2, #0
 8001e78:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e7a:	68b9      	ldr	r1, [r7, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	3206      	adds	r2, #6
 8001e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d9de      	bls.n	8001e50 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e023      	b.n	8001f2a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6919      	ldr	r1, [r3, #16]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	440b      	add	r3, r1
 8001ef2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2200      	movs	r2, #0
 8001f16:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	3212      	adds	r2, #18
 8001f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	3301      	adds	r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d9d8      	bls.n	8001ee2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f56:	461a      	mov	r2, r3
 8001f58:	2303      	movs	r3, #3
 8001f5a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f6a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f7e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f9e:	4b89      	ldr	r3, [pc, #548]	; (80021c4 <HAL_GPIO_Init+0x234>)
 8001fa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fa2:	e194      	b.n	80022ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	2101      	movs	r1, #1
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8186 	beq.w	80022c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d005      	beq.n	8001fd4 <HAL_GPIO_Init+0x44>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d130      	bne.n	8002036 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	2203      	movs	r2, #3
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800200a:	2201      	movs	r2, #1
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	f003 0201 	and.w	r2, r3, #1
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b03      	cmp	r3, #3
 8002040:	d017      	beq.n	8002072 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	2203      	movs	r2, #3
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d123      	bne.n	80020c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	08da      	lsrs	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3208      	adds	r2, #8
 8002086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	220f      	movs	r2, #15
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	691a      	ldr	r2, [r3, #16]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	08da      	lsrs	r2, r3, #3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3208      	adds	r2, #8
 80020c0:	69b9      	ldr	r1, [r7, #24]
 80020c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2203      	movs	r2, #3
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0203 	and.w	r2, r3, #3
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 80e0 	beq.w	80022c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002108:	4b2f      	ldr	r3, [pc, #188]	; (80021c8 <HAL_GPIO_Init+0x238>)
 800210a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800210e:	4a2e      	ldr	r2, [pc, #184]	; (80021c8 <HAL_GPIO_Init+0x238>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002118:	4b2b      	ldr	r3, [pc, #172]	; (80021c8 <HAL_GPIO_Init+0x238>)
 800211a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002126:	4a29      	ldr	r2, [pc, #164]	; (80021cc <HAL_GPIO_Init+0x23c>)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	3302      	adds	r3, #2
 800212e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	220f      	movs	r2, #15
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a20      	ldr	r2, [pc, #128]	; (80021d0 <HAL_GPIO_Init+0x240>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d052      	beq.n	80021f8 <HAL_GPIO_Init+0x268>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a1f      	ldr	r2, [pc, #124]	; (80021d4 <HAL_GPIO_Init+0x244>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d031      	beq.n	80021be <HAL_GPIO_Init+0x22e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a1e      	ldr	r2, [pc, #120]	; (80021d8 <HAL_GPIO_Init+0x248>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d02b      	beq.n	80021ba <HAL_GPIO_Init+0x22a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a1d      	ldr	r2, [pc, #116]	; (80021dc <HAL_GPIO_Init+0x24c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d025      	beq.n	80021b6 <HAL_GPIO_Init+0x226>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a1c      	ldr	r2, [pc, #112]	; (80021e0 <HAL_GPIO_Init+0x250>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d01f      	beq.n	80021b2 <HAL_GPIO_Init+0x222>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a1b      	ldr	r2, [pc, #108]	; (80021e4 <HAL_GPIO_Init+0x254>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d019      	beq.n	80021ae <HAL_GPIO_Init+0x21e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a1a      	ldr	r2, [pc, #104]	; (80021e8 <HAL_GPIO_Init+0x258>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d013      	beq.n	80021aa <HAL_GPIO_Init+0x21a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a19      	ldr	r2, [pc, #100]	; (80021ec <HAL_GPIO_Init+0x25c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00d      	beq.n	80021a6 <HAL_GPIO_Init+0x216>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <HAL_GPIO_Init+0x260>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d007      	beq.n	80021a2 <HAL_GPIO_Init+0x212>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <HAL_GPIO_Init+0x264>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d101      	bne.n	800219e <HAL_GPIO_Init+0x20e>
 800219a:	2309      	movs	r3, #9
 800219c:	e02d      	b.n	80021fa <HAL_GPIO_Init+0x26a>
 800219e:	230a      	movs	r3, #10
 80021a0:	e02b      	b.n	80021fa <HAL_GPIO_Init+0x26a>
 80021a2:	2308      	movs	r3, #8
 80021a4:	e029      	b.n	80021fa <HAL_GPIO_Init+0x26a>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e027      	b.n	80021fa <HAL_GPIO_Init+0x26a>
 80021aa:	2306      	movs	r3, #6
 80021ac:	e025      	b.n	80021fa <HAL_GPIO_Init+0x26a>
 80021ae:	2305      	movs	r3, #5
 80021b0:	e023      	b.n	80021fa <HAL_GPIO_Init+0x26a>
 80021b2:	2304      	movs	r3, #4
 80021b4:	e021      	b.n	80021fa <HAL_GPIO_Init+0x26a>
 80021b6:	2303      	movs	r3, #3
 80021b8:	e01f      	b.n	80021fa <HAL_GPIO_Init+0x26a>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e01d      	b.n	80021fa <HAL_GPIO_Init+0x26a>
 80021be:	2301      	movs	r3, #1
 80021c0:	e01b      	b.n	80021fa <HAL_GPIO_Init+0x26a>
 80021c2:	bf00      	nop
 80021c4:	58000080 	.word	0x58000080
 80021c8:	58024400 	.word	0x58024400
 80021cc:	58000400 	.word	0x58000400
 80021d0:	58020000 	.word	0x58020000
 80021d4:	58020400 	.word	0x58020400
 80021d8:	58020800 	.word	0x58020800
 80021dc:	58020c00 	.word	0x58020c00
 80021e0:	58021000 	.word	0x58021000
 80021e4:	58021400 	.word	0x58021400
 80021e8:	58021800 	.word	0x58021800
 80021ec:	58021c00 	.word	0x58021c00
 80021f0:	58022000 	.word	0x58022000
 80021f4:	58022400 	.word	0x58022400
 80021f8:	2300      	movs	r3, #0
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	f002 0203 	and.w	r2, r2, #3
 8002200:	0092      	lsls	r2, r2, #2
 8002202:	4093      	lsls	r3, r2
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800220a:	4938      	ldr	r1, [pc, #224]	; (80022ec <HAL_GPIO_Init+0x35c>)
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	089b      	lsrs	r3, r3, #2
 8002210:	3302      	adds	r3, #2
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800223e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800226c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4013      	ands	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	3301      	adds	r3, #1
 80022cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa22 f303 	lsr.w	r3, r2, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f47f ae63 	bne.w	8001fa4 <HAL_GPIO_Init+0x14>
  }
}
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
 80022e2:	3724      	adds	r7, #36	; 0x24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	58000400 	.word	0x58000400

080022f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
 80022fc:	4613      	mov	r3, r2
 80022fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002300:	787b      	ldrb	r3, [r7, #1]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800230c:	e003      	b.n	8002316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800230e:	887b      	ldrh	r3, [r7, #2]
 8002310:	041a      	lsls	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	619a      	str	r2, [r3, #24]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002322:	b480      	push	{r7}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002334:	887a      	ldrh	r2, [r7, #2]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4013      	ands	r3, r2
 800233a:	041a      	lsls	r2, r3, #16
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	43d9      	mvns	r1, r3
 8002340:	887b      	ldrh	r3, [r7, #2]
 8002342:	400b      	ands	r3, r1
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	619a      	str	r2, [r3, #24]
}
 800234a:	bf00      	nop
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002360:	4a08      	ldr	r2, [pc, #32]	; (8002384 <HAL_HSEM_FastTake+0x2c>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3320      	adds	r3, #32
 8002366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236a:	4a07      	ldr	r2, [pc, #28]	; (8002388 <HAL_HSEM_FastTake+0x30>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d101      	bne.n	8002374 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	e000      	b.n	8002376 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	58026400 	.word	0x58026400
 8002388:	80000300 	.word	0x80000300

0800238c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002396:	4906      	ldr	r1, [pc, #24]	; (80023b0 <HAL_HSEM_Release+0x24>)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	58026400 	.word	0x58026400

080023b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b6:	b08f      	sub	sp, #60	; 0x3c
 80023b8:	af0a      	add	r7, sp, #40	; 0x28
 80023ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e116      	b.n	80025f4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d106      	bne.n	80023e6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7fe fee5 	bl	80011b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2203      	movs	r2, #3
 80023ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f005 f8e9 	bl	80075dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	687e      	ldr	r6, [r7, #4]
 8002412:	466d      	mov	r5, sp
 8002414:	f106 0410 	add.w	r4, r6, #16
 8002418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800241a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800241c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800241e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002420:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002424:	e885 0003 	stmia.w	r5, {r0, r1}
 8002428:	1d33      	adds	r3, r6, #4
 800242a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800242c:	6838      	ldr	r0, [r7, #0]
 800242e:	f005 f867 	bl	8007500 <USB_CoreInit>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0d7      	b.n	80025f4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f005 f8d7 	bl	80075fe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002450:	2300      	movs	r3, #0
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e04a      	b.n	80024ec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002456:	7bfa      	ldrb	r2, [r7, #15]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	333d      	adds	r3, #61	; 0x3d
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	333c      	adds	r3, #60	; 0x3c
 800247a:	7bfa      	ldrb	r2, [r7, #15]
 800247c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800247e:	7bfa      	ldrb	r2, [r7, #15]
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	b298      	uxth	r0, r3
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	3344      	adds	r3, #68	; 0x44
 8002492:	4602      	mov	r2, r0
 8002494:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	3340      	adds	r3, #64	; 0x40
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	3348      	adds	r3, #72	; 0x48
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	334c      	adds	r3, #76	; 0x4c
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	3354      	adds	r3, #84	; 0x54
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	3301      	adds	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d3af      	bcc.n	8002456 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	e044      	b.n	8002586 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	3301      	adds	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	7bfa      	ldrb	r2, [r7, #15]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	429a      	cmp	r2, r3
 800258e:	d3b5      	bcc.n	80024fc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	603b      	str	r3, [r7, #0]
 8002596:	687e      	ldr	r6, [r7, #4]
 8002598:	466d      	mov	r5, sp
 800259a:	f106 0410 	add.w	r4, r6, #16
 800259e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80025ae:	1d33      	adds	r3, r6, #4
 80025b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025b2:	6838      	ldr	r0, [r7, #0]
 80025b4:	f005 f870 	bl	8007698 <USB_DevInit>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2202      	movs	r2, #2
 80025c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e014      	b.n	80025f4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d102      	bne.n	80025e8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f80a 	bl	80025fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f005 fa2e 	bl	8007a4e <USB_DevDisconnect>

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_PCDEx_ActivateLPM+0x44>)
 800262c:	4313      	orrs	r3, r2
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	10000003 	.word	0x10000003

08002644 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800264c:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	2b06      	cmp	r3, #6
 8002656:	d00a      	beq.n	800266e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002658:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	429a      	cmp	r2, r3
 8002664:	d001      	beq.n	800266a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e040      	b.n	80026ec <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	e03e      	b.n	80026ec <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800266e:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002676:	491f      	ldr	r1, [pc, #124]	; (80026f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4313      	orrs	r3, r2
 800267c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800267e:	f7fe ff03 	bl	8001488 <HAL_GetTick>
 8002682:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002684:	e009      	b.n	800269a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002686:	f7fe feff 	bl	8001488 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002694:	d901      	bls.n	800269a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e028      	b.n	80026ec <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800269a:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a6:	d1ee      	bne.n	8002686 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b1e      	cmp	r3, #30
 80026ac:	d008      	beq.n	80026c0 <HAL_PWREx_ConfigSupply+0x7c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b2e      	cmp	r3, #46	; 0x2e
 80026b2:	d005      	beq.n	80026c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b1d      	cmp	r3, #29
 80026b8:	d002      	beq.n	80026c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b2d      	cmp	r3, #45	; 0x2d
 80026be:	d114      	bne.n	80026ea <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80026c0:	f7fe fee2 	bl	8001488 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80026c6:	e009      	b.n	80026dc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80026c8:	f7fe fede 	bl	8001488 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026d6:	d901      	bls.n	80026dc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e007      	b.n	80026ec <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_PWREx_ConfigSupply+0xb0>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e8:	d1ee      	bne.n	80026c8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	58024800 	.word	0x58024800

080026f8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4a04      	ldr	r2, [pc, #16]	; (8002714 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002706:	60d3      	str	r3, [r2, #12]
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	58024800 	.word	0x58024800

08002718 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08c      	sub	sp, #48	; 0x30
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d102      	bne.n	800272c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	f000 bc1d 	b.w	8002f66 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8087 	beq.w	8002848 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800273a:	4b99      	ldr	r3, [pc, #612]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002744:	4b96      	ldr	r3, [pc, #600]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	2b10      	cmp	r3, #16
 800274e:	d007      	beq.n	8002760 <HAL_RCC_OscConfig+0x48>
 8002750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002752:	2b18      	cmp	r3, #24
 8002754:	d110      	bne.n	8002778 <HAL_RCC_OscConfig+0x60>
 8002756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d10b      	bne.n	8002778 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002760:	4b8f      	ldr	r3, [pc, #572]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d06c      	beq.n	8002846 <HAL_RCC_OscConfig+0x12e>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d168      	bne.n	8002846 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e3f6      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002780:	d106      	bne.n	8002790 <HAL_RCC_OscConfig+0x78>
 8002782:	4b87      	ldr	r3, [pc, #540]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a86      	ldr	r2, [pc, #536]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	e02e      	b.n	80027ee <HAL_RCC_OscConfig+0xd6>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10c      	bne.n	80027b2 <HAL_RCC_OscConfig+0x9a>
 8002798:	4b81      	ldr	r3, [pc, #516]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a80      	ldr	r2, [pc, #512]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 800279e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	4b7e      	ldr	r3, [pc, #504]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a7d      	ldr	r2, [pc, #500]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	e01d      	b.n	80027ee <HAL_RCC_OscConfig+0xd6>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027ba:	d10c      	bne.n	80027d6 <HAL_RCC_OscConfig+0xbe>
 80027bc:	4b78      	ldr	r3, [pc, #480]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a77      	ldr	r2, [pc, #476]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	4b75      	ldr	r3, [pc, #468]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a74      	ldr	r2, [pc, #464]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	e00b      	b.n	80027ee <HAL_RCC_OscConfig+0xd6>
 80027d6:	4b72      	ldr	r3, [pc, #456]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a71      	ldr	r2, [pc, #452]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	4b6f      	ldr	r3, [pc, #444]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a6e      	ldr	r2, [pc, #440]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 80027e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d013      	beq.n	800281e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f6:	f7fe fe47 	bl	8001488 <HAL_GetTick>
 80027fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027fe:	f7fe fe43 	bl	8001488 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b64      	cmp	r3, #100	; 0x64
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e3aa      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002810:	4b63      	ldr	r3, [pc, #396]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0xe6>
 800281c:	e014      	b.n	8002848 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7fe fe33 	bl	8001488 <HAL_GetTick>
 8002822:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002826:	f7fe fe2f 	bl	8001488 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b64      	cmp	r3, #100	; 0x64
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e396      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002838:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f0      	bne.n	8002826 <HAL_RCC_OscConfig+0x10e>
 8002844:	e000      	b.n	8002848 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002846:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80cb 	beq.w	80029ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002856:	4b52      	ldr	r3, [pc, #328]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800285e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002860:	4b4f      	ldr	r3, [pc, #316]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d007      	beq.n	800287c <HAL_RCC_OscConfig+0x164>
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	2b18      	cmp	r3, #24
 8002870:	d156      	bne.n	8002920 <HAL_RCC_OscConfig+0x208>
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d151      	bne.n	8002920 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800287c:	4b48      	ldr	r3, [pc, #288]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_RCC_OscConfig+0x17c>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e368      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002894:	4b42      	ldr	r3, [pc, #264]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 0219 	bic.w	r2, r3, #25
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	493f      	ldr	r1, [pc, #252]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028a6:	f7fe fdef 	bl	8001488 <HAL_GetTick>
 80028aa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ae:	f7fe fdeb 	bl	8001488 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e352      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028c0:	4b37      	ldr	r3, [pc, #220]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	f7fe fe0c 	bl	80014e8 <HAL_GetREVID>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f241 0203 	movw	r2, #4099	; 0x1003
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d817      	bhi.n	800290a <HAL_RCC_OscConfig+0x1f2>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	2b40      	cmp	r3, #64	; 0x40
 80028e0:	d108      	bne.n	80028f4 <HAL_RCC_OscConfig+0x1dc>
 80028e2:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80028ea:	4a2d      	ldr	r2, [pc, #180]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 80028ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028f2:	e07b      	b.n	80029ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f4:	4b2a      	ldr	r3, [pc, #168]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	031b      	lsls	r3, r3, #12
 8002902:	4927      	ldr	r1, [pc, #156]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002908:	e070      	b.n	80029ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290a:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	061b      	lsls	r3, r3, #24
 8002918:	4921      	ldr	r1, [pc, #132]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 800291a:	4313      	orrs	r3, r2
 800291c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800291e:	e065      	b.n	80029ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d048      	beq.n	80029ba <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 0219 	bic.w	r2, r3, #25
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	491a      	ldr	r1, [pc, #104]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293a:	f7fe fda5 	bl	8001488 <HAL_GetTick>
 800293e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002942:	f7fe fda1 	bl	8001488 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e308      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002960:	f7fe fdc2 	bl	80014e8 <HAL_GetREVID>
 8002964:	4603      	mov	r3, r0
 8002966:	f241 0203 	movw	r2, #4099	; 0x1003
 800296a:	4293      	cmp	r3, r2
 800296c:	d81a      	bhi.n	80029a4 <HAL_RCC_OscConfig+0x28c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	2b40      	cmp	r3, #64	; 0x40
 8002974:	d108      	bne.n	8002988 <HAL_RCC_OscConfig+0x270>
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800297e:	4a08      	ldr	r2, [pc, #32]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002984:	6053      	str	r3, [r2, #4]
 8002986:	e031      	b.n	80029ec <HAL_RCC_OscConfig+0x2d4>
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	031b      	lsls	r3, r3, #12
 8002996:	4902      	ldr	r1, [pc, #8]	; (80029a0 <HAL_RCC_OscConfig+0x288>)
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
 800299c:	e026      	b.n	80029ec <HAL_RCC_OscConfig+0x2d4>
 800299e:	bf00      	nop
 80029a0:	58024400 	.word	0x58024400
 80029a4:	4b9a      	ldr	r3, [pc, #616]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	061b      	lsls	r3, r3, #24
 80029b2:	4997      	ldr	r1, [pc, #604]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
 80029b8:	e018      	b.n	80029ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ba:	4b95      	ldr	r3, [pc, #596]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a94      	ldr	r2, [pc, #592]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c6:	f7fe fd5f 	bl	8001488 <HAL_GetTick>
 80029ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ce:	f7fe fd5b 	bl	8001488 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e2c2      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029e0:	4b8b      	ldr	r3, [pc, #556]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f0      	bne.n	80029ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80a9 	beq.w	8002b4c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029fa:	4b85      	ldr	r3, [pc, #532]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a02:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a04:	4b82      	ldr	r3, [pc, #520]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d007      	beq.n	8002a20 <HAL_RCC_OscConfig+0x308>
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	2b18      	cmp	r3, #24
 8002a14:	d13a      	bne.n	8002a8c <HAL_RCC_OscConfig+0x374>
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d135      	bne.n	8002a8c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a20:	4b7b      	ldr	r3, [pc, #492]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_OscConfig+0x320>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	2b80      	cmp	r3, #128	; 0x80
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e296      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a38:	f7fe fd56 	bl	80014e8 <HAL_GetREVID>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d817      	bhi.n	8002a76 <HAL_RCC_OscConfig+0x35e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	d108      	bne.n	8002a60 <HAL_RCC_OscConfig+0x348>
 8002a4e:	4b70      	ldr	r3, [pc, #448]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a56:	4a6e      	ldr	r2, [pc, #440]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a5c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a5e:	e075      	b.n	8002b4c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a60:	4b6b      	ldr	r3, [pc, #428]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	069b      	lsls	r3, r3, #26
 8002a6e:	4968      	ldr	r1, [pc, #416]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a74:	e06a      	b.n	8002b4c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a76:	4b66      	ldr	r3, [pc, #408]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	061b      	lsls	r3, r3, #24
 8002a84:	4962      	ldr	r1, [pc, #392]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a8a:	e05f      	b.n	8002b4c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d042      	beq.n	8002b1a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a94:	4b5e      	ldr	r3, [pc, #376]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a5d      	ldr	r2, [pc, #372]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fcf2 	bl	8001488 <HAL_GetTick>
 8002aa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002aa8:	f7fe fcee 	bl	8001488 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e255      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002aba:	4b55      	ldr	r3, [pc, #340]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ac6:	f7fe fd0f 	bl	80014e8 <HAL_GetREVID>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d817      	bhi.n	8002b04 <HAL_RCC_OscConfig+0x3ec>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	d108      	bne.n	8002aee <HAL_RCC_OscConfig+0x3d6>
 8002adc:	4b4c      	ldr	r3, [pc, #304]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002ae4:	4a4a      	ldr	r2, [pc, #296]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002ae6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002aea:	6053      	str	r3, [r2, #4]
 8002aec:	e02e      	b.n	8002b4c <HAL_RCC_OscConfig+0x434>
 8002aee:	4b48      	ldr	r3, [pc, #288]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	069b      	lsls	r3, r3, #26
 8002afc:	4944      	ldr	r1, [pc, #272]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]
 8002b02:	e023      	b.n	8002b4c <HAL_RCC_OscConfig+0x434>
 8002b04:	4b42      	ldr	r3, [pc, #264]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	061b      	lsls	r3, r3, #24
 8002b12:	493f      	ldr	r1, [pc, #252]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60cb      	str	r3, [r1, #12]
 8002b18:	e018      	b.n	8002b4c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b1a:	4b3d      	ldr	r3, [pc, #244]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a3c      	ldr	r2, [pc, #240]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002b20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b26:	f7fe fcaf 	bl	8001488 <HAL_GetTick>
 8002b2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b2e:	f7fe fcab 	bl	8001488 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e212      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b40:	4b33      	ldr	r3, [pc, #204]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f0      	bne.n	8002b2e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d036      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d019      	beq.n	8002b94 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b60:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b64:	4a2a      	ldr	r2, [pc, #168]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7fe fc8c 	bl	8001488 <HAL_GetTick>
 8002b70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b74:	f7fe fc88 	bl	8001488 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e1ef      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b86:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x45c>
 8002b92:	e018      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b94:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b98:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002b9a:	f023 0301 	bic.w	r3, r3, #1
 8002b9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7fe fc72 	bl	8001488 <HAL_GetTick>
 8002ba4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba8:	f7fe fc6e 	bl	8001488 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e1d5      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d039      	beq.n	8002c46 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01c      	beq.n	8002c14 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a0c      	ldr	r2, [pc, #48]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002be0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002be4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002be6:	f7fe fc4f 	bl	8001488 <HAL_GetTick>
 8002bea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002bee:	f7fe fc4b 	bl	8001488 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e1b2      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <HAL_RCC_OscConfig+0x4f8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x4d6>
 8002c0c:	e01b      	b.n	8002c46 <HAL_RCC_OscConfig+0x52e>
 8002c0e:	bf00      	nop
 8002c10:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c14:	4b9b      	ldr	r3, [pc, #620]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a9a      	ldr	r2, [pc, #616]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002c1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c20:	f7fe fc32 	bl	8001488 <HAL_GetTick>
 8002c24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c28:	f7fe fc2e 	bl	8001488 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e195      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c3a:	4b92      	ldr	r3, [pc, #584]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 8081 	beq.w	8002d56 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c54:	4b8c      	ldr	r3, [pc, #560]	; (8002e88 <HAL_RCC_OscConfig+0x770>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a8b      	ldr	r2, [pc, #556]	; (8002e88 <HAL_RCC_OscConfig+0x770>)
 8002c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c60:	f7fe fc12 	bl	8001488 <HAL_GetTick>
 8002c64:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c68:	f7fe fc0e 	bl	8001488 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e175      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c7a:	4b83      	ldr	r3, [pc, #524]	; (8002e88 <HAL_RCC_OscConfig+0x770>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d106      	bne.n	8002c9c <HAL_RCC_OscConfig+0x584>
 8002c8e:	4b7d      	ldr	r3, [pc, #500]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c92:	4a7c      	ldr	r2, [pc, #496]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9a:	e02d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x5e0>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10c      	bne.n	8002cbe <HAL_RCC_OscConfig+0x5a6>
 8002ca4:	4b77      	ldr	r3, [pc, #476]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca8:	4a76      	ldr	r2, [pc, #472]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb0:	4b74      	ldr	r3, [pc, #464]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	4a73      	ldr	r2, [pc, #460]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002cb6:	f023 0304 	bic.w	r3, r3, #4
 8002cba:	6713      	str	r3, [r2, #112]	; 0x70
 8002cbc:	e01c      	b.n	8002cf8 <HAL_RCC_OscConfig+0x5e0>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b05      	cmp	r3, #5
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x5c8>
 8002cc6:	4b6f      	ldr	r3, [pc, #444]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	4a6e      	ldr	r2, [pc, #440]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002ccc:	f043 0304 	orr.w	r3, r3, #4
 8002cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd2:	4b6c      	ldr	r3, [pc, #432]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	4a6b      	ldr	r2, [pc, #428]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cde:	e00b      	b.n	8002cf8 <HAL_RCC_OscConfig+0x5e0>
 8002ce0:	4b68      	ldr	r3, [pc, #416]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	4a67      	ldr	r2, [pc, #412]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002ce6:	f023 0301 	bic.w	r3, r3, #1
 8002cea:	6713      	str	r3, [r2, #112]	; 0x70
 8002cec:	4b65      	ldr	r3, [pc, #404]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	4a64      	ldr	r2, [pc, #400]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002cf2:	f023 0304 	bic.w	r3, r3, #4
 8002cf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d015      	beq.n	8002d2c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d00:	f7fe fbc2 	bl	8001488 <HAL_GetTick>
 8002d04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d08:	f7fe fbbe 	bl	8001488 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e123      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d1e:	4b59      	ldr	r3, [pc, #356]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0ee      	beq.n	8002d08 <HAL_RCC_OscConfig+0x5f0>
 8002d2a:	e014      	b.n	8002d56 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2c:	f7fe fbac 	bl	8001488 <HAL_GetTick>
 8002d30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d34:	f7fe fba8 	bl	8001488 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e10d      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d4a:	4b4e      	ldr	r3, [pc, #312]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1ee      	bne.n	8002d34 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 8102 	beq.w	8002f64 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d60:	4b48      	ldr	r3, [pc, #288]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d68:	2b18      	cmp	r3, #24
 8002d6a:	f000 80bd 	beq.w	8002ee8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	f040 809e 	bne.w	8002eb4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d78:	4b42      	ldr	r3, [pc, #264]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a41      	ldr	r2, [pc, #260]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fe fb80 	bl	8001488 <HAL_GetTick>
 8002d88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8c:	f7fe fb7c 	bl	8001488 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e0e3      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d9e:	4b39      	ldr	r3, [pc, #228]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002daa:	4b36      	ldr	r3, [pc, #216]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dae:	4b37      	ldr	r3, [pc, #220]	; (8002e8c <HAL_RCC_OscConfig+0x774>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002dba:	0112      	lsls	r2, r2, #4
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	4931      	ldr	r1, [pc, #196]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	628b      	str	r3, [r1, #40]	; 0x28
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	025b      	lsls	r3, r3, #9
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dde:	3b01      	subs	r3, #1
 8002de0:	041b      	lsls	r3, r3, #16
 8002de2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dec:	3b01      	subs	r3, #1
 8002dee:	061b      	lsls	r3, r3, #24
 8002df0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002df4:	4923      	ldr	r1, [pc, #140]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002dfa:	4b22      	ldr	r3, [pc, #136]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	4a21      	ldr	r2, [pc, #132]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e06:	4b1f      	ldr	r3, [pc, #124]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e0a:	4b21      	ldr	r3, [pc, #132]	; (8002e90 <HAL_RCC_OscConfig+0x778>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e12:	00d2      	lsls	r2, r2, #3
 8002e14:	491b      	ldr	r1, [pc, #108]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1e:	f023 020c 	bic.w	r2, r3, #12
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4917      	ldr	r1, [pc, #92]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e2c:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	f023 0202 	bic.w	r2, r3, #2
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e38:	4912      	ldr	r1, [pc, #72]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e42:	4a10      	ldr	r2, [pc, #64]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	4a0d      	ldr	r2, [pc, #52]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e56:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	4a07      	ldr	r2, [pc, #28]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a04      	ldr	r2, [pc, #16]	; (8002e84 <HAL_RCC_OscConfig+0x76c>)
 8002e74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7a:	f7fe fb05 	bl	8001488 <HAL_GetTick>
 8002e7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e80:	e011      	b.n	8002ea6 <HAL_RCC_OscConfig+0x78e>
 8002e82:	bf00      	nop
 8002e84:	58024400 	.word	0x58024400
 8002e88:	58024800 	.word	0x58024800
 8002e8c:	fffffc0c 	.word	0xfffffc0c
 8002e90:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e94:	f7fe faf8 	bl	8001488 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e05f      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ea6:	4b32      	ldr	r3, [pc, #200]	; (8002f70 <HAL_RCC_OscConfig+0x858>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0f0      	beq.n	8002e94 <HAL_RCC_OscConfig+0x77c>
 8002eb2:	e057      	b.n	8002f64 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb4:	4b2e      	ldr	r3, [pc, #184]	; (8002f70 <HAL_RCC_OscConfig+0x858>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a2d      	ldr	r2, [pc, #180]	; (8002f70 <HAL_RCC_OscConfig+0x858>)
 8002eba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fae2 	bl	8001488 <HAL_GetTick>
 8002ec4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7fe fade 	bl	8001488 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e045      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eda:	4b25      	ldr	r3, [pc, #148]	; (8002f70 <HAL_RCC_OscConfig+0x858>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x7b0>
 8002ee6:	e03d      	b.n	8002f64 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ee8:	4b21      	ldr	r3, [pc, #132]	; (8002f70 <HAL_RCC_OscConfig+0x858>)
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002eee:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <HAL_RCC_OscConfig+0x858>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d031      	beq.n	8002f60 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f003 0203 	and.w	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d12a      	bne.n	8002f60 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d122      	bne.n	8002f60 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d11a      	bne.n	8002f60 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	0a5b      	lsrs	r3, r3, #9
 8002f2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f36:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d111      	bne.n	8002f60 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	0c1b      	lsrs	r3, r3, #16
 8002f40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d108      	bne.n	8002f60 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	0e1b      	lsrs	r3, r3, #24
 8002f52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3730      	adds	r7, #48	; 0x30
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	58024400 	.word	0x58024400

08002f74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e19c      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	4b8a      	ldr	r3, [pc, #552]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d910      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b87      	ldr	r3, [pc, #540]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 020f 	bic.w	r2, r3, #15
 8002f9e:	4985      	ldr	r1, [pc, #532]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b83      	ldr	r3, [pc, #524]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e184      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d010      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	4b7b      	ldr	r3, [pc, #492]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d908      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fd4:	4b78      	ldr	r3, [pc, #480]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	4975      	ldr	r1, [pc, #468]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d010      	beq.n	8003014 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	4b70      	ldr	r3, [pc, #448]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d908      	bls.n	8003014 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003002:	4b6d      	ldr	r3, [pc, #436]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	496a      	ldr	r1, [pc, #424]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003010:	4313      	orrs	r3, r2
 8003012:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	d010      	beq.n	8003042 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699a      	ldr	r2, [r3, #24]
 8003024:	4b64      	ldr	r3, [pc, #400]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800302c:	429a      	cmp	r2, r3
 800302e:	d908      	bls.n	8003042 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003030:	4b61      	ldr	r3, [pc, #388]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	495e      	ldr	r1, [pc, #376]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 800303e:	4313      	orrs	r3, r2
 8003040:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b00      	cmp	r3, #0
 800304c:	d010      	beq.n	8003070 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69da      	ldr	r2, [r3, #28]
 8003052:	4b59      	ldr	r3, [pc, #356]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800305a:	429a      	cmp	r2, r3
 800305c:	d908      	bls.n	8003070 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800305e:	4b56      	ldr	r3, [pc, #344]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	4953      	ldr	r1, [pc, #332]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 800306c:	4313      	orrs	r3, r2
 800306e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d010      	beq.n	800309e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	4b4d      	ldr	r3, [pc, #308]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	429a      	cmp	r2, r3
 800308a:	d908      	bls.n	800309e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308c:	4b4a      	ldr	r3, [pc, #296]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f023 020f 	bic.w	r2, r3, #15
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4947      	ldr	r1, [pc, #284]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 800309a:	4313      	orrs	r3, r2
 800309c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d055      	beq.n	8003156 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80030aa:	4b43      	ldr	r3, [pc, #268]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	4940      	ldr	r1, [pc, #256]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d107      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030c4:	4b3c      	ldr	r3, [pc, #240]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d121      	bne.n	8003114 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0f6      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d107      	bne.n	80030ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030dc:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d115      	bne.n	8003114 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0ea      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d107      	bne.n	8003104 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030f4:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d109      	bne.n	8003114 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0de      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003104:	4b2c      	ldr	r3, [pc, #176]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0d6      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003114:	4b28      	ldr	r3, [pc, #160]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f023 0207 	bic.w	r2, r3, #7
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4925      	ldr	r1, [pc, #148]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003122:	4313      	orrs	r3, r2
 8003124:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003126:	f7fe f9af 	bl	8001488 <HAL_GetTick>
 800312a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312c:	e00a      	b.n	8003144 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312e:	f7fe f9ab 	bl	8001488 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	f241 3288 	movw	r2, #5000	; 0x1388
 800313c:	4293      	cmp	r3, r2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e0be      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003144:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	429a      	cmp	r2, r3
 8003154:	d1eb      	bne.n	800312e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d010      	beq.n	8003184 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	429a      	cmp	r2, r3
 8003170:	d208      	bcs.n	8003184 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f023 020f 	bic.w	r2, r3, #15
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	490e      	ldr	r1, [pc, #56]	; (80031b8 <HAL_RCC_ClockConfig+0x244>)
 8003180:	4313      	orrs	r3, r2
 8003182:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d214      	bcs.n	80031bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 020f 	bic.w	r2, r3, #15
 800319a:	4906      	ldr	r1, [pc, #24]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	4313      	orrs	r3, r2
 80031a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b04      	ldr	r3, [pc, #16]	; (80031b4 <HAL_RCC_ClockConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e086      	b.n	80032c2 <HAL_RCC_ClockConfig+0x34e>
 80031b4:	52002000 	.word	0x52002000
 80031b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d010      	beq.n	80031ea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	4b3f      	ldr	r3, [pc, #252]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d208      	bcs.n	80031ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031d8:	4b3c      	ldr	r3, [pc, #240]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	4939      	ldr	r1, [pc, #228]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d010      	beq.n	8003218 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	4b34      	ldr	r3, [pc, #208]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003202:	429a      	cmp	r2, r3
 8003204:	d208      	bcs.n	8003218 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003206:	4b31      	ldr	r3, [pc, #196]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	492e      	ldr	r1, [pc, #184]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003214:	4313      	orrs	r3, r2
 8003216:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b00      	cmp	r3, #0
 8003222:	d010      	beq.n	8003246 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699a      	ldr	r2, [r3, #24]
 8003228:	4b28      	ldr	r3, [pc, #160]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003230:	429a      	cmp	r2, r3
 8003232:	d208      	bcs.n	8003246 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003234:	4b25      	ldr	r3, [pc, #148]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	4922      	ldr	r1, [pc, #136]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003242:	4313      	orrs	r3, r2
 8003244:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d010      	beq.n	8003274 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69da      	ldr	r2, [r3, #28]
 8003256:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800325e:	429a      	cmp	r2, r3
 8003260:	d208      	bcs.n	8003274 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	4917      	ldr	r1, [pc, #92]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003270:	4313      	orrs	r3, r2
 8003272:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003274:	f000 f834 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b14      	ldr	r3, [pc, #80]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	4912      	ldr	r1, [pc, #72]	; (80032d0 <HAL_RCC_ClockConfig+0x35c>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
 8003290:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <HAL_RCC_ClockConfig+0x358>)
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <HAL_RCC_ClockConfig+0x35c>)
 800329c:	5cd3      	ldrb	r3, [r2, r3]
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	fa22 f303 	lsr.w	r3, r2, r3
 80032a8:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <HAL_RCC_ClockConfig+0x360>)
 80032aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032ac:	4a0a      	ldr	r2, [pc, #40]	; (80032d8 <HAL_RCC_ClockConfig+0x364>)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <HAL_RCC_ClockConfig+0x368>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe f89c 	bl	80013f4 <HAL_InitTick>
 80032bc:	4603      	mov	r3, r0
 80032be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	58024400 	.word	0x58024400
 80032d0:	08007b84 	.word	0x08007b84
 80032d4:	24000004 	.word	0x24000004
 80032d8:	24000000 	.word	0x24000000
 80032dc:	24000008 	.word	0x24000008

080032e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b089      	sub	sp, #36	; 0x24
 80032e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032e6:	4bb3      	ldr	r3, [pc, #716]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032ee:	2b18      	cmp	r3, #24
 80032f0:	f200 8155 	bhi.w	800359e <HAL_RCC_GetSysClockFreq+0x2be>
 80032f4:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80032f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fa:	bf00      	nop
 80032fc:	08003361 	.word	0x08003361
 8003300:	0800359f 	.word	0x0800359f
 8003304:	0800359f 	.word	0x0800359f
 8003308:	0800359f 	.word	0x0800359f
 800330c:	0800359f 	.word	0x0800359f
 8003310:	0800359f 	.word	0x0800359f
 8003314:	0800359f 	.word	0x0800359f
 8003318:	0800359f 	.word	0x0800359f
 800331c:	08003387 	.word	0x08003387
 8003320:	0800359f 	.word	0x0800359f
 8003324:	0800359f 	.word	0x0800359f
 8003328:	0800359f 	.word	0x0800359f
 800332c:	0800359f 	.word	0x0800359f
 8003330:	0800359f 	.word	0x0800359f
 8003334:	0800359f 	.word	0x0800359f
 8003338:	0800359f 	.word	0x0800359f
 800333c:	0800338d 	.word	0x0800338d
 8003340:	0800359f 	.word	0x0800359f
 8003344:	0800359f 	.word	0x0800359f
 8003348:	0800359f 	.word	0x0800359f
 800334c:	0800359f 	.word	0x0800359f
 8003350:	0800359f 	.word	0x0800359f
 8003354:	0800359f 	.word	0x0800359f
 8003358:	0800359f 	.word	0x0800359f
 800335c:	08003393 	.word	0x08003393
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003360:	4b94      	ldr	r3, [pc, #592]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b00      	cmp	r3, #0
 800336a:	d009      	beq.n	8003380 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800336c:	4b91      	ldr	r3, [pc, #580]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	08db      	lsrs	r3, r3, #3
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	4a90      	ldr	r2, [pc, #576]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
 800337c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800337e:	e111      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003380:	4b8d      	ldr	r3, [pc, #564]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003382:	61bb      	str	r3, [r7, #24]
    break;
 8003384:	e10e      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003386:	4b8d      	ldr	r3, [pc, #564]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003388:	61bb      	str	r3, [r7, #24]
    break;
 800338a:	e10b      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800338c:	4b8c      	ldr	r3, [pc, #560]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800338e:	61bb      	str	r3, [r7, #24]
    break;
 8003390:	e108      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003392:	4b88      	ldr	r3, [pc, #544]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800339c:	4b85      	ldr	r3, [pc, #532]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033a8:	4b82      	ldr	r3, [pc, #520]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80033b2:	4b80      	ldr	r3, [pc, #512]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b6:	08db      	lsrs	r3, r3, #3
 80033b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	ee07 3a90 	vmov	s15, r3
 80033c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80e1 	beq.w	8003598 <HAL_RCC_GetSysClockFreq+0x2b8>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b02      	cmp	r3, #2
 80033da:	f000 8083 	beq.w	80034e4 <HAL_RCC_GetSysClockFreq+0x204>
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	f200 80a1 	bhi.w	8003528 <HAL_RCC_GetSysClockFreq+0x248>
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0x114>
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d056      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80033f2:	e099      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033f4:	4b6f      	ldr	r3, [pc, #444]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d02d      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003400:	4b6c      	ldr	r3, [pc, #432]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	08db      	lsrs	r3, r3, #3
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	4a6b      	ldr	r2, [pc, #428]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
 8003410:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	ee07 3a90 	vmov	s15, r3
 8003418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800342a:	4b62      	ldr	r3, [pc, #392]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800343a:	ed97 6a02 	vldr	s12, [r7, #8]
 800343e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80035c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800344a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800344e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003456:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800345a:	e087      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003466:	eddf 6a58 	vldr	s13, [pc, #352]	; 80035c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800346a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800346e:	4b51      	ldr	r3, [pc, #324]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003476:	ee07 3a90 	vmov	s15, r3
 800347a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800347e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003482:	eddf 5a50 	vldr	s11, [pc, #320]	; 80035c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800348a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800348e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800349e:	e065      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80035cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80034ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034b2:	4b40      	ldr	r3, [pc, #256]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ba:	ee07 3a90 	vmov	s15, r3
 80034be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80035c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034e2:	e043      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80035d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80034f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034f6:	4b2f      	ldr	r3, [pc, #188]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034fe:	ee07 3a90 	vmov	s15, r3
 8003502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003506:	ed97 6a02 	vldr	s12, [r7, #8]
 800350a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80035c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800350e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800351a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800351e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003526:	e021      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003532:	eddf 6a26 	vldr	s13, [pc, #152]	; 80035cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800353a:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003542:	ee07 3a90 	vmov	s15, r3
 8003546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800354a:	ed97 6a02 	vldr	s12, [r7, #8]
 800354e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80035c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800355a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800355e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800356a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800356c:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	0a5b      	lsrs	r3, r3, #9
 8003572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003576:	3301      	adds	r3, #1
 8003578:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	ee07 3a90 	vmov	s15, r3
 8003580:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003584:	edd7 6a07 	vldr	s13, [r7, #28]
 8003588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800358c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003590:	ee17 3a90 	vmov	r3, s15
 8003594:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003596:	e005      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	61bb      	str	r3, [r7, #24]
    break;
 800359c:	e002      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800359e:	4b07      	ldr	r3, [pc, #28]	; (80035bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035a0:	61bb      	str	r3, [r7, #24]
    break;
 80035a2:	bf00      	nop
  }

  return sysclockfreq;
 80035a4:	69bb      	ldr	r3, [r7, #24]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3724      	adds	r7, #36	; 0x24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	58024400 	.word	0x58024400
 80035b8:	03d09000 	.word	0x03d09000
 80035bc:	003d0900 	.word	0x003d0900
 80035c0:	007a1200 	.word	0x007a1200
 80035c4:	46000000 	.word	0x46000000
 80035c8:	4c742400 	.word	0x4c742400
 80035cc:	4a742400 	.word	0x4a742400
 80035d0:	4af42400 	.word	0x4af42400

080035d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035da:	f7ff fe81 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 80035de:	4602      	mov	r2, r0
 80035e0:	4b10      	ldr	r3, [pc, #64]	; (8003624 <HAL_RCC_GetHCLKFreq+0x50>)
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	0a1b      	lsrs	r3, r3, #8
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	490f      	ldr	r1, [pc, #60]	; (8003628 <HAL_RCC_GetHCLKFreq+0x54>)
 80035ec:	5ccb      	ldrb	r3, [r1, r3]
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	fa22 f303 	lsr.w	r3, r2, r3
 80035f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035f8:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <HAL_RCC_GetHCLKFreq+0x50>)
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f003 030f 	and.w	r3, r3, #15
 8003600:	4a09      	ldr	r2, [pc, #36]	; (8003628 <HAL_RCC_GetHCLKFreq+0x54>)
 8003602:	5cd3      	ldrb	r3, [r2, r3]
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	fa22 f303 	lsr.w	r3, r2, r3
 800360e:	4a07      	ldr	r2, [pc, #28]	; (800362c <HAL_RCC_GetHCLKFreq+0x58>)
 8003610:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003612:	4a07      	ldr	r2, [pc, #28]	; (8003630 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003618:	4b04      	ldr	r3, [pc, #16]	; (800362c <HAL_RCC_GetHCLKFreq+0x58>)
 800361a:	681b      	ldr	r3, [r3, #0]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	58024400 	.word	0x58024400
 8003628:	08007b84 	.word	0x08007b84
 800362c:	24000004 	.word	0x24000004
 8003630:	24000000 	.word	0x24000000

08003634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003638:	f7ff ffcc 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 800363c:	4602      	mov	r2, r0
 800363e:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	4904      	ldr	r1, [pc, #16]	; (800365c <HAL_RCC_GetPCLK1Freq+0x28>)
 800364a:	5ccb      	ldrb	r3, [r1, r3]
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}
 8003658:	58024400 	.word	0x58024400
 800365c:	08007b84 	.word	0x08007b84

08003660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003664:	f7ff ffb6 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 8003668:	4602      	mov	r2, r0
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <HAL_RCC_GetPCLK2Freq+0x24>)
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	4904      	ldr	r1, [pc, #16]	; (8003688 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003676:	5ccb      	ldrb	r3, [r1, r3]
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003680:	4618      	mov	r0, r3
 8003682:	bd80      	pop	{r7, pc}
 8003684:	58024400 	.word	0x58024400
 8003688:	08007b84 	.word	0x08007b84

0800368c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003694:	2300      	movs	r3, #0
 8003696:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003698:	2300      	movs	r3, #0
 800369a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d03f      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036b0:	d02a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036b6:	d824      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036bc:	d018      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036c2:	d81e      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036cc:	d007      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036ce:	e018      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d0:	4ba3      	ldr	r3, [pc, #652]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	4aa2      	ldr	r2, [pc, #648]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036dc:	e015      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3304      	adds	r3, #4
 80036e2:	2102      	movs	r1, #2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f001 f9d5 	bl	8004a94 <RCCEx_PLL2_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036ee:	e00c      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3324      	adds	r3, #36	; 0x24
 80036f4:	2102      	movs	r1, #2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f001 fa7e 	bl	8004bf8 <RCCEx_PLL3_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003700:	e003      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	75fb      	strb	r3, [r7, #23]
      break;
 8003706:	e000      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003708:	bf00      	nop
    }

    if(ret == HAL_OK)
 800370a:	7dfb      	ldrb	r3, [r7, #23]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d109      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003710:	4b93      	ldr	r3, [pc, #588]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003714:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800371c:	4990      	ldr	r1, [pc, #576]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800371e:	4313      	orrs	r3, r2
 8003720:	650b      	str	r3, [r1, #80]	; 0x50
 8003722:	e001      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003724:	7dfb      	ldrb	r3, [r7, #23]
 8003726:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d03d      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	2b04      	cmp	r3, #4
 800373a:	d826      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800373c:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800373e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003742:	bf00      	nop
 8003744:	08003759 	.word	0x08003759
 8003748:	08003767 	.word	0x08003767
 800374c:	08003779 	.word	0x08003779
 8003750:	08003791 	.word	0x08003791
 8003754:	08003791 	.word	0x08003791
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003758:	4b81      	ldr	r3, [pc, #516]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	4a80      	ldr	r2, [pc, #512]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800375e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003762:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003764:	e015      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3304      	adds	r3, #4
 800376a:	2100      	movs	r1, #0
 800376c:	4618      	mov	r0, r3
 800376e:	f001 f991 	bl	8004a94 <RCCEx_PLL2_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003776:	e00c      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3324      	adds	r3, #36	; 0x24
 800377c:	2100      	movs	r1, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f001 fa3a 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003784:	4603      	mov	r3, r0
 8003786:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003788:	e003      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	75fb      	strb	r3, [r7, #23]
      break;
 800378e:	e000      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003790:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003792:	7dfb      	ldrb	r3, [r7, #23]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d109      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003798:	4b71      	ldr	r3, [pc, #452]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800379a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379c:	f023 0207 	bic.w	r2, r3, #7
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a4:	496e      	ldr	r1, [pc, #440]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	650b      	str	r3, [r1, #80]	; 0x50
 80037aa:	e001      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d042      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c4:	d02b      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80037c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ca:	d825      	bhi.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80037cc:	2bc0      	cmp	r3, #192	; 0xc0
 80037ce:	d028      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80037d0:	2bc0      	cmp	r3, #192	; 0xc0
 80037d2:	d821      	bhi.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80037d4:	2b80      	cmp	r3, #128	; 0x80
 80037d6:	d016      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80037d8:	2b80      	cmp	r3, #128	; 0x80
 80037da:	d81d      	bhi.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d007      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80037e4:	e018      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e6:	4b5e      	ldr	r3, [pc, #376]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	4a5d      	ldr	r2, [pc, #372]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037f2:	e017      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3304      	adds	r3, #4
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 f94a 	bl	8004a94 <RCCEx_PLL2_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003804:	e00e      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3324      	adds	r3, #36	; 0x24
 800380a:	2100      	movs	r1, #0
 800380c:	4618      	mov	r0, r3
 800380e:	f001 f9f3 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003812:	4603      	mov	r3, r0
 8003814:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003816:	e005      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	75fb      	strb	r3, [r7, #23]
      break;
 800381c:	e002      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800381e:	bf00      	nop
 8003820:	e000      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003824:	7dfb      	ldrb	r3, [r7, #23]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800382a:	4b4d      	ldr	r3, [pc, #308]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800382c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003836:	494a      	ldr	r1, [pc, #296]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003838:	4313      	orrs	r3, r2
 800383a:	650b      	str	r3, [r1, #80]	; 0x50
 800383c:	e001      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800383e:	7dfb      	ldrb	r3, [r7, #23]
 8003840:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384a:	2b00      	cmp	r3, #0
 800384c:	d049      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003854:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003858:	d030      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800385a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800385e:	d82a      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003860:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003864:	d02c      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003866:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800386a:	d824      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800386c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003870:	d018      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003876:	d81e      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800387c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003880:	d007      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003882:	e018      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003884:	4b36      	ldr	r3, [pc, #216]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	4a35      	ldr	r2, [pc, #212]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800388a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800388e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003890:	e017      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3304      	adds	r3, #4
 8003896:	2100      	movs	r1, #0
 8003898:	4618      	mov	r0, r3
 800389a:	f001 f8fb 	bl	8004a94 <RCCEx_PLL2_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80038a2:	e00e      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3324      	adds	r3, #36	; 0x24
 80038a8:	2100      	movs	r1, #0
 80038aa:	4618      	mov	r0, r3
 80038ac:	f001 f9a4 	bl	8004bf8 <RCCEx_PLL3_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038b4:	e005      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	75fb      	strb	r3, [r7, #23]
      break;
 80038ba:	e002      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80038bc:	bf00      	nop
 80038be:	e000      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80038c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038c2:	7dfb      	ldrb	r3, [r7, #23]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80038c8:	4b25      	ldr	r3, [pc, #148]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038cc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038d6:	4922      	ldr	r1, [pc, #136]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	658b      	str	r3, [r1, #88]	; 0x58
 80038dc:	e001      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038de:	7dfb      	ldrb	r3, [r7, #23]
 80038e0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d04b      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038f8:	d030      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80038fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038fe:	d82a      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003900:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003904:	d02e      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003906:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800390a:	d824      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800390c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003910:	d018      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003912:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003916:	d81e      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800391c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003920:	d007      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003922:	e018      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003924:	4b0e      	ldr	r3, [pc, #56]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	4a0d      	ldr	r2, [pc, #52]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800392a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800392e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003930:	e019      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3304      	adds	r3, #4
 8003936:	2100      	movs	r1, #0
 8003938:	4618      	mov	r0, r3
 800393a:	f001 f8ab 	bl	8004a94 <RCCEx_PLL2_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003942:	e010      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3324      	adds	r3, #36	; 0x24
 8003948:	2100      	movs	r1, #0
 800394a:	4618      	mov	r0, r3
 800394c:	f001 f954 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003954:	e007      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	75fb      	strb	r3, [r7, #23]
      break;
 800395a:	e004      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800395c:	bf00      	nop
 800395e:	e002      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003960:	58024400 	.word	0x58024400
      break;
 8003964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003966:	7dfb      	ldrb	r3, [r7, #23]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10a      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800396c:	4b99      	ldr	r3, [pc, #612]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800396e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003970:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800397a:	4996      	ldr	r1, [pc, #600]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800397c:	4313      	orrs	r3, r2
 800397e:	658b      	str	r3, [r1, #88]	; 0x58
 8003980:	e001      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003982:	7dfb      	ldrb	r3, [r7, #23]
 8003984:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d032      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003996:	2b30      	cmp	r3, #48	; 0x30
 8003998:	d01c      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800399a:	2b30      	cmp	r3, #48	; 0x30
 800399c:	d817      	bhi.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x342>
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d00c      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x330>
 80039a2:	2b20      	cmp	r3, #32
 80039a4:	d813      	bhi.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x342>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d016      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80039aa:	2b10      	cmp	r3, #16
 80039ac:	d10f      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ae:	4b89      	ldr	r3, [pc, #548]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	4a88      	ldr	r2, [pc, #544]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80039ba:	e00e      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3304      	adds	r3, #4
 80039c0:	2102      	movs	r1, #2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f001 f866 	bl	8004a94 <RCCEx_PLL2_Config>
 80039c8:	4603      	mov	r3, r0
 80039ca:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80039cc:	e005      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	75fb      	strb	r3, [r7, #23]
      break;
 80039d2:	e002      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80039d4:	bf00      	nop
 80039d6:	e000      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80039d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039da:	7dfb      	ldrb	r3, [r7, #23]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d109      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039e0:	4b7c      	ldr	r3, [pc, #496]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ec:	4979      	ldr	r1, [pc, #484]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80039f2:	e001      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
 80039f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d047      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a0c:	d030      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003a0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a12:	d82a      	bhi.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003a14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a18:	d02c      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003a1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a1e:	d824      	bhi.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a24:	d018      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2a:	d81e      	bhi.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a34:	d007      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003a36:	e018      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a38:	4b66      	ldr	r3, [pc, #408]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	4a65      	ldr	r2, [pc, #404]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a44:	e017      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f001 f821 	bl	8004a94 <RCCEx_PLL2_Config>
 8003a52:	4603      	mov	r3, r0
 8003a54:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a56:	e00e      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3324      	adds	r3, #36	; 0x24
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f001 f8ca 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a68:	e005      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a6e:	e002      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003a70:	bf00      	nop
 8003a72:	e000      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d109      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a7c:	4b55      	ldr	r3, [pc, #340]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a80:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a88:	4952      	ldr	r1, [pc, #328]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	650b      	str	r3, [r1, #80]	; 0x50
 8003a8e:	e001      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d049      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa8:	d02e      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003aaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aae:	d828      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003ab0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ab4:	d02a      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003ab6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aba:	d822      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003abc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ac0:	d026      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003ac2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ac6:	d81c      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003ac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003acc:	d010      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003ace:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ad2:	d816      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01d      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003adc:	d111      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 ffd5 	bl	8004a94 <RCCEx_PLL2_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003aee:	e012      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3324      	adds	r3, #36	; 0x24
 8003af4:	2101      	movs	r1, #1
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 f87e 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b00:	e009      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	75fb      	strb	r3, [r7, #23]
      break;
 8003b06:	e006      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003b08:	bf00      	nop
 8003b0a:	e004      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003b0c:	bf00      	nop
 8003b0e:	e002      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003b10:	bf00      	nop
 8003b12:	e000      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003b14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d109      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b1c:	4b2d      	ldr	r3, [pc, #180]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b20:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b28:	492a      	ldr	r1, [pc, #168]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	650b      	str	r3, [r1, #80]	; 0x50
 8003b2e:	e001      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b30:	7dfb      	ldrb	r3, [r7, #23]
 8003b32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d04d      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b4a:	d02e      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b50:	d828      	bhi.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b56:	d02a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5c:	d822      	bhi.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003b5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b62:	d026      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003b64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b68:	d81c      	bhi.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b6e:	d010      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b74:	d816      	bhi.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d01d      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003b7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b7e:	d111      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3304      	adds	r3, #4
 8003b84:	2101      	movs	r1, #1
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 ff84 	bl	8004a94 <RCCEx_PLL2_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b90:	e012      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3324      	adds	r3, #36	; 0x24
 8003b96:	2101      	movs	r1, #1
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f001 f82d 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ba2:	e009      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba8:	e006      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003baa:	bf00      	nop
 8003bac:	e004      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003bae:	bf00      	nop
 8003bb0:	e002      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e000      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003bb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bcc:	4901      	ldr	r1, [pc, #4]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	658b      	str	r3, [r1, #88]	; 0x58
 8003bd2:	e003      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003bd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd8:	7dfb      	ldrb	r3, [r7, #23]
 8003bda:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d02f      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bf0:	d00e      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bf6:	d814      	bhi.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d015      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003bfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c00:	d10f      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c02:	4baf      	ldr	r3, [pc, #700]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	4aae      	ldr	r2, [pc, #696]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c0e:	e00c      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3304      	adds	r3, #4
 8003c14:	2101      	movs	r1, #1
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 ff3c 	bl	8004a94 <RCCEx_PLL2_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c20:	e003      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	75fb      	strb	r3, [r7, #23]
      break;
 8003c26:	e000      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c2a:	7dfb      	ldrb	r3, [r7, #23]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d109      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c30:	4ba3      	ldr	r3, [pc, #652]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c34:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c3c:	49a0      	ldr	r1, [pc, #640]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	650b      	str	r3, [r1, #80]	; 0x50
 8003c42:	e001      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
 8003c46:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d032      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d81b      	bhi.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003c5c:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003c9b 	.word	0x08003c9b
 8003c68:	08003c75 	.word	0x08003c75
 8003c6c:	08003c83 	.word	0x08003c83
 8003c70:	08003c9b 	.word	0x08003c9b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c74:	4b92      	ldr	r3, [pc, #584]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	4a91      	ldr	r2, [pc, #580]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c80:	e00c      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3304      	adds	r3, #4
 8003c86:	2102      	movs	r1, #2
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 ff03 	bl	8004a94 <RCCEx_PLL2_Config>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c92:	e003      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	75fb      	strb	r3, [r7, #23]
      break;
 8003c98:	e000      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003c9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ca2:	4b87      	ldr	r3, [pc, #540]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca6:	f023 0203 	bic.w	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	4984      	ldr	r1, [pc, #528]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cb4:	e001      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb6:	7dfb      	ldrb	r3, [r7, #23]
 8003cb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 8086 	beq.w	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cc8:	4b7e      	ldr	r3, [pc, #504]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a7d      	ldr	r2, [pc, #500]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cd4:	f7fd fbd8 	bl	8001488 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cda:	e009      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cdc:	f7fd fbd4 	bl	8001488 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	; 0x64
 8003ce8:	d902      	bls.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	75fb      	strb	r3, [r7, #23]
        break;
 8003cee:	e005      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cf0:	4b74      	ldr	r3, [pc, #464]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0ef      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d166      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d02:	4b6f      	ldr	r3, [pc, #444]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d0c:	4053      	eors	r3, r2
 8003d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d013      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d16:	4b6a      	ldr	r3, [pc, #424]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d1e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d20:	4b67      	ldr	r3, [pc, #412]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d24:	4a66      	ldr	r2, [pc, #408]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d2c:	4b64      	ldr	r3, [pc, #400]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	4a63      	ldr	r2, [pc, #396]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d36:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d38:	4a61      	ldr	r2, [pc, #388]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d48:	d115      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4a:	f7fd fb9d 	bl	8001488 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d50:	e00b      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d52:	f7fd fb99 	bl	8001488 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d902      	bls.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	75fb      	strb	r3, [r7, #23]
            break;
 8003d68:	e005      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d6a:	4b55      	ldr	r3, [pc, #340]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0ed      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d126      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d8a:	d10d      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003d8c:	4b4c      	ldr	r3, [pc, #304]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d9a:	0919      	lsrs	r1, r3, #4
 8003d9c:	4b4a      	ldr	r3, [pc, #296]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003d9e:	400b      	ands	r3, r1
 8003da0:	4947      	ldr	r1, [pc, #284]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	610b      	str	r3, [r1, #16]
 8003da6:	e005      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003da8:	4b45      	ldr	r3, [pc, #276]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	4a44      	ldr	r2, [pc, #272]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003db2:	6113      	str	r3, [r2, #16]
 8003db4:	4b42      	ldr	r3, [pc, #264]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003db6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc2:	493f      	ldr	r1, [pc, #252]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	670b      	str	r3, [r1, #112]	; 0x70
 8003dc8:	e004      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dca:	7dfb      	ldrb	r3, [r7, #23]
 8003dcc:	75bb      	strb	r3, [r7, #22]
 8003dce:	e001      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
 8003dd2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8085 	beq.w	8003eec <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003de6:	2b28      	cmp	r3, #40	; 0x28
 8003de8:	d866      	bhi.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003dea:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003ecd 	.word	0x08003ecd
 8003df4:	08003eb9 	.word	0x08003eb9
 8003df8:	08003eb9 	.word	0x08003eb9
 8003dfc:	08003eb9 	.word	0x08003eb9
 8003e00:	08003eb9 	.word	0x08003eb9
 8003e04:	08003eb9 	.word	0x08003eb9
 8003e08:	08003eb9 	.word	0x08003eb9
 8003e0c:	08003eb9 	.word	0x08003eb9
 8003e10:	08003e95 	.word	0x08003e95
 8003e14:	08003eb9 	.word	0x08003eb9
 8003e18:	08003eb9 	.word	0x08003eb9
 8003e1c:	08003eb9 	.word	0x08003eb9
 8003e20:	08003eb9 	.word	0x08003eb9
 8003e24:	08003eb9 	.word	0x08003eb9
 8003e28:	08003eb9 	.word	0x08003eb9
 8003e2c:	08003eb9 	.word	0x08003eb9
 8003e30:	08003ea7 	.word	0x08003ea7
 8003e34:	08003eb9 	.word	0x08003eb9
 8003e38:	08003eb9 	.word	0x08003eb9
 8003e3c:	08003eb9 	.word	0x08003eb9
 8003e40:	08003eb9 	.word	0x08003eb9
 8003e44:	08003eb9 	.word	0x08003eb9
 8003e48:	08003eb9 	.word	0x08003eb9
 8003e4c:	08003eb9 	.word	0x08003eb9
 8003e50:	08003ecd 	.word	0x08003ecd
 8003e54:	08003eb9 	.word	0x08003eb9
 8003e58:	08003eb9 	.word	0x08003eb9
 8003e5c:	08003eb9 	.word	0x08003eb9
 8003e60:	08003eb9 	.word	0x08003eb9
 8003e64:	08003eb9 	.word	0x08003eb9
 8003e68:	08003eb9 	.word	0x08003eb9
 8003e6c:	08003eb9 	.word	0x08003eb9
 8003e70:	08003ecd 	.word	0x08003ecd
 8003e74:	08003eb9 	.word	0x08003eb9
 8003e78:	08003eb9 	.word	0x08003eb9
 8003e7c:	08003eb9 	.word	0x08003eb9
 8003e80:	08003eb9 	.word	0x08003eb9
 8003e84:	08003eb9 	.word	0x08003eb9
 8003e88:	08003eb9 	.word	0x08003eb9
 8003e8c:	08003eb9 	.word	0x08003eb9
 8003e90:	08003ecd 	.word	0x08003ecd
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3304      	adds	r3, #4
 8003e98:	2101      	movs	r1, #1
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fdfa 	bl	8004a94 <RCCEx_PLL2_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ea4:	e013      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3324      	adds	r3, #36	; 0x24
 8003eaa:	2101      	movs	r1, #1
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fea3 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003eb6:	e00a      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	75fb      	strb	r3, [r7, #23]
      break;
 8003ebc:	e007      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003ebe:	bf00      	nop
 8003ec0:	58024400 	.word	0x58024400
 8003ec4:	58024800 	.word	0x58024800
 8003ec8:	00ffffcf 	.word	0x00ffffcf
      break;
 8003ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d109      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ed4:	4b96      	ldr	r3, [pc, #600]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ee0:	4993      	ldr	r1, [pc, #588]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	654b      	str	r3, [r1, #84]	; 0x54
 8003ee6:	e001      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
 8003eea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d038      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efc:	2b05      	cmp	r3, #5
 8003efe:	d821      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003f00:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f06:	bf00      	nop
 8003f08:	08003f4b 	.word	0x08003f4b
 8003f0c:	08003f21 	.word	0x08003f21
 8003f10:	08003f33 	.word	0x08003f33
 8003f14:	08003f4b 	.word	0x08003f4b
 8003f18:	08003f4b 	.word	0x08003f4b
 8003f1c:	08003f4b 	.word	0x08003f4b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	2101      	movs	r1, #1
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fdb4 	bl	8004a94 <RCCEx_PLL2_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f30:	e00c      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3324      	adds	r3, #36	; 0x24
 8003f36:	2101      	movs	r1, #1
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fe5d 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f42:	e003      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	75fb      	strb	r3, [r7, #23]
      break;
 8003f48:	e000      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003f4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d109      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f52:	4b77      	ldr	r3, [pc, #476]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f56:	f023 0207 	bic.w	r2, r3, #7
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5e:	4974      	ldr	r1, [pc, #464]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	654b      	str	r3, [r1, #84]	; 0x54
 8003f64:	e001      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f66:	7dfb      	ldrb	r3, [r7, #23]
 8003f68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d03a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7c:	2b05      	cmp	r3, #5
 8003f7e:	d821      	bhi.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003f80:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003fcb 	.word	0x08003fcb
 8003f8c:	08003fa1 	.word	0x08003fa1
 8003f90:	08003fb3 	.word	0x08003fb3
 8003f94:	08003fcb 	.word	0x08003fcb
 8003f98:	08003fcb 	.word	0x08003fcb
 8003f9c:	08003fcb 	.word	0x08003fcb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fd74 	bl	8004a94 <RCCEx_PLL2_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003fb0:	e00c      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3324      	adds	r3, #36	; 0x24
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fe1d 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003fc2:	e003      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fc8:	e000      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003fca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10a      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fd2:	4b57      	ldr	r3, [pc, #348]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd6:	f023 0207 	bic.w	r2, r3, #7
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe0:	4953      	ldr	r1, [pc, #332]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	658b      	str	r3, [r1, #88]	; 0x58
 8003fe6:	e001      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe8:	7dfb      	ldrb	r3, [r7, #23]
 8003fea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0320 	and.w	r3, r3, #32
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d04b      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004002:	d02e      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004004:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004008:	d828      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800400a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400e:	d02a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004014:	d822      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004016:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800401a:	d026      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800401c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004020:	d81c      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004026:	d010      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800402c:	d816      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01d      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004036:	d111      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3304      	adds	r3, #4
 800403c:	2100      	movs	r1, #0
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fd28 	bl	8004a94 <RCCEx_PLL2_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004048:	e012      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3324      	adds	r3, #36	; 0x24
 800404e:	2102      	movs	r1, #2
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fdd1 	bl	8004bf8 <RCCEx_PLL3_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800405a:	e009      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	75fb      	strb	r3, [r7, #23]
      break;
 8004060:	e006      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004062:	bf00      	nop
 8004064:	e004      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004066:	bf00      	nop
 8004068:	e002      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800406a:	bf00      	nop
 800406c:	e000      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800406e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004070:	7dfb      	ldrb	r3, [r7, #23]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004076:	4b2e      	ldr	r3, [pc, #184]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004084:	492a      	ldr	r1, [pc, #168]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004086:	4313      	orrs	r3, r2
 8004088:	654b      	str	r3, [r1, #84]	; 0x54
 800408a:	e001      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408c:	7dfb      	ldrb	r3, [r7, #23]
 800408e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004098:	2b00      	cmp	r3, #0
 800409a:	d04d      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040a6:	d02e      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80040a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040ac:	d828      	bhi.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80040ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b2:	d02a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80040b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b8:	d822      	bhi.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80040ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040be:	d026      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80040c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040c4:	d81c      	bhi.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80040c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ca:	d010      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80040cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d0:	d816      	bhi.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d01d      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80040d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040da:	d111      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3304      	adds	r3, #4
 80040e0:	2100      	movs	r1, #0
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fcd6 	bl	8004a94 <RCCEx_PLL2_Config>
 80040e8:	4603      	mov	r3, r0
 80040ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80040ec:	e012      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3324      	adds	r3, #36	; 0x24
 80040f2:	2102      	movs	r1, #2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fd7f 	bl	8004bf8 <RCCEx_PLL3_Config>
 80040fa:	4603      	mov	r3, r0
 80040fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80040fe:	e009      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	75fb      	strb	r3, [r7, #23]
      break;
 8004104:	e006      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004106:	bf00      	nop
 8004108:	e004      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800410a:	bf00      	nop
 800410c:	e002      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800410e:	bf00      	nop
 8004110:	e000      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004112:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004114:	7dfb      	ldrb	r3, [r7, #23]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10c      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800411a:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800411c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004128:	4901      	ldr	r1, [pc, #4]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800412a:	4313      	orrs	r3, r2
 800412c:	658b      	str	r3, [r1, #88]	; 0x58
 800412e:	e003      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004130:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004134:	7dfb      	ldrb	r3, [r7, #23]
 8004136:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004140:	2b00      	cmp	r3, #0
 8004142:	d04b      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800414a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800414e:	d02e      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004150:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004154:	d828      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800415a:	d02a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800415c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004160:	d822      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004162:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004166:	d026      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004168:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800416c:	d81c      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800416e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004172:	d010      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004174:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004178:	d816      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01d      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800417e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004182:	d111      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3304      	adds	r3, #4
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fc82 	bl	8004a94 <RCCEx_PLL2_Config>
 8004190:	4603      	mov	r3, r0
 8004192:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004194:	e012      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3324      	adds	r3, #36	; 0x24
 800419a:	2102      	movs	r1, #2
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fd2b 	bl	8004bf8 <RCCEx_PLL3_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80041a6:	e009      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	75fb      	strb	r3, [r7, #23]
      break;
 80041ac:	e006      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80041ae:	bf00      	nop
 80041b0:	e004      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80041b2:	bf00      	nop
 80041b4:	e002      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80041b6:	bf00      	nop
 80041b8:	e000      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80041ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041bc:	7dfb      	ldrb	r3, [r7, #23]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041c2:	4b9d      	ldr	r3, [pc, #628]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041d0:	4999      	ldr	r1, [pc, #612]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	658b      	str	r3, [r1, #88]	; 0x58
 80041d6:	e001      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d8:	7dfb      	ldrb	r3, [r7, #23]
 80041da:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01a      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f2:	d10a      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3324      	adds	r3, #36	; 0x24
 80041f8:	2102      	movs	r1, #2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fcfc 	bl	8004bf8 <RCCEx_PLL3_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800420a:	4b8b      	ldr	r3, [pc, #556]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004218:	4987      	ldr	r1, [pc, #540]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800421a:	4313      	orrs	r3, r2
 800421c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b00      	cmp	r3, #0
 8004228:	d01a      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004234:	d10a      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3324      	adds	r3, #36	; 0x24
 800423a:	2102      	movs	r1, #2
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fcdb 	bl	8004bf8 <RCCEx_PLL3_Config>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800424c:	4b7a      	ldr	r3, [pc, #488]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800424e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800425a:	4977      	ldr	r1, [pc, #476]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800425c:	4313      	orrs	r3, r2
 800425e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d034      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004272:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004276:	d01d      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004278:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800427c:	d817      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004286:	d009      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004288:	e011      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3304      	adds	r3, #4
 800428e:	2100      	movs	r1, #0
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fbff 	bl	8004a94 <RCCEx_PLL2_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800429a:	e00c      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3324      	adds	r3, #36	; 0x24
 80042a0:	2102      	movs	r1, #2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fca8 	bl	8004bf8 <RCCEx_PLL3_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80042ac:	e003      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	75fb      	strb	r3, [r7, #23]
      break;
 80042b2:	e000      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80042b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042bc:	4b5e      	ldr	r3, [pc, #376]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042ca:	495b      	ldr	r1, [pc, #364]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	658b      	str	r3, [r1, #88]	; 0x58
 80042d0:	e001      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d2:	7dfb      	ldrb	r3, [r7, #23]
 80042d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d033      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042ec:	d01c      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80042ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042f2:	d816      	bhi.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80042f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042f8:	d003      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80042fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042fe:	d007      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004300:	e00f      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004302:	4b4d      	ldr	r3, [pc, #308]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	4a4c      	ldr	r2, [pc, #304]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800430c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800430e:	e00c      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3324      	adds	r3, #36	; 0x24
 8004314:	2101      	movs	r1, #1
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fc6e 	bl	8004bf8 <RCCEx_PLL3_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004320:	e003      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	75fb      	strb	r3, [r7, #23]
      break;
 8004326:	e000      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004328:	bf00      	nop
    }

    if(ret == HAL_OK)
 800432a:	7dfb      	ldrb	r3, [r7, #23]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10a      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004330:	4b41      	ldr	r3, [pc, #260]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004334:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433e:	493e      	ldr	r1, [pc, #248]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004340:	4313      	orrs	r3, r2
 8004342:	654b      	str	r3, [r1, #84]	; 0x54
 8004344:	e001      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004346:	7dfb      	ldrb	r3, [r7, #23]
 8004348:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d029      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800435e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004362:	d007      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004364:	e00f      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004366:	4b34      	ldr	r3, [pc, #208]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	4a33      	ldr	r2, [pc, #204]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800436c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004370:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004372:	e00b      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
 8004378:	2102      	movs	r1, #2
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fb8a 	bl	8004a94 <RCCEx_PLL2_Config>
 8004380:	4603      	mov	r3, r0
 8004382:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004384:	e002      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	75fb      	strb	r3, [r7, #23]
      break;
 800438a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800438c:	7dfb      	ldrb	r3, [r7, #23]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d109      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004392:	4b29      	ldr	r3, [pc, #164]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004396:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439e:	4926      	ldr	r1, [pc, #152]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80043a4:	e001      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a6:	7dfb      	ldrb	r3, [r7, #23]
 80043a8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3324      	adds	r3, #36	; 0x24
 80043ba:	2102      	movs	r1, #2
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 fc1b 	bl	8004bf8 <RCCEx_PLL3_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d033      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e0:	d017      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80043e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e6:	d811      	bhi.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80043e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ec:	d013      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80043ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f2:	d80b      	bhi.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d010      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80043f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fc:	d106      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043fe:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	4a0d      	ldr	r2, [pc, #52]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004408:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800440a:	e007      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	75fb      	strb	r3, [r7, #23]
      break;
 8004410:	e004      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004412:	bf00      	nop
 8004414:	e002      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004416:	bf00      	nop
 8004418:	e000      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800441a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10c      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004422:	4b05      	ldr	r3, [pc, #20]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004426:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800442e:	4902      	ldr	r1, [pc, #8]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004430:	4313      	orrs	r3, r2
 8004432:	654b      	str	r3, [r1, #84]	; 0x54
 8004434:	e004      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004436:	bf00      	nop
 8004438:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443c:	7dfb      	ldrb	r3, [r7, #23]
 800443e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800444c:	4b31      	ldr	r3, [pc, #196]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800444e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004450:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004458:	492e      	ldr	r1, [pc, #184]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800445a:	4313      	orrs	r3, r2
 800445c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800446a:	4b2a      	ldr	r3, [pc, #168]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004478:	4926      	ldr	r1, [pc, #152]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800447a:	4313      	orrs	r3, r2
 800447c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d008      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800448a:	4b22      	ldr	r3, [pc, #136]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800448c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004496:	491f      	ldr	r1, [pc, #124]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004498:	4313      	orrs	r3, r2
 800449a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00d      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044a8:	4b1a      	ldr	r3, [pc, #104]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	4a19      	ldr	r2, [pc, #100]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80044ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044b2:	6113      	str	r3, [r2, #16]
 80044b4:	4b17      	ldr	r3, [pc, #92]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80044be:	4915      	ldr	r1, [pc, #84]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	da08      	bge.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044cc:	4b11      	ldr	r3, [pc, #68]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80044ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d8:	490e      	ldr	r1, [pc, #56]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044ea:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80044ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f8:	4906      	ldr	r1, [pc, #24]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80044fe:	7dbb      	ldrb	r3, [r7, #22]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	e000      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	58024400 	.word	0x58024400

08004518 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800451c:	f7ff f85a 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 8004520:	4602      	mov	r2, r0
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	4904      	ldr	r1, [pc, #16]	; (8004540 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800452e:	5ccb      	ldrb	r3, [r1, r3]
 8004530:	f003 031f 	and.w	r3, r3, #31
 8004534:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004538:	4618      	mov	r0, r3
 800453a:	bd80      	pop	{r7, pc}
 800453c:	58024400 	.word	0x58024400
 8004540:	08007b84 	.word	0x08007b84

08004544 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004544:	b480      	push	{r7}
 8004546:	b089      	sub	sp, #36	; 0x24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800454c:	4ba1      	ldr	r3, [pc, #644]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004556:	4b9f      	ldr	r3, [pc, #636]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455a:	0b1b      	lsrs	r3, r3, #12
 800455c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004560:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004562:	4b9c      	ldr	r3, [pc, #624]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	091b      	lsrs	r3, r3, #4
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800456e:	4b99      	ldr	r3, [pc, #612]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004572:	08db      	lsrs	r3, r3, #3
 8004574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	fb02 f303 	mul.w	r3, r2, r3
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004586:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8111 	beq.w	80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	2b02      	cmp	r3, #2
 8004596:	f000 8083 	beq.w	80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b02      	cmp	r3, #2
 800459e:	f200 80a1 	bhi.w	80046e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d056      	beq.n	800465c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80045ae:	e099      	b.n	80046e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045b0:	4b88      	ldr	r3, [pc, #544]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d02d      	beq.n	8004618 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045bc:	4b85      	ldr	r3, [pc, #532]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	08db      	lsrs	r3, r3, #3
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	4a84      	ldr	r2, [pc, #528]	; (80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
 80045cc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	ee07 3a90 	vmov	s15, r3
 80045d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	ee07 3a90 	vmov	s15, r3
 80045de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e6:	4b7b      	ldr	r3, [pc, #492]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ee:	ee07 3a90 	vmov	s15, r3
 80045f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800460a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004612:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004616:	e087      	b.n	8004728 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004622:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800462a:	4b6a      	ldr	r3, [pc, #424]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800463a:	ed97 6a03 	vldr	s12, [r7, #12]
 800463e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800464a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800464e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004656:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800465a:	e065      	b.n	8004728 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004666:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800466a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800466e:	4b59      	ldr	r3, [pc, #356]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800467e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004682:	eddf 5a56 	vldr	s11, [pc, #344]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800468a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800468e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800469a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800469e:	e043      	b.n	8004728 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80046ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b2:	4b48      	ldr	r3, [pc, #288]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046e2:	e021      	b.n	8004728 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f6:	4b37      	ldr	r3, [pc, #220]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004706:	ed97 6a03 	vldr	s12, [r7, #12]
 800470a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800470e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800471a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004722:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004726:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004728:	4b2a      	ldr	r3, [pc, #168]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	0a5b      	lsrs	r3, r3, #9
 800472e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800473e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004742:	edd7 6a07 	vldr	s13, [r7, #28]
 8004746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800474a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800474e:	ee17 2a90 	vmov	r2, s15
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004756:	4b1f      	ldr	r3, [pc, #124]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	0c1b      	lsrs	r3, r3, #16
 800475c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004760:	ee07 3a90 	vmov	s15, r3
 8004764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800476c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004770:	edd7 6a07 	vldr	s13, [r7, #28]
 8004774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800477c:	ee17 2a90 	vmov	r2, s15
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004784:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	0e1b      	lsrs	r3, r3, #24
 800478a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800478e:	ee07 3a90 	vmov	s15, r3
 8004792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004796:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800479a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800479e:	edd7 6a07 	vldr	s13, [r7, #28]
 80047a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047aa:	ee17 2a90 	vmov	r2, s15
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80047b2:	e008      	b.n	80047c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]
}
 80047c6:	bf00      	nop
 80047c8:	3724      	adds	r7, #36	; 0x24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	58024400 	.word	0x58024400
 80047d8:	03d09000 	.word	0x03d09000
 80047dc:	46000000 	.word	0x46000000
 80047e0:	4c742400 	.word	0x4c742400
 80047e4:	4a742400 	.word	0x4a742400
 80047e8:	4af42400 	.word	0x4af42400

080047ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b089      	sub	sp, #36	; 0x24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047f4:	4ba1      	ldr	r3, [pc, #644]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80047fe:	4b9f      	ldr	r3, [pc, #636]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	0d1b      	lsrs	r3, r3, #20
 8004804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004808:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800480a:	4b9c      	ldr	r3, [pc, #624]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	0a1b      	lsrs	r3, r3, #8
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004816:	4b99      	ldr	r3, [pc, #612]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	08db      	lsrs	r3, r3, #3
 800481c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8111 	beq.w	8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b02      	cmp	r3, #2
 800483e:	f000 8083 	beq.w	8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b02      	cmp	r3, #2
 8004846:	f200 80a1 	bhi.w	800498c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d056      	beq.n	8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004856:	e099      	b.n	800498c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004858:	4b88      	ldr	r3, [pc, #544]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b00      	cmp	r3, #0
 8004862:	d02d      	beq.n	80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004864:	4b85      	ldr	r3, [pc, #532]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	08db      	lsrs	r3, r3, #3
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	4a84      	ldr	r2, [pc, #528]	; (8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
 8004874:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	ee07 3a90 	vmov	s15, r3
 800487c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800488e:	4b7b      	ldr	r3, [pc, #492]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489e:	ed97 6a03 	vldr	s12, [r7, #12]
 80048a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80048be:	e087      	b.n	80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80048ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048d2:	4b6a      	ldr	r3, [pc, #424]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004902:	e065      	b.n	80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	ee07 3a90 	vmov	s15, r3
 800490a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004916:	4b59      	ldr	r3, [pc, #356]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800491e:	ee07 3a90 	vmov	s15, r3
 8004922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004926:	ed97 6a03 	vldr	s12, [r7, #12]
 800492a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800492e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800493a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800493e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004942:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004946:	e043      	b.n	80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	ee07 3a90 	vmov	s15, r3
 800494e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004952:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800495a:	4b48      	ldr	r3, [pc, #288]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800496a:	ed97 6a03 	vldr	s12, [r7, #12]
 800496e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800497a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800497e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004986:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800498a:	e021      	b.n	80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004996:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800499a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499e:	4b37      	ldr	r3, [pc, #220]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80049b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80049d0:	4b2a      	ldr	r3, [pc, #168]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	0a5b      	lsrs	r3, r3, #9
 80049d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049da:	ee07 3a90 	vmov	s15, r3
 80049de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049f6:	ee17 2a90 	vmov	r2, s15
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80049fe:	4b1f      	ldr	r3, [pc, #124]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	0c1b      	lsrs	r3, r3, #16
 8004a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a08:	ee07 3a90 	vmov	s15, r3
 8004a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a18:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a24:	ee17 2a90 	vmov	r2, s15
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004a2c:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	0e1b      	lsrs	r3, r3, #24
 8004a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a46:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a52:	ee17 2a90 	vmov	r2, s15
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a5a:	e008      	b.n	8004a6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	609a      	str	r2, [r3, #8]
}
 8004a6e:	bf00      	nop
 8004a70:	3724      	adds	r7, #36	; 0x24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	58024400 	.word	0x58024400
 8004a80:	03d09000 	.word	0x03d09000
 8004a84:	46000000 	.word	0x46000000
 8004a88:	4c742400 	.word	0x4c742400
 8004a8c:	4a742400 	.word	0x4a742400
 8004a90:	4af42400 	.word	0x4af42400

08004a94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004aa2:	4b53      	ldr	r3, [pc, #332]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	d101      	bne.n	8004ab2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e099      	b.n	8004be6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ab2:	4b4f      	ldr	r3, [pc, #316]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a4e      	ldr	r2, [pc, #312]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004ab8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004abc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004abe:	f7fc fce3 	bl	8001488 <HAL_GetTick>
 8004ac2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ac4:	e008      	b.n	8004ad8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004ac6:	f7fc fcdf 	bl	8001488 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e086      	b.n	8004be6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ad8:	4b45      	ldr	r3, [pc, #276]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1f0      	bne.n	8004ac6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ae4:	4b42      	ldr	r3, [pc, #264]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	031b      	lsls	r3, r3, #12
 8004af2:	493f      	ldr	r1, [pc, #252]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	628b      	str	r3, [r1, #40]	; 0x28
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	025b      	lsls	r3, r3, #9
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	041b      	lsls	r3, r3, #16
 8004b16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	061b      	lsls	r3, r3, #24
 8004b24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b28:	4931      	ldr	r1, [pc, #196]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b2e:	4b30      	ldr	r3, [pc, #192]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	492d      	ldr	r1, [pc, #180]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b40:	4b2b      	ldr	r3, [pc, #172]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	f023 0220 	bic.w	r2, r3, #32
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	4928      	ldr	r1, [pc, #160]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b52:	4b27      	ldr	r3, [pc, #156]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	4a26      	ldr	r2, [pc, #152]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b58:	f023 0310 	bic.w	r3, r3, #16
 8004b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b5e:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b62:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <RCCEx_PLL2_Config+0x160>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	69d2      	ldr	r2, [r2, #28]
 8004b6a:	00d2      	lsls	r2, r2, #3
 8004b6c:	4920      	ldr	r1, [pc, #128]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b72:	4b1f      	ldr	r3, [pc, #124]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	4a1e      	ldr	r2, [pc, #120]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b78:	f043 0310 	orr.w	r3, r3, #16
 8004b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d106      	bne.n	8004b92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b84:	4b1a      	ldr	r3, [pc, #104]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	4a19      	ldr	r2, [pc, #100]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b90:	e00f      	b.n	8004bb2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d106      	bne.n	8004ba6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b98:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	4a14      	ldr	r2, [pc, #80]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ba2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ba4:	e005      	b.n	8004bb2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ba6:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	4a11      	ldr	r2, [pc, #68]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004bac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004bb2:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a0e      	ldr	r2, [pc, #56]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004bb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bbe:	f7fc fc63 	bl	8001488 <HAL_GetTick>
 8004bc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bc4:	e008      	b.n	8004bd8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004bc6:	f7fc fc5f 	bl	8001488 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e006      	b.n	8004be6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bd8:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0f0      	beq.n	8004bc6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	58024400 	.word	0x58024400
 8004bf4:	ffff0007 	.word	0xffff0007

08004bf8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c06:	4b53      	ldr	r3, [pc, #332]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d101      	bne.n	8004c16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e099      	b.n	8004d4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c16:	4b4f      	ldr	r3, [pc, #316]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a4e      	ldr	r2, [pc, #312]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c22:	f7fc fc31 	bl	8001488 <HAL_GetTick>
 8004c26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c28:	e008      	b.n	8004c3c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c2a:	f7fc fc2d 	bl	8001488 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e086      	b.n	8004d4a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c3c:	4b45      	ldr	r3, [pc, #276]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f0      	bne.n	8004c2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c48:	4b42      	ldr	r3, [pc, #264]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	051b      	lsls	r3, r3, #20
 8004c56:	493f      	ldr	r1, [pc, #252]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	628b      	str	r3, [r1, #40]	; 0x28
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	025b      	lsls	r3, r3, #9
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	041b      	lsls	r3, r3, #16
 8004c7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	061b      	lsls	r3, r3, #24
 8004c88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c8c:	4931      	ldr	r1, [pc, #196]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c92:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	492d      	ldr	r1, [pc, #180]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ca4:	4b2b      	ldr	r3, [pc, #172]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	4928      	ldr	r1, [pc, #160]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004cb6:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	4a26      	ldr	r2, [pc, #152]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004cc2:	4b24      	ldr	r3, [pc, #144]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc6:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <RCCEx_PLL3_Config+0x160>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	69d2      	ldr	r2, [r2, #28]
 8004cce:	00d2      	lsls	r2, r2, #3
 8004cd0:	4920      	ldr	r1, [pc, #128]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004cd6:	4b1f      	ldr	r3, [pc, #124]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	4a1e      	ldr	r2, [pc, #120]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d106      	bne.n	8004cf6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ce8:	4b1a      	ldr	r3, [pc, #104]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	4a19      	ldr	r2, [pc, #100]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cf4:	e00f      	b.n	8004d16 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d106      	bne.n	8004d0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004cfc:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	4a14      	ldr	r2, [pc, #80]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004d02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d08:	e005      	b.n	8004d16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d0a:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	4a11      	ldr	r2, [pc, #68]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004d10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d16:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a0e      	ldr	r2, [pc, #56]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d22:	f7fc fbb1 	bl	8001488 <HAL_GetTick>
 8004d26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d28:	e008      	b.n	8004d3c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d2a:	f7fc fbad 	bl	8001488 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e006      	b.n	8004d4a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	58024400 	.word	0x58024400
 8004d58:	ffff0007 	.word	0xffff0007

08004d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e049      	b.n	8004e02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fc f934 	bl	8000ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3304      	adds	r3, #4
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	f000 fde2 	bl	8005964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d001      	beq.n	8004e24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e04c      	b.n	8004ebe <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a26      	ldr	r2, [pc, #152]	; (8004ecc <HAL_TIM_Base_Start+0xc0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d022      	beq.n	8004e7c <HAL_TIM_Base_Start+0x70>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3e:	d01d      	beq.n	8004e7c <HAL_TIM_Base_Start+0x70>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a22      	ldr	r2, [pc, #136]	; (8004ed0 <HAL_TIM_Base_Start+0xc4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d018      	beq.n	8004e7c <HAL_TIM_Base_Start+0x70>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a21      	ldr	r2, [pc, #132]	; (8004ed4 <HAL_TIM_Base_Start+0xc8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d013      	beq.n	8004e7c <HAL_TIM_Base_Start+0x70>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1f      	ldr	r2, [pc, #124]	; (8004ed8 <HAL_TIM_Base_Start+0xcc>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00e      	beq.n	8004e7c <HAL_TIM_Base_Start+0x70>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a1e      	ldr	r2, [pc, #120]	; (8004edc <HAL_TIM_Base_Start+0xd0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_TIM_Base_Start+0x70>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a1c      	ldr	r2, [pc, #112]	; (8004ee0 <HAL_TIM_Base_Start+0xd4>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <HAL_TIM_Base_Start+0x70>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a1b      	ldr	r2, [pc, #108]	; (8004ee4 <HAL_TIM_Base_Start+0xd8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d115      	bne.n	8004ea8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	4b19      	ldr	r3, [pc, #100]	; (8004ee8 <HAL_TIM_Base_Start+0xdc>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b06      	cmp	r3, #6
 8004e8c:	d015      	beq.n	8004eba <HAL_TIM_Base_Start+0xae>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e94:	d011      	beq.n	8004eba <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0201 	orr.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea6:	e008      	b.n	8004eba <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	e000      	b.n	8004ebc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40010000 	.word	0x40010000
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	40000800 	.word	0x40000800
 8004ed8:	40000c00 	.word	0x40000c00
 8004edc:	40010400 	.word	0x40010400
 8004ee0:	40001800 	.word	0x40001800
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	00010007 	.word	0x00010007

08004eec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d001      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e054      	b.n	8004fae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a26      	ldr	r2, [pc, #152]	; (8004fbc <HAL_TIM_Base_Start_IT+0xd0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d022      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x80>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2e:	d01d      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x80>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a22      	ldr	r2, [pc, #136]	; (8004fc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d018      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x80>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a21      	ldr	r2, [pc, #132]	; (8004fc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d013      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x80>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a1f      	ldr	r2, [pc, #124]	; (8004fc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00e      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x80>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a1e      	ldr	r2, [pc, #120]	; (8004fcc <HAL_TIM_Base_Start_IT+0xe0>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d009      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x80>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a1c      	ldr	r2, [pc, #112]	; (8004fd0 <HAL_TIM_Base_Start_IT+0xe4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d004      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x80>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a1b      	ldr	r2, [pc, #108]	; (8004fd4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d115      	bne.n	8004f98 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <HAL_TIM_Base_Start_IT+0xec>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b06      	cmp	r3, #6
 8004f7c:	d015      	beq.n	8004faa <HAL_TIM_Base_Start_IT+0xbe>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f84:	d011      	beq.n	8004faa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0201 	orr.w	r2, r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f96:	e008      	b.n	8004faa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0201 	orr.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	e000      	b.n	8004fac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004faa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40010000 	.word	0x40010000
 8004fc0:	40000400 	.word	0x40000400
 8004fc4:	40000800 	.word	0x40000800
 8004fc8:	40000c00 	.word	0x40000c00
 8004fcc:	40010400 	.word	0x40010400
 8004fd0:	40001800 	.word	0x40001800
 8004fd4:	40014000 	.word	0x40014000
 8004fd8:	00010007 	.word	0x00010007

08004fdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e049      	b.n	8005082 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f841 	bl	800508a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3304      	adds	r3, #4
 8005018:	4619      	mov	r1, r3
 800501a:	4610      	mov	r0, r2
 800501c:	f000 fca2 	bl	8005964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
	...

080050a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d109      	bne.n	80050c4 <HAL_TIM_PWM_Start+0x24>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	bf14      	ite	ne
 80050bc:	2301      	movne	r3, #1
 80050be:	2300      	moveq	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	e03c      	b.n	800513e <HAL_TIM_PWM_Start+0x9e>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d109      	bne.n	80050de <HAL_TIM_PWM_Start+0x3e>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	bf14      	ite	ne
 80050d6:	2301      	movne	r3, #1
 80050d8:	2300      	moveq	r3, #0
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	e02f      	b.n	800513e <HAL_TIM_PWM_Start+0x9e>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d109      	bne.n	80050f8 <HAL_TIM_PWM_Start+0x58>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	bf14      	ite	ne
 80050f0:	2301      	movne	r3, #1
 80050f2:	2300      	moveq	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	e022      	b.n	800513e <HAL_TIM_PWM_Start+0x9e>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b0c      	cmp	r3, #12
 80050fc:	d109      	bne.n	8005112 <HAL_TIM_PWM_Start+0x72>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b01      	cmp	r3, #1
 8005108:	bf14      	ite	ne
 800510a:	2301      	movne	r3, #1
 800510c:	2300      	moveq	r3, #0
 800510e:	b2db      	uxtb	r3, r3
 8005110:	e015      	b.n	800513e <HAL_TIM_PWM_Start+0x9e>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b10      	cmp	r3, #16
 8005116:	d109      	bne.n	800512c <HAL_TIM_PWM_Start+0x8c>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b01      	cmp	r3, #1
 8005122:	bf14      	ite	ne
 8005124:	2301      	movne	r3, #1
 8005126:	2300      	moveq	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	e008      	b.n	800513e <HAL_TIM_PWM_Start+0x9e>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b01      	cmp	r3, #1
 8005136:	bf14      	ite	ne
 8005138:	2301      	movne	r3, #1
 800513a:	2300      	moveq	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e0a1      	b.n	800528a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d104      	bne.n	8005156 <HAL_TIM_PWM_Start+0xb6>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005154:	e023      	b.n	800519e <HAL_TIM_PWM_Start+0xfe>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b04      	cmp	r3, #4
 800515a:	d104      	bne.n	8005166 <HAL_TIM_PWM_Start+0xc6>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005164:	e01b      	b.n	800519e <HAL_TIM_PWM_Start+0xfe>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b08      	cmp	r3, #8
 800516a:	d104      	bne.n	8005176 <HAL_TIM_PWM_Start+0xd6>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005174:	e013      	b.n	800519e <HAL_TIM_PWM_Start+0xfe>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b0c      	cmp	r3, #12
 800517a:	d104      	bne.n	8005186 <HAL_TIM_PWM_Start+0xe6>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005184:	e00b      	b.n	800519e <HAL_TIM_PWM_Start+0xfe>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b10      	cmp	r3, #16
 800518a:	d104      	bne.n	8005196 <HAL_TIM_PWM_Start+0xf6>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005194:	e003      	b.n	800519e <HAL_TIM_PWM_Start+0xfe>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2201      	movs	r2, #1
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 ffea 	bl	8006180 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a38      	ldr	r2, [pc, #224]	; (8005294 <HAL_TIM_PWM_Start+0x1f4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <HAL_TIM_PWM_Start+0x13e>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a37      	ldr	r2, [pc, #220]	; (8005298 <HAL_TIM_PWM_Start+0x1f8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00e      	beq.n	80051de <HAL_TIM_PWM_Start+0x13e>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a35      	ldr	r2, [pc, #212]	; (800529c <HAL_TIM_PWM_Start+0x1fc>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d009      	beq.n	80051de <HAL_TIM_PWM_Start+0x13e>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a34      	ldr	r2, [pc, #208]	; (80052a0 <HAL_TIM_PWM_Start+0x200>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d004      	beq.n	80051de <HAL_TIM_PWM_Start+0x13e>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a32      	ldr	r2, [pc, #200]	; (80052a4 <HAL_TIM_PWM_Start+0x204>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d101      	bne.n	80051e2 <HAL_TIM_PWM_Start+0x142>
 80051de:	2301      	movs	r3, #1
 80051e0:	e000      	b.n	80051e4 <HAL_TIM_PWM_Start+0x144>
 80051e2:	2300      	movs	r3, #0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d007      	beq.n	80051f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a25      	ldr	r2, [pc, #148]	; (8005294 <HAL_TIM_PWM_Start+0x1f4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d022      	beq.n	8005248 <HAL_TIM_PWM_Start+0x1a8>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520a:	d01d      	beq.n	8005248 <HAL_TIM_PWM_Start+0x1a8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a25      	ldr	r2, [pc, #148]	; (80052a8 <HAL_TIM_PWM_Start+0x208>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d018      	beq.n	8005248 <HAL_TIM_PWM_Start+0x1a8>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a24      	ldr	r2, [pc, #144]	; (80052ac <HAL_TIM_PWM_Start+0x20c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d013      	beq.n	8005248 <HAL_TIM_PWM_Start+0x1a8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a22      	ldr	r2, [pc, #136]	; (80052b0 <HAL_TIM_PWM_Start+0x210>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00e      	beq.n	8005248 <HAL_TIM_PWM_Start+0x1a8>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a1a      	ldr	r2, [pc, #104]	; (8005298 <HAL_TIM_PWM_Start+0x1f8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d009      	beq.n	8005248 <HAL_TIM_PWM_Start+0x1a8>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a1e      	ldr	r2, [pc, #120]	; (80052b4 <HAL_TIM_PWM_Start+0x214>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d004      	beq.n	8005248 <HAL_TIM_PWM_Start+0x1a8>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a16      	ldr	r2, [pc, #88]	; (800529c <HAL_TIM_PWM_Start+0x1fc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d115      	bne.n	8005274 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	4b1a      	ldr	r3, [pc, #104]	; (80052b8 <HAL_TIM_PWM_Start+0x218>)
 8005250:	4013      	ands	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b06      	cmp	r3, #6
 8005258:	d015      	beq.n	8005286 <HAL_TIM_PWM_Start+0x1e6>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005260:	d011      	beq.n	8005286 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0201 	orr.w	r2, r2, #1
 8005270:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005272:	e008      	b.n	8005286 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	e000      	b.n	8005288 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005286:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40010000 	.word	0x40010000
 8005298:	40010400 	.word	0x40010400
 800529c:	40014000 	.word	0x40014000
 80052a0:	40014400 	.word	0x40014400
 80052a4:	40014800 	.word	0x40014800
 80052a8:	40000400 	.word	0x40000400
 80052ac:	40000800 	.word	0x40000800
 80052b0:	40000c00 	.word	0x40000c00
 80052b4:	40001800 	.word	0x40001800
 80052b8:	00010007 	.word	0x00010007

080052bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d122      	bne.n	8005318 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d11b      	bne.n	8005318 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0202 	mvn.w	r2, #2
 80052e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fb12 	bl	8005928 <HAL_TIM_IC_CaptureCallback>
 8005304:	e005      	b.n	8005312 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fb04 	bl	8005914 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fb15 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b04      	cmp	r3, #4
 8005324:	d122      	bne.n	800536c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b04      	cmp	r3, #4
 8005332:	d11b      	bne.n	800536c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0204 	mvn.w	r2, #4
 800533c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2202      	movs	r2, #2
 8005342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fae8 	bl	8005928 <HAL_TIM_IC_CaptureCallback>
 8005358:	e005      	b.n	8005366 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fada 	bl	8005914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 faeb 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0308 	and.w	r3, r3, #8
 8005376:	2b08      	cmp	r3, #8
 8005378:	d122      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b08      	cmp	r3, #8
 8005386:	d11b      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0208 	mvn.w	r2, #8
 8005390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2204      	movs	r2, #4
 8005396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fabe 	bl	8005928 <HAL_TIM_IC_CaptureCallback>
 80053ac:	e005      	b.n	80053ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fab0 	bl	8005914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 fac1 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f003 0310 	and.w	r3, r3, #16
 80053ca:	2b10      	cmp	r3, #16
 80053cc:	d122      	bne.n	8005414 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b10      	cmp	r3, #16
 80053da:	d11b      	bne.n	8005414 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f06f 0210 	mvn.w	r2, #16
 80053e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2208      	movs	r2, #8
 80053ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fa94 	bl	8005928 <HAL_TIM_IC_CaptureCallback>
 8005400:	e005      	b.n	800540e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fa86 	bl	8005914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fa97 	bl	800593c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b01      	cmp	r3, #1
 8005420:	d10e      	bne.n	8005440 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b01      	cmp	r3, #1
 800542e:	d107      	bne.n	8005440 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f06f 0201 	mvn.w	r2, #1
 8005438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fb fcd6 	bl	8000dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544a:	2b80      	cmp	r3, #128	; 0x80
 800544c:	d10e      	bne.n	800546c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005458:	2b80      	cmp	r3, #128	; 0x80
 800545a:	d107      	bne.n	800546c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 ffc6 	bl	80063f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547a:	d10e      	bne.n	800549a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005486:	2b80      	cmp	r3, #128	; 0x80
 8005488:	d107      	bne.n	800549a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 ffb9 	bl	800640c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a4:	2b40      	cmp	r3, #64	; 0x40
 80054a6:	d10e      	bne.n	80054c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b2:	2b40      	cmp	r3, #64	; 0x40
 80054b4:	d107      	bne.n	80054c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fa45 	bl	8005950 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f003 0320 	and.w	r3, r3, #32
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d10e      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b20      	cmp	r3, #32
 80054e0:	d107      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f06f 0220 	mvn.w	r2, #32
 80054ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 ff79 	bl	80063e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054f2:	bf00      	nop
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005508:	2300      	movs	r3, #0
 800550a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005516:	2302      	movs	r3, #2
 8005518:	e0ff      	b.n	800571a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b14      	cmp	r3, #20
 8005526:	f200 80f0 	bhi.w	800570a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800552a:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005530:	08005585 	.word	0x08005585
 8005534:	0800570b 	.word	0x0800570b
 8005538:	0800570b 	.word	0x0800570b
 800553c:	0800570b 	.word	0x0800570b
 8005540:	080055c5 	.word	0x080055c5
 8005544:	0800570b 	.word	0x0800570b
 8005548:	0800570b 	.word	0x0800570b
 800554c:	0800570b 	.word	0x0800570b
 8005550:	08005607 	.word	0x08005607
 8005554:	0800570b 	.word	0x0800570b
 8005558:	0800570b 	.word	0x0800570b
 800555c:	0800570b 	.word	0x0800570b
 8005560:	08005647 	.word	0x08005647
 8005564:	0800570b 	.word	0x0800570b
 8005568:	0800570b 	.word	0x0800570b
 800556c:	0800570b 	.word	0x0800570b
 8005570:	08005689 	.word	0x08005689
 8005574:	0800570b 	.word	0x0800570b
 8005578:	0800570b 	.word	0x0800570b
 800557c:	0800570b 	.word	0x0800570b
 8005580:	080056c9 	.word	0x080056c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68b9      	ldr	r1, [r7, #8]
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fa84 	bl	8005a98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699a      	ldr	r2, [r3, #24]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0208 	orr.w	r2, r2, #8
 800559e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0204 	bic.w	r2, r2, #4
 80055ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6999      	ldr	r1, [r3, #24]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	691a      	ldr	r2, [r3, #16]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	619a      	str	r2, [r3, #24]
      break;
 80055c2:	e0a5      	b.n	8005710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68b9      	ldr	r1, [r7, #8]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 faf4 	bl	8005bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699a      	ldr	r2, [r3, #24]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6999      	ldr	r1, [r3, #24]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	021a      	lsls	r2, r3, #8
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	619a      	str	r2, [r3, #24]
      break;
 8005604:	e084      	b.n	8005710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68b9      	ldr	r1, [r7, #8]
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fb5d 	bl	8005ccc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69da      	ldr	r2, [r3, #28]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0208 	orr.w	r2, r2, #8
 8005620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0204 	bic.w	r2, r2, #4
 8005630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69d9      	ldr	r1, [r3, #28]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	691a      	ldr	r2, [r3, #16]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	61da      	str	r2, [r3, #28]
      break;
 8005644:	e064      	b.n	8005710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	4618      	mov	r0, r3
 800564e:	f000 fbc5 	bl	8005ddc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69da      	ldr	r2, [r3, #28]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69da      	ldr	r2, [r3, #28]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69d9      	ldr	r1, [r3, #28]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	021a      	lsls	r2, r3, #8
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	61da      	str	r2, [r3, #28]
      break;
 8005686:	e043      	b.n	8005710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68b9      	ldr	r1, [r7, #8]
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fc0e 	bl	8005eb0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0208 	orr.w	r2, r2, #8
 80056a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0204 	bic.w	r2, r2, #4
 80056b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	691a      	ldr	r2, [r3, #16]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056c6:	e023      	b.n	8005710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fc52 	bl	8005f78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	021a      	lsls	r2, r3, #8
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005708:	e002      	b.n	8005710 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	75fb      	strb	r3, [r7, #23]
      break;
 800570e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005718:	7dfb      	ldrb	r3, [r7, #23]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop

08005724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_TIM_ConfigClockSource+0x1c>
 800573c:	2302      	movs	r3, #2
 800573e:	e0dc      	b.n	80058fa <HAL_TIM_ConfigClockSource+0x1d6>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	4b6a      	ldr	r3, [pc, #424]	; (8005904 <HAL_TIM_ConfigClockSource+0x1e0>)
 800575c:	4013      	ands	r3, r2
 800575e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005766:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a64      	ldr	r2, [pc, #400]	; (8005908 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	f000 80a9 	beq.w	80058ce <HAL_TIM_ConfigClockSource+0x1aa>
 800577c:	4a62      	ldr	r2, [pc, #392]	; (8005908 <HAL_TIM_ConfigClockSource+0x1e4>)
 800577e:	4293      	cmp	r3, r2
 8005780:	f200 80ae 	bhi.w	80058e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005784:	4a61      	ldr	r2, [pc, #388]	; (800590c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	f000 80a1 	beq.w	80058ce <HAL_TIM_ConfigClockSource+0x1aa>
 800578c:	4a5f      	ldr	r2, [pc, #380]	; (800590c <HAL_TIM_ConfigClockSource+0x1e8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	f200 80a6 	bhi.w	80058e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005794:	4a5e      	ldr	r2, [pc, #376]	; (8005910 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005796:	4293      	cmp	r3, r2
 8005798:	f000 8099 	beq.w	80058ce <HAL_TIM_ConfigClockSource+0x1aa>
 800579c:	4a5c      	ldr	r2, [pc, #368]	; (8005910 <HAL_TIM_ConfigClockSource+0x1ec>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	f200 809e 	bhi.w	80058e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80057a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80057a8:	f000 8091 	beq.w	80058ce <HAL_TIM_ConfigClockSource+0x1aa>
 80057ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80057b0:	f200 8096 	bhi.w	80058e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80057b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057b8:	f000 8089 	beq.w	80058ce <HAL_TIM_ConfigClockSource+0x1aa>
 80057bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057c0:	f200 808e 	bhi.w	80058e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80057c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057c8:	d03e      	beq.n	8005848 <HAL_TIM_ConfigClockSource+0x124>
 80057ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ce:	f200 8087 	bhi.w	80058e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80057d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d6:	f000 8086 	beq.w	80058e6 <HAL_TIM_ConfigClockSource+0x1c2>
 80057da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057de:	d87f      	bhi.n	80058e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80057e0:	2b70      	cmp	r3, #112	; 0x70
 80057e2:	d01a      	beq.n	800581a <HAL_TIM_ConfigClockSource+0xf6>
 80057e4:	2b70      	cmp	r3, #112	; 0x70
 80057e6:	d87b      	bhi.n	80058e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80057e8:	2b60      	cmp	r3, #96	; 0x60
 80057ea:	d050      	beq.n	800588e <HAL_TIM_ConfigClockSource+0x16a>
 80057ec:	2b60      	cmp	r3, #96	; 0x60
 80057ee:	d877      	bhi.n	80058e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80057f0:	2b50      	cmp	r3, #80	; 0x50
 80057f2:	d03c      	beq.n	800586e <HAL_TIM_ConfigClockSource+0x14a>
 80057f4:	2b50      	cmp	r3, #80	; 0x50
 80057f6:	d873      	bhi.n	80058e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80057f8:	2b40      	cmp	r3, #64	; 0x40
 80057fa:	d058      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0x18a>
 80057fc:	2b40      	cmp	r3, #64	; 0x40
 80057fe:	d86f      	bhi.n	80058e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005800:	2b30      	cmp	r3, #48	; 0x30
 8005802:	d064      	beq.n	80058ce <HAL_TIM_ConfigClockSource+0x1aa>
 8005804:	2b30      	cmp	r3, #48	; 0x30
 8005806:	d86b      	bhi.n	80058e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005808:	2b20      	cmp	r3, #32
 800580a:	d060      	beq.n	80058ce <HAL_TIM_ConfigClockSource+0x1aa>
 800580c:	2b20      	cmp	r3, #32
 800580e:	d867      	bhi.n	80058e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005810:	2b00      	cmp	r3, #0
 8005812:	d05c      	beq.n	80058ce <HAL_TIM_ConfigClockSource+0x1aa>
 8005814:	2b10      	cmp	r3, #16
 8005816:	d05a      	beq.n	80058ce <HAL_TIM_ConfigClockSource+0x1aa>
 8005818:	e062      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	6899      	ldr	r1, [r3, #8]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f000 fc89 	bl	8006140 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800583c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	609a      	str	r2, [r3, #8]
      break;
 8005846:	e04f      	b.n	80058e8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6818      	ldr	r0, [r3, #0]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	6899      	ldr	r1, [r3, #8]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f000 fc72 	bl	8006140 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800586a:	609a      	str	r2, [r3, #8]
      break;
 800586c:	e03c      	b.n	80058e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	6859      	ldr	r1, [r3, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	461a      	mov	r2, r3
 800587c:	f000 fbe2 	bl	8006044 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2150      	movs	r1, #80	; 0x50
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fc3c 	bl	8006104 <TIM_ITRx_SetConfig>
      break;
 800588c:	e02c      	b.n	80058e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6818      	ldr	r0, [r3, #0]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	6859      	ldr	r1, [r3, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	461a      	mov	r2, r3
 800589c:	f000 fc01 	bl	80060a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2160      	movs	r1, #96	; 0x60
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fc2c 	bl	8006104 <TIM_ITRx_SetConfig>
      break;
 80058ac:	e01c      	b.n	80058e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	6859      	ldr	r1, [r3, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	461a      	mov	r2, r3
 80058bc:	f000 fbc2 	bl	8006044 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2140      	movs	r1, #64	; 0x40
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fc1c 	bl	8006104 <TIM_ITRx_SetConfig>
      break;
 80058cc:	e00c      	b.n	80058e8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4619      	mov	r1, r3
 80058d8:	4610      	mov	r0, r2
 80058da:	f000 fc13 	bl	8006104 <TIM_ITRx_SetConfig>
      break;
 80058de:	e003      	b.n	80058e8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	73fb      	strb	r3, [r7, #15]
      break;
 80058e4:	e000      	b.n	80058e8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80058e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	ffceff88 	.word	0xffceff88
 8005908:	00100040 	.word	0x00100040
 800590c:	00100030 	.word	0x00100030
 8005910:	00100020 	.word	0x00100020

08005914 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a40      	ldr	r2, [pc, #256]	; (8005a78 <TIM_Base_SetConfig+0x114>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d013      	beq.n	80059a4 <TIM_Base_SetConfig+0x40>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005982:	d00f      	beq.n	80059a4 <TIM_Base_SetConfig+0x40>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a3d      	ldr	r2, [pc, #244]	; (8005a7c <TIM_Base_SetConfig+0x118>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00b      	beq.n	80059a4 <TIM_Base_SetConfig+0x40>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a3c      	ldr	r2, [pc, #240]	; (8005a80 <TIM_Base_SetConfig+0x11c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d007      	beq.n	80059a4 <TIM_Base_SetConfig+0x40>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a3b      	ldr	r2, [pc, #236]	; (8005a84 <TIM_Base_SetConfig+0x120>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_Base_SetConfig+0x40>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a3a      	ldr	r2, [pc, #232]	; (8005a88 <TIM_Base_SetConfig+0x124>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d108      	bne.n	80059b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a2f      	ldr	r2, [pc, #188]	; (8005a78 <TIM_Base_SetConfig+0x114>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d01f      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c4:	d01b      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a2c      	ldr	r2, [pc, #176]	; (8005a7c <TIM_Base_SetConfig+0x118>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d017      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a2b      	ldr	r2, [pc, #172]	; (8005a80 <TIM_Base_SetConfig+0x11c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d013      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a2a      	ldr	r2, [pc, #168]	; (8005a84 <TIM_Base_SetConfig+0x120>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00f      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a29      	ldr	r2, [pc, #164]	; (8005a88 <TIM_Base_SetConfig+0x124>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00b      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a28      	ldr	r2, [pc, #160]	; (8005a8c <TIM_Base_SetConfig+0x128>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d007      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a27      	ldr	r2, [pc, #156]	; (8005a90 <TIM_Base_SetConfig+0x12c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d003      	beq.n	80059fe <TIM_Base_SetConfig+0x9a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a26      	ldr	r2, [pc, #152]	; (8005a94 <TIM_Base_SetConfig+0x130>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d108      	bne.n	8005a10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	689a      	ldr	r2, [r3, #8]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a10      	ldr	r2, [pc, #64]	; (8005a78 <TIM_Base_SetConfig+0x114>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d00f      	beq.n	8005a5c <TIM_Base_SetConfig+0xf8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a12      	ldr	r2, [pc, #72]	; (8005a88 <TIM_Base_SetConfig+0x124>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00b      	beq.n	8005a5c <TIM_Base_SetConfig+0xf8>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a11      	ldr	r2, [pc, #68]	; (8005a8c <TIM_Base_SetConfig+0x128>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d007      	beq.n	8005a5c <TIM_Base_SetConfig+0xf8>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a10      	ldr	r2, [pc, #64]	; (8005a90 <TIM_Base_SetConfig+0x12c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d003      	beq.n	8005a5c <TIM_Base_SetConfig+0xf8>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a0f      	ldr	r2, [pc, #60]	; (8005a94 <TIM_Base_SetConfig+0x130>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d103      	bne.n	8005a64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	691a      	ldr	r2, [r3, #16]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	615a      	str	r2, [r3, #20]
}
 8005a6a:	bf00      	nop
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40010000 	.word	0x40010000
 8005a7c:	40000400 	.word	0x40000400
 8005a80:	40000800 	.word	0x40000800
 8005a84:	40000c00 	.word	0x40000c00
 8005a88:	40010400 	.word	0x40010400
 8005a8c:	40014000 	.word	0x40014000
 8005a90:	40014400 	.word	0x40014400
 8005a94:	40014800 	.word	0x40014800

08005a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	f023 0201 	bic.w	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4b37      	ldr	r3, [pc, #220]	; (8005ba0 <TIM_OC1_SetConfig+0x108>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0303 	bic.w	r3, r3, #3
 8005ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f023 0302 	bic.w	r3, r3, #2
 8005ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a2d      	ldr	r2, [pc, #180]	; (8005ba4 <TIM_OC1_SetConfig+0x10c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d00f      	beq.n	8005b14 <TIM_OC1_SetConfig+0x7c>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a2c      	ldr	r2, [pc, #176]	; (8005ba8 <TIM_OC1_SetConfig+0x110>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00b      	beq.n	8005b14 <TIM_OC1_SetConfig+0x7c>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a2b      	ldr	r2, [pc, #172]	; (8005bac <TIM_OC1_SetConfig+0x114>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d007      	beq.n	8005b14 <TIM_OC1_SetConfig+0x7c>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a2a      	ldr	r2, [pc, #168]	; (8005bb0 <TIM_OC1_SetConfig+0x118>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d003      	beq.n	8005b14 <TIM_OC1_SetConfig+0x7c>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a29      	ldr	r2, [pc, #164]	; (8005bb4 <TIM_OC1_SetConfig+0x11c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d10c      	bne.n	8005b2e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f023 0308 	bic.w	r3, r3, #8
 8005b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f023 0304 	bic.w	r3, r3, #4
 8005b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a1c      	ldr	r2, [pc, #112]	; (8005ba4 <TIM_OC1_SetConfig+0x10c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00f      	beq.n	8005b56 <TIM_OC1_SetConfig+0xbe>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a1b      	ldr	r2, [pc, #108]	; (8005ba8 <TIM_OC1_SetConfig+0x110>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00b      	beq.n	8005b56 <TIM_OC1_SetConfig+0xbe>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a1a      	ldr	r2, [pc, #104]	; (8005bac <TIM_OC1_SetConfig+0x114>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d007      	beq.n	8005b56 <TIM_OC1_SetConfig+0xbe>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a19      	ldr	r2, [pc, #100]	; (8005bb0 <TIM_OC1_SetConfig+0x118>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d003      	beq.n	8005b56 <TIM_OC1_SetConfig+0xbe>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a18      	ldr	r2, [pc, #96]	; (8005bb4 <TIM_OC1_SetConfig+0x11c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d111      	bne.n	8005b7a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	621a      	str	r2, [r3, #32]
}
 8005b94:	bf00      	nop
 8005b96:	371c      	adds	r7, #28
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	fffeff8f 	.word	0xfffeff8f
 8005ba4:	40010000 	.word	0x40010000
 8005ba8:	40010400 	.word	0x40010400
 8005bac:	40014000 	.word	0x40014000
 8005bb0:	40014400 	.word	0x40014400
 8005bb4:	40014800 	.word	0x40014800

08005bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f023 0210 	bic.w	r2, r3, #16
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4b34      	ldr	r3, [pc, #208]	; (8005cb4 <TIM_OC2_SetConfig+0xfc>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	021b      	lsls	r3, r3, #8
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f023 0320 	bic.w	r3, r3, #32
 8005c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	011b      	lsls	r3, r3, #4
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a29      	ldr	r2, [pc, #164]	; (8005cb8 <TIM_OC2_SetConfig+0x100>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d003      	beq.n	8005c20 <TIM_OC2_SetConfig+0x68>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a28      	ldr	r2, [pc, #160]	; (8005cbc <TIM_OC2_SetConfig+0x104>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d10d      	bne.n	8005c3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	011b      	lsls	r3, r3, #4
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a1e      	ldr	r2, [pc, #120]	; (8005cb8 <TIM_OC2_SetConfig+0x100>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00f      	beq.n	8005c64 <TIM_OC2_SetConfig+0xac>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a1d      	ldr	r2, [pc, #116]	; (8005cbc <TIM_OC2_SetConfig+0x104>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00b      	beq.n	8005c64 <TIM_OC2_SetConfig+0xac>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a1c      	ldr	r2, [pc, #112]	; (8005cc0 <TIM_OC2_SetConfig+0x108>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d007      	beq.n	8005c64 <TIM_OC2_SetConfig+0xac>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a1b      	ldr	r2, [pc, #108]	; (8005cc4 <TIM_OC2_SetConfig+0x10c>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_OC2_SetConfig+0xac>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a1a      	ldr	r2, [pc, #104]	; (8005cc8 <TIM_OC2_SetConfig+0x110>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d113      	bne.n	8005c8c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	621a      	str	r2, [r3, #32]
}
 8005ca6:	bf00      	nop
 8005ca8:	371c      	adds	r7, #28
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	feff8fff 	.word	0xfeff8fff
 8005cb8:	40010000 	.word	0x40010000
 8005cbc:	40010400 	.word	0x40010400
 8005cc0:	40014000 	.word	0x40014000
 8005cc4:	40014400 	.word	0x40014400
 8005cc8:	40014800 	.word	0x40014800

08005ccc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4b33      	ldr	r3, [pc, #204]	; (8005dc4 <TIM_OC3_SetConfig+0xf8>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0303 	bic.w	r3, r3, #3
 8005d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	021b      	lsls	r3, r3, #8
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a28      	ldr	r2, [pc, #160]	; (8005dc8 <TIM_OC3_SetConfig+0xfc>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d003      	beq.n	8005d32 <TIM_OC3_SetConfig+0x66>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a27      	ldr	r2, [pc, #156]	; (8005dcc <TIM_OC3_SetConfig+0x100>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d10d      	bne.n	8005d4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	021b      	lsls	r3, r3, #8
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a1d      	ldr	r2, [pc, #116]	; (8005dc8 <TIM_OC3_SetConfig+0xfc>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00f      	beq.n	8005d76 <TIM_OC3_SetConfig+0xaa>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a1c      	ldr	r2, [pc, #112]	; (8005dcc <TIM_OC3_SetConfig+0x100>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00b      	beq.n	8005d76 <TIM_OC3_SetConfig+0xaa>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a1b      	ldr	r2, [pc, #108]	; (8005dd0 <TIM_OC3_SetConfig+0x104>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d007      	beq.n	8005d76 <TIM_OC3_SetConfig+0xaa>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a1a      	ldr	r2, [pc, #104]	; (8005dd4 <TIM_OC3_SetConfig+0x108>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d003      	beq.n	8005d76 <TIM_OC3_SetConfig+0xaa>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a19      	ldr	r2, [pc, #100]	; (8005dd8 <TIM_OC3_SetConfig+0x10c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d113      	bne.n	8005d9e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	621a      	str	r2, [r3, #32]
}
 8005db8:	bf00      	nop
 8005dba:	371c      	adds	r7, #28
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	fffeff8f 	.word	0xfffeff8f
 8005dc8:	40010000 	.word	0x40010000
 8005dcc:	40010400 	.word	0x40010400
 8005dd0:	40014000 	.word	0x40014000
 8005dd4:	40014400 	.word	0x40014400
 8005dd8:	40014800 	.word	0x40014800

08005ddc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4b24      	ldr	r3, [pc, #144]	; (8005e98 <TIM_OC4_SetConfig+0xbc>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	021b      	lsls	r3, r3, #8
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	031b      	lsls	r3, r3, #12
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a19      	ldr	r2, [pc, #100]	; (8005e9c <TIM_OC4_SetConfig+0xc0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d00f      	beq.n	8005e5c <TIM_OC4_SetConfig+0x80>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a18      	ldr	r2, [pc, #96]	; (8005ea0 <TIM_OC4_SetConfig+0xc4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00b      	beq.n	8005e5c <TIM_OC4_SetConfig+0x80>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a17      	ldr	r2, [pc, #92]	; (8005ea4 <TIM_OC4_SetConfig+0xc8>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d007      	beq.n	8005e5c <TIM_OC4_SetConfig+0x80>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a16      	ldr	r2, [pc, #88]	; (8005ea8 <TIM_OC4_SetConfig+0xcc>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d003      	beq.n	8005e5c <TIM_OC4_SetConfig+0x80>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a15      	ldr	r2, [pc, #84]	; (8005eac <TIM_OC4_SetConfig+0xd0>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d109      	bne.n	8005e70 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	019b      	lsls	r3, r3, #6
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	621a      	str	r2, [r3, #32]
}
 8005e8a:	bf00      	nop
 8005e8c:	371c      	adds	r7, #28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	feff8fff 	.word	0xfeff8fff
 8005e9c:	40010000 	.word	0x40010000
 8005ea0:	40010400 	.word	0x40010400
 8005ea4:	40014000 	.word	0x40014000
 8005ea8:	40014400 	.word	0x40014400
 8005eac:	40014800 	.word	0x40014800

08005eb0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	4b21      	ldr	r3, [pc, #132]	; (8005f60 <TIM_OC5_SetConfig+0xb0>)
 8005edc:	4013      	ands	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ef0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	041b      	lsls	r3, r3, #16
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a18      	ldr	r2, [pc, #96]	; (8005f64 <TIM_OC5_SetConfig+0xb4>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00f      	beq.n	8005f26 <TIM_OC5_SetConfig+0x76>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a17      	ldr	r2, [pc, #92]	; (8005f68 <TIM_OC5_SetConfig+0xb8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00b      	beq.n	8005f26 <TIM_OC5_SetConfig+0x76>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a16      	ldr	r2, [pc, #88]	; (8005f6c <TIM_OC5_SetConfig+0xbc>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d007      	beq.n	8005f26 <TIM_OC5_SetConfig+0x76>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a15      	ldr	r2, [pc, #84]	; (8005f70 <TIM_OC5_SetConfig+0xc0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d003      	beq.n	8005f26 <TIM_OC5_SetConfig+0x76>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a14      	ldr	r2, [pc, #80]	; (8005f74 <TIM_OC5_SetConfig+0xc4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d109      	bne.n	8005f3a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	021b      	lsls	r3, r3, #8
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	621a      	str	r2, [r3, #32]
}
 8005f54:	bf00      	nop
 8005f56:	371c      	adds	r7, #28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	fffeff8f 	.word	0xfffeff8f
 8005f64:	40010000 	.word	0x40010000
 8005f68:	40010400 	.word	0x40010400
 8005f6c:	40014000 	.word	0x40014000
 8005f70:	40014400 	.word	0x40014400
 8005f74:	40014800 	.word	0x40014800

08005f78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4b22      	ldr	r3, [pc, #136]	; (800602c <TIM_OC6_SetConfig+0xb4>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	021b      	lsls	r3, r3, #8
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	051b      	lsls	r3, r3, #20
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a19      	ldr	r2, [pc, #100]	; (8006030 <TIM_OC6_SetConfig+0xb8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00f      	beq.n	8005ff0 <TIM_OC6_SetConfig+0x78>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a18      	ldr	r2, [pc, #96]	; (8006034 <TIM_OC6_SetConfig+0xbc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00b      	beq.n	8005ff0 <TIM_OC6_SetConfig+0x78>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a17      	ldr	r2, [pc, #92]	; (8006038 <TIM_OC6_SetConfig+0xc0>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d007      	beq.n	8005ff0 <TIM_OC6_SetConfig+0x78>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a16      	ldr	r2, [pc, #88]	; (800603c <TIM_OC6_SetConfig+0xc4>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d003      	beq.n	8005ff0 <TIM_OC6_SetConfig+0x78>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a15      	ldr	r2, [pc, #84]	; (8006040 <TIM_OC6_SetConfig+0xc8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d109      	bne.n	8006004 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	029b      	lsls	r3, r3, #10
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	4313      	orrs	r3, r2
 8006002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	621a      	str	r2, [r3, #32]
}
 800601e:	bf00      	nop
 8006020:	371c      	adds	r7, #28
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	feff8fff 	.word	0xfeff8fff
 8006030:	40010000 	.word	0x40010000
 8006034:	40010400 	.word	0x40010400
 8006038:	40014000 	.word	0x40014000
 800603c:	40014400 	.word	0x40014400
 8006040:	40014800 	.word	0x40014800

08006044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	f023 0201 	bic.w	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800606e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	011b      	lsls	r3, r3, #4
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f023 030a 	bic.w	r3, r3, #10
 8006080:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4313      	orrs	r3, r2
 8006088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	621a      	str	r2, [r3, #32]
}
 8006096:	bf00      	nop
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b087      	sub	sp, #28
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	60f8      	str	r0, [r7, #12]
 80060aa:	60b9      	str	r1, [r7, #8]
 80060ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	f023 0210 	bic.w	r2, r3, #16
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	031b      	lsls	r3, r3, #12
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	621a      	str	r2, [r3, #32]
}
 80060f6:	bf00      	nop
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
	...

08006104 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4b09      	ldr	r3, [pc, #36]	; (800613c <TIM_ITRx_SetConfig+0x38>)
 8006118:	4013      	ands	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4313      	orrs	r3, r2
 8006122:	f043 0307 	orr.w	r3, r3, #7
 8006126:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	609a      	str	r2, [r3, #8]
}
 800612e:	bf00      	nop
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	ffcfff8f 	.word	0xffcfff8f

08006140 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800615a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	021a      	lsls	r2, r3, #8
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	431a      	orrs	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	4313      	orrs	r3, r2
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	609a      	str	r2, [r3, #8]
}
 8006174:	bf00      	nop
 8006176:	371c      	adds	r7, #28
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f003 031f 	and.w	r3, r3, #31
 8006192:	2201      	movs	r2, #1
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a1a      	ldr	r2, [r3, #32]
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	43db      	mvns	r3, r3
 80061a2:	401a      	ands	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a1a      	ldr	r2, [r3, #32]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f003 031f 	and.w	r3, r3, #31
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	fa01 f303 	lsl.w	r3, r1, r3
 80061b8:	431a      	orrs	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	621a      	str	r2, [r3, #32]
}
 80061be:	bf00      	nop
 80061c0:	371c      	adds	r7, #28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
	...

080061cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061e0:	2302      	movs	r3, #2
 80061e2:	e06d      	b.n	80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a30      	ldr	r2, [pc, #192]	; (80062cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d004      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a2f      	ldr	r2, [pc, #188]	; (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d108      	bne.n	800622a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800621e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006230:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a20      	ldr	r2, [pc, #128]	; (80062cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d022      	beq.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006256:	d01d      	beq.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1d      	ldr	r2, [pc, #116]	; (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d018      	beq.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1c      	ldr	r2, [pc, #112]	; (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d013      	beq.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1a      	ldr	r2, [pc, #104]	; (80062dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00e      	beq.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a15      	ldr	r2, [pc, #84]	; (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d009      	beq.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a16      	ldr	r2, [pc, #88]	; (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d004      	beq.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a15      	ldr	r2, [pc, #84]	; (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d10c      	bne.n	80062ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800629a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	40010000 	.word	0x40010000
 80062d0:	40010400 	.word	0x40010400
 80062d4:	40000400 	.word	0x40000400
 80062d8:	40000800 	.word	0x40000800
 80062dc:	40000c00 	.word	0x40000c00
 80062e0:	40001800 	.word	0x40001800
 80062e4:	40014000 	.word	0x40014000

080062e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006300:	2302      	movs	r3, #2
 8006302:	e065      	b.n	80063d0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	4313      	orrs	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	041b      	lsls	r3, r3, #16
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a16      	ldr	r2, [pc, #88]	; (80063dc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d004      	beq.n	8006392 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a14      	ldr	r2, [pc, #80]	; (80063e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d115      	bne.n	80063be <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639c:	051b      	lsls	r3, r3, #20
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	40010000 	.word	0x40010000
 80063e0:	40010400 	.word	0x40010400

080063e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e042      	b.n	80064b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006438:	2b00      	cmp	r3, #0
 800643a:	d106      	bne.n	800644a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7fa fe4d 	bl	80010e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2224      	movs	r2, #36	; 0x24
 800644e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0201 	bic.w	r2, r2, #1
 8006460:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f82c 	bl	80064c0 <UART_SetConfig>
 8006468:	4603      	mov	r3, r0
 800646a:	2b01      	cmp	r3, #1
 800646c:	d101      	bne.n	8006472 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e022      	b.n	80064b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fd88 	bl	8006f90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800648e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800649e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0201 	orr.w	r2, r2, #1
 80064ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fe0f 	bl	80070d4 <UART_CheckIdleState>
 80064b6:	4603      	mov	r3, r0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064c4:	b092      	sub	sp, #72	; 0x48
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	431a      	orrs	r2, r3
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	431a      	orrs	r2, r3
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	4bbe      	ldr	r3, [pc, #760]	; (80067e8 <UART_SetConfig+0x328>)
 80064f0:	4013      	ands	r3, r2
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	6812      	ldr	r2, [r2, #0]
 80064f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064f8:	430b      	orrs	r3, r1
 80064fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	68da      	ldr	r2, [r3, #12]
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4ab3      	ldr	r2, [pc, #716]	; (80067ec <UART_SetConfig+0x32c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d004      	beq.n	800652c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006528:	4313      	orrs	r3, r2
 800652a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689a      	ldr	r2, [r3, #8]
 8006532:	4baf      	ldr	r3, [pc, #700]	; (80067f0 <UART_SetConfig+0x330>)
 8006534:	4013      	ands	r3, r2
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	6812      	ldr	r2, [r2, #0]
 800653a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800653c:	430b      	orrs	r3, r1
 800653e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006546:	f023 010f 	bic.w	r1, r3, #15
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4aa6      	ldr	r2, [pc, #664]	; (80067f4 <UART_SetConfig+0x334>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d177      	bne.n	8006650 <UART_SetConfig+0x190>
 8006560:	4ba5      	ldr	r3, [pc, #660]	; (80067f8 <UART_SetConfig+0x338>)
 8006562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006564:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006568:	2b28      	cmp	r3, #40	; 0x28
 800656a:	d86d      	bhi.n	8006648 <UART_SetConfig+0x188>
 800656c:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <UART_SetConfig+0xb4>)
 800656e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006572:	bf00      	nop
 8006574:	08006619 	.word	0x08006619
 8006578:	08006649 	.word	0x08006649
 800657c:	08006649 	.word	0x08006649
 8006580:	08006649 	.word	0x08006649
 8006584:	08006649 	.word	0x08006649
 8006588:	08006649 	.word	0x08006649
 800658c:	08006649 	.word	0x08006649
 8006590:	08006649 	.word	0x08006649
 8006594:	08006621 	.word	0x08006621
 8006598:	08006649 	.word	0x08006649
 800659c:	08006649 	.word	0x08006649
 80065a0:	08006649 	.word	0x08006649
 80065a4:	08006649 	.word	0x08006649
 80065a8:	08006649 	.word	0x08006649
 80065ac:	08006649 	.word	0x08006649
 80065b0:	08006649 	.word	0x08006649
 80065b4:	08006629 	.word	0x08006629
 80065b8:	08006649 	.word	0x08006649
 80065bc:	08006649 	.word	0x08006649
 80065c0:	08006649 	.word	0x08006649
 80065c4:	08006649 	.word	0x08006649
 80065c8:	08006649 	.word	0x08006649
 80065cc:	08006649 	.word	0x08006649
 80065d0:	08006649 	.word	0x08006649
 80065d4:	08006631 	.word	0x08006631
 80065d8:	08006649 	.word	0x08006649
 80065dc:	08006649 	.word	0x08006649
 80065e0:	08006649 	.word	0x08006649
 80065e4:	08006649 	.word	0x08006649
 80065e8:	08006649 	.word	0x08006649
 80065ec:	08006649 	.word	0x08006649
 80065f0:	08006649 	.word	0x08006649
 80065f4:	08006639 	.word	0x08006639
 80065f8:	08006649 	.word	0x08006649
 80065fc:	08006649 	.word	0x08006649
 8006600:	08006649 	.word	0x08006649
 8006604:	08006649 	.word	0x08006649
 8006608:	08006649 	.word	0x08006649
 800660c:	08006649 	.word	0x08006649
 8006610:	08006649 	.word	0x08006649
 8006614:	08006641 	.word	0x08006641
 8006618:	2301      	movs	r3, #1
 800661a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800661e:	e222      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006620:	2304      	movs	r3, #4
 8006622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006626:	e21e      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006628:	2308      	movs	r3, #8
 800662a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800662e:	e21a      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006630:	2310      	movs	r3, #16
 8006632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006636:	e216      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006638:	2320      	movs	r3, #32
 800663a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800663e:	e212      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006640:	2340      	movs	r3, #64	; 0x40
 8006642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006646:	e20e      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006648:	2380      	movs	r3, #128	; 0x80
 800664a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800664e:	e20a      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a69      	ldr	r2, [pc, #420]	; (80067fc <UART_SetConfig+0x33c>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d130      	bne.n	80066bc <UART_SetConfig+0x1fc>
 800665a:	4b67      	ldr	r3, [pc, #412]	; (80067f8 <UART_SetConfig+0x338>)
 800665c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665e:	f003 0307 	and.w	r3, r3, #7
 8006662:	2b05      	cmp	r3, #5
 8006664:	d826      	bhi.n	80066b4 <UART_SetConfig+0x1f4>
 8006666:	a201      	add	r2, pc, #4	; (adr r2, 800666c <UART_SetConfig+0x1ac>)
 8006668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666c:	08006685 	.word	0x08006685
 8006670:	0800668d 	.word	0x0800668d
 8006674:	08006695 	.word	0x08006695
 8006678:	0800669d 	.word	0x0800669d
 800667c:	080066a5 	.word	0x080066a5
 8006680:	080066ad 	.word	0x080066ad
 8006684:	2300      	movs	r3, #0
 8006686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800668a:	e1ec      	b.n	8006a66 <UART_SetConfig+0x5a6>
 800668c:	2304      	movs	r3, #4
 800668e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006692:	e1e8      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006694:	2308      	movs	r3, #8
 8006696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800669a:	e1e4      	b.n	8006a66 <UART_SetConfig+0x5a6>
 800669c:	2310      	movs	r3, #16
 800669e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066a2:	e1e0      	b.n	8006a66 <UART_SetConfig+0x5a6>
 80066a4:	2320      	movs	r3, #32
 80066a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066aa:	e1dc      	b.n	8006a66 <UART_SetConfig+0x5a6>
 80066ac:	2340      	movs	r3, #64	; 0x40
 80066ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066b2:	e1d8      	b.n	8006a66 <UART_SetConfig+0x5a6>
 80066b4:	2380      	movs	r3, #128	; 0x80
 80066b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ba:	e1d4      	b.n	8006a66 <UART_SetConfig+0x5a6>
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a4f      	ldr	r2, [pc, #316]	; (8006800 <UART_SetConfig+0x340>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d130      	bne.n	8006728 <UART_SetConfig+0x268>
 80066c6:	4b4c      	ldr	r3, [pc, #304]	; (80067f8 <UART_SetConfig+0x338>)
 80066c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ca:	f003 0307 	and.w	r3, r3, #7
 80066ce:	2b05      	cmp	r3, #5
 80066d0:	d826      	bhi.n	8006720 <UART_SetConfig+0x260>
 80066d2:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <UART_SetConfig+0x218>)
 80066d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d8:	080066f1 	.word	0x080066f1
 80066dc:	080066f9 	.word	0x080066f9
 80066e0:	08006701 	.word	0x08006701
 80066e4:	08006709 	.word	0x08006709
 80066e8:	08006711 	.word	0x08006711
 80066ec:	08006719 	.word	0x08006719
 80066f0:	2300      	movs	r3, #0
 80066f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066f6:	e1b6      	b.n	8006a66 <UART_SetConfig+0x5a6>
 80066f8:	2304      	movs	r3, #4
 80066fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066fe:	e1b2      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006700:	2308      	movs	r3, #8
 8006702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006706:	e1ae      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006708:	2310      	movs	r3, #16
 800670a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800670e:	e1aa      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006710:	2320      	movs	r3, #32
 8006712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006716:	e1a6      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006718:	2340      	movs	r3, #64	; 0x40
 800671a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800671e:	e1a2      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006720:	2380      	movs	r3, #128	; 0x80
 8006722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006726:	e19e      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a35      	ldr	r2, [pc, #212]	; (8006804 <UART_SetConfig+0x344>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d130      	bne.n	8006794 <UART_SetConfig+0x2d4>
 8006732:	4b31      	ldr	r3, [pc, #196]	; (80067f8 <UART_SetConfig+0x338>)
 8006734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	2b05      	cmp	r3, #5
 800673c:	d826      	bhi.n	800678c <UART_SetConfig+0x2cc>
 800673e:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <UART_SetConfig+0x284>)
 8006740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006744:	0800675d 	.word	0x0800675d
 8006748:	08006765 	.word	0x08006765
 800674c:	0800676d 	.word	0x0800676d
 8006750:	08006775 	.word	0x08006775
 8006754:	0800677d 	.word	0x0800677d
 8006758:	08006785 	.word	0x08006785
 800675c:	2300      	movs	r3, #0
 800675e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006762:	e180      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006764:	2304      	movs	r3, #4
 8006766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800676a:	e17c      	b.n	8006a66 <UART_SetConfig+0x5a6>
 800676c:	2308      	movs	r3, #8
 800676e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006772:	e178      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006774:	2310      	movs	r3, #16
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677a:	e174      	b.n	8006a66 <UART_SetConfig+0x5a6>
 800677c:	2320      	movs	r3, #32
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006782:	e170      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006784:	2340      	movs	r3, #64	; 0x40
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678a:	e16c      	b.n	8006a66 <UART_SetConfig+0x5a6>
 800678c:	2380      	movs	r3, #128	; 0x80
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006792:	e168      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a1b      	ldr	r2, [pc, #108]	; (8006808 <UART_SetConfig+0x348>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d142      	bne.n	8006824 <UART_SetConfig+0x364>
 800679e:	4b16      	ldr	r3, [pc, #88]	; (80067f8 <UART_SetConfig+0x338>)
 80067a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	2b05      	cmp	r3, #5
 80067a8:	d838      	bhi.n	800681c <UART_SetConfig+0x35c>
 80067aa:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <UART_SetConfig+0x2f0>)
 80067ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b0:	080067c9 	.word	0x080067c9
 80067b4:	080067d1 	.word	0x080067d1
 80067b8:	080067d9 	.word	0x080067d9
 80067bc:	080067e1 	.word	0x080067e1
 80067c0:	0800680d 	.word	0x0800680d
 80067c4:	08006815 	.word	0x08006815
 80067c8:	2300      	movs	r3, #0
 80067ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ce:	e14a      	b.n	8006a66 <UART_SetConfig+0x5a6>
 80067d0:	2304      	movs	r3, #4
 80067d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067d6:	e146      	b.n	8006a66 <UART_SetConfig+0x5a6>
 80067d8:	2308      	movs	r3, #8
 80067da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067de:	e142      	b.n	8006a66 <UART_SetConfig+0x5a6>
 80067e0:	2310      	movs	r3, #16
 80067e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067e6:	e13e      	b.n	8006a66 <UART_SetConfig+0x5a6>
 80067e8:	cfff69f3 	.word	0xcfff69f3
 80067ec:	58000c00 	.word	0x58000c00
 80067f0:	11fff4ff 	.word	0x11fff4ff
 80067f4:	40011000 	.word	0x40011000
 80067f8:	58024400 	.word	0x58024400
 80067fc:	40004400 	.word	0x40004400
 8006800:	40004800 	.word	0x40004800
 8006804:	40004c00 	.word	0x40004c00
 8006808:	40005000 	.word	0x40005000
 800680c:	2320      	movs	r3, #32
 800680e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006812:	e128      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006814:	2340      	movs	r3, #64	; 0x40
 8006816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800681a:	e124      	b.n	8006a66 <UART_SetConfig+0x5a6>
 800681c:	2380      	movs	r3, #128	; 0x80
 800681e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006822:	e120      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4acb      	ldr	r2, [pc, #812]	; (8006b58 <UART_SetConfig+0x698>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d176      	bne.n	800691c <UART_SetConfig+0x45c>
 800682e:	4bcb      	ldr	r3, [pc, #812]	; (8006b5c <UART_SetConfig+0x69c>)
 8006830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006832:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006836:	2b28      	cmp	r3, #40	; 0x28
 8006838:	d86c      	bhi.n	8006914 <UART_SetConfig+0x454>
 800683a:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <UART_SetConfig+0x380>)
 800683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006840:	080068e5 	.word	0x080068e5
 8006844:	08006915 	.word	0x08006915
 8006848:	08006915 	.word	0x08006915
 800684c:	08006915 	.word	0x08006915
 8006850:	08006915 	.word	0x08006915
 8006854:	08006915 	.word	0x08006915
 8006858:	08006915 	.word	0x08006915
 800685c:	08006915 	.word	0x08006915
 8006860:	080068ed 	.word	0x080068ed
 8006864:	08006915 	.word	0x08006915
 8006868:	08006915 	.word	0x08006915
 800686c:	08006915 	.word	0x08006915
 8006870:	08006915 	.word	0x08006915
 8006874:	08006915 	.word	0x08006915
 8006878:	08006915 	.word	0x08006915
 800687c:	08006915 	.word	0x08006915
 8006880:	080068f5 	.word	0x080068f5
 8006884:	08006915 	.word	0x08006915
 8006888:	08006915 	.word	0x08006915
 800688c:	08006915 	.word	0x08006915
 8006890:	08006915 	.word	0x08006915
 8006894:	08006915 	.word	0x08006915
 8006898:	08006915 	.word	0x08006915
 800689c:	08006915 	.word	0x08006915
 80068a0:	080068fd 	.word	0x080068fd
 80068a4:	08006915 	.word	0x08006915
 80068a8:	08006915 	.word	0x08006915
 80068ac:	08006915 	.word	0x08006915
 80068b0:	08006915 	.word	0x08006915
 80068b4:	08006915 	.word	0x08006915
 80068b8:	08006915 	.word	0x08006915
 80068bc:	08006915 	.word	0x08006915
 80068c0:	08006905 	.word	0x08006905
 80068c4:	08006915 	.word	0x08006915
 80068c8:	08006915 	.word	0x08006915
 80068cc:	08006915 	.word	0x08006915
 80068d0:	08006915 	.word	0x08006915
 80068d4:	08006915 	.word	0x08006915
 80068d8:	08006915 	.word	0x08006915
 80068dc:	08006915 	.word	0x08006915
 80068e0:	0800690d 	.word	0x0800690d
 80068e4:	2301      	movs	r3, #1
 80068e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ea:	e0bc      	b.n	8006a66 <UART_SetConfig+0x5a6>
 80068ec:	2304      	movs	r3, #4
 80068ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068f2:	e0b8      	b.n	8006a66 <UART_SetConfig+0x5a6>
 80068f4:	2308      	movs	r3, #8
 80068f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068fa:	e0b4      	b.n	8006a66 <UART_SetConfig+0x5a6>
 80068fc:	2310      	movs	r3, #16
 80068fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006902:	e0b0      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006904:	2320      	movs	r3, #32
 8006906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800690a:	e0ac      	b.n	8006a66 <UART_SetConfig+0x5a6>
 800690c:	2340      	movs	r3, #64	; 0x40
 800690e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006912:	e0a8      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006914:	2380      	movs	r3, #128	; 0x80
 8006916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800691a:	e0a4      	b.n	8006a66 <UART_SetConfig+0x5a6>
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a8f      	ldr	r2, [pc, #572]	; (8006b60 <UART_SetConfig+0x6a0>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d130      	bne.n	8006988 <UART_SetConfig+0x4c8>
 8006926:	4b8d      	ldr	r3, [pc, #564]	; (8006b5c <UART_SetConfig+0x69c>)
 8006928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692a:	f003 0307 	and.w	r3, r3, #7
 800692e:	2b05      	cmp	r3, #5
 8006930:	d826      	bhi.n	8006980 <UART_SetConfig+0x4c0>
 8006932:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <UART_SetConfig+0x478>)
 8006934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006938:	08006951 	.word	0x08006951
 800693c:	08006959 	.word	0x08006959
 8006940:	08006961 	.word	0x08006961
 8006944:	08006969 	.word	0x08006969
 8006948:	08006971 	.word	0x08006971
 800694c:	08006979 	.word	0x08006979
 8006950:	2300      	movs	r3, #0
 8006952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006956:	e086      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006958:	2304      	movs	r3, #4
 800695a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800695e:	e082      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006960:	2308      	movs	r3, #8
 8006962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006966:	e07e      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006968:	2310      	movs	r3, #16
 800696a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800696e:	e07a      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006970:	2320      	movs	r3, #32
 8006972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006976:	e076      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006978:	2340      	movs	r3, #64	; 0x40
 800697a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800697e:	e072      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006980:	2380      	movs	r3, #128	; 0x80
 8006982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006986:	e06e      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a75      	ldr	r2, [pc, #468]	; (8006b64 <UART_SetConfig+0x6a4>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d130      	bne.n	80069f4 <UART_SetConfig+0x534>
 8006992:	4b72      	ldr	r3, [pc, #456]	; (8006b5c <UART_SetConfig+0x69c>)
 8006994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	2b05      	cmp	r3, #5
 800699c:	d826      	bhi.n	80069ec <UART_SetConfig+0x52c>
 800699e:	a201      	add	r2, pc, #4	; (adr r2, 80069a4 <UART_SetConfig+0x4e4>)
 80069a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a4:	080069bd 	.word	0x080069bd
 80069a8:	080069c5 	.word	0x080069c5
 80069ac:	080069cd 	.word	0x080069cd
 80069b0:	080069d5 	.word	0x080069d5
 80069b4:	080069dd 	.word	0x080069dd
 80069b8:	080069e5 	.word	0x080069e5
 80069bc:	2300      	movs	r3, #0
 80069be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069c2:	e050      	b.n	8006a66 <UART_SetConfig+0x5a6>
 80069c4:	2304      	movs	r3, #4
 80069c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ca:	e04c      	b.n	8006a66 <UART_SetConfig+0x5a6>
 80069cc:	2308      	movs	r3, #8
 80069ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069d2:	e048      	b.n	8006a66 <UART_SetConfig+0x5a6>
 80069d4:	2310      	movs	r3, #16
 80069d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069da:	e044      	b.n	8006a66 <UART_SetConfig+0x5a6>
 80069dc:	2320      	movs	r3, #32
 80069de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069e2:	e040      	b.n	8006a66 <UART_SetConfig+0x5a6>
 80069e4:	2340      	movs	r3, #64	; 0x40
 80069e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ea:	e03c      	b.n	8006a66 <UART_SetConfig+0x5a6>
 80069ec:	2380      	movs	r3, #128	; 0x80
 80069ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069f2:	e038      	b.n	8006a66 <UART_SetConfig+0x5a6>
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a5b      	ldr	r2, [pc, #364]	; (8006b68 <UART_SetConfig+0x6a8>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d130      	bne.n	8006a60 <UART_SetConfig+0x5a0>
 80069fe:	4b57      	ldr	r3, [pc, #348]	; (8006b5c <UART_SetConfig+0x69c>)
 8006a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	2b05      	cmp	r3, #5
 8006a08:	d826      	bhi.n	8006a58 <UART_SetConfig+0x598>
 8006a0a:	a201      	add	r2, pc, #4	; (adr r2, 8006a10 <UART_SetConfig+0x550>)
 8006a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a10:	08006a29 	.word	0x08006a29
 8006a14:	08006a31 	.word	0x08006a31
 8006a18:	08006a39 	.word	0x08006a39
 8006a1c:	08006a41 	.word	0x08006a41
 8006a20:	08006a49 	.word	0x08006a49
 8006a24:	08006a51 	.word	0x08006a51
 8006a28:	2302      	movs	r3, #2
 8006a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a2e:	e01a      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006a30:	2304      	movs	r3, #4
 8006a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a36:	e016      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006a38:	2308      	movs	r3, #8
 8006a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a3e:	e012      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006a40:	2310      	movs	r3, #16
 8006a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a46:	e00e      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006a48:	2320      	movs	r3, #32
 8006a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a4e:	e00a      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006a50:	2340      	movs	r3, #64	; 0x40
 8006a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a56:	e006      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006a58:	2380      	movs	r3, #128	; 0x80
 8006a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a5e:	e002      	b.n	8006a66 <UART_SetConfig+0x5a6>
 8006a60:	2380      	movs	r3, #128	; 0x80
 8006a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a3f      	ldr	r2, [pc, #252]	; (8006b68 <UART_SetConfig+0x6a8>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	f040 80f8 	bne.w	8006c62 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	dc46      	bgt.n	8006b08 <UART_SetConfig+0x648>
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	f2c0 8082 	blt.w	8006b84 <UART_SetConfig+0x6c4>
 8006a80:	3b02      	subs	r3, #2
 8006a82:	2b1e      	cmp	r3, #30
 8006a84:	d87e      	bhi.n	8006b84 <UART_SetConfig+0x6c4>
 8006a86:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <UART_SetConfig+0x5cc>)
 8006a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8c:	08006b0f 	.word	0x08006b0f
 8006a90:	08006b85 	.word	0x08006b85
 8006a94:	08006b17 	.word	0x08006b17
 8006a98:	08006b85 	.word	0x08006b85
 8006a9c:	08006b85 	.word	0x08006b85
 8006aa0:	08006b85 	.word	0x08006b85
 8006aa4:	08006b27 	.word	0x08006b27
 8006aa8:	08006b85 	.word	0x08006b85
 8006aac:	08006b85 	.word	0x08006b85
 8006ab0:	08006b85 	.word	0x08006b85
 8006ab4:	08006b85 	.word	0x08006b85
 8006ab8:	08006b85 	.word	0x08006b85
 8006abc:	08006b85 	.word	0x08006b85
 8006ac0:	08006b85 	.word	0x08006b85
 8006ac4:	08006b37 	.word	0x08006b37
 8006ac8:	08006b85 	.word	0x08006b85
 8006acc:	08006b85 	.word	0x08006b85
 8006ad0:	08006b85 	.word	0x08006b85
 8006ad4:	08006b85 	.word	0x08006b85
 8006ad8:	08006b85 	.word	0x08006b85
 8006adc:	08006b85 	.word	0x08006b85
 8006ae0:	08006b85 	.word	0x08006b85
 8006ae4:	08006b85 	.word	0x08006b85
 8006ae8:	08006b85 	.word	0x08006b85
 8006aec:	08006b85 	.word	0x08006b85
 8006af0:	08006b85 	.word	0x08006b85
 8006af4:	08006b85 	.word	0x08006b85
 8006af8:	08006b85 	.word	0x08006b85
 8006afc:	08006b85 	.word	0x08006b85
 8006b00:	08006b85 	.word	0x08006b85
 8006b04:	08006b77 	.word	0x08006b77
 8006b08:	2b40      	cmp	r3, #64	; 0x40
 8006b0a:	d037      	beq.n	8006b7c <UART_SetConfig+0x6bc>
 8006b0c:	e03a      	b.n	8006b84 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006b0e:	f7fd fd03 	bl	8004518 <HAL_RCCEx_GetD3PCLK1Freq>
 8006b12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b14:	e03c      	b.n	8006b90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fd fd12 	bl	8004544 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b24:	e034      	b.n	8006b90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b26:	f107 0318 	add.w	r3, r7, #24
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fd fe5e 	bl	80047ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b34:	e02c      	b.n	8006b90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b36:	4b09      	ldr	r3, [pc, #36]	; (8006b5c <UART_SetConfig+0x69c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0320 	and.w	r3, r3, #32
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d016      	beq.n	8006b70 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b42:	4b06      	ldr	r3, [pc, #24]	; (8006b5c <UART_SetConfig+0x69c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	08db      	lsrs	r3, r3, #3
 8006b48:	f003 0303 	and.w	r3, r3, #3
 8006b4c:	4a07      	ldr	r2, [pc, #28]	; (8006b6c <UART_SetConfig+0x6ac>)
 8006b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b54:	e01c      	b.n	8006b90 <UART_SetConfig+0x6d0>
 8006b56:	bf00      	nop
 8006b58:	40011400 	.word	0x40011400
 8006b5c:	58024400 	.word	0x58024400
 8006b60:	40007800 	.word	0x40007800
 8006b64:	40007c00 	.word	0x40007c00
 8006b68:	58000c00 	.word	0x58000c00
 8006b6c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006b70:	4b9d      	ldr	r3, [pc, #628]	; (8006de8 <UART_SetConfig+0x928>)
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b74:	e00c      	b.n	8006b90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b76:	4b9d      	ldr	r3, [pc, #628]	; (8006dec <UART_SetConfig+0x92c>)
 8006b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b7a:	e009      	b.n	8006b90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b82:	e005      	b.n	8006b90 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006b84:	2300      	movs	r3, #0
 8006b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006b8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 81de 	beq.w	8006f54 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	4a94      	ldr	r2, [pc, #592]	; (8006df0 <UART_SetConfig+0x930>)
 8006b9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006baa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	4413      	add	r3, r2
 8006bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d305      	bcc.n	8006bc8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d903      	bls.n	8006bd0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006bce:	e1c1      	b.n	8006f54 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	60bb      	str	r3, [r7, #8]
 8006bd6:	60fa      	str	r2, [r7, #12]
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bdc:	4a84      	ldr	r2, [pc, #528]	; (8006df0 <UART_SetConfig+0x930>)
 8006bde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	2200      	movs	r2, #0
 8006be6:	603b      	str	r3, [r7, #0]
 8006be8:	607a      	str	r2, [r7, #4]
 8006bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bf2:	f7f9 fb71 	bl	80002d8 <__aeabi_uldivmod>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4610      	mov	r0, r2
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	f04f 0200 	mov.w	r2, #0
 8006c02:	f04f 0300 	mov.w	r3, #0
 8006c06:	020b      	lsls	r3, r1, #8
 8006c08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c0c:	0202      	lsls	r2, r0, #8
 8006c0e:	6979      	ldr	r1, [r7, #20]
 8006c10:	6849      	ldr	r1, [r1, #4]
 8006c12:	0849      	lsrs	r1, r1, #1
 8006c14:	2000      	movs	r0, #0
 8006c16:	460c      	mov	r4, r1
 8006c18:	4605      	mov	r5, r0
 8006c1a:	eb12 0804 	adds.w	r8, r2, r4
 8006c1e:	eb43 0905 	adc.w	r9, r3, r5
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	469a      	mov	sl, r3
 8006c2a:	4693      	mov	fp, r2
 8006c2c:	4652      	mov	r2, sl
 8006c2e:	465b      	mov	r3, fp
 8006c30:	4640      	mov	r0, r8
 8006c32:	4649      	mov	r1, r9
 8006c34:	f7f9 fb50 	bl	80002d8 <__aeabi_uldivmod>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c46:	d308      	bcc.n	8006c5a <UART_SetConfig+0x79a>
 8006c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c4e:	d204      	bcs.n	8006c5a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c56:	60da      	str	r2, [r3, #12]
 8006c58:	e17c      	b.n	8006f54 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006c60:	e178      	b.n	8006f54 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c6a:	f040 80c5 	bne.w	8006df8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006c6e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c72:	2b20      	cmp	r3, #32
 8006c74:	dc48      	bgt.n	8006d08 <UART_SetConfig+0x848>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	db7b      	blt.n	8006d72 <UART_SetConfig+0x8b2>
 8006c7a:	2b20      	cmp	r3, #32
 8006c7c:	d879      	bhi.n	8006d72 <UART_SetConfig+0x8b2>
 8006c7e:	a201      	add	r2, pc, #4	; (adr r2, 8006c84 <UART_SetConfig+0x7c4>)
 8006c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c84:	08006d0f 	.word	0x08006d0f
 8006c88:	08006d17 	.word	0x08006d17
 8006c8c:	08006d73 	.word	0x08006d73
 8006c90:	08006d73 	.word	0x08006d73
 8006c94:	08006d1f 	.word	0x08006d1f
 8006c98:	08006d73 	.word	0x08006d73
 8006c9c:	08006d73 	.word	0x08006d73
 8006ca0:	08006d73 	.word	0x08006d73
 8006ca4:	08006d2f 	.word	0x08006d2f
 8006ca8:	08006d73 	.word	0x08006d73
 8006cac:	08006d73 	.word	0x08006d73
 8006cb0:	08006d73 	.word	0x08006d73
 8006cb4:	08006d73 	.word	0x08006d73
 8006cb8:	08006d73 	.word	0x08006d73
 8006cbc:	08006d73 	.word	0x08006d73
 8006cc0:	08006d73 	.word	0x08006d73
 8006cc4:	08006d3f 	.word	0x08006d3f
 8006cc8:	08006d73 	.word	0x08006d73
 8006ccc:	08006d73 	.word	0x08006d73
 8006cd0:	08006d73 	.word	0x08006d73
 8006cd4:	08006d73 	.word	0x08006d73
 8006cd8:	08006d73 	.word	0x08006d73
 8006cdc:	08006d73 	.word	0x08006d73
 8006ce0:	08006d73 	.word	0x08006d73
 8006ce4:	08006d73 	.word	0x08006d73
 8006ce8:	08006d73 	.word	0x08006d73
 8006cec:	08006d73 	.word	0x08006d73
 8006cf0:	08006d73 	.word	0x08006d73
 8006cf4:	08006d73 	.word	0x08006d73
 8006cf8:	08006d73 	.word	0x08006d73
 8006cfc:	08006d73 	.word	0x08006d73
 8006d00:	08006d73 	.word	0x08006d73
 8006d04:	08006d65 	.word	0x08006d65
 8006d08:	2b40      	cmp	r3, #64	; 0x40
 8006d0a:	d02e      	beq.n	8006d6a <UART_SetConfig+0x8aa>
 8006d0c:	e031      	b.n	8006d72 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d0e:	f7fc fc91 	bl	8003634 <HAL_RCC_GetPCLK1Freq>
 8006d12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d14:	e033      	b.n	8006d7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d16:	f7fc fca3 	bl	8003660 <HAL_RCC_GetPCLK2Freq>
 8006d1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d1c:	e02f      	b.n	8006d7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fd fc0e 	bl	8004544 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d2c:	e027      	b.n	8006d7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d2e:	f107 0318 	add.w	r3, r7, #24
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fd fd5a 	bl	80047ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d3c:	e01f      	b.n	8006d7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d3e:	4b2d      	ldr	r3, [pc, #180]	; (8006df4 <UART_SetConfig+0x934>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0320 	and.w	r3, r3, #32
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d009      	beq.n	8006d5e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d4a:	4b2a      	ldr	r3, [pc, #168]	; (8006df4 <UART_SetConfig+0x934>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	08db      	lsrs	r3, r3, #3
 8006d50:	f003 0303 	and.w	r3, r3, #3
 8006d54:	4a24      	ldr	r2, [pc, #144]	; (8006de8 <UART_SetConfig+0x928>)
 8006d56:	fa22 f303 	lsr.w	r3, r2, r3
 8006d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d5c:	e00f      	b.n	8006d7e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006d5e:	4b22      	ldr	r3, [pc, #136]	; (8006de8 <UART_SetConfig+0x928>)
 8006d60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d62:	e00c      	b.n	8006d7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d64:	4b21      	ldr	r3, [pc, #132]	; (8006dec <UART_SetConfig+0x92c>)
 8006d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d68:	e009      	b.n	8006d7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d70:	e005      	b.n	8006d7e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006d7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 80e7 	beq.w	8006f54 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	4a19      	ldr	r2, [pc, #100]	; (8006df0 <UART_SetConfig+0x930>)
 8006d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d90:	461a      	mov	r2, r3
 8006d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d94:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d98:	005a      	lsls	r2, r3, #1
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	085b      	lsrs	r3, r3, #1
 8006da0:	441a      	add	r2, r3
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006daa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dae:	2b0f      	cmp	r3, #15
 8006db0:	d916      	bls.n	8006de0 <UART_SetConfig+0x920>
 8006db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006db8:	d212      	bcs.n	8006de0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	f023 030f 	bic.w	r3, r3, #15
 8006dc2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	085b      	lsrs	r3, r3, #1
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	f003 0307 	and.w	r3, r3, #7
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006ddc:	60da      	str	r2, [r3, #12]
 8006dde:	e0b9      	b.n	8006f54 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006de6:	e0b5      	b.n	8006f54 <UART_SetConfig+0xa94>
 8006de8:	03d09000 	.word	0x03d09000
 8006dec:	003d0900 	.word	0x003d0900
 8006df0:	08007b94 	.word	0x08007b94
 8006df4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006df8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006dfc:	2b20      	cmp	r3, #32
 8006dfe:	dc49      	bgt.n	8006e94 <UART_SetConfig+0x9d4>
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	db7c      	blt.n	8006efe <UART_SetConfig+0xa3e>
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d87a      	bhi.n	8006efe <UART_SetConfig+0xa3e>
 8006e08:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <UART_SetConfig+0x950>)
 8006e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0e:	bf00      	nop
 8006e10:	08006e9b 	.word	0x08006e9b
 8006e14:	08006ea3 	.word	0x08006ea3
 8006e18:	08006eff 	.word	0x08006eff
 8006e1c:	08006eff 	.word	0x08006eff
 8006e20:	08006eab 	.word	0x08006eab
 8006e24:	08006eff 	.word	0x08006eff
 8006e28:	08006eff 	.word	0x08006eff
 8006e2c:	08006eff 	.word	0x08006eff
 8006e30:	08006ebb 	.word	0x08006ebb
 8006e34:	08006eff 	.word	0x08006eff
 8006e38:	08006eff 	.word	0x08006eff
 8006e3c:	08006eff 	.word	0x08006eff
 8006e40:	08006eff 	.word	0x08006eff
 8006e44:	08006eff 	.word	0x08006eff
 8006e48:	08006eff 	.word	0x08006eff
 8006e4c:	08006eff 	.word	0x08006eff
 8006e50:	08006ecb 	.word	0x08006ecb
 8006e54:	08006eff 	.word	0x08006eff
 8006e58:	08006eff 	.word	0x08006eff
 8006e5c:	08006eff 	.word	0x08006eff
 8006e60:	08006eff 	.word	0x08006eff
 8006e64:	08006eff 	.word	0x08006eff
 8006e68:	08006eff 	.word	0x08006eff
 8006e6c:	08006eff 	.word	0x08006eff
 8006e70:	08006eff 	.word	0x08006eff
 8006e74:	08006eff 	.word	0x08006eff
 8006e78:	08006eff 	.word	0x08006eff
 8006e7c:	08006eff 	.word	0x08006eff
 8006e80:	08006eff 	.word	0x08006eff
 8006e84:	08006eff 	.word	0x08006eff
 8006e88:	08006eff 	.word	0x08006eff
 8006e8c:	08006eff 	.word	0x08006eff
 8006e90:	08006ef1 	.word	0x08006ef1
 8006e94:	2b40      	cmp	r3, #64	; 0x40
 8006e96:	d02e      	beq.n	8006ef6 <UART_SetConfig+0xa36>
 8006e98:	e031      	b.n	8006efe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e9a:	f7fc fbcb 	bl	8003634 <HAL_RCC_GetPCLK1Freq>
 8006e9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006ea0:	e033      	b.n	8006f0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ea2:	f7fc fbdd 	bl	8003660 <HAL_RCC_GetPCLK2Freq>
 8006ea6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006ea8:	e02f      	b.n	8006f0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fd fb48 	bl	8004544 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eb8:	e027      	b.n	8006f0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eba:	f107 0318 	add.w	r3, r7, #24
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fd fc94 	bl	80047ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ec8:	e01f      	b.n	8006f0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006eca:	4b2d      	ldr	r3, [pc, #180]	; (8006f80 <UART_SetConfig+0xac0>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0320 	and.w	r3, r3, #32
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d009      	beq.n	8006eea <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ed6:	4b2a      	ldr	r3, [pc, #168]	; (8006f80 <UART_SetConfig+0xac0>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	08db      	lsrs	r3, r3, #3
 8006edc:	f003 0303 	and.w	r3, r3, #3
 8006ee0:	4a28      	ldr	r2, [pc, #160]	; (8006f84 <UART_SetConfig+0xac4>)
 8006ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ee8:	e00f      	b.n	8006f0a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006eea:	4b26      	ldr	r3, [pc, #152]	; (8006f84 <UART_SetConfig+0xac4>)
 8006eec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eee:	e00c      	b.n	8006f0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ef0:	4b25      	ldr	r3, [pc, #148]	; (8006f88 <UART_SetConfig+0xac8>)
 8006ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ef4:	e009      	b.n	8006f0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006efc:	e005      	b.n	8006f0a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006efe:	2300      	movs	r3, #0
 8006f00:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006f08:	bf00      	nop
    }

    if (pclk != 0U)
 8006f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d021      	beq.n	8006f54 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	4a1d      	ldr	r2, [pc, #116]	; (8006f8c <UART_SetConfig+0xacc>)
 8006f16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	085b      	lsrs	r3, r3, #1
 8006f28:	441a      	add	r2, r3
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f32:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f36:	2b0f      	cmp	r3, #15
 8006f38:	d909      	bls.n	8006f4e <UART_SetConfig+0xa8e>
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f40:	d205      	bcs.n	8006f4e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60da      	str	r2, [r3, #12]
 8006f4c:	e002      	b.n	8006f54 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2200      	movs	r2, #0
 8006f68:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006f70:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3748      	adds	r7, #72	; 0x48
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f7e:	bf00      	nop
 8006f80:	58024400 	.word	0x58024400
 8006f84:	03d09000 	.word	0x03d09000
 8006f88:	003d0900 	.word	0x003d0900
 8006f8c:	08007b94 	.word	0x08007b94

08006f90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00a      	beq.n	8006fba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00a      	beq.n	8006fdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00a      	beq.n	8006ffe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007002:	f003 0308 	and.w	r3, r3, #8
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007024:	f003 0310 	and.w	r3, r3, #16
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00a      	beq.n	8007042 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007046:	f003 0320 	and.w	r3, r3, #32
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706c:	2b00      	cmp	r3, #0
 800706e:	d01a      	beq.n	80070a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800708e:	d10a      	bne.n	80070a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	605a      	str	r2, [r3, #4]
  }
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af02      	add	r7, sp, #8
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070e4:	f7fa f9d0 	bl	8001488 <HAL_GetTick>
 80070e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0308 	and.w	r3, r3, #8
 80070f4:	2b08      	cmp	r3, #8
 80070f6:	d10e      	bne.n	8007116 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f82f 	bl	800716a <UART_WaitOnFlagUntilTimeout>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e025      	b.n	8007162 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0304 	and.w	r3, r3, #4
 8007120:	2b04      	cmp	r3, #4
 8007122:	d10e      	bne.n	8007142 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007124:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007128:	9300      	str	r3, [sp, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f819 	bl	800716a <UART_WaitOnFlagUntilTimeout>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e00f      	b.n	8007162 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2220      	movs	r2, #32
 8007146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2220      	movs	r2, #32
 800714e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b09c      	sub	sp, #112	; 0x70
 800716e:	af00      	add	r7, sp, #0
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	603b      	str	r3, [r7, #0]
 8007176:	4613      	mov	r3, r2
 8007178:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800717a:	e0a9      	b.n	80072d0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800717c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800717e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007182:	f000 80a5 	beq.w	80072d0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007186:	f7fa f97f 	bl	8001488 <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007192:	429a      	cmp	r2, r3
 8007194:	d302      	bcc.n	800719c <UART_WaitOnFlagUntilTimeout+0x32>
 8007196:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007198:	2b00      	cmp	r3, #0
 800719a:	d140      	bne.n	800721e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071b0:	667b      	str	r3, [r7, #100]	; 0x64
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	461a      	mov	r2, r3
 80071b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80071c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e6      	bne.n	800719c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3308      	adds	r3, #8
 80071d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d8:	e853 3f00 	ldrex	r3, [r3]
 80071dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e0:	f023 0301 	bic.w	r3, r3, #1
 80071e4:	663b      	str	r3, [r7, #96]	; 0x60
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3308      	adds	r3, #8
 80071ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80071f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e5      	bne.n	80071ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2220      	movs	r2, #32
 8007206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2220      	movs	r2, #32
 800720e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e069      	b.n	80072f2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0304 	and.w	r3, r3, #4
 8007228:	2b00      	cmp	r3, #0
 800722a:	d051      	beq.n	80072d0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800723a:	d149      	bne.n	80072d0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007244:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800725a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	461a      	mov	r2, r3
 8007262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007264:	637b      	str	r3, [r7, #52]	; 0x34
 8007266:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007268:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800726a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800726c:	e841 2300 	strex	r3, r2, [r1]
 8007270:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1e6      	bne.n	8007246 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3308      	adds	r3, #8
 800727e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	e853 3f00 	ldrex	r3, [r3]
 8007286:	613b      	str	r3, [r7, #16]
   return(result);
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f023 0301 	bic.w	r3, r3, #1
 800728e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3308      	adds	r3, #8
 8007296:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007298:	623a      	str	r2, [r7, #32]
 800729a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729c:	69f9      	ldr	r1, [r7, #28]
 800729e:	6a3a      	ldr	r2, [r7, #32]
 80072a0:	e841 2300 	strex	r3, r2, [r1]
 80072a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1e5      	bne.n	8007278 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2220      	movs	r2, #32
 80072b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2220      	movs	r2, #32
 80072c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e010      	b.n	80072f2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	69da      	ldr	r2, [r3, #28]
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	4013      	ands	r3, r2
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	429a      	cmp	r2, r3
 80072de:	bf0c      	ite	eq
 80072e0:	2301      	moveq	r3, #1
 80072e2:	2300      	movne	r3, #0
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	461a      	mov	r2, r3
 80072e8:	79fb      	ldrb	r3, [r7, #7]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	f43f af46 	beq.w	800717c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3770      	adds	r7, #112	; 0x70
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b085      	sub	sp, #20
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007308:	2b01      	cmp	r3, #1
 800730a:	d101      	bne.n	8007310 <HAL_UARTEx_DisableFifoMode+0x16>
 800730c:	2302      	movs	r3, #2
 800730e:	e027      	b.n	8007360 <HAL_UARTEx_DisableFifoMode+0x66>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2224      	movs	r2, #36	; 0x24
 800731c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0201 	bic.w	r2, r2, #1
 8007336:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800733e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2220      	movs	r2, #32
 8007352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800737c:	2b01      	cmp	r3, #1
 800737e:	d101      	bne.n	8007384 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007380:	2302      	movs	r3, #2
 8007382:	e02d      	b.n	80073e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2224      	movs	r2, #36	; 0x24
 8007390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f022 0201 	bic.w	r2, r2, #1
 80073aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	430a      	orrs	r2, r1
 80073be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f84f 	bl	8007464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2220      	movs	r2, #32
 80073d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d101      	bne.n	8007400 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80073fc:	2302      	movs	r3, #2
 80073fe:	e02d      	b.n	800745c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2224      	movs	r2, #36	; 0x24
 800740c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f022 0201 	bic.w	r2, r2, #1
 8007426:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f811 	bl	8007464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2220      	movs	r2, #32
 800744e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007470:	2b00      	cmp	r3, #0
 8007472:	d108      	bne.n	8007486 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007484:	e031      	b.n	80074ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007486:	2310      	movs	r3, #16
 8007488:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800748a:	2310      	movs	r3, #16
 800748c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	0e5b      	lsrs	r3, r3, #25
 8007496:	b2db      	uxtb	r3, r3
 8007498:	f003 0307 	and.w	r3, r3, #7
 800749c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	0f5b      	lsrs	r3, r3, #29
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	7b3a      	ldrb	r2, [r7, #12]
 80074b2:	4911      	ldr	r1, [pc, #68]	; (80074f8 <UARTEx_SetNbDataToProcess+0x94>)
 80074b4:	5c8a      	ldrb	r2, [r1, r2]
 80074b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074ba:	7b3a      	ldrb	r2, [r7, #12]
 80074bc:	490f      	ldr	r1, [pc, #60]	; (80074fc <UARTEx_SetNbDataToProcess+0x98>)
 80074be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	7b7a      	ldrb	r2, [r7, #13]
 80074d0:	4909      	ldr	r1, [pc, #36]	; (80074f8 <UARTEx_SetNbDataToProcess+0x94>)
 80074d2:	5c8a      	ldrb	r2, [r1, r2]
 80074d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80074d8:	7b7a      	ldrb	r2, [r7, #13]
 80074da:	4908      	ldr	r1, [pc, #32]	; (80074fc <UARTEx_SetNbDataToProcess+0x98>)
 80074dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074de:	fb93 f3f2 	sdiv	r3, r3, r2
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80074ea:	bf00      	nop
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	08007bac 	.word	0x08007bac
 80074fc:	08007bb4 	.word	0x08007bb4

08007500 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007500:	b084      	sub	sp, #16
 8007502:	b580      	push	{r7, lr}
 8007504:	b084      	sub	sp, #16
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	f107 001c 	add.w	r0, r7, #28
 800750e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	2b01      	cmp	r3, #1
 8007516:	d120      	bne.n	800755a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	4b2a      	ldr	r3, [pc, #168]	; (80075d4 <USB_CoreInit+0xd4>)
 800752a:	4013      	ands	r3, r2
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800753c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800753e:	2b01      	cmp	r3, #1
 8007540:	d105      	bne.n	800754e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 faac 	bl	8007aac <USB_CoreReset>
 8007554:	4603      	mov	r3, r0
 8007556:	73fb      	strb	r3, [r7, #15]
 8007558:	e01a      	b.n	8007590 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 faa0 	bl	8007aac <USB_CoreReset>
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007572:	2b00      	cmp	r3, #0
 8007574:	d106      	bne.n	8007584 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	639a      	str	r2, [r3, #56]	; 0x38
 8007582:	e005      	b.n	8007590 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007588:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	2b01      	cmp	r3, #1
 8007594:	d116      	bne.n	80075c4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800759a:	b29a      	uxth	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80075a4:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <USB_CoreInit+0xd8>)
 80075a6:	4313      	orrs	r3, r2
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f043 0206 	orr.w	r2, r3, #6
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f043 0220 	orr.w	r2, r3, #32
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075d0:	b004      	add	sp, #16
 80075d2:	4770      	bx	lr
 80075d4:	ffbdffbf 	.word	0xffbdffbf
 80075d8:	03ee0000 	.word	0x03ee0000

080075dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f023 0201 	bic.w	r2, r3, #1
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	460b      	mov	r3, r1
 8007608:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800761a:	78fb      	ldrb	r3, [r7, #3]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d115      	bne.n	800764c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800762c:	2001      	movs	r0, #1
 800762e:	f7f9 ff37 	bl	80014a0 <HAL_Delay>
      ms++;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3301      	adds	r3, #1
 8007636:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fa29 	bl	8007a90 <USB_GetMode>
 800763e:	4603      	mov	r3, r0
 8007640:	2b01      	cmp	r3, #1
 8007642:	d01e      	beq.n	8007682 <USB_SetCurrentMode+0x84>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2b31      	cmp	r3, #49	; 0x31
 8007648:	d9f0      	bls.n	800762c <USB_SetCurrentMode+0x2e>
 800764a:	e01a      	b.n	8007682 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800764c:	78fb      	ldrb	r3, [r7, #3]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d115      	bne.n	800767e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800765e:	2001      	movs	r0, #1
 8007660:	f7f9 ff1e 	bl	80014a0 <HAL_Delay>
      ms++;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	3301      	adds	r3, #1
 8007668:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fa10 	bl	8007a90 <USB_GetMode>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d005      	beq.n	8007682 <USB_SetCurrentMode+0x84>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2b31      	cmp	r3, #49	; 0x31
 800767a:	d9f0      	bls.n	800765e <USB_SetCurrentMode+0x60>
 800767c:	e001      	b.n	8007682 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e005      	b.n	800768e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b32      	cmp	r3, #50	; 0x32
 8007686:	d101      	bne.n	800768c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e000      	b.n	800768e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
	...

08007698 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007698:	b084      	sub	sp, #16
 800769a:	b580      	push	{r7, lr}
 800769c:	b086      	sub	sp, #24
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80076a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80076b2:	2300      	movs	r3, #0
 80076b4:	613b      	str	r3, [r7, #16]
 80076b6:	e009      	b.n	80076cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	3340      	adds	r3, #64	; 0x40
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	2200      	movs	r2, #0
 80076c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	3301      	adds	r3, #1
 80076ca:	613b      	str	r3, [r7, #16]
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	2b0e      	cmp	r3, #14
 80076d0:	d9f2      	bls.n	80076b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80076d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d11c      	bne.n	8007712 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076e6:	f043 0302 	orr.w	r3, r3, #2
 80076ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	e005      	b.n	800771e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007716:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007724:	461a      	mov	r2, r3
 8007726:	2300      	movs	r3, #0
 8007728:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007730:	4619      	mov	r1, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007738:	461a      	mov	r2, r3
 800773a:	680b      	ldr	r3, [r1, #0]
 800773c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800773e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007740:	2b01      	cmp	r3, #1
 8007742:	d10c      	bne.n	800775e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007746:	2b00      	cmp	r3, #0
 8007748:	d104      	bne.n	8007754 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800774a:	2100      	movs	r1, #0
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f965 	bl	8007a1c <USB_SetDevSpeed>
 8007752:	e008      	b.n	8007766 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007754:	2101      	movs	r1, #1
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f960 	bl	8007a1c <USB_SetDevSpeed>
 800775c:	e003      	b.n	8007766 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800775e:	2103      	movs	r1, #3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f95b 	bl	8007a1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007766:	2110      	movs	r1, #16
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f8f3 	bl	8007954 <USB_FlushTxFifo>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f91f 	bl	80079bc <USB_FlushRxFifo>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d001      	beq.n	8007788 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778e:	461a      	mov	r2, r3
 8007790:	2300      	movs	r3, #0
 8007792:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800779a:	461a      	mov	r2, r3
 800779c:	2300      	movs	r3, #0
 800779e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a6:	461a      	mov	r2, r3
 80077a8:	2300      	movs	r3, #0
 80077aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077ac:	2300      	movs	r3, #0
 80077ae:	613b      	str	r3, [r7, #16]
 80077b0:	e043      	b.n	800783a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077c8:	d118      	bne.n	80077fc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10a      	bne.n	80077e6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	015a      	lsls	r2, r3, #5
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	4413      	add	r3, r2
 80077d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077dc:	461a      	mov	r2, r3
 80077de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077e2:	6013      	str	r3, [r2, #0]
 80077e4:	e013      	b.n	800780e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	015a      	lsls	r2, r3, #5
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f2:	461a      	mov	r2, r3
 80077f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	e008      	b.n	800780e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	015a      	lsls	r2, r3, #5
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	4413      	add	r3, r2
 8007804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007808:	461a      	mov	r2, r3
 800780a:	2300      	movs	r3, #0
 800780c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	4413      	add	r3, r2
 8007816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800781a:	461a      	mov	r2, r3
 800781c:	2300      	movs	r3, #0
 800781e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800782c:	461a      	mov	r2, r3
 800782e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007832:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	3301      	adds	r3, #1
 8007838:	613b      	str	r3, [r7, #16]
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	429a      	cmp	r2, r3
 8007840:	d3b7      	bcc.n	80077b2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007842:	2300      	movs	r3, #0
 8007844:	613b      	str	r3, [r7, #16]
 8007846:	e043      	b.n	80078d0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4413      	add	r3, r2
 8007850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800785a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800785e:	d118      	bne.n	8007892 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10a      	bne.n	800787c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007872:	461a      	mov	r2, r3
 8007874:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007878:	6013      	str	r3, [r2, #0]
 800787a:	e013      	b.n	80078a4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	015a      	lsls	r2, r3, #5
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	4413      	add	r3, r2
 8007884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007888:	461a      	mov	r2, r3
 800788a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800788e:	6013      	str	r3, [r2, #0]
 8007890:	e008      	b.n	80078a4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	015a      	lsls	r2, r3, #5
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4413      	add	r3, r2
 800789a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789e:	461a      	mov	r2, r3
 80078a0:	2300      	movs	r3, #0
 80078a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b0:	461a      	mov	r2, r3
 80078b2:	2300      	movs	r3, #0
 80078b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	015a      	lsls	r2, r3, #5
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	4413      	add	r3, r2
 80078be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c2:	461a      	mov	r2, r3
 80078c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	3301      	adds	r3, #1
 80078ce:	613b      	str	r3, [r7, #16]
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d3b7      	bcc.n	8007848 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80078f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80078fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d105      	bne.n	800790c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	f043 0210 	orr.w	r2, r3, #16
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	699a      	ldr	r2, [r3, #24]
 8007910:	4b0e      	ldr	r3, [pc, #56]	; (800794c <USB_DevInit+0x2b4>)
 8007912:	4313      	orrs	r3, r2
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800791a:	2b00      	cmp	r3, #0
 800791c:	d005      	beq.n	800792a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	f043 0208 	orr.w	r2, r3, #8
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800792a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800792c:	2b01      	cmp	r3, #1
 800792e:	d105      	bne.n	800793c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	699a      	ldr	r2, [r3, #24]
 8007934:	4b06      	ldr	r3, [pc, #24]	; (8007950 <USB_DevInit+0x2b8>)
 8007936:	4313      	orrs	r3, r2
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800793c:	7dfb      	ldrb	r3, [r7, #23]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007948:	b004      	add	sp, #16
 800794a:	4770      	bx	lr
 800794c:	803c3800 	.word	0x803c3800
 8007950:	40000004 	.word	0x40000004

08007954 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800795e:	2300      	movs	r3, #0
 8007960:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3301      	adds	r3, #1
 8007966:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4a13      	ldr	r2, [pc, #76]	; (80079b8 <USB_FlushTxFifo+0x64>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d901      	bls.n	8007974 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e01b      	b.n	80079ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	2b00      	cmp	r3, #0
 800797a:	daf2      	bge.n	8007962 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	019b      	lsls	r3, r3, #6
 8007984:	f043 0220 	orr.w	r2, r3, #32
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	3301      	adds	r3, #1
 8007990:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	4a08      	ldr	r2, [pc, #32]	; (80079b8 <USB_FlushTxFifo+0x64>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d901      	bls.n	800799e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e006      	b.n	80079ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	f003 0320 	and.w	r3, r3, #32
 80079a6:	2b20      	cmp	r3, #32
 80079a8:	d0f0      	beq.n	800798c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	00030d40 	.word	0x00030d40

080079bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3301      	adds	r3, #1
 80079cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	4a11      	ldr	r2, [pc, #68]	; (8007a18 <USB_FlushRxFifo+0x5c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d901      	bls.n	80079da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e018      	b.n	8007a0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	daf2      	bge.n	80079c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2210      	movs	r2, #16
 80079ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3301      	adds	r3, #1
 80079f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	4a08      	ldr	r2, [pc, #32]	; (8007a18 <USB_FlushRxFifo+0x5c>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d901      	bls.n	80079fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e006      	b.n	8007a0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	f003 0310 	and.w	r3, r3, #16
 8007a06:	2b10      	cmp	r3, #16
 8007a08:	d0f0      	beq.n	80079ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	00030d40 	.word	0x00030d40

08007a1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	78fb      	ldrb	r3, [r7, #3]
 8007a36:	68f9      	ldr	r1, [r7, #12]
 8007a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b085      	sub	sp, #20
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a68:	f023 0303 	bic.w	r3, r3, #3
 8007a6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a7c:	f043 0302 	orr.w	r3, r3, #2
 8007a80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	f003 0301 	and.w	r3, r3, #1
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	3301      	adds	r3, #1
 8007abc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	4a13      	ldr	r2, [pc, #76]	; (8007b10 <USB_CoreReset+0x64>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d901      	bls.n	8007aca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e01b      	b.n	8007b02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	daf2      	bge.n	8007ab8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	f043 0201 	orr.w	r2, r3, #1
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	4a09      	ldr	r2, [pc, #36]	; (8007b10 <USB_CoreReset+0x64>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d901      	bls.n	8007af4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e006      	b.n	8007b02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	f003 0301 	and.w	r3, r3, #1
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d0f0      	beq.n	8007ae2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	00030d40 	.word	0x00030d40

08007b14 <memset>:
 8007b14:	4402      	add	r2, r0
 8007b16:	4603      	mov	r3, r0
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d100      	bne.n	8007b1e <memset+0xa>
 8007b1c:	4770      	bx	lr
 8007b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b22:	e7f9      	b.n	8007b18 <memset+0x4>

08007b24 <__libc_init_array>:
 8007b24:	b570      	push	{r4, r5, r6, lr}
 8007b26:	4d0d      	ldr	r5, [pc, #52]	; (8007b5c <__libc_init_array+0x38>)
 8007b28:	4c0d      	ldr	r4, [pc, #52]	; (8007b60 <__libc_init_array+0x3c>)
 8007b2a:	1b64      	subs	r4, r4, r5
 8007b2c:	10a4      	asrs	r4, r4, #2
 8007b2e:	2600      	movs	r6, #0
 8007b30:	42a6      	cmp	r6, r4
 8007b32:	d109      	bne.n	8007b48 <__libc_init_array+0x24>
 8007b34:	4d0b      	ldr	r5, [pc, #44]	; (8007b64 <__libc_init_array+0x40>)
 8007b36:	4c0c      	ldr	r4, [pc, #48]	; (8007b68 <__libc_init_array+0x44>)
 8007b38:	f000 f818 	bl	8007b6c <_init>
 8007b3c:	1b64      	subs	r4, r4, r5
 8007b3e:	10a4      	asrs	r4, r4, #2
 8007b40:	2600      	movs	r6, #0
 8007b42:	42a6      	cmp	r6, r4
 8007b44:	d105      	bne.n	8007b52 <__libc_init_array+0x2e>
 8007b46:	bd70      	pop	{r4, r5, r6, pc}
 8007b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b4c:	4798      	blx	r3
 8007b4e:	3601      	adds	r6, #1
 8007b50:	e7ee      	b.n	8007b30 <__libc_init_array+0xc>
 8007b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b56:	4798      	blx	r3
 8007b58:	3601      	adds	r6, #1
 8007b5a:	e7f2      	b.n	8007b42 <__libc_init_array+0x1e>
 8007b5c:	08007bc4 	.word	0x08007bc4
 8007b60:	08007bc4 	.word	0x08007bc4
 8007b64:	08007bc4 	.word	0x08007bc4
 8007b68:	08007bc8 	.word	0x08007bc8

08007b6c <_init>:
 8007b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6e:	bf00      	nop
 8007b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b72:	bc08      	pop	{r3}
 8007b74:	469e      	mov	lr, r3
 8007b76:	4770      	bx	lr

08007b78 <_fini>:
 8007b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7a:	bf00      	nop
 8007b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7e:	bc08      	pop	{r3}
 8007b80:	469e      	mov	lr, r3
 8007b82:	4770      	bx	lr
