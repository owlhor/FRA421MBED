
H745_Dualcore_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002254  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  081024f4  081024f4  000124f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810264c  0810264c  0001264c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08102650  08102650  00012650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  10000000  08102654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000038  10000078  081026cc  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  100000b0  081026cc  000200b0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ac9d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000182c  00000000  00000000  0002ad45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000007d8  00000000  00000000  0002c578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000710  00000000  00000000  0002cd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000397f9  00000000  00000000  0002d460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00008bbb  00000000  00000000  00066c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017cdf3  00000000  00000000  0006f814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001ec607  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000027a0  00000000  00000000  001ec658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000078 	.word	0x10000078
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081024dc 	.word	0x081024dc

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000007c 	.word	0x1000007c
 81002dc:	081024dc 	.word	0x081024dc

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100380:	b480      	push	{r7}
 8100382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100384:	4b09      	ldr	r3, [pc, #36]	; (81003ac <SystemInit+0x2c>)
 8100386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810038a:	4a08      	ldr	r2, [pc, #32]	; (81003ac <SystemInit+0x2c>)
 810038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100394:	4b05      	ldr	r3, [pc, #20]	; (81003ac <SystemInit+0x2c>)
 8100396:	691b      	ldr	r3, [r3, #16]
 8100398:	4a04      	ldr	r2, [pc, #16]	; (81003ac <SystemInit+0x2c>)
 810039a:	f043 0310 	orr.w	r3, r3, #16
 810039e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81003a0:	bf00      	nop
 81003a2:	46bd      	mov	sp, r7
 81003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003a8:	4770      	bx	lr
 81003aa:	bf00      	nop
 81003ac:	e000ed00 	.word	0xe000ed00

081003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81003b0:	b5b0      	push	{r4, r5, r7, lr}
 81003b2:	b082      	sub	sp, #8
 81003b4:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81003b6:	4b3d      	ldr	r3, [pc, #244]	; (81004ac <main+0xfc>)
 81003b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003bc:	4a3b      	ldr	r2, [pc, #236]	; (81004ac <main+0xfc>)
 81003be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81003c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81003c6:	4b39      	ldr	r3, [pc, #228]	; (81004ac <main+0xfc>)
 81003c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81003d0:	603b      	str	r3, [r7, #0]
 81003d2:	683b      	ldr	r3, [r7, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81003d4:	2001      	movs	r0, #1
 81003d6:	f000 fe03 	bl	8100fe0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81003da:	f000 fe8d 	bl	81010f8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81003de:	2201      	movs	r2, #1
 81003e0:	2102      	movs	r1, #2
 81003e2:	2000      	movs	r0, #0
 81003e4:	f000 fe0e 	bl	8101004 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81003e8:	4b31      	ldr	r3, [pc, #196]	; (81004b0 <main+0x100>)
 81003ea:	681b      	ldr	r3, [r3, #0]
 81003ec:	091b      	lsrs	r3, r3, #4
 81003ee:	f003 030f 	and.w	r3, r3, #15
 81003f2:	2b07      	cmp	r3, #7
 81003f4:	d108      	bne.n	8100408 <main+0x58>
 81003f6:	4b2f      	ldr	r3, [pc, #188]	; (81004b4 <main+0x104>)
 81003f8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81003fc:	4a2d      	ldr	r2, [pc, #180]	; (81004b4 <main+0x104>)
 81003fe:	f043 0301 	orr.w	r3, r3, #1
 8100402:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100406:	e007      	b.n	8100418 <main+0x68>
 8100408:	4b2a      	ldr	r3, [pc, #168]	; (81004b4 <main+0x104>)
 810040a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810040e:	4a29      	ldr	r2, [pc, #164]	; (81004b4 <main+0x104>)
 8100410:	f043 0301 	orr.w	r3, r3, #1
 8100414:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100418:	f000 f9de 	bl	81007d8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810041c:	f000 f854 	bl	81004c8 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SRAM4->state1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8100420:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8100424:	4824      	ldr	r0, [pc, #144]	; (81004b8 <main+0x108>)
 8100426:	f000 fd57 	bl	8100ed8 <HAL_GPIO_ReadPin>
 810042a:	4603      	mov	r3, r0
 810042c:	461a      	mov	r2, r3
 810042e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8100432:	601a      	str	r2, [r3, #0]
	  chk2 = SRAM4->state1;
 8100434:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8100438:	681b      	ldr	r3, [r3, #0]
 810043a:	4a20      	ldr	r2, [pc, #128]	; (81004bc <main+0x10c>)
 810043c:	6013      	str	r3, [r2, #0]

	  if(HAL_GetTick()-timestamp_ld2 >= 200){
 810043e:	f000 fa73 	bl	8100928 <HAL_GetTick>
 8100442:	4602      	mov	r2, r0
 8100444:	4b1e      	ldr	r3, [pc, #120]	; (81004c0 <main+0x110>)
 8100446:	681b      	ldr	r3, [r3, #0]
 8100448:	1ad3      	subs	r3, r2, r3
 810044a:	2bc7      	cmp	r3, #199	; 0xc7
 810044c:	d908      	bls.n	8100460 <main+0xb0>
		  timestamp_ld2 = HAL_GetTick();
 810044e:	f000 fa6b 	bl	8100928 <HAL_GetTick>
 8100452:	4603      	mov	r3, r0
 8100454:	4a1a      	ldr	r2, [pc, #104]	; (81004c0 <main+0x110>)
 8100456:	6013      	str	r3, [r2, #0]
	  		  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8100458:	2102      	movs	r1, #2
 810045a:	481a      	ldr	r0, [pc, #104]	; (81004c4 <main+0x114>)
 810045c:	f000 fd6d 	bl	8100f3a <HAL_GPIO_TogglePin>

    register int i,j;
    uint32_t Random;

      //// if semaphore ok -> instantly lock
      if(HAL_HSEM_Take(5, 0) == HAL_OK){
 8100460:	2100      	movs	r1, #0
 8100462:	2005      	movs	r0, #5
 8100464:	f000 fd84 	bl	8100f70 <HAL_HSEM_Take>
 8100468:	4603      	mov	r3, r0
 810046a:	2b00      	cmp	r3, #0
 810046c:	d11a      	bne.n	81004a4 <main+0xf4>


    	        //sim Write array task
    	        for(j=0;j<5000;j++)
 810046e:	2500      	movs	r5, #0
 8100470:	e010      	b.n	8100494 <main+0xe4>
    	        {
    	      	  //// random something into DATA[] (unequal)
    	            Random = rand();
 8100472:	f000 fffb 	bl	810146c <rand>
 8100476:	4603      	mov	r3, r0
 8100478:	607b      	str	r3, [r7, #4]
    	            for(i=0;i<500;i++)
 810047a:	2400      	movs	r4, #0
 810047c:	e006      	b.n	810048c <main+0xdc>
    	            {
    	                SRAM4->DATA[i] =Random;
 810047e:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 8100482:	00a3      	lsls	r3, r4, #2
 8100484:	4413      	add	r3, r2
 8100486:	687a      	ldr	r2, [r7, #4]
 8100488:	605a      	str	r2, [r3, #4]
    	            for(i=0;i<500;i++)
 810048a:	3401      	adds	r4, #1
 810048c:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 8100490:	dbf5      	blt.n	810047e <main+0xce>
    	        for(j=0;j<5000;j++)
 8100492:	3501      	adds	r5, #1
 8100494:	f241 3387 	movw	r3, #4999	; 0x1387
 8100498:	429d      	cmp	r5, r3
 810049a:	ddea      	ble.n	8100472 <main+0xc2>
    	            }
    	        }

    	  HAL_HSEM_Release(5, 0);
 810049c:	2100      	movs	r1, #0
 810049e:	2005      	movs	r0, #5
 81004a0:	f000 fd8a 	bl	8100fb8 <HAL_HSEM_Release>
      	  }
      	  HAL_Delay(1);
 81004a4:	2001      	movs	r0, #1
 81004a6:	f000 fa4b 	bl	8100940 <HAL_Delay>
  {
 81004aa:	e7b9      	b.n	8100420 <main+0x70>
 81004ac:	58024400 	.word	0x58024400
 81004b0:	e000ed00 	.word	0xe000ed00
 81004b4:	58026400 	.word	0x58026400
 81004b8:	58020800 	.word	0x58020800
 81004bc:	10000008 	.word	0x10000008
 81004c0:	10000094 	.word	0x10000094
 81004c4:	58021000 	.word	0x58021000

081004c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81004c8:	b580      	push	{r7, lr}
 81004ca:	b088      	sub	sp, #32
 81004cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81004ce:	f107 030c 	add.w	r3, r7, #12
 81004d2:	2200      	movs	r2, #0
 81004d4:	601a      	str	r2, [r3, #0]
 81004d6:	605a      	str	r2, [r3, #4]
 81004d8:	609a      	str	r2, [r3, #8]
 81004da:	60da      	str	r2, [r3, #12]
 81004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81004de:	4b21      	ldr	r3, [pc, #132]	; (8100564 <MX_GPIO_Init+0x9c>)
 81004e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81004e4:	4a1f      	ldr	r2, [pc, #124]	; (8100564 <MX_GPIO_Init+0x9c>)
 81004e6:	f043 0304 	orr.w	r3, r3, #4
 81004ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81004ee:	4b1d      	ldr	r3, [pc, #116]	; (8100564 <MX_GPIO_Init+0x9c>)
 81004f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81004f4:	f003 0304 	and.w	r3, r3, #4
 81004f8:	60bb      	str	r3, [r7, #8]
 81004fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81004fc:	4b19      	ldr	r3, [pc, #100]	; (8100564 <MX_GPIO_Init+0x9c>)
 81004fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100502:	4a18      	ldr	r2, [pc, #96]	; (8100564 <MX_GPIO_Init+0x9c>)
 8100504:	f043 0310 	orr.w	r3, r3, #16
 8100508:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810050c:	4b15      	ldr	r3, [pc, #84]	; (8100564 <MX_GPIO_Init+0x9c>)
 810050e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100512:	f003 0310 	and.w	r3, r3, #16
 8100516:	607b      	str	r3, [r7, #4]
 8100518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 810051a:	2200      	movs	r2, #0
 810051c:	2102      	movs	r1, #2
 810051e:	4812      	ldr	r0, [pc, #72]	; (8100568 <MX_GPIO_Init+0xa0>)
 8100520:	f000 fcf2 	bl	8100f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8100524:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100528:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 810052a:	2300      	movs	r3, #0
 810052c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810052e:	2300      	movs	r3, #0
 8100530:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8100532:	f107 030c 	add.w	r3, r7, #12
 8100536:	4619      	mov	r1, r3
 8100538:	480c      	ldr	r0, [pc, #48]	; (810056c <MX_GPIO_Init+0xa4>)
 810053a:	f000 fb1d 	bl	8100b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 810053e:	2302      	movs	r3, #2
 8100540:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100542:	2301      	movs	r3, #1
 8100544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100546:	2300      	movs	r3, #0
 8100548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810054a:	2300      	movs	r3, #0
 810054c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 810054e:	f107 030c 	add.w	r3, r7, #12
 8100552:	4619      	mov	r1, r3
 8100554:	4804      	ldr	r0, [pc, #16]	; (8100568 <MX_GPIO_Init+0xa0>)
 8100556:	f000 fb0f 	bl	8100b78 <HAL_GPIO_Init>

}
 810055a:	bf00      	nop
 810055c:	3720      	adds	r7, #32
 810055e:	46bd      	mov	sp, r7
 8100560:	bd80      	pop	{r7, pc}
 8100562:	bf00      	nop
 8100564:	58024400 	.word	0x58024400
 8100568:	58021000 	.word	0x58021000
 810056c:	58020800 	.word	0x58020800

08100570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100570:	b480      	push	{r7}
 8100572:	b083      	sub	sp, #12
 8100574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100576:	4b0a      	ldr	r3, [pc, #40]	; (81005a0 <HAL_MspInit+0x30>)
 8100578:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810057c:	4a08      	ldr	r2, [pc, #32]	; (81005a0 <HAL_MspInit+0x30>)
 810057e:	f043 0302 	orr.w	r3, r3, #2
 8100582:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100586:	4b06      	ldr	r3, [pc, #24]	; (81005a0 <HAL_MspInit+0x30>)
 8100588:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810058c:	f003 0302 	and.w	r3, r3, #2
 8100590:	607b      	str	r3, [r7, #4]
 8100592:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100594:	bf00      	nop
 8100596:	370c      	adds	r7, #12
 8100598:	46bd      	mov	sp, r7
 810059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810059e:	4770      	bx	lr
 81005a0:	58024400 	.word	0x58024400

081005a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81005a4:	b480      	push	{r7}
 81005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81005a8:	e7fe      	b.n	81005a8 <NMI_Handler+0x4>

081005aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81005aa:	b480      	push	{r7}
 81005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81005ae:	e7fe      	b.n	81005ae <HardFault_Handler+0x4>

081005b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81005b0:	b480      	push	{r7}
 81005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81005b4:	e7fe      	b.n	81005b4 <MemManage_Handler+0x4>

081005b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81005b6:	b480      	push	{r7}
 81005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81005ba:	e7fe      	b.n	81005ba <BusFault_Handler+0x4>

081005bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81005bc:	b480      	push	{r7}
 81005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81005c0:	e7fe      	b.n	81005c0 <UsageFault_Handler+0x4>

081005c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81005c2:	b480      	push	{r7}
 81005c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81005c6:	bf00      	nop
 81005c8:	46bd      	mov	sp, r7
 81005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005ce:	4770      	bx	lr

081005d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81005d0:	b480      	push	{r7}
 81005d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81005d4:	bf00      	nop
 81005d6:	46bd      	mov	sp, r7
 81005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005dc:	4770      	bx	lr

081005de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81005de:	b480      	push	{r7}
 81005e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81005e2:	bf00      	nop
 81005e4:	46bd      	mov	sp, r7
 81005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005ea:	4770      	bx	lr

081005ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81005ec:	b580      	push	{r7, lr}
 81005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81005f0:	f000 f986 	bl	8100900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81005f4:	bf00      	nop
 81005f6:	bd80      	pop	{r7, pc}

081005f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81005f8:	b480      	push	{r7}
 81005fa:	af00      	add	r7, sp, #0
	return 1;
 81005fc:	2301      	movs	r3, #1
}
 81005fe:	4618      	mov	r0, r3
 8100600:	46bd      	mov	sp, r7
 8100602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100606:	4770      	bx	lr

08100608 <_kill>:

int _kill(int pid, int sig)
{
 8100608:	b580      	push	{r7, lr}
 810060a:	b082      	sub	sp, #8
 810060c:	af00      	add	r7, sp, #0
 810060e:	6078      	str	r0, [r7, #4]
 8100610:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8100612:	f000 fef9 	bl	8101408 <__errno>
 8100616:	4603      	mov	r3, r0
 8100618:	2216      	movs	r2, #22
 810061a:	601a      	str	r2, [r3, #0]
	return -1;
 810061c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100620:	4618      	mov	r0, r3
 8100622:	3708      	adds	r7, #8
 8100624:	46bd      	mov	sp, r7
 8100626:	bd80      	pop	{r7, pc}

08100628 <_exit>:

void _exit (int status)
{
 8100628:	b580      	push	{r7, lr}
 810062a:	b082      	sub	sp, #8
 810062c:	af00      	add	r7, sp, #0
 810062e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8100630:	f04f 31ff 	mov.w	r1, #4294967295
 8100634:	6878      	ldr	r0, [r7, #4]
 8100636:	f7ff ffe7 	bl	8100608 <_kill>
	while (1) {}		/* Make sure we hang here */
 810063a:	e7fe      	b.n	810063a <_exit+0x12>

0810063c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 810063c:	b580      	push	{r7, lr}
 810063e:	b086      	sub	sp, #24
 8100640:	af00      	add	r7, sp, #0
 8100642:	60f8      	str	r0, [r7, #12]
 8100644:	60b9      	str	r1, [r7, #8]
 8100646:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100648:	2300      	movs	r3, #0
 810064a:	617b      	str	r3, [r7, #20]
 810064c:	e00a      	b.n	8100664 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 810064e:	f3af 8000 	nop.w
 8100652:	4601      	mov	r1, r0
 8100654:	68bb      	ldr	r3, [r7, #8]
 8100656:	1c5a      	adds	r2, r3, #1
 8100658:	60ba      	str	r2, [r7, #8]
 810065a:	b2ca      	uxtb	r2, r1
 810065c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810065e:	697b      	ldr	r3, [r7, #20]
 8100660:	3301      	adds	r3, #1
 8100662:	617b      	str	r3, [r7, #20]
 8100664:	697a      	ldr	r2, [r7, #20]
 8100666:	687b      	ldr	r3, [r7, #4]
 8100668:	429a      	cmp	r2, r3
 810066a:	dbf0      	blt.n	810064e <_read+0x12>
	}

return len;
 810066c:	687b      	ldr	r3, [r7, #4]
}
 810066e:	4618      	mov	r0, r3
 8100670:	3718      	adds	r7, #24
 8100672:	46bd      	mov	sp, r7
 8100674:	bd80      	pop	{r7, pc}

08100676 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8100676:	b580      	push	{r7, lr}
 8100678:	b086      	sub	sp, #24
 810067a:	af00      	add	r7, sp, #0
 810067c:	60f8      	str	r0, [r7, #12]
 810067e:	60b9      	str	r1, [r7, #8]
 8100680:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100682:	2300      	movs	r3, #0
 8100684:	617b      	str	r3, [r7, #20]
 8100686:	e009      	b.n	810069c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8100688:	68bb      	ldr	r3, [r7, #8]
 810068a:	1c5a      	adds	r2, r3, #1
 810068c:	60ba      	str	r2, [r7, #8]
 810068e:	781b      	ldrb	r3, [r3, #0]
 8100690:	4618      	mov	r0, r3
 8100692:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100696:	697b      	ldr	r3, [r7, #20]
 8100698:	3301      	adds	r3, #1
 810069a:	617b      	str	r3, [r7, #20]
 810069c:	697a      	ldr	r2, [r7, #20]
 810069e:	687b      	ldr	r3, [r7, #4]
 81006a0:	429a      	cmp	r2, r3
 81006a2:	dbf1      	blt.n	8100688 <_write+0x12>
	}
	return len;
 81006a4:	687b      	ldr	r3, [r7, #4]
}
 81006a6:	4618      	mov	r0, r3
 81006a8:	3718      	adds	r7, #24
 81006aa:	46bd      	mov	sp, r7
 81006ac:	bd80      	pop	{r7, pc}

081006ae <_close>:

int _close(int file)
{
 81006ae:	b480      	push	{r7}
 81006b0:	b083      	sub	sp, #12
 81006b2:	af00      	add	r7, sp, #0
 81006b4:	6078      	str	r0, [r7, #4]
	return -1;
 81006b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 81006ba:	4618      	mov	r0, r3
 81006bc:	370c      	adds	r7, #12
 81006be:	46bd      	mov	sp, r7
 81006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006c4:	4770      	bx	lr

081006c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 81006c6:	b480      	push	{r7}
 81006c8:	b083      	sub	sp, #12
 81006ca:	af00      	add	r7, sp, #0
 81006cc:	6078      	str	r0, [r7, #4]
 81006ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 81006d0:	683b      	ldr	r3, [r7, #0]
 81006d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81006d6:	605a      	str	r2, [r3, #4]
	return 0;
 81006d8:	2300      	movs	r3, #0
}
 81006da:	4618      	mov	r0, r3
 81006dc:	370c      	adds	r7, #12
 81006de:	46bd      	mov	sp, r7
 81006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006e4:	4770      	bx	lr

081006e6 <_isatty>:

int _isatty(int file)
{
 81006e6:	b480      	push	{r7}
 81006e8:	b083      	sub	sp, #12
 81006ea:	af00      	add	r7, sp, #0
 81006ec:	6078      	str	r0, [r7, #4]
	return 1;
 81006ee:	2301      	movs	r3, #1
}
 81006f0:	4618      	mov	r0, r3
 81006f2:	370c      	adds	r7, #12
 81006f4:	46bd      	mov	sp, r7
 81006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006fa:	4770      	bx	lr

081006fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81006fc:	b480      	push	{r7}
 81006fe:	b085      	sub	sp, #20
 8100700:	af00      	add	r7, sp, #0
 8100702:	60f8      	str	r0, [r7, #12]
 8100704:	60b9      	str	r1, [r7, #8]
 8100706:	607a      	str	r2, [r7, #4]
	return 0;
 8100708:	2300      	movs	r3, #0
}
 810070a:	4618      	mov	r0, r3
 810070c:	3714      	adds	r7, #20
 810070e:	46bd      	mov	sp, r7
 8100710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100714:	4770      	bx	lr
	...

08100718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100718:	b580      	push	{r7, lr}
 810071a:	b086      	sub	sp, #24
 810071c:	af00      	add	r7, sp, #0
 810071e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100720:	4a14      	ldr	r2, [pc, #80]	; (8100774 <_sbrk+0x5c>)
 8100722:	4b15      	ldr	r3, [pc, #84]	; (8100778 <_sbrk+0x60>)
 8100724:	1ad3      	subs	r3, r2, r3
 8100726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100728:	697b      	ldr	r3, [r7, #20]
 810072a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 810072c:	4b13      	ldr	r3, [pc, #76]	; (810077c <_sbrk+0x64>)
 810072e:	681b      	ldr	r3, [r3, #0]
 8100730:	2b00      	cmp	r3, #0
 8100732:	d102      	bne.n	810073a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100734:	4b11      	ldr	r3, [pc, #68]	; (810077c <_sbrk+0x64>)
 8100736:	4a12      	ldr	r2, [pc, #72]	; (8100780 <_sbrk+0x68>)
 8100738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810073a:	4b10      	ldr	r3, [pc, #64]	; (810077c <_sbrk+0x64>)
 810073c:	681a      	ldr	r2, [r3, #0]
 810073e:	687b      	ldr	r3, [r7, #4]
 8100740:	4413      	add	r3, r2
 8100742:	693a      	ldr	r2, [r7, #16]
 8100744:	429a      	cmp	r2, r3
 8100746:	d207      	bcs.n	8100758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8100748:	f000 fe5e 	bl	8101408 <__errno>
 810074c:	4603      	mov	r3, r0
 810074e:	220c      	movs	r2, #12
 8100750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100752:	f04f 33ff 	mov.w	r3, #4294967295
 8100756:	e009      	b.n	810076c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8100758:	4b08      	ldr	r3, [pc, #32]	; (810077c <_sbrk+0x64>)
 810075a:	681b      	ldr	r3, [r3, #0]
 810075c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 810075e:	4b07      	ldr	r3, [pc, #28]	; (810077c <_sbrk+0x64>)
 8100760:	681a      	ldr	r2, [r3, #0]
 8100762:	687b      	ldr	r3, [r7, #4]
 8100764:	4413      	add	r3, r2
 8100766:	4a05      	ldr	r2, [pc, #20]	; (810077c <_sbrk+0x64>)
 8100768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810076a:	68fb      	ldr	r3, [r7, #12]
}
 810076c:	4618      	mov	r0, r3
 810076e:	3718      	adds	r7, #24
 8100770:	46bd      	mov	sp, r7
 8100772:	bd80      	pop	{r7, pc}
 8100774:	10048000 	.word	0x10048000
 8100778:	00000400 	.word	0x00000400
 810077c:	10000098 	.word	0x10000098
 8100780:	100000b0 	.word	0x100000b0

08100784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100784:	f8df d034 	ldr.w	sp, [pc, #52]	; 81007bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100788:	f7ff fdfa 	bl	8100380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810078c:	480c      	ldr	r0, [pc, #48]	; (81007c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810078e:	490d      	ldr	r1, [pc, #52]	; (81007c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100790:	4a0d      	ldr	r2, [pc, #52]	; (81007c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100794:	e002      	b.n	810079c <LoopCopyDataInit>

08100796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810079a:	3304      	adds	r3, #4

0810079c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810079c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810079e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81007a0:	d3f9      	bcc.n	8100796 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81007a2:	4a0a      	ldr	r2, [pc, #40]	; (81007cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81007a4:	4c0a      	ldr	r4, [pc, #40]	; (81007d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 81007a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 81007a8:	e001      	b.n	81007ae <LoopFillZerobss>

081007aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81007aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81007ac:	3204      	adds	r2, #4

081007ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81007ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81007b0:	d3fb      	bcc.n	81007aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81007b2:	f000 fe2f 	bl	8101414 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81007b6:	f7ff fdfb 	bl	81003b0 <main>
  bx  lr
 81007ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81007bc:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81007c0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81007c4:	10000078 	.word	0x10000078
  ldr r2, =_sidata
 81007c8:	08102654 	.word	0x08102654
  ldr r2, =_sbss
 81007cc:	10000078 	.word	0x10000078
  ldr r4, =_ebss
 81007d0:	100000b0 	.word	0x100000b0

081007d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81007d4:	e7fe      	b.n	81007d4 <ADC3_IRQHandler>
	...

081007d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81007d8:	b580      	push	{r7, lr}
 81007da:	b082      	sub	sp, #8
 81007dc:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81007de:	4b28      	ldr	r3, [pc, #160]	; (8100880 <HAL_Init+0xa8>)
 81007e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81007e4:	4a26      	ldr	r2, [pc, #152]	; (8100880 <HAL_Init+0xa8>)
 81007e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81007ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81007ee:	4b24      	ldr	r3, [pc, #144]	; (8100880 <HAL_Init+0xa8>)
 81007f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81007f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81007f8:	603b      	str	r3, [r7, #0]
 81007fa:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81007fc:	4b21      	ldr	r3, [pc, #132]	; (8100884 <HAL_Init+0xac>)
 81007fe:	681b      	ldr	r3, [r3, #0]
 8100800:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100804:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100808:	4a1e      	ldr	r2, [pc, #120]	; (8100884 <HAL_Init+0xac>)
 810080a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810080e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100810:	4b1c      	ldr	r3, [pc, #112]	; (8100884 <HAL_Init+0xac>)
 8100812:	681b      	ldr	r3, [r3, #0]
 8100814:	4a1b      	ldr	r2, [pc, #108]	; (8100884 <HAL_Init+0xac>)
 8100816:	f043 0301 	orr.w	r3, r3, #1
 810081a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810081c:	2003      	movs	r0, #3
 810081e:	f000 f965 	bl	8100aec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100822:	f000 fc77 	bl	8101114 <HAL_RCC_GetSysClockFreq>
 8100826:	4602      	mov	r2, r0
 8100828:	4b15      	ldr	r3, [pc, #84]	; (8100880 <HAL_Init+0xa8>)
 810082a:	699b      	ldr	r3, [r3, #24]
 810082c:	0a1b      	lsrs	r3, r3, #8
 810082e:	f003 030f 	and.w	r3, r3, #15
 8100832:	4915      	ldr	r1, [pc, #84]	; (8100888 <HAL_Init+0xb0>)
 8100834:	5ccb      	ldrb	r3, [r1, r3]
 8100836:	f003 031f 	and.w	r3, r3, #31
 810083a:	fa22 f303 	lsr.w	r3, r2, r3
 810083e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100840:	4b0f      	ldr	r3, [pc, #60]	; (8100880 <HAL_Init+0xa8>)
 8100842:	699b      	ldr	r3, [r3, #24]
 8100844:	f003 030f 	and.w	r3, r3, #15
 8100848:	4a0f      	ldr	r2, [pc, #60]	; (8100888 <HAL_Init+0xb0>)
 810084a:	5cd3      	ldrb	r3, [r2, r3]
 810084c:	f003 031f 	and.w	r3, r3, #31
 8100850:	687a      	ldr	r2, [r7, #4]
 8100852:	fa22 f303 	lsr.w	r3, r2, r3
 8100856:	4a0d      	ldr	r2, [pc, #52]	; (810088c <HAL_Init+0xb4>)
 8100858:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810085a:	4b0c      	ldr	r3, [pc, #48]	; (810088c <HAL_Init+0xb4>)
 810085c:	681b      	ldr	r3, [r3, #0]
 810085e:	4a0c      	ldr	r2, [pc, #48]	; (8100890 <HAL_Init+0xb8>)
 8100860:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100862:	2000      	movs	r0, #0
 8100864:	f000 f816 	bl	8100894 <HAL_InitTick>
 8100868:	4603      	mov	r3, r0
 810086a:	2b00      	cmp	r3, #0
 810086c:	d001      	beq.n	8100872 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810086e:	2301      	movs	r3, #1
 8100870:	e002      	b.n	8100878 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100872:	f7ff fe7d 	bl	8100570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100876:	2300      	movs	r3, #0
}
 8100878:	4618      	mov	r0, r3
 810087a:	3708      	adds	r7, #8
 810087c:	46bd      	mov	sp, r7
 810087e:	bd80      	pop	{r7, pc}
 8100880:	58024400 	.word	0x58024400
 8100884:	40024400 	.word	0x40024400
 8100888:	081024f4 	.word	0x081024f4
 810088c:	10000004 	.word	0x10000004
 8100890:	10000000 	.word	0x10000000

08100894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100894:	b580      	push	{r7, lr}
 8100896:	b082      	sub	sp, #8
 8100898:	af00      	add	r7, sp, #0
 810089a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 810089c:	4b15      	ldr	r3, [pc, #84]	; (81008f4 <HAL_InitTick+0x60>)
 810089e:	781b      	ldrb	r3, [r3, #0]
 81008a0:	2b00      	cmp	r3, #0
 81008a2:	d101      	bne.n	81008a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81008a4:	2301      	movs	r3, #1
 81008a6:	e021      	b.n	81008ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81008a8:	4b13      	ldr	r3, [pc, #76]	; (81008f8 <HAL_InitTick+0x64>)
 81008aa:	681a      	ldr	r2, [r3, #0]
 81008ac:	4b11      	ldr	r3, [pc, #68]	; (81008f4 <HAL_InitTick+0x60>)
 81008ae:	781b      	ldrb	r3, [r3, #0]
 81008b0:	4619      	mov	r1, r3
 81008b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81008b6:	fbb3 f3f1 	udiv	r3, r3, r1
 81008ba:	fbb2 f3f3 	udiv	r3, r2, r3
 81008be:	4618      	mov	r0, r3
 81008c0:	f000 f939 	bl	8100b36 <HAL_SYSTICK_Config>
 81008c4:	4603      	mov	r3, r0
 81008c6:	2b00      	cmp	r3, #0
 81008c8:	d001      	beq.n	81008ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81008ca:	2301      	movs	r3, #1
 81008cc:	e00e      	b.n	81008ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81008ce:	687b      	ldr	r3, [r7, #4]
 81008d0:	2b0f      	cmp	r3, #15
 81008d2:	d80a      	bhi.n	81008ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81008d4:	2200      	movs	r2, #0
 81008d6:	6879      	ldr	r1, [r7, #4]
 81008d8:	f04f 30ff 	mov.w	r0, #4294967295
 81008dc:	f000 f911 	bl	8100b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81008e0:	4a06      	ldr	r2, [pc, #24]	; (81008fc <HAL_InitTick+0x68>)
 81008e2:	687b      	ldr	r3, [r7, #4]
 81008e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81008e6:	2300      	movs	r3, #0
 81008e8:	e000      	b.n	81008ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 81008ea:	2301      	movs	r3, #1
}
 81008ec:	4618      	mov	r0, r3
 81008ee:	3708      	adds	r7, #8
 81008f0:	46bd      	mov	sp, r7
 81008f2:	bd80      	pop	{r7, pc}
 81008f4:	10000010 	.word	0x10000010
 81008f8:	10000000 	.word	0x10000000
 81008fc:	1000000c 	.word	0x1000000c

08100900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100900:	b480      	push	{r7}
 8100902:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100904:	4b06      	ldr	r3, [pc, #24]	; (8100920 <HAL_IncTick+0x20>)
 8100906:	781b      	ldrb	r3, [r3, #0]
 8100908:	461a      	mov	r2, r3
 810090a:	4b06      	ldr	r3, [pc, #24]	; (8100924 <HAL_IncTick+0x24>)
 810090c:	681b      	ldr	r3, [r3, #0]
 810090e:	4413      	add	r3, r2
 8100910:	4a04      	ldr	r2, [pc, #16]	; (8100924 <HAL_IncTick+0x24>)
 8100912:	6013      	str	r3, [r2, #0]
}
 8100914:	bf00      	nop
 8100916:	46bd      	mov	sp, r7
 8100918:	f85d 7b04 	ldr.w	r7, [sp], #4
 810091c:	4770      	bx	lr
 810091e:	bf00      	nop
 8100920:	10000010 	.word	0x10000010
 8100924:	1000009c 	.word	0x1000009c

08100928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100928:	b480      	push	{r7}
 810092a:	af00      	add	r7, sp, #0
  return uwTick;
 810092c:	4b03      	ldr	r3, [pc, #12]	; (810093c <HAL_GetTick+0x14>)
 810092e:	681b      	ldr	r3, [r3, #0]
}
 8100930:	4618      	mov	r0, r3
 8100932:	46bd      	mov	sp, r7
 8100934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100938:	4770      	bx	lr
 810093a:	bf00      	nop
 810093c:	1000009c 	.word	0x1000009c

08100940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100940:	b580      	push	{r7, lr}
 8100942:	b084      	sub	sp, #16
 8100944:	af00      	add	r7, sp, #0
 8100946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8100948:	f7ff ffee 	bl	8100928 <HAL_GetTick>
 810094c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810094e:	687b      	ldr	r3, [r7, #4]
 8100950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8100952:	68fb      	ldr	r3, [r7, #12]
 8100954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100958:	d005      	beq.n	8100966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810095a:	4b0a      	ldr	r3, [pc, #40]	; (8100984 <HAL_Delay+0x44>)
 810095c:	781b      	ldrb	r3, [r3, #0]
 810095e:	461a      	mov	r2, r3
 8100960:	68fb      	ldr	r3, [r7, #12]
 8100962:	4413      	add	r3, r2
 8100964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8100966:	bf00      	nop
 8100968:	f7ff ffde 	bl	8100928 <HAL_GetTick>
 810096c:	4602      	mov	r2, r0
 810096e:	68bb      	ldr	r3, [r7, #8]
 8100970:	1ad3      	subs	r3, r2, r3
 8100972:	68fa      	ldr	r2, [r7, #12]
 8100974:	429a      	cmp	r2, r3
 8100976:	d8f7      	bhi.n	8100968 <HAL_Delay+0x28>
  {
  }
}
 8100978:	bf00      	nop
 810097a:	bf00      	nop
 810097c:	3710      	adds	r7, #16
 810097e:	46bd      	mov	sp, r7
 8100980:	bd80      	pop	{r7, pc}
 8100982:	bf00      	nop
 8100984:	10000010 	.word	0x10000010

08100988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100988:	b480      	push	{r7}
 810098a:	b085      	sub	sp, #20
 810098c:	af00      	add	r7, sp, #0
 810098e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100990:	687b      	ldr	r3, [r7, #4]
 8100992:	f003 0307 	and.w	r3, r3, #7
 8100996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100998:	4b0c      	ldr	r3, [pc, #48]	; (81009cc <__NVIC_SetPriorityGrouping+0x44>)
 810099a:	68db      	ldr	r3, [r3, #12]
 810099c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810099e:	68ba      	ldr	r2, [r7, #8]
 81009a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81009a4:	4013      	ands	r3, r2
 81009a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81009a8:	68fb      	ldr	r3, [r7, #12]
 81009aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81009ac:	68bb      	ldr	r3, [r7, #8]
 81009ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81009b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81009b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81009b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81009ba:	4a04      	ldr	r2, [pc, #16]	; (81009cc <__NVIC_SetPriorityGrouping+0x44>)
 81009bc:	68bb      	ldr	r3, [r7, #8]
 81009be:	60d3      	str	r3, [r2, #12]
}
 81009c0:	bf00      	nop
 81009c2:	3714      	adds	r7, #20
 81009c4:	46bd      	mov	sp, r7
 81009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009ca:	4770      	bx	lr
 81009cc:	e000ed00 	.word	0xe000ed00

081009d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81009d0:	b480      	push	{r7}
 81009d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81009d4:	4b04      	ldr	r3, [pc, #16]	; (81009e8 <__NVIC_GetPriorityGrouping+0x18>)
 81009d6:	68db      	ldr	r3, [r3, #12]
 81009d8:	0a1b      	lsrs	r3, r3, #8
 81009da:	f003 0307 	and.w	r3, r3, #7
}
 81009de:	4618      	mov	r0, r3
 81009e0:	46bd      	mov	sp, r7
 81009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009e6:	4770      	bx	lr
 81009e8:	e000ed00 	.word	0xe000ed00

081009ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81009ec:	b480      	push	{r7}
 81009ee:	b083      	sub	sp, #12
 81009f0:	af00      	add	r7, sp, #0
 81009f2:	4603      	mov	r3, r0
 81009f4:	6039      	str	r1, [r7, #0]
 81009f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81009f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81009fc:	2b00      	cmp	r3, #0
 81009fe:	db0a      	blt.n	8100a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100a00:	683b      	ldr	r3, [r7, #0]
 8100a02:	b2da      	uxtb	r2, r3
 8100a04:	490c      	ldr	r1, [pc, #48]	; (8100a38 <__NVIC_SetPriority+0x4c>)
 8100a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a0a:	0112      	lsls	r2, r2, #4
 8100a0c:	b2d2      	uxtb	r2, r2
 8100a0e:	440b      	add	r3, r1
 8100a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100a14:	e00a      	b.n	8100a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100a16:	683b      	ldr	r3, [r7, #0]
 8100a18:	b2da      	uxtb	r2, r3
 8100a1a:	4908      	ldr	r1, [pc, #32]	; (8100a3c <__NVIC_SetPriority+0x50>)
 8100a1c:	88fb      	ldrh	r3, [r7, #6]
 8100a1e:	f003 030f 	and.w	r3, r3, #15
 8100a22:	3b04      	subs	r3, #4
 8100a24:	0112      	lsls	r2, r2, #4
 8100a26:	b2d2      	uxtb	r2, r2
 8100a28:	440b      	add	r3, r1
 8100a2a:	761a      	strb	r2, [r3, #24]
}
 8100a2c:	bf00      	nop
 8100a2e:	370c      	adds	r7, #12
 8100a30:	46bd      	mov	sp, r7
 8100a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a36:	4770      	bx	lr
 8100a38:	e000e100 	.word	0xe000e100
 8100a3c:	e000ed00 	.word	0xe000ed00

08100a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100a40:	b480      	push	{r7}
 8100a42:	b089      	sub	sp, #36	; 0x24
 8100a44:	af00      	add	r7, sp, #0
 8100a46:	60f8      	str	r0, [r7, #12]
 8100a48:	60b9      	str	r1, [r7, #8]
 8100a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100a4c:	68fb      	ldr	r3, [r7, #12]
 8100a4e:	f003 0307 	and.w	r3, r3, #7
 8100a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100a54:	69fb      	ldr	r3, [r7, #28]
 8100a56:	f1c3 0307 	rsb	r3, r3, #7
 8100a5a:	2b04      	cmp	r3, #4
 8100a5c:	bf28      	it	cs
 8100a5e:	2304      	movcs	r3, #4
 8100a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100a62:	69fb      	ldr	r3, [r7, #28]
 8100a64:	3304      	adds	r3, #4
 8100a66:	2b06      	cmp	r3, #6
 8100a68:	d902      	bls.n	8100a70 <NVIC_EncodePriority+0x30>
 8100a6a:	69fb      	ldr	r3, [r7, #28]
 8100a6c:	3b03      	subs	r3, #3
 8100a6e:	e000      	b.n	8100a72 <NVIC_EncodePriority+0x32>
 8100a70:	2300      	movs	r3, #0
 8100a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100a74:	f04f 32ff 	mov.w	r2, #4294967295
 8100a78:	69bb      	ldr	r3, [r7, #24]
 8100a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8100a7e:	43da      	mvns	r2, r3
 8100a80:	68bb      	ldr	r3, [r7, #8]
 8100a82:	401a      	ands	r2, r3
 8100a84:	697b      	ldr	r3, [r7, #20]
 8100a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100a88:	f04f 31ff 	mov.w	r1, #4294967295
 8100a8c:	697b      	ldr	r3, [r7, #20]
 8100a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8100a92:	43d9      	mvns	r1, r3
 8100a94:	687b      	ldr	r3, [r7, #4]
 8100a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100a98:	4313      	orrs	r3, r2
         );
}
 8100a9a:	4618      	mov	r0, r3
 8100a9c:	3724      	adds	r7, #36	; 0x24
 8100a9e:	46bd      	mov	sp, r7
 8100aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100aa4:	4770      	bx	lr
	...

08100aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100aa8:	b580      	push	{r7, lr}
 8100aaa:	b082      	sub	sp, #8
 8100aac:	af00      	add	r7, sp, #0
 8100aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100ab0:	687b      	ldr	r3, [r7, #4]
 8100ab2:	3b01      	subs	r3, #1
 8100ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100ab8:	d301      	bcc.n	8100abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100aba:	2301      	movs	r3, #1
 8100abc:	e00f      	b.n	8100ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100abe:	4a0a      	ldr	r2, [pc, #40]	; (8100ae8 <SysTick_Config+0x40>)
 8100ac0:	687b      	ldr	r3, [r7, #4]
 8100ac2:	3b01      	subs	r3, #1
 8100ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100ac6:	210f      	movs	r1, #15
 8100ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8100acc:	f7ff ff8e 	bl	81009ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100ad0:	4b05      	ldr	r3, [pc, #20]	; (8100ae8 <SysTick_Config+0x40>)
 8100ad2:	2200      	movs	r2, #0
 8100ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100ad6:	4b04      	ldr	r3, [pc, #16]	; (8100ae8 <SysTick_Config+0x40>)
 8100ad8:	2207      	movs	r2, #7
 8100ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100adc:	2300      	movs	r3, #0
}
 8100ade:	4618      	mov	r0, r3
 8100ae0:	3708      	adds	r7, #8
 8100ae2:	46bd      	mov	sp, r7
 8100ae4:	bd80      	pop	{r7, pc}
 8100ae6:	bf00      	nop
 8100ae8:	e000e010 	.word	0xe000e010

08100aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100aec:	b580      	push	{r7, lr}
 8100aee:	b082      	sub	sp, #8
 8100af0:	af00      	add	r7, sp, #0
 8100af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100af4:	6878      	ldr	r0, [r7, #4]
 8100af6:	f7ff ff47 	bl	8100988 <__NVIC_SetPriorityGrouping>
}
 8100afa:	bf00      	nop
 8100afc:	3708      	adds	r7, #8
 8100afe:	46bd      	mov	sp, r7
 8100b00:	bd80      	pop	{r7, pc}

08100b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100b02:	b580      	push	{r7, lr}
 8100b04:	b086      	sub	sp, #24
 8100b06:	af00      	add	r7, sp, #0
 8100b08:	4603      	mov	r3, r0
 8100b0a:	60b9      	str	r1, [r7, #8]
 8100b0c:	607a      	str	r2, [r7, #4]
 8100b0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100b10:	f7ff ff5e 	bl	81009d0 <__NVIC_GetPriorityGrouping>
 8100b14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100b16:	687a      	ldr	r2, [r7, #4]
 8100b18:	68b9      	ldr	r1, [r7, #8]
 8100b1a:	6978      	ldr	r0, [r7, #20]
 8100b1c:	f7ff ff90 	bl	8100a40 <NVIC_EncodePriority>
 8100b20:	4602      	mov	r2, r0
 8100b22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100b26:	4611      	mov	r1, r2
 8100b28:	4618      	mov	r0, r3
 8100b2a:	f7ff ff5f 	bl	81009ec <__NVIC_SetPriority>
}
 8100b2e:	bf00      	nop
 8100b30:	3718      	adds	r7, #24
 8100b32:	46bd      	mov	sp, r7
 8100b34:	bd80      	pop	{r7, pc}

08100b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100b36:	b580      	push	{r7, lr}
 8100b38:	b082      	sub	sp, #8
 8100b3a:	af00      	add	r7, sp, #0
 8100b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100b3e:	6878      	ldr	r0, [r7, #4]
 8100b40:	f7ff ffb2 	bl	8100aa8 <SysTick_Config>
 8100b44:	4603      	mov	r3, r0
}
 8100b46:	4618      	mov	r0, r3
 8100b48:	3708      	adds	r7, #8
 8100b4a:	46bd      	mov	sp, r7
 8100b4c:	bd80      	pop	{r7, pc}
	...

08100b50 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100b50:	b480      	push	{r7}
 8100b52:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100b54:	4b07      	ldr	r3, [pc, #28]	; (8100b74 <HAL_GetCurrentCPUID+0x24>)
 8100b56:	681b      	ldr	r3, [r3, #0]
 8100b58:	091b      	lsrs	r3, r3, #4
 8100b5a:	f003 030f 	and.w	r3, r3, #15
 8100b5e:	2b07      	cmp	r3, #7
 8100b60:	d101      	bne.n	8100b66 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100b62:	2303      	movs	r3, #3
 8100b64:	e000      	b.n	8100b68 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100b66:	2301      	movs	r3, #1
  }
}
 8100b68:	4618      	mov	r0, r3
 8100b6a:	46bd      	mov	sp, r7
 8100b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b70:	4770      	bx	lr
 8100b72:	bf00      	nop
 8100b74:	e000ed00 	.word	0xe000ed00

08100b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100b78:	b480      	push	{r7}
 8100b7a:	b089      	sub	sp, #36	; 0x24
 8100b7c:	af00      	add	r7, sp, #0
 8100b7e:	6078      	str	r0, [r7, #4]
 8100b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100b82:	2300      	movs	r3, #0
 8100b84:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100b86:	4b89      	ldr	r3, [pc, #548]	; (8100dac <HAL_GPIO_Init+0x234>)
 8100b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100b8a:	e194      	b.n	8100eb6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100b8c:	683b      	ldr	r3, [r7, #0]
 8100b8e:	681a      	ldr	r2, [r3, #0]
 8100b90:	2101      	movs	r1, #1
 8100b92:	69fb      	ldr	r3, [r7, #28]
 8100b94:	fa01 f303 	lsl.w	r3, r1, r3
 8100b98:	4013      	ands	r3, r2
 8100b9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100b9c:	693b      	ldr	r3, [r7, #16]
 8100b9e:	2b00      	cmp	r3, #0
 8100ba0:	f000 8186 	beq.w	8100eb0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100ba4:	683b      	ldr	r3, [r7, #0]
 8100ba6:	685b      	ldr	r3, [r3, #4]
 8100ba8:	f003 0303 	and.w	r3, r3, #3
 8100bac:	2b01      	cmp	r3, #1
 8100bae:	d005      	beq.n	8100bbc <HAL_GPIO_Init+0x44>
 8100bb0:	683b      	ldr	r3, [r7, #0]
 8100bb2:	685b      	ldr	r3, [r3, #4]
 8100bb4:	f003 0303 	and.w	r3, r3, #3
 8100bb8:	2b02      	cmp	r3, #2
 8100bba:	d130      	bne.n	8100c1e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100bbc:	687b      	ldr	r3, [r7, #4]
 8100bbe:	689b      	ldr	r3, [r3, #8]
 8100bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100bc2:	69fb      	ldr	r3, [r7, #28]
 8100bc4:	005b      	lsls	r3, r3, #1
 8100bc6:	2203      	movs	r2, #3
 8100bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8100bcc:	43db      	mvns	r3, r3
 8100bce:	69ba      	ldr	r2, [r7, #24]
 8100bd0:	4013      	ands	r3, r2
 8100bd2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100bd4:	683b      	ldr	r3, [r7, #0]
 8100bd6:	68da      	ldr	r2, [r3, #12]
 8100bd8:	69fb      	ldr	r3, [r7, #28]
 8100bda:	005b      	lsls	r3, r3, #1
 8100bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8100be0:	69ba      	ldr	r2, [r7, #24]
 8100be2:	4313      	orrs	r3, r2
 8100be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100be6:	687b      	ldr	r3, [r7, #4]
 8100be8:	69ba      	ldr	r2, [r7, #24]
 8100bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100bec:	687b      	ldr	r3, [r7, #4]
 8100bee:	685b      	ldr	r3, [r3, #4]
 8100bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100bf2:	2201      	movs	r2, #1
 8100bf4:	69fb      	ldr	r3, [r7, #28]
 8100bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8100bfa:	43db      	mvns	r3, r3
 8100bfc:	69ba      	ldr	r2, [r7, #24]
 8100bfe:	4013      	ands	r3, r2
 8100c00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100c02:	683b      	ldr	r3, [r7, #0]
 8100c04:	685b      	ldr	r3, [r3, #4]
 8100c06:	091b      	lsrs	r3, r3, #4
 8100c08:	f003 0201 	and.w	r2, r3, #1
 8100c0c:	69fb      	ldr	r3, [r7, #28]
 8100c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8100c12:	69ba      	ldr	r2, [r7, #24]
 8100c14:	4313      	orrs	r3, r2
 8100c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100c18:	687b      	ldr	r3, [r7, #4]
 8100c1a:	69ba      	ldr	r2, [r7, #24]
 8100c1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100c1e:	683b      	ldr	r3, [r7, #0]
 8100c20:	685b      	ldr	r3, [r3, #4]
 8100c22:	f003 0303 	and.w	r3, r3, #3
 8100c26:	2b03      	cmp	r3, #3
 8100c28:	d017      	beq.n	8100c5a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100c2a:	687b      	ldr	r3, [r7, #4]
 8100c2c:	68db      	ldr	r3, [r3, #12]
 8100c2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100c30:	69fb      	ldr	r3, [r7, #28]
 8100c32:	005b      	lsls	r3, r3, #1
 8100c34:	2203      	movs	r2, #3
 8100c36:	fa02 f303 	lsl.w	r3, r2, r3
 8100c3a:	43db      	mvns	r3, r3
 8100c3c:	69ba      	ldr	r2, [r7, #24]
 8100c3e:	4013      	ands	r3, r2
 8100c40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100c42:	683b      	ldr	r3, [r7, #0]
 8100c44:	689a      	ldr	r2, [r3, #8]
 8100c46:	69fb      	ldr	r3, [r7, #28]
 8100c48:	005b      	lsls	r3, r3, #1
 8100c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8100c4e:	69ba      	ldr	r2, [r7, #24]
 8100c50:	4313      	orrs	r3, r2
 8100c52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100c54:	687b      	ldr	r3, [r7, #4]
 8100c56:	69ba      	ldr	r2, [r7, #24]
 8100c58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100c5a:	683b      	ldr	r3, [r7, #0]
 8100c5c:	685b      	ldr	r3, [r3, #4]
 8100c5e:	f003 0303 	and.w	r3, r3, #3
 8100c62:	2b02      	cmp	r3, #2
 8100c64:	d123      	bne.n	8100cae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100c66:	69fb      	ldr	r3, [r7, #28]
 8100c68:	08da      	lsrs	r2, r3, #3
 8100c6a:	687b      	ldr	r3, [r7, #4]
 8100c6c:	3208      	adds	r2, #8
 8100c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100c74:	69fb      	ldr	r3, [r7, #28]
 8100c76:	f003 0307 	and.w	r3, r3, #7
 8100c7a:	009b      	lsls	r3, r3, #2
 8100c7c:	220f      	movs	r2, #15
 8100c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8100c82:	43db      	mvns	r3, r3
 8100c84:	69ba      	ldr	r2, [r7, #24]
 8100c86:	4013      	ands	r3, r2
 8100c88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100c8a:	683b      	ldr	r3, [r7, #0]
 8100c8c:	691a      	ldr	r2, [r3, #16]
 8100c8e:	69fb      	ldr	r3, [r7, #28]
 8100c90:	f003 0307 	and.w	r3, r3, #7
 8100c94:	009b      	lsls	r3, r3, #2
 8100c96:	fa02 f303 	lsl.w	r3, r2, r3
 8100c9a:	69ba      	ldr	r2, [r7, #24]
 8100c9c:	4313      	orrs	r3, r2
 8100c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100ca0:	69fb      	ldr	r3, [r7, #28]
 8100ca2:	08da      	lsrs	r2, r3, #3
 8100ca4:	687b      	ldr	r3, [r7, #4]
 8100ca6:	3208      	adds	r2, #8
 8100ca8:	69b9      	ldr	r1, [r7, #24]
 8100caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100cae:	687b      	ldr	r3, [r7, #4]
 8100cb0:	681b      	ldr	r3, [r3, #0]
 8100cb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100cb4:	69fb      	ldr	r3, [r7, #28]
 8100cb6:	005b      	lsls	r3, r3, #1
 8100cb8:	2203      	movs	r2, #3
 8100cba:	fa02 f303 	lsl.w	r3, r2, r3
 8100cbe:	43db      	mvns	r3, r3
 8100cc0:	69ba      	ldr	r2, [r7, #24]
 8100cc2:	4013      	ands	r3, r2
 8100cc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100cc6:	683b      	ldr	r3, [r7, #0]
 8100cc8:	685b      	ldr	r3, [r3, #4]
 8100cca:	f003 0203 	and.w	r2, r3, #3
 8100cce:	69fb      	ldr	r3, [r7, #28]
 8100cd0:	005b      	lsls	r3, r3, #1
 8100cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8100cd6:	69ba      	ldr	r2, [r7, #24]
 8100cd8:	4313      	orrs	r3, r2
 8100cda:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100cdc:	687b      	ldr	r3, [r7, #4]
 8100cde:	69ba      	ldr	r2, [r7, #24]
 8100ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100ce2:	683b      	ldr	r3, [r7, #0]
 8100ce4:	685b      	ldr	r3, [r3, #4]
 8100ce6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100cea:	2b00      	cmp	r3, #0
 8100cec:	f000 80e0 	beq.w	8100eb0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100cf0:	4b2f      	ldr	r3, [pc, #188]	; (8100db0 <HAL_GPIO_Init+0x238>)
 8100cf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100cf6:	4a2e      	ldr	r2, [pc, #184]	; (8100db0 <HAL_GPIO_Init+0x238>)
 8100cf8:	f043 0302 	orr.w	r3, r3, #2
 8100cfc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100d00:	4b2b      	ldr	r3, [pc, #172]	; (8100db0 <HAL_GPIO_Init+0x238>)
 8100d02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100d06:	f003 0302 	and.w	r3, r3, #2
 8100d0a:	60fb      	str	r3, [r7, #12]
 8100d0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100d0e:	4a29      	ldr	r2, [pc, #164]	; (8100db4 <HAL_GPIO_Init+0x23c>)
 8100d10:	69fb      	ldr	r3, [r7, #28]
 8100d12:	089b      	lsrs	r3, r3, #2
 8100d14:	3302      	adds	r3, #2
 8100d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100d1c:	69fb      	ldr	r3, [r7, #28]
 8100d1e:	f003 0303 	and.w	r3, r3, #3
 8100d22:	009b      	lsls	r3, r3, #2
 8100d24:	220f      	movs	r2, #15
 8100d26:	fa02 f303 	lsl.w	r3, r2, r3
 8100d2a:	43db      	mvns	r3, r3
 8100d2c:	69ba      	ldr	r2, [r7, #24]
 8100d2e:	4013      	ands	r3, r2
 8100d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100d32:	687b      	ldr	r3, [r7, #4]
 8100d34:	4a20      	ldr	r2, [pc, #128]	; (8100db8 <HAL_GPIO_Init+0x240>)
 8100d36:	4293      	cmp	r3, r2
 8100d38:	d052      	beq.n	8100de0 <HAL_GPIO_Init+0x268>
 8100d3a:	687b      	ldr	r3, [r7, #4]
 8100d3c:	4a1f      	ldr	r2, [pc, #124]	; (8100dbc <HAL_GPIO_Init+0x244>)
 8100d3e:	4293      	cmp	r3, r2
 8100d40:	d031      	beq.n	8100da6 <HAL_GPIO_Init+0x22e>
 8100d42:	687b      	ldr	r3, [r7, #4]
 8100d44:	4a1e      	ldr	r2, [pc, #120]	; (8100dc0 <HAL_GPIO_Init+0x248>)
 8100d46:	4293      	cmp	r3, r2
 8100d48:	d02b      	beq.n	8100da2 <HAL_GPIO_Init+0x22a>
 8100d4a:	687b      	ldr	r3, [r7, #4]
 8100d4c:	4a1d      	ldr	r2, [pc, #116]	; (8100dc4 <HAL_GPIO_Init+0x24c>)
 8100d4e:	4293      	cmp	r3, r2
 8100d50:	d025      	beq.n	8100d9e <HAL_GPIO_Init+0x226>
 8100d52:	687b      	ldr	r3, [r7, #4]
 8100d54:	4a1c      	ldr	r2, [pc, #112]	; (8100dc8 <HAL_GPIO_Init+0x250>)
 8100d56:	4293      	cmp	r3, r2
 8100d58:	d01f      	beq.n	8100d9a <HAL_GPIO_Init+0x222>
 8100d5a:	687b      	ldr	r3, [r7, #4]
 8100d5c:	4a1b      	ldr	r2, [pc, #108]	; (8100dcc <HAL_GPIO_Init+0x254>)
 8100d5e:	4293      	cmp	r3, r2
 8100d60:	d019      	beq.n	8100d96 <HAL_GPIO_Init+0x21e>
 8100d62:	687b      	ldr	r3, [r7, #4]
 8100d64:	4a1a      	ldr	r2, [pc, #104]	; (8100dd0 <HAL_GPIO_Init+0x258>)
 8100d66:	4293      	cmp	r3, r2
 8100d68:	d013      	beq.n	8100d92 <HAL_GPIO_Init+0x21a>
 8100d6a:	687b      	ldr	r3, [r7, #4]
 8100d6c:	4a19      	ldr	r2, [pc, #100]	; (8100dd4 <HAL_GPIO_Init+0x25c>)
 8100d6e:	4293      	cmp	r3, r2
 8100d70:	d00d      	beq.n	8100d8e <HAL_GPIO_Init+0x216>
 8100d72:	687b      	ldr	r3, [r7, #4]
 8100d74:	4a18      	ldr	r2, [pc, #96]	; (8100dd8 <HAL_GPIO_Init+0x260>)
 8100d76:	4293      	cmp	r3, r2
 8100d78:	d007      	beq.n	8100d8a <HAL_GPIO_Init+0x212>
 8100d7a:	687b      	ldr	r3, [r7, #4]
 8100d7c:	4a17      	ldr	r2, [pc, #92]	; (8100ddc <HAL_GPIO_Init+0x264>)
 8100d7e:	4293      	cmp	r3, r2
 8100d80:	d101      	bne.n	8100d86 <HAL_GPIO_Init+0x20e>
 8100d82:	2309      	movs	r3, #9
 8100d84:	e02d      	b.n	8100de2 <HAL_GPIO_Init+0x26a>
 8100d86:	230a      	movs	r3, #10
 8100d88:	e02b      	b.n	8100de2 <HAL_GPIO_Init+0x26a>
 8100d8a:	2308      	movs	r3, #8
 8100d8c:	e029      	b.n	8100de2 <HAL_GPIO_Init+0x26a>
 8100d8e:	2307      	movs	r3, #7
 8100d90:	e027      	b.n	8100de2 <HAL_GPIO_Init+0x26a>
 8100d92:	2306      	movs	r3, #6
 8100d94:	e025      	b.n	8100de2 <HAL_GPIO_Init+0x26a>
 8100d96:	2305      	movs	r3, #5
 8100d98:	e023      	b.n	8100de2 <HAL_GPIO_Init+0x26a>
 8100d9a:	2304      	movs	r3, #4
 8100d9c:	e021      	b.n	8100de2 <HAL_GPIO_Init+0x26a>
 8100d9e:	2303      	movs	r3, #3
 8100da0:	e01f      	b.n	8100de2 <HAL_GPIO_Init+0x26a>
 8100da2:	2302      	movs	r3, #2
 8100da4:	e01d      	b.n	8100de2 <HAL_GPIO_Init+0x26a>
 8100da6:	2301      	movs	r3, #1
 8100da8:	e01b      	b.n	8100de2 <HAL_GPIO_Init+0x26a>
 8100daa:	bf00      	nop
 8100dac:	580000c0 	.word	0x580000c0
 8100db0:	58024400 	.word	0x58024400
 8100db4:	58000400 	.word	0x58000400
 8100db8:	58020000 	.word	0x58020000
 8100dbc:	58020400 	.word	0x58020400
 8100dc0:	58020800 	.word	0x58020800
 8100dc4:	58020c00 	.word	0x58020c00
 8100dc8:	58021000 	.word	0x58021000
 8100dcc:	58021400 	.word	0x58021400
 8100dd0:	58021800 	.word	0x58021800
 8100dd4:	58021c00 	.word	0x58021c00
 8100dd8:	58022000 	.word	0x58022000
 8100ddc:	58022400 	.word	0x58022400
 8100de0:	2300      	movs	r3, #0
 8100de2:	69fa      	ldr	r2, [r7, #28]
 8100de4:	f002 0203 	and.w	r2, r2, #3
 8100de8:	0092      	lsls	r2, r2, #2
 8100dea:	4093      	lsls	r3, r2
 8100dec:	69ba      	ldr	r2, [r7, #24]
 8100dee:	4313      	orrs	r3, r2
 8100df0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100df2:	4938      	ldr	r1, [pc, #224]	; (8100ed4 <HAL_GPIO_Init+0x35c>)
 8100df4:	69fb      	ldr	r3, [r7, #28]
 8100df6:	089b      	lsrs	r3, r3, #2
 8100df8:	3302      	adds	r3, #2
 8100dfa:	69ba      	ldr	r2, [r7, #24]
 8100dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100e04:	681b      	ldr	r3, [r3, #0]
 8100e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e08:	693b      	ldr	r3, [r7, #16]
 8100e0a:	43db      	mvns	r3, r3
 8100e0c:	69ba      	ldr	r2, [r7, #24]
 8100e0e:	4013      	ands	r3, r2
 8100e10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100e12:	683b      	ldr	r3, [r7, #0]
 8100e14:	685b      	ldr	r3, [r3, #4]
 8100e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100e1a:	2b00      	cmp	r3, #0
 8100e1c:	d003      	beq.n	8100e26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100e1e:	69ba      	ldr	r2, [r7, #24]
 8100e20:	693b      	ldr	r3, [r7, #16]
 8100e22:	4313      	orrs	r3, r2
 8100e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100e2a:	69bb      	ldr	r3, [r7, #24]
 8100e2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100e32:	685b      	ldr	r3, [r3, #4]
 8100e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e36:	693b      	ldr	r3, [r7, #16]
 8100e38:	43db      	mvns	r3, r3
 8100e3a:	69ba      	ldr	r2, [r7, #24]
 8100e3c:	4013      	ands	r3, r2
 8100e3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100e40:	683b      	ldr	r3, [r7, #0]
 8100e42:	685b      	ldr	r3, [r3, #4]
 8100e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100e48:	2b00      	cmp	r3, #0
 8100e4a:	d003      	beq.n	8100e54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100e4c:	69ba      	ldr	r2, [r7, #24]
 8100e4e:	693b      	ldr	r3, [r7, #16]
 8100e50:	4313      	orrs	r3, r2
 8100e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100e58:	69bb      	ldr	r3, [r7, #24]
 8100e5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100e5c:	697b      	ldr	r3, [r7, #20]
 8100e5e:	685b      	ldr	r3, [r3, #4]
 8100e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e62:	693b      	ldr	r3, [r7, #16]
 8100e64:	43db      	mvns	r3, r3
 8100e66:	69ba      	ldr	r2, [r7, #24]
 8100e68:	4013      	ands	r3, r2
 8100e6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100e6c:	683b      	ldr	r3, [r7, #0]
 8100e6e:	685b      	ldr	r3, [r3, #4]
 8100e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100e74:	2b00      	cmp	r3, #0
 8100e76:	d003      	beq.n	8100e80 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100e78:	69ba      	ldr	r2, [r7, #24]
 8100e7a:	693b      	ldr	r3, [r7, #16]
 8100e7c:	4313      	orrs	r3, r2
 8100e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100e80:	697b      	ldr	r3, [r7, #20]
 8100e82:	69ba      	ldr	r2, [r7, #24]
 8100e84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100e86:	697b      	ldr	r3, [r7, #20]
 8100e88:	681b      	ldr	r3, [r3, #0]
 8100e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e8c:	693b      	ldr	r3, [r7, #16]
 8100e8e:	43db      	mvns	r3, r3
 8100e90:	69ba      	ldr	r2, [r7, #24]
 8100e92:	4013      	ands	r3, r2
 8100e94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100e96:	683b      	ldr	r3, [r7, #0]
 8100e98:	685b      	ldr	r3, [r3, #4]
 8100e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100e9e:	2b00      	cmp	r3, #0
 8100ea0:	d003      	beq.n	8100eaa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100ea2:	69ba      	ldr	r2, [r7, #24]
 8100ea4:	693b      	ldr	r3, [r7, #16]
 8100ea6:	4313      	orrs	r3, r2
 8100ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100eaa:	697b      	ldr	r3, [r7, #20]
 8100eac:	69ba      	ldr	r2, [r7, #24]
 8100eae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100eb0:	69fb      	ldr	r3, [r7, #28]
 8100eb2:	3301      	adds	r3, #1
 8100eb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100eb6:	683b      	ldr	r3, [r7, #0]
 8100eb8:	681a      	ldr	r2, [r3, #0]
 8100eba:	69fb      	ldr	r3, [r7, #28]
 8100ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8100ec0:	2b00      	cmp	r3, #0
 8100ec2:	f47f ae63 	bne.w	8100b8c <HAL_GPIO_Init+0x14>
  }
}
 8100ec6:	bf00      	nop
 8100ec8:	bf00      	nop
 8100eca:	3724      	adds	r7, #36	; 0x24
 8100ecc:	46bd      	mov	sp, r7
 8100ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ed2:	4770      	bx	lr
 8100ed4:	58000400 	.word	0x58000400

08100ed8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8100ed8:	b480      	push	{r7}
 8100eda:	b085      	sub	sp, #20
 8100edc:	af00      	add	r7, sp, #0
 8100ede:	6078      	str	r0, [r7, #4]
 8100ee0:	460b      	mov	r3, r1
 8100ee2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8100ee4:	687b      	ldr	r3, [r7, #4]
 8100ee6:	691a      	ldr	r2, [r3, #16]
 8100ee8:	887b      	ldrh	r3, [r7, #2]
 8100eea:	4013      	ands	r3, r2
 8100eec:	2b00      	cmp	r3, #0
 8100eee:	d002      	beq.n	8100ef6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8100ef0:	2301      	movs	r3, #1
 8100ef2:	73fb      	strb	r3, [r7, #15]
 8100ef4:	e001      	b.n	8100efa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8100ef6:	2300      	movs	r3, #0
 8100ef8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8100efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8100efc:	4618      	mov	r0, r3
 8100efe:	3714      	adds	r7, #20
 8100f00:	46bd      	mov	sp, r7
 8100f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f06:	4770      	bx	lr

08100f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8100f08:	b480      	push	{r7}
 8100f0a:	b083      	sub	sp, #12
 8100f0c:	af00      	add	r7, sp, #0
 8100f0e:	6078      	str	r0, [r7, #4]
 8100f10:	460b      	mov	r3, r1
 8100f12:	807b      	strh	r3, [r7, #2]
 8100f14:	4613      	mov	r3, r2
 8100f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8100f18:	787b      	ldrb	r3, [r7, #1]
 8100f1a:	2b00      	cmp	r3, #0
 8100f1c:	d003      	beq.n	8100f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8100f1e:	887a      	ldrh	r2, [r7, #2]
 8100f20:	687b      	ldr	r3, [r7, #4]
 8100f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8100f24:	e003      	b.n	8100f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8100f26:	887b      	ldrh	r3, [r7, #2]
 8100f28:	041a      	lsls	r2, r3, #16
 8100f2a:	687b      	ldr	r3, [r7, #4]
 8100f2c:	619a      	str	r2, [r3, #24]
}
 8100f2e:	bf00      	nop
 8100f30:	370c      	adds	r7, #12
 8100f32:	46bd      	mov	sp, r7
 8100f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f38:	4770      	bx	lr

08100f3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8100f3a:	b480      	push	{r7}
 8100f3c:	b085      	sub	sp, #20
 8100f3e:	af00      	add	r7, sp, #0
 8100f40:	6078      	str	r0, [r7, #4]
 8100f42:	460b      	mov	r3, r1
 8100f44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8100f46:	687b      	ldr	r3, [r7, #4]
 8100f48:	695b      	ldr	r3, [r3, #20]
 8100f4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8100f4c:	887a      	ldrh	r2, [r7, #2]
 8100f4e:	68fb      	ldr	r3, [r7, #12]
 8100f50:	4013      	ands	r3, r2
 8100f52:	041a      	lsls	r2, r3, #16
 8100f54:	68fb      	ldr	r3, [r7, #12]
 8100f56:	43d9      	mvns	r1, r3
 8100f58:	887b      	ldrh	r3, [r7, #2]
 8100f5a:	400b      	ands	r3, r1
 8100f5c:	431a      	orrs	r2, r3
 8100f5e:	687b      	ldr	r3, [r7, #4]
 8100f60:	619a      	str	r2, [r3, #24]
}
 8100f62:	bf00      	nop
 8100f64:	3714      	adds	r7, #20
 8100f66:	46bd      	mov	sp, r7
 8100f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f6c:	4770      	bx	lr
	...

08100f70 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8100f70:	b480      	push	{r7}
 8100f72:	b083      	sub	sp, #12
 8100f74:	af00      	add	r7, sp, #0
 8100f76:	6078      	str	r0, [r7, #4]
 8100f78:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8100f7a:	490e      	ldr	r1, [pc, #56]	; (8100fb4 <HAL_HSEM_Take+0x44>)
 8100f7c:	683b      	ldr	r3, [r7, #0]
 8100f7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100f86:	687a      	ldr	r2, [r7, #4]
 8100f88:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8100f8c:	4a09      	ldr	r2, [pc, #36]	; (8100fb4 <HAL_HSEM_Take+0x44>)
 8100f8e:	687b      	ldr	r3, [r7, #4]
 8100f90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8100f94:	683b      	ldr	r3, [r7, #0]
 8100f96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100f9e:	429a      	cmp	r2, r3
 8100fa0:	d101      	bne.n	8100fa6 <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8100fa2:	2300      	movs	r3, #0
 8100fa4:	e000      	b.n	8100fa8 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8100fa6:	2301      	movs	r3, #1
}
 8100fa8:	4618      	mov	r0, r3
 8100faa:	370c      	adds	r7, #12
 8100fac:	46bd      	mov	sp, r7
 8100fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fb2:	4770      	bx	lr
 8100fb4:	58026400 	.word	0x58026400

08100fb8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8100fb8:	b480      	push	{r7}
 8100fba:	b083      	sub	sp, #12
 8100fbc:	af00      	add	r7, sp, #0
 8100fbe:	6078      	str	r0, [r7, #4]
 8100fc0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8100fc2:	4906      	ldr	r1, [pc, #24]	; (8100fdc <HAL_HSEM_Release+0x24>)
 8100fc4:	683b      	ldr	r3, [r7, #0]
 8100fc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8100fca:	687b      	ldr	r3, [r7, #4]
 8100fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8100fd0:	bf00      	nop
 8100fd2:	370c      	adds	r7, #12
 8100fd4:	46bd      	mov	sp, r7
 8100fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fda:	4770      	bx	lr
 8100fdc:	58026400 	.word	0x58026400

08100fe0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100fe0:	b480      	push	{r7}
 8100fe2:	b083      	sub	sp, #12
 8100fe4:	af00      	add	r7, sp, #0
 8100fe6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100fe8:	4b05      	ldr	r3, [pc, #20]	; (8101000 <HAL_HSEM_ActivateNotification+0x20>)
 8100fea:	681a      	ldr	r2, [r3, #0]
 8100fec:	4904      	ldr	r1, [pc, #16]	; (8101000 <HAL_HSEM_ActivateNotification+0x20>)
 8100fee:	687b      	ldr	r3, [r7, #4]
 8100ff0:	4313      	orrs	r3, r2
 8100ff2:	600b      	str	r3, [r1, #0]
#endif
}
 8100ff4:	bf00      	nop
 8100ff6:	370c      	adds	r7, #12
 8100ff8:	46bd      	mov	sp, r7
 8100ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ffe:	4770      	bx	lr
 8101000:	58026510 	.word	0x58026510

08101004 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101004:	b580      	push	{r7, lr}
 8101006:	b084      	sub	sp, #16
 8101008:	af00      	add	r7, sp, #0
 810100a:	60f8      	str	r0, [r7, #12]
 810100c:	460b      	mov	r3, r1
 810100e:	607a      	str	r2, [r7, #4]
 8101010:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8101012:	4b37      	ldr	r3, [pc, #220]	; (81010f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101014:	681b      	ldr	r3, [r3, #0]
 8101016:	f023 0201 	bic.w	r2, r3, #1
 810101a:	4935      	ldr	r1, [pc, #212]	; (81010f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810101c:	68fb      	ldr	r3, [r7, #12]
 810101e:	4313      	orrs	r3, r2
 8101020:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8101022:	687b      	ldr	r3, [r7, #4]
 8101024:	2b00      	cmp	r3, #0
 8101026:	d123      	bne.n	8101070 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101028:	f7ff fd92 	bl	8100b50 <HAL_GetCurrentCPUID>
 810102c:	4603      	mov	r3, r0
 810102e:	2b03      	cmp	r3, #3
 8101030:	d158      	bne.n	81010e4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8101032:	4b2f      	ldr	r3, [pc, #188]	; (81010f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101034:	691b      	ldr	r3, [r3, #16]
 8101036:	4a2e      	ldr	r2, [pc, #184]	; (81010f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101038:	f023 0301 	bic.w	r3, r3, #1
 810103c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810103e:	4b2d      	ldr	r3, [pc, #180]	; (81010f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101040:	691b      	ldr	r3, [r3, #16]
 8101042:	4a2c      	ldr	r2, [pc, #176]	; (81010f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101044:	f043 0304 	orr.w	r3, r3, #4
 8101048:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810104a:	f3bf 8f4f 	dsb	sy
}
 810104e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101050:	f3bf 8f6f 	isb	sy
}
 8101054:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101056:	7afb      	ldrb	r3, [r7, #11]
 8101058:	2b01      	cmp	r3, #1
 810105a:	d101      	bne.n	8101060 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810105c:	bf30      	wfi
 810105e:	e000      	b.n	8101062 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101060:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101062:	4b24      	ldr	r3, [pc, #144]	; (81010f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101064:	691b      	ldr	r3, [r3, #16]
 8101066:	4a23      	ldr	r2, [pc, #140]	; (81010f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101068:	f023 0304 	bic.w	r3, r3, #4
 810106c:	6113      	str	r3, [r2, #16]
 810106e:	e03c      	b.n	81010ea <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101070:	687b      	ldr	r3, [r7, #4]
 8101072:	2b01      	cmp	r3, #1
 8101074:	d123      	bne.n	81010be <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101076:	f7ff fd6b 	bl	8100b50 <HAL_GetCurrentCPUID>
 810107a:	4603      	mov	r3, r0
 810107c:	2b01      	cmp	r3, #1
 810107e:	d133      	bne.n	81010e8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101080:	4b1b      	ldr	r3, [pc, #108]	; (81010f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101082:	695b      	ldr	r3, [r3, #20]
 8101084:	4a1a      	ldr	r2, [pc, #104]	; (81010f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101086:	f023 0302 	bic.w	r3, r3, #2
 810108a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810108c:	4b19      	ldr	r3, [pc, #100]	; (81010f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810108e:	691b      	ldr	r3, [r3, #16]
 8101090:	4a18      	ldr	r2, [pc, #96]	; (81010f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101092:	f043 0304 	orr.w	r3, r3, #4
 8101096:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101098:	f3bf 8f4f 	dsb	sy
}
 810109c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810109e:	f3bf 8f6f 	isb	sy
}
 81010a2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81010a4:	7afb      	ldrb	r3, [r7, #11]
 81010a6:	2b01      	cmp	r3, #1
 81010a8:	d101      	bne.n	81010ae <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81010aa:	bf30      	wfi
 81010ac:	e000      	b.n	81010b0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81010ae:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81010b0:	4b10      	ldr	r3, [pc, #64]	; (81010f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81010b2:	691b      	ldr	r3, [r3, #16]
 81010b4:	4a0f      	ldr	r2, [pc, #60]	; (81010f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81010b6:	f023 0304 	bic.w	r3, r3, #4
 81010ba:	6113      	str	r3, [r2, #16]
 81010bc:	e015      	b.n	81010ea <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81010be:	f7ff fd47 	bl	8100b50 <HAL_GetCurrentCPUID>
 81010c2:	4603      	mov	r3, r0
 81010c4:	2b03      	cmp	r3, #3
 81010c6:	d106      	bne.n	81010d6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81010c8:	4b09      	ldr	r3, [pc, #36]	; (81010f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81010ca:	691b      	ldr	r3, [r3, #16]
 81010cc:	4a08      	ldr	r2, [pc, #32]	; (81010f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81010ce:	f023 0304 	bic.w	r3, r3, #4
 81010d2:	6113      	str	r3, [r2, #16]
 81010d4:	e009      	b.n	81010ea <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81010d6:	4b06      	ldr	r3, [pc, #24]	; (81010f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81010d8:	695b      	ldr	r3, [r3, #20]
 81010da:	4a05      	ldr	r2, [pc, #20]	; (81010f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81010dc:	f023 0304 	bic.w	r3, r3, #4
 81010e0:	6153      	str	r3, [r2, #20]
 81010e2:	e002      	b.n	81010ea <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81010e4:	bf00      	nop
 81010e6:	e000      	b.n	81010ea <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81010e8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81010ea:	3710      	adds	r7, #16
 81010ec:	46bd      	mov	sp, r7
 81010ee:	bd80      	pop	{r7, pc}
 81010f0:	58024800 	.word	0x58024800
 81010f4:	e000ed00 	.word	0xe000ed00

081010f8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81010f8:	b580      	push	{r7, lr}
 81010fa:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81010fc:	f7ff fd28 	bl	8100b50 <HAL_GetCurrentCPUID>
 8101100:	4603      	mov	r3, r0
 8101102:	2b03      	cmp	r3, #3
 8101104:	d101      	bne.n	810110a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101106:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101108:	e001      	b.n	810110e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810110a:	bf40      	sev
    __WFE ();
 810110c:	bf20      	wfe
}
 810110e:	bf00      	nop
 8101110:	bd80      	pop	{r7, pc}
	...

08101114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101114:	b480      	push	{r7}
 8101116:	b089      	sub	sp, #36	; 0x24
 8101118:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810111a:	4bb3      	ldr	r3, [pc, #716]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810111c:	691b      	ldr	r3, [r3, #16]
 810111e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8101122:	2b18      	cmp	r3, #24
 8101124:	f200 8155 	bhi.w	81013d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8101128:	a201      	add	r2, pc, #4	; (adr r2, 8101130 <HAL_RCC_GetSysClockFreq+0x1c>)
 810112a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810112e:	bf00      	nop
 8101130:	08101195 	.word	0x08101195
 8101134:	081013d3 	.word	0x081013d3
 8101138:	081013d3 	.word	0x081013d3
 810113c:	081013d3 	.word	0x081013d3
 8101140:	081013d3 	.word	0x081013d3
 8101144:	081013d3 	.word	0x081013d3
 8101148:	081013d3 	.word	0x081013d3
 810114c:	081013d3 	.word	0x081013d3
 8101150:	081011bb 	.word	0x081011bb
 8101154:	081013d3 	.word	0x081013d3
 8101158:	081013d3 	.word	0x081013d3
 810115c:	081013d3 	.word	0x081013d3
 8101160:	081013d3 	.word	0x081013d3
 8101164:	081013d3 	.word	0x081013d3
 8101168:	081013d3 	.word	0x081013d3
 810116c:	081013d3 	.word	0x081013d3
 8101170:	081011c1 	.word	0x081011c1
 8101174:	081013d3 	.word	0x081013d3
 8101178:	081013d3 	.word	0x081013d3
 810117c:	081013d3 	.word	0x081013d3
 8101180:	081013d3 	.word	0x081013d3
 8101184:	081013d3 	.word	0x081013d3
 8101188:	081013d3 	.word	0x081013d3
 810118c:	081013d3 	.word	0x081013d3
 8101190:	081011c7 	.word	0x081011c7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101194:	4b94      	ldr	r3, [pc, #592]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101196:	681b      	ldr	r3, [r3, #0]
 8101198:	f003 0320 	and.w	r3, r3, #32
 810119c:	2b00      	cmp	r3, #0
 810119e:	d009      	beq.n	81011b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81011a0:	4b91      	ldr	r3, [pc, #580]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011a2:	681b      	ldr	r3, [r3, #0]
 81011a4:	08db      	lsrs	r3, r3, #3
 81011a6:	f003 0303 	and.w	r3, r3, #3
 81011aa:	4a90      	ldr	r2, [pc, #576]	; (81013ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 81011ac:	fa22 f303 	lsr.w	r3, r2, r3
 81011b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81011b2:	e111      	b.n	81013d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81011b4:	4b8d      	ldr	r3, [pc, #564]	; (81013ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 81011b6:	61bb      	str	r3, [r7, #24]
    break;
 81011b8:	e10e      	b.n	81013d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81011ba:	4b8d      	ldr	r3, [pc, #564]	; (81013f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81011bc:	61bb      	str	r3, [r7, #24]
    break;
 81011be:	e10b      	b.n	81013d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81011c0:	4b8c      	ldr	r3, [pc, #560]	; (81013f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81011c2:	61bb      	str	r3, [r7, #24]
    break;
 81011c4:	e108      	b.n	81013d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81011c6:	4b88      	ldr	r3, [pc, #544]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81011ca:	f003 0303 	and.w	r3, r3, #3
 81011ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81011d0:	4b85      	ldr	r3, [pc, #532]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81011d4:	091b      	lsrs	r3, r3, #4
 81011d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81011da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81011dc:	4b82      	ldr	r3, [pc, #520]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81011e0:	f003 0301 	and.w	r3, r3, #1
 81011e4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81011e6:	4b80      	ldr	r3, [pc, #512]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81011ea:	08db      	lsrs	r3, r3, #3
 81011ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81011f0:	68fa      	ldr	r2, [r7, #12]
 81011f2:	fb02 f303 	mul.w	r3, r2, r3
 81011f6:	ee07 3a90 	vmov	s15, r3
 81011fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81011fe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8101202:	693b      	ldr	r3, [r7, #16]
 8101204:	2b00      	cmp	r3, #0
 8101206:	f000 80e1 	beq.w	81013cc <HAL_RCC_GetSysClockFreq+0x2b8>
 810120a:	697b      	ldr	r3, [r7, #20]
 810120c:	2b02      	cmp	r3, #2
 810120e:	f000 8083 	beq.w	8101318 <HAL_RCC_GetSysClockFreq+0x204>
 8101212:	697b      	ldr	r3, [r7, #20]
 8101214:	2b02      	cmp	r3, #2
 8101216:	f200 80a1 	bhi.w	810135c <HAL_RCC_GetSysClockFreq+0x248>
 810121a:	697b      	ldr	r3, [r7, #20]
 810121c:	2b00      	cmp	r3, #0
 810121e:	d003      	beq.n	8101228 <HAL_RCC_GetSysClockFreq+0x114>
 8101220:	697b      	ldr	r3, [r7, #20]
 8101222:	2b01      	cmp	r3, #1
 8101224:	d056      	beq.n	81012d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101226:	e099      	b.n	810135c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101228:	4b6f      	ldr	r3, [pc, #444]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810122a:	681b      	ldr	r3, [r3, #0]
 810122c:	f003 0320 	and.w	r3, r3, #32
 8101230:	2b00      	cmp	r3, #0
 8101232:	d02d      	beq.n	8101290 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101234:	4b6c      	ldr	r3, [pc, #432]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101236:	681b      	ldr	r3, [r3, #0]
 8101238:	08db      	lsrs	r3, r3, #3
 810123a:	f003 0303 	and.w	r3, r3, #3
 810123e:	4a6b      	ldr	r2, [pc, #428]	; (81013ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101240:	fa22 f303 	lsr.w	r3, r2, r3
 8101244:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101246:	687b      	ldr	r3, [r7, #4]
 8101248:	ee07 3a90 	vmov	s15, r3
 810124c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101250:	693b      	ldr	r3, [r7, #16]
 8101252:	ee07 3a90 	vmov	s15, r3
 8101256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810125a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810125e:	4b62      	ldr	r3, [pc, #392]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101266:	ee07 3a90 	vmov	s15, r3
 810126a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810126e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101272:	eddf 5a61 	vldr	s11, [pc, #388]	; 81013f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810127a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810127e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101286:	ee67 7a27 	vmul.f32	s15, s14, s15
 810128a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810128e:	e087      	b.n	81013a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101290:	693b      	ldr	r3, [r7, #16]
 8101292:	ee07 3a90 	vmov	s15, r3
 8101296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810129a:	eddf 6a58 	vldr	s13, [pc, #352]	; 81013fc <HAL_RCC_GetSysClockFreq+0x2e8>
 810129e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81012a2:	4b51      	ldr	r3, [pc, #324]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81012a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81012aa:	ee07 3a90 	vmov	s15, r3
 81012ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81012b2:	ed97 6a02 	vldr	s12, [r7, #8]
 81012b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 81013f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81012ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81012be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81012c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81012c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81012ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81012ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81012d2:	e065      	b.n	81013a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81012d4:	693b      	ldr	r3, [r7, #16]
 81012d6:	ee07 3a90 	vmov	s15, r3
 81012da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81012de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8101400 <HAL_RCC_GetSysClockFreq+0x2ec>
 81012e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81012e6:	4b40      	ldr	r3, [pc, #256]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81012ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81012ee:	ee07 3a90 	vmov	s15, r3
 81012f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81012f6:	ed97 6a02 	vldr	s12, [r7, #8]
 81012fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81013f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81012fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810130a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810130e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101312:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101316:	e043      	b.n	81013a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101318:	693b      	ldr	r3, [r7, #16]
 810131a:	ee07 3a90 	vmov	s15, r3
 810131e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101322:	eddf 6a38 	vldr	s13, [pc, #224]	; 8101404 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810132a:	4b2f      	ldr	r3, [pc, #188]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810132e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101332:	ee07 3a90 	vmov	s15, r3
 8101336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810133a:	ed97 6a02 	vldr	s12, [r7, #8]
 810133e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81013f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810134a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810134e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101356:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810135a:	e021      	b.n	81013a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810135c:	693b      	ldr	r3, [r7, #16]
 810135e:	ee07 3a90 	vmov	s15, r3
 8101362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101366:	eddf 6a26 	vldr	s13, [pc, #152]	; 8101400 <HAL_RCC_GetSysClockFreq+0x2ec>
 810136a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810136e:	4b1e      	ldr	r3, [pc, #120]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101376:	ee07 3a90 	vmov	s15, r3
 810137a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810137e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101382:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81013f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810138a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810138e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101396:	ee67 7a27 	vmul.f32	s15, s14, s15
 810139a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810139e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81013a0:	4b11      	ldr	r3, [pc, #68]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81013a4:	0a5b      	lsrs	r3, r3, #9
 81013a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81013aa:	3301      	adds	r3, #1
 81013ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81013ae:	683b      	ldr	r3, [r7, #0]
 81013b0:	ee07 3a90 	vmov	s15, r3
 81013b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81013b8:	edd7 6a07 	vldr	s13, [r7, #28]
 81013bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81013c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81013c4:	ee17 3a90 	vmov	r3, s15
 81013c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81013ca:	e005      	b.n	81013d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81013cc:	2300      	movs	r3, #0
 81013ce:	61bb      	str	r3, [r7, #24]
    break;
 81013d0:	e002      	b.n	81013d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81013d2:	4b07      	ldr	r3, [pc, #28]	; (81013f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81013d4:	61bb      	str	r3, [r7, #24]
    break;
 81013d6:	bf00      	nop
  }

  return sysclockfreq;
 81013d8:	69bb      	ldr	r3, [r7, #24]
}
 81013da:	4618      	mov	r0, r3
 81013dc:	3724      	adds	r7, #36	; 0x24
 81013de:	46bd      	mov	sp, r7
 81013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013e4:	4770      	bx	lr
 81013e6:	bf00      	nop
 81013e8:	58024400 	.word	0x58024400
 81013ec:	03d09000 	.word	0x03d09000
 81013f0:	003d0900 	.word	0x003d0900
 81013f4:	007a1200 	.word	0x007a1200
 81013f8:	46000000 	.word	0x46000000
 81013fc:	4c742400 	.word	0x4c742400
 8101400:	4a742400 	.word	0x4a742400
 8101404:	4af42400 	.word	0x4af42400

08101408 <__errno>:
 8101408:	4b01      	ldr	r3, [pc, #4]	; (8101410 <__errno+0x8>)
 810140a:	6818      	ldr	r0, [r3, #0]
 810140c:	4770      	bx	lr
 810140e:	bf00      	nop
 8101410:	10000014 	.word	0x10000014

08101414 <__libc_init_array>:
 8101414:	b570      	push	{r4, r5, r6, lr}
 8101416:	4d0d      	ldr	r5, [pc, #52]	; (810144c <__libc_init_array+0x38>)
 8101418:	4c0d      	ldr	r4, [pc, #52]	; (8101450 <__libc_init_array+0x3c>)
 810141a:	1b64      	subs	r4, r4, r5
 810141c:	10a4      	asrs	r4, r4, #2
 810141e:	2600      	movs	r6, #0
 8101420:	42a6      	cmp	r6, r4
 8101422:	d109      	bne.n	8101438 <__libc_init_array+0x24>
 8101424:	4d0b      	ldr	r5, [pc, #44]	; (8101454 <__libc_init_array+0x40>)
 8101426:	4c0c      	ldr	r4, [pc, #48]	; (8101458 <__libc_init_array+0x44>)
 8101428:	f001 f858 	bl	81024dc <_init>
 810142c:	1b64      	subs	r4, r4, r5
 810142e:	10a4      	asrs	r4, r4, #2
 8101430:	2600      	movs	r6, #0
 8101432:	42a6      	cmp	r6, r4
 8101434:	d105      	bne.n	8101442 <__libc_init_array+0x2e>
 8101436:	bd70      	pop	{r4, r5, r6, pc}
 8101438:	f855 3b04 	ldr.w	r3, [r5], #4
 810143c:	4798      	blx	r3
 810143e:	3601      	adds	r6, #1
 8101440:	e7ee      	b.n	8101420 <__libc_init_array+0xc>
 8101442:	f855 3b04 	ldr.w	r3, [r5], #4
 8101446:	4798      	blx	r3
 8101448:	3601      	adds	r6, #1
 810144a:	e7f2      	b.n	8101432 <__libc_init_array+0x1e>
 810144c:	0810264c 	.word	0x0810264c
 8101450:	0810264c 	.word	0x0810264c
 8101454:	0810264c 	.word	0x0810264c
 8101458:	08102650 	.word	0x08102650

0810145c <memset>:
 810145c:	4402      	add	r2, r0
 810145e:	4603      	mov	r3, r0
 8101460:	4293      	cmp	r3, r2
 8101462:	d100      	bne.n	8101466 <memset+0xa>
 8101464:	4770      	bx	lr
 8101466:	f803 1b01 	strb.w	r1, [r3], #1
 810146a:	e7f9      	b.n	8101460 <memset+0x4>

0810146c <rand>:
 810146c:	4b16      	ldr	r3, [pc, #88]	; (81014c8 <rand+0x5c>)
 810146e:	b510      	push	{r4, lr}
 8101470:	681c      	ldr	r4, [r3, #0]
 8101472:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8101474:	b9b3      	cbnz	r3, 81014a4 <rand+0x38>
 8101476:	2018      	movs	r0, #24
 8101478:	f000 f866 	bl	8101548 <malloc>
 810147c:	63a0      	str	r0, [r4, #56]	; 0x38
 810147e:	b928      	cbnz	r0, 810148c <rand+0x20>
 8101480:	4602      	mov	r2, r0
 8101482:	4b12      	ldr	r3, [pc, #72]	; (81014cc <rand+0x60>)
 8101484:	4812      	ldr	r0, [pc, #72]	; (81014d0 <rand+0x64>)
 8101486:	214e      	movs	r1, #78	; 0x4e
 8101488:	f000 f82e 	bl	81014e8 <__assert_func>
 810148c:	4a11      	ldr	r2, [pc, #68]	; (81014d4 <rand+0x68>)
 810148e:	4b12      	ldr	r3, [pc, #72]	; (81014d8 <rand+0x6c>)
 8101490:	e9c0 2300 	strd	r2, r3, [r0]
 8101494:	4b11      	ldr	r3, [pc, #68]	; (81014dc <rand+0x70>)
 8101496:	6083      	str	r3, [r0, #8]
 8101498:	230b      	movs	r3, #11
 810149a:	8183      	strh	r3, [r0, #12]
 810149c:	2201      	movs	r2, #1
 810149e:	2300      	movs	r3, #0
 81014a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 81014a4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 81014a6:	4a0e      	ldr	r2, [pc, #56]	; (81014e0 <rand+0x74>)
 81014a8:	6920      	ldr	r0, [r4, #16]
 81014aa:	6963      	ldr	r3, [r4, #20]
 81014ac:	490d      	ldr	r1, [pc, #52]	; (81014e4 <rand+0x78>)
 81014ae:	4342      	muls	r2, r0
 81014b0:	fb01 2203 	mla	r2, r1, r3, r2
 81014b4:	fba0 0101 	umull	r0, r1, r0, r1
 81014b8:	1c43      	adds	r3, r0, #1
 81014ba:	eb42 0001 	adc.w	r0, r2, r1
 81014be:	e9c4 3004 	strd	r3, r0, [r4, #16]
 81014c2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 81014c6:	bd10      	pop	{r4, pc}
 81014c8:	10000014 	.word	0x10000014
 81014cc:	08102508 	.word	0x08102508
 81014d0:	0810251f 	.word	0x0810251f
 81014d4:	abcd330e 	.word	0xabcd330e
 81014d8:	e66d1234 	.word	0xe66d1234
 81014dc:	0005deec 	.word	0x0005deec
 81014e0:	5851f42d 	.word	0x5851f42d
 81014e4:	4c957f2d 	.word	0x4c957f2d

081014e8 <__assert_func>:
 81014e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 81014ea:	4614      	mov	r4, r2
 81014ec:	461a      	mov	r2, r3
 81014ee:	4b09      	ldr	r3, [pc, #36]	; (8101514 <__assert_func+0x2c>)
 81014f0:	681b      	ldr	r3, [r3, #0]
 81014f2:	4605      	mov	r5, r0
 81014f4:	68d8      	ldr	r0, [r3, #12]
 81014f6:	b14c      	cbz	r4, 810150c <__assert_func+0x24>
 81014f8:	4b07      	ldr	r3, [pc, #28]	; (8101518 <__assert_func+0x30>)
 81014fa:	9100      	str	r1, [sp, #0]
 81014fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8101500:	4906      	ldr	r1, [pc, #24]	; (810151c <__assert_func+0x34>)
 8101502:	462b      	mov	r3, r5
 8101504:	f000 f80e 	bl	8101524 <fiprintf>
 8101508:	f000 fcc4 	bl	8101e94 <abort>
 810150c:	4b04      	ldr	r3, [pc, #16]	; (8101520 <__assert_func+0x38>)
 810150e:	461c      	mov	r4, r3
 8101510:	e7f3      	b.n	81014fa <__assert_func+0x12>
 8101512:	bf00      	nop
 8101514:	10000014 	.word	0x10000014
 8101518:	0810257a 	.word	0x0810257a
 810151c:	08102587 	.word	0x08102587
 8101520:	081025b5 	.word	0x081025b5

08101524 <fiprintf>:
 8101524:	b40e      	push	{r1, r2, r3}
 8101526:	b503      	push	{r0, r1, lr}
 8101528:	4601      	mov	r1, r0
 810152a:	ab03      	add	r3, sp, #12
 810152c:	4805      	ldr	r0, [pc, #20]	; (8101544 <fiprintf+0x20>)
 810152e:	f853 2b04 	ldr.w	r2, [r3], #4
 8101532:	6800      	ldr	r0, [r0, #0]
 8101534:	9301      	str	r3, [sp, #4]
 8101536:	f000 f919 	bl	810176c <_vfiprintf_r>
 810153a:	b002      	add	sp, #8
 810153c:	f85d eb04 	ldr.w	lr, [sp], #4
 8101540:	b003      	add	sp, #12
 8101542:	4770      	bx	lr
 8101544:	10000014 	.word	0x10000014

08101548 <malloc>:
 8101548:	4b02      	ldr	r3, [pc, #8]	; (8101554 <malloc+0xc>)
 810154a:	4601      	mov	r1, r0
 810154c:	6818      	ldr	r0, [r3, #0]
 810154e:	f000 b86f 	b.w	8101630 <_malloc_r>
 8101552:	bf00      	nop
 8101554:	10000014 	.word	0x10000014

08101558 <_free_r>:
 8101558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810155a:	2900      	cmp	r1, #0
 810155c:	d044      	beq.n	81015e8 <_free_r+0x90>
 810155e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8101562:	9001      	str	r0, [sp, #4]
 8101564:	2b00      	cmp	r3, #0
 8101566:	f1a1 0404 	sub.w	r4, r1, #4
 810156a:	bfb8      	it	lt
 810156c:	18e4      	addlt	r4, r4, r3
 810156e:	f000 feb9 	bl	81022e4 <__malloc_lock>
 8101572:	4a1e      	ldr	r2, [pc, #120]	; (81015ec <_free_r+0x94>)
 8101574:	9801      	ldr	r0, [sp, #4]
 8101576:	6813      	ldr	r3, [r2, #0]
 8101578:	b933      	cbnz	r3, 8101588 <_free_r+0x30>
 810157a:	6063      	str	r3, [r4, #4]
 810157c:	6014      	str	r4, [r2, #0]
 810157e:	b003      	add	sp, #12
 8101580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8101584:	f000 beb4 	b.w	81022f0 <__malloc_unlock>
 8101588:	42a3      	cmp	r3, r4
 810158a:	d908      	bls.n	810159e <_free_r+0x46>
 810158c:	6825      	ldr	r5, [r4, #0]
 810158e:	1961      	adds	r1, r4, r5
 8101590:	428b      	cmp	r3, r1
 8101592:	bf01      	itttt	eq
 8101594:	6819      	ldreq	r1, [r3, #0]
 8101596:	685b      	ldreq	r3, [r3, #4]
 8101598:	1949      	addeq	r1, r1, r5
 810159a:	6021      	streq	r1, [r4, #0]
 810159c:	e7ed      	b.n	810157a <_free_r+0x22>
 810159e:	461a      	mov	r2, r3
 81015a0:	685b      	ldr	r3, [r3, #4]
 81015a2:	b10b      	cbz	r3, 81015a8 <_free_r+0x50>
 81015a4:	42a3      	cmp	r3, r4
 81015a6:	d9fa      	bls.n	810159e <_free_r+0x46>
 81015a8:	6811      	ldr	r1, [r2, #0]
 81015aa:	1855      	adds	r5, r2, r1
 81015ac:	42a5      	cmp	r5, r4
 81015ae:	d10b      	bne.n	81015c8 <_free_r+0x70>
 81015b0:	6824      	ldr	r4, [r4, #0]
 81015b2:	4421      	add	r1, r4
 81015b4:	1854      	adds	r4, r2, r1
 81015b6:	42a3      	cmp	r3, r4
 81015b8:	6011      	str	r1, [r2, #0]
 81015ba:	d1e0      	bne.n	810157e <_free_r+0x26>
 81015bc:	681c      	ldr	r4, [r3, #0]
 81015be:	685b      	ldr	r3, [r3, #4]
 81015c0:	6053      	str	r3, [r2, #4]
 81015c2:	4421      	add	r1, r4
 81015c4:	6011      	str	r1, [r2, #0]
 81015c6:	e7da      	b.n	810157e <_free_r+0x26>
 81015c8:	d902      	bls.n	81015d0 <_free_r+0x78>
 81015ca:	230c      	movs	r3, #12
 81015cc:	6003      	str	r3, [r0, #0]
 81015ce:	e7d6      	b.n	810157e <_free_r+0x26>
 81015d0:	6825      	ldr	r5, [r4, #0]
 81015d2:	1961      	adds	r1, r4, r5
 81015d4:	428b      	cmp	r3, r1
 81015d6:	bf04      	itt	eq
 81015d8:	6819      	ldreq	r1, [r3, #0]
 81015da:	685b      	ldreq	r3, [r3, #4]
 81015dc:	6063      	str	r3, [r4, #4]
 81015de:	bf04      	itt	eq
 81015e0:	1949      	addeq	r1, r1, r5
 81015e2:	6021      	streq	r1, [r4, #0]
 81015e4:	6054      	str	r4, [r2, #4]
 81015e6:	e7ca      	b.n	810157e <_free_r+0x26>
 81015e8:	b003      	add	sp, #12
 81015ea:	bd30      	pop	{r4, r5, pc}
 81015ec:	100000a0 	.word	0x100000a0

081015f0 <sbrk_aligned>:
 81015f0:	b570      	push	{r4, r5, r6, lr}
 81015f2:	4e0e      	ldr	r6, [pc, #56]	; (810162c <sbrk_aligned+0x3c>)
 81015f4:	460c      	mov	r4, r1
 81015f6:	6831      	ldr	r1, [r6, #0]
 81015f8:	4605      	mov	r5, r0
 81015fa:	b911      	cbnz	r1, 8101602 <sbrk_aligned+0x12>
 81015fc:	f000 fb7a 	bl	8101cf4 <_sbrk_r>
 8101600:	6030      	str	r0, [r6, #0]
 8101602:	4621      	mov	r1, r4
 8101604:	4628      	mov	r0, r5
 8101606:	f000 fb75 	bl	8101cf4 <_sbrk_r>
 810160a:	1c43      	adds	r3, r0, #1
 810160c:	d00a      	beq.n	8101624 <sbrk_aligned+0x34>
 810160e:	1cc4      	adds	r4, r0, #3
 8101610:	f024 0403 	bic.w	r4, r4, #3
 8101614:	42a0      	cmp	r0, r4
 8101616:	d007      	beq.n	8101628 <sbrk_aligned+0x38>
 8101618:	1a21      	subs	r1, r4, r0
 810161a:	4628      	mov	r0, r5
 810161c:	f000 fb6a 	bl	8101cf4 <_sbrk_r>
 8101620:	3001      	adds	r0, #1
 8101622:	d101      	bne.n	8101628 <sbrk_aligned+0x38>
 8101624:	f04f 34ff 	mov.w	r4, #4294967295
 8101628:	4620      	mov	r0, r4
 810162a:	bd70      	pop	{r4, r5, r6, pc}
 810162c:	100000a4 	.word	0x100000a4

08101630 <_malloc_r>:
 8101630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8101634:	1ccd      	adds	r5, r1, #3
 8101636:	f025 0503 	bic.w	r5, r5, #3
 810163a:	3508      	adds	r5, #8
 810163c:	2d0c      	cmp	r5, #12
 810163e:	bf38      	it	cc
 8101640:	250c      	movcc	r5, #12
 8101642:	2d00      	cmp	r5, #0
 8101644:	4607      	mov	r7, r0
 8101646:	db01      	blt.n	810164c <_malloc_r+0x1c>
 8101648:	42a9      	cmp	r1, r5
 810164a:	d905      	bls.n	8101658 <_malloc_r+0x28>
 810164c:	230c      	movs	r3, #12
 810164e:	603b      	str	r3, [r7, #0]
 8101650:	2600      	movs	r6, #0
 8101652:	4630      	mov	r0, r6
 8101654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8101658:	4e2e      	ldr	r6, [pc, #184]	; (8101714 <_malloc_r+0xe4>)
 810165a:	f000 fe43 	bl	81022e4 <__malloc_lock>
 810165e:	6833      	ldr	r3, [r6, #0]
 8101660:	461c      	mov	r4, r3
 8101662:	bb34      	cbnz	r4, 81016b2 <_malloc_r+0x82>
 8101664:	4629      	mov	r1, r5
 8101666:	4638      	mov	r0, r7
 8101668:	f7ff ffc2 	bl	81015f0 <sbrk_aligned>
 810166c:	1c43      	adds	r3, r0, #1
 810166e:	4604      	mov	r4, r0
 8101670:	d14d      	bne.n	810170e <_malloc_r+0xde>
 8101672:	6834      	ldr	r4, [r6, #0]
 8101674:	4626      	mov	r6, r4
 8101676:	2e00      	cmp	r6, #0
 8101678:	d140      	bne.n	81016fc <_malloc_r+0xcc>
 810167a:	6823      	ldr	r3, [r4, #0]
 810167c:	4631      	mov	r1, r6
 810167e:	4638      	mov	r0, r7
 8101680:	eb04 0803 	add.w	r8, r4, r3
 8101684:	f000 fb36 	bl	8101cf4 <_sbrk_r>
 8101688:	4580      	cmp	r8, r0
 810168a:	d13a      	bne.n	8101702 <_malloc_r+0xd2>
 810168c:	6821      	ldr	r1, [r4, #0]
 810168e:	3503      	adds	r5, #3
 8101690:	1a6d      	subs	r5, r5, r1
 8101692:	f025 0503 	bic.w	r5, r5, #3
 8101696:	3508      	adds	r5, #8
 8101698:	2d0c      	cmp	r5, #12
 810169a:	bf38      	it	cc
 810169c:	250c      	movcc	r5, #12
 810169e:	4629      	mov	r1, r5
 81016a0:	4638      	mov	r0, r7
 81016a2:	f7ff ffa5 	bl	81015f0 <sbrk_aligned>
 81016a6:	3001      	adds	r0, #1
 81016a8:	d02b      	beq.n	8101702 <_malloc_r+0xd2>
 81016aa:	6823      	ldr	r3, [r4, #0]
 81016ac:	442b      	add	r3, r5
 81016ae:	6023      	str	r3, [r4, #0]
 81016b0:	e00e      	b.n	81016d0 <_malloc_r+0xa0>
 81016b2:	6822      	ldr	r2, [r4, #0]
 81016b4:	1b52      	subs	r2, r2, r5
 81016b6:	d41e      	bmi.n	81016f6 <_malloc_r+0xc6>
 81016b8:	2a0b      	cmp	r2, #11
 81016ba:	d916      	bls.n	81016ea <_malloc_r+0xba>
 81016bc:	1961      	adds	r1, r4, r5
 81016be:	42a3      	cmp	r3, r4
 81016c0:	6025      	str	r5, [r4, #0]
 81016c2:	bf18      	it	ne
 81016c4:	6059      	strne	r1, [r3, #4]
 81016c6:	6863      	ldr	r3, [r4, #4]
 81016c8:	bf08      	it	eq
 81016ca:	6031      	streq	r1, [r6, #0]
 81016cc:	5162      	str	r2, [r4, r5]
 81016ce:	604b      	str	r3, [r1, #4]
 81016d0:	4638      	mov	r0, r7
 81016d2:	f104 060b 	add.w	r6, r4, #11
 81016d6:	f000 fe0b 	bl	81022f0 <__malloc_unlock>
 81016da:	f026 0607 	bic.w	r6, r6, #7
 81016de:	1d23      	adds	r3, r4, #4
 81016e0:	1af2      	subs	r2, r6, r3
 81016e2:	d0b6      	beq.n	8101652 <_malloc_r+0x22>
 81016e4:	1b9b      	subs	r3, r3, r6
 81016e6:	50a3      	str	r3, [r4, r2]
 81016e8:	e7b3      	b.n	8101652 <_malloc_r+0x22>
 81016ea:	6862      	ldr	r2, [r4, #4]
 81016ec:	42a3      	cmp	r3, r4
 81016ee:	bf0c      	ite	eq
 81016f0:	6032      	streq	r2, [r6, #0]
 81016f2:	605a      	strne	r2, [r3, #4]
 81016f4:	e7ec      	b.n	81016d0 <_malloc_r+0xa0>
 81016f6:	4623      	mov	r3, r4
 81016f8:	6864      	ldr	r4, [r4, #4]
 81016fa:	e7b2      	b.n	8101662 <_malloc_r+0x32>
 81016fc:	4634      	mov	r4, r6
 81016fe:	6876      	ldr	r6, [r6, #4]
 8101700:	e7b9      	b.n	8101676 <_malloc_r+0x46>
 8101702:	230c      	movs	r3, #12
 8101704:	603b      	str	r3, [r7, #0]
 8101706:	4638      	mov	r0, r7
 8101708:	f000 fdf2 	bl	81022f0 <__malloc_unlock>
 810170c:	e7a1      	b.n	8101652 <_malloc_r+0x22>
 810170e:	6025      	str	r5, [r4, #0]
 8101710:	e7de      	b.n	81016d0 <_malloc_r+0xa0>
 8101712:	bf00      	nop
 8101714:	100000a0 	.word	0x100000a0

08101718 <__sfputc_r>:
 8101718:	6893      	ldr	r3, [r2, #8]
 810171a:	3b01      	subs	r3, #1
 810171c:	2b00      	cmp	r3, #0
 810171e:	b410      	push	{r4}
 8101720:	6093      	str	r3, [r2, #8]
 8101722:	da08      	bge.n	8101736 <__sfputc_r+0x1e>
 8101724:	6994      	ldr	r4, [r2, #24]
 8101726:	42a3      	cmp	r3, r4
 8101728:	db01      	blt.n	810172e <__sfputc_r+0x16>
 810172a:	290a      	cmp	r1, #10
 810172c:	d103      	bne.n	8101736 <__sfputc_r+0x1e>
 810172e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8101732:	f000 baef 	b.w	8101d14 <__swbuf_r>
 8101736:	6813      	ldr	r3, [r2, #0]
 8101738:	1c58      	adds	r0, r3, #1
 810173a:	6010      	str	r0, [r2, #0]
 810173c:	7019      	strb	r1, [r3, #0]
 810173e:	4608      	mov	r0, r1
 8101740:	f85d 4b04 	ldr.w	r4, [sp], #4
 8101744:	4770      	bx	lr

08101746 <__sfputs_r>:
 8101746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101748:	4606      	mov	r6, r0
 810174a:	460f      	mov	r7, r1
 810174c:	4614      	mov	r4, r2
 810174e:	18d5      	adds	r5, r2, r3
 8101750:	42ac      	cmp	r4, r5
 8101752:	d101      	bne.n	8101758 <__sfputs_r+0x12>
 8101754:	2000      	movs	r0, #0
 8101756:	e007      	b.n	8101768 <__sfputs_r+0x22>
 8101758:	f814 1b01 	ldrb.w	r1, [r4], #1
 810175c:	463a      	mov	r2, r7
 810175e:	4630      	mov	r0, r6
 8101760:	f7ff ffda 	bl	8101718 <__sfputc_r>
 8101764:	1c43      	adds	r3, r0, #1
 8101766:	d1f3      	bne.n	8101750 <__sfputs_r+0xa>
 8101768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810176c <_vfiprintf_r>:
 810176c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101770:	460d      	mov	r5, r1
 8101772:	b09d      	sub	sp, #116	; 0x74
 8101774:	4614      	mov	r4, r2
 8101776:	4698      	mov	r8, r3
 8101778:	4606      	mov	r6, r0
 810177a:	b118      	cbz	r0, 8101784 <_vfiprintf_r+0x18>
 810177c:	6983      	ldr	r3, [r0, #24]
 810177e:	b90b      	cbnz	r3, 8101784 <_vfiprintf_r+0x18>
 8101780:	f000 fcaa 	bl	81020d8 <__sinit>
 8101784:	4b89      	ldr	r3, [pc, #548]	; (81019ac <_vfiprintf_r+0x240>)
 8101786:	429d      	cmp	r5, r3
 8101788:	d11b      	bne.n	81017c2 <_vfiprintf_r+0x56>
 810178a:	6875      	ldr	r5, [r6, #4]
 810178c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810178e:	07d9      	lsls	r1, r3, #31
 8101790:	d405      	bmi.n	810179e <_vfiprintf_r+0x32>
 8101792:	89ab      	ldrh	r3, [r5, #12]
 8101794:	059a      	lsls	r2, r3, #22
 8101796:	d402      	bmi.n	810179e <_vfiprintf_r+0x32>
 8101798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810179a:	f000 fd3b 	bl	8102214 <__retarget_lock_acquire_recursive>
 810179e:	89ab      	ldrh	r3, [r5, #12]
 81017a0:	071b      	lsls	r3, r3, #28
 81017a2:	d501      	bpl.n	81017a8 <_vfiprintf_r+0x3c>
 81017a4:	692b      	ldr	r3, [r5, #16]
 81017a6:	b9eb      	cbnz	r3, 81017e4 <_vfiprintf_r+0x78>
 81017a8:	4629      	mov	r1, r5
 81017aa:	4630      	mov	r0, r6
 81017ac:	f000 fb04 	bl	8101db8 <__swsetup_r>
 81017b0:	b1c0      	cbz	r0, 81017e4 <_vfiprintf_r+0x78>
 81017b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 81017b4:	07dc      	lsls	r4, r3, #31
 81017b6:	d50e      	bpl.n	81017d6 <_vfiprintf_r+0x6a>
 81017b8:	f04f 30ff 	mov.w	r0, #4294967295
 81017bc:	b01d      	add	sp, #116	; 0x74
 81017be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81017c2:	4b7b      	ldr	r3, [pc, #492]	; (81019b0 <_vfiprintf_r+0x244>)
 81017c4:	429d      	cmp	r5, r3
 81017c6:	d101      	bne.n	81017cc <_vfiprintf_r+0x60>
 81017c8:	68b5      	ldr	r5, [r6, #8]
 81017ca:	e7df      	b.n	810178c <_vfiprintf_r+0x20>
 81017cc:	4b79      	ldr	r3, [pc, #484]	; (81019b4 <_vfiprintf_r+0x248>)
 81017ce:	429d      	cmp	r5, r3
 81017d0:	bf08      	it	eq
 81017d2:	68f5      	ldreq	r5, [r6, #12]
 81017d4:	e7da      	b.n	810178c <_vfiprintf_r+0x20>
 81017d6:	89ab      	ldrh	r3, [r5, #12]
 81017d8:	0598      	lsls	r0, r3, #22
 81017da:	d4ed      	bmi.n	81017b8 <_vfiprintf_r+0x4c>
 81017dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 81017de:	f000 fd1a 	bl	8102216 <__retarget_lock_release_recursive>
 81017e2:	e7e9      	b.n	81017b8 <_vfiprintf_r+0x4c>
 81017e4:	2300      	movs	r3, #0
 81017e6:	9309      	str	r3, [sp, #36]	; 0x24
 81017e8:	2320      	movs	r3, #32
 81017ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 81017ee:	f8cd 800c 	str.w	r8, [sp, #12]
 81017f2:	2330      	movs	r3, #48	; 0x30
 81017f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 81019b8 <_vfiprintf_r+0x24c>
 81017f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 81017fc:	f04f 0901 	mov.w	r9, #1
 8101800:	4623      	mov	r3, r4
 8101802:	469a      	mov	sl, r3
 8101804:	f813 2b01 	ldrb.w	r2, [r3], #1
 8101808:	b10a      	cbz	r2, 810180e <_vfiprintf_r+0xa2>
 810180a:	2a25      	cmp	r2, #37	; 0x25
 810180c:	d1f9      	bne.n	8101802 <_vfiprintf_r+0x96>
 810180e:	ebba 0b04 	subs.w	fp, sl, r4
 8101812:	d00b      	beq.n	810182c <_vfiprintf_r+0xc0>
 8101814:	465b      	mov	r3, fp
 8101816:	4622      	mov	r2, r4
 8101818:	4629      	mov	r1, r5
 810181a:	4630      	mov	r0, r6
 810181c:	f7ff ff93 	bl	8101746 <__sfputs_r>
 8101820:	3001      	adds	r0, #1
 8101822:	f000 80aa 	beq.w	810197a <_vfiprintf_r+0x20e>
 8101826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8101828:	445a      	add	r2, fp
 810182a:	9209      	str	r2, [sp, #36]	; 0x24
 810182c:	f89a 3000 	ldrb.w	r3, [sl]
 8101830:	2b00      	cmp	r3, #0
 8101832:	f000 80a2 	beq.w	810197a <_vfiprintf_r+0x20e>
 8101836:	2300      	movs	r3, #0
 8101838:	f04f 32ff 	mov.w	r2, #4294967295
 810183c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8101840:	f10a 0a01 	add.w	sl, sl, #1
 8101844:	9304      	str	r3, [sp, #16]
 8101846:	9307      	str	r3, [sp, #28]
 8101848:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810184c:	931a      	str	r3, [sp, #104]	; 0x68
 810184e:	4654      	mov	r4, sl
 8101850:	2205      	movs	r2, #5
 8101852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8101856:	4858      	ldr	r0, [pc, #352]	; (81019b8 <_vfiprintf_r+0x24c>)
 8101858:	f7fe fd42 	bl	81002e0 <memchr>
 810185c:	9a04      	ldr	r2, [sp, #16]
 810185e:	b9d8      	cbnz	r0, 8101898 <_vfiprintf_r+0x12c>
 8101860:	06d1      	lsls	r1, r2, #27
 8101862:	bf44      	itt	mi
 8101864:	2320      	movmi	r3, #32
 8101866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810186a:	0713      	lsls	r3, r2, #28
 810186c:	bf44      	itt	mi
 810186e:	232b      	movmi	r3, #43	; 0x2b
 8101870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8101874:	f89a 3000 	ldrb.w	r3, [sl]
 8101878:	2b2a      	cmp	r3, #42	; 0x2a
 810187a:	d015      	beq.n	81018a8 <_vfiprintf_r+0x13c>
 810187c:	9a07      	ldr	r2, [sp, #28]
 810187e:	4654      	mov	r4, sl
 8101880:	2000      	movs	r0, #0
 8101882:	f04f 0c0a 	mov.w	ip, #10
 8101886:	4621      	mov	r1, r4
 8101888:	f811 3b01 	ldrb.w	r3, [r1], #1
 810188c:	3b30      	subs	r3, #48	; 0x30
 810188e:	2b09      	cmp	r3, #9
 8101890:	d94e      	bls.n	8101930 <_vfiprintf_r+0x1c4>
 8101892:	b1b0      	cbz	r0, 81018c2 <_vfiprintf_r+0x156>
 8101894:	9207      	str	r2, [sp, #28]
 8101896:	e014      	b.n	81018c2 <_vfiprintf_r+0x156>
 8101898:	eba0 0308 	sub.w	r3, r0, r8
 810189c:	fa09 f303 	lsl.w	r3, r9, r3
 81018a0:	4313      	orrs	r3, r2
 81018a2:	9304      	str	r3, [sp, #16]
 81018a4:	46a2      	mov	sl, r4
 81018a6:	e7d2      	b.n	810184e <_vfiprintf_r+0xe2>
 81018a8:	9b03      	ldr	r3, [sp, #12]
 81018aa:	1d19      	adds	r1, r3, #4
 81018ac:	681b      	ldr	r3, [r3, #0]
 81018ae:	9103      	str	r1, [sp, #12]
 81018b0:	2b00      	cmp	r3, #0
 81018b2:	bfbb      	ittet	lt
 81018b4:	425b      	neglt	r3, r3
 81018b6:	f042 0202 	orrlt.w	r2, r2, #2
 81018ba:	9307      	strge	r3, [sp, #28]
 81018bc:	9307      	strlt	r3, [sp, #28]
 81018be:	bfb8      	it	lt
 81018c0:	9204      	strlt	r2, [sp, #16]
 81018c2:	7823      	ldrb	r3, [r4, #0]
 81018c4:	2b2e      	cmp	r3, #46	; 0x2e
 81018c6:	d10c      	bne.n	81018e2 <_vfiprintf_r+0x176>
 81018c8:	7863      	ldrb	r3, [r4, #1]
 81018ca:	2b2a      	cmp	r3, #42	; 0x2a
 81018cc:	d135      	bne.n	810193a <_vfiprintf_r+0x1ce>
 81018ce:	9b03      	ldr	r3, [sp, #12]
 81018d0:	1d1a      	adds	r2, r3, #4
 81018d2:	681b      	ldr	r3, [r3, #0]
 81018d4:	9203      	str	r2, [sp, #12]
 81018d6:	2b00      	cmp	r3, #0
 81018d8:	bfb8      	it	lt
 81018da:	f04f 33ff 	movlt.w	r3, #4294967295
 81018de:	3402      	adds	r4, #2
 81018e0:	9305      	str	r3, [sp, #20]
 81018e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 81019c8 <_vfiprintf_r+0x25c>
 81018e6:	7821      	ldrb	r1, [r4, #0]
 81018e8:	2203      	movs	r2, #3
 81018ea:	4650      	mov	r0, sl
 81018ec:	f7fe fcf8 	bl	81002e0 <memchr>
 81018f0:	b140      	cbz	r0, 8101904 <_vfiprintf_r+0x198>
 81018f2:	2340      	movs	r3, #64	; 0x40
 81018f4:	eba0 000a 	sub.w	r0, r0, sl
 81018f8:	fa03 f000 	lsl.w	r0, r3, r0
 81018fc:	9b04      	ldr	r3, [sp, #16]
 81018fe:	4303      	orrs	r3, r0
 8101900:	3401      	adds	r4, #1
 8101902:	9304      	str	r3, [sp, #16]
 8101904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8101908:	482c      	ldr	r0, [pc, #176]	; (81019bc <_vfiprintf_r+0x250>)
 810190a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810190e:	2206      	movs	r2, #6
 8101910:	f7fe fce6 	bl	81002e0 <memchr>
 8101914:	2800      	cmp	r0, #0
 8101916:	d03f      	beq.n	8101998 <_vfiprintf_r+0x22c>
 8101918:	4b29      	ldr	r3, [pc, #164]	; (81019c0 <_vfiprintf_r+0x254>)
 810191a:	bb1b      	cbnz	r3, 8101964 <_vfiprintf_r+0x1f8>
 810191c:	9b03      	ldr	r3, [sp, #12]
 810191e:	3307      	adds	r3, #7
 8101920:	f023 0307 	bic.w	r3, r3, #7
 8101924:	3308      	adds	r3, #8
 8101926:	9303      	str	r3, [sp, #12]
 8101928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810192a:	443b      	add	r3, r7
 810192c:	9309      	str	r3, [sp, #36]	; 0x24
 810192e:	e767      	b.n	8101800 <_vfiprintf_r+0x94>
 8101930:	fb0c 3202 	mla	r2, ip, r2, r3
 8101934:	460c      	mov	r4, r1
 8101936:	2001      	movs	r0, #1
 8101938:	e7a5      	b.n	8101886 <_vfiprintf_r+0x11a>
 810193a:	2300      	movs	r3, #0
 810193c:	3401      	adds	r4, #1
 810193e:	9305      	str	r3, [sp, #20]
 8101940:	4619      	mov	r1, r3
 8101942:	f04f 0c0a 	mov.w	ip, #10
 8101946:	4620      	mov	r0, r4
 8101948:	f810 2b01 	ldrb.w	r2, [r0], #1
 810194c:	3a30      	subs	r2, #48	; 0x30
 810194e:	2a09      	cmp	r2, #9
 8101950:	d903      	bls.n	810195a <_vfiprintf_r+0x1ee>
 8101952:	2b00      	cmp	r3, #0
 8101954:	d0c5      	beq.n	81018e2 <_vfiprintf_r+0x176>
 8101956:	9105      	str	r1, [sp, #20]
 8101958:	e7c3      	b.n	81018e2 <_vfiprintf_r+0x176>
 810195a:	fb0c 2101 	mla	r1, ip, r1, r2
 810195e:	4604      	mov	r4, r0
 8101960:	2301      	movs	r3, #1
 8101962:	e7f0      	b.n	8101946 <_vfiprintf_r+0x1da>
 8101964:	ab03      	add	r3, sp, #12
 8101966:	9300      	str	r3, [sp, #0]
 8101968:	462a      	mov	r2, r5
 810196a:	4b16      	ldr	r3, [pc, #88]	; (81019c4 <_vfiprintf_r+0x258>)
 810196c:	a904      	add	r1, sp, #16
 810196e:	4630      	mov	r0, r6
 8101970:	f3af 8000 	nop.w
 8101974:	4607      	mov	r7, r0
 8101976:	1c78      	adds	r0, r7, #1
 8101978:	d1d6      	bne.n	8101928 <_vfiprintf_r+0x1bc>
 810197a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810197c:	07d9      	lsls	r1, r3, #31
 810197e:	d405      	bmi.n	810198c <_vfiprintf_r+0x220>
 8101980:	89ab      	ldrh	r3, [r5, #12]
 8101982:	059a      	lsls	r2, r3, #22
 8101984:	d402      	bmi.n	810198c <_vfiprintf_r+0x220>
 8101986:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8101988:	f000 fc45 	bl	8102216 <__retarget_lock_release_recursive>
 810198c:	89ab      	ldrh	r3, [r5, #12]
 810198e:	065b      	lsls	r3, r3, #25
 8101990:	f53f af12 	bmi.w	81017b8 <_vfiprintf_r+0x4c>
 8101994:	9809      	ldr	r0, [sp, #36]	; 0x24
 8101996:	e711      	b.n	81017bc <_vfiprintf_r+0x50>
 8101998:	ab03      	add	r3, sp, #12
 810199a:	9300      	str	r3, [sp, #0]
 810199c:	462a      	mov	r2, r5
 810199e:	4b09      	ldr	r3, [pc, #36]	; (81019c4 <_vfiprintf_r+0x258>)
 81019a0:	a904      	add	r1, sp, #16
 81019a2:	4630      	mov	r0, r6
 81019a4:	f000 f880 	bl	8101aa8 <_printf_i>
 81019a8:	e7e4      	b.n	8101974 <_vfiprintf_r+0x208>
 81019aa:	bf00      	nop
 81019ac:	0810260c 	.word	0x0810260c
 81019b0:	0810262c 	.word	0x0810262c
 81019b4:	081025ec 	.word	0x081025ec
 81019b8:	081025b6 	.word	0x081025b6
 81019bc:	081025c0 	.word	0x081025c0
 81019c0:	00000000 	.word	0x00000000
 81019c4:	08101747 	.word	0x08101747
 81019c8:	081025bc 	.word	0x081025bc

081019cc <_printf_common>:
 81019cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81019d0:	4616      	mov	r6, r2
 81019d2:	4699      	mov	r9, r3
 81019d4:	688a      	ldr	r2, [r1, #8]
 81019d6:	690b      	ldr	r3, [r1, #16]
 81019d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 81019dc:	4293      	cmp	r3, r2
 81019de:	bfb8      	it	lt
 81019e0:	4613      	movlt	r3, r2
 81019e2:	6033      	str	r3, [r6, #0]
 81019e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 81019e8:	4607      	mov	r7, r0
 81019ea:	460c      	mov	r4, r1
 81019ec:	b10a      	cbz	r2, 81019f2 <_printf_common+0x26>
 81019ee:	3301      	adds	r3, #1
 81019f0:	6033      	str	r3, [r6, #0]
 81019f2:	6823      	ldr	r3, [r4, #0]
 81019f4:	0699      	lsls	r1, r3, #26
 81019f6:	bf42      	ittt	mi
 81019f8:	6833      	ldrmi	r3, [r6, #0]
 81019fa:	3302      	addmi	r3, #2
 81019fc:	6033      	strmi	r3, [r6, #0]
 81019fe:	6825      	ldr	r5, [r4, #0]
 8101a00:	f015 0506 	ands.w	r5, r5, #6
 8101a04:	d106      	bne.n	8101a14 <_printf_common+0x48>
 8101a06:	f104 0a19 	add.w	sl, r4, #25
 8101a0a:	68e3      	ldr	r3, [r4, #12]
 8101a0c:	6832      	ldr	r2, [r6, #0]
 8101a0e:	1a9b      	subs	r3, r3, r2
 8101a10:	42ab      	cmp	r3, r5
 8101a12:	dc26      	bgt.n	8101a62 <_printf_common+0x96>
 8101a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8101a18:	1e13      	subs	r3, r2, #0
 8101a1a:	6822      	ldr	r2, [r4, #0]
 8101a1c:	bf18      	it	ne
 8101a1e:	2301      	movne	r3, #1
 8101a20:	0692      	lsls	r2, r2, #26
 8101a22:	d42b      	bmi.n	8101a7c <_printf_common+0xb0>
 8101a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8101a28:	4649      	mov	r1, r9
 8101a2a:	4638      	mov	r0, r7
 8101a2c:	47c0      	blx	r8
 8101a2e:	3001      	adds	r0, #1
 8101a30:	d01e      	beq.n	8101a70 <_printf_common+0xa4>
 8101a32:	6823      	ldr	r3, [r4, #0]
 8101a34:	68e5      	ldr	r5, [r4, #12]
 8101a36:	6832      	ldr	r2, [r6, #0]
 8101a38:	f003 0306 	and.w	r3, r3, #6
 8101a3c:	2b04      	cmp	r3, #4
 8101a3e:	bf08      	it	eq
 8101a40:	1aad      	subeq	r5, r5, r2
 8101a42:	68a3      	ldr	r3, [r4, #8]
 8101a44:	6922      	ldr	r2, [r4, #16]
 8101a46:	bf0c      	ite	eq
 8101a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8101a4c:	2500      	movne	r5, #0
 8101a4e:	4293      	cmp	r3, r2
 8101a50:	bfc4      	itt	gt
 8101a52:	1a9b      	subgt	r3, r3, r2
 8101a54:	18ed      	addgt	r5, r5, r3
 8101a56:	2600      	movs	r6, #0
 8101a58:	341a      	adds	r4, #26
 8101a5a:	42b5      	cmp	r5, r6
 8101a5c:	d11a      	bne.n	8101a94 <_printf_common+0xc8>
 8101a5e:	2000      	movs	r0, #0
 8101a60:	e008      	b.n	8101a74 <_printf_common+0xa8>
 8101a62:	2301      	movs	r3, #1
 8101a64:	4652      	mov	r2, sl
 8101a66:	4649      	mov	r1, r9
 8101a68:	4638      	mov	r0, r7
 8101a6a:	47c0      	blx	r8
 8101a6c:	3001      	adds	r0, #1
 8101a6e:	d103      	bne.n	8101a78 <_printf_common+0xac>
 8101a70:	f04f 30ff 	mov.w	r0, #4294967295
 8101a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8101a78:	3501      	adds	r5, #1
 8101a7a:	e7c6      	b.n	8101a0a <_printf_common+0x3e>
 8101a7c:	18e1      	adds	r1, r4, r3
 8101a7e:	1c5a      	adds	r2, r3, #1
 8101a80:	2030      	movs	r0, #48	; 0x30
 8101a82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8101a86:	4422      	add	r2, r4
 8101a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8101a8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8101a90:	3302      	adds	r3, #2
 8101a92:	e7c7      	b.n	8101a24 <_printf_common+0x58>
 8101a94:	2301      	movs	r3, #1
 8101a96:	4622      	mov	r2, r4
 8101a98:	4649      	mov	r1, r9
 8101a9a:	4638      	mov	r0, r7
 8101a9c:	47c0      	blx	r8
 8101a9e:	3001      	adds	r0, #1
 8101aa0:	d0e6      	beq.n	8101a70 <_printf_common+0xa4>
 8101aa2:	3601      	adds	r6, #1
 8101aa4:	e7d9      	b.n	8101a5a <_printf_common+0x8e>
	...

08101aa8 <_printf_i>:
 8101aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8101aac:	7e0f      	ldrb	r7, [r1, #24]
 8101aae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8101ab0:	2f78      	cmp	r7, #120	; 0x78
 8101ab2:	4691      	mov	r9, r2
 8101ab4:	4680      	mov	r8, r0
 8101ab6:	460c      	mov	r4, r1
 8101ab8:	469a      	mov	sl, r3
 8101aba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8101abe:	d807      	bhi.n	8101ad0 <_printf_i+0x28>
 8101ac0:	2f62      	cmp	r7, #98	; 0x62
 8101ac2:	d80a      	bhi.n	8101ada <_printf_i+0x32>
 8101ac4:	2f00      	cmp	r7, #0
 8101ac6:	f000 80d8 	beq.w	8101c7a <_printf_i+0x1d2>
 8101aca:	2f58      	cmp	r7, #88	; 0x58
 8101acc:	f000 80a3 	beq.w	8101c16 <_printf_i+0x16e>
 8101ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8101ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8101ad8:	e03a      	b.n	8101b50 <_printf_i+0xa8>
 8101ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8101ade:	2b15      	cmp	r3, #21
 8101ae0:	d8f6      	bhi.n	8101ad0 <_printf_i+0x28>
 8101ae2:	a101      	add	r1, pc, #4	; (adr r1, 8101ae8 <_printf_i+0x40>)
 8101ae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8101ae8:	08101b41 	.word	0x08101b41
 8101aec:	08101b55 	.word	0x08101b55
 8101af0:	08101ad1 	.word	0x08101ad1
 8101af4:	08101ad1 	.word	0x08101ad1
 8101af8:	08101ad1 	.word	0x08101ad1
 8101afc:	08101ad1 	.word	0x08101ad1
 8101b00:	08101b55 	.word	0x08101b55
 8101b04:	08101ad1 	.word	0x08101ad1
 8101b08:	08101ad1 	.word	0x08101ad1
 8101b0c:	08101ad1 	.word	0x08101ad1
 8101b10:	08101ad1 	.word	0x08101ad1
 8101b14:	08101c61 	.word	0x08101c61
 8101b18:	08101b85 	.word	0x08101b85
 8101b1c:	08101c43 	.word	0x08101c43
 8101b20:	08101ad1 	.word	0x08101ad1
 8101b24:	08101ad1 	.word	0x08101ad1
 8101b28:	08101c83 	.word	0x08101c83
 8101b2c:	08101ad1 	.word	0x08101ad1
 8101b30:	08101b85 	.word	0x08101b85
 8101b34:	08101ad1 	.word	0x08101ad1
 8101b38:	08101ad1 	.word	0x08101ad1
 8101b3c:	08101c4b 	.word	0x08101c4b
 8101b40:	682b      	ldr	r3, [r5, #0]
 8101b42:	1d1a      	adds	r2, r3, #4
 8101b44:	681b      	ldr	r3, [r3, #0]
 8101b46:	602a      	str	r2, [r5, #0]
 8101b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8101b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8101b50:	2301      	movs	r3, #1
 8101b52:	e0a3      	b.n	8101c9c <_printf_i+0x1f4>
 8101b54:	6820      	ldr	r0, [r4, #0]
 8101b56:	6829      	ldr	r1, [r5, #0]
 8101b58:	0606      	lsls	r6, r0, #24
 8101b5a:	f101 0304 	add.w	r3, r1, #4
 8101b5e:	d50a      	bpl.n	8101b76 <_printf_i+0xce>
 8101b60:	680e      	ldr	r6, [r1, #0]
 8101b62:	602b      	str	r3, [r5, #0]
 8101b64:	2e00      	cmp	r6, #0
 8101b66:	da03      	bge.n	8101b70 <_printf_i+0xc8>
 8101b68:	232d      	movs	r3, #45	; 0x2d
 8101b6a:	4276      	negs	r6, r6
 8101b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8101b70:	485e      	ldr	r0, [pc, #376]	; (8101cec <_printf_i+0x244>)
 8101b72:	230a      	movs	r3, #10
 8101b74:	e019      	b.n	8101baa <_printf_i+0x102>
 8101b76:	680e      	ldr	r6, [r1, #0]
 8101b78:	602b      	str	r3, [r5, #0]
 8101b7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8101b7e:	bf18      	it	ne
 8101b80:	b236      	sxthne	r6, r6
 8101b82:	e7ef      	b.n	8101b64 <_printf_i+0xbc>
 8101b84:	682b      	ldr	r3, [r5, #0]
 8101b86:	6820      	ldr	r0, [r4, #0]
 8101b88:	1d19      	adds	r1, r3, #4
 8101b8a:	6029      	str	r1, [r5, #0]
 8101b8c:	0601      	lsls	r1, r0, #24
 8101b8e:	d501      	bpl.n	8101b94 <_printf_i+0xec>
 8101b90:	681e      	ldr	r6, [r3, #0]
 8101b92:	e002      	b.n	8101b9a <_printf_i+0xf2>
 8101b94:	0646      	lsls	r6, r0, #25
 8101b96:	d5fb      	bpl.n	8101b90 <_printf_i+0xe8>
 8101b98:	881e      	ldrh	r6, [r3, #0]
 8101b9a:	4854      	ldr	r0, [pc, #336]	; (8101cec <_printf_i+0x244>)
 8101b9c:	2f6f      	cmp	r7, #111	; 0x6f
 8101b9e:	bf0c      	ite	eq
 8101ba0:	2308      	moveq	r3, #8
 8101ba2:	230a      	movne	r3, #10
 8101ba4:	2100      	movs	r1, #0
 8101ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8101baa:	6865      	ldr	r5, [r4, #4]
 8101bac:	60a5      	str	r5, [r4, #8]
 8101bae:	2d00      	cmp	r5, #0
 8101bb0:	bfa2      	ittt	ge
 8101bb2:	6821      	ldrge	r1, [r4, #0]
 8101bb4:	f021 0104 	bicge.w	r1, r1, #4
 8101bb8:	6021      	strge	r1, [r4, #0]
 8101bba:	b90e      	cbnz	r6, 8101bc0 <_printf_i+0x118>
 8101bbc:	2d00      	cmp	r5, #0
 8101bbe:	d04d      	beq.n	8101c5c <_printf_i+0x1b4>
 8101bc0:	4615      	mov	r5, r2
 8101bc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8101bc6:	fb03 6711 	mls	r7, r3, r1, r6
 8101bca:	5dc7      	ldrb	r7, [r0, r7]
 8101bcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8101bd0:	4637      	mov	r7, r6
 8101bd2:	42bb      	cmp	r3, r7
 8101bd4:	460e      	mov	r6, r1
 8101bd6:	d9f4      	bls.n	8101bc2 <_printf_i+0x11a>
 8101bd8:	2b08      	cmp	r3, #8
 8101bda:	d10b      	bne.n	8101bf4 <_printf_i+0x14c>
 8101bdc:	6823      	ldr	r3, [r4, #0]
 8101bde:	07de      	lsls	r6, r3, #31
 8101be0:	d508      	bpl.n	8101bf4 <_printf_i+0x14c>
 8101be2:	6923      	ldr	r3, [r4, #16]
 8101be4:	6861      	ldr	r1, [r4, #4]
 8101be6:	4299      	cmp	r1, r3
 8101be8:	bfde      	ittt	le
 8101bea:	2330      	movle	r3, #48	; 0x30
 8101bec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8101bf0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8101bf4:	1b52      	subs	r2, r2, r5
 8101bf6:	6122      	str	r2, [r4, #16]
 8101bf8:	f8cd a000 	str.w	sl, [sp]
 8101bfc:	464b      	mov	r3, r9
 8101bfe:	aa03      	add	r2, sp, #12
 8101c00:	4621      	mov	r1, r4
 8101c02:	4640      	mov	r0, r8
 8101c04:	f7ff fee2 	bl	81019cc <_printf_common>
 8101c08:	3001      	adds	r0, #1
 8101c0a:	d14c      	bne.n	8101ca6 <_printf_i+0x1fe>
 8101c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8101c10:	b004      	add	sp, #16
 8101c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8101c16:	4835      	ldr	r0, [pc, #212]	; (8101cec <_printf_i+0x244>)
 8101c18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8101c1c:	6829      	ldr	r1, [r5, #0]
 8101c1e:	6823      	ldr	r3, [r4, #0]
 8101c20:	f851 6b04 	ldr.w	r6, [r1], #4
 8101c24:	6029      	str	r1, [r5, #0]
 8101c26:	061d      	lsls	r5, r3, #24
 8101c28:	d514      	bpl.n	8101c54 <_printf_i+0x1ac>
 8101c2a:	07df      	lsls	r7, r3, #31
 8101c2c:	bf44      	itt	mi
 8101c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8101c32:	6023      	strmi	r3, [r4, #0]
 8101c34:	b91e      	cbnz	r6, 8101c3e <_printf_i+0x196>
 8101c36:	6823      	ldr	r3, [r4, #0]
 8101c38:	f023 0320 	bic.w	r3, r3, #32
 8101c3c:	6023      	str	r3, [r4, #0]
 8101c3e:	2310      	movs	r3, #16
 8101c40:	e7b0      	b.n	8101ba4 <_printf_i+0xfc>
 8101c42:	6823      	ldr	r3, [r4, #0]
 8101c44:	f043 0320 	orr.w	r3, r3, #32
 8101c48:	6023      	str	r3, [r4, #0]
 8101c4a:	2378      	movs	r3, #120	; 0x78
 8101c4c:	4828      	ldr	r0, [pc, #160]	; (8101cf0 <_printf_i+0x248>)
 8101c4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8101c52:	e7e3      	b.n	8101c1c <_printf_i+0x174>
 8101c54:	0659      	lsls	r1, r3, #25
 8101c56:	bf48      	it	mi
 8101c58:	b2b6      	uxthmi	r6, r6
 8101c5a:	e7e6      	b.n	8101c2a <_printf_i+0x182>
 8101c5c:	4615      	mov	r5, r2
 8101c5e:	e7bb      	b.n	8101bd8 <_printf_i+0x130>
 8101c60:	682b      	ldr	r3, [r5, #0]
 8101c62:	6826      	ldr	r6, [r4, #0]
 8101c64:	6961      	ldr	r1, [r4, #20]
 8101c66:	1d18      	adds	r0, r3, #4
 8101c68:	6028      	str	r0, [r5, #0]
 8101c6a:	0635      	lsls	r5, r6, #24
 8101c6c:	681b      	ldr	r3, [r3, #0]
 8101c6e:	d501      	bpl.n	8101c74 <_printf_i+0x1cc>
 8101c70:	6019      	str	r1, [r3, #0]
 8101c72:	e002      	b.n	8101c7a <_printf_i+0x1d2>
 8101c74:	0670      	lsls	r0, r6, #25
 8101c76:	d5fb      	bpl.n	8101c70 <_printf_i+0x1c8>
 8101c78:	8019      	strh	r1, [r3, #0]
 8101c7a:	2300      	movs	r3, #0
 8101c7c:	6123      	str	r3, [r4, #16]
 8101c7e:	4615      	mov	r5, r2
 8101c80:	e7ba      	b.n	8101bf8 <_printf_i+0x150>
 8101c82:	682b      	ldr	r3, [r5, #0]
 8101c84:	1d1a      	adds	r2, r3, #4
 8101c86:	602a      	str	r2, [r5, #0]
 8101c88:	681d      	ldr	r5, [r3, #0]
 8101c8a:	6862      	ldr	r2, [r4, #4]
 8101c8c:	2100      	movs	r1, #0
 8101c8e:	4628      	mov	r0, r5
 8101c90:	f7fe fb26 	bl	81002e0 <memchr>
 8101c94:	b108      	cbz	r0, 8101c9a <_printf_i+0x1f2>
 8101c96:	1b40      	subs	r0, r0, r5
 8101c98:	6060      	str	r0, [r4, #4]
 8101c9a:	6863      	ldr	r3, [r4, #4]
 8101c9c:	6123      	str	r3, [r4, #16]
 8101c9e:	2300      	movs	r3, #0
 8101ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8101ca4:	e7a8      	b.n	8101bf8 <_printf_i+0x150>
 8101ca6:	6923      	ldr	r3, [r4, #16]
 8101ca8:	462a      	mov	r2, r5
 8101caa:	4649      	mov	r1, r9
 8101cac:	4640      	mov	r0, r8
 8101cae:	47d0      	blx	sl
 8101cb0:	3001      	adds	r0, #1
 8101cb2:	d0ab      	beq.n	8101c0c <_printf_i+0x164>
 8101cb4:	6823      	ldr	r3, [r4, #0]
 8101cb6:	079b      	lsls	r3, r3, #30
 8101cb8:	d413      	bmi.n	8101ce2 <_printf_i+0x23a>
 8101cba:	68e0      	ldr	r0, [r4, #12]
 8101cbc:	9b03      	ldr	r3, [sp, #12]
 8101cbe:	4298      	cmp	r0, r3
 8101cc0:	bfb8      	it	lt
 8101cc2:	4618      	movlt	r0, r3
 8101cc4:	e7a4      	b.n	8101c10 <_printf_i+0x168>
 8101cc6:	2301      	movs	r3, #1
 8101cc8:	4632      	mov	r2, r6
 8101cca:	4649      	mov	r1, r9
 8101ccc:	4640      	mov	r0, r8
 8101cce:	47d0      	blx	sl
 8101cd0:	3001      	adds	r0, #1
 8101cd2:	d09b      	beq.n	8101c0c <_printf_i+0x164>
 8101cd4:	3501      	adds	r5, #1
 8101cd6:	68e3      	ldr	r3, [r4, #12]
 8101cd8:	9903      	ldr	r1, [sp, #12]
 8101cda:	1a5b      	subs	r3, r3, r1
 8101cdc:	42ab      	cmp	r3, r5
 8101cde:	dcf2      	bgt.n	8101cc6 <_printf_i+0x21e>
 8101ce0:	e7eb      	b.n	8101cba <_printf_i+0x212>
 8101ce2:	2500      	movs	r5, #0
 8101ce4:	f104 0619 	add.w	r6, r4, #25
 8101ce8:	e7f5      	b.n	8101cd6 <_printf_i+0x22e>
 8101cea:	bf00      	nop
 8101cec:	081025c7 	.word	0x081025c7
 8101cf0:	081025d8 	.word	0x081025d8

08101cf4 <_sbrk_r>:
 8101cf4:	b538      	push	{r3, r4, r5, lr}
 8101cf6:	4d06      	ldr	r5, [pc, #24]	; (8101d10 <_sbrk_r+0x1c>)
 8101cf8:	2300      	movs	r3, #0
 8101cfa:	4604      	mov	r4, r0
 8101cfc:	4608      	mov	r0, r1
 8101cfe:	602b      	str	r3, [r5, #0]
 8101d00:	f7fe fd0a 	bl	8100718 <_sbrk>
 8101d04:	1c43      	adds	r3, r0, #1
 8101d06:	d102      	bne.n	8101d0e <_sbrk_r+0x1a>
 8101d08:	682b      	ldr	r3, [r5, #0]
 8101d0a:	b103      	cbz	r3, 8101d0e <_sbrk_r+0x1a>
 8101d0c:	6023      	str	r3, [r4, #0]
 8101d0e:	bd38      	pop	{r3, r4, r5, pc}
 8101d10:	100000ac 	.word	0x100000ac

08101d14 <__swbuf_r>:
 8101d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101d16:	460e      	mov	r6, r1
 8101d18:	4614      	mov	r4, r2
 8101d1a:	4605      	mov	r5, r0
 8101d1c:	b118      	cbz	r0, 8101d26 <__swbuf_r+0x12>
 8101d1e:	6983      	ldr	r3, [r0, #24]
 8101d20:	b90b      	cbnz	r3, 8101d26 <__swbuf_r+0x12>
 8101d22:	f000 f9d9 	bl	81020d8 <__sinit>
 8101d26:	4b21      	ldr	r3, [pc, #132]	; (8101dac <__swbuf_r+0x98>)
 8101d28:	429c      	cmp	r4, r3
 8101d2a:	d12b      	bne.n	8101d84 <__swbuf_r+0x70>
 8101d2c:	686c      	ldr	r4, [r5, #4]
 8101d2e:	69a3      	ldr	r3, [r4, #24]
 8101d30:	60a3      	str	r3, [r4, #8]
 8101d32:	89a3      	ldrh	r3, [r4, #12]
 8101d34:	071a      	lsls	r2, r3, #28
 8101d36:	d52f      	bpl.n	8101d98 <__swbuf_r+0x84>
 8101d38:	6923      	ldr	r3, [r4, #16]
 8101d3a:	b36b      	cbz	r3, 8101d98 <__swbuf_r+0x84>
 8101d3c:	6923      	ldr	r3, [r4, #16]
 8101d3e:	6820      	ldr	r0, [r4, #0]
 8101d40:	1ac0      	subs	r0, r0, r3
 8101d42:	6963      	ldr	r3, [r4, #20]
 8101d44:	b2f6      	uxtb	r6, r6
 8101d46:	4283      	cmp	r3, r0
 8101d48:	4637      	mov	r7, r6
 8101d4a:	dc04      	bgt.n	8101d56 <__swbuf_r+0x42>
 8101d4c:	4621      	mov	r1, r4
 8101d4e:	4628      	mov	r0, r5
 8101d50:	f000 f92e 	bl	8101fb0 <_fflush_r>
 8101d54:	bb30      	cbnz	r0, 8101da4 <__swbuf_r+0x90>
 8101d56:	68a3      	ldr	r3, [r4, #8]
 8101d58:	3b01      	subs	r3, #1
 8101d5a:	60a3      	str	r3, [r4, #8]
 8101d5c:	6823      	ldr	r3, [r4, #0]
 8101d5e:	1c5a      	adds	r2, r3, #1
 8101d60:	6022      	str	r2, [r4, #0]
 8101d62:	701e      	strb	r6, [r3, #0]
 8101d64:	6963      	ldr	r3, [r4, #20]
 8101d66:	3001      	adds	r0, #1
 8101d68:	4283      	cmp	r3, r0
 8101d6a:	d004      	beq.n	8101d76 <__swbuf_r+0x62>
 8101d6c:	89a3      	ldrh	r3, [r4, #12]
 8101d6e:	07db      	lsls	r3, r3, #31
 8101d70:	d506      	bpl.n	8101d80 <__swbuf_r+0x6c>
 8101d72:	2e0a      	cmp	r6, #10
 8101d74:	d104      	bne.n	8101d80 <__swbuf_r+0x6c>
 8101d76:	4621      	mov	r1, r4
 8101d78:	4628      	mov	r0, r5
 8101d7a:	f000 f919 	bl	8101fb0 <_fflush_r>
 8101d7e:	b988      	cbnz	r0, 8101da4 <__swbuf_r+0x90>
 8101d80:	4638      	mov	r0, r7
 8101d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8101d84:	4b0a      	ldr	r3, [pc, #40]	; (8101db0 <__swbuf_r+0x9c>)
 8101d86:	429c      	cmp	r4, r3
 8101d88:	d101      	bne.n	8101d8e <__swbuf_r+0x7a>
 8101d8a:	68ac      	ldr	r4, [r5, #8]
 8101d8c:	e7cf      	b.n	8101d2e <__swbuf_r+0x1a>
 8101d8e:	4b09      	ldr	r3, [pc, #36]	; (8101db4 <__swbuf_r+0xa0>)
 8101d90:	429c      	cmp	r4, r3
 8101d92:	bf08      	it	eq
 8101d94:	68ec      	ldreq	r4, [r5, #12]
 8101d96:	e7ca      	b.n	8101d2e <__swbuf_r+0x1a>
 8101d98:	4621      	mov	r1, r4
 8101d9a:	4628      	mov	r0, r5
 8101d9c:	f000 f80c 	bl	8101db8 <__swsetup_r>
 8101da0:	2800      	cmp	r0, #0
 8101da2:	d0cb      	beq.n	8101d3c <__swbuf_r+0x28>
 8101da4:	f04f 37ff 	mov.w	r7, #4294967295
 8101da8:	e7ea      	b.n	8101d80 <__swbuf_r+0x6c>
 8101daa:	bf00      	nop
 8101dac:	0810260c 	.word	0x0810260c
 8101db0:	0810262c 	.word	0x0810262c
 8101db4:	081025ec 	.word	0x081025ec

08101db8 <__swsetup_r>:
 8101db8:	4b32      	ldr	r3, [pc, #200]	; (8101e84 <__swsetup_r+0xcc>)
 8101dba:	b570      	push	{r4, r5, r6, lr}
 8101dbc:	681d      	ldr	r5, [r3, #0]
 8101dbe:	4606      	mov	r6, r0
 8101dc0:	460c      	mov	r4, r1
 8101dc2:	b125      	cbz	r5, 8101dce <__swsetup_r+0x16>
 8101dc4:	69ab      	ldr	r3, [r5, #24]
 8101dc6:	b913      	cbnz	r3, 8101dce <__swsetup_r+0x16>
 8101dc8:	4628      	mov	r0, r5
 8101dca:	f000 f985 	bl	81020d8 <__sinit>
 8101dce:	4b2e      	ldr	r3, [pc, #184]	; (8101e88 <__swsetup_r+0xd0>)
 8101dd0:	429c      	cmp	r4, r3
 8101dd2:	d10f      	bne.n	8101df4 <__swsetup_r+0x3c>
 8101dd4:	686c      	ldr	r4, [r5, #4]
 8101dd6:	89a3      	ldrh	r3, [r4, #12]
 8101dd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8101ddc:	0719      	lsls	r1, r3, #28
 8101dde:	d42c      	bmi.n	8101e3a <__swsetup_r+0x82>
 8101de0:	06dd      	lsls	r5, r3, #27
 8101de2:	d411      	bmi.n	8101e08 <__swsetup_r+0x50>
 8101de4:	2309      	movs	r3, #9
 8101de6:	6033      	str	r3, [r6, #0]
 8101de8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8101dec:	81a3      	strh	r3, [r4, #12]
 8101dee:	f04f 30ff 	mov.w	r0, #4294967295
 8101df2:	e03e      	b.n	8101e72 <__swsetup_r+0xba>
 8101df4:	4b25      	ldr	r3, [pc, #148]	; (8101e8c <__swsetup_r+0xd4>)
 8101df6:	429c      	cmp	r4, r3
 8101df8:	d101      	bne.n	8101dfe <__swsetup_r+0x46>
 8101dfa:	68ac      	ldr	r4, [r5, #8]
 8101dfc:	e7eb      	b.n	8101dd6 <__swsetup_r+0x1e>
 8101dfe:	4b24      	ldr	r3, [pc, #144]	; (8101e90 <__swsetup_r+0xd8>)
 8101e00:	429c      	cmp	r4, r3
 8101e02:	bf08      	it	eq
 8101e04:	68ec      	ldreq	r4, [r5, #12]
 8101e06:	e7e6      	b.n	8101dd6 <__swsetup_r+0x1e>
 8101e08:	0758      	lsls	r0, r3, #29
 8101e0a:	d512      	bpl.n	8101e32 <__swsetup_r+0x7a>
 8101e0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8101e0e:	b141      	cbz	r1, 8101e22 <__swsetup_r+0x6a>
 8101e10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8101e14:	4299      	cmp	r1, r3
 8101e16:	d002      	beq.n	8101e1e <__swsetup_r+0x66>
 8101e18:	4630      	mov	r0, r6
 8101e1a:	f7ff fb9d 	bl	8101558 <_free_r>
 8101e1e:	2300      	movs	r3, #0
 8101e20:	6363      	str	r3, [r4, #52]	; 0x34
 8101e22:	89a3      	ldrh	r3, [r4, #12]
 8101e24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8101e28:	81a3      	strh	r3, [r4, #12]
 8101e2a:	2300      	movs	r3, #0
 8101e2c:	6063      	str	r3, [r4, #4]
 8101e2e:	6923      	ldr	r3, [r4, #16]
 8101e30:	6023      	str	r3, [r4, #0]
 8101e32:	89a3      	ldrh	r3, [r4, #12]
 8101e34:	f043 0308 	orr.w	r3, r3, #8
 8101e38:	81a3      	strh	r3, [r4, #12]
 8101e3a:	6923      	ldr	r3, [r4, #16]
 8101e3c:	b94b      	cbnz	r3, 8101e52 <__swsetup_r+0x9a>
 8101e3e:	89a3      	ldrh	r3, [r4, #12]
 8101e40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8101e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8101e48:	d003      	beq.n	8101e52 <__swsetup_r+0x9a>
 8101e4a:	4621      	mov	r1, r4
 8101e4c:	4630      	mov	r0, r6
 8101e4e:	f000 fa09 	bl	8102264 <__smakebuf_r>
 8101e52:	89a0      	ldrh	r0, [r4, #12]
 8101e54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8101e58:	f010 0301 	ands.w	r3, r0, #1
 8101e5c:	d00a      	beq.n	8101e74 <__swsetup_r+0xbc>
 8101e5e:	2300      	movs	r3, #0
 8101e60:	60a3      	str	r3, [r4, #8]
 8101e62:	6963      	ldr	r3, [r4, #20]
 8101e64:	425b      	negs	r3, r3
 8101e66:	61a3      	str	r3, [r4, #24]
 8101e68:	6923      	ldr	r3, [r4, #16]
 8101e6a:	b943      	cbnz	r3, 8101e7e <__swsetup_r+0xc6>
 8101e6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8101e70:	d1ba      	bne.n	8101de8 <__swsetup_r+0x30>
 8101e72:	bd70      	pop	{r4, r5, r6, pc}
 8101e74:	0781      	lsls	r1, r0, #30
 8101e76:	bf58      	it	pl
 8101e78:	6963      	ldrpl	r3, [r4, #20]
 8101e7a:	60a3      	str	r3, [r4, #8]
 8101e7c:	e7f4      	b.n	8101e68 <__swsetup_r+0xb0>
 8101e7e:	2000      	movs	r0, #0
 8101e80:	e7f7      	b.n	8101e72 <__swsetup_r+0xba>
 8101e82:	bf00      	nop
 8101e84:	10000014 	.word	0x10000014
 8101e88:	0810260c 	.word	0x0810260c
 8101e8c:	0810262c 	.word	0x0810262c
 8101e90:	081025ec 	.word	0x081025ec

08101e94 <abort>:
 8101e94:	b508      	push	{r3, lr}
 8101e96:	2006      	movs	r0, #6
 8101e98:	f000 fa58 	bl	810234c <raise>
 8101e9c:	2001      	movs	r0, #1
 8101e9e:	f7fe fbc3 	bl	8100628 <_exit>
	...

08101ea4 <__sflush_r>:
 8101ea4:	898a      	ldrh	r2, [r1, #12]
 8101ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8101eaa:	4605      	mov	r5, r0
 8101eac:	0710      	lsls	r0, r2, #28
 8101eae:	460c      	mov	r4, r1
 8101eb0:	d458      	bmi.n	8101f64 <__sflush_r+0xc0>
 8101eb2:	684b      	ldr	r3, [r1, #4]
 8101eb4:	2b00      	cmp	r3, #0
 8101eb6:	dc05      	bgt.n	8101ec4 <__sflush_r+0x20>
 8101eb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8101eba:	2b00      	cmp	r3, #0
 8101ebc:	dc02      	bgt.n	8101ec4 <__sflush_r+0x20>
 8101ebe:	2000      	movs	r0, #0
 8101ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8101ec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8101ec6:	2e00      	cmp	r6, #0
 8101ec8:	d0f9      	beq.n	8101ebe <__sflush_r+0x1a>
 8101eca:	2300      	movs	r3, #0
 8101ecc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8101ed0:	682f      	ldr	r7, [r5, #0]
 8101ed2:	602b      	str	r3, [r5, #0]
 8101ed4:	d032      	beq.n	8101f3c <__sflush_r+0x98>
 8101ed6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8101ed8:	89a3      	ldrh	r3, [r4, #12]
 8101eda:	075a      	lsls	r2, r3, #29
 8101edc:	d505      	bpl.n	8101eea <__sflush_r+0x46>
 8101ede:	6863      	ldr	r3, [r4, #4]
 8101ee0:	1ac0      	subs	r0, r0, r3
 8101ee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8101ee4:	b10b      	cbz	r3, 8101eea <__sflush_r+0x46>
 8101ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8101ee8:	1ac0      	subs	r0, r0, r3
 8101eea:	2300      	movs	r3, #0
 8101eec:	4602      	mov	r2, r0
 8101eee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8101ef0:	6a21      	ldr	r1, [r4, #32]
 8101ef2:	4628      	mov	r0, r5
 8101ef4:	47b0      	blx	r6
 8101ef6:	1c43      	adds	r3, r0, #1
 8101ef8:	89a3      	ldrh	r3, [r4, #12]
 8101efa:	d106      	bne.n	8101f0a <__sflush_r+0x66>
 8101efc:	6829      	ldr	r1, [r5, #0]
 8101efe:	291d      	cmp	r1, #29
 8101f00:	d82c      	bhi.n	8101f5c <__sflush_r+0xb8>
 8101f02:	4a2a      	ldr	r2, [pc, #168]	; (8101fac <__sflush_r+0x108>)
 8101f04:	40ca      	lsrs	r2, r1
 8101f06:	07d6      	lsls	r6, r2, #31
 8101f08:	d528      	bpl.n	8101f5c <__sflush_r+0xb8>
 8101f0a:	2200      	movs	r2, #0
 8101f0c:	6062      	str	r2, [r4, #4]
 8101f0e:	04d9      	lsls	r1, r3, #19
 8101f10:	6922      	ldr	r2, [r4, #16]
 8101f12:	6022      	str	r2, [r4, #0]
 8101f14:	d504      	bpl.n	8101f20 <__sflush_r+0x7c>
 8101f16:	1c42      	adds	r2, r0, #1
 8101f18:	d101      	bne.n	8101f1e <__sflush_r+0x7a>
 8101f1a:	682b      	ldr	r3, [r5, #0]
 8101f1c:	b903      	cbnz	r3, 8101f20 <__sflush_r+0x7c>
 8101f1e:	6560      	str	r0, [r4, #84]	; 0x54
 8101f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8101f22:	602f      	str	r7, [r5, #0]
 8101f24:	2900      	cmp	r1, #0
 8101f26:	d0ca      	beq.n	8101ebe <__sflush_r+0x1a>
 8101f28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8101f2c:	4299      	cmp	r1, r3
 8101f2e:	d002      	beq.n	8101f36 <__sflush_r+0x92>
 8101f30:	4628      	mov	r0, r5
 8101f32:	f7ff fb11 	bl	8101558 <_free_r>
 8101f36:	2000      	movs	r0, #0
 8101f38:	6360      	str	r0, [r4, #52]	; 0x34
 8101f3a:	e7c1      	b.n	8101ec0 <__sflush_r+0x1c>
 8101f3c:	6a21      	ldr	r1, [r4, #32]
 8101f3e:	2301      	movs	r3, #1
 8101f40:	4628      	mov	r0, r5
 8101f42:	47b0      	blx	r6
 8101f44:	1c41      	adds	r1, r0, #1
 8101f46:	d1c7      	bne.n	8101ed8 <__sflush_r+0x34>
 8101f48:	682b      	ldr	r3, [r5, #0]
 8101f4a:	2b00      	cmp	r3, #0
 8101f4c:	d0c4      	beq.n	8101ed8 <__sflush_r+0x34>
 8101f4e:	2b1d      	cmp	r3, #29
 8101f50:	d001      	beq.n	8101f56 <__sflush_r+0xb2>
 8101f52:	2b16      	cmp	r3, #22
 8101f54:	d101      	bne.n	8101f5a <__sflush_r+0xb6>
 8101f56:	602f      	str	r7, [r5, #0]
 8101f58:	e7b1      	b.n	8101ebe <__sflush_r+0x1a>
 8101f5a:	89a3      	ldrh	r3, [r4, #12]
 8101f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101f60:	81a3      	strh	r3, [r4, #12]
 8101f62:	e7ad      	b.n	8101ec0 <__sflush_r+0x1c>
 8101f64:	690f      	ldr	r7, [r1, #16]
 8101f66:	2f00      	cmp	r7, #0
 8101f68:	d0a9      	beq.n	8101ebe <__sflush_r+0x1a>
 8101f6a:	0793      	lsls	r3, r2, #30
 8101f6c:	680e      	ldr	r6, [r1, #0]
 8101f6e:	bf08      	it	eq
 8101f70:	694b      	ldreq	r3, [r1, #20]
 8101f72:	600f      	str	r7, [r1, #0]
 8101f74:	bf18      	it	ne
 8101f76:	2300      	movne	r3, #0
 8101f78:	eba6 0807 	sub.w	r8, r6, r7
 8101f7c:	608b      	str	r3, [r1, #8]
 8101f7e:	f1b8 0f00 	cmp.w	r8, #0
 8101f82:	dd9c      	ble.n	8101ebe <__sflush_r+0x1a>
 8101f84:	6a21      	ldr	r1, [r4, #32]
 8101f86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8101f88:	4643      	mov	r3, r8
 8101f8a:	463a      	mov	r2, r7
 8101f8c:	4628      	mov	r0, r5
 8101f8e:	47b0      	blx	r6
 8101f90:	2800      	cmp	r0, #0
 8101f92:	dc06      	bgt.n	8101fa2 <__sflush_r+0xfe>
 8101f94:	89a3      	ldrh	r3, [r4, #12]
 8101f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101f9a:	81a3      	strh	r3, [r4, #12]
 8101f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8101fa0:	e78e      	b.n	8101ec0 <__sflush_r+0x1c>
 8101fa2:	4407      	add	r7, r0
 8101fa4:	eba8 0800 	sub.w	r8, r8, r0
 8101fa8:	e7e9      	b.n	8101f7e <__sflush_r+0xda>
 8101faa:	bf00      	nop
 8101fac:	20400001 	.word	0x20400001

08101fb0 <_fflush_r>:
 8101fb0:	b538      	push	{r3, r4, r5, lr}
 8101fb2:	690b      	ldr	r3, [r1, #16]
 8101fb4:	4605      	mov	r5, r0
 8101fb6:	460c      	mov	r4, r1
 8101fb8:	b913      	cbnz	r3, 8101fc0 <_fflush_r+0x10>
 8101fba:	2500      	movs	r5, #0
 8101fbc:	4628      	mov	r0, r5
 8101fbe:	bd38      	pop	{r3, r4, r5, pc}
 8101fc0:	b118      	cbz	r0, 8101fca <_fflush_r+0x1a>
 8101fc2:	6983      	ldr	r3, [r0, #24]
 8101fc4:	b90b      	cbnz	r3, 8101fca <_fflush_r+0x1a>
 8101fc6:	f000 f887 	bl	81020d8 <__sinit>
 8101fca:	4b14      	ldr	r3, [pc, #80]	; (810201c <_fflush_r+0x6c>)
 8101fcc:	429c      	cmp	r4, r3
 8101fce:	d11b      	bne.n	8102008 <_fflush_r+0x58>
 8101fd0:	686c      	ldr	r4, [r5, #4]
 8101fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8101fd6:	2b00      	cmp	r3, #0
 8101fd8:	d0ef      	beq.n	8101fba <_fflush_r+0xa>
 8101fda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8101fdc:	07d0      	lsls	r0, r2, #31
 8101fde:	d404      	bmi.n	8101fea <_fflush_r+0x3a>
 8101fe0:	0599      	lsls	r1, r3, #22
 8101fe2:	d402      	bmi.n	8101fea <_fflush_r+0x3a>
 8101fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8101fe6:	f000 f915 	bl	8102214 <__retarget_lock_acquire_recursive>
 8101fea:	4628      	mov	r0, r5
 8101fec:	4621      	mov	r1, r4
 8101fee:	f7ff ff59 	bl	8101ea4 <__sflush_r>
 8101ff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8101ff4:	07da      	lsls	r2, r3, #31
 8101ff6:	4605      	mov	r5, r0
 8101ff8:	d4e0      	bmi.n	8101fbc <_fflush_r+0xc>
 8101ffa:	89a3      	ldrh	r3, [r4, #12]
 8101ffc:	059b      	lsls	r3, r3, #22
 8101ffe:	d4dd      	bmi.n	8101fbc <_fflush_r+0xc>
 8102000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8102002:	f000 f908 	bl	8102216 <__retarget_lock_release_recursive>
 8102006:	e7d9      	b.n	8101fbc <_fflush_r+0xc>
 8102008:	4b05      	ldr	r3, [pc, #20]	; (8102020 <_fflush_r+0x70>)
 810200a:	429c      	cmp	r4, r3
 810200c:	d101      	bne.n	8102012 <_fflush_r+0x62>
 810200e:	68ac      	ldr	r4, [r5, #8]
 8102010:	e7df      	b.n	8101fd2 <_fflush_r+0x22>
 8102012:	4b04      	ldr	r3, [pc, #16]	; (8102024 <_fflush_r+0x74>)
 8102014:	429c      	cmp	r4, r3
 8102016:	bf08      	it	eq
 8102018:	68ec      	ldreq	r4, [r5, #12]
 810201a:	e7da      	b.n	8101fd2 <_fflush_r+0x22>
 810201c:	0810260c 	.word	0x0810260c
 8102020:	0810262c 	.word	0x0810262c
 8102024:	081025ec 	.word	0x081025ec

08102028 <std>:
 8102028:	2300      	movs	r3, #0
 810202a:	b510      	push	{r4, lr}
 810202c:	4604      	mov	r4, r0
 810202e:	e9c0 3300 	strd	r3, r3, [r0]
 8102032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8102036:	6083      	str	r3, [r0, #8]
 8102038:	8181      	strh	r1, [r0, #12]
 810203a:	6643      	str	r3, [r0, #100]	; 0x64
 810203c:	81c2      	strh	r2, [r0, #14]
 810203e:	6183      	str	r3, [r0, #24]
 8102040:	4619      	mov	r1, r3
 8102042:	2208      	movs	r2, #8
 8102044:	305c      	adds	r0, #92	; 0x5c
 8102046:	f7ff fa09 	bl	810145c <memset>
 810204a:	4b05      	ldr	r3, [pc, #20]	; (8102060 <std+0x38>)
 810204c:	6263      	str	r3, [r4, #36]	; 0x24
 810204e:	4b05      	ldr	r3, [pc, #20]	; (8102064 <std+0x3c>)
 8102050:	62a3      	str	r3, [r4, #40]	; 0x28
 8102052:	4b05      	ldr	r3, [pc, #20]	; (8102068 <std+0x40>)
 8102054:	62e3      	str	r3, [r4, #44]	; 0x2c
 8102056:	4b05      	ldr	r3, [pc, #20]	; (810206c <std+0x44>)
 8102058:	6224      	str	r4, [r4, #32]
 810205a:	6323      	str	r3, [r4, #48]	; 0x30
 810205c:	bd10      	pop	{r4, pc}
 810205e:	bf00      	nop
 8102060:	08102385 	.word	0x08102385
 8102064:	081023a7 	.word	0x081023a7
 8102068:	081023df 	.word	0x081023df
 810206c:	08102403 	.word	0x08102403

08102070 <_cleanup_r>:
 8102070:	4901      	ldr	r1, [pc, #4]	; (8102078 <_cleanup_r+0x8>)
 8102072:	f000 b8af 	b.w	81021d4 <_fwalk_reent>
 8102076:	bf00      	nop
 8102078:	08101fb1 	.word	0x08101fb1

0810207c <__sfmoreglue>:
 810207c:	b570      	push	{r4, r5, r6, lr}
 810207e:	2268      	movs	r2, #104	; 0x68
 8102080:	1e4d      	subs	r5, r1, #1
 8102082:	4355      	muls	r5, r2
 8102084:	460e      	mov	r6, r1
 8102086:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810208a:	f7ff fad1 	bl	8101630 <_malloc_r>
 810208e:	4604      	mov	r4, r0
 8102090:	b140      	cbz	r0, 81020a4 <__sfmoreglue+0x28>
 8102092:	2100      	movs	r1, #0
 8102094:	e9c0 1600 	strd	r1, r6, [r0]
 8102098:	300c      	adds	r0, #12
 810209a:	60a0      	str	r0, [r4, #8]
 810209c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 81020a0:	f7ff f9dc 	bl	810145c <memset>
 81020a4:	4620      	mov	r0, r4
 81020a6:	bd70      	pop	{r4, r5, r6, pc}

081020a8 <__sfp_lock_acquire>:
 81020a8:	4801      	ldr	r0, [pc, #4]	; (81020b0 <__sfp_lock_acquire+0x8>)
 81020aa:	f000 b8b3 	b.w	8102214 <__retarget_lock_acquire_recursive>
 81020ae:	bf00      	nop
 81020b0:	100000a9 	.word	0x100000a9

081020b4 <__sfp_lock_release>:
 81020b4:	4801      	ldr	r0, [pc, #4]	; (81020bc <__sfp_lock_release+0x8>)
 81020b6:	f000 b8ae 	b.w	8102216 <__retarget_lock_release_recursive>
 81020ba:	bf00      	nop
 81020bc:	100000a9 	.word	0x100000a9

081020c0 <__sinit_lock_acquire>:
 81020c0:	4801      	ldr	r0, [pc, #4]	; (81020c8 <__sinit_lock_acquire+0x8>)
 81020c2:	f000 b8a7 	b.w	8102214 <__retarget_lock_acquire_recursive>
 81020c6:	bf00      	nop
 81020c8:	100000aa 	.word	0x100000aa

081020cc <__sinit_lock_release>:
 81020cc:	4801      	ldr	r0, [pc, #4]	; (81020d4 <__sinit_lock_release+0x8>)
 81020ce:	f000 b8a2 	b.w	8102216 <__retarget_lock_release_recursive>
 81020d2:	bf00      	nop
 81020d4:	100000aa 	.word	0x100000aa

081020d8 <__sinit>:
 81020d8:	b510      	push	{r4, lr}
 81020da:	4604      	mov	r4, r0
 81020dc:	f7ff fff0 	bl	81020c0 <__sinit_lock_acquire>
 81020e0:	69a3      	ldr	r3, [r4, #24]
 81020e2:	b11b      	cbz	r3, 81020ec <__sinit+0x14>
 81020e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81020e8:	f7ff bff0 	b.w	81020cc <__sinit_lock_release>
 81020ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 81020f0:	6523      	str	r3, [r4, #80]	; 0x50
 81020f2:	4b13      	ldr	r3, [pc, #76]	; (8102140 <__sinit+0x68>)
 81020f4:	4a13      	ldr	r2, [pc, #76]	; (8102144 <__sinit+0x6c>)
 81020f6:	681b      	ldr	r3, [r3, #0]
 81020f8:	62a2      	str	r2, [r4, #40]	; 0x28
 81020fa:	42a3      	cmp	r3, r4
 81020fc:	bf04      	itt	eq
 81020fe:	2301      	moveq	r3, #1
 8102100:	61a3      	streq	r3, [r4, #24]
 8102102:	4620      	mov	r0, r4
 8102104:	f000 f820 	bl	8102148 <__sfp>
 8102108:	6060      	str	r0, [r4, #4]
 810210a:	4620      	mov	r0, r4
 810210c:	f000 f81c 	bl	8102148 <__sfp>
 8102110:	60a0      	str	r0, [r4, #8]
 8102112:	4620      	mov	r0, r4
 8102114:	f000 f818 	bl	8102148 <__sfp>
 8102118:	2200      	movs	r2, #0
 810211a:	60e0      	str	r0, [r4, #12]
 810211c:	2104      	movs	r1, #4
 810211e:	6860      	ldr	r0, [r4, #4]
 8102120:	f7ff ff82 	bl	8102028 <std>
 8102124:	68a0      	ldr	r0, [r4, #8]
 8102126:	2201      	movs	r2, #1
 8102128:	2109      	movs	r1, #9
 810212a:	f7ff ff7d 	bl	8102028 <std>
 810212e:	68e0      	ldr	r0, [r4, #12]
 8102130:	2202      	movs	r2, #2
 8102132:	2112      	movs	r1, #18
 8102134:	f7ff ff78 	bl	8102028 <std>
 8102138:	2301      	movs	r3, #1
 810213a:	61a3      	str	r3, [r4, #24]
 810213c:	e7d2      	b.n	81020e4 <__sinit+0xc>
 810213e:	bf00      	nop
 8102140:	08102504 	.word	0x08102504
 8102144:	08102071 	.word	0x08102071

08102148 <__sfp>:
 8102148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810214a:	4607      	mov	r7, r0
 810214c:	f7ff ffac 	bl	81020a8 <__sfp_lock_acquire>
 8102150:	4b1e      	ldr	r3, [pc, #120]	; (81021cc <__sfp+0x84>)
 8102152:	681e      	ldr	r6, [r3, #0]
 8102154:	69b3      	ldr	r3, [r6, #24]
 8102156:	b913      	cbnz	r3, 810215e <__sfp+0x16>
 8102158:	4630      	mov	r0, r6
 810215a:	f7ff ffbd 	bl	81020d8 <__sinit>
 810215e:	3648      	adds	r6, #72	; 0x48
 8102160:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8102164:	3b01      	subs	r3, #1
 8102166:	d503      	bpl.n	8102170 <__sfp+0x28>
 8102168:	6833      	ldr	r3, [r6, #0]
 810216a:	b30b      	cbz	r3, 81021b0 <__sfp+0x68>
 810216c:	6836      	ldr	r6, [r6, #0]
 810216e:	e7f7      	b.n	8102160 <__sfp+0x18>
 8102170:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8102174:	b9d5      	cbnz	r5, 81021ac <__sfp+0x64>
 8102176:	4b16      	ldr	r3, [pc, #88]	; (81021d0 <__sfp+0x88>)
 8102178:	60e3      	str	r3, [r4, #12]
 810217a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810217e:	6665      	str	r5, [r4, #100]	; 0x64
 8102180:	f000 f847 	bl	8102212 <__retarget_lock_init_recursive>
 8102184:	f7ff ff96 	bl	81020b4 <__sfp_lock_release>
 8102188:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810218c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8102190:	6025      	str	r5, [r4, #0]
 8102192:	61a5      	str	r5, [r4, #24]
 8102194:	2208      	movs	r2, #8
 8102196:	4629      	mov	r1, r5
 8102198:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810219c:	f7ff f95e 	bl	810145c <memset>
 81021a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 81021a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 81021a8:	4620      	mov	r0, r4
 81021aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81021ac:	3468      	adds	r4, #104	; 0x68
 81021ae:	e7d9      	b.n	8102164 <__sfp+0x1c>
 81021b0:	2104      	movs	r1, #4
 81021b2:	4638      	mov	r0, r7
 81021b4:	f7ff ff62 	bl	810207c <__sfmoreglue>
 81021b8:	4604      	mov	r4, r0
 81021ba:	6030      	str	r0, [r6, #0]
 81021bc:	2800      	cmp	r0, #0
 81021be:	d1d5      	bne.n	810216c <__sfp+0x24>
 81021c0:	f7ff ff78 	bl	81020b4 <__sfp_lock_release>
 81021c4:	230c      	movs	r3, #12
 81021c6:	603b      	str	r3, [r7, #0]
 81021c8:	e7ee      	b.n	81021a8 <__sfp+0x60>
 81021ca:	bf00      	nop
 81021cc:	08102504 	.word	0x08102504
 81021d0:	ffff0001 	.word	0xffff0001

081021d4 <_fwalk_reent>:
 81021d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81021d8:	4606      	mov	r6, r0
 81021da:	4688      	mov	r8, r1
 81021dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 81021e0:	2700      	movs	r7, #0
 81021e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 81021e6:	f1b9 0901 	subs.w	r9, r9, #1
 81021ea:	d505      	bpl.n	81021f8 <_fwalk_reent+0x24>
 81021ec:	6824      	ldr	r4, [r4, #0]
 81021ee:	2c00      	cmp	r4, #0
 81021f0:	d1f7      	bne.n	81021e2 <_fwalk_reent+0xe>
 81021f2:	4638      	mov	r0, r7
 81021f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81021f8:	89ab      	ldrh	r3, [r5, #12]
 81021fa:	2b01      	cmp	r3, #1
 81021fc:	d907      	bls.n	810220e <_fwalk_reent+0x3a>
 81021fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8102202:	3301      	adds	r3, #1
 8102204:	d003      	beq.n	810220e <_fwalk_reent+0x3a>
 8102206:	4629      	mov	r1, r5
 8102208:	4630      	mov	r0, r6
 810220a:	47c0      	blx	r8
 810220c:	4307      	orrs	r7, r0
 810220e:	3568      	adds	r5, #104	; 0x68
 8102210:	e7e9      	b.n	81021e6 <_fwalk_reent+0x12>

08102212 <__retarget_lock_init_recursive>:
 8102212:	4770      	bx	lr

08102214 <__retarget_lock_acquire_recursive>:
 8102214:	4770      	bx	lr

08102216 <__retarget_lock_release_recursive>:
 8102216:	4770      	bx	lr

08102218 <__swhatbuf_r>:
 8102218:	b570      	push	{r4, r5, r6, lr}
 810221a:	460e      	mov	r6, r1
 810221c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8102220:	2900      	cmp	r1, #0
 8102222:	b096      	sub	sp, #88	; 0x58
 8102224:	4614      	mov	r4, r2
 8102226:	461d      	mov	r5, r3
 8102228:	da08      	bge.n	810223c <__swhatbuf_r+0x24>
 810222a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810222e:	2200      	movs	r2, #0
 8102230:	602a      	str	r2, [r5, #0]
 8102232:	061a      	lsls	r2, r3, #24
 8102234:	d410      	bmi.n	8102258 <__swhatbuf_r+0x40>
 8102236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810223a:	e00e      	b.n	810225a <__swhatbuf_r+0x42>
 810223c:	466a      	mov	r2, sp
 810223e:	f000 f907 	bl	8102450 <_fstat_r>
 8102242:	2800      	cmp	r0, #0
 8102244:	dbf1      	blt.n	810222a <__swhatbuf_r+0x12>
 8102246:	9a01      	ldr	r2, [sp, #4]
 8102248:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810224c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8102250:	425a      	negs	r2, r3
 8102252:	415a      	adcs	r2, r3
 8102254:	602a      	str	r2, [r5, #0]
 8102256:	e7ee      	b.n	8102236 <__swhatbuf_r+0x1e>
 8102258:	2340      	movs	r3, #64	; 0x40
 810225a:	2000      	movs	r0, #0
 810225c:	6023      	str	r3, [r4, #0]
 810225e:	b016      	add	sp, #88	; 0x58
 8102260:	bd70      	pop	{r4, r5, r6, pc}
	...

08102264 <__smakebuf_r>:
 8102264:	898b      	ldrh	r3, [r1, #12]
 8102266:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8102268:	079d      	lsls	r5, r3, #30
 810226a:	4606      	mov	r6, r0
 810226c:	460c      	mov	r4, r1
 810226e:	d507      	bpl.n	8102280 <__smakebuf_r+0x1c>
 8102270:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8102274:	6023      	str	r3, [r4, #0]
 8102276:	6123      	str	r3, [r4, #16]
 8102278:	2301      	movs	r3, #1
 810227a:	6163      	str	r3, [r4, #20]
 810227c:	b002      	add	sp, #8
 810227e:	bd70      	pop	{r4, r5, r6, pc}
 8102280:	ab01      	add	r3, sp, #4
 8102282:	466a      	mov	r2, sp
 8102284:	f7ff ffc8 	bl	8102218 <__swhatbuf_r>
 8102288:	9900      	ldr	r1, [sp, #0]
 810228a:	4605      	mov	r5, r0
 810228c:	4630      	mov	r0, r6
 810228e:	f7ff f9cf 	bl	8101630 <_malloc_r>
 8102292:	b948      	cbnz	r0, 81022a8 <__smakebuf_r+0x44>
 8102294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8102298:	059a      	lsls	r2, r3, #22
 810229a:	d4ef      	bmi.n	810227c <__smakebuf_r+0x18>
 810229c:	f023 0303 	bic.w	r3, r3, #3
 81022a0:	f043 0302 	orr.w	r3, r3, #2
 81022a4:	81a3      	strh	r3, [r4, #12]
 81022a6:	e7e3      	b.n	8102270 <__smakebuf_r+0xc>
 81022a8:	4b0d      	ldr	r3, [pc, #52]	; (81022e0 <__smakebuf_r+0x7c>)
 81022aa:	62b3      	str	r3, [r6, #40]	; 0x28
 81022ac:	89a3      	ldrh	r3, [r4, #12]
 81022ae:	6020      	str	r0, [r4, #0]
 81022b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81022b4:	81a3      	strh	r3, [r4, #12]
 81022b6:	9b00      	ldr	r3, [sp, #0]
 81022b8:	6163      	str	r3, [r4, #20]
 81022ba:	9b01      	ldr	r3, [sp, #4]
 81022bc:	6120      	str	r0, [r4, #16]
 81022be:	b15b      	cbz	r3, 81022d8 <__smakebuf_r+0x74>
 81022c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81022c4:	4630      	mov	r0, r6
 81022c6:	f000 f8d5 	bl	8102474 <_isatty_r>
 81022ca:	b128      	cbz	r0, 81022d8 <__smakebuf_r+0x74>
 81022cc:	89a3      	ldrh	r3, [r4, #12]
 81022ce:	f023 0303 	bic.w	r3, r3, #3
 81022d2:	f043 0301 	orr.w	r3, r3, #1
 81022d6:	81a3      	strh	r3, [r4, #12]
 81022d8:	89a0      	ldrh	r0, [r4, #12]
 81022da:	4305      	orrs	r5, r0
 81022dc:	81a5      	strh	r5, [r4, #12]
 81022de:	e7cd      	b.n	810227c <__smakebuf_r+0x18>
 81022e0:	08102071 	.word	0x08102071

081022e4 <__malloc_lock>:
 81022e4:	4801      	ldr	r0, [pc, #4]	; (81022ec <__malloc_lock+0x8>)
 81022e6:	f7ff bf95 	b.w	8102214 <__retarget_lock_acquire_recursive>
 81022ea:	bf00      	nop
 81022ec:	100000a8 	.word	0x100000a8

081022f0 <__malloc_unlock>:
 81022f0:	4801      	ldr	r0, [pc, #4]	; (81022f8 <__malloc_unlock+0x8>)
 81022f2:	f7ff bf90 	b.w	8102216 <__retarget_lock_release_recursive>
 81022f6:	bf00      	nop
 81022f8:	100000a8 	.word	0x100000a8

081022fc <_raise_r>:
 81022fc:	291f      	cmp	r1, #31
 81022fe:	b538      	push	{r3, r4, r5, lr}
 8102300:	4604      	mov	r4, r0
 8102302:	460d      	mov	r5, r1
 8102304:	d904      	bls.n	8102310 <_raise_r+0x14>
 8102306:	2316      	movs	r3, #22
 8102308:	6003      	str	r3, [r0, #0]
 810230a:	f04f 30ff 	mov.w	r0, #4294967295
 810230e:	bd38      	pop	{r3, r4, r5, pc}
 8102310:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8102312:	b112      	cbz	r2, 810231a <_raise_r+0x1e>
 8102314:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8102318:	b94b      	cbnz	r3, 810232e <_raise_r+0x32>
 810231a:	4620      	mov	r0, r4
 810231c:	f000 f830 	bl	8102380 <_getpid_r>
 8102320:	462a      	mov	r2, r5
 8102322:	4601      	mov	r1, r0
 8102324:	4620      	mov	r0, r4
 8102326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810232a:	f000 b817 	b.w	810235c <_kill_r>
 810232e:	2b01      	cmp	r3, #1
 8102330:	d00a      	beq.n	8102348 <_raise_r+0x4c>
 8102332:	1c59      	adds	r1, r3, #1
 8102334:	d103      	bne.n	810233e <_raise_r+0x42>
 8102336:	2316      	movs	r3, #22
 8102338:	6003      	str	r3, [r0, #0]
 810233a:	2001      	movs	r0, #1
 810233c:	e7e7      	b.n	810230e <_raise_r+0x12>
 810233e:	2400      	movs	r4, #0
 8102340:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8102344:	4628      	mov	r0, r5
 8102346:	4798      	blx	r3
 8102348:	2000      	movs	r0, #0
 810234a:	e7e0      	b.n	810230e <_raise_r+0x12>

0810234c <raise>:
 810234c:	4b02      	ldr	r3, [pc, #8]	; (8102358 <raise+0xc>)
 810234e:	4601      	mov	r1, r0
 8102350:	6818      	ldr	r0, [r3, #0]
 8102352:	f7ff bfd3 	b.w	81022fc <_raise_r>
 8102356:	bf00      	nop
 8102358:	10000014 	.word	0x10000014

0810235c <_kill_r>:
 810235c:	b538      	push	{r3, r4, r5, lr}
 810235e:	4d07      	ldr	r5, [pc, #28]	; (810237c <_kill_r+0x20>)
 8102360:	2300      	movs	r3, #0
 8102362:	4604      	mov	r4, r0
 8102364:	4608      	mov	r0, r1
 8102366:	4611      	mov	r1, r2
 8102368:	602b      	str	r3, [r5, #0]
 810236a:	f7fe f94d 	bl	8100608 <_kill>
 810236e:	1c43      	adds	r3, r0, #1
 8102370:	d102      	bne.n	8102378 <_kill_r+0x1c>
 8102372:	682b      	ldr	r3, [r5, #0]
 8102374:	b103      	cbz	r3, 8102378 <_kill_r+0x1c>
 8102376:	6023      	str	r3, [r4, #0]
 8102378:	bd38      	pop	{r3, r4, r5, pc}
 810237a:	bf00      	nop
 810237c:	100000ac 	.word	0x100000ac

08102380 <_getpid_r>:
 8102380:	f7fe b93a 	b.w	81005f8 <_getpid>

08102384 <__sread>:
 8102384:	b510      	push	{r4, lr}
 8102386:	460c      	mov	r4, r1
 8102388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810238c:	f000 f894 	bl	81024b8 <_read_r>
 8102390:	2800      	cmp	r0, #0
 8102392:	bfab      	itete	ge
 8102394:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8102396:	89a3      	ldrhlt	r3, [r4, #12]
 8102398:	181b      	addge	r3, r3, r0
 810239a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810239e:	bfac      	ite	ge
 81023a0:	6563      	strge	r3, [r4, #84]	; 0x54
 81023a2:	81a3      	strhlt	r3, [r4, #12]
 81023a4:	bd10      	pop	{r4, pc}

081023a6 <__swrite>:
 81023a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81023aa:	461f      	mov	r7, r3
 81023ac:	898b      	ldrh	r3, [r1, #12]
 81023ae:	05db      	lsls	r3, r3, #23
 81023b0:	4605      	mov	r5, r0
 81023b2:	460c      	mov	r4, r1
 81023b4:	4616      	mov	r6, r2
 81023b6:	d505      	bpl.n	81023c4 <__swrite+0x1e>
 81023b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81023bc:	2302      	movs	r3, #2
 81023be:	2200      	movs	r2, #0
 81023c0:	f000 f868 	bl	8102494 <_lseek_r>
 81023c4:	89a3      	ldrh	r3, [r4, #12]
 81023c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81023ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81023ce:	81a3      	strh	r3, [r4, #12]
 81023d0:	4632      	mov	r2, r6
 81023d2:	463b      	mov	r3, r7
 81023d4:	4628      	mov	r0, r5
 81023d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81023da:	f000 b817 	b.w	810240c <_write_r>

081023de <__sseek>:
 81023de:	b510      	push	{r4, lr}
 81023e0:	460c      	mov	r4, r1
 81023e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81023e6:	f000 f855 	bl	8102494 <_lseek_r>
 81023ea:	1c43      	adds	r3, r0, #1
 81023ec:	89a3      	ldrh	r3, [r4, #12]
 81023ee:	bf15      	itete	ne
 81023f0:	6560      	strne	r0, [r4, #84]	; 0x54
 81023f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 81023f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 81023fa:	81a3      	strheq	r3, [r4, #12]
 81023fc:	bf18      	it	ne
 81023fe:	81a3      	strhne	r3, [r4, #12]
 8102400:	bd10      	pop	{r4, pc}

08102402 <__sclose>:
 8102402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8102406:	f000 b813 	b.w	8102430 <_close_r>
	...

0810240c <_write_r>:
 810240c:	b538      	push	{r3, r4, r5, lr}
 810240e:	4d07      	ldr	r5, [pc, #28]	; (810242c <_write_r+0x20>)
 8102410:	4604      	mov	r4, r0
 8102412:	4608      	mov	r0, r1
 8102414:	4611      	mov	r1, r2
 8102416:	2200      	movs	r2, #0
 8102418:	602a      	str	r2, [r5, #0]
 810241a:	461a      	mov	r2, r3
 810241c:	f7fe f92b 	bl	8100676 <_write>
 8102420:	1c43      	adds	r3, r0, #1
 8102422:	d102      	bne.n	810242a <_write_r+0x1e>
 8102424:	682b      	ldr	r3, [r5, #0]
 8102426:	b103      	cbz	r3, 810242a <_write_r+0x1e>
 8102428:	6023      	str	r3, [r4, #0]
 810242a:	bd38      	pop	{r3, r4, r5, pc}
 810242c:	100000ac 	.word	0x100000ac

08102430 <_close_r>:
 8102430:	b538      	push	{r3, r4, r5, lr}
 8102432:	4d06      	ldr	r5, [pc, #24]	; (810244c <_close_r+0x1c>)
 8102434:	2300      	movs	r3, #0
 8102436:	4604      	mov	r4, r0
 8102438:	4608      	mov	r0, r1
 810243a:	602b      	str	r3, [r5, #0]
 810243c:	f7fe f937 	bl	81006ae <_close>
 8102440:	1c43      	adds	r3, r0, #1
 8102442:	d102      	bne.n	810244a <_close_r+0x1a>
 8102444:	682b      	ldr	r3, [r5, #0]
 8102446:	b103      	cbz	r3, 810244a <_close_r+0x1a>
 8102448:	6023      	str	r3, [r4, #0]
 810244a:	bd38      	pop	{r3, r4, r5, pc}
 810244c:	100000ac 	.word	0x100000ac

08102450 <_fstat_r>:
 8102450:	b538      	push	{r3, r4, r5, lr}
 8102452:	4d07      	ldr	r5, [pc, #28]	; (8102470 <_fstat_r+0x20>)
 8102454:	2300      	movs	r3, #0
 8102456:	4604      	mov	r4, r0
 8102458:	4608      	mov	r0, r1
 810245a:	4611      	mov	r1, r2
 810245c:	602b      	str	r3, [r5, #0]
 810245e:	f7fe f932 	bl	81006c6 <_fstat>
 8102462:	1c43      	adds	r3, r0, #1
 8102464:	d102      	bne.n	810246c <_fstat_r+0x1c>
 8102466:	682b      	ldr	r3, [r5, #0]
 8102468:	b103      	cbz	r3, 810246c <_fstat_r+0x1c>
 810246a:	6023      	str	r3, [r4, #0]
 810246c:	bd38      	pop	{r3, r4, r5, pc}
 810246e:	bf00      	nop
 8102470:	100000ac 	.word	0x100000ac

08102474 <_isatty_r>:
 8102474:	b538      	push	{r3, r4, r5, lr}
 8102476:	4d06      	ldr	r5, [pc, #24]	; (8102490 <_isatty_r+0x1c>)
 8102478:	2300      	movs	r3, #0
 810247a:	4604      	mov	r4, r0
 810247c:	4608      	mov	r0, r1
 810247e:	602b      	str	r3, [r5, #0]
 8102480:	f7fe f931 	bl	81006e6 <_isatty>
 8102484:	1c43      	adds	r3, r0, #1
 8102486:	d102      	bne.n	810248e <_isatty_r+0x1a>
 8102488:	682b      	ldr	r3, [r5, #0]
 810248a:	b103      	cbz	r3, 810248e <_isatty_r+0x1a>
 810248c:	6023      	str	r3, [r4, #0]
 810248e:	bd38      	pop	{r3, r4, r5, pc}
 8102490:	100000ac 	.word	0x100000ac

08102494 <_lseek_r>:
 8102494:	b538      	push	{r3, r4, r5, lr}
 8102496:	4d07      	ldr	r5, [pc, #28]	; (81024b4 <_lseek_r+0x20>)
 8102498:	4604      	mov	r4, r0
 810249a:	4608      	mov	r0, r1
 810249c:	4611      	mov	r1, r2
 810249e:	2200      	movs	r2, #0
 81024a0:	602a      	str	r2, [r5, #0]
 81024a2:	461a      	mov	r2, r3
 81024a4:	f7fe f92a 	bl	81006fc <_lseek>
 81024a8:	1c43      	adds	r3, r0, #1
 81024aa:	d102      	bne.n	81024b2 <_lseek_r+0x1e>
 81024ac:	682b      	ldr	r3, [r5, #0]
 81024ae:	b103      	cbz	r3, 81024b2 <_lseek_r+0x1e>
 81024b0:	6023      	str	r3, [r4, #0]
 81024b2:	bd38      	pop	{r3, r4, r5, pc}
 81024b4:	100000ac 	.word	0x100000ac

081024b8 <_read_r>:
 81024b8:	b538      	push	{r3, r4, r5, lr}
 81024ba:	4d07      	ldr	r5, [pc, #28]	; (81024d8 <_read_r+0x20>)
 81024bc:	4604      	mov	r4, r0
 81024be:	4608      	mov	r0, r1
 81024c0:	4611      	mov	r1, r2
 81024c2:	2200      	movs	r2, #0
 81024c4:	602a      	str	r2, [r5, #0]
 81024c6:	461a      	mov	r2, r3
 81024c8:	f7fe f8b8 	bl	810063c <_read>
 81024cc:	1c43      	adds	r3, r0, #1
 81024ce:	d102      	bne.n	81024d6 <_read_r+0x1e>
 81024d0:	682b      	ldr	r3, [r5, #0]
 81024d2:	b103      	cbz	r3, 81024d6 <_read_r+0x1e>
 81024d4:	6023      	str	r3, [r4, #0]
 81024d6:	bd38      	pop	{r3, r4, r5, pc}
 81024d8:	100000ac 	.word	0x100000ac

081024dc <_init>:
 81024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81024de:	bf00      	nop
 81024e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81024e2:	bc08      	pop	{r3}
 81024e4:	469e      	mov	lr, r3
 81024e6:	4770      	bx	lr

081024e8 <_fini>:
 81024e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81024ea:	bf00      	nop
 81024ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81024ee:	bc08      	pop	{r3}
 81024f0:	469e      	mov	lr, r3
 81024f2:	4770      	bx	lr
