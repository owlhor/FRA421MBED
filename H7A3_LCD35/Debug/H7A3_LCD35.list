
H7A3_LCD35.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bd0  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011760  08007e7c  08007e7c  00017e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080195dc  080195dc  000295dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080195e4  080195e4  000295e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080195e8  080195e8  000295e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  24000000  080195ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000158  24000080  0801966c  00030080  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240001d8  0801966c  000301d8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018460  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ce6  00000000  00000000  0004850e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001308  00000000  00000000  0004b1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00030d1c  00000000  00000000  0004c500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001884c  00000000  00000000  0007d21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00140f64  00000000  00000000  00095a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001d69cc  2**0
                  CONTENTS, READONLY
 17 .debug_ranges 000011a8  00000000  00000000  001d6a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004f64  00000000  00000000  001d7bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000080 	.word	0x24000080
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08007e64 	.word	0x08007e64

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000084 	.word	0x24000084
 80002e8:	08007e64 	.word	0x08007e64

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <ili9486_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9486_DisplayOn(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep
 80005f4:	2011      	movs	r0, #17
 80005f6:	f000 fdad 	bl	8001154 <LCD_IO_WriteCmd8>
  ILI9486_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 fcb4 	bl	8000f68 <LCD_IO_Bl_OnOff>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <ili9486_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9486_DisplayOff(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(0);
 8000608:	2000      	movs	r0, #0
 800060a:	f000 fcad 	bl	8000f68 <LCD_IO_Bl_OnOff>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_SLPIN);    // Sleep
 800060e:	2010      	movs	r0, #16
 8000610:	f000 fda0 	bl	8001154 <LCD_IO_WriteCmd8>
  ILI9486_LCDMUTEX_POP();
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}

08000618 <ili9486_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9486_GetLcdPixelWidth(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_X;
 800061c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <ili9486_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9486_GetLcdPixelHeight(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_Y;
 800062e:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8000632:	4618      	mov	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <ili9486_ReadID>:
  * @brief  Get the ILI9486 ID.
  * @param  None
  * @retval The ILI9486 ID
  */
uint16_t ili9486_ReadID(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_ReadCmd8MultipleData8(0xD3, (uint8_t *)&id, 3, 1);
 8000646:	1d39      	adds	r1, r7, #4
 8000648:	2301      	movs	r3, #1
 800064a:	2203      	movs	r2, #3
 800064c:	20d3      	movs	r0, #211	; 0xd3
 800064e:	f001 fcd1 	bl	8001ff4 <LCD_IO_ReadCmd8MultipleData8>
  ILI9486_LCDMUTEX_POP();
  if(id == 0x869400)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a05      	ldr	r2, [pc, #20]	; (800066c <ili9486_ReadID+0x30>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d102      	bne.n	8000660 <ili9486_ReadID+0x24>
    return 0x9486;
 800065a:	f249 4386 	movw	r3, #38022	; 0x9486
 800065e:	e000      	b.n	8000662 <ili9486_ReadID+0x26>
  else
    return 0;
 8000660:	2300      	movs	r3, #0
}
 8000662:	4618      	mov	r0, r3
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	00869400 	.word	0x00869400

08000670 <ili9486_Init>:
  * @brief  ILI9486 initialization
  * @param  None
  * @retval None
  */
void ili9486_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  if((Is_ili9486_Initialized & ILI9486_LCD_INITIALIZED) == 0)
 8000674:	4b33      	ldr	r3, [pc, #204]	; (8000744 <ili9486_Init+0xd4>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	2b00      	cmp	r3, #0
 800067e:	d115      	bne.n	80006ac <ili9486_Init+0x3c>
  {
    Is_ili9486_Initialized |= ILI9486_LCD_INITIALIZED;
 8000680:	4b30      	ldr	r3, [pc, #192]	; (8000744 <ili9486_Init+0xd4>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <ili9486_Init+0xd4>)
 800068c:	701a      	strb	r2, [r3, #0]
    if((Is_ili9486_Initialized & ILI9486_IO_INITIALIZED) == 0)
 800068e:	4b2d      	ldr	r3, [pc, #180]	; (8000744 <ili9486_Init+0xd4>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	2b00      	cmp	r3, #0
 8000698:	d101      	bne.n	800069e <ili9486_Init+0x2e>
      LCD_IO_Init();
 800069a:	f000 fc71 	bl	8000f80 <LCD_IO_Init>
    Is_ili9486_Initialized |= ILI9486_IO_INITIALIZED;
 800069e:	4b29      	ldr	r3, [pc, #164]	; (8000744 <ili9486_Init+0xd4>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	f043 0302 	orr.w	r3, r3, #2
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b26      	ldr	r3, [pc, #152]	; (8000744 <ili9486_Init+0xd4>)
 80006aa:	701a      	strb	r2, [r3, #0]
  }
  LCD_Delay(10);
 80006ac:	200a      	movs	r0, #10
 80006ae:	f000 fc50 	bl	8000f52 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_SWRESET);
 80006b2:	2001      	movs	r0, #1
 80006b4:	f000 fd4e 	bl	8001154 <LCD_IO_WriteCmd8>
  LCD_Delay(100);
 80006b8:	2064      	movs	r0, #100	; 0x64
 80006ba:	f000 fc4a 	bl	8000f52 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_RGB_INTERFACE, (uint8_t *)"\x00", 1); // RGB mode off (0xB0)
 80006be:	2201      	movs	r2, #1
 80006c0:	4921      	ldr	r1, [pc, #132]	; (8000748 <ili9486_Init+0xd8>)
 80006c2:	20b0      	movs	r0, #176	; 0xb0
 80006c4:	f001 f98a 	bl	80019dc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 80006c8:	2011      	movs	r0, #17
 80006ca:	f000 fd43 	bl	8001154 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80006ce:	200a      	movs	r0, #10
 80006d0:	f000 fc3f 	bl	8000f52 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // interface format (0x3A)
 80006d4:	2201      	movs	r2, #1
 80006d6:	491d      	ldr	r1, [pc, #116]	; (800074c <ili9486_Init+0xdc>)
 80006d8:	203a      	movs	r0, #58	; 0x3a
 80006da:	f001 f97f 	bl	80019dc <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_DOWN);
 80006de:	2036      	movs	r0, #54	; 0x36
 80006e0:	f000 fd38 	bl	8001154 <LCD_IO_WriteCmd8>
 80006e4:	2028      	movs	r0, #40	; 0x28
 80006e6:	f000 fddf 	bl	80012a8 <LCD_IO_WriteData8>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PWCTR3, (uint8_t *)"\x44", 1); // 0xC2
 80006ea:	2201      	movs	r2, #1
 80006ec:	4918      	ldr	r1, [pc, #96]	; (8000750 <ili9486_Init+0xe0>)
 80006ee:	20c2      	movs	r0, #194	; 0xc2
 80006f0:	f001 f974 	bl	80019dc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_VMCTR1, (uint8_t *)"\x00\x00\x00\x00", 4); // 0xC5
 80006f4:	2204      	movs	r2, #4
 80006f6:	4917      	ldr	r1, [pc, #92]	; (8000754 <ili9486_Init+0xe4>)
 80006f8:	20c5      	movs	r0, #197	; 0xc5
 80006fa:	f001 f96f 	bl	80019dc <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control (0xE0)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRP1, (uint8_t *)"\x0F\x1F\x1C\x0C\x0F\x08\x48\x98\x37\x0A\x13\x04\x11\x0D\x00", 15);
 80006fe:	220f      	movs	r2, #15
 8000700:	4915      	ldr	r1, [pc, #84]	; (8000758 <ili9486_Init+0xe8>)
 8000702:	20e0      	movs	r0, #224	; 0xe0
 8000704:	f001 f96a 	bl	80019dc <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control (0xE1)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRN1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 8000708:	220f      	movs	r2, #15
 800070a:	4914      	ldr	r1, [pc, #80]	; (800075c <ili9486_Init+0xec>)
 800070c:	20e1      	movs	r0, #225	; 0xe1
 800070e:	f001 f965 	bl	80019dc <LCD_IO_WriteCmd8MultipleData8>

  // Digital gamma control1 (0xE2)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_DGCTR1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 8000712:	220f      	movs	r2, #15
 8000714:	4911      	ldr	r1, [pc, #68]	; (800075c <ili9486_Init+0xec>)
 8000716:	20e2      	movs	r0, #226	; 0xe2
 8000718:	f001 f960 	bl	80019dc <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_NORON);     // Normal display on (0x13)
 800071c:	2013      	movs	r0, #19
 800071e:	f000 fd19 	bl	8001154 <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_INVOFF);    // Display inversion off (0x20)
 8000722:	2020      	movs	r0, #32
 8000724:	f000 fd16 	bl	8001154 <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 8000728:	2011      	movs	r0, #17
 800072a:	f000 fd13 	bl	8001154 <LCD_IO_WriteCmd8>
  LCD_Delay(200);
 800072e:	20c8      	movs	r0, #200	; 0xc8
 8000730:	f000 fc0f 	bl	8000f52 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_DISPON);    // Display on (0x29)
 8000734:	2029      	movs	r0, #41	; 0x29
 8000736:	f000 fd0d 	bl	8001154 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 800073a:	200a      	movs	r0, #10
 800073c:	f000 fc09 	bl	8000f52 <LCD_Delay>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2400009c 	.word	0x2400009c
 8000748:	08007e7c 	.word	0x08007e7c
 800074c:	08007e80 	.word	0x08007e80
 8000750:	08007e84 	.word	0x08007e84
 8000754:	08007e88 	.word	0x08007e88
 8000758:	08007e90 	.word	0x08007e90
 800075c:	08007ea0 	.word	0x08007ea0

08000760 <ili9486_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9486_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	460a      	mov	r2, r1
 800076a:	80fb      	strh	r3, [r7, #6]
 800076c:	4613      	mov	r3, r2
 800076e:	80bb      	strh	r3, [r7, #4]
  ILI9486_LCDMUTEX_PUSH();
  ILI9486_SETCURSOR(Xpos, Ypos);
 8000770:	202a      	movs	r0, #42	; 0x2a
 8000772:	f000 fcef 	bl	8001154 <LCD_IO_WriteCmd8>
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	b29b      	uxth	r3, r3
 800077c:	b2db      	uxtb	r3, r3
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fd92 	bl	80012a8 <LCD_IO_WriteData8>
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fd8d 	bl	80012a8 <LCD_IO_WriteData8>
 800078e:	88fb      	ldrh	r3, [r7, #6]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	b29b      	uxth	r3, r3
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fd86 	bl	80012a8 <LCD_IO_WriteData8>
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 fd81 	bl	80012a8 <LCD_IO_WriteData8>
 80007a6:	202b      	movs	r0, #43	; 0x2b
 80007a8:	f000 fcd4 	bl	8001154 <LCD_IO_WriteCmd8>
 80007ac:	88bb      	ldrh	r3, [r7, #4]
 80007ae:	0a1b      	lsrs	r3, r3, #8
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fd77 	bl	80012a8 <LCD_IO_WriteData8>
 80007ba:	88bb      	ldrh	r3, [r7, #4]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 fd72 	bl	80012a8 <LCD_IO_WriteData8>
 80007c4:	88bb      	ldrh	r3, [r7, #4]
 80007c6:	0a1b      	lsrs	r3, r3, #8
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 fd6b 	bl	80012a8 <LCD_IO_WriteData8>
 80007d2:	88bb      	ldrh	r3, [r7, #4]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 fd66 	bl	80012a8 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <ili9486_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9486_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	80fb      	strh	r3, [r7, #6]
 80007ee:	460b      	mov	r3, r1
 80007f0:	80bb      	strh	r3, [r7, #4]
 80007f2:	4613      	mov	r3, r2
 80007f4:	807b      	strh	r3, [r7, #2]
  ILI9486_LCDMUTEX_PUSH();
  ILI9486_SETCURSOR(Xpos, Ypos);
 80007f6:	202a      	movs	r0, #42	; 0x2a
 80007f8:	f000 fcac 	bl	8001154 <LCD_IO_WriteCmd8>
 80007fc:	88fb      	ldrh	r3, [r7, #6]
 80007fe:	0a1b      	lsrs	r3, r3, #8
 8000800:	b29b      	uxth	r3, r3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4618      	mov	r0, r3
 8000806:	f000 fd4f 	bl	80012a8 <LCD_IO_WriteData8>
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fd4a 	bl	80012a8 <LCD_IO_WriteData8>
 8000814:	88fb      	ldrh	r3, [r7, #6]
 8000816:	0a1b      	lsrs	r3, r3, #8
 8000818:	b29b      	uxth	r3, r3
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fd43 	bl	80012a8 <LCD_IO_WriteData8>
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fd3e 	bl	80012a8 <LCD_IO_WriteData8>
 800082c:	202b      	movs	r0, #43	; 0x2b
 800082e:	f000 fc91 	bl	8001154 <LCD_IO_WriteCmd8>
 8000832:	88bb      	ldrh	r3, [r7, #4]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	b29b      	uxth	r3, r3
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fd34 	bl	80012a8 <LCD_IO_WriteData8>
 8000840:	88bb      	ldrh	r3, [r7, #4]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4618      	mov	r0, r3
 8000846:	f000 fd2f 	bl	80012a8 <LCD_IO_WriteData8>
 800084a:	88bb      	ldrh	r3, [r7, #4]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	b29b      	uxth	r3, r3
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f000 fd28 	bl	80012a8 <LCD_IO_WriteData8>
 8000858:	88bb      	ldrh	r3, [r7, #4]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4618      	mov	r0, r3
 800085e:	f000 fd23 	bl	80012a8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_RAMWR); LCD_IO_WriteData16(RGBCode);
 8000862:	202c      	movs	r0, #44	; 0x2c
 8000864:	f000 fc76 	bl	8001154 <LCD_IO_WriteCmd8>
 8000868:	887b      	ldrh	r3, [r7, #2]
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fdbe 	bl	80013ec <LCD_IO_WriteData16>
  ILI9486_LCDMUTEX_POP();
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <ili9486_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9486_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	460a      	mov	r2, r1
 8000882:	80fb      	strh	r3, [r7, #6]
 8000884:	4613      	mov	r3, r2
 8000886:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8000888:	2201      	movs	r2, #1
 800088a:	4925      	ldr	r1, [pc, #148]	; (8000920 <ili9486_ReadPixel+0xa8>)
 800088c:	203a      	movs	r0, #58	; 0x3a
 800088e:	f001 f8a5 	bl	80019dc <LCD_IO_WriteCmd8MultipleData8>
  ILI9486_SETCURSOR(Xpos, Ypos);
 8000892:	202a      	movs	r0, #42	; 0x2a
 8000894:	f000 fc5e 	bl	8001154 <LCD_IO_WriteCmd8>
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	0a1b      	lsrs	r3, r3, #8
 800089c:	b29b      	uxth	r3, r3
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 fd01 	bl	80012a8 <LCD_IO_WriteData8>
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fcfc 	bl	80012a8 <LCD_IO_WriteData8>
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	0a1b      	lsrs	r3, r3, #8
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fcf5 	bl	80012a8 <LCD_IO_WriteData8>
 80008be:	88fb      	ldrh	r3, [r7, #6]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fcf0 	bl	80012a8 <LCD_IO_WriteData8>
 80008c8:	202b      	movs	r0, #43	; 0x2b
 80008ca:	f000 fc43 	bl	8001154 <LCD_IO_WriteCmd8>
 80008ce:	88bb      	ldrh	r3, [r7, #4]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fce6 	bl	80012a8 <LCD_IO_WriteData8>
 80008dc:	88bb      	ldrh	r3, [r7, #4]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 fce1 	bl	80012a8 <LCD_IO_WriteData8>
 80008e6:	88bb      	ldrh	r3, [r7, #4]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fcda 	bl	80012a8 <LCD_IO_WriteData8>
 80008f4:	88bb      	ldrh	r3, [r7, #4]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 fcd5 	bl	80012a8 <LCD_IO_WriteData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9486_RAMRD, (uint16_t *)&ret, 1, 1);
 80008fe:	f107 010e 	add.w	r1, r7, #14
 8000902:	2301      	movs	r3, #1
 8000904:	2201      	movs	r2, #1
 8000906:	202e      	movs	r0, #46	; 0x2e
 8000908:	f001 fd12 	bl	8002330 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 800090c:	2201      	movs	r2, #1
 800090e:	4905      	ldr	r1, [pc, #20]	; (8000924 <ili9486_ReadPixel+0xac>)
 8000910:	203a      	movs	r0, #58	; 0x3a
 8000912:	f001 f863 	bl	80019dc <LCD_IO_WriteCmd8MultipleData8>
  ILI9486_LCDMUTEX_POP();
  return(ret);
 8000916:	89fb      	ldrh	r3, [r7, #14]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	08007eb0 	.word	0x08007eb0
 8000924:	08007e80 	.word	0x08007e80

08000928 <ili9486_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9486_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4604      	mov	r4, r0
 8000930:	4608      	mov	r0, r1
 8000932:	4611      	mov	r1, r2
 8000934:	461a      	mov	r2, r3
 8000936:	4623      	mov	r3, r4
 8000938:	80fb      	strh	r3, [r7, #6]
 800093a:	4603      	mov	r3, r0
 800093c:	80bb      	strh	r3, [r7, #4]
 800093e:	460b      	mov	r3, r1
 8000940:	807b      	strh	r3, [r7, #2]
 8000942:	4613      	mov	r3, r2
 8000944:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8000946:	4a2a      	ldr	r2, [pc, #168]	; (80009f0 <ili9486_SetDisplayWindow+0xc8>)
 8000948:	88bb      	ldrh	r3, [r7, #4]
 800094a:	8013      	strh	r3, [r2, #0]
 800094c:	88ba      	ldrh	r2, [r7, #4]
 800094e:	883b      	ldrh	r3, [r7, #0]
 8000950:	4413      	add	r3, r2
 8000952:	b29b      	uxth	r3, r3
 8000954:	3b01      	subs	r3, #1
 8000956:	b29a      	uxth	r2, r3
 8000958:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <ili9486_SetDisplayWindow+0xcc>)
 800095a:	801a      	strh	r2, [r3, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 800095c:	202a      	movs	r0, #42	; 0x2a
 800095e:	f000 fbf9 	bl	8001154 <LCD_IO_WriteCmd8>
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	b29b      	uxth	r3, r3
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fc9c 	bl	80012a8 <LCD_IO_WriteData8>
 8000970:	88fb      	ldrh	r3, [r7, #6]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	4618      	mov	r0, r3
 8000976:	f000 fc97 	bl	80012a8 <LCD_IO_WriteData8>
 800097a:	88fa      	ldrh	r2, [r7, #6]
 800097c:	887b      	ldrh	r3, [r7, #2]
 800097e:	4413      	add	r3, r2
 8000980:	3b01      	subs	r3, #1
 8000982:	121b      	asrs	r3, r3, #8
 8000984:	b2db      	uxtb	r3, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fc8e 	bl	80012a8 <LCD_IO_WriteData8>
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	b2da      	uxtb	r2, r3
 8000990:	887b      	ldrh	r3, [r7, #2]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4413      	add	r3, r2
 8000996:	b2db      	uxtb	r3, r3
 8000998:	3b01      	subs	r3, #1
 800099a:	b2db      	uxtb	r3, r3
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fc83 	bl	80012a8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 80009a2:	202b      	movs	r0, #43	; 0x2b
 80009a4:	f000 fbd6 	bl	8001154 <LCD_IO_WriteCmd8>
 80009a8:	88bb      	ldrh	r3, [r7, #4]
 80009aa:	0a1b      	lsrs	r3, r3, #8
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fc79 	bl	80012a8 <LCD_IO_WriteData8>
 80009b6:	88bb      	ldrh	r3, [r7, #4]
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 fc74 	bl	80012a8 <LCD_IO_WriteData8>
 80009c0:	88ba      	ldrh	r2, [r7, #4]
 80009c2:	883b      	ldrh	r3, [r7, #0]
 80009c4:	4413      	add	r3, r2
 80009c6:	3b01      	subs	r3, #1
 80009c8:	121b      	asrs	r3, r3, #8
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fc6b 	bl	80012a8 <LCD_IO_WriteData8>
 80009d2:	88bb      	ldrh	r3, [r7, #4]
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	883b      	ldrh	r3, [r7, #0]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4413      	add	r3, r2
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	3b01      	subs	r3, #1
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fc60 	bl	80012a8 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd90      	pop	{r4, r7, pc}
 80009f0:	2400009e 	.word	0x2400009e
 80009f4:	240000a0 	.word	0x240000a0

080009f8 <ili9486_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9486_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4604      	mov	r4, r0
 8000a00:	4608      	mov	r0, r1
 8000a02:	4611      	mov	r1, r2
 8000a04:	461a      	mov	r2, r3
 8000a06:	4623      	mov	r3, r4
 8000a08:	80fb      	strh	r3, [r7, #6]
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80bb      	strh	r3, [r7, #4]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	807b      	strh	r3, [r7, #2]
 8000a12:	4613      	mov	r3, r2
 8000a14:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 8000a16:	202a      	movs	r0, #42	; 0x2a
 8000a18:	f000 fb9c 	bl	8001154 <LCD_IO_WriteCmd8>
 8000a1c:	88bb      	ldrh	r3, [r7, #4]
 8000a1e:	0a1b      	lsrs	r3, r3, #8
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 fc3f 	bl	80012a8 <LCD_IO_WriteData8>
 8000a2a:	88bb      	ldrh	r3, [r7, #4]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fc3a 	bl	80012a8 <LCD_IO_WriteData8>
 8000a34:	88ba      	ldrh	r2, [r7, #4]
 8000a36:	883b      	ldrh	r3, [r7, #0]
 8000a38:	4413      	add	r3, r2
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	121b      	asrs	r3, r3, #8
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 fc31 	bl	80012a8 <LCD_IO_WriteData8>
 8000a46:	88bb      	ldrh	r3, [r7, #4]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	883b      	ldrh	r3, [r7, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4413      	add	r3, r2
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	3b01      	subs	r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fc26 	bl	80012a8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 8000a5c:	202b      	movs	r0, #43	; 0x2b
 8000a5e:	f000 fb79 	bl	8001154 <LCD_IO_WriteCmd8>
 8000a62:	887b      	ldrh	r3, [r7, #2]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fc1c 	bl	80012a8 <LCD_IO_WriteData8>
 8000a70:	887b      	ldrh	r3, [r7, #2]
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fc17 	bl	80012a8 <LCD_IO_WriteData8>
 8000a7a:	887b      	ldrh	r3, [r7, #2]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 fc10 	bl	80012a8 <LCD_IO_WriteData8>
 8000a88:	887b      	ldrh	r3, [r7, #2]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fc0b 	bl	80012a8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Length);
 8000a92:	883a      	ldrh	r2, [r7, #0]
 8000a94:	88fb      	ldrh	r3, [r7, #6]
 8000a96:	4619      	mov	r1, r3
 8000a98:	202c      	movs	r0, #44	; 0x2c
 8000a9a:	f000 fdd1 	bl	8001640 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd90      	pop	{r4, r7, pc}

08000aa6 <ili9486_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9486_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8000aa6:	b590      	push	{r4, r7, lr}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4604      	mov	r4, r0
 8000aae:	4608      	mov	r0, r1
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4623      	mov	r3, r4
 8000ab6:	80fb      	strh	r3, [r7, #6]
 8000ab8:	4603      	mov	r3, r0
 8000aba:	80bb      	strh	r3, [r7, #4]
 8000abc:	460b      	mov	r3, r1
 8000abe:	807b      	strh	r3, [r7, #2]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 8000ac4:	202a      	movs	r0, #42	; 0x2a
 8000ac6:	f000 fb45 	bl	8001154 <LCD_IO_WriteCmd8>
 8000aca:	88bb      	ldrh	r3, [r7, #4]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 fbe8 	bl	80012a8 <LCD_IO_WriteData8>
 8000ad8:	88bb      	ldrh	r3, [r7, #4]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 fbe3 	bl	80012a8 <LCD_IO_WriteData8>
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fbdc 	bl	80012a8 <LCD_IO_WriteData8>
 8000af0:	88bb      	ldrh	r3, [r7, #4]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fbd7 	bl	80012a8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 8000afa:	202b      	movs	r0, #43	; 0x2b
 8000afc:	f000 fb2a 	bl	8001154 <LCD_IO_WriteCmd8>
 8000b00:	887b      	ldrh	r3, [r7, #2]
 8000b02:	0a1b      	lsrs	r3, r3, #8
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 fbcd 	bl	80012a8 <LCD_IO_WriteData8>
 8000b0e:	887b      	ldrh	r3, [r7, #2]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fbc8 	bl	80012a8 <LCD_IO_WriteData8>
 8000b18:	887a      	ldrh	r2, [r7, #2]
 8000b1a:	883b      	ldrh	r3, [r7, #0]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	121b      	asrs	r3, r3, #8
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 fbbf 	bl	80012a8 <LCD_IO_WriteData8>
 8000b2a:	887b      	ldrh	r3, [r7, #2]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	883b      	ldrh	r3, [r7, #0]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	4413      	add	r3, r2
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	3b01      	subs	r3, #1
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 fbb4 	bl	80012a8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Length);
 8000b40:	883a      	ldrh	r2, [r7, #0]
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	4619      	mov	r1, r3
 8000b46:	202c      	movs	r0, #44	; 0x2c
 8000b48:	f000 fd7a 	bl	8001640 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd90      	pop	{r4, r7, pc}

08000b54 <ili9486_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9486_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	4611      	mov	r1, r2
 8000b60:	461a      	mov	r2, r3
 8000b62:	4623      	mov	r3, r4
 8000b64:	80fb      	strh	r3, [r7, #6]
 8000b66:	4603      	mov	r3, r0
 8000b68:	80bb      	strh	r3, [r7, #4]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	807b      	strh	r3, [r7, #2]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8000b72:	202a      	movs	r0, #42	; 0x2a
 8000b74:	f000 faee 	bl	8001154 <LCD_IO_WriteCmd8>
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fb91 	bl	80012a8 <LCD_IO_WriteData8>
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 fb8c 	bl	80012a8 <LCD_IO_WriteData8>
 8000b90:	88fa      	ldrh	r2, [r7, #6]
 8000b92:	887b      	ldrh	r3, [r7, #2]
 8000b94:	4413      	add	r3, r2
 8000b96:	3b01      	subs	r3, #1
 8000b98:	121b      	asrs	r3, r3, #8
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 fb83 	bl	80012a8 <LCD_IO_WriteData8>
 8000ba2:	88fb      	ldrh	r3, [r7, #6]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4413      	add	r3, r2
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 fb78 	bl	80012a8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8000bb8:	202b      	movs	r0, #43	; 0x2b
 8000bba:	f000 facb 	bl	8001154 <LCD_IO_WriteCmd8>
 8000bbe:	88bb      	ldrh	r3, [r7, #4]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 fb6e 	bl	80012a8 <LCD_IO_WriteData8>
 8000bcc:	88bb      	ldrh	r3, [r7, #4]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 fb69 	bl	80012a8 <LCD_IO_WriteData8>
 8000bd6:	88ba      	ldrh	r2, [r7, #4]
 8000bd8:	883b      	ldrh	r3, [r7, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	121b      	asrs	r3, r3, #8
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fb60 	bl	80012a8 <LCD_IO_WriteData8>
 8000be8:	88bb      	ldrh	r3, [r7, #4]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	883b      	ldrh	r3, [r7, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 fb55 	bl	80012a8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Xsize * Ysize);
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	883a      	ldrh	r2, [r7, #0]
 8000c02:	fb02 f303 	mul.w	r3, r2, r3
 8000c06:	461a      	mov	r2, r3
 8000c08:	8b3b      	ldrh	r3, [r7, #24]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	202c      	movs	r0, #44	; 0x2c
 8000c0e:	f000 fd17 	bl	8001640 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd90      	pop	{r4, r7, pc}
	...

08000c1c <ili9486_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9486_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	603a      	str	r2, [r7, #0]
 8000c26:	80fb      	strh	r3, [r7, #6]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	80bb      	strh	r3, [r7, #4]
  uint32_t index, size;
  /* Read bitmap size */
  size = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfSize;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000c32:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfOffBits;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8000c3a:	60bb      	str	r3, [r7, #8]
  size = (size - index) / 2;
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	085b      	lsrs	r3, r3, #1
 8000c44:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 8000c46:	683a      	ldr	r2, [r7, #0]
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	603b      	str	r3, [r7, #0]

  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_UP);
 8000c4e:	2036      	movs	r0, #54	; 0x36
 8000c50:	f000 fa80 	bl	8001154 <LCD_IO_WriteCmd8>
 8000c54:	2068      	movs	r0, #104	; 0x68
 8000c56:	f000 fb27 	bl	80012a8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(ILI9486_SIZE_Y - 1 - yEnd); LCD_IO_WriteData16_to_2x8(ILI9486_SIZE_Y - 1 - yStart);
 8000c5a:	202b      	movs	r0, #43	; 0x2b
 8000c5c:	f000 fa7a 	bl	8001154 <LCD_IO_WriteCmd8>
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <ili9486_DrawBitmap+0xb4>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	f240 133f 	movw	r3, #319	; 0x13f
 8000c6a:	1a9b      	subs	r3, r3, r2
 8000c6c:	121b      	asrs	r3, r3, #8
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fb19 	bl	80012a8 <LCD_IO_WriteData8>
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <ili9486_DrawBitmap+0xb4>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 fb10 	bl	80012a8 <LCD_IO_WriteData8>
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <ili9486_DrawBitmap+0xb8>)
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	f240 133f 	movw	r3, #319	; 0x13f
 8000c92:	1a9b      	subs	r3, r3, r2
 8000c94:	121b      	asrs	r3, r3, #8
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 fb05 	bl	80012a8 <LCD_IO_WriteData8>
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <ili9486_DrawBitmap+0xb8>)
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 fafc 	bl	80012a8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9486_RAMWR, (uint16_t *)pbmp, size);
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	6839      	ldr	r1, [r7, #0]
 8000cb4:	202c      	movs	r0, #44	; 0x2c
 8000cb6:	f000 ffcb 	bl	8001c50 <LCD_IO_WriteCmd8MultipleData16>
  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_DOWN);
 8000cba:	2036      	movs	r0, #54	; 0x36
 8000cbc:	f000 fa4a 	bl	8001154 <LCD_IO_WriteCmd8>
 8000cc0:	2028      	movs	r0, #40	; 0x28
 8000cc2:	f000 faf1 	bl	80012a8 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	240000a0 	.word	0x240000a0
 8000cd4:	2400009e 	.word	0x2400009e

08000cd8 <ili9486_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9486_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4623      	mov	r3, r4
 8000ce8:	80fb      	strh	r3, [r7, #6]
 8000cea:	4603      	mov	r3, r0
 8000cec:	80bb      	strh	r3, [r7, #4]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	807b      	strh	r3, [r7, #2]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	803b      	strh	r3, [r7, #0]
  ili9486_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000cf6:	883b      	ldrh	r3, [r7, #0]
 8000cf8:	887a      	ldrh	r2, [r7, #2]
 8000cfa:	88b9      	ldrh	r1, [r7, #4]
 8000cfc:	88f8      	ldrh	r0, [r7, #6]
 8000cfe:	f7ff fe13 	bl	8000928 <ili9486_SetDisplayWindow>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9486_RAMWR, pData, Xsize * Ysize);
 8000d02:	887b      	ldrh	r3, [r7, #2]
 8000d04:	883a      	ldrh	r2, [r7, #0]
 8000d06:	fb02 f303 	mul.w	r3, r2, r3
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	69b9      	ldr	r1, [r7, #24]
 8000d0e:	202c      	movs	r0, #44	; 0x2c
 8000d10:	f000 ff9e 	bl	8001c50 <LCD_IO_WriteCmd8MultipleData16>
  ILI9486_LCDMUTEX_POP();
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd90      	pop	{r4, r7, pc}

08000d1c <ili9486_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9486_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4604      	mov	r4, r0
 8000d24:	4608      	mov	r0, r1
 8000d26:	4611      	mov	r1, r2
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4623      	mov	r3, r4
 8000d2c:	80fb      	strh	r3, [r7, #6]
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80bb      	strh	r3, [r7, #4]
 8000d32:	460b      	mov	r3, r1
 8000d34:	807b      	strh	r3, [r7, #2]
 8000d36:	4613      	mov	r3, r2
 8000d38:	803b      	strh	r3, [r7, #0]
  ili9486_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000d3a:	883b      	ldrh	r3, [r7, #0]
 8000d3c:	887a      	ldrh	r2, [r7, #2]
 8000d3e:	88b9      	ldrh	r1, [r7, #4]
 8000d40:	88f8      	ldrh	r0, [r7, #6]
 8000d42:	f7ff fdf1 	bl	8000928 <ili9486_SetDisplayWindow>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8000d46:	2201      	movs	r2, #1
 8000d48:	490b      	ldr	r1, [pc, #44]	; (8000d78 <ili9486_ReadRGBImage+0x5c>)
 8000d4a:	203a      	movs	r0, #58	; 0x3a
 8000d4c:	f000 fe46 	bl	80019dc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9486_RAMRD, pData, Xsize * Ysize, 1);
 8000d50:	887b      	ldrh	r3, [r7, #2]
 8000d52:	883a      	ldrh	r2, [r7, #0]
 8000d54:	fb02 f303 	mul.w	r3, r2, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	69b9      	ldr	r1, [r7, #24]
 8000d5e:	202e      	movs	r0, #46	; 0x2e
 8000d60:	f001 fae6 	bl	8002330 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 8000d64:	2201      	movs	r2, #1
 8000d66:	4905      	ldr	r1, [pc, #20]	; (8000d7c <ili9486_ReadRGBImage+0x60>)
 8000d68:	203a      	movs	r0, #58	; 0x3a
 8000d6a:	f000 fe37 	bl	80019dc <LCD_IO_WriteCmd8MultipleData8>
  ILI9486_LCDMUTEX_POP();
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	bf00      	nop
 8000d78:	08007eb0 	.word	0x08007eb0
 8000d7c:	08007e80 	.word	0x08007e80

08000d80 <ili9486_WriteChar>:

/* FontWrite cat cat by owlhor*/
void ili9486_WriteChar(uint16_t Xpo, uint16_t Ypo, char chr,sFONT fonto, uint16_t RGB_Coder){
 8000d80:	b082      	sub	sp, #8
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80fb      	strh	r3, [r7, #6]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	80bb      	strh	r3, [r7, #4]
 8000d92:	4613      	mov	r3, r2
 8000d94:	70fb      	strb	r3, [r7, #3]
	uint8_t i,j = 0; //// ij is sizeof char table, b is start pos at fonttable & data in font
 8000d96:	2300      	movs	r3, #0
 8000d98:	75bb      	strb	r3, [r7, #22]
	 * b = (char ASCII Code * high * row per jump) --> Sorting start position
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */
	//// find num of bit rows per jump in fonts.c
	int rowbox = roundf((float)(fonto.Width) / 8);
 8000d9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d9c:	ee07 3a90 	vmov	s15, r3
 8000da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000da4:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000da8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000dac:	eeb0 0a47 	vmov.f32	s0, s14
 8000db0:	f007 f834 	bl	8007e1c <roundf>
 8000db4:	eef0 7a40 	vmov.f32	s15, s0
 8000db8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dbc:	ee17 3a90 	vmov	r3, s15
 8000dc0:	60fb      	str	r3, [r7, #12]
	//int rowbox = (fonto.Width / 8) + 1;
	//// double for loop as one char table
	for(i = 0; i < fonto.Height; i++){
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	75fb      	strb	r3, [r7, #23]
 8000dc6:	e045      	b.n	8000e54 <ili9486_WriteChar+0xd4>
		//// -32 to offset sync ASCII Table start " " at 32

		//// Load data 1 column per loop
		//b = fonto.table[((chr - 31) * fonto.Height * rowbox)+ (i*rowbox)];

		for(int k = 0;k < rowbox;k++){
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	e01a      	b.n	8000e04 <ili9486_WriteChar+0x84>
			bu32.b8[k] = fonto.table[((chr - 32) * fonto.Height * rowbox)+ (i*rowbox) + k];
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	78fa      	ldrb	r2, [r7, #3]
 8000dd2:	3a20      	subs	r2, #32
 8000dd4:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000dd6:	fb01 f202 	mul.w	r2, r1, r2
 8000dda:	68f9      	ldr	r1, [r7, #12]
 8000ddc:	fb02 f101 	mul.w	r1, r2, r1
 8000de0:	7dfa      	ldrb	r2, [r7, #23]
 8000de2:	68f8      	ldr	r0, [r7, #12]
 8000de4:	fb00 f202 	mul.w	r2, r0, r2
 8000de8:	4411      	add	r1, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	440a      	add	r2, r1
 8000dee:	4413      	add	r3, r2
 8000df0:	7819      	ldrb	r1, [r3, #0]
 8000df2:	f107 0208 	add.w	r2, r7, #8
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4413      	add	r3, r2
 8000dfa:	460a      	mov	r2, r1
 8000dfc:	701a      	strb	r2, [r3, #0]
		for(int k = 0;k < rowbox;k++){
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	3301      	adds	r3, #1
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	dbe0      	blt.n	8000dce <ili9486_WriteChar+0x4e>
//			b = (b << (int)(8 * k)) & (fonto.table[((chr - 32) * fonto.Height * rowbox) + (i*rowbox) + k]);

		}


		for(j = 0; j < fonto.Width; j++){
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	75bb      	strb	r3, [r7, #22]
 8000e10:	e018      	b.n	8000e44 <ili9486_WriteChar+0xc4>
			//// if valuein fonttable is 1
			//// (b << j) & 0x80 -> seek at MSB First
			if((bu32.b32 << j) & 0x8000){
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	7dbb      	ldrb	r3, [r7, #22]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d00d      	beq.n	8000e3e <ili9486_WriteChar+0xbe>
			//if((b << j) & 0x8000){
				ili9486_WritePixel(j + Xpo, Ypo + i, RGB_Coder);
 8000e22:	7dbb      	ldrb	r3, [r7, #22]
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	4413      	add	r3, r2
 8000e2a:	b298      	uxth	r0, r3
 8000e2c:	7dfb      	ldrb	r3, [r7, #23]
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	88bb      	ldrh	r3, [r7, #4]
 8000e32:	4413      	add	r3, r2
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f7ff fcd3 	bl	80007e4 <ili9486_WritePixel>
		for(j = 0; j < fonto.Width; j++){
 8000e3e:	7dbb      	ldrb	r3, [r7, #22]
 8000e40:	3301      	adds	r3, #1
 8000e42:	75bb      	strb	r3, [r7, #22]
 8000e44:	7dbb      	ldrb	r3, [r7, #22]
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d3e1      	bcc.n	8000e12 <ili9486_WriteChar+0x92>
	for(i = 0; i < fonto.Height; i++){
 8000e4e:	7dfb      	ldrb	r3, [r7, #23]
 8000e50:	3301      	adds	r3, #1
 8000e52:	75fb      	strb	r3, [r7, #23]
 8000e54:	7dfb      	ldrb	r3, [r7, #23]
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d3b4      	bcc.n	8000dc8 <ili9486_WriteChar+0x48>
			}

		}
	}
}
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e6a:	b002      	add	sp, #8
 8000e6c:	4770      	bx	lr
	...

08000e70 <ili9486_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9486_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	80fb      	strh	r3, [r7, #6]
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	80bb      	strh	r3, [r7, #4]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9486_ORIENTATION == 1)
  if((TopFix != scrparam[1]) || (BottonFix != scrparam[3]))
 8000e82:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <ili9486_Scroll+0xb8>)
 8000e84:	885b      	ldrh	r3, [r3, #2]
 8000e86:	88ba      	ldrh	r2, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d104      	bne.n	8000e96 <ili9486_Scroll+0x26>
 8000e8c:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <ili9486_Scroll+0xb8>)
 8000e8e:	88db      	ldrh	r3, [r3, #6]
 8000e90:	887a      	ldrh	r2, [r7, #2]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d013      	beq.n	8000ebe <ili9486_Scroll+0x4e>
  {
    scrparam[1] = TopFix;
 8000e96:	4a24      	ldr	r2, [pc, #144]	; (8000f28 <ili9486_Scroll+0xb8>)
 8000e98:	88bb      	ldrh	r3, [r7, #4]
 8000e9a:	8053      	strh	r3, [r2, #2]
    scrparam[3] = BottonFix;
 8000e9c:	4a22      	ldr	r2, [pc, #136]	; (8000f28 <ili9486_Scroll+0xb8>)
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	80d3      	strh	r3, [r2, #6]
    scrparam[2] = ILI9486_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 8000ea2:	88ba      	ldrh	r2, [r7, #4]
 8000ea4:	887b      	ldrh	r3, [r7, #2]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <ili9486_Scroll+0xb8>)
 8000eb2:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9486_VSCRDEF, &scrparam[1], 3);
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	491d      	ldr	r1, [pc, #116]	; (8000f2c <ili9486_Scroll+0xbc>)
 8000eb8:	2033      	movs	r0, #51	; 0x33
 8000eba:	f000 fec9 	bl	8001c50 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll = (0 - Scroll) % scrparam[2];
 8000ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ec2:	425b      	negs	r3, r3
 8000ec4:	4a18      	ldr	r2, [pc, #96]	; (8000f28 <ili9486_Scroll+0xb8>)
 8000ec6:	8892      	ldrh	r2, [r2, #4]
 8000ec8:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ecc:	fb01 f202 	mul.w	r2, r1, r2
 8000ed0:	1a9b      	subs	r3, r3, r2
 8000ed2:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8000ed4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	da0a      	bge.n	8000ef2 <ili9486_Scroll+0x82>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <ili9486_Scroll+0xb8>)
 8000ede:	889a      	ldrh	r2, [r3, #4]
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <ili9486_Scroll+0xb8>)
 8000ee8:	885b      	ldrh	r3, [r3, #2]
 8000eea:	4413      	add	r3, r2
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	80fb      	strh	r3, [r7, #6]
 8000ef0:	e005      	b.n	8000efe <ili9486_Scroll+0x8e>
  else
    Scroll = Scroll + scrparam[1];
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <ili9486_Scroll+0xb8>)
 8000ef4:	885a      	ldrh	r2, [r3, #2]
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	4413      	add	r3, r2
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #endif
  if(Scroll != scrparam[0])
 8000efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f02:	4a09      	ldr	r2, [pc, #36]	; (8000f28 <ili9486_Scroll+0xb8>)
 8000f04:	8812      	ldrh	r2, [r2, #0]
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d009      	beq.n	8000f1e <ili9486_Scroll+0xae>
  {
    scrparam[0] = Scroll;
 8000f0a:	88fa      	ldrh	r2, [r7, #6]
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <ili9486_Scroll+0xb8>)
 8000f0e:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9486_VSCRSADD, scrparam[0], 1);
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <ili9486_Scroll+0xb8>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	2201      	movs	r2, #1
 8000f16:	4619      	mov	r1, r3
 8000f18:	2037      	movs	r0, #55	; 0x37
 8000f1a:	f000 fb91 	bl	8001640 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9486_LCDMUTEX_POP();
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	240000a4 	.word	0x240000a4
 8000f2c:	240000a6 	.word	0x240000a6

08000f30 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  while(c--);
 8000f38:	bf00      	nop
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	1e5a      	subs	r2, r3, #1
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1fa      	bne.n	8000f3a <LCD_IO_Delay+0xa>
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <LCD_Delay>:
#pragma pop
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f002 fcdc 	bl	8003918 <HAL_Delay>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
    GPIOX_CLR(LCD_BL);
  else
    GPIOX_SET(LCD_BL);
  #endif
  #endif
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  #define GPIOX_CLOCK_LCD_RD    GPIOX_CLOCK(LCD_RD)
  #else
  #define GPIOX_CLOCK_LCD_RD    0
  #endif

  RCC->AHB4ENR |= (GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_WR) |
 8000f84:	4b6c      	ldr	r3, [pc, #432]	; (8001138 <LCD_IO_Init+0x1b8>)
 8000f86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f8a:	4a6b      	ldr	r2, [pc, #428]	; (8001138 <LCD_IO_Init+0x1b8>)
 8000f8c:	f043 035f 	orr.w	r3, r3, #95	; 0x5f
 8000f90:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
                   GPIOX_CLOCK(LCD_D0) | GPIOX_CLOCK(LCD_D1) | GPIOX_CLOCK(LCD_D2) | GPIOX_CLOCK(LCD_D3) |
                   GPIOX_CLOCK(LCD_D4) | GPIOX_CLOCK(LCD_D5) | GPIOX_CLOCK(LCD_D6) | GPIOX_CLOCK(LCD_D7) |
                   GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_RD);

  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_RST_OFF;                          /* RST = 1 */
 8000f94:	4b69      	ldr	r3, [pc, #420]	; (800113c <LCD_IO_Init+0x1bc>)
 8000f96:	2204      	movs	r2, #4
 8000f98:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8000f9a:	4b68      	ldr	r3, [pc, #416]	; (800113c <LCD_IO_Init+0x1bc>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fa2:	4a66      	ldr	r2, [pc, #408]	; (800113c <LCD_IO_Init+0x1bc>)
 8000fa4:	f043 0310 	orr.w	r3, r3, #16
 8000fa8:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_BL) = LCD_BLON;
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  GPIOX_SET(LCD_CS);                    /* CS = 1 */
 8000faa:	4b65      	ldr	r3, [pc, #404]	; (8001140 <LCD_IO_Init+0x1c0>)
 8000fac:	2202      	movs	r2, #2
 8000fae:	619a      	str	r2, [r3, #24]
  LCD_RS_DATA;                          /* RS = 1 */
 8000fb0:	4b62      	ldr	r3, [pc, #392]	; (800113c <LCD_IO_Init+0x1bc>)
 8000fb2:	2208      	movs	r2, #8
 8000fb4:	619a      	str	r2, [r3, #24]
  GPIOX_SET(LCD_WR);                    /* WR = 1 */
 8000fb6:	4b61      	ldr	r3, [pc, #388]	; (800113c <LCD_IO_Init+0x1bc>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	619a      	str	r2, [r3, #24]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_SET(LCD_RD);                    /* RD = 1 */
 8000fbc:	4b61      	ldr	r3, [pc, #388]	; (8001144 <LCD_IO_Init+0x1c4>)
 8000fbe:	2208      	movs	r2, #8
 8000fc0:	619a      	str	r2, [r3, #24]
  #endif

  GPIOX_MODER(MODE_OUT, LCD_CS);
 8000fc2:	4b5f      	ldr	r3, [pc, #380]	; (8001140 <LCD_IO_Init+0x1c0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f023 030c 	bic.w	r3, r3, #12
 8000fca:	4a5d      	ldr	r2, [pc, #372]	; (8001140 <LCD_IO_Init+0x1c0>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8000fd2:	4b5a      	ldr	r3, [pc, #360]	; (800113c <LCD_IO_Init+0x1bc>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000fda:	4a58      	ldr	r2, [pc, #352]	; (800113c <LCD_IO_Init+0x1bc>)
 8000fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe0:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_WR);
 8000fe2:	4b56      	ldr	r3, [pc, #344]	; (800113c <LCD_IO_Init+0x1bc>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f023 0303 	bic.w	r3, r3, #3
 8000fea:	4a54      	ldr	r2, [pc, #336]	; (800113c <LCD_IO_Init+0x1bc>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RD);
 8000ff2:	4b54      	ldr	r3, [pc, #336]	; (8001144 <LCD_IO_Init+0x1c4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000ffa:	4a52      	ldr	r2, [pc, #328]	; (8001144 <LCD_IO_Init+0x1c4>)
 8000ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001000:	6013      	str	r3, [r2, #0]
  #endif

  LCD_DIRWRITE;                         /* data pins set the output direction */
 8001002:	4b51      	ldr	r3, [pc, #324]	; (8001148 <LCD_IO_Init+0x1c8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800100a:	4a4f      	ldr	r2, [pc, #316]	; (8001148 <LCD_IO_Init+0x1c8>)
 800100c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	4b4e      	ldr	r3, [pc, #312]	; (800114c <LCD_IO_Init+0x1cc>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800101a:	4a4c      	ldr	r2, [pc, #304]	; (800114c <LCD_IO_Init+0x1cc>)
 800101c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	4b49      	ldr	r3, [pc, #292]	; (8001148 <LCD_IO_Init+0x1c8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800102a:	4a47      	ldr	r2, [pc, #284]	; (8001148 <LCD_IO_Init+0x1c8>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	4b47      	ldr	r3, [pc, #284]	; (8001150 <LCD_IO_Init+0x1d0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800103a:	4a45      	ldr	r2, [pc, #276]	; (8001150 <LCD_IO_Init+0x1d0>)
 800103c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	4b43      	ldr	r3, [pc, #268]	; (8001150 <LCD_IO_Init+0x1d0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800104a:	4a41      	ldr	r2, [pc, #260]	; (8001150 <LCD_IO_Init+0x1d0>)
 800104c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	4b3f      	ldr	r3, [pc, #252]	; (8001150 <LCD_IO_Init+0x1d0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800105a:	4a3d      	ldr	r2, [pc, #244]	; (8001150 <LCD_IO_Init+0x1d0>)
 800105c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	4b38      	ldr	r3, [pc, #224]	; (8001144 <LCD_IO_Init+0x1c4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800106a:	4a36      	ldr	r2, [pc, #216]	; (8001144 <LCD_IO_Init+0x1c4>)
 800106c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	4b35      	ldr	r3, [pc, #212]	; (8001148 <LCD_IO_Init+0x1c8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800107a:	4a33      	ldr	r2, [pc, #204]	; (8001148 <LCD_IO_Init+0x1c8>)
 800107c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001080:	6013      	str	r3, [r2, #0]

  /* GPIO speed */
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8001082:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <LCD_IO_Init+0x1c0>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	4a2e      	ldr	r2, [pc, #184]	; (8001140 <LCD_IO_Init+0x1c0>)
 8001088:	f043 030c 	orr.w	r3, r3, #12
 800108c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 800108e:	4b2b      	ldr	r3, [pc, #172]	; (800113c <LCD_IO_Init+0x1bc>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	4a2a      	ldr	r2, [pc, #168]	; (800113c <LCD_IO_Init+0x1bc>)
 8001094:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001098:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_WR);
 800109a:	4b28      	ldr	r3, [pc, #160]	; (800113c <LCD_IO_Init+0x1bc>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	4a27      	ldr	r2, [pc, #156]	; (800113c <LCD_IO_Init+0x1bc>)
 80010a0:	f043 0303 	orr.w	r3, r3, #3
 80010a4:	6093      	str	r3, [r2, #8]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RD);
 80010a6:	4b27      	ldr	r3, [pc, #156]	; (8001144 <LCD_IO_Init+0x1c4>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	4a26      	ldr	r2, [pc, #152]	; (8001144 <LCD_IO_Init+0x1c4>)
 80010ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010b0:	6093      	str	r3, [r2, #8]
  #endif
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D0);
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <LCD_IO_Init+0x1c8>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	4a24      	ldr	r2, [pc, #144]	; (8001148 <LCD_IO_Init+0x1c8>)
 80010b8:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80010bc:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D1);
 80010be:	4b23      	ldr	r3, [pc, #140]	; (800114c <LCD_IO_Init+0x1cc>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	4a22      	ldr	r2, [pc, #136]	; (800114c <LCD_IO_Init+0x1cc>)
 80010c4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80010c8:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D2);
 80010ca:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <LCD_IO_Init+0x1c8>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	4a1e      	ldr	r2, [pc, #120]	; (8001148 <LCD_IO_Init+0x1c8>)
 80010d0:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80010d4:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D3);
 80010d6:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <LCD_IO_Init+0x1d0>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <LCD_IO_Init+0x1d0>)
 80010dc:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80010e0:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D4);
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <LCD_IO_Init+0x1d0>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	4a1a      	ldr	r2, [pc, #104]	; (8001150 <LCD_IO_Init+0x1d0>)
 80010e8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80010ec:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D5);
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <LCD_IO_Init+0x1d0>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	4a17      	ldr	r2, [pc, #92]	; (8001150 <LCD_IO_Init+0x1d0>)
 80010f4:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80010f8:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D6);
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <LCD_IO_Init+0x1c4>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	4a11      	ldr	r2, [pc, #68]	; (8001144 <LCD_IO_Init+0x1c4>)
 8001100:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001104:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D7);
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <LCD_IO_Init+0x1c8>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <LCD_IO_Init+0x1c8>)
 800110c:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8001110:	6093      	str	r3, [r2, #8]

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 8001112:	2001      	movs	r0, #1
 8001114:	f7ff ff1d 	bl	8000f52 <LCD_Delay>
  LCD_RST_ON;                           /* RST = 0 */
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <LCD_IO_Init+0x1bc>)
 800111a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800111e:	619a      	str	r2, [r3, #24]
  LCD_Delay(1);
 8001120:	2001      	movs	r0, #1
 8001122:	f7ff ff16 	bl	8000f52 <LCD_Delay>
  LCD_RST_OFF;                          /* RST = 1 */
 8001126:	4b05      	ldr	r3, [pc, #20]	; (800113c <LCD_IO_Init+0x1bc>)
 8001128:	2204      	movs	r2, #4
 800112a:	619a      	str	r2, [r3, #24]
  #endif
  LCD_Delay(1);
 800112c:	2001      	movs	r0, #1
 800112e:	f7ff ff10 	bl	8000f52 <LCD_Delay>
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	58024400 	.word	0x58024400
 800113c:	58020800 	.word	0x58020800
 8001140:	58020400 	.word	0x58020400
 8001144:	58020000 	.word	0x58020000
 8001148:	58021800 	.word	0x58021800
 800114c:	58020c00 	.word	0x58020c00
 8001150:	58021000 	.word	0x58021000

08001154 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 800115e:	4b4b      	ldr	r3, [pc, #300]	; (800128c <LCD_IO_WriteCmd8+0x138>)
 8001160:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001164:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8001166:	4b4a      	ldr	r3, [pc, #296]	; (8001290 <LCD_IO_WriteCmd8+0x13c>)
 8001168:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800116c:	619a      	str	r2, [r3, #24]
 800116e:	4a49      	ldr	r2, [pc, #292]	; (8001294 <LCD_IO_WriteCmd8+0x140>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	7013      	strb	r3, [r2, #0]
 8001174:	4b47      	ldr	r3, [pc, #284]	; (8001294 <LCD_IO_WriteCmd8+0x140>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d004      	beq.n	800118a <LCD_IO_WriteCmd8+0x36>
 8001180:	4b45      	ldr	r3, [pc, #276]	; (8001298 <LCD_IO_WriteCmd8+0x144>)
 8001182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001186:	619a      	str	r2, [r3, #24]
 8001188:	e003      	b.n	8001192 <LCD_IO_WriteCmd8+0x3e>
 800118a:	4b43      	ldr	r3, [pc, #268]	; (8001298 <LCD_IO_WriteCmd8+0x144>)
 800118c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001190:	619a      	str	r2, [r3, #24]
 8001192:	4b40      	ldr	r3, [pc, #256]	; (8001294 <LCD_IO_WriteCmd8+0x140>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d004      	beq.n	80011a8 <LCD_IO_WriteCmd8+0x54>
 800119e:	4b3f      	ldr	r3, [pc, #252]	; (800129c <LCD_IO_WriteCmd8+0x148>)
 80011a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011a4:	619a      	str	r2, [r3, #24]
 80011a6:	e003      	b.n	80011b0 <LCD_IO_WriteCmd8+0x5c>
 80011a8:	4b3c      	ldr	r3, [pc, #240]	; (800129c <LCD_IO_WriteCmd8+0x148>)
 80011aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80011ae:	619a      	str	r2, [r3, #24]
 80011b0:	4b38      	ldr	r3, [pc, #224]	; (8001294 <LCD_IO_WriteCmd8+0x140>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <LCD_IO_WriteCmd8+0x72>
 80011bc:	4b36      	ldr	r3, [pc, #216]	; (8001298 <LCD_IO_WriteCmd8+0x144>)
 80011be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011c2:	619a      	str	r2, [r3, #24]
 80011c4:	e003      	b.n	80011ce <LCD_IO_WriteCmd8+0x7a>
 80011c6:	4b34      	ldr	r3, [pc, #208]	; (8001298 <LCD_IO_WriteCmd8+0x144>)
 80011c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011cc:	619a      	str	r2, [r3, #24]
 80011ce:	4b31      	ldr	r3, [pc, #196]	; (8001294 <LCD_IO_WriteCmd8+0x140>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d004      	beq.n	80011e4 <LCD_IO_WriteCmd8+0x90>
 80011da:	4b31      	ldr	r3, [pc, #196]	; (80012a0 <LCD_IO_WriteCmd8+0x14c>)
 80011dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011e0:	619a      	str	r2, [r3, #24]
 80011e2:	e003      	b.n	80011ec <LCD_IO_WriteCmd8+0x98>
 80011e4:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <LCD_IO_WriteCmd8+0x14c>)
 80011e6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80011ea:	619a      	str	r2, [r3, #24]
 80011ec:	4b29      	ldr	r3, [pc, #164]	; (8001294 <LCD_IO_WriteCmd8+0x140>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	f003 0310 	and.w	r3, r3, #16
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d004      	beq.n	8001202 <LCD_IO_WriteCmd8+0xae>
 80011f8:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <LCD_IO_WriteCmd8+0x14c>)
 80011fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011fe:	619a      	str	r2, [r3, #24]
 8001200:	e003      	b.n	800120a <LCD_IO_WriteCmd8+0xb6>
 8001202:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <LCD_IO_WriteCmd8+0x14c>)
 8001204:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001208:	619a      	str	r2, [r3, #24]
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <LCD_IO_WriteCmd8+0x140>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	f003 0320 	and.w	r3, r3, #32
 8001212:	2b00      	cmp	r3, #0
 8001214:	d004      	beq.n	8001220 <LCD_IO_WriteCmd8+0xcc>
 8001216:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <LCD_IO_WriteCmd8+0x14c>)
 8001218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800121c:	619a      	str	r2, [r3, #24]
 800121e:	e003      	b.n	8001228 <LCD_IO_WriteCmd8+0xd4>
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <LCD_IO_WriteCmd8+0x14c>)
 8001222:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001226:	619a      	str	r2, [r3, #24]
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <LCD_IO_WriteCmd8+0x140>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001230:	2b00      	cmp	r3, #0
 8001232:	d004      	beq.n	800123e <LCD_IO_WriteCmd8+0xea>
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <LCD_IO_WriteCmd8+0x150>)
 8001236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800123a:	619a      	str	r2, [r3, #24]
 800123c:	e003      	b.n	8001246 <LCD_IO_WriteCmd8+0xf2>
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <LCD_IO_WriteCmd8+0x150>)
 8001240:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001244:	619a      	str	r2, [r3, #24]
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <LCD_IO_WriteCmd8+0x140>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b25b      	sxtb	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	da04      	bge.n	800125a <LCD_IO_WriteCmd8+0x106>
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <LCD_IO_WriteCmd8+0x144>)
 8001252:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001256:	619a      	str	r2, [r3, #24]
 8001258:	e003      	b.n	8001262 <LCD_IO_WriteCmd8+0x10e>
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <LCD_IO_WriteCmd8+0x144>)
 800125c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001260:	619a      	str	r2, [r3, #24]
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <LCD_IO_WriteCmd8+0x13c>)
 8001264:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001268:	619a      	str	r2, [r3, #24]
 800126a:	2008      	movs	r0, #8
 800126c:	f7ff fe60 	bl	8000f30 <LCD_IO_Delay>
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <LCD_IO_WriteCmd8+0x13c>)
 8001272:	2201      	movs	r2, #1
 8001274:	619a      	str	r2, [r3, #24]
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <LCD_IO_WriteCmd8+0x13c>)
 8001278:	2208      	movs	r2, #8
 800127a:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <LCD_IO_WriteCmd8+0x138>)
 800127e:	2202      	movs	r2, #2
 8001280:	619a      	str	r2, [r3, #24]
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	58020400 	.word	0x58020400
 8001290:	58020800 	.word	0x58020800
 8001294:	240000ac 	.word	0x240000ac
 8001298:	58021800 	.word	0x58021800
 800129c:	58020c00 	.word	0x58020c00
 80012a0:	58021000 	.word	0x58021000
 80012a4:	58020000 	.word	0x58020000

080012a8 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <LCD_IO_WriteData8+0x128>)
 80012b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012b8:	619a      	str	r2, [r3, #24]
  LCD_DATA8_WRITE(Data);
 80012ba:	4a46      	ldr	r2, [pc, #280]	; (80013d4 <LCD_IO_WriteData8+0x12c>)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	7013      	strb	r3, [r2, #0]
 80012c0:	4b44      	ldr	r3, [pc, #272]	; (80013d4 <LCD_IO_WriteData8+0x12c>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <LCD_IO_WriteData8+0x2e>
 80012cc:	4b42      	ldr	r3, [pc, #264]	; (80013d8 <LCD_IO_WriteData8+0x130>)
 80012ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d2:	619a      	str	r2, [r3, #24]
 80012d4:	e003      	b.n	80012de <LCD_IO_WriteData8+0x36>
 80012d6:	4b40      	ldr	r3, [pc, #256]	; (80013d8 <LCD_IO_WriteData8+0x130>)
 80012d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012dc:	619a      	str	r2, [r3, #24]
 80012de:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <LCD_IO_WriteData8+0x12c>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d004      	beq.n	80012f4 <LCD_IO_WriteData8+0x4c>
 80012ea:	4b3c      	ldr	r3, [pc, #240]	; (80013dc <LCD_IO_WriteData8+0x134>)
 80012ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012f0:	619a      	str	r2, [r3, #24]
 80012f2:	e003      	b.n	80012fc <LCD_IO_WriteData8+0x54>
 80012f4:	4b39      	ldr	r3, [pc, #228]	; (80013dc <LCD_IO_WriteData8+0x134>)
 80012f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80012fa:	619a      	str	r2, [r3, #24]
 80012fc:	4b35      	ldr	r3, [pc, #212]	; (80013d4 <LCD_IO_WriteData8+0x12c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	d004      	beq.n	8001312 <LCD_IO_WriteData8+0x6a>
 8001308:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <LCD_IO_WriteData8+0x130>)
 800130a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130e:	619a      	str	r2, [r3, #24]
 8001310:	e003      	b.n	800131a <LCD_IO_WriteData8+0x72>
 8001312:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <LCD_IO_WriteData8+0x130>)
 8001314:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001318:	619a      	str	r2, [r3, #24]
 800131a:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <LCD_IO_WriteData8+0x12c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	2b00      	cmp	r3, #0
 8001324:	d004      	beq.n	8001330 <LCD_IO_WriteData8+0x88>
 8001326:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <LCD_IO_WriteData8+0x138>)
 8001328:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800132c:	619a      	str	r2, [r3, #24]
 800132e:	e003      	b.n	8001338 <LCD_IO_WriteData8+0x90>
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <LCD_IO_WriteData8+0x138>)
 8001332:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001336:	619a      	str	r2, [r3, #24]
 8001338:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <LCD_IO_WriteData8+0x12c>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	2b00      	cmp	r3, #0
 8001342:	d004      	beq.n	800134e <LCD_IO_WriteData8+0xa6>
 8001344:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <LCD_IO_WriteData8+0x138>)
 8001346:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800134a:	619a      	str	r2, [r3, #24]
 800134c:	e003      	b.n	8001356 <LCD_IO_WriteData8+0xae>
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <LCD_IO_WriteData8+0x138>)
 8001350:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001354:	619a      	str	r2, [r3, #24]
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <LCD_IO_WriteData8+0x12c>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	f003 0320 	and.w	r3, r3, #32
 800135e:	2b00      	cmp	r3, #0
 8001360:	d004      	beq.n	800136c <LCD_IO_WriteData8+0xc4>
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <LCD_IO_WriteData8+0x138>)
 8001364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001368:	619a      	str	r2, [r3, #24]
 800136a:	e003      	b.n	8001374 <LCD_IO_WriteData8+0xcc>
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <LCD_IO_WriteData8+0x138>)
 800136e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001372:	619a      	str	r2, [r3, #24]
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <LCD_IO_WriteData8+0x12c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137c:	2b00      	cmp	r3, #0
 800137e:	d004      	beq.n	800138a <LCD_IO_WriteData8+0xe2>
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <LCD_IO_WriteData8+0x13c>)
 8001382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001386:	619a      	str	r2, [r3, #24]
 8001388:	e003      	b.n	8001392 <LCD_IO_WriteData8+0xea>
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <LCD_IO_WriteData8+0x13c>)
 800138c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001390:	619a      	str	r2, [r3, #24]
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <LCD_IO_WriteData8+0x12c>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b25b      	sxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	da04      	bge.n	80013a6 <LCD_IO_WriteData8+0xfe>
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <LCD_IO_WriteData8+0x130>)
 800139e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013a2:	619a      	str	r2, [r3, #24]
 80013a4:	e003      	b.n	80013ae <LCD_IO_WriteData8+0x106>
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <LCD_IO_WriteData8+0x130>)
 80013a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013ac:	619a      	str	r2, [r3, #24]
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <LCD_IO_WriteData8+0x140>)
 80013b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013b4:	619a      	str	r2, [r3, #24]
 80013b6:	2008      	movs	r0, #8
 80013b8:	f7ff fdba 	bl	8000f30 <LCD_IO_Delay>
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <LCD_IO_WriteData8+0x140>)
 80013be:	2201      	movs	r2, #1
 80013c0:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 80013c2:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <LCD_IO_WriteData8+0x128>)
 80013c4:	2202      	movs	r2, #2
 80013c6:	619a      	str	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	58020400 	.word	0x58020400
 80013d4:	240000ac 	.word	0x240000ac
 80013d8:	58021800 	.word	0x58021800
 80013dc:	58020c00 	.word	0x58020c00
 80013e0:	58021000 	.word	0x58021000
 80013e4:	58020000 	.word	0x58020000
 80013e8:	58020800 	.word	0x58020800

080013ec <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
  LCD_CS_ON;
 80013f6:	4b8b      	ldr	r3, [pc, #556]	; (8001624 <LCD_IO_WriteData16+0x238>)
 80013f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013fc:	619a      	str	r2, [r3, #24]
  LCD_DATA16_WRITE(Data);
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	b29b      	uxth	r3, r3
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b88      	ldr	r3, [pc, #544]	; (8001628 <LCD_IO_WriteData16+0x23c>)
 8001408:	701a      	strb	r2, [r3, #0]
 800140a:	4b87      	ldr	r3, [pc, #540]	; (8001628 <LCD_IO_WriteData16+0x23c>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d004      	beq.n	8001420 <LCD_IO_WriteData16+0x34>
 8001416:	4b85      	ldr	r3, [pc, #532]	; (800162c <LCD_IO_WriteData16+0x240>)
 8001418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800141c:	619a      	str	r2, [r3, #24]
 800141e:	e003      	b.n	8001428 <LCD_IO_WriteData16+0x3c>
 8001420:	4b82      	ldr	r3, [pc, #520]	; (800162c <LCD_IO_WriteData16+0x240>)
 8001422:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001426:	619a      	str	r2, [r3, #24]
 8001428:	4b7f      	ldr	r3, [pc, #508]	; (8001628 <LCD_IO_WriteData16+0x23c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d004      	beq.n	800143e <LCD_IO_WriteData16+0x52>
 8001434:	4b7e      	ldr	r3, [pc, #504]	; (8001630 <LCD_IO_WriteData16+0x244>)
 8001436:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800143a:	619a      	str	r2, [r3, #24]
 800143c:	e003      	b.n	8001446 <LCD_IO_WriteData16+0x5a>
 800143e:	4b7c      	ldr	r3, [pc, #496]	; (8001630 <LCD_IO_WriteData16+0x244>)
 8001440:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001444:	619a      	str	r2, [r3, #24]
 8001446:	4b78      	ldr	r3, [pc, #480]	; (8001628 <LCD_IO_WriteData16+0x23c>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	2b00      	cmp	r3, #0
 8001450:	d004      	beq.n	800145c <LCD_IO_WriteData16+0x70>
 8001452:	4b76      	ldr	r3, [pc, #472]	; (800162c <LCD_IO_WriteData16+0x240>)
 8001454:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001458:	619a      	str	r2, [r3, #24]
 800145a:	e003      	b.n	8001464 <LCD_IO_WriteData16+0x78>
 800145c:	4b73      	ldr	r3, [pc, #460]	; (800162c <LCD_IO_WriteData16+0x240>)
 800145e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001462:	619a      	str	r2, [r3, #24]
 8001464:	4b70      	ldr	r3, [pc, #448]	; (8001628 <LCD_IO_WriteData16+0x23c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	2b00      	cmp	r3, #0
 800146e:	d004      	beq.n	800147a <LCD_IO_WriteData16+0x8e>
 8001470:	4b70      	ldr	r3, [pc, #448]	; (8001634 <LCD_IO_WriteData16+0x248>)
 8001472:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001476:	619a      	str	r2, [r3, #24]
 8001478:	e003      	b.n	8001482 <LCD_IO_WriteData16+0x96>
 800147a:	4b6e      	ldr	r3, [pc, #440]	; (8001634 <LCD_IO_WriteData16+0x248>)
 800147c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001480:	619a      	str	r2, [r3, #24]
 8001482:	4b69      	ldr	r3, [pc, #420]	; (8001628 <LCD_IO_WriteData16+0x23c>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	2b00      	cmp	r3, #0
 800148c:	d004      	beq.n	8001498 <LCD_IO_WriteData16+0xac>
 800148e:	4b69      	ldr	r3, [pc, #420]	; (8001634 <LCD_IO_WriteData16+0x248>)
 8001490:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001494:	619a      	str	r2, [r3, #24]
 8001496:	e003      	b.n	80014a0 <LCD_IO_WriteData16+0xb4>
 8001498:	4b66      	ldr	r3, [pc, #408]	; (8001634 <LCD_IO_WriteData16+0x248>)
 800149a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800149e:	619a      	str	r2, [r3, #24]
 80014a0:	4b61      	ldr	r3, [pc, #388]	; (8001628 <LCD_IO_WriteData16+0x23c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	f003 0320 	and.w	r3, r3, #32
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d004      	beq.n	80014b6 <LCD_IO_WriteData16+0xca>
 80014ac:	4b61      	ldr	r3, [pc, #388]	; (8001634 <LCD_IO_WriteData16+0x248>)
 80014ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014b2:	619a      	str	r2, [r3, #24]
 80014b4:	e003      	b.n	80014be <LCD_IO_WriteData16+0xd2>
 80014b6:	4b5f      	ldr	r3, [pc, #380]	; (8001634 <LCD_IO_WriteData16+0x248>)
 80014b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014bc:	619a      	str	r2, [r3, #24]
 80014be:	4b5a      	ldr	r3, [pc, #360]	; (8001628 <LCD_IO_WriteData16+0x23c>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d004      	beq.n	80014d4 <LCD_IO_WriteData16+0xe8>
 80014ca:	4b5b      	ldr	r3, [pc, #364]	; (8001638 <LCD_IO_WriteData16+0x24c>)
 80014cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014d0:	619a      	str	r2, [r3, #24]
 80014d2:	e003      	b.n	80014dc <LCD_IO_WriteData16+0xf0>
 80014d4:	4b58      	ldr	r3, [pc, #352]	; (8001638 <LCD_IO_WriteData16+0x24c>)
 80014d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014da:	619a      	str	r2, [r3, #24]
 80014dc:	4b52      	ldr	r3, [pc, #328]	; (8001628 <LCD_IO_WriteData16+0x23c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	da04      	bge.n	80014f0 <LCD_IO_WriteData16+0x104>
 80014e6:	4b51      	ldr	r3, [pc, #324]	; (800162c <LCD_IO_WriteData16+0x240>)
 80014e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ec:	619a      	str	r2, [r3, #24]
 80014ee:	e003      	b.n	80014f8 <LCD_IO_WriteData16+0x10c>
 80014f0:	4b4e      	ldr	r3, [pc, #312]	; (800162c <LCD_IO_WriteData16+0x240>)
 80014f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014f6:	619a      	str	r2, [r3, #24]
 80014f8:	4b50      	ldr	r3, [pc, #320]	; (800163c <LCD_IO_WriteData16+0x250>)
 80014fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014fe:	619a      	str	r2, [r3, #24]
 8001500:	2008      	movs	r0, #8
 8001502:	f7ff fd15 	bl	8000f30 <LCD_IO_Delay>
 8001506:	4b4d      	ldr	r3, [pc, #308]	; (800163c <LCD_IO_WriteData16+0x250>)
 8001508:	2201      	movs	r2, #1
 800150a:	619a      	str	r2, [r3, #24]
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b45      	ldr	r3, [pc, #276]	; (8001628 <LCD_IO_WriteData16+0x23c>)
 8001512:	701a      	strb	r2, [r3, #0]
 8001514:	4b44      	ldr	r3, [pc, #272]	; (8001628 <LCD_IO_WriteData16+0x23c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b00      	cmp	r3, #0
 800151e:	d004      	beq.n	800152a <LCD_IO_WriteData16+0x13e>
 8001520:	4b42      	ldr	r3, [pc, #264]	; (800162c <LCD_IO_WriteData16+0x240>)
 8001522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001526:	619a      	str	r2, [r3, #24]
 8001528:	e003      	b.n	8001532 <LCD_IO_WriteData16+0x146>
 800152a:	4b40      	ldr	r3, [pc, #256]	; (800162c <LCD_IO_WriteData16+0x240>)
 800152c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001530:	619a      	str	r2, [r3, #24]
 8001532:	4b3d      	ldr	r3, [pc, #244]	; (8001628 <LCD_IO_WriteData16+0x23c>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d004      	beq.n	8001548 <LCD_IO_WriteData16+0x15c>
 800153e:	4b3c      	ldr	r3, [pc, #240]	; (8001630 <LCD_IO_WriteData16+0x244>)
 8001540:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001544:	619a      	str	r2, [r3, #24]
 8001546:	e003      	b.n	8001550 <LCD_IO_WriteData16+0x164>
 8001548:	4b39      	ldr	r3, [pc, #228]	; (8001630 <LCD_IO_WriteData16+0x244>)
 800154a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800154e:	619a      	str	r2, [r3, #24]
 8001550:	4b35      	ldr	r3, [pc, #212]	; (8001628 <LCD_IO_WriteData16+0x23c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d004      	beq.n	8001566 <LCD_IO_WriteData16+0x17a>
 800155c:	4b33      	ldr	r3, [pc, #204]	; (800162c <LCD_IO_WriteData16+0x240>)
 800155e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001562:	619a      	str	r2, [r3, #24]
 8001564:	e003      	b.n	800156e <LCD_IO_WriteData16+0x182>
 8001566:	4b31      	ldr	r3, [pc, #196]	; (800162c <LCD_IO_WriteData16+0x240>)
 8001568:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800156c:	619a      	str	r2, [r3, #24]
 800156e:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <LCD_IO_WriteData16+0x23c>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b00      	cmp	r3, #0
 8001578:	d004      	beq.n	8001584 <LCD_IO_WriteData16+0x198>
 800157a:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <LCD_IO_WriteData16+0x248>)
 800157c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001580:	619a      	str	r2, [r3, #24]
 8001582:	e003      	b.n	800158c <LCD_IO_WriteData16+0x1a0>
 8001584:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <LCD_IO_WriteData16+0x248>)
 8001586:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800158a:	619a      	str	r2, [r3, #24]
 800158c:	4b26      	ldr	r3, [pc, #152]	; (8001628 <LCD_IO_WriteData16+0x23c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	f003 0310 	and.w	r3, r3, #16
 8001594:	2b00      	cmp	r3, #0
 8001596:	d004      	beq.n	80015a2 <LCD_IO_WriteData16+0x1b6>
 8001598:	4b26      	ldr	r3, [pc, #152]	; (8001634 <LCD_IO_WriteData16+0x248>)
 800159a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800159e:	619a      	str	r2, [r3, #24]
 80015a0:	e003      	b.n	80015aa <LCD_IO_WriteData16+0x1be>
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <LCD_IO_WriteData16+0x248>)
 80015a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015a8:	619a      	str	r2, [r3, #24]
 80015aa:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <LCD_IO_WriteData16+0x23c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	f003 0320 	and.w	r3, r3, #32
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d004      	beq.n	80015c0 <LCD_IO_WriteData16+0x1d4>
 80015b6:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <LCD_IO_WriteData16+0x248>)
 80015b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015bc:	619a      	str	r2, [r3, #24]
 80015be:	e003      	b.n	80015c8 <LCD_IO_WriteData16+0x1dc>
 80015c0:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <LCD_IO_WriteData16+0x248>)
 80015c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015c6:	619a      	str	r2, [r3, #24]
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <LCD_IO_WriteData16+0x23c>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d004      	beq.n	80015de <LCD_IO_WriteData16+0x1f2>
 80015d4:	4b18      	ldr	r3, [pc, #96]	; (8001638 <LCD_IO_WriteData16+0x24c>)
 80015d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015da:	619a      	str	r2, [r3, #24]
 80015dc:	e003      	b.n	80015e6 <LCD_IO_WriteData16+0x1fa>
 80015de:	4b16      	ldr	r3, [pc, #88]	; (8001638 <LCD_IO_WriteData16+0x24c>)
 80015e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015e4:	619a      	str	r2, [r3, #24]
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <LCD_IO_WriteData16+0x23c>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	b25b      	sxtb	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	da04      	bge.n	80015fa <LCD_IO_WriteData16+0x20e>
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <LCD_IO_WriteData16+0x240>)
 80015f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015f6:	619a      	str	r2, [r3, #24]
 80015f8:	e003      	b.n	8001602 <LCD_IO_WriteData16+0x216>
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <LCD_IO_WriteData16+0x240>)
 80015fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001600:	619a      	str	r2, [r3, #24]
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <LCD_IO_WriteData16+0x250>)
 8001604:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001608:	619a      	str	r2, [r3, #24]
 800160a:	2008      	movs	r0, #8
 800160c:	f7ff fc90 	bl	8000f30 <LCD_IO_Delay>
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <LCD_IO_WriteData16+0x250>)
 8001612:	2201      	movs	r2, #1
 8001614:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 8001616:	4b03      	ldr	r3, [pc, #12]	; (8001624 <LCD_IO_WriteData16+0x238>)
 8001618:	2202      	movs	r2, #2
 800161a:	619a      	str	r2, [r3, #24]
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	58020400 	.word	0x58020400
 8001628:	240000ac 	.word	0x240000ac
 800162c:	58021800 	.word	0x58021800
 8001630:	58020c00 	.word	0x58020c00
 8001634:	58021000 	.word	0x58021000
 8001638:	58020000 	.word	0x58020000
 800163c:	58020800 	.word	0x58020800

08001640 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	603a      	str	r2, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
 800164c:	460b      	mov	r3, r1
 800164e:	80bb      	strh	r3, [r7, #4]
  LCD_CS_ON;
 8001650:	4b9a      	ldr	r3, [pc, #616]	; (80018bc <LCD_IO_WriteCmd8DataFill16+0x27c>)
 8001652:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001656:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8001658:	4b99      	ldr	r3, [pc, #612]	; (80018c0 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800165a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800165e:	619a      	str	r2, [r3, #24]
 8001660:	4a98      	ldr	r2, [pc, #608]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	7013      	strb	r3, [r2, #0]
 8001666:	4b97      	ldr	r3, [pc, #604]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d004      	beq.n	800167c <LCD_IO_WriteCmd8DataFill16+0x3c>
 8001672:	4b95      	ldr	r3, [pc, #596]	; (80018c8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001678:	619a      	str	r2, [r3, #24]
 800167a:	e003      	b.n	8001684 <LCD_IO_WriteCmd8DataFill16+0x44>
 800167c:	4b92      	ldr	r3, [pc, #584]	; (80018c8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800167e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001682:	619a      	str	r2, [r3, #24]
 8001684:	4b8f      	ldr	r3, [pc, #572]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d004      	beq.n	800169a <LCD_IO_WriteCmd8DataFill16+0x5a>
 8001690:	4b8e      	ldr	r3, [pc, #568]	; (80018cc <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001692:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001696:	619a      	str	r2, [r3, #24]
 8001698:	e003      	b.n	80016a2 <LCD_IO_WriteCmd8DataFill16+0x62>
 800169a:	4b8c      	ldr	r3, [pc, #560]	; (80018cc <LCD_IO_WriteCmd8DataFill16+0x28c>)
 800169c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80016a0:	619a      	str	r2, [r3, #24]
 80016a2:	4b88      	ldr	r3, [pc, #544]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d004      	beq.n	80016b8 <LCD_IO_WriteCmd8DataFill16+0x78>
 80016ae:	4b86      	ldr	r3, [pc, #536]	; (80018c8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80016b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016b4:	619a      	str	r2, [r3, #24]
 80016b6:	e003      	b.n	80016c0 <LCD_IO_WriteCmd8DataFill16+0x80>
 80016b8:	4b83      	ldr	r3, [pc, #524]	; (80018c8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80016ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016be:	619a      	str	r2, [r3, #24]
 80016c0:	4b80      	ldr	r3, [pc, #512]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d004      	beq.n	80016d6 <LCD_IO_WriteCmd8DataFill16+0x96>
 80016cc:	4b80      	ldr	r3, [pc, #512]	; (80018d0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80016ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d2:	619a      	str	r2, [r3, #24]
 80016d4:	e003      	b.n	80016de <LCD_IO_WriteCmd8DataFill16+0x9e>
 80016d6:	4b7e      	ldr	r3, [pc, #504]	; (80018d0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80016d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016dc:	619a      	str	r2, [r3, #24]
 80016de:	4b79      	ldr	r3, [pc, #484]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d004      	beq.n	80016f4 <LCD_IO_WriteCmd8DataFill16+0xb4>
 80016ea:	4b79      	ldr	r3, [pc, #484]	; (80018d0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80016ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016f0:	619a      	str	r2, [r3, #24]
 80016f2:	e003      	b.n	80016fc <LCD_IO_WriteCmd8DataFill16+0xbc>
 80016f4:	4b76      	ldr	r3, [pc, #472]	; (80018d0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80016f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016fa:	619a      	str	r2, [r3, #24]
 80016fc:	4b71      	ldr	r3, [pc, #452]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	f003 0320 	and.w	r3, r3, #32
 8001704:	2b00      	cmp	r3, #0
 8001706:	d004      	beq.n	8001712 <LCD_IO_WriteCmd8DataFill16+0xd2>
 8001708:	4b71      	ldr	r3, [pc, #452]	; (80018d0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800170a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800170e:	619a      	str	r2, [r3, #24]
 8001710:	e003      	b.n	800171a <LCD_IO_WriteCmd8DataFill16+0xda>
 8001712:	4b6f      	ldr	r3, [pc, #444]	; (80018d0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001714:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001718:	619a      	str	r2, [r3, #24]
 800171a:	4b6a      	ldr	r3, [pc, #424]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001722:	2b00      	cmp	r3, #0
 8001724:	d004      	beq.n	8001730 <LCD_IO_WriteCmd8DataFill16+0xf0>
 8001726:	4b6b      	ldr	r3, [pc, #428]	; (80018d4 <LCD_IO_WriteCmd8DataFill16+0x294>)
 8001728:	f44f 7280 	mov.w	r2, #256	; 0x100
 800172c:	619a      	str	r2, [r3, #24]
 800172e:	e003      	b.n	8001738 <LCD_IO_WriteCmd8DataFill16+0xf8>
 8001730:	4b68      	ldr	r3, [pc, #416]	; (80018d4 <LCD_IO_WriteCmd8DataFill16+0x294>)
 8001732:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001736:	619a      	str	r2, [r3, #24]
 8001738:	4b62      	ldr	r3, [pc, #392]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b25b      	sxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	da04      	bge.n	800174c <LCD_IO_WriteCmd8DataFill16+0x10c>
 8001742:	4b61      	ldr	r3, [pc, #388]	; (80018c8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001744:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001748:	619a      	str	r2, [r3, #24]
 800174a:	e003      	b.n	8001754 <LCD_IO_WriteCmd8DataFill16+0x114>
 800174c:	4b5e      	ldr	r3, [pc, #376]	; (80018c8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800174e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001752:	619a      	str	r2, [r3, #24]
 8001754:	4b5a      	ldr	r3, [pc, #360]	; (80018c0 <LCD_IO_WriteCmd8DataFill16+0x280>)
 8001756:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800175a:	619a      	str	r2, [r3, #24]
 800175c:	2008      	movs	r0, #8
 800175e:	f7ff fbe7 	bl	8000f30 <LCD_IO_Delay>
 8001762:	4b57      	ldr	r3, [pc, #348]	; (80018c0 <LCD_IO_WriteCmd8DataFill16+0x280>)
 8001764:	2201      	movs	r2, #1
 8001766:	619a      	str	r2, [r3, #24]
 8001768:	4b55      	ldr	r3, [pc, #340]	; (80018c0 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800176a:	2208      	movs	r2, #8
 800176c:	619a      	str	r2, [r3, #24]
  while(Size--)
 800176e:	e11a      	b.n	80019a6 <LCD_IO_WriteCmd8DataFill16+0x366>
  {
    LCD_DATA16_WRITE(Data);
 8001770:	88bb      	ldrh	r3, [r7, #4]
 8001772:	0a1b      	lsrs	r3, r3, #8
 8001774:	b29b      	uxth	r3, r3
 8001776:	b2da      	uxtb	r2, r3
 8001778:	4b52      	ldr	r3, [pc, #328]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800177a:	701a      	strb	r2, [r3, #0]
 800177c:	4b51      	ldr	r3, [pc, #324]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <LCD_IO_WriteCmd8DataFill16+0x152>
 8001788:	4b4f      	ldr	r3, [pc, #316]	; (80018c8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800178a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800178e:	619a      	str	r2, [r3, #24]
 8001790:	e003      	b.n	800179a <LCD_IO_WriteCmd8DataFill16+0x15a>
 8001792:	4b4d      	ldr	r3, [pc, #308]	; (80018c8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001794:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001798:	619a      	str	r2, [r3, #24]
 800179a:	4b4a      	ldr	r3, [pc, #296]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d004      	beq.n	80017b0 <LCD_IO_WriteCmd8DataFill16+0x170>
 80017a6:	4b49      	ldr	r3, [pc, #292]	; (80018cc <LCD_IO_WriteCmd8DataFill16+0x28c>)
 80017a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017ac:	619a      	str	r2, [r3, #24]
 80017ae:	e003      	b.n	80017b8 <LCD_IO_WriteCmd8DataFill16+0x178>
 80017b0:	4b46      	ldr	r3, [pc, #280]	; (80018cc <LCD_IO_WriteCmd8DataFill16+0x28c>)
 80017b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017b6:	619a      	str	r2, [r3, #24]
 80017b8:	4b42      	ldr	r3, [pc, #264]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <LCD_IO_WriteCmd8DataFill16+0x18e>
 80017c4:	4b40      	ldr	r3, [pc, #256]	; (80018c8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80017c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ca:	619a      	str	r2, [r3, #24]
 80017cc:	e003      	b.n	80017d6 <LCD_IO_WriteCmd8DataFill16+0x196>
 80017ce:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80017d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d4:	619a      	str	r2, [r3, #24]
 80017d6:	4b3b      	ldr	r3, [pc, #236]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d004      	beq.n	80017ec <LCD_IO_WriteCmd8DataFill16+0x1ac>
 80017e2:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80017e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017e8:	619a      	str	r2, [r3, #24]
 80017ea:	e003      	b.n	80017f4 <LCD_IO_WriteCmd8DataFill16+0x1b4>
 80017ec:	4b38      	ldr	r3, [pc, #224]	; (80018d0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80017ee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80017f2:	619a      	str	r2, [r3, #24]
 80017f4:	4b33      	ldr	r3, [pc, #204]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	f003 0310 	and.w	r3, r3, #16
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d004      	beq.n	800180a <LCD_IO_WriteCmd8DataFill16+0x1ca>
 8001800:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001802:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001806:	619a      	str	r2, [r3, #24]
 8001808:	e003      	b.n	8001812 <LCD_IO_WriteCmd8DataFill16+0x1d2>
 800180a:	4b31      	ldr	r3, [pc, #196]	; (80018d0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800180c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001810:	619a      	str	r2, [r3, #24]
 8001812:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	f003 0320 	and.w	r3, r3, #32
 800181a:	2b00      	cmp	r3, #0
 800181c:	d004      	beq.n	8001828 <LCD_IO_WriteCmd8DataFill16+0x1e8>
 800181e:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001820:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001824:	619a      	str	r2, [r3, #24]
 8001826:	e003      	b.n	8001830 <LCD_IO_WriteCmd8DataFill16+0x1f0>
 8001828:	4b29      	ldr	r3, [pc, #164]	; (80018d0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800182a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800182e:	619a      	str	r2, [r3, #24]
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001838:	2b00      	cmp	r3, #0
 800183a:	d004      	beq.n	8001846 <LCD_IO_WriteCmd8DataFill16+0x206>
 800183c:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <LCD_IO_WriteCmd8DataFill16+0x294>)
 800183e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001842:	619a      	str	r2, [r3, #24]
 8001844:	e003      	b.n	800184e <LCD_IO_WriteCmd8DataFill16+0x20e>
 8001846:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <LCD_IO_WriteCmd8DataFill16+0x294>)
 8001848:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800184c:	619a      	str	r2, [r3, #24]
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b25b      	sxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	da04      	bge.n	8001862 <LCD_IO_WriteCmd8DataFill16+0x222>
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800185a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800185e:	619a      	str	r2, [r3, #24]
 8001860:	e003      	b.n	800186a <LCD_IO_WriteCmd8DataFill16+0x22a>
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001868:	619a      	str	r2, [r3, #24]
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800186c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001870:	619a      	str	r2, [r3, #24]
 8001872:	2008      	movs	r0, #8
 8001874:	f7ff fb5c 	bl	8000f30 <LCD_IO_Delay>
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800187a:	2201      	movs	r2, #1
 800187c:	619a      	str	r2, [r3, #24]
 800187e:	88bb      	ldrh	r3, [r7, #4]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001884:	701a      	strb	r2, [r3, #0]
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d004      	beq.n	800189c <LCD_IO_WriteCmd8DataFill16+0x25c>
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001898:	619a      	str	r2, [r3, #24]
 800189a:	e003      	b.n	80018a4 <LCD_IO_WriteCmd8DataFill16+0x264>
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800189e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a2:	619a      	str	r2, [r3, #24]
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d013      	beq.n	80018d8 <LCD_IO_WriteCmd8DataFill16+0x298>
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <LCD_IO_WriteCmd8DataFill16+0x28c>)
 80018b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018b6:	619a      	str	r2, [r3, #24]
 80018b8:	e012      	b.n	80018e0 <LCD_IO_WriteCmd8DataFill16+0x2a0>
 80018ba:	bf00      	nop
 80018bc:	58020400 	.word	0x58020400
 80018c0:	58020800 	.word	0x58020800
 80018c4:	240000ac 	.word	0x240000ac
 80018c8:	58021800 	.word	0x58021800
 80018cc:	58020c00 	.word	0x58020c00
 80018d0:	58021000 	.word	0x58021000
 80018d4:	58020000 	.word	0x58020000
 80018d8:	4b39      	ldr	r3, [pc, #228]	; (80019c0 <LCD_IO_WriteCmd8DataFill16+0x380>)
 80018da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018de:	619a      	str	r2, [r3, #24]
 80018e0:	4b38      	ldr	r3, [pc, #224]	; (80019c4 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d004      	beq.n	80018f6 <LCD_IO_WriteCmd8DataFill16+0x2b6>
 80018ec:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <LCD_IO_WriteCmd8DataFill16+0x388>)
 80018ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018f2:	619a      	str	r2, [r3, #24]
 80018f4:	e003      	b.n	80018fe <LCD_IO_WriteCmd8DataFill16+0x2be>
 80018f6:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <LCD_IO_WriteCmd8DataFill16+0x388>)
 80018f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018fc:	619a      	str	r2, [r3, #24]
 80018fe:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <LCD_IO_WriteCmd8DataFill16+0x384>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <LCD_IO_WriteCmd8DataFill16+0x2d4>
 800190a:	4b30      	ldr	r3, [pc, #192]	; (80019cc <LCD_IO_WriteCmd8DataFill16+0x38c>)
 800190c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001910:	619a      	str	r2, [r3, #24]
 8001912:	e003      	b.n	800191c <LCD_IO_WriteCmd8DataFill16+0x2dc>
 8001914:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001916:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800191a:	619a      	str	r2, [r3, #24]
 800191c:	4b29      	ldr	r3, [pc, #164]	; (80019c4 <LCD_IO_WriteCmd8DataFill16+0x384>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	f003 0310 	and.w	r3, r3, #16
 8001924:	2b00      	cmp	r3, #0
 8001926:	d004      	beq.n	8001932 <LCD_IO_WriteCmd8DataFill16+0x2f2>
 8001928:	4b28      	ldr	r3, [pc, #160]	; (80019cc <LCD_IO_WriteCmd8DataFill16+0x38c>)
 800192a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800192e:	619a      	str	r2, [r3, #24]
 8001930:	e003      	b.n	800193a <LCD_IO_WriteCmd8DataFill16+0x2fa>
 8001932:	4b26      	ldr	r3, [pc, #152]	; (80019cc <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001934:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001938:	619a      	str	r2, [r3, #24]
 800193a:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <LCD_IO_WriteCmd8DataFill16+0x384>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	f003 0320 	and.w	r3, r3, #32
 8001942:	2b00      	cmp	r3, #0
 8001944:	d004      	beq.n	8001950 <LCD_IO_WriteCmd8DataFill16+0x310>
 8001946:	4b21      	ldr	r3, [pc, #132]	; (80019cc <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800194c:	619a      	str	r2, [r3, #24]
 800194e:	e003      	b.n	8001958 <LCD_IO_WriteCmd8DataFill16+0x318>
 8001950:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001952:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001956:	619a      	str	r2, [r3, #24]
 8001958:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <LCD_IO_WriteCmd8DataFill16+0x384>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <LCD_IO_WriteCmd8DataFill16+0x32e>
 8001964:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <LCD_IO_WriteCmd8DataFill16+0x390>)
 8001966:	f44f 7280 	mov.w	r2, #256	; 0x100
 800196a:	619a      	str	r2, [r3, #24]
 800196c:	e003      	b.n	8001976 <LCD_IO_WriteCmd8DataFill16+0x336>
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <LCD_IO_WriteCmd8DataFill16+0x390>)
 8001970:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001974:	619a      	str	r2, [r3, #24]
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <LCD_IO_WriteCmd8DataFill16+0x384>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	b25b      	sxtb	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	da04      	bge.n	800198a <LCD_IO_WriteCmd8DataFill16+0x34a>
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001982:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001986:	619a      	str	r2, [r3, #24]
 8001988:	e003      	b.n	8001992 <LCD_IO_WriteCmd8DataFill16+0x352>
 800198a:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <LCD_IO_WriteCmd8DataFill16+0x388>)
 800198c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001990:	619a      	str	r2, [r3, #24]
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <LCD_IO_WriteCmd8DataFill16+0x394>)
 8001994:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001998:	619a      	str	r2, [r3, #24]
 800199a:	2008      	movs	r0, #8
 800199c:	f7ff fac8 	bl	8000f30 <LCD_IO_Delay>
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <LCD_IO_WriteCmd8DataFill16+0x394>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	619a      	str	r2, [r3, #24]
  while(Size--)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	1e5a      	subs	r2, r3, #1
 80019aa:	603a      	str	r2, [r7, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f47f aedf 	bne.w	8001770 <LCD_IO_WriteCmd8DataFill16+0x130>
  }
  LCD_CS_OFF;
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <LCD_IO_WriteCmd8DataFill16+0x398>)
 80019b4:	2202      	movs	r2, #2
 80019b6:	619a      	str	r2, [r3, #24]
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	58020c00 	.word	0x58020c00
 80019c4:	240000ac 	.word	0x240000ac
 80019c8:	58021800 	.word	0x58021800
 80019cc:	58021000 	.word	0x58021000
 80019d0:	58020000 	.word	0x58020000
 80019d4:	58020800 	.word	0x58020800
 80019d8:	58020400 	.word	0x58020400

080019dc <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 80019ea:	4b92      	ldr	r3, [pc, #584]	; (8001c34 <LCD_IO_WriteCmd8MultipleData8+0x258>)
 80019ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019f0:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 80019f2:	4b91      	ldr	r3, [pc, #580]	; (8001c38 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 80019f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019f8:	619a      	str	r2, [r3, #24]
 80019fa:	4a90      	ldr	r2, [pc, #576]	; (8001c3c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	7013      	strb	r3, [r2, #0]
 8001a00:	4b8e      	ldr	r3, [pc, #568]	; (8001c3c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d004      	beq.n	8001a16 <LCD_IO_WriteCmd8MultipleData8+0x3a>
 8001a0c:	4b8c      	ldr	r3, [pc, #560]	; (8001c40 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a12:	619a      	str	r2, [r3, #24]
 8001a14:	e003      	b.n	8001a1e <LCD_IO_WriteCmd8MultipleData8+0x42>
 8001a16:	4b8a      	ldr	r3, [pc, #552]	; (8001c40 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001a18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a1c:	619a      	str	r2, [r3, #24]
 8001a1e:	4b87      	ldr	r3, [pc, #540]	; (8001c3c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <LCD_IO_WriteCmd8MultipleData8+0x58>
 8001a2a:	4b86      	ldr	r3, [pc, #536]	; (8001c44 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8001a2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a30:	619a      	str	r2, [r3, #24]
 8001a32:	e003      	b.n	8001a3c <LCD_IO_WriteCmd8MultipleData8+0x60>
 8001a34:	4b83      	ldr	r3, [pc, #524]	; (8001c44 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8001a36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a3a:	619a      	str	r2, [r3, #24]
 8001a3c:	4b7f      	ldr	r3, [pc, #508]	; (8001c3c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d004      	beq.n	8001a52 <LCD_IO_WriteCmd8MultipleData8+0x76>
 8001a48:	4b7d      	ldr	r3, [pc, #500]	; (8001c40 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001a4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a4e:	619a      	str	r2, [r3, #24]
 8001a50:	e003      	b.n	8001a5a <LCD_IO_WriteCmd8MultipleData8+0x7e>
 8001a52:	4b7b      	ldr	r3, [pc, #492]	; (8001c40 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001a54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a58:	619a      	str	r2, [r3, #24]
 8001a5a:	4b78      	ldr	r3, [pc, #480]	; (8001c3c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d004      	beq.n	8001a70 <LCD_IO_WriteCmd8MultipleData8+0x94>
 8001a66:	4b78      	ldr	r3, [pc, #480]	; (8001c48 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001a68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a6c:	619a      	str	r2, [r3, #24]
 8001a6e:	e003      	b.n	8001a78 <LCD_IO_WriteCmd8MultipleData8+0x9c>
 8001a70:	4b75      	ldr	r3, [pc, #468]	; (8001c48 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001a72:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a76:	619a      	str	r2, [r3, #24]
 8001a78:	4b70      	ldr	r3, [pc, #448]	; (8001c3c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d004      	beq.n	8001a8e <LCD_IO_WriteCmd8MultipleData8+0xb2>
 8001a84:	4b70      	ldr	r3, [pc, #448]	; (8001c48 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001a86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a8a:	619a      	str	r2, [r3, #24]
 8001a8c:	e003      	b.n	8001a96 <LCD_IO_WriteCmd8MultipleData8+0xba>
 8001a8e:	4b6e      	ldr	r3, [pc, #440]	; (8001c48 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001a90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a94:	619a      	str	r2, [r3, #24]
 8001a96:	4b69      	ldr	r3, [pc, #420]	; (8001c3c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	f003 0320 	and.w	r3, r3, #32
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d004      	beq.n	8001aac <LCD_IO_WriteCmd8MultipleData8+0xd0>
 8001aa2:	4b69      	ldr	r3, [pc, #420]	; (8001c48 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001aa8:	619a      	str	r2, [r3, #24]
 8001aaa:	e003      	b.n	8001ab4 <LCD_IO_WriteCmd8MultipleData8+0xd8>
 8001aac:	4b66      	ldr	r3, [pc, #408]	; (8001c48 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001aae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ab2:	619a      	str	r2, [r3, #24]
 8001ab4:	4b61      	ldr	r3, [pc, #388]	; (8001c3c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <LCD_IO_WriteCmd8MultipleData8+0xee>
 8001ac0:	4b62      	ldr	r3, [pc, #392]	; (8001c4c <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac6:	619a      	str	r2, [r3, #24]
 8001ac8:	e003      	b.n	8001ad2 <LCD_IO_WriteCmd8MultipleData8+0xf6>
 8001aca:	4b60      	ldr	r3, [pc, #384]	; (8001c4c <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001acc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ad0:	619a      	str	r2, [r3, #24]
 8001ad2:	4b5a      	ldr	r3, [pc, #360]	; (8001c3c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	b25b      	sxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	da04      	bge.n	8001ae6 <LCD_IO_WriteCmd8MultipleData8+0x10a>
 8001adc:	4b58      	ldr	r3, [pc, #352]	; (8001c40 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001ade:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ae2:	619a      	str	r2, [r3, #24]
 8001ae4:	e003      	b.n	8001aee <LCD_IO_WriteCmd8MultipleData8+0x112>
 8001ae6:	4b56      	ldr	r3, [pc, #344]	; (8001c40 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aec:	619a      	str	r2, [r3, #24]
 8001aee:	4b52      	ldr	r3, [pc, #328]	; (8001c38 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001af0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001af4:	619a      	str	r2, [r3, #24]
 8001af6:	2008      	movs	r0, #8
 8001af8:	f7ff fa1a 	bl	8000f30 <LCD_IO_Delay>
 8001afc:	4b4e      	ldr	r3, [pc, #312]	; (8001c38 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	619a      	str	r2, [r3, #24]
 8001b02:	4b4d      	ldr	r3, [pc, #308]	; (8001c38 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001b04:	2208      	movs	r2, #8
 8001b06:	619a      	str	r2, [r3, #24]

  while(Size--)
 8001b08:	e087      	b.n	8001c1a <LCD_IO_WriteCmd8MultipleData8+0x23e>
  {
    LCD_DATA8_WRITE(*pData);
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	781a      	ldrb	r2, [r3, #0]
 8001b0e:	4b4b      	ldr	r3, [pc, #300]	; (8001c3c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b10:	701a      	strb	r2, [r3, #0]
 8001b12:	4b4a      	ldr	r3, [pc, #296]	; (8001c3c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d004      	beq.n	8001b28 <LCD_IO_WriteCmd8MultipleData8+0x14c>
 8001b1e:	4b48      	ldr	r3, [pc, #288]	; (8001c40 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b24:	619a      	str	r2, [r3, #24]
 8001b26:	e003      	b.n	8001b30 <LCD_IO_WriteCmd8MultipleData8+0x154>
 8001b28:	4b45      	ldr	r3, [pc, #276]	; (8001c40 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001b2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b2e:	619a      	str	r2, [r3, #24]
 8001b30:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d004      	beq.n	8001b46 <LCD_IO_WriteCmd8MultipleData8+0x16a>
 8001b3c:	4b41      	ldr	r3, [pc, #260]	; (8001c44 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8001b3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b42:	619a      	str	r2, [r3, #24]
 8001b44:	e003      	b.n	8001b4e <LCD_IO_WriteCmd8MultipleData8+0x172>
 8001b46:	4b3f      	ldr	r3, [pc, #252]	; (8001c44 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8001b48:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b4c:	619a      	str	r2, [r3, #24]
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d004      	beq.n	8001b64 <LCD_IO_WriteCmd8MultipleData8+0x188>
 8001b5a:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001b5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b60:	619a      	str	r2, [r3, #24]
 8001b62:	e003      	b.n	8001b6c <LCD_IO_WriteCmd8MultipleData8+0x190>
 8001b64:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001b66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b6a:	619a      	str	r2, [r3, #24]
 8001b6c:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d004      	beq.n	8001b82 <LCD_IO_WriteCmd8MultipleData8+0x1a6>
 8001b78:	4b33      	ldr	r3, [pc, #204]	; (8001c48 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b7e:	619a      	str	r2, [r3, #24]
 8001b80:	e003      	b.n	8001b8a <LCD_IO_WriteCmd8MultipleData8+0x1ae>
 8001b82:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b88:	619a      	str	r2, [r3, #24]
 8001b8a:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d004      	beq.n	8001ba0 <LCD_IO_WriteCmd8MultipleData8+0x1c4>
 8001b96:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b9c:	619a      	str	r2, [r3, #24]
 8001b9e:	e003      	b.n	8001ba8 <LCD_IO_WriteCmd8MultipleData8+0x1cc>
 8001ba0:	4b29      	ldr	r3, [pc, #164]	; (8001c48 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001ba2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ba6:	619a      	str	r2, [r3, #24]
 8001ba8:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	f003 0320 	and.w	r3, r3, #32
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d004      	beq.n	8001bbe <LCD_IO_WriteCmd8MultipleData8+0x1e2>
 8001bb4:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001bb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bba:	619a      	str	r2, [r3, #24]
 8001bbc:	e003      	b.n	8001bc6 <LCD_IO_WriteCmd8MultipleData8+0x1ea>
 8001bbe:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001bc0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bc4:	619a      	str	r2, [r3, #24]
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d004      	beq.n	8001bdc <LCD_IO_WriteCmd8MultipleData8+0x200>
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bd8:	619a      	str	r2, [r3, #24]
 8001bda:	e003      	b.n	8001be4 <LCD_IO_WriteCmd8MultipleData8+0x208>
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001bde:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001be2:	619a      	str	r2, [r3, #24]
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	b25b      	sxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	da04      	bge.n	8001bf8 <LCD_IO_WriteCmd8MultipleData8+0x21c>
 8001bee:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001bf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bf4:	619a      	str	r2, [r3, #24]
 8001bf6:	e003      	b.n	8001c00 <LCD_IO_WriteCmd8MultipleData8+0x224>
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bfe:	619a      	str	r2, [r3, #24]
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001c02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c06:	619a      	str	r2, [r3, #24]
 8001c08:	2008      	movs	r0, #8
 8001c0a:	f7ff f991 	bl	8000f30 <LCD_IO_Delay>
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	619a      	str	r2, [r3, #24]
    pData ++;
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	3301      	adds	r3, #1
 8001c18:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	1e5a      	subs	r2, r3, #1
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f47f af72 	bne.w	8001b0a <LCD_IO_WriteCmd8MultipleData8+0x12e>
  }
  LCD_CS_OFF;
 8001c26:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <LCD_IO_WriteCmd8MultipleData8+0x258>)
 8001c28:	2202      	movs	r2, #2
 8001c2a:	619a      	str	r2, [r3, #24]
}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	58020400 	.word	0x58020400
 8001c38:	58020800 	.word	0x58020800
 8001c3c:	240000ac 	.word	0x240000ac
 8001c40:	58021800 	.word	0x58021800
 8001c44:	58020c00 	.word	0x58020c00
 8001c48:	58021000 	.word	0x58021000
 8001c4c:	58020000 	.word	0x58020000

08001c50 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 8001c5e:	4b9b      	ldr	r3, [pc, #620]	; (8001ecc <LCD_IO_WriteCmd8MultipleData16+0x27c>)
 8001c60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c64:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8001c66:	4b9a      	ldr	r3, [pc, #616]	; (8001ed0 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001c68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c6c:	619a      	str	r2, [r3, #24]
 8001c6e:	4a99      	ldr	r2, [pc, #612]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	7013      	strb	r3, [r2, #0]
 8001c74:	4b97      	ldr	r3, [pc, #604]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <LCD_IO_WriteCmd8MultipleData16+0x3a>
 8001c80:	4b95      	ldr	r3, [pc, #596]	; (8001ed8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c86:	619a      	str	r2, [r3, #24]
 8001c88:	e003      	b.n	8001c92 <LCD_IO_WriteCmd8MultipleData16+0x42>
 8001c8a:	4b93      	ldr	r3, [pc, #588]	; (8001ed8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001c8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c90:	619a      	str	r2, [r3, #24]
 8001c92:	4b90      	ldr	r3, [pc, #576]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d004      	beq.n	8001ca8 <LCD_IO_WriteCmd8MultipleData16+0x58>
 8001c9e:	4b8f      	ldr	r3, [pc, #572]	; (8001edc <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001ca0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ca4:	619a      	str	r2, [r3, #24]
 8001ca6:	e003      	b.n	8001cb0 <LCD_IO_WriteCmd8MultipleData16+0x60>
 8001ca8:	4b8c      	ldr	r3, [pc, #560]	; (8001edc <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001caa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001cae:	619a      	str	r2, [r3, #24]
 8001cb0:	4b88      	ldr	r3, [pc, #544]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d004      	beq.n	8001cc6 <LCD_IO_WriteCmd8MultipleData16+0x76>
 8001cbc:	4b86      	ldr	r3, [pc, #536]	; (8001ed8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001cbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cc2:	619a      	str	r2, [r3, #24]
 8001cc4:	e003      	b.n	8001cce <LCD_IO_WriteCmd8MultipleData16+0x7e>
 8001cc6:	4b84      	ldr	r3, [pc, #528]	; (8001ed8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001cc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ccc:	619a      	str	r2, [r3, #24]
 8001cce:	4b81      	ldr	r3, [pc, #516]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d004      	beq.n	8001ce4 <LCD_IO_WriteCmd8MultipleData16+0x94>
 8001cda:	4b81      	ldr	r3, [pc, #516]	; (8001ee0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001cdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ce0:	619a      	str	r2, [r3, #24]
 8001ce2:	e003      	b.n	8001cec <LCD_IO_WriteCmd8MultipleData16+0x9c>
 8001ce4:	4b7e      	ldr	r3, [pc, #504]	; (8001ee0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001ce6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001cea:	619a      	str	r2, [r3, #24]
 8001cec:	4b79      	ldr	r3, [pc, #484]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d004      	beq.n	8001d02 <LCD_IO_WriteCmd8MultipleData16+0xb2>
 8001cf8:	4b79      	ldr	r3, [pc, #484]	; (8001ee0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001cfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cfe:	619a      	str	r2, [r3, #24]
 8001d00:	e003      	b.n	8001d0a <LCD_IO_WriteCmd8MultipleData16+0xba>
 8001d02:	4b77      	ldr	r3, [pc, #476]	; (8001ee0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001d04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d08:	619a      	str	r2, [r3, #24]
 8001d0a:	4b72      	ldr	r3, [pc, #456]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	f003 0320 	and.w	r3, r3, #32
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d004      	beq.n	8001d20 <LCD_IO_WriteCmd8MultipleData16+0xd0>
 8001d16:	4b72      	ldr	r3, [pc, #456]	; (8001ee0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d1c:	619a      	str	r2, [r3, #24]
 8001d1e:	e003      	b.n	8001d28 <LCD_IO_WriteCmd8MultipleData16+0xd8>
 8001d20:	4b6f      	ldr	r3, [pc, #444]	; (8001ee0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001d22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d26:	619a      	str	r2, [r3, #24]
 8001d28:	4b6a      	ldr	r3, [pc, #424]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d004      	beq.n	8001d3e <LCD_IO_WriteCmd8MultipleData16+0xee>
 8001d34:	4b6b      	ldr	r3, [pc, #428]	; (8001ee4 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d3a:	619a      	str	r2, [r3, #24]
 8001d3c:	e003      	b.n	8001d46 <LCD_IO_WriteCmd8MultipleData16+0xf6>
 8001d3e:	4b69      	ldr	r3, [pc, #420]	; (8001ee4 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001d40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d44:	619a      	str	r2, [r3, #24]
 8001d46:	4b63      	ldr	r3, [pc, #396]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	da04      	bge.n	8001d5a <LCD_IO_WriteCmd8MultipleData16+0x10a>
 8001d50:	4b61      	ldr	r3, [pc, #388]	; (8001ed8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001d52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d56:	619a      	str	r2, [r3, #24]
 8001d58:	e003      	b.n	8001d62 <LCD_IO_WriteCmd8MultipleData16+0x112>
 8001d5a:	4b5f      	ldr	r3, [pc, #380]	; (8001ed8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d60:	619a      	str	r2, [r3, #24]
 8001d62:	4b5b      	ldr	r3, [pc, #364]	; (8001ed0 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001d64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d68:	619a      	str	r2, [r3, #24]
 8001d6a:	2008      	movs	r0, #8
 8001d6c:	f7ff f8e0 	bl	8000f30 <LCD_IO_Delay>
 8001d70:	4b57      	ldr	r3, [pc, #348]	; (8001ed0 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	619a      	str	r2, [r3, #24]
 8001d76:	4b56      	ldr	r3, [pc, #344]	; (8001ed0 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001d78:	2208      	movs	r2, #8
 8001d7a:	619a      	str	r2, [r3, #24]
  while(Size--)
 8001d7c:	e11e      	b.n	8001fbc <LCD_IO_WriteCmd8MultipleData16+0x36c>
  {
    LCD_DATA16_WRITE(*pData);
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	0a1b      	lsrs	r3, r3, #8
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	4b52      	ldr	r3, [pc, #328]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d8a:	701a      	strb	r2, [r3, #0]
 8001d8c:	4b51      	ldr	r3, [pc, #324]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d004      	beq.n	8001da2 <LCD_IO_WriteCmd8MultipleData16+0x152>
 8001d98:	4b4f      	ldr	r3, [pc, #316]	; (8001ed8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d9e:	619a      	str	r2, [r3, #24]
 8001da0:	e003      	b.n	8001daa <LCD_IO_WriteCmd8MultipleData16+0x15a>
 8001da2:	4b4d      	ldr	r3, [pc, #308]	; (8001ed8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001da4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da8:	619a      	str	r2, [r3, #24]
 8001daa:	4b4a      	ldr	r3, [pc, #296]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d004      	beq.n	8001dc0 <LCD_IO_WriteCmd8MultipleData16+0x170>
 8001db6:	4b49      	ldr	r3, [pc, #292]	; (8001edc <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001db8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001dbc:	619a      	str	r2, [r3, #24]
 8001dbe:	e003      	b.n	8001dc8 <LCD_IO_WriteCmd8MultipleData16+0x178>
 8001dc0:	4b46      	ldr	r3, [pc, #280]	; (8001edc <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001dc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001dc6:	619a      	str	r2, [r3, #24]
 8001dc8:	4b42      	ldr	r3, [pc, #264]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d004      	beq.n	8001dde <LCD_IO_WriteCmd8MultipleData16+0x18e>
 8001dd4:	4b40      	ldr	r3, [pc, #256]	; (8001ed8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001dd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dda:	619a      	str	r2, [r3, #24]
 8001ddc:	e003      	b.n	8001de6 <LCD_IO_WriteCmd8MultipleData16+0x196>
 8001dde:	4b3e      	ldr	r3, [pc, #248]	; (8001ed8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001de0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001de4:	619a      	str	r2, [r3, #24]
 8001de6:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d004      	beq.n	8001dfc <LCD_IO_WriteCmd8MultipleData16+0x1ac>
 8001df2:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001df4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001df8:	619a      	str	r2, [r3, #24]
 8001dfa:	e003      	b.n	8001e04 <LCD_IO_WriteCmd8MultipleData16+0x1b4>
 8001dfc:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001dfe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e02:	619a      	str	r2, [r3, #24]
 8001e04:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d004      	beq.n	8001e1a <LCD_IO_WriteCmd8MultipleData16+0x1ca>
 8001e10:	4b33      	ldr	r3, [pc, #204]	; (8001ee0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001e12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e16:	619a      	str	r2, [r3, #24]
 8001e18:	e003      	b.n	8001e22 <LCD_IO_WriteCmd8MultipleData16+0x1d2>
 8001e1a:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001e1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e20:	619a      	str	r2, [r3, #24]
 8001e22:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <LCD_IO_WriteCmd8MultipleData16+0x1e8>
 8001e2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ee0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e34:	619a      	str	r2, [r3, #24]
 8001e36:	e003      	b.n	8001e40 <LCD_IO_WriteCmd8MultipleData16+0x1f0>
 8001e38:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001e3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e3e:	619a      	str	r2, [r3, #24]
 8001e40:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d004      	beq.n	8001e56 <LCD_IO_WriteCmd8MultipleData16+0x206>
 8001e4c:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e52:	619a      	str	r2, [r3, #24]
 8001e54:	e003      	b.n	8001e5e <LCD_IO_WriteCmd8MultipleData16+0x20e>
 8001e56:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001e58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e5c:	619a      	str	r2, [r3, #24]
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b25b      	sxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	da04      	bge.n	8001e72 <LCD_IO_WriteCmd8MultipleData16+0x222>
 8001e68:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001e6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e6e:	619a      	str	r2, [r3, #24]
 8001e70:	e003      	b.n	8001e7a <LCD_IO_WriteCmd8MultipleData16+0x22a>
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e78:	619a      	str	r2, [r3, #24]
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001e7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e80:	619a      	str	r2, [r3, #24]
 8001e82:	2008      	movs	r0, #8
 8001e84:	f7ff f854 	bl	8000f30 <LCD_IO_Delay>
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	619a      	str	r2, [r3, #24]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e96:	701a      	strb	r2, [r3, #0]
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d004      	beq.n	8001eae <LCD_IO_WriteCmd8MultipleData16+0x25e>
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eaa:	619a      	str	r2, [r3, #24]
 8001eac:	e003      	b.n	8001eb6 <LCD_IO_WriteCmd8MultipleData16+0x266>
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001eb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb4:	619a      	str	r2, [r3, #24]
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d012      	beq.n	8001ee8 <LCD_IO_WriteCmd8MultipleData16+0x298>
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001ec4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ec8:	619a      	str	r2, [r3, #24]
 8001eca:	e011      	b.n	8001ef0 <LCD_IO_WriteCmd8MultipleData16+0x2a0>
 8001ecc:	58020400 	.word	0x58020400
 8001ed0:	58020800 	.word	0x58020800
 8001ed4:	240000ac 	.word	0x240000ac
 8001ed8:	58021800 	.word	0x58021800
 8001edc:	58020c00 	.word	0x58020c00
 8001ee0:	58021000 	.word	0x58021000
 8001ee4:	58020000 	.word	0x58020000
 8001ee8:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <LCD_IO_WriteCmd8MultipleData16+0x388>)
 8001eea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001eee:	619a      	str	r2, [r3, #24]
 8001ef0:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d004      	beq.n	8001f06 <LCD_IO_WriteCmd8MultipleData16+0x2b6>
 8001efc:	4b38      	ldr	r3, [pc, #224]	; (8001fe0 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001efe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f02:	619a      	str	r2, [r3, #24]
 8001f04:	e003      	b.n	8001f0e <LCD_IO_WriteCmd8MultipleData16+0x2be>
 8001f06:	4b36      	ldr	r3, [pc, #216]	; (8001fe0 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001f08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f0c:	619a      	str	r2, [r3, #24]
 8001f0e:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d004      	beq.n	8001f24 <LCD_IO_WriteCmd8MultipleData16+0x2d4>
 8001f1a:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001f1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f20:	619a      	str	r2, [r3, #24]
 8001f22:	e003      	b.n	8001f2c <LCD_IO_WriteCmd8MultipleData16+0x2dc>
 8001f24:	4b2f      	ldr	r3, [pc, #188]	; (8001fe4 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001f26:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f2a:	619a      	str	r2, [r3, #24]
 8001f2c:	4b2b      	ldr	r3, [pc, #172]	; (8001fdc <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	f003 0310 	and.w	r3, r3, #16
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d004      	beq.n	8001f42 <LCD_IO_WriteCmd8MultipleData16+0x2f2>
 8001f38:	4b2a      	ldr	r3, [pc, #168]	; (8001fe4 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001f3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f3e:	619a      	str	r2, [r3, #24]
 8001f40:	e003      	b.n	8001f4a <LCD_IO_WriteCmd8MultipleData16+0x2fa>
 8001f42:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001f44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f48:	619a      	str	r2, [r3, #24]
 8001f4a:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	f003 0320 	and.w	r3, r3, #32
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d004      	beq.n	8001f60 <LCD_IO_WriteCmd8MultipleData16+0x310>
 8001f56:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f5c:	619a      	str	r2, [r3, #24]
 8001f5e:	e003      	b.n	8001f68 <LCD_IO_WriteCmd8MultipleData16+0x318>
 8001f60:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001f62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f66:	619a      	str	r2, [r3, #24]
 8001f68:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d004      	beq.n	8001f7e <LCD_IO_WriteCmd8MultipleData16+0x32e>
 8001f74:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <LCD_IO_WriteCmd8MultipleData16+0x398>)
 8001f76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f7a:	619a      	str	r2, [r3, #24]
 8001f7c:	e003      	b.n	8001f86 <LCD_IO_WriteCmd8MultipleData16+0x336>
 8001f7e:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <LCD_IO_WriteCmd8MultipleData16+0x398>)
 8001f80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f84:	619a      	str	r2, [r3, #24]
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	b25b      	sxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	da04      	bge.n	8001f9a <LCD_IO_WriteCmd8MultipleData16+0x34a>
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001f92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f96:	619a      	str	r2, [r3, #24]
 8001f98:	e003      	b.n	8001fa2 <LCD_IO_WriteCmd8MultipleData16+0x352>
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fa0:	619a      	str	r2, [r3, #24]
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <LCD_IO_WriteCmd8MultipleData16+0x39c>)
 8001fa4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fa8:	619a      	str	r2, [r3, #24]
 8001faa:	2008      	movs	r0, #8
 8001fac:	f7fe ffc0 	bl	8000f30 <LCD_IO_Delay>
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <LCD_IO_WriteCmd8MultipleData16+0x39c>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	619a      	str	r2, [r3, #24]
    pData ++;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	3302      	adds	r3, #2
 8001fba:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	1e5a      	subs	r2, r3, #1
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f47f aedb 	bne.w	8001d7e <LCD_IO_WriteCmd8MultipleData16+0x12e>
  }
  LCD_CS_OFF;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <LCD_IO_WriteCmd8MultipleData16+0x3a0>)
 8001fca:	2202      	movs	r2, #2
 8001fcc:	619a      	str	r2, [r3, #24]
}
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	58020c00 	.word	0x58020c00
 8001fdc:	240000ac 	.word	0x240000ac
 8001fe0:	58021800 	.word	0x58021800
 8001fe4:	58021000 	.word	0x58021000
 8001fe8:	58020000 	.word	0x58020000
 8001fec:	58020800 	.word	0x58020800
 8001ff0:	58020400 	.word	0x58020400

08001ff4 <LCD_IO_ReadCmd8MultipleData8>:
}

//-----------------------------------------------------------------------------
#if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	4603      	mov	r3, r0
 8002002:	73fb      	strb	r3, [r7, #15]
  uint8_t  d;
  LCD_CS_ON;
 8002004:	4b6f      	ldr	r3, [pc, #444]	; (80021c4 <LCD_IO_ReadCmd8MultipleData8+0x1d0>)
 8002006:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800200a:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 800200c:	4b6e      	ldr	r3, [pc, #440]	; (80021c8 <LCD_IO_ReadCmd8MultipleData8+0x1d4>)
 800200e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002012:	619a      	str	r2, [r3, #24]
 8002014:	4a6d      	ldr	r2, [pc, #436]	; (80021cc <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	7013      	strb	r3, [r2, #0]
 800201a:	4b6c      	ldr	r3, [pc, #432]	; (80021cc <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d004      	beq.n	8002030 <LCD_IO_ReadCmd8MultipleData8+0x3c>
 8002026:	4b6a      	ldr	r3, [pc, #424]	; (80021d0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800202c:	619a      	str	r2, [r3, #24]
 800202e:	e003      	b.n	8002038 <LCD_IO_ReadCmd8MultipleData8+0x44>
 8002030:	4b67      	ldr	r3, [pc, #412]	; (80021d0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002032:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002036:	619a      	str	r2, [r3, #24]
 8002038:	4b64      	ldr	r3, [pc, #400]	; (80021cc <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d004      	beq.n	800204e <LCD_IO_ReadCmd8MultipleData8+0x5a>
 8002044:	4b63      	ldr	r3, [pc, #396]	; (80021d4 <LCD_IO_ReadCmd8MultipleData8+0x1e0>)
 8002046:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800204a:	619a      	str	r2, [r3, #24]
 800204c:	e003      	b.n	8002056 <LCD_IO_ReadCmd8MultipleData8+0x62>
 800204e:	4b61      	ldr	r3, [pc, #388]	; (80021d4 <LCD_IO_ReadCmd8MultipleData8+0x1e0>)
 8002050:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002054:	619a      	str	r2, [r3, #24]
 8002056:	4b5d      	ldr	r3, [pc, #372]	; (80021cc <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	d004      	beq.n	800206c <LCD_IO_ReadCmd8MultipleData8+0x78>
 8002062:	4b5b      	ldr	r3, [pc, #364]	; (80021d0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002064:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002068:	619a      	str	r2, [r3, #24]
 800206a:	e003      	b.n	8002074 <LCD_IO_ReadCmd8MultipleData8+0x80>
 800206c:	4b58      	ldr	r3, [pc, #352]	; (80021d0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 800206e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002072:	619a      	str	r2, [r3, #24]
 8002074:	4b55      	ldr	r3, [pc, #340]	; (80021cc <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d004      	beq.n	800208a <LCD_IO_ReadCmd8MultipleData8+0x96>
 8002080:	4b55      	ldr	r3, [pc, #340]	; (80021d8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002082:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002086:	619a      	str	r2, [r3, #24]
 8002088:	e003      	b.n	8002092 <LCD_IO_ReadCmd8MultipleData8+0x9e>
 800208a:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 800208c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002090:	619a      	str	r2, [r3, #24]
 8002092:	4b4e      	ldr	r3, [pc, #312]	; (80021cc <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <LCD_IO_ReadCmd8MultipleData8+0xb4>
 800209e:	4b4e      	ldr	r3, [pc, #312]	; (80021d8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 80020a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020a4:	619a      	str	r2, [r3, #24]
 80020a6:	e003      	b.n	80020b0 <LCD_IO_ReadCmd8MultipleData8+0xbc>
 80020a8:	4b4b      	ldr	r3, [pc, #300]	; (80021d8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 80020aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020ae:	619a      	str	r2, [r3, #24]
 80020b0:	4b46      	ldr	r3, [pc, #280]	; (80021cc <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d004      	beq.n	80020c6 <LCD_IO_ReadCmd8MultipleData8+0xd2>
 80020bc:	4b46      	ldr	r3, [pc, #280]	; (80021d8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 80020be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020c2:	619a      	str	r2, [r3, #24]
 80020c4:	e003      	b.n	80020ce <LCD_IO_ReadCmd8MultipleData8+0xda>
 80020c6:	4b44      	ldr	r3, [pc, #272]	; (80021d8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 80020c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020cc:	619a      	str	r2, [r3, #24]
 80020ce:	4b3f      	ldr	r3, [pc, #252]	; (80021cc <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d004      	beq.n	80020e4 <LCD_IO_ReadCmd8MultipleData8+0xf0>
 80020da:	4b40      	ldr	r3, [pc, #256]	; (80021dc <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 80020dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020e0:	619a      	str	r2, [r3, #24]
 80020e2:	e003      	b.n	80020ec <LCD_IO_ReadCmd8MultipleData8+0xf8>
 80020e4:	4b3d      	ldr	r3, [pc, #244]	; (80021dc <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 80020e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020ea:	619a      	str	r2, [r3, #24]
 80020ec:	4b37      	ldr	r3, [pc, #220]	; (80021cc <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b25b      	sxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	da04      	bge.n	8002100 <LCD_IO_ReadCmd8MultipleData8+0x10c>
 80020f6:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 80020f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020fc:	619a      	str	r2, [r3, #24]
 80020fe:	e003      	b.n	8002108 <LCD_IO_ReadCmd8MultipleData8+0x114>
 8002100:	4b33      	ldr	r3, [pc, #204]	; (80021d0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002106:	619a      	str	r2, [r3, #24]
 8002108:	4b2f      	ldr	r3, [pc, #188]	; (80021c8 <LCD_IO_ReadCmd8MultipleData8+0x1d4>)
 800210a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800210e:	619a      	str	r2, [r3, #24]
 8002110:	2008      	movs	r0, #8
 8002112:	f7fe ff0d 	bl	8000f30 <LCD_IO_Delay>
 8002116:	4b2c      	ldr	r3, [pc, #176]	; (80021c8 <LCD_IO_ReadCmd8MultipleData8+0x1d4>)
 8002118:	2201      	movs	r2, #1
 800211a:	619a      	str	r2, [r3, #24]
 800211c:	4b2a      	ldr	r3, [pc, #168]	; (80021c8 <LCD_IO_ReadCmd8MultipleData8+0x1d4>)
 800211e:	2208      	movs	r2, #8
 8002120:	619a      	str	r2, [r3, #24]
  LCD_DIRREAD;
 8002122:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a2a      	ldr	r2, [pc, #168]	; (80021d0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002128:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <LCD_IO_ReadCmd8MultipleData8+0x1e0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a28      	ldr	r2, [pc, #160]	; (80021d4 <LCD_IO_ReadCmd8MultipleData8+0x1e0>)
 8002134:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a24      	ldr	r2, [pc, #144]	; (80021d0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002140:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a23      	ldr	r2, [pc, #140]	; (80021d8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 800214c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a20      	ldr	r2, [pc, #128]	; (80021d8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002158:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1d      	ldr	r2, [pc, #116]	; (80021d8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002164:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a1b      	ldr	r2, [pc, #108]	; (80021dc <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8002170:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 800217c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002180:	6013      	str	r3, [r2, #0]
  while(DummySize--)
 8002182:	e009      	b.n	8002198 <LCD_IO_ReadCmd8MultipleData8+0x1a4>
    LCD_DUMMY_READ;
 8002184:	4b15      	ldr	r3, [pc, #84]	; (80021dc <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8002186:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800218a:	619a      	str	r2, [r3, #24]
 800218c:	2012      	movs	r0, #18
 800218e:	f7fe fecf 	bl	8000f30 <LCD_IO_Delay>
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8002194:	2208      	movs	r2, #8
 8002196:	619a      	str	r2, [r3, #24]
  while(DummySize--)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	1e5a      	subs	r2, r3, #1
 800219c:	603a      	str	r2, [r7, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <LCD_IO_ReadCmd8MultipleData8+0x190>
  while(Size--)
 80021a2:	e06e      	b.n	8002282 <LCD_IO_ReadCmd8MultipleData8+0x28e>
  {
    LCD_DATA8_READ(d);
 80021a4:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 80021a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80021aa:	619a      	str	r2, [r3, #24]
 80021ac:	2012      	movs	r0, #18
 80021ae:	f7fe febf 	bl	8000f30 <LCD_IO_Delay>
 80021b2:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d010      	beq.n	80021e0 <LCD_IO_ReadCmd8MultipleData8+0x1ec>
 80021be:	2301      	movs	r3, #1
 80021c0:	75fb      	strb	r3, [r7, #23]
 80021c2:	e00f      	b.n	80021e4 <LCD_IO_ReadCmd8MultipleData8+0x1f0>
 80021c4:	58020400 	.word	0x58020400
 80021c8:	58020800 	.word	0x58020800
 80021cc:	240000ac 	.word	0x240000ac
 80021d0:	58021800 	.word	0x58021800
 80021d4:	58020c00 	.word	0x58020c00
 80021d8:	58021000 	.word	0x58021000
 80021dc:	58020000 	.word	0x58020000
 80021e0:	2300      	movs	r3, #0
 80021e2:	75fb      	strb	r3, [r7, #23]
 80021e4:	4b4d      	ldr	r3, [pc, #308]	; (800231c <LCD_IO_ReadCmd8MultipleData8+0x328>)
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <LCD_IO_ReadCmd8MultipleData8+0x204>
 80021f0:	7dfb      	ldrb	r3, [r7, #23]
 80021f2:	f043 0302 	orr.w	r3, r3, #2
 80021f6:	75fb      	strb	r3, [r7, #23]
 80021f8:	4b49      	ldr	r3, [pc, #292]	; (8002320 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <LCD_IO_ReadCmd8MultipleData8+0x218>
 8002204:	7dfb      	ldrb	r3, [r7, #23]
 8002206:	f043 0304 	orr.w	r3, r3, #4
 800220a:	75fb      	strb	r3, [r7, #23]
 800220c:	4b45      	ldr	r3, [pc, #276]	; (8002324 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <LCD_IO_ReadCmd8MultipleData8+0x22c>
 8002218:	7dfb      	ldrb	r3, [r7, #23]
 800221a:	f043 0308 	orr.w	r3, r3, #8
 800221e:	75fb      	strb	r3, [r7, #23]
 8002220:	4b40      	ldr	r3, [pc, #256]	; (8002324 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <LCD_IO_ReadCmd8MultipleData8+0x240>
 800222c:	7dfb      	ldrb	r3, [r7, #23]
 800222e:	f043 0310 	orr.w	r3, r3, #16
 8002232:	75fb      	strb	r3, [r7, #23]
 8002234:	4b3b      	ldr	r3, [pc, #236]	; (8002324 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <LCD_IO_ReadCmd8MultipleData8+0x254>
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	f043 0320 	orr.w	r3, r3, #32
 8002246:	75fb      	strb	r3, [r7, #23]
 8002248:	4b37      	ldr	r3, [pc, #220]	; (8002328 <LCD_IO_ReadCmd8MultipleData8+0x334>)
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <LCD_IO_ReadCmd8MultipleData8+0x268>
 8002254:	7dfb      	ldrb	r3, [r7, #23]
 8002256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800225a:	75fb      	strb	r3, [r7, #23]
 800225c:	4b30      	ldr	r3, [pc, #192]	; (8002320 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <LCD_IO_ReadCmd8MultipleData8+0x27c>
 8002268:	7dfb      	ldrb	r3, [r7, #23]
 800226a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800226e:	75fb      	strb	r3, [r7, #23]
 8002270:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <LCD_IO_ReadCmd8MultipleData8+0x334>)
 8002272:	2208      	movs	r2, #8
 8002274:	619a      	str	r2, [r3, #24]
    *pData = d;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	7dfa      	ldrb	r2, [r7, #23]
 800227a:	701a      	strb	r2, [r3, #0]
    pData++;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	3301      	adds	r3, #1
 8002280:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	1e5a      	subs	r2, r3, #1
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d18b      	bne.n	80021a4 <LCD_IO_ReadCmd8MultipleData8+0x1b0>
  }
  LCD_CS_OFF;
 800228c:	4b27      	ldr	r3, [pc, #156]	; (800232c <LCD_IO_ReadCmd8MultipleData8+0x338>)
 800228e:	2202      	movs	r2, #2
 8002290:	619a      	str	r2, [r3, #24]
  LCD_DIRWRITE;
 8002292:	4b23      	ldr	r3, [pc, #140]	; (8002320 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800229a:	4a21      	ldr	r2, [pc, #132]	; (8002320 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 800229c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	4b1e      	ldr	r3, [pc, #120]	; (800231c <LCD_IO_ReadCmd8MultipleData8+0x328>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80022aa:	4a1c      	ldr	r2, [pc, #112]	; (800231c <LCD_IO_ReadCmd8MultipleData8+0x328>)
 80022ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80022ba:	4a19      	ldr	r2, [pc, #100]	; (8002320 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b18      	ldr	r3, [pc, #96]	; (8002324 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80022ca:	4a16      	ldr	r2, [pc, #88]	; (8002324 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 80022cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80022da:	4a12      	ldr	r2, [pc, #72]	; (8002324 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 80022dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80022ea:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 80022ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <LCD_IO_ReadCmd8MultipleData8+0x334>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80022fa:	4a0b      	ldr	r2, [pc, #44]	; (8002328 <LCD_IO_ReadCmd8MultipleData8+0x334>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 800230c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002310:	6013      	str	r3, [r2, #0]
}
 8002312:	bf00      	nop
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	58020c00 	.word	0x58020c00
 8002320:	58021800 	.word	0x58021800
 8002324:	58021000 	.word	0x58021000
 8002328:	58020000 	.word	0x58020000
 800232c:	58020400 	.word	0x58020400

08002330 <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_DIRWRITE;
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	4603      	mov	r3, r0
 800233e:	73fb      	strb	r3, [r7, #15]
  uint8_t  rgb888[3];
  LCD_CS_ON;
 8002340:	4ba0      	ldr	r3, [pc, #640]	; (80025c4 <LCD_IO_ReadCmd8MultipleData24to16+0x294>)
 8002342:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002346:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8002348:	4b9f      	ldr	r3, [pc, #636]	; (80025c8 <LCD_IO_ReadCmd8MultipleData24to16+0x298>)
 800234a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800234e:	619a      	str	r2, [r3, #24]
 8002350:	4a9e      	ldr	r2, [pc, #632]	; (80025cc <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	7013      	strb	r3, [r2, #0]
 8002356:	4b9d      	ldr	r3, [pc, #628]	; (80025cc <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <LCD_IO_ReadCmd8MultipleData24to16+0x3c>
 8002362:	4b9b      	ldr	r3, [pc, #620]	; (80025d0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002368:	619a      	str	r2, [r3, #24]
 800236a:	e003      	b.n	8002374 <LCD_IO_ReadCmd8MultipleData24to16+0x44>
 800236c:	4b98      	ldr	r3, [pc, #608]	; (80025d0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 800236e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002372:	619a      	str	r2, [r3, #24]
 8002374:	4b95      	ldr	r3, [pc, #596]	; (80025cc <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d004      	beq.n	800238a <LCD_IO_ReadCmd8MultipleData24to16+0x5a>
 8002380:	4b94      	ldr	r3, [pc, #592]	; (80025d4 <LCD_IO_ReadCmd8MultipleData24to16+0x2a4>)
 8002382:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002386:	619a      	str	r2, [r3, #24]
 8002388:	e003      	b.n	8002392 <LCD_IO_ReadCmd8MultipleData24to16+0x62>
 800238a:	4b92      	ldr	r3, [pc, #584]	; (80025d4 <LCD_IO_ReadCmd8MultipleData24to16+0x2a4>)
 800238c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002390:	619a      	str	r2, [r3, #24]
 8002392:	4b8e      	ldr	r3, [pc, #568]	; (80025cc <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b00      	cmp	r3, #0
 800239c:	d004      	beq.n	80023a8 <LCD_IO_ReadCmd8MultipleData24to16+0x78>
 800239e:	4b8c      	ldr	r3, [pc, #560]	; (80025d0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 80023a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023a4:	619a      	str	r2, [r3, #24]
 80023a6:	e003      	b.n	80023b0 <LCD_IO_ReadCmd8MultipleData24to16+0x80>
 80023a8:	4b89      	ldr	r3, [pc, #548]	; (80025d0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 80023aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023ae:	619a      	str	r2, [r3, #24]
 80023b0:	4b86      	ldr	r3, [pc, #536]	; (80025cc <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d004      	beq.n	80023c6 <LCD_IO_ReadCmd8MultipleData24to16+0x96>
 80023bc:	4b86      	ldr	r3, [pc, #536]	; (80025d8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 80023be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023c2:	619a      	str	r2, [r3, #24]
 80023c4:	e003      	b.n	80023ce <LCD_IO_ReadCmd8MultipleData24to16+0x9e>
 80023c6:	4b84      	ldr	r3, [pc, #528]	; (80025d8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 80023c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80023cc:	619a      	str	r2, [r3, #24]
 80023ce:	4b7f      	ldr	r3, [pc, #508]	; (80025cc <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d004      	beq.n	80023e4 <LCD_IO_ReadCmd8MultipleData24to16+0xb4>
 80023da:	4b7f      	ldr	r3, [pc, #508]	; (80025d8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 80023dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023e0:	619a      	str	r2, [r3, #24]
 80023e2:	e003      	b.n	80023ec <LCD_IO_ReadCmd8MultipleData24to16+0xbc>
 80023e4:	4b7c      	ldr	r3, [pc, #496]	; (80025d8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 80023e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023ea:	619a      	str	r2, [r3, #24]
 80023ec:	4b77      	ldr	r3, [pc, #476]	; (80025cc <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	f003 0320 	and.w	r3, r3, #32
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d004      	beq.n	8002402 <LCD_IO_ReadCmd8MultipleData24to16+0xd2>
 80023f8:	4b77      	ldr	r3, [pc, #476]	; (80025d8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 80023fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023fe:	619a      	str	r2, [r3, #24]
 8002400:	e003      	b.n	800240a <LCD_IO_ReadCmd8MultipleData24to16+0xda>
 8002402:	4b75      	ldr	r3, [pc, #468]	; (80025d8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002404:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002408:	619a      	str	r2, [r3, #24]
 800240a:	4b70      	ldr	r3, [pc, #448]	; (80025cc <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d004      	beq.n	8002420 <LCD_IO_ReadCmd8MultipleData24to16+0xf0>
 8002416:	4b71      	ldr	r3, [pc, #452]	; (80025dc <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 8002418:	f44f 7280 	mov.w	r2, #256	; 0x100
 800241c:	619a      	str	r2, [r3, #24]
 800241e:	e003      	b.n	8002428 <LCD_IO_ReadCmd8MultipleData24to16+0xf8>
 8002420:	4b6e      	ldr	r3, [pc, #440]	; (80025dc <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 8002422:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002426:	619a      	str	r2, [r3, #24]
 8002428:	4b68      	ldr	r3, [pc, #416]	; (80025cc <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	b25b      	sxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	da04      	bge.n	800243c <LCD_IO_ReadCmd8MultipleData24to16+0x10c>
 8002432:	4b67      	ldr	r3, [pc, #412]	; (80025d0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002434:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002438:	619a      	str	r2, [r3, #24]
 800243a:	e003      	b.n	8002444 <LCD_IO_ReadCmd8MultipleData24to16+0x114>
 800243c:	4b64      	ldr	r3, [pc, #400]	; (80025d0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 800243e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002442:	619a      	str	r2, [r3, #24]
 8002444:	4b60      	ldr	r3, [pc, #384]	; (80025c8 <LCD_IO_ReadCmd8MultipleData24to16+0x298>)
 8002446:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800244a:	619a      	str	r2, [r3, #24]
 800244c:	2008      	movs	r0, #8
 800244e:	f7fe fd6f 	bl	8000f30 <LCD_IO_Delay>
 8002452:	4b5d      	ldr	r3, [pc, #372]	; (80025c8 <LCD_IO_ReadCmd8MultipleData24to16+0x298>)
 8002454:	2201      	movs	r2, #1
 8002456:	619a      	str	r2, [r3, #24]
 8002458:	4b5b      	ldr	r3, [pc, #364]	; (80025c8 <LCD_IO_ReadCmd8MultipleData24to16+0x298>)
 800245a:	2208      	movs	r2, #8
 800245c:	619a      	str	r2, [r3, #24]
  LCD_DIRREAD;
 800245e:	4b5c      	ldr	r3, [pc, #368]	; (80025d0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a5b      	ldr	r2, [pc, #364]	; (80025d0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002464:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b5a      	ldr	r3, [pc, #360]	; (80025d4 <LCD_IO_ReadCmd8MultipleData24to16+0x2a4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a59      	ldr	r2, [pc, #356]	; (80025d4 <LCD_IO_ReadCmd8MultipleData24to16+0x2a4>)
 8002470:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b56      	ldr	r3, [pc, #344]	; (80025d0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a55      	ldr	r2, [pc, #340]	; (80025d0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 800247c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b55      	ldr	r3, [pc, #340]	; (80025d8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a54      	ldr	r2, [pc, #336]	; (80025d8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002488:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	4b52      	ldr	r3, [pc, #328]	; (80025d8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a51      	ldr	r2, [pc, #324]	; (80025d8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002494:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b4f      	ldr	r3, [pc, #316]	; (80025d8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a4e      	ldr	r2, [pc, #312]	; (80025d8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 80024a0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b4d      	ldr	r3, [pc, #308]	; (80025dc <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a4c      	ldr	r2, [pc, #304]	; (80025dc <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 80024ac:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4b47      	ldr	r3, [pc, #284]	; (80025d0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a46      	ldr	r2, [pc, #280]	; (80025d0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 80024b8:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80024bc:	6013      	str	r3, [r2, #0]
  while(DummySize--)
 80024be:	e009      	b.n	80024d4 <LCD_IO_ReadCmd8MultipleData24to16+0x1a4>
    LCD_DUMMY_READ;
 80024c0:	4b46      	ldr	r3, [pc, #280]	; (80025dc <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 80024c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024c6:	619a      	str	r2, [r3, #24]
 80024c8:	2012      	movs	r0, #18
 80024ca:	f7fe fd31 	bl	8000f30 <LCD_IO_Delay>
 80024ce:	4b43      	ldr	r3, [pc, #268]	; (80025dc <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 80024d0:	2208      	movs	r2, #8
 80024d2:	619a      	str	r2, [r3, #24]
  while(DummySize--)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	1e5a      	subs	r2, r3, #1
 80024d8:	603a      	str	r2, [r7, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <LCD_IO_ReadCmd8MultipleData24to16+0x190>
  while(Size--)
 80024de:	e14d      	b.n	800277c <LCD_IO_ReadCmd8MultipleData24to16+0x44c>
  {
    LCD_DATA8_READ(rgb888[0]);
 80024e0:	4b3e      	ldr	r3, [pc, #248]	; (80025dc <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 80024e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024e6:	619a      	str	r2, [r3, #24]
 80024e8:	2012      	movs	r0, #18
 80024ea:	f7fe fd21 	bl	8000f30 <LCD_IO_Delay>
 80024ee:	4b38      	ldr	r3, [pc, #224]	; (80025d0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <LCD_IO_ReadCmd8MultipleData24to16+0x1d0>
 80024fa:	2301      	movs	r3, #1
 80024fc:	753b      	strb	r3, [r7, #20]
 80024fe:	e001      	b.n	8002504 <LCD_IO_ReadCmd8MultipleData24to16+0x1d4>
 8002500:	2300      	movs	r3, #0
 8002502:	753b      	strb	r3, [r7, #20]
 8002504:	4b33      	ldr	r3, [pc, #204]	; (80025d4 <LCD_IO_ReadCmd8MultipleData24to16+0x2a4>)
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d004      	beq.n	800251a <LCD_IO_ReadCmd8MultipleData24to16+0x1ea>
 8002510:	7d3b      	ldrb	r3, [r7, #20]
 8002512:	f043 0302 	orr.w	r3, r3, #2
 8002516:	b2db      	uxtb	r3, r3
 8002518:	753b      	strb	r3, [r7, #20]
 800251a:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d004      	beq.n	8002530 <LCD_IO_ReadCmd8MultipleData24to16+0x200>
 8002526:	7d3b      	ldrb	r3, [r7, #20]
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	b2db      	uxtb	r3, r3
 800252e:	753b      	strb	r3, [r7, #20]
 8002530:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d004      	beq.n	8002546 <LCD_IO_ReadCmd8MultipleData24to16+0x216>
 800253c:	7d3b      	ldrb	r3, [r7, #20]
 800253e:	f043 0308 	orr.w	r3, r3, #8
 8002542:	b2db      	uxtb	r3, r3
 8002544:	753b      	strb	r3, [r7, #20]
 8002546:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d004      	beq.n	800255c <LCD_IO_ReadCmd8MultipleData24to16+0x22c>
 8002552:	7d3b      	ldrb	r3, [r7, #20]
 8002554:	f043 0310 	orr.w	r3, r3, #16
 8002558:	b2db      	uxtb	r3, r3
 800255a:	753b      	strb	r3, [r7, #20]
 800255c:	4b1e      	ldr	r3, [pc, #120]	; (80025d8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002564:	2b00      	cmp	r3, #0
 8002566:	d004      	beq.n	8002572 <LCD_IO_ReadCmd8MultipleData24to16+0x242>
 8002568:	7d3b      	ldrb	r3, [r7, #20]
 800256a:	f043 0320 	orr.w	r3, r3, #32
 800256e:	b2db      	uxtb	r3, r3
 8002570:	753b      	strb	r3, [r7, #20]
 8002572:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d004      	beq.n	8002588 <LCD_IO_ReadCmd8MultipleData24to16+0x258>
 800257e:	7d3b      	ldrb	r3, [r7, #20]
 8002580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002584:	b2db      	uxtb	r3, r3
 8002586:	753b      	strb	r3, [r7, #20]
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d004      	beq.n	800259e <LCD_IO_ReadCmd8MultipleData24to16+0x26e>
 8002594:	7d3b      	ldrb	r3, [r7, #20]
 8002596:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800259a:	b2db      	uxtb	r3, r3
 800259c:	753b      	strb	r3, [r7, #20]
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 80025a0:	2208      	movs	r2, #8
 80025a2:	619a      	str	r2, [r3, #24]
    LCD_DATA8_READ(rgb888[1]);
 80025a4:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 80025a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80025aa:	619a      	str	r2, [r3, #24]
 80025ac:	2012      	movs	r0, #18
 80025ae:	f7fe fcbf 	bl	8000f30 <LCD_IO_Delay>
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d010      	beq.n	80025e0 <LCD_IO_ReadCmd8MultipleData24to16+0x2b0>
 80025be:	2301      	movs	r3, #1
 80025c0:	757b      	strb	r3, [r7, #21]
 80025c2:	e00f      	b.n	80025e4 <LCD_IO_ReadCmd8MultipleData24to16+0x2b4>
 80025c4:	58020400 	.word	0x58020400
 80025c8:	58020800 	.word	0x58020800
 80025cc:	240000ac 	.word	0x240000ac
 80025d0:	58021800 	.word	0x58021800
 80025d4:	58020c00 	.word	0x58020c00
 80025d8:	58021000 	.word	0x58021000
 80025dc:	58020000 	.word	0x58020000
 80025e0:	2300      	movs	r3, #0
 80025e2:	757b      	strb	r3, [r7, #21]
 80025e4:	4b8c      	ldr	r3, [pc, #560]	; (8002818 <LCD_IO_ReadCmd8MultipleData24to16+0x4e8>)
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d004      	beq.n	80025fa <LCD_IO_ReadCmd8MultipleData24to16+0x2ca>
 80025f0:	7d7b      	ldrb	r3, [r7, #21]
 80025f2:	f043 0302 	orr.w	r3, r3, #2
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	757b      	strb	r3, [r7, #21]
 80025fa:	4b88      	ldr	r3, [pc, #544]	; (800281c <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <LCD_IO_ReadCmd8MultipleData24to16+0x2e0>
 8002606:	7d7b      	ldrb	r3, [r7, #21]
 8002608:	f043 0304 	orr.w	r3, r3, #4
 800260c:	b2db      	uxtb	r3, r3
 800260e:	757b      	strb	r3, [r7, #21]
 8002610:	4b83      	ldr	r3, [pc, #524]	; (8002820 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d004      	beq.n	8002626 <LCD_IO_ReadCmd8MultipleData24to16+0x2f6>
 800261c:	7d7b      	ldrb	r3, [r7, #21]
 800261e:	f043 0308 	orr.w	r3, r3, #8
 8002622:	b2db      	uxtb	r3, r3
 8002624:	757b      	strb	r3, [r7, #21]
 8002626:	4b7e      	ldr	r3, [pc, #504]	; (8002820 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d004      	beq.n	800263c <LCD_IO_ReadCmd8MultipleData24to16+0x30c>
 8002632:	7d7b      	ldrb	r3, [r7, #21]
 8002634:	f043 0310 	orr.w	r3, r3, #16
 8002638:	b2db      	uxtb	r3, r3
 800263a:	757b      	strb	r3, [r7, #21]
 800263c:	4b78      	ldr	r3, [pc, #480]	; (8002820 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <LCD_IO_ReadCmd8MultipleData24to16+0x322>
 8002648:	7d7b      	ldrb	r3, [r7, #21]
 800264a:	f043 0320 	orr.w	r3, r3, #32
 800264e:	b2db      	uxtb	r3, r3
 8002650:	757b      	strb	r3, [r7, #21]
 8002652:	4b74      	ldr	r3, [pc, #464]	; (8002824 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d004      	beq.n	8002668 <LCD_IO_ReadCmd8MultipleData24to16+0x338>
 800265e:	7d7b      	ldrb	r3, [r7, #21]
 8002660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002664:	b2db      	uxtb	r3, r3
 8002666:	757b      	strb	r3, [r7, #21]
 8002668:	4b6c      	ldr	r3, [pc, #432]	; (800281c <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <LCD_IO_ReadCmd8MultipleData24to16+0x34e>
 8002674:	7d7b      	ldrb	r3, [r7, #21]
 8002676:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800267a:	b2db      	uxtb	r3, r3
 800267c:	757b      	strb	r3, [r7, #21]
 800267e:	4b69      	ldr	r3, [pc, #420]	; (8002824 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 8002680:	2208      	movs	r2, #8
 8002682:	619a      	str	r2, [r3, #24]
    LCD_DATA8_READ(rgb888[2]);
 8002684:	4b67      	ldr	r3, [pc, #412]	; (8002824 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 8002686:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800268a:	619a      	str	r2, [r3, #24]
 800268c:	2012      	movs	r0, #18
 800268e:	f7fe fc4f 	bl	8000f30 <LCD_IO_Delay>
 8002692:	4b62      	ldr	r3, [pc, #392]	; (800281c <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <LCD_IO_ReadCmd8MultipleData24to16+0x374>
 800269e:	2301      	movs	r3, #1
 80026a0:	75bb      	strb	r3, [r7, #22]
 80026a2:	e001      	b.n	80026a8 <LCD_IO_ReadCmd8MultipleData24to16+0x378>
 80026a4:	2300      	movs	r3, #0
 80026a6:	75bb      	strb	r3, [r7, #22]
 80026a8:	4b5b      	ldr	r3, [pc, #364]	; (8002818 <LCD_IO_ReadCmd8MultipleData24to16+0x4e8>)
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d004      	beq.n	80026be <LCD_IO_ReadCmd8MultipleData24to16+0x38e>
 80026b4:	7dbb      	ldrb	r3, [r7, #22]
 80026b6:	f043 0302 	orr.w	r3, r3, #2
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	75bb      	strb	r3, [r7, #22]
 80026be:	4b57      	ldr	r3, [pc, #348]	; (800281c <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d004      	beq.n	80026d4 <LCD_IO_ReadCmd8MultipleData24to16+0x3a4>
 80026ca:	7dbb      	ldrb	r3, [r7, #22]
 80026cc:	f043 0304 	orr.w	r3, r3, #4
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	75bb      	strb	r3, [r7, #22]
 80026d4:	4b52      	ldr	r3, [pc, #328]	; (8002820 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d004      	beq.n	80026ea <LCD_IO_ReadCmd8MultipleData24to16+0x3ba>
 80026e0:	7dbb      	ldrb	r3, [r7, #22]
 80026e2:	f043 0308 	orr.w	r3, r3, #8
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	75bb      	strb	r3, [r7, #22]
 80026ea:	4b4d      	ldr	r3, [pc, #308]	; (8002820 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d004      	beq.n	8002700 <LCD_IO_ReadCmd8MultipleData24to16+0x3d0>
 80026f6:	7dbb      	ldrb	r3, [r7, #22]
 80026f8:	f043 0310 	orr.w	r3, r3, #16
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	75bb      	strb	r3, [r7, #22]
 8002700:	4b47      	ldr	r3, [pc, #284]	; (8002820 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002708:	2b00      	cmp	r3, #0
 800270a:	d004      	beq.n	8002716 <LCD_IO_ReadCmd8MultipleData24to16+0x3e6>
 800270c:	7dbb      	ldrb	r3, [r7, #22]
 800270e:	f043 0320 	orr.w	r3, r3, #32
 8002712:	b2db      	uxtb	r3, r3
 8002714:	75bb      	strb	r3, [r7, #22]
 8002716:	4b43      	ldr	r3, [pc, #268]	; (8002824 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d004      	beq.n	800272c <LCD_IO_ReadCmd8MultipleData24to16+0x3fc>
 8002722:	7dbb      	ldrb	r3, [r7, #22]
 8002724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002728:	b2db      	uxtb	r3, r3
 800272a:	75bb      	strb	r3, [r7, #22]
 800272c:	4b3b      	ldr	r3, [pc, #236]	; (800281c <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <LCD_IO_ReadCmd8MultipleData24to16+0x412>
 8002738:	7dbb      	ldrb	r3, [r7, #22]
 800273a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800273e:	b2db      	uxtb	r3, r3
 8002740:	75bb      	strb	r3, [r7, #22]
 8002742:	4b38      	ldr	r3, [pc, #224]	; (8002824 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 8002744:	2208      	movs	r2, #8
 8002746:	619a      	str	r2, [r3, #24]
    #if LCD_REVERSE16 == 0
    *pData = ((rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3);
 8002748:	7d3b      	ldrb	r3, [r7, #20]
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	b21a      	sxth	r2, r3
 800274e:	4b36      	ldr	r3, [pc, #216]	; (8002828 <LCD_IO_ReadCmd8MultipleData24to16+0x4f8>)
 8002750:	4013      	ands	r3, r2
 8002752:	b21a      	sxth	r2, r3
 8002754:	7d7b      	ldrb	r3, [r7, #21]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	b21b      	sxth	r3, r3
 800275a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800275e:	b21b      	sxth	r3, r3
 8002760:	4313      	orrs	r3, r2
 8002762:	b21a      	sxth	r2, r3
 8002764:	7dbb      	ldrb	r3, [r7, #22]
 8002766:	08db      	lsrs	r3, r3, #3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	b21b      	sxth	r3, r3
 800276c:	4313      	orrs	r3, r2
 800276e:	b21b      	sxth	r3, r3
 8002770:	b29a      	uxth	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	801a      	strh	r2, [r3, #0]
    #else
    *pData = __REVSH((rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3);
    #endif
    pData++;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	3302      	adds	r3, #2
 800277a:	60bb      	str	r3, [r7, #8]
  while(Size--)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	1e5a      	subs	r2, r3, #1
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f47f aeac 	bne.w	80024e0 <LCD_IO_ReadCmd8MultipleData24to16+0x1b0>
  }
  LCD_CS_OFF;
 8002788:	4b28      	ldr	r3, [pc, #160]	; (800282c <LCD_IO_ReadCmd8MultipleData24to16+0x4fc>)
 800278a:	2202      	movs	r2, #2
 800278c:	619a      	str	r2, [r3, #24]
  LCD_DIRWRITE;
 800278e:	4b23      	ldr	r3, [pc, #140]	; (800281c <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002796:	4a21      	ldr	r2, [pc, #132]	; (800281c <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 8002798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <LCD_IO_ReadCmd8MultipleData24to16+0x4e8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80027a6:	4a1c      	ldr	r2, [pc, #112]	; (8002818 <LCD_IO_ReadCmd8MultipleData24to16+0x4e8>)
 80027a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	4b1b      	ldr	r3, [pc, #108]	; (800281c <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80027b6:	4a19      	ldr	r2, [pc, #100]	; (800281c <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 80027b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b18      	ldr	r3, [pc, #96]	; (8002820 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80027c6:	4a16      	ldr	r2, [pc, #88]	; (8002820 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80027c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	4b14      	ldr	r3, [pc, #80]	; (8002820 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80027d6:	4a12      	ldr	r2, [pc, #72]	; (8002820 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80027d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80027e6:	4a0e      	ldr	r2, [pc, #56]	; (8002820 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80027e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80027f6:	4a0b      	ldr	r2, [pc, #44]	; (8002824 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	4b07      	ldr	r3, [pc, #28]	; (800281c <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002806:	4a05      	ldr	r2, [pc, #20]	; (800281c <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 8002808:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800280c:	6013      	str	r3, [r2, #0]
}
 800280e:	bf00      	nop
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	58020c00 	.word	0x58020c00
 800281c:	58021800 	.word	0x58021800
 8002820:	58021000 	.word	0x58021000
 8002824:	58020000 	.word	0x58020000
 8002828:	fffff800 	.word	0xfffff800
 800282c:	58020400 	.word	0x58020400

08002830 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 800283a:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <BSP_LCD_Init+0x34>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <BSP_LCD_Init+0x38>)
 8002844:	2200      	movs	r2, #0
 8002846:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8002848:	4b07      	ldr	r3, [pc, #28]	; (8002868 <BSP_LCD_Init+0x38>)
 800284a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800284e:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <BSP_LCD_Init+0x38>)
 8002852:	4a06      	ldr	r2, [pc, #24]	; (800286c <BSP_LCD_Init+0x3c>)
 8002854:	609a      	str	r2, [r3, #8]
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
  #endif
  
  ret = LCD_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800285a:	79fb      	ldrb	r3, [r7, #7]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	2400006c 	.word	0x2400006c
 8002868:	240000b0 	.word	0x240000b0
 800286c:	24000020 	.word	0x24000020

08002870 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <BSP_LCD_GetXSize+0x14>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	4798      	blx	r3
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	2400006c 	.word	0x2400006c

08002888 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 800288c:	4b03      	ldr	r3, [pc, #12]	; (800289c <BSP_LCD_GetYSize+0x14>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	4798      	blx	r3
 8002894:	4603      	mov	r3, r0
}
 8002896:	4618      	mov	r0, r3
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	2400006c 	.word	0x2400006c

080028a0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 80028a0:	b5b0      	push	{r4, r5, r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	4603      	mov	r3, r0
 80028a8:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 80028aa:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <BSP_LCD_Clear+0x38>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80028b0:	f7ff ffde 	bl	8002870 <BSP_LCD_GetXSize>
 80028b4:	4603      	mov	r3, r0
 80028b6:	461d      	mov	r5, r3
 80028b8:	f7ff ffe6 	bl	8002888 <BSP_LCD_GetYSize>
 80028bc:	4603      	mov	r3, r0
 80028be:	461a      	mov	r2, r3
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	462a      	mov	r2, r5
 80028c8:	2100      	movs	r1, #0
 80028ca:	2000      	movs	r0, #0
 80028cc:	47a0      	blx	r4
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bdb0      	pop	{r4, r5, r7, pc}
 80028d6:	bf00      	nop
 80028d8:	2400006c 	.word	0x2400006c

080028dc <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	80fb      	strh	r3, [r7, #6]
 80028e6:	460b      	mov	r3, r1
 80028e8:	80bb      	strh	r3, [r7, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 80028ee:	4b08      	ldr	r3, [pc, #32]	; (8002910 <BSP_LCD_DrawPixel+0x34>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d006      	beq.n	8002906 <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <BSP_LCD_DrawPixel+0x34>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	88b9      	ldrh	r1, [r7, #4]
 8002902:	88f8      	ldrh	r0, [r7, #6]
 8002904:	4798      	blx	r3
  }
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	2400006c 	.word	0x2400006c

08002914 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	80fb      	strh	r3, [r7, #6]
 800291e:	460b      	mov	r3, r1
 8002920:	80bb      	strh	r3, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 800292a:	4b15      	ldr	r3, [pc, #84]	; (8002980 <BSP_LCD_DrawHLine+0x6c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002934:	4b12      	ldr	r3, [pc, #72]	; (8002980 <BSP_LCD_DrawHLine+0x6c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6a1c      	ldr	r4, [r3, #32]
 800293a:	4b12      	ldr	r3, [pc, #72]	; (8002984 <BSP_LCD_DrawHLine+0x70>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	b298      	uxth	r0, r3
 8002940:	887b      	ldrh	r3, [r7, #2]
 8002942:	88ba      	ldrh	r2, [r7, #4]
 8002944:	88f9      	ldrh	r1, [r7, #6]
 8002946:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8002948:	e015      	b.n	8002976 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	e00e      	b.n	800296e <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	b29a      	uxth	r2, r3
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	4413      	add	r3, r2
 8002958:	b29b      	uxth	r3, r3
 800295a:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <BSP_LCD_DrawHLine+0x70>)
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	b292      	uxth	r2, r2
 8002960:	88b9      	ldrh	r1, [r7, #4]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff ffba 	bl	80028dc <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	3301      	adds	r3, #1
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	887b      	ldrh	r3, [r7, #2]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	429a      	cmp	r2, r3
 8002974:	d3ec      	bcc.n	8002950 <BSP_LCD_DrawHLine+0x3c>
}
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	bd90      	pop	{r4, r7, pc}
 800297e:	bf00      	nop
 8002980:	2400006c 	.word	0x2400006c
 8002984:	240000b0 	.word	0x240000b0

08002988 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	80fb      	strh	r3, [r7, #6]
 8002992:	460b      	mov	r3, r1
 8002994:	80bb      	strh	r3, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 800299e:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <BSP_LCD_DrawVLine+0x6c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80029a8:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <BSP_LCD_DrawVLine+0x6c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80029ae:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <BSP_LCD_DrawVLine+0x70>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	b298      	uxth	r0, r3
 80029b4:	887b      	ldrh	r3, [r7, #2]
 80029b6:	88ba      	ldrh	r2, [r7, #4]
 80029b8:	88f9      	ldrh	r1, [r7, #6]
 80029ba:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 80029bc:	e015      	b.n	80029ea <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	e00e      	b.n	80029e2 <BSP_LCD_DrawVLine+0x5a>
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	88bb      	ldrh	r3, [r7, #4]
 80029ca:	4413      	add	r3, r2
 80029cc:	b299      	uxth	r1, r3
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <BSP_LCD_DrawVLine+0x70>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff ff80 	bl	80028dc <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	3301      	adds	r3, #1
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	887b      	ldrh	r3, [r7, #2]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d3ec      	bcc.n	80029c4 <BSP_LCD_DrawVLine+0x3c>
}
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd90      	pop	{r4, r7, pc}
 80029f2:	bf00      	nop
 80029f4:	2400006c 	.word	0x2400006c
 80029f8:	240000b0 	.word	0x240000b0

080029fc <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80029fc:	b590      	push	{r4, r7, lr}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4604      	mov	r4, r0
 8002a04:	4608      	mov	r0, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4623      	mov	r3, r4
 8002a0c:	80fb      	strh	r3, [r7, #6]
 8002a0e:	4603      	mov	r3, r0
 8002a10:	80bb      	strh	r3, [r7, #4]
 8002a12:	460b      	mov	r3, r1
 8002a14:	807b      	strh	r3, [r7, #2]
 8002a16:	4613      	mov	r3, r2
 8002a18:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8002a1a:	887a      	ldrh	r2, [r7, #2]
 8002a1c:	88b9      	ldrh	r1, [r7, #4]
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff77 	bl	8002914 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos + Height - 1), Width);
 8002a26:	88ba      	ldrh	r2, [r7, #4]
 8002a28:	883b      	ldrh	r3, [r7, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b299      	uxth	r1, r3
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	88fb      	ldrh	r3, [r7, #6]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff ff6c 	bl	8002914 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8002a3c:	883a      	ldrh	r2, [r7, #0]
 8002a3e:	88b9      	ldrh	r1, [r7, #4]
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff ffa0 	bl	8002988 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width - 1), Ypos, Height);
 8002a48:	88fa      	ldrh	r2, [r7, #6]
 8002a4a:	887b      	ldrh	r3, [r7, #2]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	883a      	ldrh	r2, [r7, #0]
 8002a56:	88b9      	ldrh	r1, [r7, #4]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff95 	bl	8002988 <BSP_LCD_DrawVLine>
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd90      	pop	{r4, r7, pc}
	...

08002a68 <BSP_LCD_DisplayOn>:
  * @brief  Enables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  lcd_drv->DisplayOn();
 8002a6c:	4b02      	ldr	r3, [pc, #8]	; (8002a78 <BSP_LCD_DisplayOn+0x10>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	4798      	blx	r3
}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	2400006c 	.word	0x2400006c

08002a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a82:	f000 feb7 	bl	80037f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a86:	f000 f9cd 	bl	8002e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a8a:	f000 fabd 	bl	8003008 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002a8e:	f000 fa67 	bl	8002f60 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8002a92:	f000 fab1 	bl	8002ff8 <MX_USB_OTG_HS_USB_Init>
  MX_TIM17_Init();
 8002a96:	f000 fa3b 	bl	8002f10 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim17);
  ili9486_Init();
 8002a9a:	f7fd fde9 	bl	8000670 <ili9486_Init>
  ili9486_DisplayOn();
 8002a9e:	f7fd fda7 	bl	80005f0 <ili9486_DisplayOn>

  BSP_LCD_Init();
 8002aa2:	f7ff fec5 	bl	8002830 <BSP_LCD_Init>
  BSP_LCD_DisplayOn();
 8002aa6:	f7ff ffdf 	bl	8002a68 <BSP_LCD_DisplayOn>

  baaa[0] = ili9486_GetLcdPixelWidth();
 8002aaa:	f7fd fdb5 	bl	8000618 <ili9486_GetLcdPixelWidth>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <main+0x110>)
 8002ab4:	801a      	strh	r2, [r3, #0]
  baaa[1] = ili9486_GetLcdPixelHeight();
 8002ab6:	f7fd fdb8 	bl	800062a <ili9486_GetLcdPixelHeight>
 8002aba:	4603      	mov	r3, r0
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	4b33      	ldr	r3, [pc, #204]	; (8002b8c <main+0x110>)
 8002ac0:	805a      	strh	r2, [r3, #2]
  baaa[2] = ili9486_ReadID();
 8002ac2:	f7fd fdbb 	bl	800063c <ili9486_ReadID>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	4b30      	ldr	r3, [pc, #192]	; (8002b8c <main+0x110>)
 8002acc:	809a      	strh	r2, [r3, #4]

  //// force start testfont screen 3
  flag_blue = 3;
 8002ace:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <main+0x114>)
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GetTick() - timestamp_one >= 3000){
 8002ad4:	f000 ff14 	bl	8003900 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b2e      	ldr	r3, [pc, #184]	; (8002b94 <main+0x118>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d908      	bls.n	8002afa <main+0x7e>
		  timestamp_one = HAL_GetTick();
 8002ae8:	f000 ff0a 	bl	8003900 <HAL_GetTick>
 8002aec:	4603      	mov	r3, r0
 8002aee:	4a29      	ldr	r2, [pc, #164]	; (8002b94 <main+0x118>)
 8002af0:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002af2:	2102      	movs	r1, #2
 8002af4:	4828      	ldr	r0, [pc, #160]	; (8002b98 <main+0x11c>)
 8002af6:	f001 fa0c 	bl	8003f12 <HAL_GPIO_TogglePin>
	  }


	  if(HAL_GetTick() - timestamp_two >= 20){
 8002afa:	f000 ff01 	bl	8003900 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <main+0x120>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b13      	cmp	r3, #19
 8002b08:	d908      	bls.n	8002b1c <main+0xa0>
		  timestamp_two = HAL_GetTick();
 8002b0a:	f000 fef9 	bl	8003900 <HAL_GetTick>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <main+0x120>)
 8002b12:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002b14:	2101      	movs	r1, #1
 8002b16:	4822      	ldr	r0, [pc, #136]	; (8002ba0 <main+0x124>)
 8002b18:	f001 f9fb 	bl	8003f12 <HAL_GPIO_TogglePin>
	  }

	  if(flag_blue == 4){
 8002b1c:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <main+0x114>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d10c      	bne.n	8002b3e <main+0xc2>
		  BSP_LCD_Clear(0xff00);
 8002b24:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8002b28:	f7ff feba 	bl	80028a0 <BSP_LCD_Clear>
		  BSP_LCD_DrawRect(50, 50, 50, 50);
 8002b2c:	2332      	movs	r3, #50	; 0x32
 8002b2e:	2232      	movs	r2, #50	; 0x32
 8002b30:	2132      	movs	r1, #50	; 0x32
 8002b32:	2032      	movs	r0, #50	; 0x32
 8002b34:	f7ff ff62 	bl	80029fc <BSP_LCD_DrawRect>
		  flag_blue = 0;
 8002b38:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <main+0x114>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_blue == 3){
 8002b3e:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <main+0x114>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	f040 80fa 	bne.w	8002d3c <main+0x2c0>
	  		  ili9486_FillRect(0, 0, 480, 320, 0x0000);
 8002b48:	2300      	movs	r3, #0
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b50:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002b54:	2100      	movs	r1, #0
 8002b56:	2000      	movs	r0, #0
 8002b58:	f7fd fffc 	bl	8000b54 <ili9486_FillRect>
	  		  ili9486_DrawRGBImage(50, 100, 128, 128, (uint16_t*)image_data_ImageoftestN2);
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <main+0x128>)
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	2164      	movs	r1, #100	; 0x64
 8002b66:	2032      	movs	r0, #50	; 0x32
 8002b68:	f7fe f8b6 	bl	8000cd8 <ili9486_DrawRGBImage>
	  		  ili9486_DrawRGBImage(300, 100, 128, 90, (uint16_t*)image_data_owlflood);
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <main+0x12c>)
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	235a      	movs	r3, #90	; 0x5a
 8002b72:	2280      	movs	r2, #128	; 0x80
 8002b74:	2164      	movs	r1, #100	; 0x64
 8002b76:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002b7a:	f7fe f8ad 	bl	8000cd8 <ili9486_DrawRGBImage>


	  		  for(int i = 0; i < 40; i = i + 2){
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	e026      	b.n	8002bd2 <main+0x156>
	  			  for(int j = 0; j < 60; j = j + 4)
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	e01d      	b.n	8002bc6 <main+0x14a>
 8002b8a:	bf00      	nop
 8002b8c:	24000198 	.word	0x24000198
 8002b90:	240001a3 	.word	0x240001a3
 8002b94:	240001bc 	.word	0x240001bc
 8002b98:	58021000 	.word	0x58021000
 8002b9c:	240001c0 	.word	0x240001c0
 8002ba0:	58020400 	.word	0x58020400
 8002ba4:	0800bba4 	.word	0x0800bba4
 8002ba8:	08013ba4 	.word	0x08013ba4
	  			ili9486_WritePixel(210 + i, 80 + j, cl_GREEN);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f103 00d2 	add.w	r0, r3, #210	; 0xd2
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	3350      	adds	r3, #80	; 0x50
 8002bb6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f7fd fe12 	bl	80007e4 <ili9486_WritePixel>
	  			  for(int j = 0; j < 60; j = j + 4)
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	2b3b      	cmp	r3, #59	; 0x3b
 8002bca:	ddef      	ble.n	8002bac <main+0x130>
	  		  for(int i = 0; i < 40; i = i + 2){
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	3302      	adds	r3, #2
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b27      	cmp	r3, #39	; 0x27
 8002bd6:	ddd5      	ble.n	8002b84 <main+0x108>
//	  		  ili9486_WriteChar(50, 20, "R", Font12, cl_WHITE);
//	  		  ili9486_WriteChar(80, 20, "R", Font16, cl_WHITE);
//	  		  ili9486_WriteChar(110, 20, "R", Font20, cl_WHITE);
//	  		  ili9486_WriteChar(140, 20, "R", Font24, cl_WHITE);

	  		  ili9486_WriteChar(20, 50, "E", Font8, cl_WHITE);
 8002bd8:	4b85      	ldr	r3, [pc, #532]	; (8002df0 <main+0x374>)
 8002bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bde:	9201      	str	r2, [sp, #4]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	9200      	str	r2, [sp, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a83      	ldr	r2, [pc, #524]	; (8002df4 <main+0x378>)
 8002be8:	2132      	movs	r1, #50	; 0x32
 8002bea:	2014      	movs	r0, #20
 8002bec:	f7fe f8c8 	bl	8000d80 <ili9486_WriteChar>
			  ili9486_WriteChar(50, 50, "E", Font12, cl_WHITE);
 8002bf0:	4b81      	ldr	r3, [pc, #516]	; (8002df8 <main+0x37c>)
 8002bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bf6:	9201      	str	r2, [sp, #4]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	9200      	str	r2, [sp, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a7d      	ldr	r2, [pc, #500]	; (8002df4 <main+0x378>)
 8002c00:	2132      	movs	r1, #50	; 0x32
 8002c02:	2032      	movs	r0, #50	; 0x32
 8002c04:	f7fe f8bc 	bl	8000d80 <ili9486_WriteChar>
			  ili9486_WriteChar(80, 50, "E", Font16, cl_WHITE);
 8002c08:	4b7c      	ldr	r3, [pc, #496]	; (8002dfc <main+0x380>)
 8002c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c0e:	9201      	str	r2, [sp, #4]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	9200      	str	r2, [sp, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a77      	ldr	r2, [pc, #476]	; (8002df4 <main+0x378>)
 8002c18:	2132      	movs	r1, #50	; 0x32
 8002c1a:	2050      	movs	r0, #80	; 0x50
 8002c1c:	f7fe f8b0 	bl	8000d80 <ili9486_WriteChar>
			  ili9486_WriteChar(110, 50, "E", Font20, cl_WHITE);
 8002c20:	4b77      	ldr	r3, [pc, #476]	; (8002e00 <main+0x384>)
 8002c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c26:	9201      	str	r2, [sp, #4]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	9200      	str	r2, [sp, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a71      	ldr	r2, [pc, #452]	; (8002df4 <main+0x378>)
 8002c30:	2132      	movs	r1, #50	; 0x32
 8002c32:	206e      	movs	r0, #110	; 0x6e
 8002c34:	f7fe f8a4 	bl	8000d80 <ili9486_WriteChar>
			  ili9486_WriteChar(140, 50, "E", Font24, cl_WHITE);
 8002c38:	4b72      	ldr	r3, [pc, #456]	; (8002e04 <main+0x388>)
 8002c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c3e:	9201      	str	r2, [sp, #4]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	9200      	str	r2, [sp, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a6b      	ldr	r2, [pc, #428]	; (8002df4 <main+0x378>)
 8002c48:	2132      	movs	r1, #50	; 0x32
 8002c4a:	208c      	movs	r0, #140	; 0x8c
 8002c4c:	f7fe f898 	bl	8000d80 <ili9486_WriteChar>

			  //ili9486_FillRect(198, 30, 2, 30, cl_YELLOW);
			  ili9486_DrawVLine(cl_YELLOW, 200, 40, 24);
 8002c50:	2318      	movs	r3, #24
 8002c52:	2228      	movs	r2, #40	; 0x28
 8002c54:	21c8      	movs	r1, #200	; 0xc8
 8002c56:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c5a:	f7fd ff24 	bl	8000aa6 <ili9486_DrawVLine>
			  ili9486_DrawVLine(cl_YELLOW, 225, 40, 24);
 8002c5e:	2318      	movs	r3, #24
 8002c60:	2228      	movs	r2, #40	; 0x28
 8002c62:	21e1      	movs	r1, #225	; 0xe1
 8002c64:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c68:	f7fd ff1d 	bl	8000aa6 <ili9486_DrawVLine>
			  //// Font24 @2664 E
			  ili_fonttest(200, 40, "A", Font24, cl_WHITE);
 8002c6c:	4b65      	ldr	r3, [pc, #404]	; (8002e04 <main+0x388>)
 8002c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c72:	9201      	str	r2, [sp, #4]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	9200      	str	r2, [sp, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a63      	ldr	r2, [pc, #396]	; (8002e08 <main+0x38c>)
 8002c7c:	2128      	movs	r1, #40	; 0x28
 8002c7e:	20c8      	movs	r0, #200	; 0xc8
 8002c80:	f000 fb36 	bl	80032f0 <ili_fonttest>
			  ili_fonttest(225, 40, "B", Font24, cl_WHITE);
 8002c84:	4b5f      	ldr	r3, [pc, #380]	; (8002e04 <main+0x388>)
 8002c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c8a:	9201      	str	r2, [sp, #4]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	9200      	str	r2, [sp, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a5e      	ldr	r2, [pc, #376]	; (8002e0c <main+0x390>)
 8002c94:	2128      	movs	r1, #40	; 0x28
 8002c96:	20e1      	movs	r0, #225	; 0xe1
 8002c98:	f000 fb2a 	bl	80032f0 <ili_fonttest>
			  ili_fonttest(250, 40, "C", Font24, cl_WHITE);
 8002c9c:	4b59      	ldr	r3, [pc, #356]	; (8002e04 <main+0x388>)
 8002c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ca2:	9201      	str	r2, [sp, #4]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	9200      	str	r2, [sp, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a59      	ldr	r2, [pc, #356]	; (8002e10 <main+0x394>)
 8002cac:	2128      	movs	r1, #40	; 0x28
 8002cae:	20fa      	movs	r0, #250	; 0xfa
 8002cb0:	f000 fb1e 	bl	80032f0 <ili_fonttest>
			  ili_fonttest(275, 40, "D", Font24, cl_WHITE);
 8002cb4:	4b53      	ldr	r3, [pc, #332]	; (8002e04 <main+0x388>)
 8002cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cba:	9201      	str	r2, [sp, #4]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	9200      	str	r2, [sp, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a54      	ldr	r2, [pc, #336]	; (8002e14 <main+0x398>)
 8002cc4:	2128      	movs	r1, #40	; 0x28
 8002cc6:	f240 1013 	movw	r0, #275	; 0x113
 8002cca:	f000 fb11 	bl	80032f0 <ili_fonttest>

			  ili_fonttest(300, 40, "A", Font8, cl_WHITE);
 8002cce:	4b48      	ldr	r3, [pc, #288]	; (8002df0 <main+0x374>)
 8002cd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cd4:	9201      	str	r2, [sp, #4]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	9200      	str	r2, [sp, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a4a      	ldr	r2, [pc, #296]	; (8002e08 <main+0x38c>)
 8002cde:	2128      	movs	r1, #40	; 0x28
 8002ce0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ce4:	f000 fb04 	bl	80032f0 <ili_fonttest>
			  ili_fonttest(325, 40, "B", Font12, cl_WHITE);
 8002ce8:	4b43      	ldr	r3, [pc, #268]	; (8002df8 <main+0x37c>)
 8002cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cee:	9201      	str	r2, [sp, #4]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	9200      	str	r2, [sp, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a45      	ldr	r2, [pc, #276]	; (8002e0c <main+0x390>)
 8002cf8:	2128      	movs	r1, #40	; 0x28
 8002cfa:	f240 1045 	movw	r0, #325	; 0x145
 8002cfe:	f000 faf7 	bl	80032f0 <ili_fonttest>
			  ili_fonttest(350, 40, "C", Font16, cl_WHITE);
 8002d02:	4b3e      	ldr	r3, [pc, #248]	; (8002dfc <main+0x380>)
 8002d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d08:	9201      	str	r2, [sp, #4]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	9200      	str	r2, [sp, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a3f      	ldr	r2, [pc, #252]	; (8002e10 <main+0x394>)
 8002d12:	2128      	movs	r1, #40	; 0x28
 8002d14:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8002d18:	f000 faea 	bl	80032f0 <ili_fonttest>
			  ili_fonttest(375, 40, "D", Font20, cl_WHITE);
 8002d1c:	4b38      	ldr	r3, [pc, #224]	; (8002e00 <main+0x384>)
 8002d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d22:	9201      	str	r2, [sp, #4]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	9200      	str	r2, [sp, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a3a      	ldr	r2, [pc, #232]	; (8002e14 <main+0x398>)
 8002d2c:	2128      	movs	r1, #40	; 0x28
 8002d2e:	f240 1077 	movw	r0, #375	; 0x177
 8002d32:	f000 fadd 	bl	80032f0 <ili_fonttest>

	  		  flag_blue = 0; // comment this to forever loop
 8002d36:	4b38      	ldr	r3, [pc, #224]	; (8002e18 <main+0x39c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
	  	  }

	  if(flag_blue == 1){
 8002d3c:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <main+0x39c>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d104      	bne.n	8002d4e <main+0x2d2>
		  ili_screen_1();
 8002d44:	f000 fa82 	bl	800324c <ili_screen_1>
		  flag_blue = 0;
 8002d48:	4b33      	ldr	r3, [pc, #204]	; (8002e18 <main+0x39c>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	701a      	strb	r2, [r3, #0]

	  }

	  if(flag_blue == 2){
 8002d4e:	4b32      	ldr	r3, [pc, #200]	; (8002e18 <main+0x39c>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	f47f aebe 	bne.w	8002ad4 <main+0x58>
		  //// Running Box ////
		  if(ff == 1){
 8002d58:	4b30      	ldr	r3, [pc, #192]	; (8002e1c <main+0x3a0>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d10d      	bne.n	8002d7c <main+0x300>
			  ili9486_FillRect(0, 0, 480, 320, 0xF792); // screen
 8002d60:	f24f 7392 	movw	r3, #63378	; 0xf792
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002d6a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002d6e:	2100      	movs	r1, #0
 8002d70:	2000      	movs	r0, #0
 8002d72:	f7fd feef 	bl	8000b54 <ili9486_FillRect>
			  ff = 0;
 8002d76:	4b29      	ldr	r3, [pc, #164]	; (8002e1c <main+0x3a0>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	701a      	strb	r2, [r3, #0]
		  }
		  int ratte = 1;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	60fb      	str	r3, [r7, #12]
		  int sizo = 40;
 8002d80:	2328      	movs	r3, #40	; 0x28
 8002d82:	60bb      	str	r3, [r7, #8]
		  int offs = 140;
 8002d84:	238c      	movs	r3, #140	; 0x8c
 8002d86:	607b      	str	r3, [r7, #4]
		  static uint16_t xsh = 0;
		  ili9486_FillRect(xsh, offs, ratte ,sizo, 0xF792);
 8002d88:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <main+0x3a4>)
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f24f 7392 	movw	r3, #63378	; 0xf792
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	f7fd fedb 	bl	8000b54 <ili9486_FillRect>
		  xsh += ratte;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	4b1f      	ldr	r3, [pc, #124]	; (8002e20 <main+0x3a4>)
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	4413      	add	r3, r2
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <main+0x3a4>)
 8002dac:	801a      	strh	r2, [r3, #0]
		  ili9486_FillRect(xsh, offs, sizo, sizo, 0x0410); //// box
 8002dae:	4b1c      	ldr	r3, [pc, #112]	; (8002e20 <main+0x3a4>)
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	f7fd fec8 	bl	8000b54 <ili9486_FillRect>
		  if(xsh >= 480){ // clear
 8002dc4:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <main+0x3a4>)
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002dcc:	f4ff ae82 	bcc.w	8002ad4 <main+0x58>
			  ili9486_FillRect(xsh, offs, sizo, sizo, 0xF792);
 8002dd0:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <main+0x3a4>)
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f24f 7392 	movw	r3, #63378	; 0xf792
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	f7fd feb7 	bl	8000b54 <ili9486_FillRect>
			  xsh = 0;
 8002de6:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <main+0x3a4>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	801a      	strh	r2, [r3, #0]
	  if(HAL_GetTick() - timestamp_one >= 3000){
 8002dec:	e672      	b.n	8002ad4 <main+0x58>
 8002dee:	bf00      	nop
 8002df0:	24000020 	.word	0x24000020
 8002df4:	08007eb4 	.word	0x08007eb4
 8002df8:	24000000 	.word	0x24000000
 8002dfc:	24000008 	.word	0x24000008
 8002e00:	24000010 	.word	0x24000010
 8002e04:	24000018 	.word	0x24000018
 8002e08:	08007eb8 	.word	0x08007eb8
 8002e0c:	08007ebc 	.word	0x08007ebc
 8002e10:	08007ec0 	.word	0x08007ec0
 8002e14:	08007ec4 	.word	0x08007ec4
 8002e18:	240001a3 	.word	0x240001a3
 8002e1c:	240001a4 	.word	0x240001a4
 8002e20:	240001d0 	.word	0x240001d0

08002e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b09c      	sub	sp, #112	; 0x70
 8002e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2e:	224c      	movs	r2, #76	; 0x4c
 8002e30:	2100      	movs	r1, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f004 ffa8 	bl	8007d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f004 ffa2 	bl	8007d88 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8002e44:	4b30      	ldr	r3, [pc, #192]	; (8002f08 <SystemClock_Config+0xe4>)
 8002e46:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002e4e:	2004      	movs	r0, #4
 8002e50:	f001 f894 	bl	8003f7c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002e54:	2300      	movs	r3, #0
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	4b2c      	ldr	r3, [pc, #176]	; (8002f0c <SystemClock_Config+0xe8>)
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	4a2b      	ldr	r2, [pc, #172]	; (8002f0c <SystemClock_Config+0xe8>)
 8002e5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e62:	6193      	str	r3, [r2, #24]
 8002e64:	4b29      	ldr	r3, [pc, #164]	; (8002f0c <SystemClock_Config+0xe8>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e6c:	603b      	str	r3, [r7, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002e70:	bf00      	nop
 8002e72:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <SystemClock_Config+0xe8>)
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e7e:	d1f8      	bne.n	8002e72 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002e80:	2321      	movs	r3, #33	; 0x21
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002e84:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e92:	2302      	movs	r3, #2
 8002e94:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002e96:	2301      	movs	r3, #1
 8002e98:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8002e9a:	2346      	movs	r3, #70	; 0x46
 8002e9c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ea2:	2304      	movs	r3, #4
 8002ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002eaa:	230c      	movs	r3, #12
 8002eac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f001 f8b8 	bl	8004030 <HAL_RCC_OscConfig>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002ec6:	f000 fb09 	bl	80034dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eca:	233f      	movs	r3, #63	; 0x3f
 8002ecc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002eda:	2340      	movs	r3, #64	; 0x40
 8002edc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002ede:	2340      	movs	r3, #64	; 0x40
 8002ee0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ee6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002ee8:	2340      	movs	r3, #64	; 0x40
 8002eea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	2107      	movs	r1, #7
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f001 fca1 	bl	8004838 <HAL_RCC_ClockConfig>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8002efc:	f000 faee 	bl	80034dc <Error_Handler>
  }
}
 8002f00:	bf00      	nop
 8002f02:	3770      	adds	r7, #112	; 0x70
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	58024400 	.word	0x58024400
 8002f0c:	58024800 	.word	0x58024800

08002f10 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002f14:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <MX_TIM17_Init+0x48>)
 8002f16:	4a11      	ldr	r2, [pc, #68]	; (8002f5c <MX_TIM17_Init+0x4c>)
 8002f18:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 279;
 8002f1a:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <MX_TIM17_Init+0x48>)
 8002f1c:	f240 1217 	movw	r2, #279	; 0x117
 8002f20:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <MX_TIM17_Init+0x48>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <MX_TIM17_Init+0x48>)
 8002f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f2e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f30:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <MX_TIM17_Init+0x48>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002f36:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <MX_TIM17_Init+0x48>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <MX_TIM17_Init+0x48>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002f42:	4805      	ldr	r0, [pc, #20]	; (8002f58 <MX_TIM17_Init+0x48>)
 8002f44:	f003 fb32 	bl	80065ac <HAL_TIM_Base_Init>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8002f4e:	f000 fac5 	bl	80034dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	240000bc 	.word	0x240000bc
 8002f5c:	40014800 	.word	0x40014800

08002f60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f64:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <MX_USART3_UART_Init+0x90>)
 8002f66:	4a23      	ldr	r2, [pc, #140]	; (8002ff4 <MX_USART3_UART_Init+0x94>)
 8002f68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f6a:	4b21      	ldr	r3, [pc, #132]	; (8002ff0 <MX_USART3_UART_Init+0x90>)
 8002f6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f72:	4b1f      	ldr	r3, [pc, #124]	; (8002ff0 <MX_USART3_UART_Init+0x90>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f78:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <MX_USART3_UART_Init+0x90>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f7e:	4b1c      	ldr	r3, [pc, #112]	; (8002ff0 <MX_USART3_UART_Init+0x90>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f84:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <MX_USART3_UART_Init+0x90>)
 8002f86:	220c      	movs	r2, #12
 8002f88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f8a:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <MX_USART3_UART_Init+0x90>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f90:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <MX_USART3_UART_Init+0x90>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f96:	4b16      	ldr	r3, [pc, #88]	; (8002ff0 <MX_USART3_UART_Init+0x90>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f9c:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <MX_USART3_UART_Init+0x90>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fa2:	4b13      	ldr	r3, [pc, #76]	; (8002ff0 <MX_USART3_UART_Init+0x90>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002fa8:	4811      	ldr	r0, [pc, #68]	; (8002ff0 <MX_USART3_UART_Init+0x90>)
 8002faa:	f003 fd55 	bl	8006a58 <HAL_UART_Init>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002fb4:	f000 fa92 	bl	80034dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fb8:	2100      	movs	r1, #0
 8002fba:	480d      	ldr	r0, [pc, #52]	; (8002ff0 <MX_USART3_UART_Init+0x90>)
 8002fbc:	f004 fdf6 	bl	8007bac <HAL_UARTEx_SetTxFifoThreshold>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002fc6:	f000 fa89 	bl	80034dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4808      	ldr	r0, [pc, #32]	; (8002ff0 <MX_USART3_UART_Init+0x90>)
 8002fce:	f004 fe2b 	bl	8007c28 <HAL_UARTEx_SetRxFifoThreshold>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002fd8:	f000 fa80 	bl	80034dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002fdc:	4804      	ldr	r0, [pc, #16]	; (8002ff0 <MX_USART3_UART_Init+0x90>)
 8002fde:	f004 fdac 	bl	8007b3a <HAL_UARTEx_DisableFifoMode>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002fe8:	f000 fa78 	bl	80034dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002fec:	bf00      	nop
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	24000108 	.word	0x24000108
 8002ff4:	40004800 	.word	0x40004800

08002ff8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08e      	sub	sp, #56	; 0x38
 800300c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	605a      	str	r2, [r3, #4]
 8003018:	609a      	str	r2, [r3, #8]
 800301a:	60da      	str	r2, [r3, #12]
 800301c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800301e:	4b84      	ldr	r3, [pc, #528]	; (8003230 <MX_GPIO_Init+0x228>)
 8003020:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003024:	4a82      	ldr	r2, [pc, #520]	; (8003230 <MX_GPIO_Init+0x228>)
 8003026:	f043 0304 	orr.w	r3, r3, #4
 800302a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800302e:	4b80      	ldr	r3, [pc, #512]	; (8003230 <MX_GPIO_Init+0x228>)
 8003030:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	623b      	str	r3, [r7, #32]
 800303a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800303c:	4b7c      	ldr	r3, [pc, #496]	; (8003230 <MX_GPIO_Init+0x228>)
 800303e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003042:	4a7b      	ldr	r2, [pc, #492]	; (8003230 <MX_GPIO_Init+0x228>)
 8003044:	f043 0320 	orr.w	r3, r3, #32
 8003048:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800304c:	4b78      	ldr	r3, [pc, #480]	; (8003230 <MX_GPIO_Init+0x228>)
 800304e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	61fb      	str	r3, [r7, #28]
 8003058:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800305a:	4b75      	ldr	r3, [pc, #468]	; (8003230 <MX_GPIO_Init+0x228>)
 800305c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003060:	4a73      	ldr	r2, [pc, #460]	; (8003230 <MX_GPIO_Init+0x228>)
 8003062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003066:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800306a:	4b71      	ldr	r3, [pc, #452]	; (8003230 <MX_GPIO_Init+0x228>)
 800306c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003074:	61bb      	str	r3, [r7, #24]
 8003076:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003078:	4b6d      	ldr	r3, [pc, #436]	; (8003230 <MX_GPIO_Init+0x228>)
 800307a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800307e:	4a6c      	ldr	r2, [pc, #432]	; (8003230 <MX_GPIO_Init+0x228>)
 8003080:	f043 0302 	orr.w	r3, r3, #2
 8003084:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003088:	4b69      	ldr	r3, [pc, #420]	; (8003230 <MX_GPIO_Init+0x228>)
 800308a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003096:	4b66      	ldr	r3, [pc, #408]	; (8003230 <MX_GPIO_Init+0x228>)
 8003098:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800309c:	4a64      	ldr	r2, [pc, #400]	; (8003230 <MX_GPIO_Init+0x228>)
 800309e:	f043 0308 	orr.w	r3, r3, #8
 80030a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80030a6:	4b62      	ldr	r3, [pc, #392]	; (8003230 <MX_GPIO_Init+0x228>)
 80030a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80030b4:	4b5e      	ldr	r3, [pc, #376]	; (8003230 <MX_GPIO_Init+0x228>)
 80030b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80030ba:	4a5d      	ldr	r2, [pc, #372]	; (8003230 <MX_GPIO_Init+0x228>)
 80030bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80030c4:	4b5a      	ldr	r3, [pc, #360]	; (8003230 <MX_GPIO_Init+0x228>)
 80030c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80030ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d2:	4b57      	ldr	r3, [pc, #348]	; (8003230 <MX_GPIO_Init+0x228>)
 80030d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80030d8:	4a55      	ldr	r2, [pc, #340]	; (8003230 <MX_GPIO_Init+0x228>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80030e2:	4b53      	ldr	r3, [pc, #332]	; (8003230 <MX_GPIO_Init+0x228>)
 80030e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030f0:	4b4f      	ldr	r3, [pc, #316]	; (8003230 <MX_GPIO_Init+0x228>)
 80030f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80030f6:	4a4e      	ldr	r2, [pc, #312]	; (8003230 <MX_GPIO_Init+0x228>)
 80030f8:	f043 0310 	orr.w	r3, r3, #16
 80030fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003100:	4b4b      	ldr	r3, [pc, #300]	; (8003230 <MX_GPIO_Init+0x228>)
 8003102:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	607b      	str	r3, [r7, #4]
 800310c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800310e:	2200      	movs	r2, #0
 8003110:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003114:	4847      	ldr	r0, [pc, #284]	; (8003234 <MX_GPIO_Init+0x22c>)
 8003116:	f000 fee3 	bl	8003ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800311a:	2200      	movs	r2, #0
 800311c:	f244 0101 	movw	r1, #16385	; 0x4001
 8003120:	4845      	ldr	r0, [pc, #276]	; (8003238 <MX_GPIO_Init+0x230>)
 8003122:	f000 fedd 	bl	8003ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003126:	2200      	movs	r2, #0
 8003128:	2102      	movs	r1, #2
 800312a:	4844      	ldr	r0, [pc, #272]	; (800323c <MX_GPIO_Init+0x234>)
 800312c:	f000 fed8 	bl	8003ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003136:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003144:	4619      	mov	r1, r3
 8003146:	483e      	ldr	r0, [pc, #248]	; (8003240 <MX_GPIO_Init+0x238>)
 8003148:	f000 fd1a 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800314c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003152:	2301      	movs	r3, #1
 8003154:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003156:	2300      	movs	r3, #0
 8003158:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315a:	2300      	movs	r3, #0
 800315c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800315e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003162:	4619      	mov	r1, r3
 8003164:	4833      	ldr	r0, [pc, #204]	; (8003234 <MX_GPIO_Init+0x22c>)
 8003166:	f000 fd0b 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800316a:	f244 0301 	movw	r3, #16385	; 0x4001
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003170:	2301      	movs	r3, #1
 8003172:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003178:	2300      	movs	r3, #0
 800317a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003180:	4619      	mov	r1, r3
 8003182:	482d      	ldr	r0, [pc, #180]	; (8003238 <MX_GPIO_Init+0x230>)
 8003184:	f000 fcfc 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800318c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003190:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8003196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800319a:	4619      	mov	r1, r3
 800319c:	4829      	ldr	r0, [pc, #164]	; (8003244 <MX_GPIO_Init+0x23c>)
 800319e:	f000 fcef 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80031a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031a8:	2300      	movs	r3, #0
 80031aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80031b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031b4:	4619      	mov	r1, r3
 80031b6:	4824      	ldr	r0, [pc, #144]	; (8003248 <MX_GPIO_Init+0x240>)
 80031b8:	f000 fce2 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80031bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c2:	2302      	movs	r3, #2
 80031c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ca:	2300      	movs	r3, #0
 80031cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80031ce:	230a      	movs	r3, #10
 80031d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80031d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d6:	4619      	mov	r1, r3
 80031d8:	481b      	ldr	r0, [pc, #108]	; (8003248 <MX_GPIO_Init+0x240>)
 80031da:	f000 fcd1 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80031de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e4:	2302      	movs	r3, #2
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ec:	2300      	movs	r3, #0
 80031ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031f4:	4619      	mov	r1, r3
 80031f6:	4814      	ldr	r0, [pc, #80]	; (8003248 <MX_GPIO_Init+0x240>)
 80031f8:	f000 fcc2 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80031fc:	2302      	movs	r3, #2
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003200:	2301      	movs	r3, #1
 8003202:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	2300      	movs	r3, #0
 8003206:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003208:	2300      	movs	r3, #0
 800320a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800320c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003210:	4619      	mov	r1, r3
 8003212:	480a      	ldr	r0, [pc, #40]	; (800323c <MX_GPIO_Init+0x234>)
 8003214:	f000 fcb4 	bl	8003b80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003218:	2200      	movs	r2, #0
 800321a:	2100      	movs	r1, #0
 800321c:	2028      	movs	r0, #40	; 0x28
 800321e:	f000 fc7a 	bl	8003b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003222:	2028      	movs	r0, #40	; 0x28
 8003224:	f000 fc91 	bl	8003b4a <HAL_NVIC_EnableIRQ>

}
 8003228:	bf00      	nop
 800322a:	3738      	adds	r7, #56	; 0x38
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	58024400 	.word	0x58024400
 8003234:	58021400 	.word	0x58021400
 8003238:	58020400 	.word	0x58020400
 800323c:	58021000 	.word	0x58021000
 8003240:	58020800 	.word	0x58020800
 8003244:	58021800 	.word	0x58021800
 8003248:	58020000 	.word	0x58020000

0800324c <ili_screen_1>:

/* USER CODE BEGIN 4 */
void ili_screen_1(){
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af02      	add	r7, sp, #8
	  ili9486_FillRect(0, 0, 480, 320, 0xffff);  // White BG
 8003252:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800325c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003260:	2100      	movs	r1, #0
 8003262:	2000      	movs	r0, #0
 8003264:	f7fd fc76 	bl	8000b54 <ili9486_FillRect>

	  ili9486_FillRect(30, 30, 100, 100, 0xF8E0); // Red
 8003268:	f64f 03e0 	movw	r3, #63712	; 0xf8e0
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	2364      	movs	r3, #100	; 0x64
 8003270:	2264      	movs	r2, #100	; 0x64
 8003272:	211e      	movs	r1, #30
 8003274:	201e      	movs	r0, #30
 8003276:	f7fd fc6d 	bl	8000b54 <ili9486_FillRect>
	  ili9486_FillRect(150, 30, 100, 100, 0x07E0); // Green RGB565
 800327a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	2364      	movs	r3, #100	; 0x64
 8003282:	2264      	movs	r2, #100	; 0x64
 8003284:	211e      	movs	r1, #30
 8003286:	2096      	movs	r0, #150	; 0x96
 8003288:	f7fd fc64 	bl	8000b54 <ili9486_FillRect>
	  ili9486_FillRect(270, 30, 100, 100, 0x001F); // Blue
 800328c:	231f      	movs	r3, #31
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	2364      	movs	r3, #100	; 0x64
 8003292:	2264      	movs	r2, #100	; 0x64
 8003294:	211e      	movs	r1, #30
 8003296:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800329a:	f7fd fc5b 	bl	8000b54 <ili9486_FillRect>

	  ili9486_FillRect(30, 160,  100, 100, cl_CYAN); // C0x07FF
 800329e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	2364      	movs	r3, #100	; 0x64
 80032a6:	2264      	movs	r2, #100	; 0x64
 80032a8:	21a0      	movs	r1, #160	; 0xa0
 80032aa:	201e      	movs	r0, #30
 80032ac:	f7fd fc52 	bl	8000b54 <ili9486_FillRect>
	  ili9486_FillRect(150, 160, 100, 100, cl_MAGENTA); // M 0xF81F
 80032b0:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	2364      	movs	r3, #100	; 0x64
 80032b8:	2264      	movs	r2, #100	; 0x64
 80032ba:	21a0      	movs	r1, #160	; 0xa0
 80032bc:	2096      	movs	r0, #150	; 0x96
 80032be:	f7fd fc49 	bl	8000b54 <ili9486_FillRect>
	  ili9486_FillRect(270, 160, 100, 100, cl_YELLOW); // Y0xFFE0
 80032c2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	2364      	movs	r3, #100	; 0x64
 80032ca:	2264      	movs	r2, #100	; 0x64
 80032cc:	21a0      	movs	r1, #160	; 0xa0
 80032ce:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80032d2:	f7fd fc3f 	bl	8000b54 <ili9486_FillRect>
	  ili9486_FillRect(390, 30, 70, 230, cl_BLACK); // K
 80032d6:	2300      	movs	r3, #0
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	23e6      	movs	r3, #230	; 0xe6
 80032dc:	2246      	movs	r2, #70	; 0x46
 80032de:	211e      	movs	r1, #30
 80032e0:	f44f 70c3 	mov.w	r0, #390	; 0x186
 80032e4:	f7fd fc36 	bl	8000b54 <ili9486_FillRect>
}
 80032e8:	bf00      	nop
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <ili_fonttest>:

void ili_fonttest(uint16_t Xpo, uint16_t Ypo, char *chr,sFONT fonto, uint16_t RGB_Coder){
 80032f0:	b082      	sub	sp, #8
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b088      	sub	sp, #32
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60ba      	str	r2, [r7, #8]
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032fc:	4603      	mov	r3, r0
 80032fe:	81fb      	strh	r3, [r7, #14]
 8003300:	460b      	mov	r3, r1
 8003302:	81bb      	strh	r3, [r7, #12]

	rowbox = ceilf((float)(fonto.Width) / 8);
 8003304:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003312:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003316:	eeb0 0a47 	vmov.f32	s0, s14
 800331a:	f004 fd3d 	bl	8007d98 <ceilf>
 800331e:	eef0 7a40 	vmov.f32	s15, s0
 8003322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003326:	edc7 7a01 	vstr	s15, [r7, #4]
 800332a:	793b      	ldrb	r3, [r7, #4]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	4b42      	ldr	r3, [pc, #264]	; (8003438 <ili_fonttest+0x148>)
 8003330:	701a      	strb	r2, [r3, #0]
	cliff = 0x80 << (8 * (rowbox - 1));
 8003332:	4b41      	ldr	r3, [pc, #260]	; (8003438 <ili_fonttest+0x148>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	3b01      	subs	r3, #1
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	2280      	movs	r2, #128	; 0x80
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	461a      	mov	r2, r3
 8003342:	4b3e      	ldr	r3, [pc, #248]	; (800343c <ili_fonttest+0x14c>)
 8003344:	601a      	str	r2, [r3, #0]
	//rowbox = (fonto.Width / 8) + 1;

	for(int i = 0; i < fonto.Height; i++){
 8003346:	2300      	movs	r3, #0
 8003348:	61fb      	str	r3, [r7, #28]
 800334a:	e068      	b.n	800341e <ili_fonttest+0x12e>
		//b = fonto.table[((chr - 31) * fonto.Height * rowbox)+ (i*rowbox)];
		chpos = (int)(*chr) - 32;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	b29b      	uxth	r3, r3
 8003352:	3b20      	subs	r3, #32
 8003354:	b29a      	uxth	r2, r3
 8003356:	4b3a      	ldr	r3, [pc, #232]	; (8003440 <ili_fonttest+0x150>)
 8003358:	801a      	strh	r2, [r3, #0]
		bfpos = ((int)(*chr) - 32) * fonto.Height * rowbox;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	3b20      	subs	r3, #32
 8003360:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8003362:	fb02 f303 	mul.w	r3, r2, r3
 8003366:	4a34      	ldr	r2, [pc, #208]	; (8003438 <ili_fonttest+0x148>)
 8003368:	7812      	ldrb	r2, [r2, #0]
 800336a:	fb02 f303 	mul.w	r3, r2, r3
 800336e:	461a      	mov	r2, r3
 8003370:	4b34      	ldr	r3, [pc, #208]	; (8003444 <ili_fonttest+0x154>)
 8003372:	601a      	str	r2, [r3, #0]

		hop = 0;
 8003374:	4b34      	ldr	r3, [pc, #208]	; (8003448 <ili_fonttest+0x158>)
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
		for(int k = 0; k < rowbox; k++){
 800337a:	2300      	movs	r3, #0
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	e027      	b.n	80033d0 <ili_fonttest+0xe0>
			buu32.b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8003380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	7812      	ldrb	r2, [r2, #0]
 8003386:	3a20      	subs	r2, #32
 8003388:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800338a:	fb01 f202 	mul.w	r2, r1, r2
 800338e:	492a      	ldr	r1, [pc, #168]	; (8003438 <ili_fonttest+0x148>)
 8003390:	7809      	ldrb	r1, [r1, #0]
 8003392:	fb02 f101 	mul.w	r1, r2, r1
 8003396:	4a28      	ldr	r2, [pc, #160]	; (8003438 <ili_fonttest+0x148>)
 8003398:	7812      	ldrb	r2, [r2, #0]
 800339a:	4610      	mov	r0, r2
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	fb00 f202 	mul.w	r2, r0, r2
 80033a2:	4411      	add	r1, r2
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	440a      	add	r2, r1
 80033a8:	4413      	add	r3, r2
 80033aa:	7819      	ldrb	r1, [r3, #0]
 80033ac:	4a27      	ldr	r2, [pc, #156]	; (800344c <ili_fonttest+0x15c>)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	4413      	add	r3, r2
 80033b2:	460a      	mov	r2, r1
 80033b4:	701a      	strb	r2, [r3, #0]
//			buu32.b32 = (buu32.b32 << (int)(8 * k)) | (fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k]);
			hop = (hop << 8) + buu32.b8[k];
 80033b6:	4b24      	ldr	r3, [pc, #144]	; (8003448 <ili_fonttest+0x158>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	021b      	lsls	r3, r3, #8
 80033bc:	4923      	ldr	r1, [pc, #140]	; (800344c <ili_fonttest+0x15c>)
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	440a      	add	r2, r1
 80033c2:	7812      	ldrb	r2, [r2, #0]
 80033c4:	4413      	add	r3, r2
 80033c6:	4a20      	ldr	r2, [pc, #128]	; (8003448 <ili_fonttest+0x158>)
 80033c8:	6013      	str	r3, [r2, #0]
		for(int k = 0; k < rowbox; k++){
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	3301      	adds	r3, #1
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	4b19      	ldr	r3, [pc, #100]	; (8003438 <ili_fonttest+0x148>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	4293      	cmp	r3, r2
 80033da:	dbd1      	blt.n	8003380 <ili_fonttest+0x90>
		}

		/////// note: 22/11/65
		//// search from b8[0],b8[1],... solve little font loss

		for(int j = 0; j < fonto.Width; j++){
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	e015      	b.n	800340e <ili_fonttest+0x11e>

			if((hop << j) & cliff){ // buu32.b32
 80033e2:	4b19      	ldr	r3, [pc, #100]	; (8003448 <ili_fonttest+0x158>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	409a      	lsls	r2, r3
 80033ea:	4b14      	ldr	r3, [pc, #80]	; (800343c <ili_fonttest+0x14c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d009      	beq.n	8003408 <ili_fonttest+0x118>
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 80033f4:	89fa      	ldrh	r2, [r7, #14]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	18d0      	adds	r0, r2, r3
 80033fa:	89ba      	ldrh	r2, [r7, #12]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	4413      	add	r3, r2
 8003400:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003402:	4619      	mov	r1, r3
 8003404:	f7fd f9ee 	bl	80007e4 <ili9486_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	3301      	adds	r3, #1
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003410:	461a      	mov	r2, r3
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	4293      	cmp	r3, r2
 8003416:	dbe4      	blt.n	80033e2 <ili_fonttest+0xf2>
	for(int i = 0; i < fonto.Height; i++){
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	3301      	adds	r3, #1
 800341c:	61fb      	str	r3, [r7, #28]
 800341e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003420:	461a      	mov	r2, r3
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	4293      	cmp	r3, r2
 8003426:	db91      	blt.n	800334c <ili_fonttest+0x5c>



		}
	}
}
 8003428:	bf00      	nop
 800342a:	bf00      	nop
 800342c:	3720      	adds	r7, #32
 800342e:	46bd      	mov	sp, r7
 8003430:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003434:	b002      	add	sp, #8
 8003436:	4770      	bx	lr
 8003438:	240001ac 	.word	0x240001ac
 800343c:	240001b8 	.word	0x240001b8
 8003440:	240001ae 	.word	0x240001ae
 8003444:	240001b0 	.word	0x240001b0
 8003448:	240001b4 	.word	0x240001b4
 800344c:	240001a8 	.word	0x240001a8

08003450 <HAL_GPIO_EXTI_Callback>:


uint64_t micros()
{return _micros + htim17.Instance->CNT;}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003460:	d113      	bne.n	800348a <HAL_GPIO_EXTI_Callback+0x3a>
		bluecounter++;
 8003462:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <HAL_GPIO_EXTI_Callback+0x48>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	3301      	adds	r3, #1
 8003468:	b2da      	uxtb	r2, r3
 800346a:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_GPIO_EXTI_Callback+0x48>)
 800346c:	701a      	strb	r2, [r3, #0]
		bluecounter%=4;
 800346e:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <HAL_GPIO_EXTI_Callback+0x48>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	b2da      	uxtb	r2, r3
 8003478:	4b07      	ldr	r3, [pc, #28]	; (8003498 <HAL_GPIO_EXTI_Callback+0x48>)
 800347a:	701a      	strb	r2, [r3, #0]
		flag_blue = bluecounter;
 800347c:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_GPIO_EXTI_Callback+0x48>)
 800347e:	781a      	ldrb	r2, [r3, #0]
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_GPIO_EXTI_Callback+0x4c>)
 8003482:	701a      	strb	r2, [r3, #0]
		ff = 1;
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_GPIO_EXTI_Callback+0x50>)
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]
	}

}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	240001a2 	.word	0x240001a2
 800349c:	240001a3 	.word	0x240001a3
 80034a0:	240001a4 	.word	0x240001a4

080034a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80034a4:	b4b0      	push	{r4, r5, r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 if(htim == &htim17)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a09      	ldr	r2, [pc, #36]	; (80034d4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d10a      	bne.n	80034ca <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 80034b4:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80034be:	1854      	adds	r4, r2, r1
 80034c0:	f143 0500 	adc.w	r5, r3, #0
 80034c4:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80034c6:	e9c3 4500 	strd	r4, r5, [r3]
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bcb0      	pop	{r4, r5, r7}
 80034d2:	4770      	bx	lr
 80034d4:	240000bc 	.word	0x240000bc
 80034d8:	240001c8 	.word	0x240001c8

080034dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034e0:	b672      	cpsid	i
}
 80034e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034e4:	e7fe      	b.n	80034e4 <Error_Handler+0x8>
	...

080034e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ee:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <HAL_MspInit+0x30>)
 80034f0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80034f4:	4a08      	ldr	r2, [pc, #32]	; (8003518 <HAL_MspInit+0x30>)
 80034f6:	f043 0302 	orr.w	r3, r3, #2
 80034fa:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <HAL_MspInit+0x30>)
 8003500:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	58024400 	.word	0x58024400

0800351c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a0e      	ldr	r2, [pc, #56]	; (8003564 <HAL_TIM_Base_MspInit+0x48>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d116      	bne.n	800355c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <HAL_TIM_Base_MspInit+0x4c>)
 8003530:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003534:	4a0c      	ldr	r2, [pc, #48]	; (8003568 <HAL_TIM_Base_MspInit+0x4c>)
 8003536:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800353a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800353e:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <HAL_TIM_Base_MspInit+0x4c>)
 8003540:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800354c:	2200      	movs	r2, #0
 800354e:	2100      	movs	r1, #0
 8003550:	2076      	movs	r0, #118	; 0x76
 8003552:	f000 fae0 	bl	8003b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003556:	2076      	movs	r0, #118	; 0x76
 8003558:	f000 faf7 	bl	8003b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40014800 	.word	0x40014800
 8003568:	58024400 	.word	0x58024400

0800356c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b0b8      	sub	sp, #224	; 0xe0
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003574:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	60da      	str	r2, [r3, #12]
 8003582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	22b8      	movs	r2, #184	; 0xb8
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f004 fbfb 	bl	8007d88 <memset>
  if(huart->Instance==USART3)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a25      	ldr	r2, [pc, #148]	; (800362c <HAL_UART_MspInit+0xc0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d142      	bne.n	8003622 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800359c:	2302      	movs	r3, #2
 800359e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80035a0:	2300      	movs	r3, #0
 80035a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035a6:	f107 0314 	add.w	r3, r7, #20
 80035aa:	4618      	mov	r0, r3
 80035ac:	f001 fcd0 	bl	8004f50 <HAL_RCCEx_PeriphCLKConfig>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80035b6:	f7ff ff91 	bl	80034dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80035ba:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <HAL_UART_MspInit+0xc4>)
 80035bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80035c0:	4a1b      	ldr	r2, [pc, #108]	; (8003630 <HAL_UART_MspInit+0xc4>)
 80035c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80035ca:	4b19      	ldr	r3, [pc, #100]	; (8003630 <HAL_UART_MspInit+0xc4>)
 80035cc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80035d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035d8:	4b15      	ldr	r3, [pc, #84]	; (8003630 <HAL_UART_MspInit+0xc4>)
 80035da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80035de:	4a14      	ldr	r2, [pc, #80]	; (8003630 <HAL_UART_MspInit+0xc4>)
 80035e0:	f043 0308 	orr.w	r3, r3, #8
 80035e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80035e8:	4b11      	ldr	r3, [pc, #68]	; (8003630 <HAL_UART_MspInit+0xc4>)
 80035ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80035f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fe:	2302      	movs	r3, #2
 8003600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003604:	2300      	movs	r3, #0
 8003606:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360a:	2300      	movs	r3, #0
 800360c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003610:	2307      	movs	r3, #7
 8003612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003616:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800361a:	4619      	mov	r1, r3
 800361c:	4805      	ldr	r0, [pc, #20]	; (8003634 <HAL_UART_MspInit+0xc8>)
 800361e:	f000 faaf 	bl	8003b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003622:	bf00      	nop
 8003624:	37e0      	adds	r7, #224	; 0xe0
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40004800 	.word	0x40004800
 8003630:	58024400 	.word	0x58024400
 8003634:	58020c00 	.word	0x58020c00

08003638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800363c:	e7fe      	b.n	800363c <NMI_Handler+0x4>

0800363e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800363e:	b480      	push	{r7}
 8003640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003642:	e7fe      	b.n	8003642 <HardFault_Handler+0x4>

08003644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003648:	e7fe      	b.n	8003648 <MemManage_Handler+0x4>

0800364a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800364a:	b480      	push	{r7}
 800364c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800364e:	e7fe      	b.n	800364e <BusFault_Handler+0x4>

08003650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003654:	e7fe      	b.n	8003654 <UsageFault_Handler+0x4>

08003656 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003656:	b480      	push	{r7}
 8003658:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800365a:	bf00      	nop
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003672:	b480      	push	{r7}
 8003674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003676:	bf00      	nop
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003684:	f000 f928 	bl	80038d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003688:	bf00      	nop
 800368a:	bd80      	pop	{r7, pc}

0800368c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003690:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003694:	f000 fc57 	bl	8003f46 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003698:	bf00      	nop
 800369a:	bd80      	pop	{r7, pc}

0800369c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80036a0:	4802      	ldr	r0, [pc, #8]	; (80036ac <TIM17_IRQHandler+0x10>)
 80036a2:	f002 ffda 	bl	800665a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	240000bc 	.word	0x240000bc

080036b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80036b4:	4b32      	ldr	r3, [pc, #200]	; (8003780 <SystemInit+0xd0>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	4a31      	ldr	r2, [pc, #196]	; (8003780 <SystemInit+0xd0>)
 80036bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80036c4:	4b2f      	ldr	r3, [pc, #188]	; (8003784 <SystemInit+0xd4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d807      	bhi.n	80036e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80036d0:	4b2c      	ldr	r3, [pc, #176]	; (8003784 <SystemInit+0xd4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f023 030f 	bic.w	r3, r3, #15
 80036d8:	4a2a      	ldr	r2, [pc, #168]	; (8003784 <SystemInit+0xd4>)
 80036da:	f043 0303 	orr.w	r3, r3, #3
 80036de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80036e0:	4b29      	ldr	r3, [pc, #164]	; (8003788 <SystemInit+0xd8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a28      	ldr	r2, [pc, #160]	; (8003788 <SystemInit+0xd8>)
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80036ec:	4b26      	ldr	r3, [pc, #152]	; (8003788 <SystemInit+0xd8>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80036f2:	4b25      	ldr	r3, [pc, #148]	; (8003788 <SystemInit+0xd8>)
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	4924      	ldr	r1, [pc, #144]	; (8003788 <SystemInit+0xd8>)
 80036f8:	4b24      	ldr	r3, [pc, #144]	; (800378c <SystemInit+0xdc>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80036fe:	4b21      	ldr	r3, [pc, #132]	; (8003784 <SystemInit+0xd4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b00      	cmp	r3, #0
 8003708:	d007      	beq.n	800371a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800370a:	4b1e      	ldr	r3, [pc, #120]	; (8003784 <SystemInit+0xd4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 030f 	bic.w	r3, r3, #15
 8003712:	4a1c      	ldr	r2, [pc, #112]	; (8003784 <SystemInit+0xd4>)
 8003714:	f043 0303 	orr.w	r3, r3, #3
 8003718:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800371a:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <SystemInit+0xd8>)
 800371c:	2200      	movs	r2, #0
 800371e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003720:	4b19      	ldr	r3, [pc, #100]	; (8003788 <SystemInit+0xd8>)
 8003722:	2200      	movs	r2, #0
 8003724:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8003726:	4b18      	ldr	r3, [pc, #96]	; (8003788 <SystemInit+0xd8>)
 8003728:	2200      	movs	r2, #0
 800372a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800372c:	4b16      	ldr	r3, [pc, #88]	; (8003788 <SystemInit+0xd8>)
 800372e:	4a18      	ldr	r2, [pc, #96]	; (8003790 <SystemInit+0xe0>)
 8003730:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003732:	4b15      	ldr	r3, [pc, #84]	; (8003788 <SystemInit+0xd8>)
 8003734:	4a17      	ldr	r2, [pc, #92]	; (8003794 <SystemInit+0xe4>)
 8003736:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003738:	4b13      	ldr	r3, [pc, #76]	; (8003788 <SystemInit+0xd8>)
 800373a:	4a17      	ldr	r2, [pc, #92]	; (8003798 <SystemInit+0xe8>)
 800373c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800373e:	4b12      	ldr	r3, [pc, #72]	; (8003788 <SystemInit+0xd8>)
 8003740:	2200      	movs	r2, #0
 8003742:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003744:	4b10      	ldr	r3, [pc, #64]	; (8003788 <SystemInit+0xd8>)
 8003746:	4a14      	ldr	r2, [pc, #80]	; (8003798 <SystemInit+0xe8>)
 8003748:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800374a:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <SystemInit+0xd8>)
 800374c:	2200      	movs	r2, #0
 800374e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003750:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <SystemInit+0xd8>)
 8003752:	4a11      	ldr	r2, [pc, #68]	; (8003798 <SystemInit+0xe8>)
 8003754:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003756:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <SystemInit+0xd8>)
 8003758:	2200      	movs	r2, #0
 800375a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <SystemInit+0xd8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a09      	ldr	r2, [pc, #36]	; (8003788 <SystemInit+0xd8>)
 8003762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003766:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003768:	4b07      	ldr	r3, [pc, #28]	; (8003788 <SystemInit+0xd8>)
 800376a:	2200      	movs	r2, #0
 800376c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <SystemInit+0xec>)
 8003770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003774:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003776:	bf00      	nop
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	e000ed00 	.word	0xe000ed00
 8003784:	52002000 	.word	0x52002000
 8003788:	58024400 	.word	0x58024400
 800378c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003790:	02020200 	.word	0x02020200
 8003794:	01ff0000 	.word	0x01ff0000
 8003798:	01010280 	.word	0x01010280
 800379c:	52004000 	.word	0x52004000

080037a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80037a4:	f7ff ff84 	bl	80036b0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037a8:	480c      	ldr	r0, [pc, #48]	; (80037dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037aa:	490d      	ldr	r1, [pc, #52]	; (80037e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037ac:	4a0d      	ldr	r2, [pc, #52]	; (80037e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037b0:	e002      	b.n	80037b8 <LoopCopyDataInit>

080037b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037b6:	3304      	adds	r3, #4

080037b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80037b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037bc:	d3f9      	bcc.n	80037b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037be:	4a0a      	ldr	r2, [pc, #40]	; (80037e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037c0:	4c0a      	ldr	r4, [pc, #40]	; (80037ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80037c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037c4:	e001      	b.n	80037ca <LoopFillZerobss>

080037c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037c8:	3204      	adds	r2, #4

080037ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037cc:	d3fb      	bcc.n	80037c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80037ce:	f004 fab7 	bl	8007d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037d2:	f7ff f953 	bl	8002a7c <main>
  bx  lr
 80037d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037d8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80037dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80037e0:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 80037e4:	080195ec 	.word	0x080195ec
  ldr r2, =_sbss
 80037e8:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 80037ec:	240001d8 	.word	0x240001d8

080037f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037f0:	e7fe      	b.n	80037f0 <ADC_IRQHandler>
	...

080037f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037fa:	2003      	movs	r0, #3
 80037fc:	f000 f980 	bl	8003b00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003800:	f001 f9d0 	bl	8004ba4 <HAL_RCC_GetSysClockFreq>
 8003804:	4602      	mov	r2, r0
 8003806:	4b15      	ldr	r3, [pc, #84]	; (800385c <HAL_Init+0x68>)
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	0a1b      	lsrs	r3, r3, #8
 800380c:	f003 030f 	and.w	r3, r3, #15
 8003810:	4913      	ldr	r1, [pc, #76]	; (8003860 <HAL_Init+0x6c>)
 8003812:	5ccb      	ldrb	r3, [r1, r3]
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
 800381c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800381e:	4b0f      	ldr	r3, [pc, #60]	; (800385c <HAL_Init+0x68>)
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	4a0e      	ldr	r2, [pc, #56]	; (8003860 <HAL_Init+0x6c>)
 8003828:	5cd3      	ldrb	r3, [r2, r3]
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
 8003834:	4a0b      	ldr	r2, [pc, #44]	; (8003864 <HAL_Init+0x70>)
 8003836:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003838:	4a0b      	ldr	r2, [pc, #44]	; (8003868 <HAL_Init+0x74>)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800383e:	2000      	movs	r0, #0
 8003840:	f000 f814 	bl	800386c <HAL_InitTick>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e002      	b.n	8003854 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800384e:	f7ff fe4b 	bl	80034e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	58024400 	.word	0x58024400
 8003860:	080195a4 	.word	0x080195a4
 8003864:	24000074 	.word	0x24000074
 8003868:	24000070 	.word	0x24000070

0800386c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003874:	4b15      	ldr	r3, [pc, #84]	; (80038cc <HAL_InitTick+0x60>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e021      	b.n	80038c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003880:	4b13      	ldr	r3, [pc, #76]	; (80038d0 <HAL_InitTick+0x64>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4b11      	ldr	r3, [pc, #68]	; (80038cc <HAL_InitTick+0x60>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	4619      	mov	r1, r3
 800388a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800388e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003892:	fbb2 f3f3 	udiv	r3, r2, r3
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f965 	bl	8003b66 <HAL_SYSTICK_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e00e      	b.n	80038c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b0f      	cmp	r3, #15
 80038aa:	d80a      	bhi.n	80038c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038ac:	2200      	movs	r2, #0
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	f04f 30ff 	mov.w	r0, #4294967295
 80038b4:	f000 f92f 	bl	8003b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038b8:	4a06      	ldr	r2, [pc, #24]	; (80038d4 <HAL_InitTick+0x68>)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	e000      	b.n	80038c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	2400007c 	.word	0x2400007c
 80038d0:	24000070 	.word	0x24000070
 80038d4:	24000078 	.word	0x24000078

080038d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_IncTick+0x20>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	461a      	mov	r2, r3
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <HAL_IncTick+0x24>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4413      	add	r3, r2
 80038e8:	4a04      	ldr	r2, [pc, #16]	; (80038fc <HAL_IncTick+0x24>)
 80038ea:	6013      	str	r3, [r2, #0]
}
 80038ec:	bf00      	nop
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	2400007c 	.word	0x2400007c
 80038fc:	240001d4 	.word	0x240001d4

08003900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  return uwTick;
 8003904:	4b03      	ldr	r3, [pc, #12]	; (8003914 <HAL_GetTick+0x14>)
 8003906:	681b      	ldr	r3, [r3, #0]
}
 8003908:	4618      	mov	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	240001d4 	.word	0x240001d4

08003918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003920:	f7ff ffee 	bl	8003900 <HAL_GetTick>
 8003924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003930:	d005      	beq.n	800393e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003932:	4b0a      	ldr	r3, [pc, #40]	; (800395c <HAL_Delay+0x44>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4413      	add	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800393e:	bf00      	nop
 8003940:	f7ff ffde 	bl	8003900 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	429a      	cmp	r2, r3
 800394e:	d8f7      	bhi.n	8003940 <HAL_Delay+0x28>
  {
  }
}
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	2400007c 	.word	0x2400007c

08003960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800397c:	4013      	ands	r3, r2
 800397e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <__NVIC_SetPriorityGrouping+0x44>)
 800398a:	4313      	orrs	r3, r2
 800398c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800398e:	4a04      	ldr	r2, [pc, #16]	; (80039a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	60d3      	str	r3, [r2, #12]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	e000ed00 	.word	0xe000ed00
 80039a4:	05fa0000 	.word	0x05fa0000

080039a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039ac:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <__NVIC_GetPriorityGrouping+0x18>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	0a1b      	lsrs	r3, r3, #8
 80039b2:	f003 0307 	and.w	r3, r3, #7
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	db0b      	blt.n	80039ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039d6:	88fb      	ldrh	r3, [r7, #6]
 80039d8:	f003 021f 	and.w	r2, r3, #31
 80039dc:	4907      	ldr	r1, [pc, #28]	; (80039fc <__NVIC_EnableIRQ+0x38>)
 80039de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	2001      	movs	r0, #1
 80039e6:	fa00 f202 	lsl.w	r2, r0, r2
 80039ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	e000e100 	.word	0xe000e100

08003a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	6039      	str	r1, [r7, #0]
 8003a0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	db0a      	blt.n	8003a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	490c      	ldr	r1, [pc, #48]	; (8003a4c <__NVIC_SetPriority+0x4c>)
 8003a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a1e:	0112      	lsls	r2, r2, #4
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	440b      	add	r3, r1
 8003a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a28:	e00a      	b.n	8003a40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	4908      	ldr	r1, [pc, #32]	; (8003a50 <__NVIC_SetPriority+0x50>)
 8003a30:	88fb      	ldrh	r3, [r7, #6]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	3b04      	subs	r3, #4
 8003a38:	0112      	lsls	r2, r2, #4
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	761a      	strb	r2, [r3, #24]
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	e000e100 	.word	0xe000e100
 8003a50:	e000ed00 	.word	0xe000ed00

08003a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b089      	sub	sp, #36	; 0x24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f1c3 0307 	rsb	r3, r3, #7
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	bf28      	it	cs
 8003a72:	2304      	movcs	r3, #4
 8003a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	2b06      	cmp	r3, #6
 8003a7c:	d902      	bls.n	8003a84 <NVIC_EncodePriority+0x30>
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	3b03      	subs	r3, #3
 8003a82:	e000      	b.n	8003a86 <NVIC_EncodePriority+0x32>
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a88:	f04f 32ff 	mov.w	r2, #4294967295
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43da      	mvns	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	401a      	ands	r2, r3
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa6:	43d9      	mvns	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aac:	4313      	orrs	r3, r2
         );
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3724      	adds	r7, #36	; 0x24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003acc:	d301      	bcc.n	8003ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e00f      	b.n	8003af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ad2:	4a0a      	ldr	r2, [pc, #40]	; (8003afc <SysTick_Config+0x40>)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ada:	210f      	movs	r1, #15
 8003adc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae0:	f7ff ff8e 	bl	8003a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <SysTick_Config+0x40>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aea:	4b04      	ldr	r3, [pc, #16]	; (8003afc <SysTick_Config+0x40>)
 8003aec:	2207      	movs	r2, #7
 8003aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	e000e010 	.word	0xe000e010

08003b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff ff29 	bl	8003960 <__NVIC_SetPriorityGrouping>
}
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b086      	sub	sp, #24
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b24:	f7ff ff40 	bl	80039a8 <__NVIC_GetPriorityGrouping>
 8003b28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	6978      	ldr	r0, [r7, #20]
 8003b30:	f7ff ff90 	bl	8003a54 <NVIC_EncodePriority>
 8003b34:	4602      	mov	r2, r0
 8003b36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff ff5f 	bl	8003a00 <__NVIC_SetPriority>
}
 8003b42:	bf00      	nop
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	4603      	mov	r3, r0
 8003b52:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff ff33 	bl	80039c4 <__NVIC_EnableIRQ>
}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff ffa4 	bl	8003abc <SysTick_Config>
 8003b74:	4603      	mov	r3, r0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b089      	sub	sp, #36	; 0x24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003b8e:	4b89      	ldr	r3, [pc, #548]	; (8003db4 <HAL_GPIO_Init+0x234>)
 8003b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b92:	e194      	b.n	8003ebe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	2101      	movs	r1, #1
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8186 	beq.w	8003eb8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d005      	beq.n	8003bc4 <HAL_GPIO_Init+0x44>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d130      	bne.n	8003c26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	2203      	movs	r2, #3
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4013      	ands	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	f003 0201 	and.w	r2, r3, #1
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d017      	beq.n	8003c62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	43db      	mvns	r3, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4013      	ands	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d123      	bne.n	8003cb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	08da      	lsrs	r2, r3, #3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3208      	adds	r2, #8
 8003c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	220f      	movs	r2, #15
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	691a      	ldr	r2, [r3, #16]
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	08da      	lsrs	r2, r3, #3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3208      	adds	r2, #8
 8003cb0:	69b9      	ldr	r1, [r7, #24]
 8003cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 0203 	and.w	r2, r3, #3
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 80e0 	beq.w	8003eb8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cf8:	4b2f      	ldr	r3, [pc, #188]	; (8003db8 <HAL_GPIO_Init+0x238>)
 8003cfa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003cfe:	4a2e      	ldr	r2, [pc, #184]	; (8003db8 <HAL_GPIO_Init+0x238>)
 8003d00:	f043 0302 	orr.w	r3, r3, #2
 8003d04:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003d08:	4b2b      	ldr	r3, [pc, #172]	; (8003db8 <HAL_GPIO_Init+0x238>)
 8003d0a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d16:	4a29      	ldr	r2, [pc, #164]	; (8003dbc <HAL_GPIO_Init+0x23c>)
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	089b      	lsrs	r3, r3, #2
 8003d1c:	3302      	adds	r3, #2
 8003d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	220f      	movs	r2, #15
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43db      	mvns	r3, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4013      	ands	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a20      	ldr	r2, [pc, #128]	; (8003dc0 <HAL_GPIO_Init+0x240>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d052      	beq.n	8003de8 <HAL_GPIO_Init+0x268>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a1f      	ldr	r2, [pc, #124]	; (8003dc4 <HAL_GPIO_Init+0x244>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d031      	beq.n	8003dae <HAL_GPIO_Init+0x22e>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a1e      	ldr	r2, [pc, #120]	; (8003dc8 <HAL_GPIO_Init+0x248>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d02b      	beq.n	8003daa <HAL_GPIO_Init+0x22a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a1d      	ldr	r2, [pc, #116]	; (8003dcc <HAL_GPIO_Init+0x24c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d025      	beq.n	8003da6 <HAL_GPIO_Init+0x226>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a1c      	ldr	r2, [pc, #112]	; (8003dd0 <HAL_GPIO_Init+0x250>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d01f      	beq.n	8003da2 <HAL_GPIO_Init+0x222>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a1b      	ldr	r2, [pc, #108]	; (8003dd4 <HAL_GPIO_Init+0x254>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d019      	beq.n	8003d9e <HAL_GPIO_Init+0x21e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a1a      	ldr	r2, [pc, #104]	; (8003dd8 <HAL_GPIO_Init+0x258>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d013      	beq.n	8003d9a <HAL_GPIO_Init+0x21a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a19      	ldr	r2, [pc, #100]	; (8003ddc <HAL_GPIO_Init+0x25c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00d      	beq.n	8003d96 <HAL_GPIO_Init+0x216>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a18      	ldr	r2, [pc, #96]	; (8003de0 <HAL_GPIO_Init+0x260>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d007      	beq.n	8003d92 <HAL_GPIO_Init+0x212>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <HAL_GPIO_Init+0x264>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d101      	bne.n	8003d8e <HAL_GPIO_Init+0x20e>
 8003d8a:	2309      	movs	r3, #9
 8003d8c:	e02d      	b.n	8003dea <HAL_GPIO_Init+0x26a>
 8003d8e:	230a      	movs	r3, #10
 8003d90:	e02b      	b.n	8003dea <HAL_GPIO_Init+0x26a>
 8003d92:	2308      	movs	r3, #8
 8003d94:	e029      	b.n	8003dea <HAL_GPIO_Init+0x26a>
 8003d96:	2307      	movs	r3, #7
 8003d98:	e027      	b.n	8003dea <HAL_GPIO_Init+0x26a>
 8003d9a:	2306      	movs	r3, #6
 8003d9c:	e025      	b.n	8003dea <HAL_GPIO_Init+0x26a>
 8003d9e:	2305      	movs	r3, #5
 8003da0:	e023      	b.n	8003dea <HAL_GPIO_Init+0x26a>
 8003da2:	2304      	movs	r3, #4
 8003da4:	e021      	b.n	8003dea <HAL_GPIO_Init+0x26a>
 8003da6:	2303      	movs	r3, #3
 8003da8:	e01f      	b.n	8003dea <HAL_GPIO_Init+0x26a>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e01d      	b.n	8003dea <HAL_GPIO_Init+0x26a>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e01b      	b.n	8003dea <HAL_GPIO_Init+0x26a>
 8003db2:	bf00      	nop
 8003db4:	58000080 	.word	0x58000080
 8003db8:	58024400 	.word	0x58024400
 8003dbc:	58000400 	.word	0x58000400
 8003dc0:	58020000 	.word	0x58020000
 8003dc4:	58020400 	.word	0x58020400
 8003dc8:	58020800 	.word	0x58020800
 8003dcc:	58020c00 	.word	0x58020c00
 8003dd0:	58021000 	.word	0x58021000
 8003dd4:	58021400 	.word	0x58021400
 8003dd8:	58021800 	.word	0x58021800
 8003ddc:	58021c00 	.word	0x58021c00
 8003de0:	58022000 	.word	0x58022000
 8003de4:	58022400 	.word	0x58022400
 8003de8:	2300      	movs	r3, #0
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	f002 0203 	and.w	r2, r2, #3
 8003df0:	0092      	lsls	r2, r2, #2
 8003df2:	4093      	lsls	r3, r2
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dfa:	4938      	ldr	r1, [pc, #224]	; (8003edc <HAL_GPIO_Init+0x35c>)
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	3302      	adds	r3, #2
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	43db      	mvns	r3, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4013      	ands	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003e2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	43db      	mvns	r3, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f47f ae63 	bne.w	8003b94 <HAL_GPIO_Init+0x14>
  }
}
 8003ece:	bf00      	nop
 8003ed0:	bf00      	nop
 8003ed2:	3724      	adds	r7, #36	; 0x24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	58000400 	.word	0x58000400

08003ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	807b      	strh	r3, [r7, #2]
 8003eec:	4613      	mov	r3, r2
 8003eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ef0:	787b      	ldrb	r3, [r7, #1]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ef6:	887a      	ldrh	r2, [r7, #2]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003efc:	e003      	b.n	8003f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003efe:	887b      	ldrh	r3, [r7, #2]
 8003f00:	041a      	lsls	r2, r3, #16
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	619a      	str	r2, [r3, #24]
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b085      	sub	sp, #20
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f24:	887a      	ldrh	r2, [r7, #2]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	041a      	lsls	r2, r3, #16
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	43d9      	mvns	r1, r3
 8003f30:	887b      	ldrh	r3, [r7, #2]
 8003f32:	400b      	ands	r3, r1
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	619a      	str	r2, [r3, #24]
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f58:	88fb      	ldrh	r3, [r7, #6]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f64:	88fb      	ldrh	r3, [r7, #6]
 8003f66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff fa6f 	bl	8003450 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003f84:	4b29      	ldr	r3, [pc, #164]	; (800402c <HAL_PWREx_ConfigSupply+0xb0>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	2b06      	cmp	r3, #6
 8003f8e:	d00a      	beq.n	8003fa6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003f90:	4b26      	ldr	r3, [pc, #152]	; (800402c <HAL_PWREx_ConfigSupply+0xb0>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d001      	beq.n	8003fa2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e040      	b.n	8004024 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e03e      	b.n	8004024 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003fa6:	4b21      	ldr	r3, [pc, #132]	; (800402c <HAL_PWREx_ConfigSupply+0xb0>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003fae:	491f      	ldr	r1, [pc, #124]	; (800402c <HAL_PWREx_ConfigSupply+0xb0>)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003fb6:	f7ff fca3 	bl	8003900 <HAL_GetTick>
 8003fba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003fbc:	e009      	b.n	8003fd2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003fbe:	f7ff fc9f 	bl	8003900 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fcc:	d901      	bls.n	8003fd2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e028      	b.n	8004024 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003fd2:	4b16      	ldr	r3, [pc, #88]	; (800402c <HAL_PWREx_ConfigSupply+0xb0>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fde:	d1ee      	bne.n	8003fbe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b1e      	cmp	r3, #30
 8003fe4:	d008      	beq.n	8003ff8 <HAL_PWREx_ConfigSupply+0x7c>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b2e      	cmp	r3, #46	; 0x2e
 8003fea:	d005      	beq.n	8003ff8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b1d      	cmp	r3, #29
 8003ff0:	d002      	beq.n	8003ff8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b2d      	cmp	r3, #45	; 0x2d
 8003ff6:	d114      	bne.n	8004022 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003ff8:	f7ff fc82 	bl	8003900 <HAL_GetTick>
 8003ffc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003ffe:	e009      	b.n	8004014 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004000:	f7ff fc7e 	bl	8003900 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800400e:	d901      	bls.n	8004014 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e007      	b.n	8004024 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <HAL_PWREx_ConfigSupply+0xb0>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800401c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004020:	d1ee      	bne.n	8004000 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	58024800 	.word	0x58024800

08004030 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08c      	sub	sp, #48	; 0x30
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e3f4      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 80b3 	beq.w	80041b6 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004050:	4b95      	ldr	r3, [pc, #596]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800405a:	4b93      	ldr	r3, [pc, #588]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004062:	2b10      	cmp	r3, #16
 8004064:	d007      	beq.n	8004076 <HAL_RCC_OscConfig+0x46>
 8004066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004068:	2b18      	cmp	r3, #24
 800406a:	d112      	bne.n	8004092 <HAL_RCC_OscConfig+0x62>
 800406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d10d      	bne.n	8004092 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004076:	4b8c      	ldr	r3, [pc, #560]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8098 	beq.w	80041b4 <HAL_RCC_OscConfig+0x184>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	f040 8093 	bne.w	80041b4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e3cc      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409a:	d106      	bne.n	80040aa <HAL_RCC_OscConfig+0x7a>
 800409c:	4b82      	ldr	r3, [pc, #520]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a81      	ldr	r2, [pc, #516]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 80040a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	e058      	b.n	800415c <HAL_RCC_OscConfig+0x12c>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d112      	bne.n	80040d8 <HAL_RCC_OscConfig+0xa8>
 80040b2:	4b7d      	ldr	r3, [pc, #500]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a7c      	ldr	r2, [pc, #496]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 80040b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	4b7a      	ldr	r3, [pc, #488]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a79      	ldr	r2, [pc, #484]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 80040c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	4b77      	ldr	r3, [pc, #476]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a76      	ldr	r2, [pc, #472]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 80040d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e041      	b.n	800415c <HAL_RCC_OscConfig+0x12c>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040e0:	d112      	bne.n	8004108 <HAL_RCC_OscConfig+0xd8>
 80040e2:	4b71      	ldr	r3, [pc, #452]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a70      	ldr	r2, [pc, #448]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 80040e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	4b6e      	ldr	r3, [pc, #440]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a6d      	ldr	r2, [pc, #436]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 80040f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	4b6b      	ldr	r3, [pc, #428]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a6a      	ldr	r2, [pc, #424]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 8004100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	e029      	b.n	800415c <HAL_RCC_OscConfig+0x12c>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004110:	d112      	bne.n	8004138 <HAL_RCC_OscConfig+0x108>
 8004112:	4b65      	ldr	r3, [pc, #404]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a64      	ldr	r2, [pc, #400]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 8004118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	4b62      	ldr	r3, [pc, #392]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a61      	ldr	r2, [pc, #388]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 8004124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	4b5f      	ldr	r3, [pc, #380]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a5e      	ldr	r2, [pc, #376]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 8004130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e011      	b.n	800415c <HAL_RCC_OscConfig+0x12c>
 8004138:	4b5b      	ldr	r3, [pc, #364]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a5a      	ldr	r2, [pc, #360]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 800413e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	4b58      	ldr	r3, [pc, #352]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a57      	ldr	r2, [pc, #348]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 800414a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	4b55      	ldr	r3, [pc, #340]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a54      	ldr	r2, [pc, #336]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 8004156:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800415a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d013      	beq.n	800418c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7ff fbcc 	bl	8003900 <HAL_GetTick>
 8004168:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800416c:	f7ff fbc8 	bl	8003900 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	; 0x64
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e356      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800417e:	4b4a      	ldr	r3, [pc, #296]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCC_OscConfig+0x13c>
 800418a:	e014      	b.n	80041b6 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7ff fbb8 	bl	8003900 <HAL_GetTick>
 8004190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004194:	f7ff fbb4 	bl	8003900 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b64      	cmp	r3, #100	; 0x64
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e342      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041a6:	4b40      	ldr	r3, [pc, #256]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x164>
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 808d 	beq.w	80042de <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041c4:	4b38      	ldr	r3, [pc, #224]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041ce:	4b36      	ldr	r3, [pc, #216]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d007      	beq.n	80041ea <HAL_RCC_OscConfig+0x1ba>
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	2b18      	cmp	r3, #24
 80041de:	d137      	bne.n	8004250 <HAL_RCC_OscConfig+0x220>
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d132      	bne.n	8004250 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041ea:	4b2f      	ldr	r3, [pc, #188]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <HAL_RCC_OscConfig+0x1d2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e314      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004202:	4b29      	ldr	r3, [pc, #164]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f023 0219 	bic.w	r2, r3, #25
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	4926      	ldr	r1, [pc, #152]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 8004210:	4313      	orrs	r3, r2
 8004212:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004214:	f7ff fb74 	bl	8003900 <HAL_GetTick>
 8004218:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800421c:	f7ff fb70 	bl	8003900 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e2fe      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800422e:	4b1e      	ldr	r3, [pc, #120]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423a:	4b1b      	ldr	r3, [pc, #108]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	061b      	lsls	r3, r3, #24
 8004248:	4917      	ldr	r1, [pc, #92]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 800424a:	4313      	orrs	r3, r2
 800424c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800424e:	e046      	b.n	80042de <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d029      	beq.n	80042ac <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004258:	4b13      	ldr	r3, [pc, #76]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f023 0219 	bic.w	r2, r3, #25
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	4910      	ldr	r1, [pc, #64]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 8004266:	4313      	orrs	r3, r2
 8004268:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426a:	f7ff fb49 	bl	8003900 <HAL_GetTick>
 800426e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004272:	f7ff fb45 	bl	8003900 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e2d3      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004284:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f0      	beq.n	8004272 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004290:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	061b      	lsls	r3, r3, #24
 800429e:	4902      	ldr	r1, [pc, #8]	; (80042a8 <HAL_RCC_OscConfig+0x278>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	604b      	str	r3, [r1, #4]
 80042a4:	e01b      	b.n	80042de <HAL_RCC_OscConfig+0x2ae>
 80042a6:	bf00      	nop
 80042a8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ac:	4b97      	ldr	r3, [pc, #604]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a96      	ldr	r2, [pc, #600]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 80042b2:	f023 0301 	bic.w	r3, r3, #1
 80042b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7ff fb22 	bl	8003900 <HAL_GetTick>
 80042bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042c0:	f7ff fb1e 	bl	8003900 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e2ac      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042d2:	4b8e      	ldr	r3, [pc, #568]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d06a      	beq.n	80043c0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ea:	4b88      	ldr	r3, [pc, #544]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042f4:	4b85      	ldr	r3, [pc, #532]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d007      	beq.n	8004310 <HAL_RCC_OscConfig+0x2e0>
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	2b18      	cmp	r3, #24
 8004304:	d11b      	bne.n	800433e <HAL_RCC_OscConfig+0x30e>
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	2b01      	cmp	r3, #1
 800430e:	d116      	bne.n	800433e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004310:	4b7e      	ldr	r3, [pc, #504]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_OscConfig+0x2f8>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	2b80      	cmp	r3, #128	; 0x80
 8004322:	d001      	beq.n	8004328 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e281      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004328:	4b78      	ldr	r3, [pc, #480]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	061b      	lsls	r3, r3, #24
 8004336:	4975      	ldr	r1, [pc, #468]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 8004338:	4313      	orrs	r3, r2
 800433a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800433c:	e040      	b.n	80043c0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d023      	beq.n	800438e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004346:	4b71      	ldr	r3, [pc, #452]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a70      	ldr	r2, [pc, #448]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 800434c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004352:	f7ff fad5 	bl	8003900 <HAL_GetTick>
 8004356:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800435a:	f7ff fad1 	bl	8003900 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e25f      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800436c:	4b67      	ldr	r3, [pc, #412]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f0      	beq.n	800435a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004378:	4b64      	ldr	r3, [pc, #400]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	061b      	lsls	r3, r3, #24
 8004386:	4961      	ldr	r1, [pc, #388]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 8004388:	4313      	orrs	r3, r2
 800438a:	60cb      	str	r3, [r1, #12]
 800438c:	e018      	b.n	80043c0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800438e:	4b5f      	ldr	r3, [pc, #380]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a5e      	ldr	r2, [pc, #376]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 8004394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439a:	f7ff fab1 	bl	8003900 <HAL_GetTick>
 800439e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80043a2:	f7ff faad 	bl	8003900 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e23b      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80043b4:	4b55      	ldr	r3, [pc, #340]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1f0      	bne.n	80043a2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d036      	beq.n	800443a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d019      	beq.n	8004408 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d4:	4b4d      	ldr	r3, [pc, #308]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 80043d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d8:	4a4c      	ldr	r2, [pc, #304]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e0:	f7ff fa8e 	bl	8003900 <HAL_GetTick>
 80043e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e8:	f7ff fa8a 	bl	8003900 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e218      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043fa:	4b44      	ldr	r3, [pc, #272]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 80043fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0x3b8>
 8004406:	e018      	b.n	800443a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004408:	4b40      	ldr	r3, [pc, #256]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 800440a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440c:	4a3f      	ldr	r2, [pc, #252]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 800440e:	f023 0301 	bic.w	r3, r3, #1
 8004412:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004414:	f7ff fa74 	bl	8003900 <HAL_GetTick>
 8004418:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800441c:	f7ff fa70 	bl	8003900 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e1fe      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800442e:	4b37      	ldr	r3, [pc, #220]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 8004430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d036      	beq.n	80044b4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d019      	beq.n	8004482 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800444e:	4b2f      	ldr	r3, [pc, #188]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a2e      	ldr	r2, [pc, #184]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 8004454:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004458:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800445a:	f7ff fa51 	bl	8003900 <HAL_GetTick>
 800445e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004462:	f7ff fa4d 	bl	8003900 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e1db      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004474:	4b25      	ldr	r3, [pc, #148]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x432>
 8004480:	e018      	b.n	80044b4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004482:	4b22      	ldr	r3, [pc, #136]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a21      	ldr	r2, [pc, #132]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 8004488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800448c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800448e:	f7ff fa37 	bl	8003900 <HAL_GetTick>
 8004492:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004496:	f7ff fa33 	bl	8003900 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e1c1      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80044a8:	4b18      	ldr	r3, [pc, #96]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1f0      	bne.n	8004496 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 80af 	beq.w	8004620 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044c2:	4b13      	ldr	r3, [pc, #76]	; (8004510 <HAL_RCC_OscConfig+0x4e0>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a12      	ldr	r2, [pc, #72]	; (8004510 <HAL_RCC_OscConfig+0x4e0>)
 80044c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044ce:	f7ff fa17 	bl	8003900 <HAL_GetTick>
 80044d2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044d6:	f7ff fa13 	bl	8003900 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b64      	cmp	r3, #100	; 0x64
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e1a1      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044e8:	4b09      	ldr	r3, [pc, #36]	; (8004510 <HAL_RCC_OscConfig+0x4e0>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f0      	beq.n	80044d6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d10b      	bne.n	8004514 <HAL_RCC_OscConfig+0x4e4>
 80044fc:	4b03      	ldr	r3, [pc, #12]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 80044fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004500:	4a02      	ldr	r2, [pc, #8]	; (800450c <HAL_RCC_OscConfig+0x4dc>)
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	6713      	str	r3, [r2, #112]	; 0x70
 8004508:	e05b      	b.n	80045c2 <HAL_RCC_OscConfig+0x592>
 800450a:	bf00      	nop
 800450c:	58024400 	.word	0x58024400
 8004510:	58024800 	.word	0x58024800
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d112      	bne.n	8004542 <HAL_RCC_OscConfig+0x512>
 800451c:	4b9d      	ldr	r3, [pc, #628]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 800451e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004520:	4a9c      	ldr	r2, [pc, #624]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 8004522:	f023 0301 	bic.w	r3, r3, #1
 8004526:	6713      	str	r3, [r2, #112]	; 0x70
 8004528:	4b9a      	ldr	r3, [pc, #616]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	4a99      	ldr	r2, [pc, #612]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 800452e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004532:	6713      	str	r3, [r2, #112]	; 0x70
 8004534:	4b97      	ldr	r3, [pc, #604]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 8004536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004538:	4a96      	ldr	r2, [pc, #600]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 800453a:	f023 0304 	bic.w	r3, r3, #4
 800453e:	6713      	str	r3, [r2, #112]	; 0x70
 8004540:	e03f      	b.n	80045c2 <HAL_RCC_OscConfig+0x592>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b05      	cmp	r3, #5
 8004548:	d112      	bne.n	8004570 <HAL_RCC_OscConfig+0x540>
 800454a:	4b92      	ldr	r3, [pc, #584]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	4a91      	ldr	r2, [pc, #580]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 8004550:	f043 0304 	orr.w	r3, r3, #4
 8004554:	6713      	str	r3, [r2, #112]	; 0x70
 8004556:	4b8f      	ldr	r3, [pc, #572]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	4a8e      	ldr	r2, [pc, #568]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 800455c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004560:	6713      	str	r3, [r2, #112]	; 0x70
 8004562:	4b8c      	ldr	r3, [pc, #560]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	4a8b      	ldr	r2, [pc, #556]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	6713      	str	r3, [r2, #112]	; 0x70
 800456e:	e028      	b.n	80045c2 <HAL_RCC_OscConfig+0x592>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b85      	cmp	r3, #133	; 0x85
 8004576:	d112      	bne.n	800459e <HAL_RCC_OscConfig+0x56e>
 8004578:	4b86      	ldr	r3, [pc, #536]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457c:	4a85      	ldr	r2, [pc, #532]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 800457e:	f043 0304 	orr.w	r3, r3, #4
 8004582:	6713      	str	r3, [r2, #112]	; 0x70
 8004584:	4b83      	ldr	r3, [pc, #524]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	4a82      	ldr	r2, [pc, #520]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 800458a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458e:	6713      	str	r3, [r2, #112]	; 0x70
 8004590:	4b80      	ldr	r3, [pc, #512]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	4a7f      	ldr	r2, [pc, #508]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	6713      	str	r3, [r2, #112]	; 0x70
 800459c:	e011      	b.n	80045c2 <HAL_RCC_OscConfig+0x592>
 800459e:	4b7d      	ldr	r3, [pc, #500]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	4a7c      	ldr	r2, [pc, #496]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 80045a4:	f023 0301 	bic.w	r3, r3, #1
 80045a8:	6713      	str	r3, [r2, #112]	; 0x70
 80045aa:	4b7a      	ldr	r3, [pc, #488]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	4a79      	ldr	r2, [pc, #484]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 80045b0:	f023 0304 	bic.w	r3, r3, #4
 80045b4:	6713      	str	r3, [r2, #112]	; 0x70
 80045b6:	4b77      	ldr	r3, [pc, #476]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	4a76      	ldr	r2, [pc, #472]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 80045bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d015      	beq.n	80045f6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ca:	f7ff f999 	bl	8003900 <HAL_GetTick>
 80045ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045d0:	e00a      	b.n	80045e8 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d2:	f7ff f995 	bl	8003900 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e121      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045e8:	4b6a      	ldr	r3, [pc, #424]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0ee      	beq.n	80045d2 <HAL_RCC_OscConfig+0x5a2>
 80045f4:	e014      	b.n	8004620 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f6:	f7ff f983 	bl	8003900 <HAL_GetTick>
 80045fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80045fc:	e00a      	b.n	8004614 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045fe:	f7ff f97f 	bl	8003900 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	f241 3288 	movw	r2, #5000	; 0x1388
 800460c:	4293      	cmp	r3, r2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e10b      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004614:	4b5f      	ldr	r3, [pc, #380]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1ee      	bne.n	80045fe <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8100 	beq.w	800482a <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800462a:	4b5a      	ldr	r3, [pc, #360]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004632:	2b18      	cmp	r3, #24
 8004634:	f000 80bb 	beq.w	80047ae <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	2b02      	cmp	r3, #2
 800463e:	f040 8095 	bne.w	800476c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004642:	4b54      	ldr	r3, [pc, #336]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a53      	ldr	r2, [pc, #332]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 8004648:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800464c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464e:	f7ff f957 	bl	8003900 <HAL_GetTick>
 8004652:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004656:	f7ff f953 	bl	8003900 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e0e1      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004668:	4b4a      	ldr	r3, [pc, #296]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f0      	bne.n	8004656 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004674:	4b47      	ldr	r3, [pc, #284]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 8004676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004678:	4b47      	ldr	r3, [pc, #284]	; (8004798 <HAL_RCC_OscConfig+0x768>)
 800467a:	4013      	ands	r3, r2
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004684:	0112      	lsls	r2, r2, #4
 8004686:	430a      	orrs	r2, r1
 8004688:	4942      	ldr	r1, [pc, #264]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 800468a:	4313      	orrs	r3, r2
 800468c:	628b      	str	r3, [r1, #40]	; 0x28
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	3b01      	subs	r3, #1
 8004694:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469c:	3b01      	subs	r3, #1
 800469e:	025b      	lsls	r3, r3, #9
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	3b01      	subs	r3, #1
 80046aa:	041b      	lsls	r3, r3, #16
 80046ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b6:	3b01      	subs	r3, #1
 80046b8:	061b      	lsls	r3, r3, #24
 80046ba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046be:	4935      	ldr	r1, [pc, #212]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80046c4:	4b33      	ldr	r3, [pc, #204]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	4a32      	ldr	r2, [pc, #200]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 80046ca:	f023 0301 	bic.w	r3, r3, #1
 80046ce:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046d0:	4b30      	ldr	r3, [pc, #192]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 80046d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d4:	4b31      	ldr	r3, [pc, #196]	; (800479c <HAL_RCC_OscConfig+0x76c>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80046dc:	00d2      	lsls	r2, r2, #3
 80046de:	492d      	ldr	r1, [pc, #180]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80046e4:	4b2b      	ldr	r3, [pc, #172]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	f023 020c 	bic.w	r2, r3, #12
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	4928      	ldr	r1, [pc, #160]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80046f6:	4b27      	ldr	r3, [pc, #156]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	f023 0202 	bic.w	r2, r3, #2
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	4924      	ldr	r1, [pc, #144]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 8004704:	4313      	orrs	r3, r2
 8004706:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004708:	4b22      	ldr	r3, [pc, #136]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	4a21      	ldr	r2, [pc, #132]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 800470e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004712:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004714:	4b1f      	ldr	r3, [pc, #124]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	4a1e      	ldr	r2, [pc, #120]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 800471a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800471e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004720:	4b1c      	ldr	r3, [pc, #112]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	4a1b      	ldr	r2, [pc, #108]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 8004726:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800472a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800472c:	4b19      	ldr	r3, [pc, #100]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	4a18      	ldr	r2, [pc, #96]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004738:	4b16      	ldr	r3, [pc, #88]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a15      	ldr	r2, [pc, #84]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 800473e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004744:	f7ff f8dc 	bl	8003900 <HAL_GetTick>
 8004748:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800474c:	f7ff f8d8 	bl	8003900 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e066      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800475e:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0x71c>
 800476a:	e05e      	b.n	800482a <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476c:	4b09      	ldr	r3, [pc, #36]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a08      	ldr	r2, [pc, #32]	; (8004794 <HAL_RCC_OscConfig+0x764>)
 8004772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7ff f8c2 	bl	8003900 <HAL_GetTick>
 800477c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800477e:	e00f      	b.n	80047a0 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004780:	f7ff f8be 	bl	8003900 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d908      	bls.n	80047a0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e04c      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
 8004792:	bf00      	nop
 8004794:	58024400 	.word	0x58024400
 8004798:	fffffc0c 	.word	0xfffffc0c
 800479c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047a0:	4b24      	ldr	r3, [pc, #144]	; (8004834 <HAL_RCC_OscConfig+0x804>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1e9      	bne.n	8004780 <HAL_RCC_OscConfig+0x750>
 80047ac:	e03d      	b.n	800482a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80047ae:	4b21      	ldr	r3, [pc, #132]	; (8004834 <HAL_RCC_OscConfig+0x804>)
 80047b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80047b4:	4b1f      	ldr	r3, [pc, #124]	; (8004834 <HAL_RCC_OscConfig+0x804>)
 80047b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d031      	beq.n	8004826 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f003 0203 	and.w	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d12a      	bne.n	8004826 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047dc:	429a      	cmp	r2, r3
 80047de:	d122      	bne.n	8004826 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d11a      	bne.n	8004826 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	0a5b      	lsrs	r3, r3, #9
 80047f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047fe:	429a      	cmp	r2, r3
 8004800:	d111      	bne.n	8004826 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	0c1b      	lsrs	r3, r3, #16
 8004806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004810:	429a      	cmp	r2, r3
 8004812:	d108      	bne.n	8004826 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	0e1b      	lsrs	r3, r3, #24
 8004818:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004820:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004822:	429a      	cmp	r2, r3
 8004824:	d001      	beq.n	800482a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3730      	adds	r7, #48	; 0x30
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	58024400 	.word	0x58024400

08004838 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e19c      	b.n	8004b86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800484c:	4b8a      	ldr	r3, [pc, #552]	; (8004a78 <HAL_RCC_ClockConfig+0x240>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 030f 	and.w	r3, r3, #15
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d910      	bls.n	800487c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485a:	4b87      	ldr	r3, [pc, #540]	; (8004a78 <HAL_RCC_ClockConfig+0x240>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f023 020f 	bic.w	r2, r3, #15
 8004862:	4985      	ldr	r1, [pc, #532]	; (8004a78 <HAL_RCC_ClockConfig+0x240>)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	4313      	orrs	r3, r2
 8004868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800486a:	4b83      	ldr	r3, [pc, #524]	; (8004a78 <HAL_RCC_ClockConfig+0x240>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d001      	beq.n	800487c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e184      	b.n	8004b86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d010      	beq.n	80048aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	4b7b      	ldr	r3, [pc, #492]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004894:	429a      	cmp	r2, r3
 8004896:	d908      	bls.n	80048aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004898:	4b78      	ldr	r3, [pc, #480]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	4975      	ldr	r1, [pc, #468]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d010      	beq.n	80048d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695a      	ldr	r2, [r3, #20]
 80048ba:	4b70      	ldr	r3, [pc, #448]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d908      	bls.n	80048d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048c6:	4b6d      	ldr	r3, [pc, #436]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	496a      	ldr	r1, [pc, #424]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d010      	beq.n	8004906 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699a      	ldr	r2, [r3, #24]
 80048e8:	4b64      	ldr	r3, [pc, #400]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d908      	bls.n	8004906 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048f4:	4b61      	ldr	r3, [pc, #388]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	495e      	ldr	r1, [pc, #376]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004902:	4313      	orrs	r3, r2
 8004904:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d010      	beq.n	8004934 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	69da      	ldr	r2, [r3, #28]
 8004916:	4b59      	ldr	r3, [pc, #356]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800491e:	429a      	cmp	r2, r3
 8004920:	d908      	bls.n	8004934 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004922:	4b56      	ldr	r3, [pc, #344]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	4953      	ldr	r1, [pc, #332]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004930:	4313      	orrs	r3, r2
 8004932:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d010      	beq.n	8004962 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	4b4d      	ldr	r3, [pc, #308]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	429a      	cmp	r2, r3
 800494e:	d908      	bls.n	8004962 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004950:	4b4a      	ldr	r3, [pc, #296]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	f023 020f 	bic.w	r2, r3, #15
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4947      	ldr	r1, [pc, #284]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 800495e:	4313      	orrs	r3, r2
 8004960:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d055      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800496e:	4b43      	ldr	r3, [pc, #268]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	4940      	ldr	r1, [pc, #256]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 800497c:	4313      	orrs	r3, r2
 800497e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d107      	bne.n	8004998 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004988:	4b3c      	ldr	r3, [pc, #240]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d121      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0f6      	b.n	8004b86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d107      	bne.n	80049b0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049a0:	4b36      	ldr	r3, [pc, #216]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d115      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0ea      	b.n	8004b86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d107      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049b8:	4b30      	ldr	r3, [pc, #192]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d109      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0de      	b.n	8004b86 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049c8:	4b2c      	ldr	r3, [pc, #176]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0d6      	b.n	8004b86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049d8:	4b28      	ldr	r3, [pc, #160]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f023 0207 	bic.w	r2, r3, #7
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	4925      	ldr	r1, [pc, #148]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ea:	f7fe ff89 	bl	8003900 <HAL_GetTick>
 80049ee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f0:	e00a      	b.n	8004a08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f2:	f7fe ff85 	bl	8003900 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e0be      	b.n	8004b86 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a08:	4b1c      	ldr	r3, [pc, #112]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d1eb      	bne.n	80049f2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d010      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d208      	bcs.n	8004a48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a36:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	f023 020f 	bic.w	r2, r3, #15
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	490e      	ldr	r1, [pc, #56]	; (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a48:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_RCC_ClockConfig+0x240>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 030f 	and.w	r3, r3, #15
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d214      	bcs.n	8004a80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a56:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <HAL_RCC_ClockConfig+0x240>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f023 020f 	bic.w	r2, r3, #15
 8004a5e:	4906      	ldr	r1, [pc, #24]	; (8004a78 <HAL_RCC_ClockConfig+0x240>)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a66:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <HAL_RCC_ClockConfig+0x240>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d005      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e086      	b.n	8004b86 <HAL_RCC_ClockConfig+0x34e>
 8004a78:	52002000 	.word	0x52002000
 8004a7c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d010      	beq.n	8004aae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	4b3f      	ldr	r3, [pc, #252]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d208      	bcs.n	8004aae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a9c:	4b3c      	ldr	r3, [pc, #240]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	4939      	ldr	r1, [pc, #228]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d010      	beq.n	8004adc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	4b34      	ldr	r3, [pc, #208]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d208      	bcs.n	8004adc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004aca:	4b31      	ldr	r3, [pc, #196]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	492e      	ldr	r1, [pc, #184]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d010      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	699a      	ldr	r2, [r3, #24]
 8004aec:	4b28      	ldr	r3, [pc, #160]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d208      	bcs.n	8004b0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004af8:	4b25      	ldr	r3, [pc, #148]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	4922      	ldr	r1, [pc, #136]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d010      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69da      	ldr	r2, [r3, #28]
 8004b1a:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d208      	bcs.n	8004b38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004b26:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	4917      	ldr	r1, [pc, #92]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004b38:	f000 f834 	bl	8004ba4 <HAL_RCC_GetSysClockFreq>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	4b14      	ldr	r3, [pc, #80]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	0a1b      	lsrs	r3, r3, #8
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	4912      	ldr	r1, [pc, #72]	; (8004b94 <HAL_RCC_ClockConfig+0x35c>)
 8004b4a:	5ccb      	ldrb	r3, [r1, r3]
 8004b4c:	f003 031f 	and.w	r3, r3, #31
 8004b50:	fa22 f303 	lsr.w	r3, r2, r3
 8004b54:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004b56:	4b0e      	ldr	r3, [pc, #56]	; (8004b90 <HAL_RCC_ClockConfig+0x358>)
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	4a0d      	ldr	r2, [pc, #52]	; (8004b94 <HAL_RCC_ClockConfig+0x35c>)
 8004b60:	5cd3      	ldrb	r3, [r2, r3]
 8004b62:	f003 031f 	and.w	r3, r3, #31
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6c:	4a0a      	ldr	r2, [pc, #40]	; (8004b98 <HAL_RCC_ClockConfig+0x360>)
 8004b6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b70:	4a0a      	ldr	r2, [pc, #40]	; (8004b9c <HAL_RCC_ClockConfig+0x364>)
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004b76:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <HAL_RCC_ClockConfig+0x368>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fe fe76 	bl	800386c <HAL_InitTick>
 8004b80:	4603      	mov	r3, r0
 8004b82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	58024400 	.word	0x58024400
 8004b94:	080195a4 	.word	0x080195a4
 8004b98:	24000074 	.word	0x24000074
 8004b9c:	24000070 	.word	0x24000070
 8004ba0:	24000078 	.word	0x24000078

08004ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b089      	sub	sp, #36	; 0x24
 8004ba8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004baa:	4bb3      	ldr	r3, [pc, #716]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bb2:	2b18      	cmp	r3, #24
 8004bb4:	f200 8155 	bhi.w	8004e62 <HAL_RCC_GetSysClockFreq+0x2be>
 8004bb8:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004c25 	.word	0x08004c25
 8004bc4:	08004e63 	.word	0x08004e63
 8004bc8:	08004e63 	.word	0x08004e63
 8004bcc:	08004e63 	.word	0x08004e63
 8004bd0:	08004e63 	.word	0x08004e63
 8004bd4:	08004e63 	.word	0x08004e63
 8004bd8:	08004e63 	.word	0x08004e63
 8004bdc:	08004e63 	.word	0x08004e63
 8004be0:	08004c4b 	.word	0x08004c4b
 8004be4:	08004e63 	.word	0x08004e63
 8004be8:	08004e63 	.word	0x08004e63
 8004bec:	08004e63 	.word	0x08004e63
 8004bf0:	08004e63 	.word	0x08004e63
 8004bf4:	08004e63 	.word	0x08004e63
 8004bf8:	08004e63 	.word	0x08004e63
 8004bfc:	08004e63 	.word	0x08004e63
 8004c00:	08004c51 	.word	0x08004c51
 8004c04:	08004e63 	.word	0x08004e63
 8004c08:	08004e63 	.word	0x08004e63
 8004c0c:	08004e63 	.word	0x08004e63
 8004c10:	08004e63 	.word	0x08004e63
 8004c14:	08004e63 	.word	0x08004e63
 8004c18:	08004e63 	.word	0x08004e63
 8004c1c:	08004e63 	.word	0x08004e63
 8004c20:	08004c57 	.word	0x08004c57
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c24:	4b94      	ldr	r3, [pc, #592]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d009      	beq.n	8004c44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c30:	4b91      	ldr	r3, [pc, #580]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	08db      	lsrs	r3, r3, #3
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	4a90      	ldr	r2, [pc, #576]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004c42:	e111      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004c44:	4b8d      	ldr	r3, [pc, #564]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c46:	61bb      	str	r3, [r7, #24]
    break;
 8004c48:	e10e      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004c4a:	4b8d      	ldr	r3, [pc, #564]	; (8004e80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c4c:	61bb      	str	r3, [r7, #24]
    break;
 8004c4e:	e10b      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004c50:	4b8c      	ldr	r3, [pc, #560]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004c52:	61bb      	str	r3, [r7, #24]
    break;
 8004c54:	e108      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c56:	4b88      	ldr	r3, [pc, #544]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004c60:	4b85      	ldr	r3, [pc, #532]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	091b      	lsrs	r3, r3, #4
 8004c66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c6a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004c6c:	4b82      	ldr	r3, [pc, #520]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004c76:	4b80      	ldr	r3, [pc, #512]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7a:	08db      	lsrs	r3, r3, #3
 8004c7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	fb02 f303 	mul.w	r3, r2, r3
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 80e1 	beq.w	8004e5c <HAL_RCC_GetSysClockFreq+0x2b8>
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	f000 8083 	beq.w	8004da8 <HAL_RCC_GetSysClockFreq+0x204>
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	f200 80a1 	bhi.w	8004dec <HAL_RCC_GetSysClockFreq+0x248>
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x114>
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d056      	beq.n	8004d64 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004cb6:	e099      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cb8:	4b6f      	ldr	r3, [pc, #444]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0320 	and.w	r3, r3, #32
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d02d      	beq.n	8004d20 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004cc4:	4b6c      	ldr	r3, [pc, #432]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	08db      	lsrs	r3, r3, #3
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	4a6b      	ldr	r2, [pc, #428]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	ee07 3a90 	vmov	s15, r3
 8004cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cee:	4b62      	ldr	r3, [pc, #392]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004d1e:	e087      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	ee07 3a90 	vmov	s15, r3
 8004d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004e8c <HAL_RCC_GetSysClockFreq+0x2e8>
 8004d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d32:	4b51      	ldr	r3, [pc, #324]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d3a:	ee07 3a90 	vmov	s15, r3
 8004d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d42:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d62:	e065      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004e90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d76:	4b40      	ldr	r3, [pc, #256]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004da6:	e043      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004e94 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dba:	4b2f      	ldr	r3, [pc, #188]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dea:	e021      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004e90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dfe:	4b1e      	ldr	r3, [pc, #120]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e06:	ee07 3a90 	vmov	s15, r3
 8004e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e2e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004e30:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e34:	0a5b      	lsrs	r3, r3, #9
 8004e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	ee07 3a90 	vmov	s15, r3
 8004e44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e48:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e54:	ee17 3a90 	vmov	r3, s15
 8004e58:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004e5a:	e005      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61bb      	str	r3, [r7, #24]
    break;
 8004e60:	e002      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004e62:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e64:	61bb      	str	r3, [r7, #24]
    break;
 8004e66:	bf00      	nop
  }

  return sysclockfreq;
 8004e68:	69bb      	ldr	r3, [r7, #24]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3724      	adds	r7, #36	; 0x24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	58024400 	.word	0x58024400
 8004e7c:	03d09000 	.word	0x03d09000
 8004e80:	003d0900 	.word	0x003d0900
 8004e84:	007a1200 	.word	0x007a1200
 8004e88:	46000000 	.word	0x46000000
 8004e8c:	4c742400 	.word	0x4c742400
 8004e90:	4a742400 	.word	0x4a742400
 8004e94:	4af42400 	.word	0x4af42400

08004e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004e9e:	f7ff fe81 	bl	8004ba4 <HAL_RCC_GetSysClockFreq>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	0a1b      	lsrs	r3, r3, #8
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	490f      	ldr	r1, [pc, #60]	; (8004eec <HAL_RCC_GetHCLKFreq+0x54>)
 8004eb0:	5ccb      	ldrb	r3, [r1, r3]
 8004eb2:	f003 031f 	and.w	r3, r3, #31
 8004eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eba:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004ebc:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	4a09      	ldr	r2, [pc, #36]	; (8004eec <HAL_RCC_GetHCLKFreq+0x54>)
 8004ec6:	5cd3      	ldrb	r3, [r2, r3]
 8004ec8:	f003 031f 	and.w	r3, r3, #31
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed2:	4a07      	ldr	r2, [pc, #28]	; (8004ef0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ed4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ed6:	4a07      	ldr	r2, [pc, #28]	; (8004ef4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004edc:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ede:	681b      	ldr	r3, [r3, #0]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	58024400 	.word	0x58024400
 8004eec:	080195a4 	.word	0x080195a4
 8004ef0:	24000074 	.word	0x24000074
 8004ef4:	24000070 	.word	0x24000070

08004ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004efc:	f7ff ffcc 	bl	8004e98 <HAL_RCC_GetHCLKFreq>
 8004f00:	4602      	mov	r2, r0
 8004f02:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	091b      	lsrs	r3, r3, #4
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	4904      	ldr	r1, [pc, #16]	; (8004f20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f0e:	5ccb      	ldrb	r3, [r1, r3]
 8004f10:	f003 031f 	and.w	r3, r3, #31
 8004f14:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	58024400 	.word	0x58024400
 8004f20:	080195a4 	.word	0x080195a4

08004f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004f28:	f7ff ffb6 	bl	8004e98 <HAL_RCC_GetHCLKFreq>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	0a1b      	lsrs	r3, r3, #8
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	4904      	ldr	r1, [pc, #16]	; (8004f4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f3a:	5ccb      	ldrb	r3, [r1, r3]
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	58024400 	.word	0x58024400
 8004f4c:	080195a4 	.word	0x080195a4

08004f50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f58:	2300      	movs	r3, #0
 8004f5a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d03f      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f74:	d02a      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f7a:	d824      	bhi.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f80:	d018      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f86:	d81e      	bhi.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f90:	d007      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f92:	e018      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f94:	4b9f      	ldr	r3, [pc, #636]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	4a9e      	ldr	r2, [pc, #632]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004fa0:	e015      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	2102      	movs	r1, #2
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f001 f99b 	bl	80062e4 <RCCEx_PLL2_Config>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004fb2:	e00c      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3324      	adds	r3, #36	; 0x24
 8004fb8:	2102      	movs	r1, #2
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f001 fa44 	bl	8006448 <RCCEx_PLL3_Config>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004fc4:	e003      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8004fca:	e000      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004fcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fce:	7dfb      	ldrb	r3, [r7, #23]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d109      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004fd4:	4b8f      	ldr	r3, [pc, #572]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fe0:	498c      	ldr	r1, [pc, #560]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	650b      	str	r3, [r1, #80]	; 0x50
 8004fe6:	e001      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
 8004fea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d03d      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d826      	bhi.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005000:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005006:	bf00      	nop
 8005008:	0800501d 	.word	0x0800501d
 800500c:	0800502b 	.word	0x0800502b
 8005010:	0800503d 	.word	0x0800503d
 8005014:	08005055 	.word	0x08005055
 8005018:	08005055 	.word	0x08005055
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800501c:	4b7d      	ldr	r3, [pc, #500]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	4a7c      	ldr	r2, [pc, #496]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005026:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005028:	e015      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3304      	adds	r3, #4
 800502e:	2100      	movs	r1, #0
 8005030:	4618      	mov	r0, r3
 8005032:	f001 f957 	bl	80062e4 <RCCEx_PLL2_Config>
 8005036:	4603      	mov	r3, r0
 8005038:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800503a:	e00c      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3324      	adds	r3, #36	; 0x24
 8005040:	2100      	movs	r1, #0
 8005042:	4618      	mov	r0, r3
 8005044:	f001 fa00 	bl	8006448 <RCCEx_PLL3_Config>
 8005048:	4603      	mov	r3, r0
 800504a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800504c:	e003      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	75fb      	strb	r3, [r7, #23]
      break;
 8005052:	e000      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005056:	7dfb      	ldrb	r3, [r7, #23]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d109      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800505c:	4b6d      	ldr	r3, [pc, #436]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800505e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005060:	f023 0207 	bic.w	r2, r3, #7
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005068:	496a      	ldr	r1, [pc, #424]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800506a:	4313      	orrs	r3, r2
 800506c:	650b      	str	r3, [r1, #80]	; 0x50
 800506e:	e001      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005070:	7dfb      	ldrb	r3, [r7, #23]
 8005072:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800507c:	2b00      	cmp	r3, #0
 800507e:	d04a      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005084:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005088:	d031      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800508a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800508e:	d82b      	bhi.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005094:	d02d      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8005096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800509a:	d825      	bhi.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800509c:	2bc0      	cmp	r3, #192	; 0xc0
 800509e:	d02a      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80050a0:	2bc0      	cmp	r3, #192	; 0xc0
 80050a2:	d821      	bhi.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80050a4:	2b80      	cmp	r3, #128	; 0x80
 80050a6:	d016      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80050a8:	2b80      	cmp	r3, #128	; 0x80
 80050aa:	d81d      	bhi.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80050b0:	2b40      	cmp	r3, #64	; 0x40
 80050b2:	d007      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80050b4:	e018      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050b6:	4b57      	ldr	r3, [pc, #348]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80050b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ba:	4a56      	ldr	r2, [pc, #344]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80050bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80050c2:	e019      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3304      	adds	r3, #4
 80050c8:	2100      	movs	r1, #0
 80050ca:	4618      	mov	r0, r3
 80050cc:	f001 f90a 	bl	80062e4 <RCCEx_PLL2_Config>
 80050d0:	4603      	mov	r3, r0
 80050d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80050d4:	e010      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3324      	adds	r3, #36	; 0x24
 80050da:	2100      	movs	r1, #0
 80050dc:	4618      	mov	r0, r3
 80050de:	f001 f9b3 	bl	8006448 <RCCEx_PLL3_Config>
 80050e2:	4603      	mov	r3, r0
 80050e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80050e6:	e007      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	75fb      	strb	r3, [r7, #23]
      break;
 80050ec:	e004      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80050ee:	bf00      	nop
 80050f0:	e002      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80050f2:	bf00      	nop
 80050f4:	e000      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80050f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050f8:	7dfb      	ldrb	r3, [r7, #23]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d109      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80050fe:	4b45      	ldr	r3, [pc, #276]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005102:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510a:	4942      	ldr	r1, [pc, #264]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800510c:	4313      	orrs	r3, r2
 800510e:	650b      	str	r3, [r1, #80]	; 0x50
 8005110:	e001      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005112:	7dfb      	ldrb	r3, [r7, #23]
 8005114:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800511e:	2b00      	cmp	r3, #0
 8005120:	d04f      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005126:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800512a:	d036      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800512c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005130:	d830      	bhi.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005136:	d032      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8005138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513c:	d82a      	bhi.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800513e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005142:	d02e      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8005144:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005148:	d824      	bhi.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800514a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800514e:	d018      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8005150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005154:	d81e      	bhi.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800515a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800515e:	d007      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8005160:	e018      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005162:	4b2c      	ldr	r3, [pc, #176]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	4a2b      	ldr	r2, [pc, #172]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800516c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800516e:	e019      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3304      	adds	r3, #4
 8005174:	2100      	movs	r1, #0
 8005176:	4618      	mov	r0, r3
 8005178:	f001 f8b4 	bl	80062e4 <RCCEx_PLL2_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005180:	e010      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3324      	adds	r3, #36	; 0x24
 8005186:	2100      	movs	r1, #0
 8005188:	4618      	mov	r0, r3
 800518a:	f001 f95d 	bl	8006448 <RCCEx_PLL3_Config>
 800518e:	4603      	mov	r3, r0
 8005190:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005192:	e007      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	75fb      	strb	r3, [r7, #23]
      break;
 8005198:	e004      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800519a:	bf00      	nop
 800519c:	e002      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800519e:	bf00      	nop
 80051a0:	e000      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80051a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051a4:	7dfb      	ldrb	r3, [r7, #23]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d109      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80051aa:	4b1a      	ldr	r3, [pc, #104]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ae:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b6:	4917      	ldr	r1, [pc, #92]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	650b      	str	r3, [r1, #80]	; 0x50
 80051bc:	e001      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051be:	7dfb      	ldrb	r3, [r7, #23]
 80051c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d034      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d2:	2b30      	cmp	r3, #48	; 0x30
 80051d4:	d01c      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80051d6:	2b30      	cmp	r3, #48	; 0x30
 80051d8:	d817      	bhi.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80051da:	2b20      	cmp	r3, #32
 80051dc:	d00c      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80051de:	2b20      	cmp	r3, #32
 80051e0:	d813      	bhi.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d018      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80051e6:	2b10      	cmp	r3, #16
 80051e8:	d10f      	bne.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ea:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ee:	4a09      	ldr	r2, [pc, #36]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80051f6:	e010      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3304      	adds	r3, #4
 80051fc:	2102      	movs	r1, #2
 80051fe:	4618      	mov	r0, r3
 8005200:	f001 f870 	bl	80062e4 <RCCEx_PLL2_Config>
 8005204:	4603      	mov	r3, r0
 8005206:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005208:	e007      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	75fb      	strb	r3, [r7, #23]
      break;
 800520e:	e004      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8005210:	bf00      	nop
 8005212:	e002      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005214:	58024400 	.word	0x58024400
      break;
 8005218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800521a:	7dfb      	ldrb	r3, [r7, #23]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d109      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005220:	4b9b      	ldr	r3, [pc, #620]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005224:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522c:	4998      	ldr	r1, [pc, #608]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800522e:	4313      	orrs	r3, r2
 8005230:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005232:	e001      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005234:	7dfb      	ldrb	r3, [r7, #23]
 8005236:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d047      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800524c:	d030      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800524e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005252:	d82a      	bhi.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005254:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005258:	d02c      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800525a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800525e:	d824      	bhi.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005264:	d018      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800526a:	d81e      	bhi.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005274:	d007      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005276:	e018      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005278:	4b85      	ldr	r3, [pc, #532]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	4a84      	ldr	r2, [pc, #528]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800527e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005282:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005284:	e017      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3304      	adds	r3, #4
 800528a:	2100      	movs	r1, #0
 800528c:	4618      	mov	r0, r3
 800528e:	f001 f829 	bl	80062e4 <RCCEx_PLL2_Config>
 8005292:	4603      	mov	r3, r0
 8005294:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005296:	e00e      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3324      	adds	r3, #36	; 0x24
 800529c:	2100      	movs	r1, #0
 800529e:	4618      	mov	r0, r3
 80052a0:	f001 f8d2 	bl	8006448 <RCCEx_PLL3_Config>
 80052a4:	4603      	mov	r3, r0
 80052a6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80052a8:	e005      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	75fb      	strb	r3, [r7, #23]
      break;
 80052ae:	e002      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80052b0:	bf00      	nop
 80052b2:	e000      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80052b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052b6:	7dfb      	ldrb	r3, [r7, #23]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d109      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80052bc:	4b74      	ldr	r3, [pc, #464]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80052be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c8:	4971      	ldr	r1, [pc, #452]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	650b      	str	r3, [r1, #80]	; 0x50
 80052ce:	e001      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d0:	7dfb      	ldrb	r3, [r7, #23]
 80052d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d049      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052e8:	d02e      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80052ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052ee:	d828      	bhi.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80052f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052f4:	d02a      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80052f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052fa:	d822      	bhi.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80052fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005300:	d026      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005302:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005306:	d81c      	bhi.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800530c:	d010      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800530e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005312:	d816      	bhi.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01d      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800531c:	d111      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3304      	adds	r3, #4
 8005322:	2101      	movs	r1, #1
 8005324:	4618      	mov	r0, r3
 8005326:	f000 ffdd 	bl	80062e4 <RCCEx_PLL2_Config>
 800532a:	4603      	mov	r3, r0
 800532c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800532e:	e012      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3324      	adds	r3, #36	; 0x24
 8005334:	2101      	movs	r1, #1
 8005336:	4618      	mov	r0, r3
 8005338:	f001 f886 	bl	8006448 <RCCEx_PLL3_Config>
 800533c:	4603      	mov	r3, r0
 800533e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005340:	e009      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	75fb      	strb	r3, [r7, #23]
      break;
 8005346:	e006      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005348:	bf00      	nop
 800534a:	e004      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800534c:	bf00      	nop
 800534e:	e002      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005350:	bf00      	nop
 8005352:	e000      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005356:	7dfb      	ldrb	r3, [r7, #23]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d109      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800535c:	4b4c      	ldr	r3, [pc, #304]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800535e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005360:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005368:	4949      	ldr	r1, [pc, #292]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800536a:	4313      	orrs	r3, r2
 800536c:	650b      	str	r3, [r1, #80]	; 0x50
 800536e:	e001      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005370:	7dfb      	ldrb	r3, [r7, #23]
 8005372:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d053      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005386:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800538a:	d034      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800538c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005390:	d82e      	bhi.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005396:	d030      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800539c:	d828      	bhi.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800539e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a2:	d02c      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80053a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a8:	d822      	bhi.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80053aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053ae:	d028      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80053b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053b4:	d81c      	bhi.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80053b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ba:	d010      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80053bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053c0:	d816      	bhi.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d01f      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80053c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053ca:	d111      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3304      	adds	r3, #4
 80053d0:	2101      	movs	r1, #1
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 ff86 	bl	80062e4 <RCCEx_PLL2_Config>
 80053d8:	4603      	mov	r3, r0
 80053da:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80053dc:	e014      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3324      	adds	r3, #36	; 0x24
 80053e2:	2101      	movs	r1, #1
 80053e4:	4618      	mov	r0, r3
 80053e6:	f001 f82f 	bl	8006448 <RCCEx_PLL3_Config>
 80053ea:	4603      	mov	r3, r0
 80053ec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80053ee:	e00b      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	75fb      	strb	r3, [r7, #23]
      break;
 80053f4:	e008      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80053f6:	bf00      	nop
 80053f8:	e006      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80053fa:	bf00      	nop
 80053fc:	e004      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80053fe:	bf00      	nop
 8005400:	e002      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005402:	bf00      	nop
 8005404:	e000      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005408:	7dfb      	ldrb	r3, [r7, #23]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800540e:	4b20      	ldr	r3, [pc, #128]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005412:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800541c:	491c      	ldr	r1, [pc, #112]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800541e:	4313      	orrs	r3, r2
 8005420:	658b      	str	r3, [r1, #88]	; 0x58
 8005422:	e001      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005424:	7dfb      	ldrb	r3, [r7, #23]
 8005426:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d031      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800543c:	d00e      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800543e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005442:	d814      	bhi.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d015      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005448:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800544c:	d10f      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800544e:	4b10      	ldr	r3, [pc, #64]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005452:	4a0f      	ldr	r2, [pc, #60]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005458:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800545a:	e00c      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3304      	adds	r3, #4
 8005460:	2101      	movs	r1, #1
 8005462:	4618      	mov	r0, r3
 8005464:	f000 ff3e 	bl	80062e4 <RCCEx_PLL2_Config>
 8005468:	4603      	mov	r3, r0
 800546a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800546c:	e003      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	75fb      	strb	r3, [r7, #23]
      break;
 8005472:	e000      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8005474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005476:	7dfb      	ldrb	r3, [r7, #23]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10b      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800547c:	4b04      	ldr	r3, [pc, #16]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800547e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005480:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005488:	4901      	ldr	r1, [pc, #4]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800548a:	4313      	orrs	r3, r2
 800548c:	650b      	str	r3, [r1, #80]	; 0x50
 800548e:	e003      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8005490:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005494:	7dfb      	ldrb	r3, [r7, #23]
 8005496:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d032      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d81b      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80054ac:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80054ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b2:	bf00      	nop
 80054b4:	080054eb 	.word	0x080054eb
 80054b8:	080054c5 	.word	0x080054c5
 80054bc:	080054d3 	.word	0x080054d3
 80054c0:	080054eb 	.word	0x080054eb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054c4:	4bb2      	ldr	r3, [pc, #712]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	4ab1      	ldr	r2, [pc, #708]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80054ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80054d0:	e00c      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3304      	adds	r3, #4
 80054d6:	2102      	movs	r1, #2
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 ff03 	bl	80062e4 <RCCEx_PLL2_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80054e2:	e003      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	75fb      	strb	r3, [r7, #23]
      break;
 80054e8:	e000      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80054ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d109      	bne.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80054f2:	4ba7      	ldr	r3, [pc, #668]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80054f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f6:	f023 0203 	bic.w	r2, r3, #3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fe:	49a4      	ldr	r1, [pc, #656]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005500:	4313      	orrs	r3, r2
 8005502:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005504:	e001      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005506:	7dfb      	ldrb	r3, [r7, #23]
 8005508:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 8086 	beq.w	8005624 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005518:	4b9e      	ldr	r3, [pc, #632]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a9d      	ldr	r2, [pc, #628]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800551e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005522:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005524:	f7fe f9ec 	bl	8003900 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800552a:	e009      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800552c:	f7fe f9e8 	bl	8003900 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b64      	cmp	r3, #100	; 0x64
 8005538:	d902      	bls.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	75fb      	strb	r3, [r7, #23]
        break;
 800553e:	e005      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005540:	4b94      	ldr	r3, [pc, #592]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0ef      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800554c:	7dfb      	ldrb	r3, [r7, #23]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d166      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005552:	4b8f      	ldr	r3, [pc, #572]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005554:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800555c:	4053      	eors	r3, r2
 800555e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005562:	2b00      	cmp	r3, #0
 8005564:	d013      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005566:	4b8a      	ldr	r3, [pc, #552]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800556e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005570:	4b87      	ldr	r3, [pc, #540]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005574:	4a86      	ldr	r2, [pc, #536]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800557a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800557c:	4b84      	ldr	r3, [pc, #528]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800557e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005580:	4a83      	ldr	r2, [pc, #524]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005586:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005588:	4a81      	ldr	r2, [pc, #516]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005598:	d115      	bne.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559a:	f7fe f9b1 	bl	8003900 <HAL_GetTick>
 800559e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055a0:	e00b      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055a2:	f7fe f9ad 	bl	8003900 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d902      	bls.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	75fb      	strb	r3, [r7, #23]
            break;
 80055b8:	e005      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055ba:	4b75      	ldr	r3, [pc, #468]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0ed      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 80055c6:	7dfb      	ldrb	r3, [r7, #23]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d126      	bne.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055da:	d10d      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 80055dc:	4b6c      	ldr	r3, [pc, #432]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055ea:	0919      	lsrs	r1, r3, #4
 80055ec:	4b6a      	ldr	r3, [pc, #424]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055ee:	400b      	ands	r3, r1
 80055f0:	4967      	ldr	r1, [pc, #412]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	610b      	str	r3, [r1, #16]
 80055f6:	e005      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 80055f8:	4b65      	ldr	r3, [pc, #404]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	4a64      	ldr	r2, [pc, #400]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80055fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005602:	6113      	str	r3, [r2, #16]
 8005604:	4b62      	ldr	r3, [pc, #392]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005606:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800560e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005612:	495f      	ldr	r1, [pc, #380]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005614:	4313      	orrs	r3, r2
 8005616:	670b      	str	r3, [r1, #112]	; 0x70
 8005618:	e004      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	75bb      	strb	r3, [r7, #22]
 800561e:	e001      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005620:	7dfb      	ldrb	r3, [r7, #23]
 8005622:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d07f      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005636:	2b28      	cmp	r3, #40	; 0x28
 8005638:	d866      	bhi.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 800563a:	a201      	add	r2, pc, #4	; (adr r2, 8005640 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 800563c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005640:	0800570f 	.word	0x0800570f
 8005644:	08005709 	.word	0x08005709
 8005648:	08005709 	.word	0x08005709
 800564c:	08005709 	.word	0x08005709
 8005650:	08005709 	.word	0x08005709
 8005654:	08005709 	.word	0x08005709
 8005658:	08005709 	.word	0x08005709
 800565c:	08005709 	.word	0x08005709
 8005660:	080056e5 	.word	0x080056e5
 8005664:	08005709 	.word	0x08005709
 8005668:	08005709 	.word	0x08005709
 800566c:	08005709 	.word	0x08005709
 8005670:	08005709 	.word	0x08005709
 8005674:	08005709 	.word	0x08005709
 8005678:	08005709 	.word	0x08005709
 800567c:	08005709 	.word	0x08005709
 8005680:	080056f7 	.word	0x080056f7
 8005684:	08005709 	.word	0x08005709
 8005688:	08005709 	.word	0x08005709
 800568c:	08005709 	.word	0x08005709
 8005690:	08005709 	.word	0x08005709
 8005694:	08005709 	.word	0x08005709
 8005698:	08005709 	.word	0x08005709
 800569c:	08005709 	.word	0x08005709
 80056a0:	0800570f 	.word	0x0800570f
 80056a4:	08005709 	.word	0x08005709
 80056a8:	08005709 	.word	0x08005709
 80056ac:	08005709 	.word	0x08005709
 80056b0:	08005709 	.word	0x08005709
 80056b4:	08005709 	.word	0x08005709
 80056b8:	08005709 	.word	0x08005709
 80056bc:	08005709 	.word	0x08005709
 80056c0:	0800570f 	.word	0x0800570f
 80056c4:	08005709 	.word	0x08005709
 80056c8:	08005709 	.word	0x08005709
 80056cc:	08005709 	.word	0x08005709
 80056d0:	08005709 	.word	0x08005709
 80056d4:	08005709 	.word	0x08005709
 80056d8:	08005709 	.word	0x08005709
 80056dc:	08005709 	.word	0x08005709
 80056e0:	0800570f 	.word	0x0800570f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3304      	adds	r3, #4
 80056e8:	2101      	movs	r1, #1
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fdfa 	bl	80062e4 <RCCEx_PLL2_Config>
 80056f0:	4603      	mov	r3, r0
 80056f2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80056f4:	e00c      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3324      	adds	r3, #36	; 0x24
 80056fa:	2101      	movs	r1, #1
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 fea3 	bl	8006448 <RCCEx_PLL3_Config>
 8005702:	4603      	mov	r3, r0
 8005704:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005706:	e003      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	75fb      	strb	r3, [r7, #23]
      break;
 800570c:	e000      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 800570e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005710:	7dfb      	ldrb	r3, [r7, #23]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10a      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005716:	4b1e      	ldr	r3, [pc, #120]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005724:	491a      	ldr	r1, [pc, #104]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005726:	4313      	orrs	r3, r2
 8005728:	654b      	str	r3, [r1, #84]	; 0x54
 800572a:	e001      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572c:	7dfb      	ldrb	r3, [r7, #23]
 800572e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d03f      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005740:	2b05      	cmp	r3, #5
 8005742:	d821      	bhi.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8005744:	a201      	add	r2, pc, #4	; (adr r2, 800574c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8005746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574a:	bf00      	nop
 800574c:	0800579d 	.word	0x0800579d
 8005750:	08005765 	.word	0x08005765
 8005754:	08005777 	.word	0x08005777
 8005758:	0800579d 	.word	0x0800579d
 800575c:	0800579d 	.word	0x0800579d
 8005760:	0800579d 	.word	0x0800579d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3304      	adds	r3, #4
 8005768:	2101      	movs	r1, #1
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fdba 	bl	80062e4 <RCCEx_PLL2_Config>
 8005770:	4603      	mov	r3, r0
 8005772:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005774:	e013      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3324      	adds	r3, #36	; 0x24
 800577a:	2101      	movs	r1, #1
 800577c:	4618      	mov	r0, r3
 800577e:	f000 fe63 	bl	8006448 <RCCEx_PLL3_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005786:	e00a      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	75fb      	strb	r3, [r7, #23]
      break;
 800578c:	e007      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800578e:	bf00      	nop
 8005790:	58024400 	.word	0x58024400
 8005794:	58024800 	.word	0x58024800
 8005798:	00ffffcf 	.word	0x00ffffcf
      break;
 800579c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800579e:	7dfb      	ldrb	r3, [r7, #23]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d109      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80057a4:	4b9f      	ldr	r3, [pc, #636]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80057a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a8:	f023 0207 	bic.w	r2, r3, #7
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057b0:	499c      	ldr	r1, [pc, #624]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	654b      	str	r3, [r1, #84]	; 0x54
 80057b6:	e001      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
 80057ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d039      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057ce:	2b05      	cmp	r3, #5
 80057d0:	d820      	bhi.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80057d2:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	0800581b 	.word	0x0800581b
 80057dc:	080057f1 	.word	0x080057f1
 80057e0:	08005803 	.word	0x08005803
 80057e4:	0800581b 	.word	0x0800581b
 80057e8:	0800581b 	.word	0x0800581b
 80057ec:	0800581b 	.word	0x0800581b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3304      	adds	r3, #4
 80057f4:	2101      	movs	r1, #1
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fd74 	bl	80062e4 <RCCEx_PLL2_Config>
 80057fc:	4603      	mov	r3, r0
 80057fe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005800:	e00c      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3324      	adds	r3, #36	; 0x24
 8005806:	2101      	movs	r1, #1
 8005808:	4618      	mov	r0, r3
 800580a:	f000 fe1d 	bl	8006448 <RCCEx_PLL3_Config>
 800580e:	4603      	mov	r3, r0
 8005810:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005812:	e003      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	75fb      	strb	r3, [r7, #23]
      break;
 8005818:	e000      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800581a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800581c:	7dfb      	ldrb	r3, [r7, #23]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10a      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005822:	4b80      	ldr	r3, [pc, #512]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005826:	f023 0207 	bic.w	r2, r3, #7
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005830:	497c      	ldr	r1, [pc, #496]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005832:	4313      	orrs	r3, r2
 8005834:	658b      	str	r3, [r1, #88]	; 0x58
 8005836:	e001      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005838:	7dfb      	ldrb	r3, [r7, #23]
 800583a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0320 	and.w	r3, r3, #32
 8005844:	2b00      	cmp	r3, #0
 8005846:	d04b      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800584e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005852:	d02e      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8005854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005858:	d828      	bhi.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800585a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585e:	d02a      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005864:	d822      	bhi.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005866:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800586a:	d026      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800586c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005870:	d81c      	bhi.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005872:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005876:	d010      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8005878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800587c:	d816      	bhi.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800587e:	2b00      	cmp	r3, #0
 8005880:	d01d      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005882:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005886:	d111      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3304      	adds	r3, #4
 800588c:	2100      	movs	r1, #0
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fd28 	bl	80062e4 <RCCEx_PLL2_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005898:	e012      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	3324      	adds	r3, #36	; 0x24
 800589e:	2102      	movs	r1, #2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 fdd1 	bl	8006448 <RCCEx_PLL3_Config>
 80058a6:	4603      	mov	r3, r0
 80058a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80058aa:	e009      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	75fb      	strb	r3, [r7, #23]
      break;
 80058b0:	e006      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80058b2:	bf00      	nop
 80058b4:	e004      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80058b6:	bf00      	nop
 80058b8:	e002      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80058ba:	bf00      	nop
 80058bc:	e000      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80058be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10a      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058c6:	4b57      	ldr	r3, [pc, #348]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80058c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058d4:	4953      	ldr	r1, [pc, #332]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	654b      	str	r3, [r1, #84]	; 0x54
 80058da:	e001      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058dc:	7dfb      	ldrb	r3, [r7, #23]
 80058de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d04b      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80058f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80058f6:	d02e      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80058f8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80058fc:	d828      	bhi.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80058fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005902:	d02a      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005908:	d822      	bhi.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800590a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800590e:	d026      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005910:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005914:	d81c      	bhi.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800591a:	d010      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800591c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005920:	d816      	bhi.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005922:	2b00      	cmp	r3, #0
 8005924:	d01d      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800592a:	d111      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3304      	adds	r3, #4
 8005930:	2100      	movs	r1, #0
 8005932:	4618      	mov	r0, r3
 8005934:	f000 fcd6 	bl	80062e4 <RCCEx_PLL2_Config>
 8005938:	4603      	mov	r3, r0
 800593a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800593c:	e012      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	3324      	adds	r3, #36	; 0x24
 8005942:	2102      	movs	r1, #2
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fd7f 	bl	8006448 <RCCEx_PLL3_Config>
 800594a:	4603      	mov	r3, r0
 800594c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800594e:	e009      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	75fb      	strb	r3, [r7, #23]
      break;
 8005954:	e006      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005956:	bf00      	nop
 8005958:	e004      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800595a:	bf00      	nop
 800595c:	e002      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800595e:	bf00      	nop
 8005960:	e000      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005962:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005964:	7dfb      	ldrb	r3, [r7, #23]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10a      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800596a:	4b2e      	ldr	r3, [pc, #184]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800596c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005978:	492a      	ldr	r1, [pc, #168]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800597a:	4313      	orrs	r3, r2
 800597c:	658b      	str	r3, [r1, #88]	; 0x58
 800597e:	e001      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005980:	7dfb      	ldrb	r3, [r7, #23]
 8005982:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598c:	2b00      	cmp	r3, #0
 800598e:	d04d      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005996:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800599a:	d02e      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800599c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80059a0:	d828      	bhi.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80059a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059a6:	d02a      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80059a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ac:	d822      	bhi.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80059ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80059b2:	d026      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80059b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80059b8:	d81c      	bhi.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80059ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059be:	d010      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80059c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059c4:	d816      	bhi.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d01d      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80059ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ce:	d111      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3304      	adds	r3, #4
 80059d4:	2100      	movs	r1, #0
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fc84 	bl	80062e4 <RCCEx_PLL2_Config>
 80059dc:	4603      	mov	r3, r0
 80059de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80059e0:	e012      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	3324      	adds	r3, #36	; 0x24
 80059e6:	2102      	movs	r1, #2
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 fd2d 	bl	8006448 <RCCEx_PLL3_Config>
 80059ee:	4603      	mov	r3, r0
 80059f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80059f2:	e009      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	75fb      	strb	r3, [r7, #23]
      break;
 80059f8:	e006      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80059fa:	bf00      	nop
 80059fc:	e004      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80059fe:	bf00      	nop
 8005a00:	e002      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005a02:	bf00      	nop
 8005a04:	e000      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10c      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005a0e:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a1c:	4901      	ldr	r1, [pc, #4]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	658b      	str	r3, [r1, #88]	; 0x58
 8005a22:	e003      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005a24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a28:	7dfb      	ldrb	r3, [r7, #23]
 8005a2a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0308 	and.w	r3, r3, #8
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01a      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a42:	d10a      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3324      	adds	r3, #36	; 0x24
 8005a48:	2102      	movs	r1, #2
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 fcfc 	bl	8006448 <RCCEx_PLL3_Config>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005a5a:	4b8c      	ldr	r3, [pc, #560]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a68:	4988      	ldr	r1, [pc, #544]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0310 	and.w	r3, r3, #16
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d01a      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a84:	d10a      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	3324      	adds	r3, #36	; 0x24
 8005a8a:	2102      	movs	r1, #2
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 fcdb 	bl	8006448 <RCCEx_PLL3_Config>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a9c:	4b7b      	ldr	r3, [pc, #492]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005aaa:	4978      	ldr	r1, [pc, #480]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d034      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ac2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ac6:	d01d      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8005ac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005acc:	d817      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8005ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad6:	d009      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005ad8:	e011      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	3304      	adds	r3, #4
 8005ade:	2100      	movs	r1, #0
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fbff 	bl	80062e4 <RCCEx_PLL2_Config>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005aea:	e00c      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3324      	adds	r3, #36	; 0x24
 8005af0:	2102      	movs	r1, #2
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fca8 	bl	8006448 <RCCEx_PLL3_Config>
 8005af8:	4603      	mov	r3, r0
 8005afa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005afc:	e003      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	75fb      	strb	r3, [r7, #23]
      break;
 8005b02:	e000      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8005b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b0c:	4b5f      	ldr	r3, [pc, #380]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b1a:	495c      	ldr	r1, [pc, #368]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	658b      	str	r3, [r1, #88]	; 0x58
 8005b20:	e001      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b22:	7dfb      	ldrb	r3, [r7, #23]
 8005b24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d033      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b3c:	d01c      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005b3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b42:	d816      	bhi.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b48:	d003      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8005b4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b4e:	d007      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005b50:	e00f      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b52:	4b4e      	ldr	r3, [pc, #312]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b56:	4a4d      	ldr	r2, [pc, #308]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005b5e:	e00c      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3324      	adds	r3, #36	; 0x24
 8005b64:	2101      	movs	r1, #1
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 fc6e 	bl	8006448 <RCCEx_PLL3_Config>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005b70:	e003      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	75fb      	strb	r3, [r7, #23]
      break;
 8005b76:	e000      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10a      	bne.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b80:	4b42      	ldr	r3, [pc, #264]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b8e:	493f      	ldr	r1, [pc, #252]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	654b      	str	r3, [r1, #84]	; 0x54
 8005b94:	e001      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
 8005b98:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d029      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8005bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb2:	d007      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005bb4:	e00f      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bb6:	4b35      	ldr	r3, [pc, #212]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bba:	4a34      	ldr	r2, [pc, #208]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005bc2:	e00b      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	2102      	movs	r1, #2
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fb8a 	bl	80062e4 <RCCEx_PLL2_Config>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005bd4:	e002      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	75fb      	strb	r3, [r7, #23]
      break;
 8005bda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bdc:	7dfb      	ldrb	r3, [r7, #23]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d109      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005be2:	4b2a      	ldr	r3, [pc, #168]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bee:	4927      	ldr	r1, [pc, #156]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005bf4:	e001      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf6:	7dfb      	ldrb	r3, [r7, #23]
 8005bf8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3324      	adds	r3, #36	; 0x24
 8005c0a:	2102      	movs	r1, #2
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 fc1b 	bl	8006448 <RCCEx_PLL3_Config>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d035      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c32:	d017      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005c34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c38:	d811      	bhi.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c3e:	d013      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8005c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c44:	d80b      	bhi.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d010      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8005c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c4e:	d106      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c50:	4b0e      	ldr	r3, [pc, #56]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	4a0d      	ldr	r2, [pc, #52]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005c5c:	e007      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	75fb      	strb	r3, [r7, #23]
      break;
 8005c62:	e004      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005c64:	bf00      	nop
 8005c66:	e002      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005c68:	bf00      	nop
 8005c6a:	e000      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c6e:	7dfb      	ldrb	r3, [r7, #23]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10d      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c74:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c82:	4902      	ldr	r1, [pc, #8]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	654b      	str	r3, [r1, #84]	; 0x54
 8005c88:	e004      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005c8a:	bf00      	nop
 8005c8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
 8005c92:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d008      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ca0:	4b30      	ldr	r3, [pc, #192]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cac:	492d      	ldr	r1, [pc, #180]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d008      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cbe:	4b29      	ldr	r3, [pc, #164]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cca:	4926      	ldr	r1, [pc, #152]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d008      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005cdc:	4b21      	ldr	r3, [pc, #132]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce8:	491e      	ldr	r1, [pc, #120]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00d      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005cfa:	4b1a      	ldr	r3, [pc, #104]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	4a19      	ldr	r2, [pc, #100]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005d00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d04:	6113      	str	r3, [r2, #16]
 8005d06:	4b17      	ldr	r3, [pc, #92]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005d08:	691a      	ldr	r2, [r3, #16]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d10:	4914      	ldr	r1, [pc, #80]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	da08      	bge.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005d1e:	4b11      	ldr	r3, [pc, #68]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d2a:	490e      	ldr	r1, [pc, #56]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d009      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d3c:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d4a:	4906      	ldr	r1, [pc, #24]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005d50:	7dbb      	ldrb	r3, [r7, #22]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	e000      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	58024400 	.word	0x58024400

08005d68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005d6c:	f7ff f894 	bl	8004e98 <HAL_RCC_GetHCLKFreq>
 8005d70:	4602      	mov	r2, r0
 8005d72:	4b06      	ldr	r3, [pc, #24]	; (8005d8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	091b      	lsrs	r3, r3, #4
 8005d78:	f003 0307 	and.w	r3, r3, #7
 8005d7c:	4904      	ldr	r1, [pc, #16]	; (8005d90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005d7e:	5ccb      	ldrb	r3, [r1, r3]
 8005d80:	f003 031f 	and.w	r3, r3, #31
 8005d84:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	58024400 	.word	0x58024400
 8005d90:	080195a4 	.word	0x080195a4

08005d94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b089      	sub	sp, #36	; 0x24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d9c:	4ba1      	ldr	r3, [pc, #644]	; (8006024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005da6:	4b9f      	ldr	r3, [pc, #636]	; (8006024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005daa:	0b1b      	lsrs	r3, r3, #12
 8005dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005db0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005db2:	4b9c      	ldr	r3, [pc, #624]	; (8006024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db6:	091b      	lsrs	r3, r3, #4
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005dbe:	4b99      	ldr	r3, [pc, #612]	; (8006024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc2:	08db      	lsrs	r3, r3, #3
 8005dc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	fb02 f303 	mul.w	r3, r2, r3
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 8111 	beq.w	8006004 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	f000 8083 	beq.w	8005ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	f200 80a1 	bhi.w	8005f34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d056      	beq.n	8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005dfe:	e099      	b.n	8005f34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e00:	4b88      	ldr	r3, [pc, #544]	; (8006024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0320 	and.w	r3, r3, #32
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d02d      	beq.n	8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e0c:	4b85      	ldr	r3, [pc, #532]	; (8006024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	08db      	lsrs	r3, r3, #3
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	4a84      	ldr	r2, [pc, #528]	; (8006028 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005e18:	fa22 f303 	lsr.w	r3, r2, r3
 8005e1c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	ee07 3a90 	vmov	s15, r3
 8005e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e36:	4b7b      	ldr	r3, [pc, #492]	; (8006024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3e:	ee07 3a90 	vmov	s15, r3
 8005e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800602c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e62:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005e66:	e087      	b.n	8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e7a:	4b6a      	ldr	r3, [pc, #424]	; (8006024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800602c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005eaa:	e065      	b.n	8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	ee07 3a90 	vmov	s15, r3
 8005eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ebe:	4b59      	ldr	r3, [pc, #356]	; (8006024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec6:	ee07 3a90 	vmov	s15, r3
 8005eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ed2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800602c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005eee:	e043      	b.n	8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006038 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f02:	4b48      	ldr	r3, [pc, #288]	; (8006024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f16:	eddf 5a45 	vldr	s11, [pc, #276]	; 800602c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f32:	e021      	b.n	8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f46:	4b37      	ldr	r3, [pc, #220]	; (8006024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f4e:	ee07 3a90 	vmov	s15, r3
 8005f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800602c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005f78:	4b2a      	ldr	r3, [pc, #168]	; (8006024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7c:	0a5b      	lsrs	r3, r3, #9
 8005f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f92:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f9e:	ee17 2a90 	vmov	r2, s15
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005fa6:	4b1f      	ldr	r3, [pc, #124]	; (8006024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	0c1b      	lsrs	r3, r3, #16
 8005fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fb0:	ee07 3a90 	vmov	s15, r3
 8005fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fcc:	ee17 2a90 	vmov	r2, s15
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005fd4:	4b13      	ldr	r3, [pc, #76]	; (8006024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd8:	0e1b      	lsrs	r3, r3, #24
 8005fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fee:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ffa:	ee17 2a90 	vmov	r2, s15
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006002:	e008      	b.n	8006016 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	609a      	str	r2, [r3, #8]
}
 8006016:	bf00      	nop
 8006018:	3724      	adds	r7, #36	; 0x24
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	58024400 	.word	0x58024400
 8006028:	03d09000 	.word	0x03d09000
 800602c:	46000000 	.word	0x46000000
 8006030:	4c742400 	.word	0x4c742400
 8006034:	4a742400 	.word	0x4a742400
 8006038:	4af42400 	.word	0x4af42400

0800603c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800603c:	b480      	push	{r7}
 800603e:	b089      	sub	sp, #36	; 0x24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006044:	4ba1      	ldr	r3, [pc, #644]	; (80062cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006048:	f003 0303 	and.w	r3, r3, #3
 800604c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800604e:	4b9f      	ldr	r3, [pc, #636]	; (80062cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006052:	0d1b      	lsrs	r3, r3, #20
 8006054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006058:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800605a:	4b9c      	ldr	r3, [pc, #624]	; (80062cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800605c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605e:	0a1b      	lsrs	r3, r3, #8
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006066:	4b99      	ldr	r3, [pc, #612]	; (80062cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606a:	08db      	lsrs	r3, r3, #3
 800606c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	fb02 f303 	mul.w	r3, r2, r3
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 8111 	beq.w	80062ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	2b02      	cmp	r3, #2
 800608e:	f000 8083 	beq.w	8006198 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	2b02      	cmp	r3, #2
 8006096:	f200 80a1 	bhi.w	80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d056      	beq.n	8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80060a6:	e099      	b.n	80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060a8:	4b88      	ldr	r3, [pc, #544]	; (80062cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0320 	and.w	r3, r3, #32
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d02d      	beq.n	8006110 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060b4:	4b85      	ldr	r3, [pc, #532]	; (80062cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	08db      	lsrs	r3, r3, #3
 80060ba:	f003 0303 	and.w	r3, r3, #3
 80060be:	4a84      	ldr	r2, [pc, #528]	; (80062d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80060c0:	fa22 f303 	lsr.w	r3, r2, r3
 80060c4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	ee07 3a90 	vmov	s15, r3
 80060cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060de:	4b7b      	ldr	r3, [pc, #492]	; (80062cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e6:	ee07 3a90 	vmov	s15, r3
 80060ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80060f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800610a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800610e:	e087      	b.n	8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800611a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800611e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006122:	4b6a      	ldr	r3, [pc, #424]	; (80062cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800612a:	ee07 3a90 	vmov	s15, r3
 800612e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006132:	ed97 6a03 	vldr	s12, [r7, #12]
 8006136:	eddf 5a67 	vldr	s11, [pc, #412]	; 80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800613a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800613e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800614a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006152:	e065      	b.n	8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	ee07 3a90 	vmov	s15, r3
 800615a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800615e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006166:	4b59      	ldr	r3, [pc, #356]	; (80062cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616e:	ee07 3a90 	vmov	s15, r3
 8006172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006176:	ed97 6a03 	vldr	s12, [r7, #12]
 800617a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800617e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800618a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800618e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006192:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006196:	e043      	b.n	8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	ee07 3a90 	vmov	s15, r3
 800619e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80062e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80061a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061aa:	4b48      	ldr	r3, [pc, #288]	; (80062cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b2:	ee07 3a90 	vmov	s15, r3
 80061b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80061be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061da:	e021      	b.n	8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	ee07 3a90 	vmov	s15, r3
 80061e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80061ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ee:	4b37      	ldr	r3, [pc, #220]	; (80062cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f6:	ee07 3a90 	vmov	s15, r3
 80061fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006202:	eddf 5a34 	vldr	s11, [pc, #208]	; 80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800620a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800620e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800621a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800621e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006220:	4b2a      	ldr	r3, [pc, #168]	; (80062cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006224:	0a5b      	lsrs	r3, r3, #9
 8006226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800622a:	ee07 3a90 	vmov	s15, r3
 800622e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006236:	ee37 7a87 	vadd.f32	s14, s15, s14
 800623a:	edd7 6a07 	vldr	s13, [r7, #28]
 800623e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006246:	ee17 2a90 	vmov	r2, s15
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800624e:	4b1f      	ldr	r3, [pc, #124]	; (80062cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	0c1b      	lsrs	r3, r3, #16
 8006254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006258:	ee07 3a90 	vmov	s15, r3
 800625c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006260:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006264:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006268:	edd7 6a07 	vldr	s13, [r7, #28]
 800626c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006274:	ee17 2a90 	vmov	r2, s15
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800627c:	4b13      	ldr	r3, [pc, #76]	; (80062cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006280:	0e1b      	lsrs	r3, r3, #24
 8006282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006286:	ee07 3a90 	vmov	s15, r3
 800628a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006292:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006296:	edd7 6a07 	vldr	s13, [r7, #28]
 800629a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800629e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062a2:	ee17 2a90 	vmov	r2, s15
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80062aa:	e008      	b.n	80062be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	609a      	str	r2, [r3, #8]
}
 80062be:	bf00      	nop
 80062c0:	3724      	adds	r7, #36	; 0x24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	58024400 	.word	0x58024400
 80062d0:	03d09000 	.word	0x03d09000
 80062d4:	46000000 	.word	0x46000000
 80062d8:	4c742400 	.word	0x4c742400
 80062dc:	4a742400 	.word	0x4a742400
 80062e0:	4af42400 	.word	0x4af42400

080062e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062f2:	4b53      	ldr	r3, [pc, #332]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 80062f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f6:	f003 0303 	and.w	r3, r3, #3
 80062fa:	2b03      	cmp	r3, #3
 80062fc:	d101      	bne.n	8006302 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e099      	b.n	8006436 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006302:	4b4f      	ldr	r3, [pc, #316]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a4e      	ldr	r2, [pc, #312]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 8006308:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800630c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800630e:	f7fd faf7 	bl	8003900 <HAL_GetTick>
 8006312:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006314:	e008      	b.n	8006328 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006316:	f7fd faf3 	bl	8003900 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d901      	bls.n	8006328 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e086      	b.n	8006436 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006328:	4b45      	ldr	r3, [pc, #276]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1f0      	bne.n	8006316 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006334:	4b42      	ldr	r3, [pc, #264]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 8006336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006338:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	031b      	lsls	r3, r3, #12
 8006342:	493f      	ldr	r1, [pc, #252]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 8006344:	4313      	orrs	r3, r2
 8006346:	628b      	str	r3, [r1, #40]	; 0x28
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	3b01      	subs	r3, #1
 800634e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	3b01      	subs	r3, #1
 8006358:	025b      	lsls	r3, r3, #9
 800635a:	b29b      	uxth	r3, r3
 800635c:	431a      	orrs	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	3b01      	subs	r3, #1
 8006364:	041b      	lsls	r3, r3, #16
 8006366:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	3b01      	subs	r3, #1
 8006372:	061b      	lsls	r3, r3, #24
 8006374:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006378:	4931      	ldr	r1, [pc, #196]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 800637a:	4313      	orrs	r3, r2
 800637c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800637e:	4b30      	ldr	r3, [pc, #192]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 8006380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006382:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	492d      	ldr	r1, [pc, #180]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 800638c:	4313      	orrs	r3, r2
 800638e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006390:	4b2b      	ldr	r3, [pc, #172]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	f023 0220 	bic.w	r2, r3, #32
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	4928      	ldr	r1, [pc, #160]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80063a2:	4b27      	ldr	r3, [pc, #156]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 80063a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a6:	4a26      	ldr	r2, [pc, #152]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 80063a8:	f023 0310 	bic.w	r3, r3, #16
 80063ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80063ae:	4b24      	ldr	r3, [pc, #144]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 80063b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063b2:	4b24      	ldr	r3, [pc, #144]	; (8006444 <RCCEx_PLL2_Config+0x160>)
 80063b4:	4013      	ands	r3, r2
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	69d2      	ldr	r2, [r2, #28]
 80063ba:	00d2      	lsls	r2, r2, #3
 80063bc:	4920      	ldr	r1, [pc, #128]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80063c2:	4b1f      	ldr	r3, [pc, #124]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 80063c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c6:	4a1e      	ldr	r2, [pc, #120]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 80063c8:	f043 0310 	orr.w	r3, r3, #16
 80063cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d106      	bne.n	80063e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80063d4:	4b1a      	ldr	r3, [pc, #104]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	4a19      	ldr	r2, [pc, #100]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 80063da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063e0:	e00f      	b.n	8006402 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d106      	bne.n	80063f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80063e8:	4b15      	ldr	r3, [pc, #84]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	4a14      	ldr	r2, [pc, #80]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 80063ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063f4:	e005      	b.n	8006402 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80063f6:	4b12      	ldr	r3, [pc, #72]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fa:	4a11      	ldr	r2, [pc, #68]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 80063fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006400:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006402:	4b0f      	ldr	r3, [pc, #60]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a0e      	ldr	r2, [pc, #56]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 8006408:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800640c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800640e:	f7fd fa77 	bl	8003900 <HAL_GetTick>
 8006412:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006414:	e008      	b.n	8006428 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006416:	f7fd fa73 	bl	8003900 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d901      	bls.n	8006428 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e006      	b.n	8006436 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006428:	4b05      	ldr	r3, [pc, #20]	; (8006440 <RCCEx_PLL2_Config+0x15c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d0f0      	beq.n	8006416 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006434:	7bfb      	ldrb	r3, [r7, #15]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	58024400 	.word	0x58024400
 8006444:	ffff0007 	.word	0xffff0007

08006448 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006456:	4b53      	ldr	r3, [pc, #332]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 8006458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	2b03      	cmp	r3, #3
 8006460:	d101      	bne.n	8006466 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e099      	b.n	800659a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006466:	4b4f      	ldr	r3, [pc, #316]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a4e      	ldr	r2, [pc, #312]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 800646c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006472:	f7fd fa45 	bl	8003900 <HAL_GetTick>
 8006476:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006478:	e008      	b.n	800648c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800647a:	f7fd fa41 	bl	8003900 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d901      	bls.n	800648c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e086      	b.n	800659a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800648c:	4b45      	ldr	r3, [pc, #276]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1f0      	bne.n	800647a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006498:	4b42      	ldr	r3, [pc, #264]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 800649a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	051b      	lsls	r3, r3, #20
 80064a6:	493f      	ldr	r1, [pc, #252]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	628b      	str	r3, [r1, #40]	; 0x28
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	3b01      	subs	r3, #1
 80064b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	025b      	lsls	r3, r3, #9
 80064be:	b29b      	uxth	r3, r3
 80064c0:	431a      	orrs	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	3b01      	subs	r3, #1
 80064c8:	041b      	lsls	r3, r3, #16
 80064ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064ce:	431a      	orrs	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	3b01      	subs	r3, #1
 80064d6:	061b      	lsls	r3, r3, #24
 80064d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064dc:	4931      	ldr	r1, [pc, #196]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80064e2:	4b30      	ldr	r3, [pc, #192]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 80064e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	492d      	ldr	r1, [pc, #180]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80064f4:	4b2b      	ldr	r3, [pc, #172]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 80064f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	4928      	ldr	r1, [pc, #160]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 8006502:	4313      	orrs	r3, r2
 8006504:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006506:	4b27      	ldr	r3, [pc, #156]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 8006508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650a:	4a26      	ldr	r2, [pc, #152]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 800650c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006510:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006512:	4b24      	ldr	r3, [pc, #144]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 8006514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006516:	4b24      	ldr	r3, [pc, #144]	; (80065a8 <RCCEx_PLL3_Config+0x160>)
 8006518:	4013      	ands	r3, r2
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	69d2      	ldr	r2, [r2, #28]
 800651e:	00d2      	lsls	r2, r2, #3
 8006520:	4920      	ldr	r1, [pc, #128]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 8006522:	4313      	orrs	r3, r2
 8006524:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006526:	4b1f      	ldr	r3, [pc, #124]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 8006528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652a:	4a1e      	ldr	r2, [pc, #120]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 800652c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006530:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d106      	bne.n	8006546 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006538:	4b1a      	ldr	r3, [pc, #104]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	4a19      	ldr	r2, [pc, #100]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 800653e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006542:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006544:	e00f      	b.n	8006566 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d106      	bne.n	800655a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800654c:	4b15      	ldr	r3, [pc, #84]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	4a14      	ldr	r2, [pc, #80]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 8006552:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006556:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006558:	e005      	b.n	8006566 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800655a:	4b12      	ldr	r3, [pc, #72]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 800655c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655e:	4a11      	ldr	r2, [pc, #68]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 8006560:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006564:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006566:	4b0f      	ldr	r3, [pc, #60]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a0e      	ldr	r2, [pc, #56]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 800656c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006570:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006572:	f7fd f9c5 	bl	8003900 <HAL_GetTick>
 8006576:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006578:	e008      	b.n	800658c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800657a:	f7fd f9c1 	bl	8003900 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d901      	bls.n	800658c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e006      	b.n	800659a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800658c:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <RCCEx_PLL3_Config+0x15c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0f0      	beq.n	800657a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006598:	7bfb      	ldrb	r3, [r7, #15]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	58024400 	.word	0x58024400
 80065a8:	ffff0007 	.word	0xffff0007

080065ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e049      	b.n	8006652 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d106      	bne.n	80065d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fc ffa2 	bl	800351c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3304      	adds	r3, #4
 80065e8:	4619      	mov	r1, r3
 80065ea:	4610      	mov	r0, r2
 80065ec:	f000 f97c 	bl	80068e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b02      	cmp	r3, #2
 800666e:	d122      	bne.n	80066b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b02      	cmp	r3, #2
 800667c:	d11b      	bne.n	80066b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f06f 0202 	mvn.w	r2, #2
 8006686:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	f003 0303 	and.w	r3, r3, #3
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f905 	bl	80068ac <HAL_TIM_IC_CaptureCallback>
 80066a2:	e005      	b.n	80066b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f8f7 	bl	8006898 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f908 	bl	80068c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d122      	bne.n	800670a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f003 0304 	and.w	r3, r3, #4
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	d11b      	bne.n	800670a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f06f 0204 	mvn.w	r2, #4
 80066da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f8db 	bl	80068ac <HAL_TIM_IC_CaptureCallback>
 80066f6:	e005      	b.n	8006704 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f8cd 	bl	8006898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f8de 	bl	80068c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b08      	cmp	r3, #8
 8006716:	d122      	bne.n	800675e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	f003 0308 	and.w	r3, r3, #8
 8006722:	2b08      	cmp	r3, #8
 8006724:	d11b      	bne.n	800675e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f06f 0208 	mvn.w	r2, #8
 800672e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2204      	movs	r2, #4
 8006734:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	f003 0303 	and.w	r3, r3, #3
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f8b1 	bl	80068ac <HAL_TIM_IC_CaptureCallback>
 800674a:	e005      	b.n	8006758 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f8a3 	bl	8006898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f8b4 	bl	80068c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	f003 0310 	and.w	r3, r3, #16
 8006768:	2b10      	cmp	r3, #16
 800676a:	d122      	bne.n	80067b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f003 0310 	and.w	r3, r3, #16
 8006776:	2b10      	cmp	r3, #16
 8006778:	d11b      	bne.n	80067b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f06f 0210 	mvn.w	r2, #16
 8006782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2208      	movs	r2, #8
 8006788:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f887 	bl	80068ac <HAL_TIM_IC_CaptureCallback>
 800679e:	e005      	b.n	80067ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f879 	bl	8006898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f88a 	bl	80068c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d10e      	bne.n	80067de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d107      	bne.n	80067de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f06f 0201 	mvn.w	r2, #1
 80067d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7fc fe63 	bl	80034a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e8:	2b80      	cmp	r3, #128	; 0x80
 80067ea:	d10e      	bne.n	800680a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f6:	2b80      	cmp	r3, #128	; 0x80
 80067f8:	d107      	bne.n	800680a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f913 	bl	8006a30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006818:	d10e      	bne.n	8006838 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006824:	2b80      	cmp	r3, #128	; 0x80
 8006826:	d107      	bne.n	8006838 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f906 	bl	8006a44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006842:	2b40      	cmp	r3, #64	; 0x40
 8006844:	d10e      	bne.n	8006864 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006850:	2b40      	cmp	r3, #64	; 0x40
 8006852:	d107      	bne.n	8006864 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800685c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f838 	bl	80068d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b20      	cmp	r3, #32
 8006870:	d10e      	bne.n	8006890 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f003 0320 	and.w	r3, r3, #32
 800687c:	2b20      	cmp	r3, #32
 800687e:	d107      	bne.n	8006890 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f06f 0220 	mvn.w	r2, #32
 8006888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f8c6 	bl	8006a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006890:	bf00      	nop
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a40      	ldr	r2, [pc, #256]	; (80069fc <TIM_Base_SetConfig+0x114>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d013      	beq.n	8006928 <TIM_Base_SetConfig+0x40>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006906:	d00f      	beq.n	8006928 <TIM_Base_SetConfig+0x40>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a3d      	ldr	r2, [pc, #244]	; (8006a00 <TIM_Base_SetConfig+0x118>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d00b      	beq.n	8006928 <TIM_Base_SetConfig+0x40>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a3c      	ldr	r2, [pc, #240]	; (8006a04 <TIM_Base_SetConfig+0x11c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d007      	beq.n	8006928 <TIM_Base_SetConfig+0x40>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a3b      	ldr	r2, [pc, #236]	; (8006a08 <TIM_Base_SetConfig+0x120>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d003      	beq.n	8006928 <TIM_Base_SetConfig+0x40>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a3a      	ldr	r2, [pc, #232]	; (8006a0c <TIM_Base_SetConfig+0x124>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d108      	bne.n	800693a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a2f      	ldr	r2, [pc, #188]	; (80069fc <TIM_Base_SetConfig+0x114>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d01f      	beq.n	8006982 <TIM_Base_SetConfig+0x9a>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006948:	d01b      	beq.n	8006982 <TIM_Base_SetConfig+0x9a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a2c      	ldr	r2, [pc, #176]	; (8006a00 <TIM_Base_SetConfig+0x118>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d017      	beq.n	8006982 <TIM_Base_SetConfig+0x9a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a2b      	ldr	r2, [pc, #172]	; (8006a04 <TIM_Base_SetConfig+0x11c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d013      	beq.n	8006982 <TIM_Base_SetConfig+0x9a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a2a      	ldr	r2, [pc, #168]	; (8006a08 <TIM_Base_SetConfig+0x120>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00f      	beq.n	8006982 <TIM_Base_SetConfig+0x9a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a29      	ldr	r2, [pc, #164]	; (8006a0c <TIM_Base_SetConfig+0x124>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00b      	beq.n	8006982 <TIM_Base_SetConfig+0x9a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a28      	ldr	r2, [pc, #160]	; (8006a10 <TIM_Base_SetConfig+0x128>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d007      	beq.n	8006982 <TIM_Base_SetConfig+0x9a>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a27      	ldr	r2, [pc, #156]	; (8006a14 <TIM_Base_SetConfig+0x12c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_Base_SetConfig+0x9a>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a26      	ldr	r2, [pc, #152]	; (8006a18 <TIM_Base_SetConfig+0x130>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d108      	bne.n	8006994 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a10      	ldr	r2, [pc, #64]	; (80069fc <TIM_Base_SetConfig+0x114>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00f      	beq.n	80069e0 <TIM_Base_SetConfig+0xf8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a12      	ldr	r2, [pc, #72]	; (8006a0c <TIM_Base_SetConfig+0x124>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00b      	beq.n	80069e0 <TIM_Base_SetConfig+0xf8>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a11      	ldr	r2, [pc, #68]	; (8006a10 <TIM_Base_SetConfig+0x128>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d007      	beq.n	80069e0 <TIM_Base_SetConfig+0xf8>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a10      	ldr	r2, [pc, #64]	; (8006a14 <TIM_Base_SetConfig+0x12c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d003      	beq.n	80069e0 <TIM_Base_SetConfig+0xf8>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a0f      	ldr	r2, [pc, #60]	; (8006a18 <TIM_Base_SetConfig+0x130>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d103      	bne.n	80069e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	691a      	ldr	r2, [r3, #16]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	615a      	str	r2, [r3, #20]
}
 80069ee:	bf00      	nop
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40010000 	.word	0x40010000
 8006a00:	40000400 	.word	0x40000400
 8006a04:	40000800 	.word	0x40000800
 8006a08:	40000c00 	.word	0x40000c00
 8006a0c:	40010400 	.word	0x40010400
 8006a10:	40014000 	.word	0x40014000
 8006a14:	40014400 	.word	0x40014400
 8006a18:	40014800 	.word	0x40014800

08006a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e042      	b.n	8006af0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d106      	bne.n	8006a82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7fc fd75 	bl	800356c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2224      	movs	r2, #36	; 0x24
 8006a86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0201 	bic.w	r2, r2, #1
 8006a98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f82c 	bl	8006af8 <UART_SetConfig>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e022      	b.n	8006af0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fe8c 	bl	80077d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ac6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ad6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0201 	orr.w	r2, r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 ff13 	bl	8007914 <UART_CheckIdleState>
 8006aee:	4603      	mov	r3, r0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006afc:	b092      	sub	sp, #72	; 0x48
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	431a      	orrs	r2, r3
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	431a      	orrs	r2, r3
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	4bbe      	ldr	r3, [pc, #760]	; (8006e20 <UART_SetConfig+0x328>)
 8006b28:	4013      	ands	r3, r2
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	6812      	ldr	r2, [r2, #0]
 8006b2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b30:	430b      	orrs	r3, r1
 8006b32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	68da      	ldr	r2, [r3, #12]
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	430a      	orrs	r2, r1
 8006b48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4ab3      	ldr	r2, [pc, #716]	; (8006e24 <UART_SetConfig+0x32c>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d004      	beq.n	8006b64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b60:	4313      	orrs	r3, r2
 8006b62:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689a      	ldr	r2, [r3, #8]
 8006b6a:	4baf      	ldr	r3, [pc, #700]	; (8006e28 <UART_SetConfig+0x330>)
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	6812      	ldr	r2, [r2, #0]
 8006b72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b74:	430b      	orrs	r3, r1
 8006b76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7e:	f023 010f 	bic.w	r1, r3, #15
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4aa6      	ldr	r2, [pc, #664]	; (8006e2c <UART_SetConfig+0x334>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d177      	bne.n	8006c88 <UART_SetConfig+0x190>
 8006b98:	4ba5      	ldr	r3, [pc, #660]	; (8006e30 <UART_SetConfig+0x338>)
 8006b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ba0:	2b28      	cmp	r3, #40	; 0x28
 8006ba2:	d86d      	bhi.n	8006c80 <UART_SetConfig+0x188>
 8006ba4:	a201      	add	r2, pc, #4	; (adr r2, 8006bac <UART_SetConfig+0xb4>)
 8006ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006baa:	bf00      	nop
 8006bac:	08006c51 	.word	0x08006c51
 8006bb0:	08006c81 	.word	0x08006c81
 8006bb4:	08006c81 	.word	0x08006c81
 8006bb8:	08006c81 	.word	0x08006c81
 8006bbc:	08006c81 	.word	0x08006c81
 8006bc0:	08006c81 	.word	0x08006c81
 8006bc4:	08006c81 	.word	0x08006c81
 8006bc8:	08006c81 	.word	0x08006c81
 8006bcc:	08006c59 	.word	0x08006c59
 8006bd0:	08006c81 	.word	0x08006c81
 8006bd4:	08006c81 	.word	0x08006c81
 8006bd8:	08006c81 	.word	0x08006c81
 8006bdc:	08006c81 	.word	0x08006c81
 8006be0:	08006c81 	.word	0x08006c81
 8006be4:	08006c81 	.word	0x08006c81
 8006be8:	08006c81 	.word	0x08006c81
 8006bec:	08006c61 	.word	0x08006c61
 8006bf0:	08006c81 	.word	0x08006c81
 8006bf4:	08006c81 	.word	0x08006c81
 8006bf8:	08006c81 	.word	0x08006c81
 8006bfc:	08006c81 	.word	0x08006c81
 8006c00:	08006c81 	.word	0x08006c81
 8006c04:	08006c81 	.word	0x08006c81
 8006c08:	08006c81 	.word	0x08006c81
 8006c0c:	08006c69 	.word	0x08006c69
 8006c10:	08006c81 	.word	0x08006c81
 8006c14:	08006c81 	.word	0x08006c81
 8006c18:	08006c81 	.word	0x08006c81
 8006c1c:	08006c81 	.word	0x08006c81
 8006c20:	08006c81 	.word	0x08006c81
 8006c24:	08006c81 	.word	0x08006c81
 8006c28:	08006c81 	.word	0x08006c81
 8006c2c:	08006c71 	.word	0x08006c71
 8006c30:	08006c81 	.word	0x08006c81
 8006c34:	08006c81 	.word	0x08006c81
 8006c38:	08006c81 	.word	0x08006c81
 8006c3c:	08006c81 	.word	0x08006c81
 8006c40:	08006c81 	.word	0x08006c81
 8006c44:	08006c81 	.word	0x08006c81
 8006c48:	08006c81 	.word	0x08006c81
 8006c4c:	08006c79 	.word	0x08006c79
 8006c50:	2301      	movs	r3, #1
 8006c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c56:	e326      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006c58:	2304      	movs	r3, #4
 8006c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c5e:	e322      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006c60:	2308      	movs	r3, #8
 8006c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c66:	e31e      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006c68:	2310      	movs	r3, #16
 8006c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c6e:	e31a      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006c70:	2320      	movs	r3, #32
 8006c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c76:	e316      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006c78:	2340      	movs	r3, #64	; 0x40
 8006c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c7e:	e312      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006c80:	2380      	movs	r3, #128	; 0x80
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c86:	e30e      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a69      	ldr	r2, [pc, #420]	; (8006e34 <UART_SetConfig+0x33c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d130      	bne.n	8006cf4 <UART_SetConfig+0x1fc>
 8006c92:	4b67      	ldr	r3, [pc, #412]	; (8006e30 <UART_SetConfig+0x338>)
 8006c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	2b05      	cmp	r3, #5
 8006c9c:	d826      	bhi.n	8006cec <UART_SetConfig+0x1f4>
 8006c9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ca4 <UART_SetConfig+0x1ac>)
 8006ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca4:	08006cbd 	.word	0x08006cbd
 8006ca8:	08006cc5 	.word	0x08006cc5
 8006cac:	08006ccd 	.word	0x08006ccd
 8006cb0:	08006cd5 	.word	0x08006cd5
 8006cb4:	08006cdd 	.word	0x08006cdd
 8006cb8:	08006ce5 	.word	0x08006ce5
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cc2:	e2f0      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cca:	e2ec      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006ccc:	2308      	movs	r3, #8
 8006cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cd2:	e2e8      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006cd4:	2310      	movs	r3, #16
 8006cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cda:	e2e4      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006cdc:	2320      	movs	r3, #32
 8006cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ce2:	e2e0      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006ce4:	2340      	movs	r3, #64	; 0x40
 8006ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cea:	e2dc      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006cec:	2380      	movs	r3, #128	; 0x80
 8006cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cf2:	e2d8      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a4f      	ldr	r2, [pc, #316]	; (8006e38 <UART_SetConfig+0x340>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d130      	bne.n	8006d60 <UART_SetConfig+0x268>
 8006cfe:	4b4c      	ldr	r3, [pc, #304]	; (8006e30 <UART_SetConfig+0x338>)
 8006d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	2b05      	cmp	r3, #5
 8006d08:	d826      	bhi.n	8006d58 <UART_SetConfig+0x260>
 8006d0a:	a201      	add	r2, pc, #4	; (adr r2, 8006d10 <UART_SetConfig+0x218>)
 8006d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d10:	08006d29 	.word	0x08006d29
 8006d14:	08006d31 	.word	0x08006d31
 8006d18:	08006d39 	.word	0x08006d39
 8006d1c:	08006d41 	.word	0x08006d41
 8006d20:	08006d49 	.word	0x08006d49
 8006d24:	08006d51 	.word	0x08006d51
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d2e:	e2ba      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006d30:	2304      	movs	r3, #4
 8006d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d36:	e2b6      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006d38:	2308      	movs	r3, #8
 8006d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d3e:	e2b2      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006d40:	2310      	movs	r3, #16
 8006d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d46:	e2ae      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006d48:	2320      	movs	r3, #32
 8006d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d4e:	e2aa      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006d50:	2340      	movs	r3, #64	; 0x40
 8006d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d56:	e2a6      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006d58:	2380      	movs	r3, #128	; 0x80
 8006d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d5e:	e2a2      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a35      	ldr	r2, [pc, #212]	; (8006e3c <UART_SetConfig+0x344>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d130      	bne.n	8006dcc <UART_SetConfig+0x2d4>
 8006d6a:	4b31      	ldr	r3, [pc, #196]	; (8006e30 <UART_SetConfig+0x338>)
 8006d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	2b05      	cmp	r3, #5
 8006d74:	d826      	bhi.n	8006dc4 <UART_SetConfig+0x2cc>
 8006d76:	a201      	add	r2, pc, #4	; (adr r2, 8006d7c <UART_SetConfig+0x284>)
 8006d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7c:	08006d95 	.word	0x08006d95
 8006d80:	08006d9d 	.word	0x08006d9d
 8006d84:	08006da5 	.word	0x08006da5
 8006d88:	08006dad 	.word	0x08006dad
 8006d8c:	08006db5 	.word	0x08006db5
 8006d90:	08006dbd 	.word	0x08006dbd
 8006d94:	2300      	movs	r3, #0
 8006d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d9a:	e284      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006d9c:	2304      	movs	r3, #4
 8006d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006da2:	e280      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006da4:	2308      	movs	r3, #8
 8006da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006daa:	e27c      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006dac:	2310      	movs	r3, #16
 8006dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006db2:	e278      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006db4:	2320      	movs	r3, #32
 8006db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dba:	e274      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006dbc:	2340      	movs	r3, #64	; 0x40
 8006dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dc2:	e270      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006dc4:	2380      	movs	r3, #128	; 0x80
 8006dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dca:	e26c      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a1b      	ldr	r2, [pc, #108]	; (8006e40 <UART_SetConfig+0x348>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d142      	bne.n	8006e5c <UART_SetConfig+0x364>
 8006dd6:	4b16      	ldr	r3, [pc, #88]	; (8006e30 <UART_SetConfig+0x338>)
 8006dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dda:	f003 0307 	and.w	r3, r3, #7
 8006dde:	2b05      	cmp	r3, #5
 8006de0:	d838      	bhi.n	8006e54 <UART_SetConfig+0x35c>
 8006de2:	a201      	add	r2, pc, #4	; (adr r2, 8006de8 <UART_SetConfig+0x2f0>)
 8006de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de8:	08006e01 	.word	0x08006e01
 8006dec:	08006e09 	.word	0x08006e09
 8006df0:	08006e11 	.word	0x08006e11
 8006df4:	08006e19 	.word	0x08006e19
 8006df8:	08006e45 	.word	0x08006e45
 8006dfc:	08006e4d 	.word	0x08006e4d
 8006e00:	2300      	movs	r3, #0
 8006e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e06:	e24e      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006e08:	2304      	movs	r3, #4
 8006e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e0e:	e24a      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006e10:	2308      	movs	r3, #8
 8006e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e16:	e246      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006e18:	2310      	movs	r3, #16
 8006e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e1e:	e242      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006e20:	cfff69f3 	.word	0xcfff69f3
 8006e24:	58000c00 	.word	0x58000c00
 8006e28:	11fff4ff 	.word	0x11fff4ff
 8006e2c:	40011000 	.word	0x40011000
 8006e30:	58024400 	.word	0x58024400
 8006e34:	40004400 	.word	0x40004400
 8006e38:	40004800 	.word	0x40004800
 8006e3c:	40004c00 	.word	0x40004c00
 8006e40:	40005000 	.word	0x40005000
 8006e44:	2320      	movs	r3, #32
 8006e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4a:	e22c      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006e4c:	2340      	movs	r3, #64	; 0x40
 8006e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e52:	e228      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006e54:	2380      	movs	r3, #128	; 0x80
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e5a:	e224      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4ab1      	ldr	r2, [pc, #708]	; (8007128 <UART_SetConfig+0x630>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d176      	bne.n	8006f54 <UART_SetConfig+0x45c>
 8006e66:	4bb1      	ldr	r3, [pc, #708]	; (800712c <UART_SetConfig+0x634>)
 8006e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e6e:	2b28      	cmp	r3, #40	; 0x28
 8006e70:	d86c      	bhi.n	8006f4c <UART_SetConfig+0x454>
 8006e72:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <UART_SetConfig+0x380>)
 8006e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e78:	08006f1d 	.word	0x08006f1d
 8006e7c:	08006f4d 	.word	0x08006f4d
 8006e80:	08006f4d 	.word	0x08006f4d
 8006e84:	08006f4d 	.word	0x08006f4d
 8006e88:	08006f4d 	.word	0x08006f4d
 8006e8c:	08006f4d 	.word	0x08006f4d
 8006e90:	08006f4d 	.word	0x08006f4d
 8006e94:	08006f4d 	.word	0x08006f4d
 8006e98:	08006f25 	.word	0x08006f25
 8006e9c:	08006f4d 	.word	0x08006f4d
 8006ea0:	08006f4d 	.word	0x08006f4d
 8006ea4:	08006f4d 	.word	0x08006f4d
 8006ea8:	08006f4d 	.word	0x08006f4d
 8006eac:	08006f4d 	.word	0x08006f4d
 8006eb0:	08006f4d 	.word	0x08006f4d
 8006eb4:	08006f4d 	.word	0x08006f4d
 8006eb8:	08006f2d 	.word	0x08006f2d
 8006ebc:	08006f4d 	.word	0x08006f4d
 8006ec0:	08006f4d 	.word	0x08006f4d
 8006ec4:	08006f4d 	.word	0x08006f4d
 8006ec8:	08006f4d 	.word	0x08006f4d
 8006ecc:	08006f4d 	.word	0x08006f4d
 8006ed0:	08006f4d 	.word	0x08006f4d
 8006ed4:	08006f4d 	.word	0x08006f4d
 8006ed8:	08006f35 	.word	0x08006f35
 8006edc:	08006f4d 	.word	0x08006f4d
 8006ee0:	08006f4d 	.word	0x08006f4d
 8006ee4:	08006f4d 	.word	0x08006f4d
 8006ee8:	08006f4d 	.word	0x08006f4d
 8006eec:	08006f4d 	.word	0x08006f4d
 8006ef0:	08006f4d 	.word	0x08006f4d
 8006ef4:	08006f4d 	.word	0x08006f4d
 8006ef8:	08006f3d 	.word	0x08006f3d
 8006efc:	08006f4d 	.word	0x08006f4d
 8006f00:	08006f4d 	.word	0x08006f4d
 8006f04:	08006f4d 	.word	0x08006f4d
 8006f08:	08006f4d 	.word	0x08006f4d
 8006f0c:	08006f4d 	.word	0x08006f4d
 8006f10:	08006f4d 	.word	0x08006f4d
 8006f14:	08006f4d 	.word	0x08006f4d
 8006f18:	08006f45 	.word	0x08006f45
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f22:	e1c0      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006f24:	2304      	movs	r3, #4
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f2a:	e1bc      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006f2c:	2308      	movs	r3, #8
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f32:	e1b8      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006f34:	2310      	movs	r3, #16
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3a:	e1b4      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006f3c:	2320      	movs	r3, #32
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f42:	e1b0      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006f44:	2340      	movs	r3, #64	; 0x40
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4a:	e1ac      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006f4c:	2380      	movs	r3, #128	; 0x80
 8006f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f52:	e1a8      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a75      	ldr	r2, [pc, #468]	; (8007130 <UART_SetConfig+0x638>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d130      	bne.n	8006fc0 <UART_SetConfig+0x4c8>
 8006f5e:	4b73      	ldr	r3, [pc, #460]	; (800712c <UART_SetConfig+0x634>)
 8006f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	2b05      	cmp	r3, #5
 8006f68:	d826      	bhi.n	8006fb8 <UART_SetConfig+0x4c0>
 8006f6a:	a201      	add	r2, pc, #4	; (adr r2, 8006f70 <UART_SetConfig+0x478>)
 8006f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f70:	08006f89 	.word	0x08006f89
 8006f74:	08006f91 	.word	0x08006f91
 8006f78:	08006f99 	.word	0x08006f99
 8006f7c:	08006fa1 	.word	0x08006fa1
 8006f80:	08006fa9 	.word	0x08006fa9
 8006f84:	08006fb1 	.word	0x08006fb1
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8e:	e18a      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006f90:	2304      	movs	r3, #4
 8006f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f96:	e186      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006f98:	2308      	movs	r3, #8
 8006f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f9e:	e182      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006fa0:	2310      	movs	r3, #16
 8006fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fa6:	e17e      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006fa8:	2320      	movs	r3, #32
 8006faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fae:	e17a      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006fb0:	2340      	movs	r3, #64	; 0x40
 8006fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fb6:	e176      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006fb8:	2380      	movs	r3, #128	; 0x80
 8006fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fbe:	e172      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a5b      	ldr	r2, [pc, #364]	; (8007134 <UART_SetConfig+0x63c>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d130      	bne.n	800702c <UART_SetConfig+0x534>
 8006fca:	4b58      	ldr	r3, [pc, #352]	; (800712c <UART_SetConfig+0x634>)
 8006fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	2b05      	cmp	r3, #5
 8006fd4:	d826      	bhi.n	8007024 <UART_SetConfig+0x52c>
 8006fd6:	a201      	add	r2, pc, #4	; (adr r2, 8006fdc <UART_SetConfig+0x4e4>)
 8006fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fdc:	08006ff5 	.word	0x08006ff5
 8006fe0:	08006ffd 	.word	0x08006ffd
 8006fe4:	08007005 	.word	0x08007005
 8006fe8:	0800700d 	.word	0x0800700d
 8006fec:	08007015 	.word	0x08007015
 8006ff0:	0800701d 	.word	0x0800701d
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ffa:	e154      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8006ffc:	2304      	movs	r3, #4
 8006ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007002:	e150      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8007004:	2308      	movs	r3, #8
 8007006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800700a:	e14c      	b.n	80072a6 <UART_SetConfig+0x7ae>
 800700c:	2310      	movs	r3, #16
 800700e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007012:	e148      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8007014:	2320      	movs	r3, #32
 8007016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800701a:	e144      	b.n	80072a6 <UART_SetConfig+0x7ae>
 800701c:	2340      	movs	r3, #64	; 0x40
 800701e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007022:	e140      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8007024:	2380      	movs	r3, #128	; 0x80
 8007026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800702a:	e13c      	b.n	80072a6 <UART_SetConfig+0x7ae>
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a41      	ldr	r2, [pc, #260]	; (8007138 <UART_SetConfig+0x640>)
 8007032:	4293      	cmp	r3, r2
 8007034:	f040 8082 	bne.w	800713c <UART_SetConfig+0x644>
 8007038:	4b3c      	ldr	r3, [pc, #240]	; (800712c <UART_SetConfig+0x634>)
 800703a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007040:	2b28      	cmp	r3, #40	; 0x28
 8007042:	d86d      	bhi.n	8007120 <UART_SetConfig+0x628>
 8007044:	a201      	add	r2, pc, #4	; (adr r2, 800704c <UART_SetConfig+0x554>)
 8007046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704a:	bf00      	nop
 800704c:	080070f1 	.word	0x080070f1
 8007050:	08007121 	.word	0x08007121
 8007054:	08007121 	.word	0x08007121
 8007058:	08007121 	.word	0x08007121
 800705c:	08007121 	.word	0x08007121
 8007060:	08007121 	.word	0x08007121
 8007064:	08007121 	.word	0x08007121
 8007068:	08007121 	.word	0x08007121
 800706c:	080070f9 	.word	0x080070f9
 8007070:	08007121 	.word	0x08007121
 8007074:	08007121 	.word	0x08007121
 8007078:	08007121 	.word	0x08007121
 800707c:	08007121 	.word	0x08007121
 8007080:	08007121 	.word	0x08007121
 8007084:	08007121 	.word	0x08007121
 8007088:	08007121 	.word	0x08007121
 800708c:	08007101 	.word	0x08007101
 8007090:	08007121 	.word	0x08007121
 8007094:	08007121 	.word	0x08007121
 8007098:	08007121 	.word	0x08007121
 800709c:	08007121 	.word	0x08007121
 80070a0:	08007121 	.word	0x08007121
 80070a4:	08007121 	.word	0x08007121
 80070a8:	08007121 	.word	0x08007121
 80070ac:	08007109 	.word	0x08007109
 80070b0:	08007121 	.word	0x08007121
 80070b4:	08007121 	.word	0x08007121
 80070b8:	08007121 	.word	0x08007121
 80070bc:	08007121 	.word	0x08007121
 80070c0:	08007121 	.word	0x08007121
 80070c4:	08007121 	.word	0x08007121
 80070c8:	08007121 	.word	0x08007121
 80070cc:	08007111 	.word	0x08007111
 80070d0:	08007121 	.word	0x08007121
 80070d4:	08007121 	.word	0x08007121
 80070d8:	08007121 	.word	0x08007121
 80070dc:	08007121 	.word	0x08007121
 80070e0:	08007121 	.word	0x08007121
 80070e4:	08007121 	.word	0x08007121
 80070e8:	08007121 	.word	0x08007121
 80070ec:	08007119 	.word	0x08007119
 80070f0:	2301      	movs	r3, #1
 80070f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070f6:	e0d6      	b.n	80072a6 <UART_SetConfig+0x7ae>
 80070f8:	2304      	movs	r3, #4
 80070fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070fe:	e0d2      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8007100:	2308      	movs	r3, #8
 8007102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007106:	e0ce      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8007108:	2310      	movs	r3, #16
 800710a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800710e:	e0ca      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8007110:	2320      	movs	r3, #32
 8007112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007116:	e0c6      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8007118:	2340      	movs	r3, #64	; 0x40
 800711a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800711e:	e0c2      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8007120:	2380      	movs	r3, #128	; 0x80
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007126:	e0be      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8007128:	40011400 	.word	0x40011400
 800712c:	58024400 	.word	0x58024400
 8007130:	40007800 	.word	0x40007800
 8007134:	40007c00 	.word	0x40007c00
 8007138:	40011800 	.word	0x40011800
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4aad      	ldr	r2, [pc, #692]	; (80073f8 <UART_SetConfig+0x900>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d176      	bne.n	8007234 <UART_SetConfig+0x73c>
 8007146:	4bad      	ldr	r3, [pc, #692]	; (80073fc <UART_SetConfig+0x904>)
 8007148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800714e:	2b28      	cmp	r3, #40	; 0x28
 8007150:	d86c      	bhi.n	800722c <UART_SetConfig+0x734>
 8007152:	a201      	add	r2, pc, #4	; (adr r2, 8007158 <UART_SetConfig+0x660>)
 8007154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007158:	080071fd 	.word	0x080071fd
 800715c:	0800722d 	.word	0x0800722d
 8007160:	0800722d 	.word	0x0800722d
 8007164:	0800722d 	.word	0x0800722d
 8007168:	0800722d 	.word	0x0800722d
 800716c:	0800722d 	.word	0x0800722d
 8007170:	0800722d 	.word	0x0800722d
 8007174:	0800722d 	.word	0x0800722d
 8007178:	08007205 	.word	0x08007205
 800717c:	0800722d 	.word	0x0800722d
 8007180:	0800722d 	.word	0x0800722d
 8007184:	0800722d 	.word	0x0800722d
 8007188:	0800722d 	.word	0x0800722d
 800718c:	0800722d 	.word	0x0800722d
 8007190:	0800722d 	.word	0x0800722d
 8007194:	0800722d 	.word	0x0800722d
 8007198:	0800720d 	.word	0x0800720d
 800719c:	0800722d 	.word	0x0800722d
 80071a0:	0800722d 	.word	0x0800722d
 80071a4:	0800722d 	.word	0x0800722d
 80071a8:	0800722d 	.word	0x0800722d
 80071ac:	0800722d 	.word	0x0800722d
 80071b0:	0800722d 	.word	0x0800722d
 80071b4:	0800722d 	.word	0x0800722d
 80071b8:	08007215 	.word	0x08007215
 80071bc:	0800722d 	.word	0x0800722d
 80071c0:	0800722d 	.word	0x0800722d
 80071c4:	0800722d 	.word	0x0800722d
 80071c8:	0800722d 	.word	0x0800722d
 80071cc:	0800722d 	.word	0x0800722d
 80071d0:	0800722d 	.word	0x0800722d
 80071d4:	0800722d 	.word	0x0800722d
 80071d8:	0800721d 	.word	0x0800721d
 80071dc:	0800722d 	.word	0x0800722d
 80071e0:	0800722d 	.word	0x0800722d
 80071e4:	0800722d 	.word	0x0800722d
 80071e8:	0800722d 	.word	0x0800722d
 80071ec:	0800722d 	.word	0x0800722d
 80071f0:	0800722d 	.word	0x0800722d
 80071f4:	0800722d 	.word	0x0800722d
 80071f8:	08007225 	.word	0x08007225
 80071fc:	2301      	movs	r3, #1
 80071fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007202:	e050      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8007204:	2304      	movs	r3, #4
 8007206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800720a:	e04c      	b.n	80072a6 <UART_SetConfig+0x7ae>
 800720c:	2308      	movs	r3, #8
 800720e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007212:	e048      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8007214:	2310      	movs	r3, #16
 8007216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800721a:	e044      	b.n	80072a6 <UART_SetConfig+0x7ae>
 800721c:	2320      	movs	r3, #32
 800721e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007222:	e040      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8007224:	2340      	movs	r3, #64	; 0x40
 8007226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800722a:	e03c      	b.n	80072a6 <UART_SetConfig+0x7ae>
 800722c:	2380      	movs	r3, #128	; 0x80
 800722e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007232:	e038      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a71      	ldr	r2, [pc, #452]	; (8007400 <UART_SetConfig+0x908>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d130      	bne.n	80072a0 <UART_SetConfig+0x7a8>
 800723e:	4b6f      	ldr	r3, [pc, #444]	; (80073fc <UART_SetConfig+0x904>)
 8007240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007242:	f003 0307 	and.w	r3, r3, #7
 8007246:	2b05      	cmp	r3, #5
 8007248:	d826      	bhi.n	8007298 <UART_SetConfig+0x7a0>
 800724a:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <UART_SetConfig+0x758>)
 800724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007250:	08007269 	.word	0x08007269
 8007254:	08007271 	.word	0x08007271
 8007258:	08007279 	.word	0x08007279
 800725c:	08007281 	.word	0x08007281
 8007260:	08007289 	.word	0x08007289
 8007264:	08007291 	.word	0x08007291
 8007268:	2302      	movs	r3, #2
 800726a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800726e:	e01a      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8007270:	2304      	movs	r3, #4
 8007272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007276:	e016      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8007278:	2308      	movs	r3, #8
 800727a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800727e:	e012      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8007280:	2310      	movs	r3, #16
 8007282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007286:	e00e      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8007288:	2320      	movs	r3, #32
 800728a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800728e:	e00a      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8007290:	2340      	movs	r3, #64	; 0x40
 8007292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007296:	e006      	b.n	80072a6 <UART_SetConfig+0x7ae>
 8007298:	2380      	movs	r3, #128	; 0x80
 800729a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800729e:	e002      	b.n	80072a6 <UART_SetConfig+0x7ae>
 80072a0:	2380      	movs	r3, #128	; 0x80
 80072a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a55      	ldr	r2, [pc, #340]	; (8007400 <UART_SetConfig+0x908>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	f040 80f8 	bne.w	80074a2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80072b6:	2b20      	cmp	r3, #32
 80072b8:	dc46      	bgt.n	8007348 <UART_SetConfig+0x850>
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	db75      	blt.n	80073aa <UART_SetConfig+0x8b2>
 80072be:	3b02      	subs	r3, #2
 80072c0:	2b1e      	cmp	r3, #30
 80072c2:	d872      	bhi.n	80073aa <UART_SetConfig+0x8b2>
 80072c4:	a201      	add	r2, pc, #4	; (adr r2, 80072cc <UART_SetConfig+0x7d4>)
 80072c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ca:	bf00      	nop
 80072cc:	0800734f 	.word	0x0800734f
 80072d0:	080073ab 	.word	0x080073ab
 80072d4:	08007357 	.word	0x08007357
 80072d8:	080073ab 	.word	0x080073ab
 80072dc:	080073ab 	.word	0x080073ab
 80072e0:	080073ab 	.word	0x080073ab
 80072e4:	08007367 	.word	0x08007367
 80072e8:	080073ab 	.word	0x080073ab
 80072ec:	080073ab 	.word	0x080073ab
 80072f0:	080073ab 	.word	0x080073ab
 80072f4:	080073ab 	.word	0x080073ab
 80072f8:	080073ab 	.word	0x080073ab
 80072fc:	080073ab 	.word	0x080073ab
 8007300:	080073ab 	.word	0x080073ab
 8007304:	08007377 	.word	0x08007377
 8007308:	080073ab 	.word	0x080073ab
 800730c:	080073ab 	.word	0x080073ab
 8007310:	080073ab 	.word	0x080073ab
 8007314:	080073ab 	.word	0x080073ab
 8007318:	080073ab 	.word	0x080073ab
 800731c:	080073ab 	.word	0x080073ab
 8007320:	080073ab 	.word	0x080073ab
 8007324:	080073ab 	.word	0x080073ab
 8007328:	080073ab 	.word	0x080073ab
 800732c:	080073ab 	.word	0x080073ab
 8007330:	080073ab 	.word	0x080073ab
 8007334:	080073ab 	.word	0x080073ab
 8007338:	080073ab 	.word	0x080073ab
 800733c:	080073ab 	.word	0x080073ab
 8007340:	080073ab 	.word	0x080073ab
 8007344:	0800739d 	.word	0x0800739d
 8007348:	2b40      	cmp	r3, #64	; 0x40
 800734a:	d02a      	beq.n	80073a2 <UART_SetConfig+0x8aa>
 800734c:	e02d      	b.n	80073aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800734e:	f7fe fd0b 	bl	8005d68 <HAL_RCCEx_GetD3PCLK1Freq>
 8007352:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007354:	e02f      	b.n	80073b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800735a:	4618      	mov	r0, r3
 800735c:	f7fe fd1a 	bl	8005d94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007364:	e027      	b.n	80073b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007366:	f107 0318 	add.w	r3, r7, #24
 800736a:	4618      	mov	r0, r3
 800736c:	f7fe fe66 	bl	800603c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007374:	e01f      	b.n	80073b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007376:	4b21      	ldr	r3, [pc, #132]	; (80073fc <UART_SetConfig+0x904>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0320 	and.w	r3, r3, #32
 800737e:	2b00      	cmp	r3, #0
 8007380:	d009      	beq.n	8007396 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007382:	4b1e      	ldr	r3, [pc, #120]	; (80073fc <UART_SetConfig+0x904>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	08db      	lsrs	r3, r3, #3
 8007388:	f003 0303 	and.w	r3, r3, #3
 800738c:	4a1d      	ldr	r2, [pc, #116]	; (8007404 <UART_SetConfig+0x90c>)
 800738e:	fa22 f303 	lsr.w	r3, r2, r3
 8007392:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007394:	e00f      	b.n	80073b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007396:	4b1b      	ldr	r3, [pc, #108]	; (8007404 <UART_SetConfig+0x90c>)
 8007398:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800739a:	e00c      	b.n	80073b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800739c:	4b1a      	ldr	r3, [pc, #104]	; (8007408 <UART_SetConfig+0x910>)
 800739e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073a0:	e009      	b.n	80073b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073a8:	e005      	b.n	80073b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80073b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 81ee 	beq.w	800779a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	4a12      	ldr	r2, [pc, #72]	; (800740c <UART_SetConfig+0x914>)
 80073c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073c8:	461a      	mov	r2, r3
 80073ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80073d0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	4613      	mov	r3, r2
 80073d8:	005b      	lsls	r3, r3, #1
 80073da:	4413      	add	r3, r2
 80073dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073de:	429a      	cmp	r2, r3
 80073e0:	d305      	bcc.n	80073ee <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d910      	bls.n	8007410 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80073f4:	e1d1      	b.n	800779a <UART_SetConfig+0xca2>
 80073f6:	bf00      	nop
 80073f8:	40011c00 	.word	0x40011c00
 80073fc:	58024400 	.word	0x58024400
 8007400:	58000c00 	.word	0x58000c00
 8007404:	03d09000 	.word	0x03d09000
 8007408:	003d0900 	.word	0x003d0900
 800740c:	080195b4 	.word	0x080195b4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007412:	2200      	movs	r2, #0
 8007414:	60bb      	str	r3, [r7, #8]
 8007416:	60fa      	str	r2, [r7, #12]
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741c:	4ac0      	ldr	r2, [pc, #768]	; (8007720 <UART_SetConfig+0xc28>)
 800741e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007422:	b29b      	uxth	r3, r3
 8007424:	2200      	movs	r2, #0
 8007426:	603b      	str	r3, [r7, #0]
 8007428:	607a      	str	r2, [r7, #4]
 800742a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800742e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007432:	f7f8 ff5b 	bl	80002ec <__aeabi_uldivmod>
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	4610      	mov	r0, r2
 800743c:	4619      	mov	r1, r3
 800743e:	f04f 0200 	mov.w	r2, #0
 8007442:	f04f 0300 	mov.w	r3, #0
 8007446:	020b      	lsls	r3, r1, #8
 8007448:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800744c:	0202      	lsls	r2, r0, #8
 800744e:	6979      	ldr	r1, [r7, #20]
 8007450:	6849      	ldr	r1, [r1, #4]
 8007452:	0849      	lsrs	r1, r1, #1
 8007454:	2000      	movs	r0, #0
 8007456:	460c      	mov	r4, r1
 8007458:	4605      	mov	r5, r0
 800745a:	eb12 0804 	adds.w	r8, r2, r4
 800745e:	eb43 0905 	adc.w	r9, r3, r5
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	469a      	mov	sl, r3
 800746a:	4693      	mov	fp, r2
 800746c:	4652      	mov	r2, sl
 800746e:	465b      	mov	r3, fp
 8007470:	4640      	mov	r0, r8
 8007472:	4649      	mov	r1, r9
 8007474:	f7f8 ff3a 	bl	80002ec <__aeabi_uldivmod>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	4613      	mov	r3, r2
 800747e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007486:	d308      	bcc.n	800749a <UART_SetConfig+0x9a2>
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800748e:	d204      	bcs.n	800749a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007496:	60da      	str	r2, [r3, #12]
 8007498:	e17f      	b.n	800779a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80074a0:	e17b      	b.n	800779a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074aa:	f040 80bd 	bne.w	8007628 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80074ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	dc48      	bgt.n	8007548 <UART_SetConfig+0xa50>
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	db7b      	blt.n	80075b2 <UART_SetConfig+0xaba>
 80074ba:	2b20      	cmp	r3, #32
 80074bc:	d879      	bhi.n	80075b2 <UART_SetConfig+0xaba>
 80074be:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <UART_SetConfig+0x9cc>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	0800754f 	.word	0x0800754f
 80074c8:	08007557 	.word	0x08007557
 80074cc:	080075b3 	.word	0x080075b3
 80074d0:	080075b3 	.word	0x080075b3
 80074d4:	0800755f 	.word	0x0800755f
 80074d8:	080075b3 	.word	0x080075b3
 80074dc:	080075b3 	.word	0x080075b3
 80074e0:	080075b3 	.word	0x080075b3
 80074e4:	0800756f 	.word	0x0800756f
 80074e8:	080075b3 	.word	0x080075b3
 80074ec:	080075b3 	.word	0x080075b3
 80074f0:	080075b3 	.word	0x080075b3
 80074f4:	080075b3 	.word	0x080075b3
 80074f8:	080075b3 	.word	0x080075b3
 80074fc:	080075b3 	.word	0x080075b3
 8007500:	080075b3 	.word	0x080075b3
 8007504:	0800757f 	.word	0x0800757f
 8007508:	080075b3 	.word	0x080075b3
 800750c:	080075b3 	.word	0x080075b3
 8007510:	080075b3 	.word	0x080075b3
 8007514:	080075b3 	.word	0x080075b3
 8007518:	080075b3 	.word	0x080075b3
 800751c:	080075b3 	.word	0x080075b3
 8007520:	080075b3 	.word	0x080075b3
 8007524:	080075b3 	.word	0x080075b3
 8007528:	080075b3 	.word	0x080075b3
 800752c:	080075b3 	.word	0x080075b3
 8007530:	080075b3 	.word	0x080075b3
 8007534:	080075b3 	.word	0x080075b3
 8007538:	080075b3 	.word	0x080075b3
 800753c:	080075b3 	.word	0x080075b3
 8007540:	080075b3 	.word	0x080075b3
 8007544:	080075a5 	.word	0x080075a5
 8007548:	2b40      	cmp	r3, #64	; 0x40
 800754a:	d02e      	beq.n	80075aa <UART_SetConfig+0xab2>
 800754c:	e031      	b.n	80075b2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800754e:	f7fd fcd3 	bl	8004ef8 <HAL_RCC_GetPCLK1Freq>
 8007552:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007554:	e033      	b.n	80075be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007556:	f7fd fce5 	bl	8004f24 <HAL_RCC_GetPCLK2Freq>
 800755a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800755c:	e02f      	b.n	80075be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800755e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007562:	4618      	mov	r0, r3
 8007564:	f7fe fc16 	bl	8005d94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800756c:	e027      	b.n	80075be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800756e:	f107 0318 	add.w	r3, r7, #24
 8007572:	4618      	mov	r0, r3
 8007574:	f7fe fd62 	bl	800603c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800757c:	e01f      	b.n	80075be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800757e:	4b69      	ldr	r3, [pc, #420]	; (8007724 <UART_SetConfig+0xc2c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0320 	and.w	r3, r3, #32
 8007586:	2b00      	cmp	r3, #0
 8007588:	d009      	beq.n	800759e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800758a:	4b66      	ldr	r3, [pc, #408]	; (8007724 <UART_SetConfig+0xc2c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	08db      	lsrs	r3, r3, #3
 8007590:	f003 0303 	and.w	r3, r3, #3
 8007594:	4a64      	ldr	r2, [pc, #400]	; (8007728 <UART_SetConfig+0xc30>)
 8007596:	fa22 f303 	lsr.w	r3, r2, r3
 800759a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800759c:	e00f      	b.n	80075be <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800759e:	4b62      	ldr	r3, [pc, #392]	; (8007728 <UART_SetConfig+0xc30>)
 80075a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075a2:	e00c      	b.n	80075be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075a4:	4b61      	ldr	r3, [pc, #388]	; (800772c <UART_SetConfig+0xc34>)
 80075a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075a8:	e009      	b.n	80075be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075b0:	e005      	b.n	80075be <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80075b2:	2300      	movs	r3, #0
 80075b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80075bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 80ea 	beq.w	800779a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ca:	4a55      	ldr	r2, [pc, #340]	; (8007720 <UART_SetConfig+0xc28>)
 80075cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075d0:	461a      	mov	r2, r3
 80075d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80075d8:	005a      	lsls	r2, r3, #1
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	085b      	lsrs	r3, r3, #1
 80075e0:	441a      	add	r2, r3
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ee:	2b0f      	cmp	r3, #15
 80075f0:	d916      	bls.n	8007620 <UART_SetConfig+0xb28>
 80075f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075f8:	d212      	bcs.n	8007620 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	f023 030f 	bic.w	r3, r3, #15
 8007602:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007606:	085b      	lsrs	r3, r3, #1
 8007608:	b29b      	uxth	r3, r3
 800760a:	f003 0307 	and.w	r3, r3, #7
 800760e:	b29a      	uxth	r2, r3
 8007610:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007612:	4313      	orrs	r3, r2
 8007614:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800761c:	60da      	str	r2, [r3, #12]
 800761e:	e0bc      	b.n	800779a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007626:	e0b8      	b.n	800779a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007628:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800762c:	2b20      	cmp	r3, #32
 800762e:	dc4b      	bgt.n	80076c8 <UART_SetConfig+0xbd0>
 8007630:	2b00      	cmp	r3, #0
 8007632:	f2c0 8087 	blt.w	8007744 <UART_SetConfig+0xc4c>
 8007636:	2b20      	cmp	r3, #32
 8007638:	f200 8084 	bhi.w	8007744 <UART_SetConfig+0xc4c>
 800763c:	a201      	add	r2, pc, #4	; (adr r2, 8007644 <UART_SetConfig+0xb4c>)
 800763e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007642:	bf00      	nop
 8007644:	080076cf 	.word	0x080076cf
 8007648:	080076d7 	.word	0x080076d7
 800764c:	08007745 	.word	0x08007745
 8007650:	08007745 	.word	0x08007745
 8007654:	080076df 	.word	0x080076df
 8007658:	08007745 	.word	0x08007745
 800765c:	08007745 	.word	0x08007745
 8007660:	08007745 	.word	0x08007745
 8007664:	080076ef 	.word	0x080076ef
 8007668:	08007745 	.word	0x08007745
 800766c:	08007745 	.word	0x08007745
 8007670:	08007745 	.word	0x08007745
 8007674:	08007745 	.word	0x08007745
 8007678:	08007745 	.word	0x08007745
 800767c:	08007745 	.word	0x08007745
 8007680:	08007745 	.word	0x08007745
 8007684:	080076ff 	.word	0x080076ff
 8007688:	08007745 	.word	0x08007745
 800768c:	08007745 	.word	0x08007745
 8007690:	08007745 	.word	0x08007745
 8007694:	08007745 	.word	0x08007745
 8007698:	08007745 	.word	0x08007745
 800769c:	08007745 	.word	0x08007745
 80076a0:	08007745 	.word	0x08007745
 80076a4:	08007745 	.word	0x08007745
 80076a8:	08007745 	.word	0x08007745
 80076ac:	08007745 	.word	0x08007745
 80076b0:	08007745 	.word	0x08007745
 80076b4:	08007745 	.word	0x08007745
 80076b8:	08007745 	.word	0x08007745
 80076bc:	08007745 	.word	0x08007745
 80076c0:	08007745 	.word	0x08007745
 80076c4:	08007737 	.word	0x08007737
 80076c8:	2b40      	cmp	r3, #64	; 0x40
 80076ca:	d037      	beq.n	800773c <UART_SetConfig+0xc44>
 80076cc:	e03a      	b.n	8007744 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076ce:	f7fd fc13 	bl	8004ef8 <HAL_RCC_GetPCLK1Freq>
 80076d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80076d4:	e03c      	b.n	8007750 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076d6:	f7fd fc25 	bl	8004f24 <HAL_RCC_GetPCLK2Freq>
 80076da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80076dc:	e038      	b.n	8007750 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fe fb56 	bl	8005d94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076ec:	e030      	b.n	8007750 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076ee:	f107 0318 	add.w	r3, r7, #24
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fe fca2 	bl	800603c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076fc:	e028      	b.n	8007750 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076fe:	4b09      	ldr	r3, [pc, #36]	; (8007724 <UART_SetConfig+0xc2c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0320 	and.w	r3, r3, #32
 8007706:	2b00      	cmp	r3, #0
 8007708:	d012      	beq.n	8007730 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800770a:	4b06      	ldr	r3, [pc, #24]	; (8007724 <UART_SetConfig+0xc2c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	08db      	lsrs	r3, r3, #3
 8007710:	f003 0303 	and.w	r3, r3, #3
 8007714:	4a04      	ldr	r2, [pc, #16]	; (8007728 <UART_SetConfig+0xc30>)
 8007716:	fa22 f303 	lsr.w	r3, r2, r3
 800771a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800771c:	e018      	b.n	8007750 <UART_SetConfig+0xc58>
 800771e:	bf00      	nop
 8007720:	080195b4 	.word	0x080195b4
 8007724:	58024400 	.word	0x58024400
 8007728:	03d09000 	.word	0x03d09000
 800772c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007730:	4b24      	ldr	r3, [pc, #144]	; (80077c4 <UART_SetConfig+0xccc>)
 8007732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007734:	e00c      	b.n	8007750 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007736:	4b24      	ldr	r3, [pc, #144]	; (80077c8 <UART_SetConfig+0xcd0>)
 8007738:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800773a:	e009      	b.n	8007750 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800773c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007740:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007742:	e005      	b.n	8007750 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800774e:	bf00      	nop
    }

    if (pclk != 0U)
 8007750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007752:	2b00      	cmp	r3, #0
 8007754:	d021      	beq.n	800779a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775a:	4a1c      	ldr	r2, [pc, #112]	; (80077cc <UART_SetConfig+0xcd4>)
 800775c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007760:	461a      	mov	r2, r3
 8007762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007764:	fbb3 f2f2 	udiv	r2, r3, r2
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	085b      	lsrs	r3, r3, #1
 800776e:	441a      	add	r2, r3
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	fbb2 f3f3 	udiv	r3, r2, r3
 8007778:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800777a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777c:	2b0f      	cmp	r3, #15
 800777e:	d909      	bls.n	8007794 <UART_SetConfig+0xc9c>
 8007780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007786:	d205      	bcs.n	8007794 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778a:	b29a      	uxth	r2, r3
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	60da      	str	r2, [r3, #12]
 8007792:	e002      	b.n	800779a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	2201      	movs	r2, #1
 800779e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	2200      	movs	r2, #0
 80077ae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	2200      	movs	r2, #0
 80077b4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80077b6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3748      	adds	r7, #72	; 0x48
 80077be:	46bd      	mov	sp, r7
 80077c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077c4:	03d09000 	.word	0x03d09000
 80077c8:	003d0900 	.word	0x003d0900
 80077cc:	080195b4 	.word	0x080195b4

080077d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00a      	beq.n	80077fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00a      	beq.n	800781c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007820:	f003 0304 	and.w	r3, r3, #4
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00a      	beq.n	800783e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007842:	f003 0308 	and.w	r3, r3, #8
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007864:	f003 0310 	and.w	r3, r3, #16
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00a      	beq.n	8007882 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	430a      	orrs	r2, r1
 8007880:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007886:	f003 0320 	and.w	r3, r3, #32
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	430a      	orrs	r2, r1
 80078a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d01a      	beq.n	80078e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078ce:	d10a      	bne.n	80078e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	430a      	orrs	r2, r1
 80078e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00a      	beq.n	8007908 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	430a      	orrs	r2, r1
 8007906:	605a      	str	r2, [r3, #4]
  }
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af02      	add	r7, sp, #8
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007924:	f7fb ffec 	bl	8003900 <HAL_GetTick>
 8007928:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0308 	and.w	r3, r3, #8
 8007934:	2b08      	cmp	r3, #8
 8007936:	d10e      	bne.n	8007956 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007938:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f82f 	bl	80079aa <UART_WaitOnFlagUntilTimeout>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e025      	b.n	80079a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0304 	and.w	r3, r3, #4
 8007960:	2b04      	cmp	r3, #4
 8007962:	d10e      	bne.n	8007982 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007964:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f819 	bl	80079aa <UART_WaitOnFlagUntilTimeout>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e00f      	b.n	80079a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2220      	movs	r2, #32
 8007986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2220      	movs	r2, #32
 800798e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b09c      	sub	sp, #112	; 0x70
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	60f8      	str	r0, [r7, #12]
 80079b2:	60b9      	str	r1, [r7, #8]
 80079b4:	603b      	str	r3, [r7, #0]
 80079b6:	4613      	mov	r3, r2
 80079b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079ba:	e0a9      	b.n	8007b10 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c2:	f000 80a5 	beq.w	8007b10 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079c6:	f7fb ff9b 	bl	8003900 <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d302      	bcc.n	80079dc <UART_WaitOnFlagUntilTimeout+0x32>
 80079d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d140      	bne.n	8007a5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079e4:	e853 3f00 	ldrex	r3, [r3]
 80079e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80079ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079f0:	667b      	str	r3, [r7, #100]	; 0x64
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	461a      	mov	r2, r3
 80079f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a02:	e841 2300 	strex	r3, r2, [r1]
 8007a06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1e6      	bne.n	80079dc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3308      	adds	r3, #8
 8007a14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a18:	e853 3f00 	ldrex	r3, [r3]
 8007a1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a20:	f023 0301 	bic.w	r3, r3, #1
 8007a24:	663b      	str	r3, [r7, #96]	; 0x60
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3308      	adds	r3, #8
 8007a2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a36:	e841 2300 	strex	r3, r2, [r1]
 8007a3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1e5      	bne.n	8007a0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e069      	b.n	8007b32 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0304 	and.w	r3, r3, #4
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d051      	beq.n	8007b10 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a7a:	d149      	bne.n	8007b10 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	e853 3f00 	ldrex	r3, [r3]
 8007a92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007aac:	e841 2300 	strex	r3, r2, [r1]
 8007ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1e6      	bne.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3308      	adds	r3, #8
 8007abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	e853 3f00 	ldrex	r3, [r3]
 8007ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f023 0301 	bic.w	r3, r3, #1
 8007ace:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ad8:	623a      	str	r2, [r7, #32]
 8007ada:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007adc:	69f9      	ldr	r1, [r7, #28]
 8007ade:	6a3a      	ldr	r2, [r7, #32]
 8007ae0:	e841 2300 	strex	r3, r2, [r1]
 8007ae4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1e5      	bne.n	8007ab8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2220      	movs	r2, #32
 8007af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2220      	movs	r2, #32
 8007af8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2220      	movs	r2, #32
 8007b00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e010      	b.n	8007b32 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	69da      	ldr	r2, [r3, #28]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	4013      	ands	r3, r2
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	bf0c      	ite	eq
 8007b20:	2301      	moveq	r3, #1
 8007b22:	2300      	movne	r3, #0
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	461a      	mov	r2, r3
 8007b28:	79fb      	ldrb	r3, [r7, #7]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	f43f af46 	beq.w	80079bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3770      	adds	r7, #112	; 0x70
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b085      	sub	sp, #20
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d101      	bne.n	8007b50 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	e027      	b.n	8007ba0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2224      	movs	r2, #36	; 0x24
 8007b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f022 0201 	bic.w	r2, r2, #1
 8007b76:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2220      	movs	r2, #32
 8007b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d101      	bne.n	8007bc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	e02d      	b.n	8007c20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2224      	movs	r2, #36	; 0x24
 8007bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 0201 	bic.w	r2, r2, #1
 8007bea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f84f 	bl	8007ca4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d101      	bne.n	8007c40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	e02d      	b.n	8007c9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2224      	movs	r2, #36	; 0x24
 8007c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f022 0201 	bic.w	r2, r2, #1
 8007c66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	430a      	orrs	r2, r1
 8007c7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f811 	bl	8007ca4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d108      	bne.n	8007cc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007cc4:	e031      	b.n	8007d2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007cc6:	2310      	movs	r3, #16
 8007cc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007cca:	2310      	movs	r3, #16
 8007ccc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	0e5b      	lsrs	r3, r3, #25
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	f003 0307 	and.w	r3, r3, #7
 8007cdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	0f5b      	lsrs	r3, r3, #29
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	f003 0307 	and.w	r3, r3, #7
 8007cec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cee:	7bbb      	ldrb	r3, [r7, #14]
 8007cf0:	7b3a      	ldrb	r2, [r7, #12]
 8007cf2:	4911      	ldr	r1, [pc, #68]	; (8007d38 <UARTEx_SetNbDataToProcess+0x94>)
 8007cf4:	5c8a      	ldrb	r2, [r1, r2]
 8007cf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007cfa:	7b3a      	ldrb	r2, [r7, #12]
 8007cfc:	490f      	ldr	r1, [pc, #60]	; (8007d3c <UARTEx_SetNbDataToProcess+0x98>)
 8007cfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d00:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
 8007d0e:	7b7a      	ldrb	r2, [r7, #13]
 8007d10:	4909      	ldr	r1, [pc, #36]	; (8007d38 <UARTEx_SetNbDataToProcess+0x94>)
 8007d12:	5c8a      	ldrb	r2, [r1, r2]
 8007d14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d18:	7b7a      	ldrb	r2, [r7, #13]
 8007d1a:	4908      	ldr	r1, [pc, #32]	; (8007d3c <UARTEx_SetNbDataToProcess+0x98>)
 8007d1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d2a:	bf00      	nop
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	080195cc 	.word	0x080195cc
 8007d3c:	080195d4 	.word	0x080195d4

08007d40 <__libc_init_array>:
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	4d0d      	ldr	r5, [pc, #52]	; (8007d78 <__libc_init_array+0x38>)
 8007d44:	4c0d      	ldr	r4, [pc, #52]	; (8007d7c <__libc_init_array+0x3c>)
 8007d46:	1b64      	subs	r4, r4, r5
 8007d48:	10a4      	asrs	r4, r4, #2
 8007d4a:	2600      	movs	r6, #0
 8007d4c:	42a6      	cmp	r6, r4
 8007d4e:	d109      	bne.n	8007d64 <__libc_init_array+0x24>
 8007d50:	4d0b      	ldr	r5, [pc, #44]	; (8007d80 <__libc_init_array+0x40>)
 8007d52:	4c0c      	ldr	r4, [pc, #48]	; (8007d84 <__libc_init_array+0x44>)
 8007d54:	f000 f886 	bl	8007e64 <_init>
 8007d58:	1b64      	subs	r4, r4, r5
 8007d5a:	10a4      	asrs	r4, r4, #2
 8007d5c:	2600      	movs	r6, #0
 8007d5e:	42a6      	cmp	r6, r4
 8007d60:	d105      	bne.n	8007d6e <__libc_init_array+0x2e>
 8007d62:	bd70      	pop	{r4, r5, r6, pc}
 8007d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d68:	4798      	blx	r3
 8007d6a:	3601      	adds	r6, #1
 8007d6c:	e7ee      	b.n	8007d4c <__libc_init_array+0xc>
 8007d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d72:	4798      	blx	r3
 8007d74:	3601      	adds	r6, #1
 8007d76:	e7f2      	b.n	8007d5e <__libc_init_array+0x1e>
 8007d78:	080195e4 	.word	0x080195e4
 8007d7c:	080195e4 	.word	0x080195e4
 8007d80:	080195e4 	.word	0x080195e4
 8007d84:	080195e8 	.word	0x080195e8

08007d88 <memset>:
 8007d88:	4402      	add	r2, r0
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d100      	bne.n	8007d92 <memset+0xa>
 8007d90:	4770      	bx	lr
 8007d92:	f803 1b01 	strb.w	r1, [r3], #1
 8007d96:	e7f9      	b.n	8007d8c <memset+0x4>

08007d98 <ceilf>:
 8007d98:	ee10 3a10 	vmov	r3, s0
 8007d9c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007da0:	3a7f      	subs	r2, #127	; 0x7f
 8007da2:	2a16      	cmp	r2, #22
 8007da4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007da8:	dc2a      	bgt.n	8007e00 <ceilf+0x68>
 8007daa:	2a00      	cmp	r2, #0
 8007dac:	da11      	bge.n	8007dd2 <ceilf+0x3a>
 8007dae:	eddf 7a19 	vldr	s15, [pc, #100]	; 8007e14 <ceilf+0x7c>
 8007db2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007db6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dbe:	dd05      	ble.n	8007dcc <ceilf+0x34>
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	db23      	blt.n	8007e0c <ceilf+0x74>
 8007dc4:	2900      	cmp	r1, #0
 8007dc6:	bf18      	it	ne
 8007dc8:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8007dcc:	ee00 3a10 	vmov	s0, r3
 8007dd0:	4770      	bx	lr
 8007dd2:	4911      	ldr	r1, [pc, #68]	; (8007e18 <ceilf+0x80>)
 8007dd4:	4111      	asrs	r1, r2
 8007dd6:	420b      	tst	r3, r1
 8007dd8:	d0fa      	beq.n	8007dd0 <ceilf+0x38>
 8007dda:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007e14 <ceilf+0x7c>
 8007dde:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007de2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dea:	ddef      	ble.n	8007dcc <ceilf+0x34>
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	bfc2      	ittt	gt
 8007df0:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8007df4:	fa40 f202 	asrgt.w	r2, r0, r2
 8007df8:	189b      	addgt	r3, r3, r2
 8007dfa:	ea23 0301 	bic.w	r3, r3, r1
 8007dfe:	e7e5      	b.n	8007dcc <ceilf+0x34>
 8007e00:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007e04:	d3e4      	bcc.n	8007dd0 <ceilf+0x38>
 8007e06:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007e0a:	4770      	bx	lr
 8007e0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e10:	e7dc      	b.n	8007dcc <ceilf+0x34>
 8007e12:	bf00      	nop
 8007e14:	7149f2ca 	.word	0x7149f2ca
 8007e18:	007fffff 	.word	0x007fffff

08007e1c <roundf>:
 8007e1c:	ee10 0a10 	vmov	r0, s0
 8007e20:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8007e24:	3a7f      	subs	r2, #127	; 0x7f
 8007e26:	2a16      	cmp	r2, #22
 8007e28:	dc15      	bgt.n	8007e56 <roundf+0x3a>
 8007e2a:	2a00      	cmp	r2, #0
 8007e2c:	da08      	bge.n	8007e40 <roundf+0x24>
 8007e2e:	3201      	adds	r2, #1
 8007e30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007e34:	d101      	bne.n	8007e3a <roundf+0x1e>
 8007e36:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8007e3a:	ee00 3a10 	vmov	s0, r3
 8007e3e:	4770      	bx	lr
 8007e40:	4907      	ldr	r1, [pc, #28]	; (8007e60 <roundf+0x44>)
 8007e42:	4111      	asrs	r1, r2
 8007e44:	4208      	tst	r0, r1
 8007e46:	d0fa      	beq.n	8007e3e <roundf+0x22>
 8007e48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007e4c:	4113      	asrs	r3, r2
 8007e4e:	4403      	add	r3, r0
 8007e50:	ea23 0301 	bic.w	r3, r3, r1
 8007e54:	e7f1      	b.n	8007e3a <roundf+0x1e>
 8007e56:	2a80      	cmp	r2, #128	; 0x80
 8007e58:	d1f1      	bne.n	8007e3e <roundf+0x22>
 8007e5a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007e5e:	4770      	bx	lr
 8007e60:	007fffff 	.word	0x007fffff

08007e64 <_init>:
 8007e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e66:	bf00      	nop
 8007e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e6a:	bc08      	pop	{r3}
 8007e6c:	469e      	mov	lr, r3
 8007e6e:	4770      	bx	lr

08007e70 <_fini>:
 8007e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e72:	bf00      	nop
 8007e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e76:	bc08      	pop	{r3}
 8007e78:	469e      	mov	lr, r3
 8007e7a:	4770      	bx	lr
