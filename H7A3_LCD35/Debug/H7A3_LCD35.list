
H7A3_LCD35.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007860  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011750  08007b0c  08007b0c  00017b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801925c  0801925c  0002925c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019264  08019264  00029264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08019268  08019268  00029268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  24000000  0801926c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000140  24000080  080192ec  00030080  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240001c0  080192ec  000301c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 10 .debug_info   000181fe  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c61  00000000  00000000  000482ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001300  00000000  00000000  0004af10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00030d34  00000000  00000000  0004c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00018703  00000000  00000000  0007cf44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00140f2d  00000000  00000000  00095647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001d6574  2**0
                  CONTENTS, READONLY
 17 .debug_ranges 000011a0  00000000  00000000  001d65c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004ef4  00000000  00000000  001d7768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000080 	.word	0x24000080
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08007af4 	.word	0x08007af4

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000084 	.word	0x24000084
 80002e8:	08007af4 	.word	0x08007af4

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <ili9486_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9486_DisplayOn(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep
 80005f4:	2011      	movs	r0, #17
 80005f6:	f000 fd8d 	bl	8001114 <LCD_IO_WriteCmd8>
  ILI9486_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 fc94 	bl	8000f28 <LCD_IO_Bl_OnOff>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <ili9486_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9486_DisplayOff(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(0);
 8000608:	2000      	movs	r0, #0
 800060a:	f000 fc8d 	bl	8000f28 <LCD_IO_Bl_OnOff>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_SLPIN);    // Sleep
 800060e:	2010      	movs	r0, #16
 8000610:	f000 fd80 	bl	8001114 <LCD_IO_WriteCmd8>
  ILI9486_LCDMUTEX_POP();
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}

08000618 <ili9486_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9486_GetLcdPixelWidth(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_X;
 800061c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <ili9486_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9486_GetLcdPixelHeight(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_Y;
 800062e:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8000632:	4618      	mov	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <ili9486_ReadID>:
  * @brief  Get the ILI9486 ID.
  * @param  None
  * @retval The ILI9486 ID
  */
uint16_t ili9486_ReadID(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_ReadCmd8MultipleData8(0xD3, (uint8_t *)&id, 3, 1);
 8000646:	1d39      	adds	r1, r7, #4
 8000648:	2301      	movs	r3, #1
 800064a:	2203      	movs	r2, #3
 800064c:	20d3      	movs	r0, #211	; 0xd3
 800064e:	f001 fcb1 	bl	8001fb4 <LCD_IO_ReadCmd8MultipleData8>
  ILI9486_LCDMUTEX_POP();
  if(id == 0x869400)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a05      	ldr	r2, [pc, #20]	; (800066c <ili9486_ReadID+0x30>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d102      	bne.n	8000660 <ili9486_ReadID+0x24>
    return 0x9486;
 800065a:	f249 4386 	movw	r3, #38022	; 0x9486
 800065e:	e000      	b.n	8000662 <ili9486_ReadID+0x26>
  else
    return 0;
 8000660:	2300      	movs	r3, #0
}
 8000662:	4618      	mov	r0, r3
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	00869400 	.word	0x00869400

08000670 <ili9486_Init>:
  * @brief  ILI9486 initialization
  * @param  None
  * @retval None
  */
void ili9486_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  if((Is_ili9486_Initialized & ILI9486_LCD_INITIALIZED) == 0)
 8000674:	4b33      	ldr	r3, [pc, #204]	; (8000744 <ili9486_Init+0xd4>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	2b00      	cmp	r3, #0
 800067e:	d115      	bne.n	80006ac <ili9486_Init+0x3c>
  {
    Is_ili9486_Initialized |= ILI9486_LCD_INITIALIZED;
 8000680:	4b30      	ldr	r3, [pc, #192]	; (8000744 <ili9486_Init+0xd4>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <ili9486_Init+0xd4>)
 800068c:	701a      	strb	r2, [r3, #0]
    if((Is_ili9486_Initialized & ILI9486_IO_INITIALIZED) == 0)
 800068e:	4b2d      	ldr	r3, [pc, #180]	; (8000744 <ili9486_Init+0xd4>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	2b00      	cmp	r3, #0
 8000698:	d101      	bne.n	800069e <ili9486_Init+0x2e>
      LCD_IO_Init();
 800069a:	f000 fc51 	bl	8000f40 <LCD_IO_Init>
    Is_ili9486_Initialized |= ILI9486_IO_INITIALIZED;
 800069e:	4b29      	ldr	r3, [pc, #164]	; (8000744 <ili9486_Init+0xd4>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	f043 0302 	orr.w	r3, r3, #2
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b26      	ldr	r3, [pc, #152]	; (8000744 <ili9486_Init+0xd4>)
 80006aa:	701a      	strb	r2, [r3, #0]
  }
  LCD_Delay(10);
 80006ac:	200a      	movs	r0, #10
 80006ae:	f000 fc30 	bl	8000f12 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_SWRESET);
 80006b2:	2001      	movs	r0, #1
 80006b4:	f000 fd2e 	bl	8001114 <LCD_IO_WriteCmd8>
  LCD_Delay(100);
 80006b8:	2064      	movs	r0, #100	; 0x64
 80006ba:	f000 fc2a 	bl	8000f12 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_RGB_INTERFACE, (uint8_t *)"\x00", 1); // RGB mode off (0xB0)
 80006be:	2201      	movs	r2, #1
 80006c0:	4921      	ldr	r1, [pc, #132]	; (8000748 <ili9486_Init+0xd8>)
 80006c2:	20b0      	movs	r0, #176	; 0xb0
 80006c4:	f001 f96a 	bl	800199c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 80006c8:	2011      	movs	r0, #17
 80006ca:	f000 fd23 	bl	8001114 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80006ce:	200a      	movs	r0, #10
 80006d0:	f000 fc1f 	bl	8000f12 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // interface format (0x3A)
 80006d4:	2201      	movs	r2, #1
 80006d6:	491d      	ldr	r1, [pc, #116]	; (800074c <ili9486_Init+0xdc>)
 80006d8:	203a      	movs	r0, #58	; 0x3a
 80006da:	f001 f95f 	bl	800199c <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_DOWN);
 80006de:	2036      	movs	r0, #54	; 0x36
 80006e0:	f000 fd18 	bl	8001114 <LCD_IO_WriteCmd8>
 80006e4:	2028      	movs	r0, #40	; 0x28
 80006e6:	f000 fdbf 	bl	8001268 <LCD_IO_WriteData8>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PWCTR3, (uint8_t *)"\x44", 1); // 0xC2
 80006ea:	2201      	movs	r2, #1
 80006ec:	4918      	ldr	r1, [pc, #96]	; (8000750 <ili9486_Init+0xe0>)
 80006ee:	20c2      	movs	r0, #194	; 0xc2
 80006f0:	f001 f954 	bl	800199c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_VMCTR1, (uint8_t *)"\x00\x00\x00\x00", 4); // 0xC5
 80006f4:	2204      	movs	r2, #4
 80006f6:	4917      	ldr	r1, [pc, #92]	; (8000754 <ili9486_Init+0xe4>)
 80006f8:	20c5      	movs	r0, #197	; 0xc5
 80006fa:	f001 f94f 	bl	800199c <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control (0xE0)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRP1, (uint8_t *)"\x0F\x1F\x1C\x0C\x0F\x08\x48\x98\x37\x0A\x13\x04\x11\x0D\x00", 15);
 80006fe:	220f      	movs	r2, #15
 8000700:	4915      	ldr	r1, [pc, #84]	; (8000758 <ili9486_Init+0xe8>)
 8000702:	20e0      	movs	r0, #224	; 0xe0
 8000704:	f001 f94a 	bl	800199c <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control (0xE1)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRN1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 8000708:	220f      	movs	r2, #15
 800070a:	4914      	ldr	r1, [pc, #80]	; (800075c <ili9486_Init+0xec>)
 800070c:	20e1      	movs	r0, #225	; 0xe1
 800070e:	f001 f945 	bl	800199c <LCD_IO_WriteCmd8MultipleData8>

  // Digital gamma control1 (0xE2)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_DGCTR1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 8000712:	220f      	movs	r2, #15
 8000714:	4911      	ldr	r1, [pc, #68]	; (800075c <ili9486_Init+0xec>)
 8000716:	20e2      	movs	r0, #226	; 0xe2
 8000718:	f001 f940 	bl	800199c <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_NORON);     // Normal display on (0x13)
 800071c:	2013      	movs	r0, #19
 800071e:	f000 fcf9 	bl	8001114 <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_INVOFF);    // Display inversion off (0x20)
 8000722:	2020      	movs	r0, #32
 8000724:	f000 fcf6 	bl	8001114 <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 8000728:	2011      	movs	r0, #17
 800072a:	f000 fcf3 	bl	8001114 <LCD_IO_WriteCmd8>
  LCD_Delay(200);
 800072e:	20c8      	movs	r0, #200	; 0xc8
 8000730:	f000 fbef 	bl	8000f12 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_DISPON);    // Display on (0x29)
 8000734:	2029      	movs	r0, #41	; 0x29
 8000736:	f000 fced 	bl	8001114 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 800073a:	200a      	movs	r0, #10
 800073c:	f000 fbe9 	bl	8000f12 <LCD_Delay>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2400009c 	.word	0x2400009c
 8000748:	08007b0c 	.word	0x08007b0c
 800074c:	08007b10 	.word	0x08007b10
 8000750:	08007b14 	.word	0x08007b14
 8000754:	08007b18 	.word	0x08007b18
 8000758:	08007b20 	.word	0x08007b20
 800075c:	08007b30 	.word	0x08007b30

08000760 <ili9486_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9486_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	460a      	mov	r2, r1
 800076a:	80fb      	strh	r3, [r7, #6]
 800076c:	4613      	mov	r3, r2
 800076e:	80bb      	strh	r3, [r7, #4]
  ILI9486_LCDMUTEX_PUSH();
  ILI9486_SETCURSOR(Xpos, Ypos);
 8000770:	202a      	movs	r0, #42	; 0x2a
 8000772:	f000 fccf 	bl	8001114 <LCD_IO_WriteCmd8>
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	b29b      	uxth	r3, r3
 800077c:	b2db      	uxtb	r3, r3
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fd72 	bl	8001268 <LCD_IO_WriteData8>
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fd6d 	bl	8001268 <LCD_IO_WriteData8>
 800078e:	88fb      	ldrh	r3, [r7, #6]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	b29b      	uxth	r3, r3
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fd66 	bl	8001268 <LCD_IO_WriteData8>
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 fd61 	bl	8001268 <LCD_IO_WriteData8>
 80007a6:	202b      	movs	r0, #43	; 0x2b
 80007a8:	f000 fcb4 	bl	8001114 <LCD_IO_WriteCmd8>
 80007ac:	88bb      	ldrh	r3, [r7, #4]
 80007ae:	0a1b      	lsrs	r3, r3, #8
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fd57 	bl	8001268 <LCD_IO_WriteData8>
 80007ba:	88bb      	ldrh	r3, [r7, #4]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 fd52 	bl	8001268 <LCD_IO_WriteData8>
 80007c4:	88bb      	ldrh	r3, [r7, #4]
 80007c6:	0a1b      	lsrs	r3, r3, #8
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 fd4b 	bl	8001268 <LCD_IO_WriteData8>
 80007d2:	88bb      	ldrh	r3, [r7, #4]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 fd46 	bl	8001268 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <ili9486_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9486_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	80fb      	strh	r3, [r7, #6]
 80007ee:	460b      	mov	r3, r1
 80007f0:	80bb      	strh	r3, [r7, #4]
 80007f2:	4613      	mov	r3, r2
 80007f4:	807b      	strh	r3, [r7, #2]
  ILI9486_LCDMUTEX_PUSH();
  ILI9486_SETCURSOR(Xpos, Ypos);
 80007f6:	202a      	movs	r0, #42	; 0x2a
 80007f8:	f000 fc8c 	bl	8001114 <LCD_IO_WriteCmd8>
 80007fc:	88fb      	ldrh	r3, [r7, #6]
 80007fe:	0a1b      	lsrs	r3, r3, #8
 8000800:	b29b      	uxth	r3, r3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4618      	mov	r0, r3
 8000806:	f000 fd2f 	bl	8001268 <LCD_IO_WriteData8>
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fd2a 	bl	8001268 <LCD_IO_WriteData8>
 8000814:	88fb      	ldrh	r3, [r7, #6]
 8000816:	0a1b      	lsrs	r3, r3, #8
 8000818:	b29b      	uxth	r3, r3
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fd23 	bl	8001268 <LCD_IO_WriteData8>
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fd1e 	bl	8001268 <LCD_IO_WriteData8>
 800082c:	202b      	movs	r0, #43	; 0x2b
 800082e:	f000 fc71 	bl	8001114 <LCD_IO_WriteCmd8>
 8000832:	88bb      	ldrh	r3, [r7, #4]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	b29b      	uxth	r3, r3
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fd14 	bl	8001268 <LCD_IO_WriteData8>
 8000840:	88bb      	ldrh	r3, [r7, #4]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4618      	mov	r0, r3
 8000846:	f000 fd0f 	bl	8001268 <LCD_IO_WriteData8>
 800084a:	88bb      	ldrh	r3, [r7, #4]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	b29b      	uxth	r3, r3
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f000 fd08 	bl	8001268 <LCD_IO_WriteData8>
 8000858:	88bb      	ldrh	r3, [r7, #4]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4618      	mov	r0, r3
 800085e:	f000 fd03 	bl	8001268 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_RAMWR); LCD_IO_WriteData16(RGBCode);
 8000862:	202c      	movs	r0, #44	; 0x2c
 8000864:	f000 fc56 	bl	8001114 <LCD_IO_WriteCmd8>
 8000868:	887b      	ldrh	r3, [r7, #2]
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fd9e 	bl	80013ac <LCD_IO_WriteData16>
  ILI9486_LCDMUTEX_POP();
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <ili9486_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9486_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	460a      	mov	r2, r1
 8000882:	80fb      	strh	r3, [r7, #6]
 8000884:	4613      	mov	r3, r2
 8000886:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8000888:	2201      	movs	r2, #1
 800088a:	4925      	ldr	r1, [pc, #148]	; (8000920 <ili9486_ReadPixel+0xa8>)
 800088c:	203a      	movs	r0, #58	; 0x3a
 800088e:	f001 f885 	bl	800199c <LCD_IO_WriteCmd8MultipleData8>
  ILI9486_SETCURSOR(Xpos, Ypos);
 8000892:	202a      	movs	r0, #42	; 0x2a
 8000894:	f000 fc3e 	bl	8001114 <LCD_IO_WriteCmd8>
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	0a1b      	lsrs	r3, r3, #8
 800089c:	b29b      	uxth	r3, r3
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 fce1 	bl	8001268 <LCD_IO_WriteData8>
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fcdc 	bl	8001268 <LCD_IO_WriteData8>
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	0a1b      	lsrs	r3, r3, #8
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fcd5 	bl	8001268 <LCD_IO_WriteData8>
 80008be:	88fb      	ldrh	r3, [r7, #6]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fcd0 	bl	8001268 <LCD_IO_WriteData8>
 80008c8:	202b      	movs	r0, #43	; 0x2b
 80008ca:	f000 fc23 	bl	8001114 <LCD_IO_WriteCmd8>
 80008ce:	88bb      	ldrh	r3, [r7, #4]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fcc6 	bl	8001268 <LCD_IO_WriteData8>
 80008dc:	88bb      	ldrh	r3, [r7, #4]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 fcc1 	bl	8001268 <LCD_IO_WriteData8>
 80008e6:	88bb      	ldrh	r3, [r7, #4]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fcba 	bl	8001268 <LCD_IO_WriteData8>
 80008f4:	88bb      	ldrh	r3, [r7, #4]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 fcb5 	bl	8001268 <LCD_IO_WriteData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9486_RAMRD, (uint16_t *)&ret, 1, 1);
 80008fe:	f107 010e 	add.w	r1, r7, #14
 8000902:	2301      	movs	r3, #1
 8000904:	2201      	movs	r2, #1
 8000906:	202e      	movs	r0, #46	; 0x2e
 8000908:	f001 fcf2 	bl	80022f0 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 800090c:	2201      	movs	r2, #1
 800090e:	4905      	ldr	r1, [pc, #20]	; (8000924 <ili9486_ReadPixel+0xac>)
 8000910:	203a      	movs	r0, #58	; 0x3a
 8000912:	f001 f843 	bl	800199c <LCD_IO_WriteCmd8MultipleData8>
  ILI9486_LCDMUTEX_POP();
  return(ret);
 8000916:	89fb      	ldrh	r3, [r7, #14]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	08007b40 	.word	0x08007b40
 8000924:	08007b10 	.word	0x08007b10

08000928 <ili9486_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9486_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4604      	mov	r4, r0
 8000930:	4608      	mov	r0, r1
 8000932:	4611      	mov	r1, r2
 8000934:	461a      	mov	r2, r3
 8000936:	4623      	mov	r3, r4
 8000938:	80fb      	strh	r3, [r7, #6]
 800093a:	4603      	mov	r3, r0
 800093c:	80bb      	strh	r3, [r7, #4]
 800093e:	460b      	mov	r3, r1
 8000940:	807b      	strh	r3, [r7, #2]
 8000942:	4613      	mov	r3, r2
 8000944:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8000946:	4a2a      	ldr	r2, [pc, #168]	; (80009f0 <ili9486_SetDisplayWindow+0xc8>)
 8000948:	88bb      	ldrh	r3, [r7, #4]
 800094a:	8013      	strh	r3, [r2, #0]
 800094c:	88ba      	ldrh	r2, [r7, #4]
 800094e:	883b      	ldrh	r3, [r7, #0]
 8000950:	4413      	add	r3, r2
 8000952:	b29b      	uxth	r3, r3
 8000954:	3b01      	subs	r3, #1
 8000956:	b29a      	uxth	r2, r3
 8000958:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <ili9486_SetDisplayWindow+0xcc>)
 800095a:	801a      	strh	r2, [r3, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 800095c:	202a      	movs	r0, #42	; 0x2a
 800095e:	f000 fbd9 	bl	8001114 <LCD_IO_WriteCmd8>
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	b29b      	uxth	r3, r3
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fc7c 	bl	8001268 <LCD_IO_WriteData8>
 8000970:	88fb      	ldrh	r3, [r7, #6]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	4618      	mov	r0, r3
 8000976:	f000 fc77 	bl	8001268 <LCD_IO_WriteData8>
 800097a:	88fa      	ldrh	r2, [r7, #6]
 800097c:	887b      	ldrh	r3, [r7, #2]
 800097e:	4413      	add	r3, r2
 8000980:	3b01      	subs	r3, #1
 8000982:	121b      	asrs	r3, r3, #8
 8000984:	b2db      	uxtb	r3, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fc6e 	bl	8001268 <LCD_IO_WriteData8>
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	b2da      	uxtb	r2, r3
 8000990:	887b      	ldrh	r3, [r7, #2]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4413      	add	r3, r2
 8000996:	b2db      	uxtb	r3, r3
 8000998:	3b01      	subs	r3, #1
 800099a:	b2db      	uxtb	r3, r3
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fc63 	bl	8001268 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 80009a2:	202b      	movs	r0, #43	; 0x2b
 80009a4:	f000 fbb6 	bl	8001114 <LCD_IO_WriteCmd8>
 80009a8:	88bb      	ldrh	r3, [r7, #4]
 80009aa:	0a1b      	lsrs	r3, r3, #8
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fc59 	bl	8001268 <LCD_IO_WriteData8>
 80009b6:	88bb      	ldrh	r3, [r7, #4]
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 fc54 	bl	8001268 <LCD_IO_WriteData8>
 80009c0:	88ba      	ldrh	r2, [r7, #4]
 80009c2:	883b      	ldrh	r3, [r7, #0]
 80009c4:	4413      	add	r3, r2
 80009c6:	3b01      	subs	r3, #1
 80009c8:	121b      	asrs	r3, r3, #8
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fc4b 	bl	8001268 <LCD_IO_WriteData8>
 80009d2:	88bb      	ldrh	r3, [r7, #4]
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	883b      	ldrh	r3, [r7, #0]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4413      	add	r3, r2
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	3b01      	subs	r3, #1
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fc40 	bl	8001268 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd90      	pop	{r4, r7, pc}
 80009f0:	2400009e 	.word	0x2400009e
 80009f4:	240000a0 	.word	0x240000a0

080009f8 <ili9486_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9486_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4604      	mov	r4, r0
 8000a00:	4608      	mov	r0, r1
 8000a02:	4611      	mov	r1, r2
 8000a04:	461a      	mov	r2, r3
 8000a06:	4623      	mov	r3, r4
 8000a08:	80fb      	strh	r3, [r7, #6]
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80bb      	strh	r3, [r7, #4]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	807b      	strh	r3, [r7, #2]
 8000a12:	4613      	mov	r3, r2
 8000a14:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 8000a16:	202a      	movs	r0, #42	; 0x2a
 8000a18:	f000 fb7c 	bl	8001114 <LCD_IO_WriteCmd8>
 8000a1c:	88bb      	ldrh	r3, [r7, #4]
 8000a1e:	0a1b      	lsrs	r3, r3, #8
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 fc1f 	bl	8001268 <LCD_IO_WriteData8>
 8000a2a:	88bb      	ldrh	r3, [r7, #4]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fc1a 	bl	8001268 <LCD_IO_WriteData8>
 8000a34:	88ba      	ldrh	r2, [r7, #4]
 8000a36:	883b      	ldrh	r3, [r7, #0]
 8000a38:	4413      	add	r3, r2
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	121b      	asrs	r3, r3, #8
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 fc11 	bl	8001268 <LCD_IO_WriteData8>
 8000a46:	88bb      	ldrh	r3, [r7, #4]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	883b      	ldrh	r3, [r7, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4413      	add	r3, r2
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	3b01      	subs	r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fc06 	bl	8001268 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 8000a5c:	202b      	movs	r0, #43	; 0x2b
 8000a5e:	f000 fb59 	bl	8001114 <LCD_IO_WriteCmd8>
 8000a62:	887b      	ldrh	r3, [r7, #2]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fbfc 	bl	8001268 <LCD_IO_WriteData8>
 8000a70:	887b      	ldrh	r3, [r7, #2]
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fbf7 	bl	8001268 <LCD_IO_WriteData8>
 8000a7a:	887b      	ldrh	r3, [r7, #2]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 fbf0 	bl	8001268 <LCD_IO_WriteData8>
 8000a88:	887b      	ldrh	r3, [r7, #2]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fbeb 	bl	8001268 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Length);
 8000a92:	883a      	ldrh	r2, [r7, #0]
 8000a94:	88fb      	ldrh	r3, [r7, #6]
 8000a96:	4619      	mov	r1, r3
 8000a98:	202c      	movs	r0, #44	; 0x2c
 8000a9a:	f000 fdb1 	bl	8001600 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd90      	pop	{r4, r7, pc}

08000aa6 <ili9486_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9486_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8000aa6:	b590      	push	{r4, r7, lr}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4604      	mov	r4, r0
 8000aae:	4608      	mov	r0, r1
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4623      	mov	r3, r4
 8000ab6:	80fb      	strh	r3, [r7, #6]
 8000ab8:	4603      	mov	r3, r0
 8000aba:	80bb      	strh	r3, [r7, #4]
 8000abc:	460b      	mov	r3, r1
 8000abe:	807b      	strh	r3, [r7, #2]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 8000ac4:	202a      	movs	r0, #42	; 0x2a
 8000ac6:	f000 fb25 	bl	8001114 <LCD_IO_WriteCmd8>
 8000aca:	88bb      	ldrh	r3, [r7, #4]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 fbc8 	bl	8001268 <LCD_IO_WriteData8>
 8000ad8:	88bb      	ldrh	r3, [r7, #4]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 fbc3 	bl	8001268 <LCD_IO_WriteData8>
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fbbc 	bl	8001268 <LCD_IO_WriteData8>
 8000af0:	88bb      	ldrh	r3, [r7, #4]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fbb7 	bl	8001268 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 8000afa:	202b      	movs	r0, #43	; 0x2b
 8000afc:	f000 fb0a 	bl	8001114 <LCD_IO_WriteCmd8>
 8000b00:	887b      	ldrh	r3, [r7, #2]
 8000b02:	0a1b      	lsrs	r3, r3, #8
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 fbad 	bl	8001268 <LCD_IO_WriteData8>
 8000b0e:	887b      	ldrh	r3, [r7, #2]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fba8 	bl	8001268 <LCD_IO_WriteData8>
 8000b18:	887a      	ldrh	r2, [r7, #2]
 8000b1a:	883b      	ldrh	r3, [r7, #0]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	121b      	asrs	r3, r3, #8
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 fb9f 	bl	8001268 <LCD_IO_WriteData8>
 8000b2a:	887b      	ldrh	r3, [r7, #2]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	883b      	ldrh	r3, [r7, #0]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	4413      	add	r3, r2
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	3b01      	subs	r3, #1
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 fb94 	bl	8001268 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Length);
 8000b40:	883a      	ldrh	r2, [r7, #0]
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	4619      	mov	r1, r3
 8000b46:	202c      	movs	r0, #44	; 0x2c
 8000b48:	f000 fd5a 	bl	8001600 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd90      	pop	{r4, r7, pc}

08000b54 <ili9486_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9486_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	4611      	mov	r1, r2
 8000b60:	461a      	mov	r2, r3
 8000b62:	4623      	mov	r3, r4
 8000b64:	80fb      	strh	r3, [r7, #6]
 8000b66:	4603      	mov	r3, r0
 8000b68:	80bb      	strh	r3, [r7, #4]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	807b      	strh	r3, [r7, #2]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8000b72:	202a      	movs	r0, #42	; 0x2a
 8000b74:	f000 face 	bl	8001114 <LCD_IO_WriteCmd8>
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fb71 	bl	8001268 <LCD_IO_WriteData8>
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 fb6c 	bl	8001268 <LCD_IO_WriteData8>
 8000b90:	88fa      	ldrh	r2, [r7, #6]
 8000b92:	887b      	ldrh	r3, [r7, #2]
 8000b94:	4413      	add	r3, r2
 8000b96:	3b01      	subs	r3, #1
 8000b98:	121b      	asrs	r3, r3, #8
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 fb63 	bl	8001268 <LCD_IO_WriteData8>
 8000ba2:	88fb      	ldrh	r3, [r7, #6]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4413      	add	r3, r2
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 fb58 	bl	8001268 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8000bb8:	202b      	movs	r0, #43	; 0x2b
 8000bba:	f000 faab 	bl	8001114 <LCD_IO_WriteCmd8>
 8000bbe:	88bb      	ldrh	r3, [r7, #4]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 fb4e 	bl	8001268 <LCD_IO_WriteData8>
 8000bcc:	88bb      	ldrh	r3, [r7, #4]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 fb49 	bl	8001268 <LCD_IO_WriteData8>
 8000bd6:	88ba      	ldrh	r2, [r7, #4]
 8000bd8:	883b      	ldrh	r3, [r7, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	121b      	asrs	r3, r3, #8
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fb40 	bl	8001268 <LCD_IO_WriteData8>
 8000be8:	88bb      	ldrh	r3, [r7, #4]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	883b      	ldrh	r3, [r7, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 fb35 	bl	8001268 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Xsize * Ysize);
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	883a      	ldrh	r2, [r7, #0]
 8000c02:	fb02 f303 	mul.w	r3, r2, r3
 8000c06:	461a      	mov	r2, r3
 8000c08:	8b3b      	ldrh	r3, [r7, #24]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	202c      	movs	r0, #44	; 0x2c
 8000c0e:	f000 fcf7 	bl	8001600 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd90      	pop	{r4, r7, pc}
	...

08000c1c <ili9486_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9486_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	603a      	str	r2, [r7, #0]
 8000c26:	80fb      	strh	r3, [r7, #6]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	80bb      	strh	r3, [r7, #4]
  uint32_t index, size;
  /* Read bitmap size */
  size = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfSize;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000c32:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfOffBits;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8000c3a:	60bb      	str	r3, [r7, #8]
  size = (size - index) / 2;
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	085b      	lsrs	r3, r3, #1
 8000c44:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 8000c46:	683a      	ldr	r2, [r7, #0]
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	603b      	str	r3, [r7, #0]

  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_UP);
 8000c4e:	2036      	movs	r0, #54	; 0x36
 8000c50:	f000 fa60 	bl	8001114 <LCD_IO_WriteCmd8>
 8000c54:	2068      	movs	r0, #104	; 0x68
 8000c56:	f000 fb07 	bl	8001268 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(ILI9486_SIZE_Y - 1 - yEnd); LCD_IO_WriteData16_to_2x8(ILI9486_SIZE_Y - 1 - yStart);
 8000c5a:	202b      	movs	r0, #43	; 0x2b
 8000c5c:	f000 fa5a 	bl	8001114 <LCD_IO_WriteCmd8>
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <ili9486_DrawBitmap+0xb4>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	f240 133f 	movw	r3, #319	; 0x13f
 8000c6a:	1a9b      	subs	r3, r3, r2
 8000c6c:	121b      	asrs	r3, r3, #8
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 faf9 	bl	8001268 <LCD_IO_WriteData8>
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <ili9486_DrawBitmap+0xb4>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 faf0 	bl	8001268 <LCD_IO_WriteData8>
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <ili9486_DrawBitmap+0xb8>)
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	f240 133f 	movw	r3, #319	; 0x13f
 8000c92:	1a9b      	subs	r3, r3, r2
 8000c94:	121b      	asrs	r3, r3, #8
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 fae5 	bl	8001268 <LCD_IO_WriteData8>
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <ili9486_DrawBitmap+0xb8>)
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 fadc 	bl	8001268 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9486_RAMWR, (uint16_t *)pbmp, size);
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	6839      	ldr	r1, [r7, #0]
 8000cb4:	202c      	movs	r0, #44	; 0x2c
 8000cb6:	f000 ffab 	bl	8001c10 <LCD_IO_WriteCmd8MultipleData16>
  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_DOWN);
 8000cba:	2036      	movs	r0, #54	; 0x36
 8000cbc:	f000 fa2a 	bl	8001114 <LCD_IO_WriteCmd8>
 8000cc0:	2028      	movs	r0, #40	; 0x28
 8000cc2:	f000 fad1 	bl	8001268 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	240000a0 	.word	0x240000a0
 8000cd4:	2400009e 	.word	0x2400009e

08000cd8 <ili9486_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9486_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4623      	mov	r3, r4
 8000ce8:	80fb      	strh	r3, [r7, #6]
 8000cea:	4603      	mov	r3, r0
 8000cec:	80bb      	strh	r3, [r7, #4]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	807b      	strh	r3, [r7, #2]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	803b      	strh	r3, [r7, #0]
  ili9486_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000cf6:	883b      	ldrh	r3, [r7, #0]
 8000cf8:	887a      	ldrh	r2, [r7, #2]
 8000cfa:	88b9      	ldrh	r1, [r7, #4]
 8000cfc:	88f8      	ldrh	r0, [r7, #6]
 8000cfe:	f7ff fe13 	bl	8000928 <ili9486_SetDisplayWindow>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9486_RAMWR, pData, Xsize * Ysize);
 8000d02:	887b      	ldrh	r3, [r7, #2]
 8000d04:	883a      	ldrh	r2, [r7, #0]
 8000d06:	fb02 f303 	mul.w	r3, r2, r3
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	69b9      	ldr	r1, [r7, #24]
 8000d0e:	202c      	movs	r0, #44	; 0x2c
 8000d10:	f000 ff7e 	bl	8001c10 <LCD_IO_WriteCmd8MultipleData16>
  ILI9486_LCDMUTEX_POP();
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd90      	pop	{r4, r7, pc}

08000d1c <ili9486_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9486_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4604      	mov	r4, r0
 8000d24:	4608      	mov	r0, r1
 8000d26:	4611      	mov	r1, r2
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4623      	mov	r3, r4
 8000d2c:	80fb      	strh	r3, [r7, #6]
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80bb      	strh	r3, [r7, #4]
 8000d32:	460b      	mov	r3, r1
 8000d34:	807b      	strh	r3, [r7, #2]
 8000d36:	4613      	mov	r3, r2
 8000d38:	803b      	strh	r3, [r7, #0]
  ili9486_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000d3a:	883b      	ldrh	r3, [r7, #0]
 8000d3c:	887a      	ldrh	r2, [r7, #2]
 8000d3e:	88b9      	ldrh	r1, [r7, #4]
 8000d40:	88f8      	ldrh	r0, [r7, #6]
 8000d42:	f7ff fdf1 	bl	8000928 <ili9486_SetDisplayWindow>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8000d46:	2201      	movs	r2, #1
 8000d48:	490b      	ldr	r1, [pc, #44]	; (8000d78 <ili9486_ReadRGBImage+0x5c>)
 8000d4a:	203a      	movs	r0, #58	; 0x3a
 8000d4c:	f000 fe26 	bl	800199c <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9486_RAMRD, pData, Xsize * Ysize, 1);
 8000d50:	887b      	ldrh	r3, [r7, #2]
 8000d52:	883a      	ldrh	r2, [r7, #0]
 8000d54:	fb02 f303 	mul.w	r3, r2, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	69b9      	ldr	r1, [r7, #24]
 8000d5e:	202e      	movs	r0, #46	; 0x2e
 8000d60:	f001 fac6 	bl	80022f0 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 8000d64:	2201      	movs	r2, #1
 8000d66:	4905      	ldr	r1, [pc, #20]	; (8000d7c <ili9486_ReadRGBImage+0x60>)
 8000d68:	203a      	movs	r0, #58	; 0x3a
 8000d6a:	f000 fe17 	bl	800199c <LCD_IO_WriteCmd8MultipleData8>
  ILI9486_LCDMUTEX_POP();
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	bf00      	nop
 8000d78:	08007b40 	.word	0x08007b40
 8000d7c:	08007b10 	.word	0x08007b10

08000d80 <ili9486_WriteChar>:

/* FontWrite cat cat by owlhor*/
void ili9486_WriteChar(uint16_t Xpo, uint16_t Ypo, char chr,sFONT fonto, uint16_t RGB_Coder){
 8000d80:	b082      	sub	sp, #8
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80fb      	strh	r3, [r7, #6]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	80bb      	strh	r3, [r7, #4]
 8000d92:	4613      	mov	r3, r2
 8000d94:	70fb      	strb	r3, [r7, #3]
	uint8_t i,j = 0; //// ij is sizeof char table, b is start pos at fonttable
 8000d96:	2300      	movs	r3, #0
 8000d98:	75bb      	strb	r3, [r7, #22]
	 * font12 x 7 =>  12x1 byte per jump 12 24 36 48 60
	 * font16 x 11=>  16x2 byte per jump 32 64 96 128 160
	 * font24 x 17=>  24x3 byte per jump 72 144 216 288 310
	 * */
	//// double for loop as one char table
	int rowbox = (fonto.Width / 8) + 1;
 8000d9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d9c:	08db      	lsrs	r3, r3, #3
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	3301      	adds	r3, #1
 8000da2:	613b      	str	r3, [r7, #16]

	for(i = 0; i < fonto.Height; i++){
 8000da4:	2300      	movs	r3, #0
 8000da6:	75fb      	strb	r3, [r7, #23]
 8000da8:	e034      	b.n	8000e14 <ili9486_WriteChar+0x94>
		//// -32 to offset sync ASCII Table start " " at 32

		b = fonto.table[((chr - 31) * fonto.Height * rowbox)+ (i*rowbox)];
 8000daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dac:	78fa      	ldrb	r2, [r7, #3]
 8000dae:	3a1f      	subs	r2, #31
 8000db0:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000db2:	fb01 f202 	mul.w	r2, r1, r2
 8000db6:	6939      	ldr	r1, [r7, #16]
 8000db8:	fb02 f101 	mul.w	r1, r2, r1
 8000dbc:	7dfa      	ldrb	r2, [r7, #23]
 8000dbe:	6938      	ldr	r0, [r7, #16]
 8000dc0:	fb00 f202 	mul.w	r2, r0, r2
 8000dc4:	440a      	add	r2, r1
 8000dc6:	4413      	add	r3, r2
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	60fb      	str	r3, [r7, #12]

//		for(int k = 0;k <rowbox; k++){
//			b = (b << (8 * k)) & (fonto.table[((chr - 32) * fonto.Height * rowbox) + (i*rowbox) + k]);
//		}

		for(j = 0; j < fonto.Width; j++){
 8000dcc:	2300      	movs	r3, #0
 8000dce:	75bb      	strb	r3, [r7, #22]
 8000dd0:	e018      	b.n	8000e04 <ili9486_WriteChar+0x84>
			//// if valuein fonttable is 1
			//// (b << j) & 0x80 -> seek at MSB First
			if((b << j) & 0x80){
 8000dd2:	7dbb      	ldrb	r3, [r7, #22]
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d00d      	beq.n	8000dfe <ili9486_WriteChar+0x7e>
				ili9486_WritePixel(j + Xpo, Ypo + i, RGB_Coder);
 8000de2:	7dbb      	ldrb	r3, [r7, #22]
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	4413      	add	r3, r2
 8000dea:	b298      	uxth	r0, r3
 8000dec:	7dfb      	ldrb	r3, [r7, #23]
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	88bb      	ldrh	r3, [r7, #4]
 8000df2:	4413      	add	r3, r2
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f7ff fcf3 	bl	80007e4 <ili9486_WritePixel>
		for(j = 0; j < fonto.Width; j++){
 8000dfe:	7dbb      	ldrb	r3, [r7, #22]
 8000e00:	3301      	adds	r3, #1
 8000e02:	75bb      	strb	r3, [r7, #22]
 8000e04:	7dbb      	ldrb	r3, [r7, #22]
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d3e1      	bcc.n	8000dd2 <ili9486_WriteChar+0x52>
	for(i = 0; i < fonto.Height; i++){
 8000e0e:	7dfb      	ldrb	r3, [r7, #23]
 8000e10:	3301      	adds	r3, #1
 8000e12:	75fb      	strb	r3, [r7, #23]
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d3c5      	bcc.n	8000daa <ili9486_WriteChar+0x2a>
			}

		}
	}
}
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e2a:	b002      	add	sp, #8
 8000e2c:	4770      	bx	lr
	...

08000e30 <ili9486_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9486_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	80fb      	strh	r3, [r7, #6]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	80bb      	strh	r3, [r7, #4]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9486_ORIENTATION == 1)
  if((TopFix != scrparam[1]) || (BottonFix != scrparam[3]))
 8000e42:	4b29      	ldr	r3, [pc, #164]	; (8000ee8 <ili9486_Scroll+0xb8>)
 8000e44:	885b      	ldrh	r3, [r3, #2]
 8000e46:	88ba      	ldrh	r2, [r7, #4]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d104      	bne.n	8000e56 <ili9486_Scroll+0x26>
 8000e4c:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <ili9486_Scroll+0xb8>)
 8000e4e:	88db      	ldrh	r3, [r3, #6]
 8000e50:	887a      	ldrh	r2, [r7, #2]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d013      	beq.n	8000e7e <ili9486_Scroll+0x4e>
  {
    scrparam[1] = TopFix;
 8000e56:	4a24      	ldr	r2, [pc, #144]	; (8000ee8 <ili9486_Scroll+0xb8>)
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	8053      	strh	r3, [r2, #2]
    scrparam[3] = BottonFix;
 8000e5c:	4a22      	ldr	r2, [pc, #136]	; (8000ee8 <ili9486_Scroll+0xb8>)
 8000e5e:	887b      	ldrh	r3, [r7, #2]
 8000e60:	80d3      	strh	r3, [r2, #6]
    scrparam[2] = ILI9486_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 8000e62:	88ba      	ldrh	r2, [r7, #4]
 8000e64:	887b      	ldrh	r3, [r7, #2]
 8000e66:	4413      	add	r3, r2
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <ili9486_Scroll+0xb8>)
 8000e72:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9486_VSCRDEF, &scrparam[1], 3);
 8000e74:	2203      	movs	r2, #3
 8000e76:	491d      	ldr	r1, [pc, #116]	; (8000eec <ili9486_Scroll+0xbc>)
 8000e78:	2033      	movs	r0, #51	; 0x33
 8000e7a:	f000 fec9 	bl	8001c10 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll = (0 - Scroll) % scrparam[2];
 8000e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e82:	425b      	negs	r3, r3
 8000e84:	4a18      	ldr	r2, [pc, #96]	; (8000ee8 <ili9486_Scroll+0xb8>)
 8000e86:	8892      	ldrh	r2, [r2, #4]
 8000e88:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e8c:	fb01 f202 	mul.w	r2, r1, r2
 8000e90:	1a9b      	subs	r3, r3, r2
 8000e92:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8000e94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	da0a      	bge.n	8000eb2 <ili9486_Scroll+0x82>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <ili9486_Scroll+0xb8>)
 8000e9e:	889a      	ldrh	r2, [r3, #4]
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <ili9486_Scroll+0xb8>)
 8000ea8:	885b      	ldrh	r3, [r3, #2]
 8000eaa:	4413      	add	r3, r2
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	80fb      	strh	r3, [r7, #6]
 8000eb0:	e005      	b.n	8000ebe <ili9486_Scroll+0x8e>
  else
    Scroll = Scroll + scrparam[1];
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <ili9486_Scroll+0xb8>)
 8000eb4:	885a      	ldrh	r2, [r3, #2]
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	4413      	add	r3, r2
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #endif
  if(Scroll != scrparam[0])
 8000ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ec2:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <ili9486_Scroll+0xb8>)
 8000ec4:	8812      	ldrh	r2, [r2, #0]
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d009      	beq.n	8000ede <ili9486_Scroll+0xae>
  {
    scrparam[0] = Scroll;
 8000eca:	88fa      	ldrh	r2, [r7, #6]
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <ili9486_Scroll+0xb8>)
 8000ece:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9486_VSCRSADD, scrparam[0], 1);
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <ili9486_Scroll+0xb8>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	2037      	movs	r0, #55	; 0x37
 8000eda:	f000 fb91 	bl	8001600 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9486_LCDMUTEX_POP();
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	240000a4 	.word	0x240000a4
 8000eec:	240000a6 	.word	0x240000a6

08000ef0 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  while(c--);
 8000ef8:	bf00      	nop
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	1e5a      	subs	r2, r3, #1
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1fa      	bne.n	8000efa <LCD_IO_Delay+0xa>
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <LCD_Delay>:
#pragma pop
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f002 fbaa 	bl	8003674 <HAL_Delay>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
    GPIOX_CLR(LCD_BL);
  else
    GPIOX_SET(LCD_BL);
  #endif
  #endif
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  #define GPIOX_CLOCK_LCD_RD    GPIOX_CLOCK(LCD_RD)
  #else
  #define GPIOX_CLOCK_LCD_RD    0
  #endif

  RCC->AHB4ENR |= (GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_WR) |
 8000f44:	4b6c      	ldr	r3, [pc, #432]	; (80010f8 <LCD_IO_Init+0x1b8>)
 8000f46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f4a:	4a6b      	ldr	r2, [pc, #428]	; (80010f8 <LCD_IO_Init+0x1b8>)
 8000f4c:	f043 035f 	orr.w	r3, r3, #95	; 0x5f
 8000f50:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
                   GPIOX_CLOCK(LCD_D0) | GPIOX_CLOCK(LCD_D1) | GPIOX_CLOCK(LCD_D2) | GPIOX_CLOCK(LCD_D3) |
                   GPIOX_CLOCK(LCD_D4) | GPIOX_CLOCK(LCD_D5) | GPIOX_CLOCK(LCD_D6) | GPIOX_CLOCK(LCD_D7) |
                   GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_RD);

  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_RST_OFF;                          /* RST = 1 */
 8000f54:	4b69      	ldr	r3, [pc, #420]	; (80010fc <LCD_IO_Init+0x1bc>)
 8000f56:	2204      	movs	r2, #4
 8000f58:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8000f5a:	4b68      	ldr	r3, [pc, #416]	; (80010fc <LCD_IO_Init+0x1bc>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f62:	4a66      	ldr	r2, [pc, #408]	; (80010fc <LCD_IO_Init+0x1bc>)
 8000f64:	f043 0310 	orr.w	r3, r3, #16
 8000f68:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_BL) = LCD_BLON;
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  GPIOX_SET(LCD_CS);                    /* CS = 1 */
 8000f6a:	4b65      	ldr	r3, [pc, #404]	; (8001100 <LCD_IO_Init+0x1c0>)
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	619a      	str	r2, [r3, #24]
  LCD_RS_DATA;                          /* RS = 1 */
 8000f70:	4b62      	ldr	r3, [pc, #392]	; (80010fc <LCD_IO_Init+0x1bc>)
 8000f72:	2208      	movs	r2, #8
 8000f74:	619a      	str	r2, [r3, #24]
  GPIOX_SET(LCD_WR);                    /* WR = 1 */
 8000f76:	4b61      	ldr	r3, [pc, #388]	; (80010fc <LCD_IO_Init+0x1bc>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	619a      	str	r2, [r3, #24]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_SET(LCD_RD);                    /* RD = 1 */
 8000f7c:	4b61      	ldr	r3, [pc, #388]	; (8001104 <LCD_IO_Init+0x1c4>)
 8000f7e:	2208      	movs	r2, #8
 8000f80:	619a      	str	r2, [r3, #24]
  #endif

  GPIOX_MODER(MODE_OUT, LCD_CS);
 8000f82:	4b5f      	ldr	r3, [pc, #380]	; (8001100 <LCD_IO_Init+0x1c0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f023 030c 	bic.w	r3, r3, #12
 8000f8a:	4a5d      	ldr	r2, [pc, #372]	; (8001100 <LCD_IO_Init+0x1c0>)
 8000f8c:	f043 0304 	orr.w	r3, r3, #4
 8000f90:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8000f92:	4b5a      	ldr	r3, [pc, #360]	; (80010fc <LCD_IO_Init+0x1bc>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000f9a:	4a58      	ldr	r2, [pc, #352]	; (80010fc <LCD_IO_Init+0x1bc>)
 8000f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa0:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_WR);
 8000fa2:	4b56      	ldr	r3, [pc, #344]	; (80010fc <LCD_IO_Init+0x1bc>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f023 0303 	bic.w	r3, r3, #3
 8000faa:	4a54      	ldr	r2, [pc, #336]	; (80010fc <LCD_IO_Init+0x1bc>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RD);
 8000fb2:	4b54      	ldr	r3, [pc, #336]	; (8001104 <LCD_IO_Init+0x1c4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000fba:	4a52      	ldr	r2, [pc, #328]	; (8001104 <LCD_IO_Init+0x1c4>)
 8000fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc0:	6013      	str	r3, [r2, #0]
  #endif

  LCD_DIRWRITE;                         /* data pins set the output direction */
 8000fc2:	4b51      	ldr	r3, [pc, #324]	; (8001108 <LCD_IO_Init+0x1c8>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000fca:	4a4f      	ldr	r2, [pc, #316]	; (8001108 <LCD_IO_Init+0x1c8>)
 8000fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	4b4e      	ldr	r3, [pc, #312]	; (800110c <LCD_IO_Init+0x1cc>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000fda:	4a4c      	ldr	r2, [pc, #304]	; (800110c <LCD_IO_Init+0x1cc>)
 8000fdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	4b49      	ldr	r3, [pc, #292]	; (8001108 <LCD_IO_Init+0x1c8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000fea:	4a47      	ldr	r2, [pc, #284]	; (8001108 <LCD_IO_Init+0x1c8>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	4b47      	ldr	r3, [pc, #284]	; (8001110 <LCD_IO_Init+0x1d0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000ffa:	4a45      	ldr	r2, [pc, #276]	; (8001110 <LCD_IO_Init+0x1d0>)
 8000ffc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	4b43      	ldr	r3, [pc, #268]	; (8001110 <LCD_IO_Init+0x1d0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800100a:	4a41      	ldr	r2, [pc, #260]	; (8001110 <LCD_IO_Init+0x1d0>)
 800100c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	4b3f      	ldr	r3, [pc, #252]	; (8001110 <LCD_IO_Init+0x1d0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800101a:	4a3d      	ldr	r2, [pc, #244]	; (8001110 <LCD_IO_Init+0x1d0>)
 800101c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	4b38      	ldr	r3, [pc, #224]	; (8001104 <LCD_IO_Init+0x1c4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800102a:	4a36      	ldr	r2, [pc, #216]	; (8001104 <LCD_IO_Init+0x1c4>)
 800102c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	4b35      	ldr	r3, [pc, #212]	; (8001108 <LCD_IO_Init+0x1c8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800103a:	4a33      	ldr	r2, [pc, #204]	; (8001108 <LCD_IO_Init+0x1c8>)
 800103c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001040:	6013      	str	r3, [r2, #0]

  /* GPIO speed */
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8001042:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <LCD_IO_Init+0x1c0>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	4a2e      	ldr	r2, [pc, #184]	; (8001100 <LCD_IO_Init+0x1c0>)
 8001048:	f043 030c 	orr.w	r3, r3, #12
 800104c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 800104e:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <LCD_IO_Init+0x1bc>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	4a2a      	ldr	r2, [pc, #168]	; (80010fc <LCD_IO_Init+0x1bc>)
 8001054:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001058:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_WR);
 800105a:	4b28      	ldr	r3, [pc, #160]	; (80010fc <LCD_IO_Init+0x1bc>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	4a27      	ldr	r2, [pc, #156]	; (80010fc <LCD_IO_Init+0x1bc>)
 8001060:	f043 0303 	orr.w	r3, r3, #3
 8001064:	6093      	str	r3, [r2, #8]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RD);
 8001066:	4b27      	ldr	r3, [pc, #156]	; (8001104 <LCD_IO_Init+0x1c4>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	4a26      	ldr	r2, [pc, #152]	; (8001104 <LCD_IO_Init+0x1c4>)
 800106c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001070:	6093      	str	r3, [r2, #8]
  #endif
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D0);
 8001072:	4b25      	ldr	r3, [pc, #148]	; (8001108 <LCD_IO_Init+0x1c8>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	4a24      	ldr	r2, [pc, #144]	; (8001108 <LCD_IO_Init+0x1c8>)
 8001078:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800107c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D1);
 800107e:	4b23      	ldr	r3, [pc, #140]	; (800110c <LCD_IO_Init+0x1cc>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	4a22      	ldr	r2, [pc, #136]	; (800110c <LCD_IO_Init+0x1cc>)
 8001084:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001088:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D2);
 800108a:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <LCD_IO_Init+0x1c8>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	4a1e      	ldr	r2, [pc, #120]	; (8001108 <LCD_IO_Init+0x1c8>)
 8001090:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001094:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D3);
 8001096:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <LCD_IO_Init+0x1d0>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	4a1d      	ldr	r2, [pc, #116]	; (8001110 <LCD_IO_Init+0x1d0>)
 800109c:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80010a0:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D4);
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <LCD_IO_Init+0x1d0>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	4a1a      	ldr	r2, [pc, #104]	; (8001110 <LCD_IO_Init+0x1d0>)
 80010a8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80010ac:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D5);
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <LCD_IO_Init+0x1d0>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	4a17      	ldr	r2, [pc, #92]	; (8001110 <LCD_IO_Init+0x1d0>)
 80010b4:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80010b8:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D6);
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <LCD_IO_Init+0x1c4>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	4a11      	ldr	r2, [pc, #68]	; (8001104 <LCD_IO_Init+0x1c4>)
 80010c0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80010c4:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D7);
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <LCD_IO_Init+0x1c8>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <LCD_IO_Init+0x1c8>)
 80010cc:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80010d0:	6093      	str	r3, [r2, #8]

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f7ff ff1d 	bl	8000f12 <LCD_Delay>
  LCD_RST_ON;                           /* RST = 0 */
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <LCD_IO_Init+0x1bc>)
 80010da:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010de:	619a      	str	r2, [r3, #24]
  LCD_Delay(1);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f7ff ff16 	bl	8000f12 <LCD_Delay>
  LCD_RST_OFF;                          /* RST = 1 */
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <LCD_IO_Init+0x1bc>)
 80010e8:	2204      	movs	r2, #4
 80010ea:	619a      	str	r2, [r3, #24]
  #endif
  LCD_Delay(1);
 80010ec:	2001      	movs	r0, #1
 80010ee:	f7ff ff10 	bl	8000f12 <LCD_Delay>
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	58024400 	.word	0x58024400
 80010fc:	58020800 	.word	0x58020800
 8001100:	58020400 	.word	0x58020400
 8001104:	58020000 	.word	0x58020000
 8001108:	58021800 	.word	0x58021800
 800110c:	58020c00 	.word	0x58020c00
 8001110:	58021000 	.word	0x58021000

08001114 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 800111e:	4b4b      	ldr	r3, [pc, #300]	; (800124c <LCD_IO_WriteCmd8+0x138>)
 8001120:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001124:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8001126:	4b4a      	ldr	r3, [pc, #296]	; (8001250 <LCD_IO_WriteCmd8+0x13c>)
 8001128:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800112c:	619a      	str	r2, [r3, #24]
 800112e:	4a49      	ldr	r2, [pc, #292]	; (8001254 <LCD_IO_WriteCmd8+0x140>)
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	7013      	strb	r3, [r2, #0]
 8001134:	4b47      	ldr	r3, [pc, #284]	; (8001254 <LCD_IO_WriteCmd8+0x140>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d004      	beq.n	800114a <LCD_IO_WriteCmd8+0x36>
 8001140:	4b45      	ldr	r3, [pc, #276]	; (8001258 <LCD_IO_WriteCmd8+0x144>)
 8001142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001146:	619a      	str	r2, [r3, #24]
 8001148:	e003      	b.n	8001152 <LCD_IO_WriteCmd8+0x3e>
 800114a:	4b43      	ldr	r3, [pc, #268]	; (8001258 <LCD_IO_WriteCmd8+0x144>)
 800114c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001150:	619a      	str	r2, [r3, #24]
 8001152:	4b40      	ldr	r3, [pc, #256]	; (8001254 <LCD_IO_WriteCmd8+0x140>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d004      	beq.n	8001168 <LCD_IO_WriteCmd8+0x54>
 800115e:	4b3f      	ldr	r3, [pc, #252]	; (800125c <LCD_IO_WriteCmd8+0x148>)
 8001160:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001164:	619a      	str	r2, [r3, #24]
 8001166:	e003      	b.n	8001170 <LCD_IO_WriteCmd8+0x5c>
 8001168:	4b3c      	ldr	r3, [pc, #240]	; (800125c <LCD_IO_WriteCmd8+0x148>)
 800116a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800116e:	619a      	str	r2, [r3, #24]
 8001170:	4b38      	ldr	r3, [pc, #224]	; (8001254 <LCD_IO_WriteCmd8+0x140>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	2b00      	cmp	r3, #0
 800117a:	d004      	beq.n	8001186 <LCD_IO_WriteCmd8+0x72>
 800117c:	4b36      	ldr	r3, [pc, #216]	; (8001258 <LCD_IO_WriteCmd8+0x144>)
 800117e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001182:	619a      	str	r2, [r3, #24]
 8001184:	e003      	b.n	800118e <LCD_IO_WriteCmd8+0x7a>
 8001186:	4b34      	ldr	r3, [pc, #208]	; (8001258 <LCD_IO_WriteCmd8+0x144>)
 8001188:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800118c:	619a      	str	r2, [r3, #24]
 800118e:	4b31      	ldr	r3, [pc, #196]	; (8001254 <LCD_IO_WriteCmd8+0x140>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	2b00      	cmp	r3, #0
 8001198:	d004      	beq.n	80011a4 <LCD_IO_WriteCmd8+0x90>
 800119a:	4b31      	ldr	r3, [pc, #196]	; (8001260 <LCD_IO_WriteCmd8+0x14c>)
 800119c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011a0:	619a      	str	r2, [r3, #24]
 80011a2:	e003      	b.n	80011ac <LCD_IO_WriteCmd8+0x98>
 80011a4:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <LCD_IO_WriteCmd8+0x14c>)
 80011a6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80011aa:	619a      	str	r2, [r3, #24]
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <LCD_IO_WriteCmd8+0x140>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	f003 0310 	and.w	r3, r3, #16
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d004      	beq.n	80011c2 <LCD_IO_WriteCmd8+0xae>
 80011b8:	4b29      	ldr	r3, [pc, #164]	; (8001260 <LCD_IO_WriteCmd8+0x14c>)
 80011ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011be:	619a      	str	r2, [r3, #24]
 80011c0:	e003      	b.n	80011ca <LCD_IO_WriteCmd8+0xb6>
 80011c2:	4b27      	ldr	r3, [pc, #156]	; (8001260 <LCD_IO_WriteCmd8+0x14c>)
 80011c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c8:	619a      	str	r2, [r3, #24]
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <LCD_IO_WriteCmd8+0x140>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	f003 0320 	and.w	r3, r3, #32
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d004      	beq.n	80011e0 <LCD_IO_WriteCmd8+0xcc>
 80011d6:	4b22      	ldr	r3, [pc, #136]	; (8001260 <LCD_IO_WriteCmd8+0x14c>)
 80011d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011dc:	619a      	str	r2, [r3, #24]
 80011de:	e003      	b.n	80011e8 <LCD_IO_WriteCmd8+0xd4>
 80011e0:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <LCD_IO_WriteCmd8+0x14c>)
 80011e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011e6:	619a      	str	r2, [r3, #24]
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <LCD_IO_WriteCmd8+0x140>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d004      	beq.n	80011fe <LCD_IO_WriteCmd8+0xea>
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <LCD_IO_WriteCmd8+0x150>)
 80011f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011fa:	619a      	str	r2, [r3, #24]
 80011fc:	e003      	b.n	8001206 <LCD_IO_WriteCmd8+0xf2>
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <LCD_IO_WriteCmd8+0x150>)
 8001200:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001204:	619a      	str	r2, [r3, #24]
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <LCD_IO_WriteCmd8+0x140>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b25b      	sxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	da04      	bge.n	800121a <LCD_IO_WriteCmd8+0x106>
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <LCD_IO_WriteCmd8+0x144>)
 8001212:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001216:	619a      	str	r2, [r3, #24]
 8001218:	e003      	b.n	8001222 <LCD_IO_WriteCmd8+0x10e>
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <LCD_IO_WriteCmd8+0x144>)
 800121c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001220:	619a      	str	r2, [r3, #24]
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <LCD_IO_WriteCmd8+0x13c>)
 8001224:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001228:	619a      	str	r2, [r3, #24]
 800122a:	2008      	movs	r0, #8
 800122c:	f7ff fe60 	bl	8000ef0 <LCD_IO_Delay>
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <LCD_IO_WriteCmd8+0x13c>)
 8001232:	2201      	movs	r2, #1
 8001234:	619a      	str	r2, [r3, #24]
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <LCD_IO_WriteCmd8+0x13c>)
 8001238:	2208      	movs	r2, #8
 800123a:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <LCD_IO_WriteCmd8+0x138>)
 800123e:	2202      	movs	r2, #2
 8001240:	619a      	str	r2, [r3, #24]
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	58020400 	.word	0x58020400
 8001250:	58020800 	.word	0x58020800
 8001254:	240000ac 	.word	0x240000ac
 8001258:	58021800 	.word	0x58021800
 800125c:	58020c00 	.word	0x58020c00
 8001260:	58021000 	.word	0x58021000
 8001264:	58020000 	.word	0x58020000

08001268 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8001272:	4b47      	ldr	r3, [pc, #284]	; (8001390 <LCD_IO_WriteData8+0x128>)
 8001274:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001278:	619a      	str	r2, [r3, #24]
  LCD_DATA8_WRITE(Data);
 800127a:	4a46      	ldr	r2, [pc, #280]	; (8001394 <LCD_IO_WriteData8+0x12c>)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	7013      	strb	r3, [r2, #0]
 8001280:	4b44      	ldr	r3, [pc, #272]	; (8001394 <LCD_IO_WriteData8+0x12c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	2b00      	cmp	r3, #0
 800128a:	d004      	beq.n	8001296 <LCD_IO_WriteData8+0x2e>
 800128c:	4b42      	ldr	r3, [pc, #264]	; (8001398 <LCD_IO_WriteData8+0x130>)
 800128e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001292:	619a      	str	r2, [r3, #24]
 8001294:	e003      	b.n	800129e <LCD_IO_WriteData8+0x36>
 8001296:	4b40      	ldr	r3, [pc, #256]	; (8001398 <LCD_IO_WriteData8+0x130>)
 8001298:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800129c:	619a      	str	r2, [r3, #24]
 800129e:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <LCD_IO_WriteData8+0x12c>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d004      	beq.n	80012b4 <LCD_IO_WriteData8+0x4c>
 80012aa:	4b3c      	ldr	r3, [pc, #240]	; (800139c <LCD_IO_WriteData8+0x134>)
 80012ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012b0:	619a      	str	r2, [r3, #24]
 80012b2:	e003      	b.n	80012bc <LCD_IO_WriteData8+0x54>
 80012b4:	4b39      	ldr	r3, [pc, #228]	; (800139c <LCD_IO_WriteData8+0x134>)
 80012b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80012ba:	619a      	str	r2, [r3, #24]
 80012bc:	4b35      	ldr	r3, [pc, #212]	; (8001394 <LCD_IO_WriteData8+0x12c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d004      	beq.n	80012d2 <LCD_IO_WriteData8+0x6a>
 80012c8:	4b33      	ldr	r3, [pc, #204]	; (8001398 <LCD_IO_WriteData8+0x130>)
 80012ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ce:	619a      	str	r2, [r3, #24]
 80012d0:	e003      	b.n	80012da <LCD_IO_WriteData8+0x72>
 80012d2:	4b31      	ldr	r3, [pc, #196]	; (8001398 <LCD_IO_WriteData8+0x130>)
 80012d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012d8:	619a      	str	r2, [r3, #24]
 80012da:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <LCD_IO_WriteData8+0x12c>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d004      	beq.n	80012f0 <LCD_IO_WriteData8+0x88>
 80012e6:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <LCD_IO_WriteData8+0x138>)
 80012e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ec:	619a      	str	r2, [r3, #24]
 80012ee:	e003      	b.n	80012f8 <LCD_IO_WriteData8+0x90>
 80012f0:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <LCD_IO_WriteData8+0x138>)
 80012f2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80012f6:	619a      	str	r2, [r3, #24]
 80012f8:	4b26      	ldr	r3, [pc, #152]	; (8001394 <LCD_IO_WriteData8+0x12c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	f003 0310 	and.w	r3, r3, #16
 8001300:	2b00      	cmp	r3, #0
 8001302:	d004      	beq.n	800130e <LCD_IO_WriteData8+0xa6>
 8001304:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <LCD_IO_WriteData8+0x138>)
 8001306:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130a:	619a      	str	r2, [r3, #24]
 800130c:	e003      	b.n	8001316 <LCD_IO_WriteData8+0xae>
 800130e:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <LCD_IO_WriteData8+0x138>)
 8001310:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001314:	619a      	str	r2, [r3, #24]
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <LCD_IO_WriteData8+0x12c>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	f003 0320 	and.w	r3, r3, #32
 800131e:	2b00      	cmp	r3, #0
 8001320:	d004      	beq.n	800132c <LCD_IO_WriteData8+0xc4>
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <LCD_IO_WriteData8+0x138>)
 8001324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001328:	619a      	str	r2, [r3, #24]
 800132a:	e003      	b.n	8001334 <LCD_IO_WriteData8+0xcc>
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <LCD_IO_WriteData8+0x138>)
 800132e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001332:	619a      	str	r2, [r3, #24]
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <LCD_IO_WriteData8+0x12c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800133c:	2b00      	cmp	r3, #0
 800133e:	d004      	beq.n	800134a <LCD_IO_WriteData8+0xe2>
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <LCD_IO_WriteData8+0x13c>)
 8001342:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001346:	619a      	str	r2, [r3, #24]
 8001348:	e003      	b.n	8001352 <LCD_IO_WriteData8+0xea>
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <LCD_IO_WriteData8+0x13c>)
 800134c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001350:	619a      	str	r2, [r3, #24]
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <LCD_IO_WriteData8+0x12c>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b25b      	sxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	da04      	bge.n	8001366 <LCD_IO_WriteData8+0xfe>
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <LCD_IO_WriteData8+0x130>)
 800135e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001362:	619a      	str	r2, [r3, #24]
 8001364:	e003      	b.n	800136e <LCD_IO_WriteData8+0x106>
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <LCD_IO_WriteData8+0x130>)
 8001368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800136c:	619a      	str	r2, [r3, #24]
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <LCD_IO_WriteData8+0x140>)
 8001370:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001374:	619a      	str	r2, [r3, #24]
 8001376:	2008      	movs	r0, #8
 8001378:	f7ff fdba 	bl	8000ef0 <LCD_IO_Delay>
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <LCD_IO_WriteData8+0x140>)
 800137e:	2201      	movs	r2, #1
 8001380:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 8001382:	4b03      	ldr	r3, [pc, #12]	; (8001390 <LCD_IO_WriteData8+0x128>)
 8001384:	2202      	movs	r2, #2
 8001386:	619a      	str	r2, [r3, #24]
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	58020400 	.word	0x58020400
 8001394:	240000ac 	.word	0x240000ac
 8001398:	58021800 	.word	0x58021800
 800139c:	58020c00 	.word	0x58020c00
 80013a0:	58021000 	.word	0x58021000
 80013a4:	58020000 	.word	0x58020000
 80013a8:	58020800 	.word	0x58020800

080013ac <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	80fb      	strh	r3, [r7, #6]
  LCD_CS_ON;
 80013b6:	4b8b      	ldr	r3, [pc, #556]	; (80015e4 <LCD_IO_WriteData16+0x238>)
 80013b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013bc:	619a      	str	r2, [r3, #24]
  LCD_DATA16_WRITE(Data);
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4b88      	ldr	r3, [pc, #544]	; (80015e8 <LCD_IO_WriteData16+0x23c>)
 80013c8:	701a      	strb	r2, [r3, #0]
 80013ca:	4b87      	ldr	r3, [pc, #540]	; (80015e8 <LCD_IO_WriteData16+0x23c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d004      	beq.n	80013e0 <LCD_IO_WriteData16+0x34>
 80013d6:	4b85      	ldr	r3, [pc, #532]	; (80015ec <LCD_IO_WriteData16+0x240>)
 80013d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013dc:	619a      	str	r2, [r3, #24]
 80013de:	e003      	b.n	80013e8 <LCD_IO_WriteData16+0x3c>
 80013e0:	4b82      	ldr	r3, [pc, #520]	; (80015ec <LCD_IO_WriteData16+0x240>)
 80013e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013e6:	619a      	str	r2, [r3, #24]
 80013e8:	4b7f      	ldr	r3, [pc, #508]	; (80015e8 <LCD_IO_WriteData16+0x23c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d004      	beq.n	80013fe <LCD_IO_WriteData16+0x52>
 80013f4:	4b7e      	ldr	r3, [pc, #504]	; (80015f0 <LCD_IO_WriteData16+0x244>)
 80013f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013fa:	619a      	str	r2, [r3, #24]
 80013fc:	e003      	b.n	8001406 <LCD_IO_WriteData16+0x5a>
 80013fe:	4b7c      	ldr	r3, [pc, #496]	; (80015f0 <LCD_IO_WriteData16+0x244>)
 8001400:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001404:	619a      	str	r2, [r3, #24]
 8001406:	4b78      	ldr	r3, [pc, #480]	; (80015e8 <LCD_IO_WriteData16+0x23c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	2b00      	cmp	r3, #0
 8001410:	d004      	beq.n	800141c <LCD_IO_WriteData16+0x70>
 8001412:	4b76      	ldr	r3, [pc, #472]	; (80015ec <LCD_IO_WriteData16+0x240>)
 8001414:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001418:	619a      	str	r2, [r3, #24]
 800141a:	e003      	b.n	8001424 <LCD_IO_WriteData16+0x78>
 800141c:	4b73      	ldr	r3, [pc, #460]	; (80015ec <LCD_IO_WriteData16+0x240>)
 800141e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001422:	619a      	str	r2, [r3, #24]
 8001424:	4b70      	ldr	r3, [pc, #448]	; (80015e8 <LCD_IO_WriteData16+0x23c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	f003 0308 	and.w	r3, r3, #8
 800142c:	2b00      	cmp	r3, #0
 800142e:	d004      	beq.n	800143a <LCD_IO_WriteData16+0x8e>
 8001430:	4b70      	ldr	r3, [pc, #448]	; (80015f4 <LCD_IO_WriteData16+0x248>)
 8001432:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001436:	619a      	str	r2, [r3, #24]
 8001438:	e003      	b.n	8001442 <LCD_IO_WriteData16+0x96>
 800143a:	4b6e      	ldr	r3, [pc, #440]	; (80015f4 <LCD_IO_WriteData16+0x248>)
 800143c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001440:	619a      	str	r2, [r3, #24]
 8001442:	4b69      	ldr	r3, [pc, #420]	; (80015e8 <LCD_IO_WriteData16+0x23c>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	2b00      	cmp	r3, #0
 800144c:	d004      	beq.n	8001458 <LCD_IO_WriteData16+0xac>
 800144e:	4b69      	ldr	r3, [pc, #420]	; (80015f4 <LCD_IO_WriteData16+0x248>)
 8001450:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001454:	619a      	str	r2, [r3, #24]
 8001456:	e003      	b.n	8001460 <LCD_IO_WriteData16+0xb4>
 8001458:	4b66      	ldr	r3, [pc, #408]	; (80015f4 <LCD_IO_WriteData16+0x248>)
 800145a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800145e:	619a      	str	r2, [r3, #24]
 8001460:	4b61      	ldr	r3, [pc, #388]	; (80015e8 <LCD_IO_WriteData16+0x23c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	f003 0320 	and.w	r3, r3, #32
 8001468:	2b00      	cmp	r3, #0
 800146a:	d004      	beq.n	8001476 <LCD_IO_WriteData16+0xca>
 800146c:	4b61      	ldr	r3, [pc, #388]	; (80015f4 <LCD_IO_WriteData16+0x248>)
 800146e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001472:	619a      	str	r2, [r3, #24]
 8001474:	e003      	b.n	800147e <LCD_IO_WriteData16+0xd2>
 8001476:	4b5f      	ldr	r3, [pc, #380]	; (80015f4 <LCD_IO_WriteData16+0x248>)
 8001478:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800147c:	619a      	str	r2, [r3, #24]
 800147e:	4b5a      	ldr	r3, [pc, #360]	; (80015e8 <LCD_IO_WriteData16+0x23c>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001486:	2b00      	cmp	r3, #0
 8001488:	d004      	beq.n	8001494 <LCD_IO_WriteData16+0xe8>
 800148a:	4b5b      	ldr	r3, [pc, #364]	; (80015f8 <LCD_IO_WriteData16+0x24c>)
 800148c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001490:	619a      	str	r2, [r3, #24]
 8001492:	e003      	b.n	800149c <LCD_IO_WriteData16+0xf0>
 8001494:	4b58      	ldr	r3, [pc, #352]	; (80015f8 <LCD_IO_WriteData16+0x24c>)
 8001496:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800149a:	619a      	str	r2, [r3, #24]
 800149c:	4b52      	ldr	r3, [pc, #328]	; (80015e8 <LCD_IO_WriteData16+0x23c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	da04      	bge.n	80014b0 <LCD_IO_WriteData16+0x104>
 80014a6:	4b51      	ldr	r3, [pc, #324]	; (80015ec <LCD_IO_WriteData16+0x240>)
 80014a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ac:	619a      	str	r2, [r3, #24]
 80014ae:	e003      	b.n	80014b8 <LCD_IO_WriteData16+0x10c>
 80014b0:	4b4e      	ldr	r3, [pc, #312]	; (80015ec <LCD_IO_WriteData16+0x240>)
 80014b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014b6:	619a      	str	r2, [r3, #24]
 80014b8:	4b50      	ldr	r3, [pc, #320]	; (80015fc <LCD_IO_WriteData16+0x250>)
 80014ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014be:	619a      	str	r2, [r3, #24]
 80014c0:	2008      	movs	r0, #8
 80014c2:	f7ff fd15 	bl	8000ef0 <LCD_IO_Delay>
 80014c6:	4b4d      	ldr	r3, [pc, #308]	; (80015fc <LCD_IO_WriteData16+0x250>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	619a      	str	r2, [r3, #24]
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	4b45      	ldr	r3, [pc, #276]	; (80015e8 <LCD_IO_WriteData16+0x23c>)
 80014d2:	701a      	strb	r2, [r3, #0]
 80014d4:	4b44      	ldr	r3, [pc, #272]	; (80015e8 <LCD_IO_WriteData16+0x23c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d004      	beq.n	80014ea <LCD_IO_WriteData16+0x13e>
 80014e0:	4b42      	ldr	r3, [pc, #264]	; (80015ec <LCD_IO_WriteData16+0x240>)
 80014e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e6:	619a      	str	r2, [r3, #24]
 80014e8:	e003      	b.n	80014f2 <LCD_IO_WriteData16+0x146>
 80014ea:	4b40      	ldr	r3, [pc, #256]	; (80015ec <LCD_IO_WriteData16+0x240>)
 80014ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014f0:	619a      	str	r2, [r3, #24]
 80014f2:	4b3d      	ldr	r3, [pc, #244]	; (80015e8 <LCD_IO_WriteData16+0x23c>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d004      	beq.n	8001508 <LCD_IO_WriteData16+0x15c>
 80014fe:	4b3c      	ldr	r3, [pc, #240]	; (80015f0 <LCD_IO_WriteData16+0x244>)
 8001500:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001504:	619a      	str	r2, [r3, #24]
 8001506:	e003      	b.n	8001510 <LCD_IO_WriteData16+0x164>
 8001508:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <LCD_IO_WriteData16+0x244>)
 800150a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800150e:	619a      	str	r2, [r3, #24]
 8001510:	4b35      	ldr	r3, [pc, #212]	; (80015e8 <LCD_IO_WriteData16+0x23c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d004      	beq.n	8001526 <LCD_IO_WriteData16+0x17a>
 800151c:	4b33      	ldr	r3, [pc, #204]	; (80015ec <LCD_IO_WriteData16+0x240>)
 800151e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001522:	619a      	str	r2, [r3, #24]
 8001524:	e003      	b.n	800152e <LCD_IO_WriteData16+0x182>
 8001526:	4b31      	ldr	r3, [pc, #196]	; (80015ec <LCD_IO_WriteData16+0x240>)
 8001528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800152c:	619a      	str	r2, [r3, #24]
 800152e:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <LCD_IO_WriteData16+0x23c>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	2b00      	cmp	r3, #0
 8001538:	d004      	beq.n	8001544 <LCD_IO_WriteData16+0x198>
 800153a:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <LCD_IO_WriteData16+0x248>)
 800153c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001540:	619a      	str	r2, [r3, #24]
 8001542:	e003      	b.n	800154c <LCD_IO_WriteData16+0x1a0>
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <LCD_IO_WriteData16+0x248>)
 8001546:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800154a:	619a      	str	r2, [r3, #24]
 800154c:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <LCD_IO_WriteData16+0x23c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	2b00      	cmp	r3, #0
 8001556:	d004      	beq.n	8001562 <LCD_IO_WriteData16+0x1b6>
 8001558:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <LCD_IO_WriteData16+0x248>)
 800155a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800155e:	619a      	str	r2, [r3, #24]
 8001560:	e003      	b.n	800156a <LCD_IO_WriteData16+0x1be>
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <LCD_IO_WriteData16+0x248>)
 8001564:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001568:	619a      	str	r2, [r3, #24]
 800156a:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <LCD_IO_WriteData16+0x23c>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	f003 0320 	and.w	r3, r3, #32
 8001572:	2b00      	cmp	r3, #0
 8001574:	d004      	beq.n	8001580 <LCD_IO_WriteData16+0x1d4>
 8001576:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <LCD_IO_WriteData16+0x248>)
 8001578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800157c:	619a      	str	r2, [r3, #24]
 800157e:	e003      	b.n	8001588 <LCD_IO_WriteData16+0x1dc>
 8001580:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <LCD_IO_WriteData16+0x248>)
 8001582:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001586:	619a      	str	r2, [r3, #24]
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <LCD_IO_WriteData16+0x23c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001590:	2b00      	cmp	r3, #0
 8001592:	d004      	beq.n	800159e <LCD_IO_WriteData16+0x1f2>
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <LCD_IO_WriteData16+0x24c>)
 8001596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159a:	619a      	str	r2, [r3, #24]
 800159c:	e003      	b.n	80015a6 <LCD_IO_WriteData16+0x1fa>
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <LCD_IO_WriteData16+0x24c>)
 80015a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015a4:	619a      	str	r2, [r3, #24]
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <LCD_IO_WriteData16+0x23c>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b25b      	sxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	da04      	bge.n	80015ba <LCD_IO_WriteData16+0x20e>
 80015b0:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <LCD_IO_WriteData16+0x240>)
 80015b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015b6:	619a      	str	r2, [r3, #24]
 80015b8:	e003      	b.n	80015c2 <LCD_IO_WriteData16+0x216>
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <LCD_IO_WriteData16+0x240>)
 80015bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015c0:	619a      	str	r2, [r3, #24]
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <LCD_IO_WriteData16+0x250>)
 80015c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015c8:	619a      	str	r2, [r3, #24]
 80015ca:	2008      	movs	r0, #8
 80015cc:	f7ff fc90 	bl	8000ef0 <LCD_IO_Delay>
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <LCD_IO_WriteData16+0x250>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 80015d6:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <LCD_IO_WriteData16+0x238>)
 80015d8:	2202      	movs	r2, #2
 80015da:	619a      	str	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	58020400 	.word	0x58020400
 80015e8:	240000ac 	.word	0x240000ac
 80015ec:	58021800 	.word	0x58021800
 80015f0:	58020c00 	.word	0x58020c00
 80015f4:	58021000 	.word	0x58021000
 80015f8:	58020000 	.word	0x58020000
 80015fc:	58020800 	.word	0x58020800

08001600 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	603a      	str	r2, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
 800160c:	460b      	mov	r3, r1
 800160e:	80bb      	strh	r3, [r7, #4]
  LCD_CS_ON;
 8001610:	4b9a      	ldr	r3, [pc, #616]	; (800187c <LCD_IO_WriteCmd8DataFill16+0x27c>)
 8001612:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001616:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8001618:	4b99      	ldr	r3, [pc, #612]	; (8001880 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800161a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800161e:	619a      	str	r2, [r3, #24]
 8001620:	4a98      	ldr	r2, [pc, #608]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	7013      	strb	r3, [r2, #0]
 8001626:	4b97      	ldr	r3, [pc, #604]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d004      	beq.n	800163c <LCD_IO_WriteCmd8DataFill16+0x3c>
 8001632:	4b95      	ldr	r3, [pc, #596]	; (8001888 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001638:	619a      	str	r2, [r3, #24]
 800163a:	e003      	b.n	8001644 <LCD_IO_WriteCmd8DataFill16+0x44>
 800163c:	4b92      	ldr	r3, [pc, #584]	; (8001888 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800163e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001642:	619a      	str	r2, [r3, #24]
 8001644:	4b8f      	ldr	r3, [pc, #572]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d004      	beq.n	800165a <LCD_IO_WriteCmd8DataFill16+0x5a>
 8001650:	4b8e      	ldr	r3, [pc, #568]	; (800188c <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001652:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001656:	619a      	str	r2, [r3, #24]
 8001658:	e003      	b.n	8001662 <LCD_IO_WriteCmd8DataFill16+0x62>
 800165a:	4b8c      	ldr	r3, [pc, #560]	; (800188c <LCD_IO_WriteCmd8DataFill16+0x28c>)
 800165c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001660:	619a      	str	r2, [r3, #24]
 8001662:	4b88      	ldr	r3, [pc, #544]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	2b00      	cmp	r3, #0
 800166c:	d004      	beq.n	8001678 <LCD_IO_WriteCmd8DataFill16+0x78>
 800166e:	4b86      	ldr	r3, [pc, #536]	; (8001888 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001670:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001674:	619a      	str	r2, [r3, #24]
 8001676:	e003      	b.n	8001680 <LCD_IO_WriteCmd8DataFill16+0x80>
 8001678:	4b83      	ldr	r3, [pc, #524]	; (8001888 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800167a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800167e:	619a      	str	r2, [r3, #24]
 8001680:	4b80      	ldr	r3, [pc, #512]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d004      	beq.n	8001696 <LCD_IO_WriteCmd8DataFill16+0x96>
 800168c:	4b80      	ldr	r3, [pc, #512]	; (8001890 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800168e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001692:	619a      	str	r2, [r3, #24]
 8001694:	e003      	b.n	800169e <LCD_IO_WriteCmd8DataFill16+0x9e>
 8001696:	4b7e      	ldr	r3, [pc, #504]	; (8001890 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001698:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800169c:	619a      	str	r2, [r3, #24]
 800169e:	4b79      	ldr	r3, [pc, #484]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d004      	beq.n	80016b4 <LCD_IO_WriteCmd8DataFill16+0xb4>
 80016aa:	4b79      	ldr	r3, [pc, #484]	; (8001890 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80016ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016b0:	619a      	str	r2, [r3, #24]
 80016b2:	e003      	b.n	80016bc <LCD_IO_WriteCmd8DataFill16+0xbc>
 80016b4:	4b76      	ldr	r3, [pc, #472]	; (8001890 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80016b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ba:	619a      	str	r2, [r3, #24]
 80016bc:	4b71      	ldr	r3, [pc, #452]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d004      	beq.n	80016d2 <LCD_IO_WriteCmd8DataFill16+0xd2>
 80016c8:	4b71      	ldr	r3, [pc, #452]	; (8001890 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80016ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016ce:	619a      	str	r2, [r3, #24]
 80016d0:	e003      	b.n	80016da <LCD_IO_WriteCmd8DataFill16+0xda>
 80016d2:	4b6f      	ldr	r3, [pc, #444]	; (8001890 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80016d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016d8:	619a      	str	r2, [r3, #24]
 80016da:	4b6a      	ldr	r3, [pc, #424]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d004      	beq.n	80016f0 <LCD_IO_WriteCmd8DataFill16+0xf0>
 80016e6:	4b6b      	ldr	r3, [pc, #428]	; (8001894 <LCD_IO_WriteCmd8DataFill16+0x294>)
 80016e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ec:	619a      	str	r2, [r3, #24]
 80016ee:	e003      	b.n	80016f8 <LCD_IO_WriteCmd8DataFill16+0xf8>
 80016f0:	4b68      	ldr	r3, [pc, #416]	; (8001894 <LCD_IO_WriteCmd8DataFill16+0x294>)
 80016f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016f6:	619a      	str	r2, [r3, #24]
 80016f8:	4b62      	ldr	r3, [pc, #392]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	da04      	bge.n	800170c <LCD_IO_WriteCmd8DataFill16+0x10c>
 8001702:	4b61      	ldr	r3, [pc, #388]	; (8001888 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001704:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001708:	619a      	str	r2, [r3, #24]
 800170a:	e003      	b.n	8001714 <LCD_IO_WriteCmd8DataFill16+0x114>
 800170c:	4b5e      	ldr	r3, [pc, #376]	; (8001888 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800170e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001712:	619a      	str	r2, [r3, #24]
 8001714:	4b5a      	ldr	r3, [pc, #360]	; (8001880 <LCD_IO_WriteCmd8DataFill16+0x280>)
 8001716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800171a:	619a      	str	r2, [r3, #24]
 800171c:	2008      	movs	r0, #8
 800171e:	f7ff fbe7 	bl	8000ef0 <LCD_IO_Delay>
 8001722:	4b57      	ldr	r3, [pc, #348]	; (8001880 <LCD_IO_WriteCmd8DataFill16+0x280>)
 8001724:	2201      	movs	r2, #1
 8001726:	619a      	str	r2, [r3, #24]
 8001728:	4b55      	ldr	r3, [pc, #340]	; (8001880 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800172a:	2208      	movs	r2, #8
 800172c:	619a      	str	r2, [r3, #24]
  while(Size--)
 800172e:	e11a      	b.n	8001966 <LCD_IO_WriteCmd8DataFill16+0x366>
  {
    LCD_DATA16_WRITE(Data);
 8001730:	88bb      	ldrh	r3, [r7, #4]
 8001732:	0a1b      	lsrs	r3, r3, #8
 8001734:	b29b      	uxth	r3, r3
 8001736:	b2da      	uxtb	r2, r3
 8001738:	4b52      	ldr	r3, [pc, #328]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	4b51      	ldr	r3, [pc, #324]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <LCD_IO_WriteCmd8DataFill16+0x152>
 8001748:	4b4f      	ldr	r3, [pc, #316]	; (8001888 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800174a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800174e:	619a      	str	r2, [r3, #24]
 8001750:	e003      	b.n	800175a <LCD_IO_WriteCmd8DataFill16+0x15a>
 8001752:	4b4d      	ldr	r3, [pc, #308]	; (8001888 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001754:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001758:	619a      	str	r2, [r3, #24]
 800175a:	4b4a      	ldr	r3, [pc, #296]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d004      	beq.n	8001770 <LCD_IO_WriteCmd8DataFill16+0x170>
 8001766:	4b49      	ldr	r3, [pc, #292]	; (800188c <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001768:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800176c:	619a      	str	r2, [r3, #24]
 800176e:	e003      	b.n	8001778 <LCD_IO_WriteCmd8DataFill16+0x178>
 8001770:	4b46      	ldr	r3, [pc, #280]	; (800188c <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001772:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001776:	619a      	str	r2, [r3, #24]
 8001778:	4b42      	ldr	r3, [pc, #264]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d004      	beq.n	800178e <LCD_IO_WriteCmd8DataFill16+0x18e>
 8001784:	4b40      	ldr	r3, [pc, #256]	; (8001888 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001786:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800178a:	619a      	str	r2, [r3, #24]
 800178c:	e003      	b.n	8001796 <LCD_IO_WriteCmd8DataFill16+0x196>
 800178e:	4b3e      	ldr	r3, [pc, #248]	; (8001888 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001790:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001794:	619a      	str	r2, [r3, #24]
 8001796:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d004      	beq.n	80017ac <LCD_IO_WriteCmd8DataFill16+0x1ac>
 80017a2:	4b3b      	ldr	r3, [pc, #236]	; (8001890 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80017a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017a8:	619a      	str	r2, [r3, #24]
 80017aa:	e003      	b.n	80017b4 <LCD_IO_WriteCmd8DataFill16+0x1b4>
 80017ac:	4b38      	ldr	r3, [pc, #224]	; (8001890 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80017ae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80017b2:	619a      	str	r2, [r3, #24]
 80017b4:	4b33      	ldr	r3, [pc, #204]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d004      	beq.n	80017ca <LCD_IO_WriteCmd8DataFill16+0x1ca>
 80017c0:	4b33      	ldr	r3, [pc, #204]	; (8001890 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80017c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017c6:	619a      	str	r2, [r3, #24]
 80017c8:	e003      	b.n	80017d2 <LCD_IO_WriteCmd8DataFill16+0x1d2>
 80017ca:	4b31      	ldr	r3, [pc, #196]	; (8001890 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80017cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d0:	619a      	str	r2, [r3, #24]
 80017d2:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	f003 0320 	and.w	r3, r3, #32
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d004      	beq.n	80017e8 <LCD_IO_WriteCmd8DataFill16+0x1e8>
 80017de:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80017e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017e4:	619a      	str	r2, [r3, #24]
 80017e6:	e003      	b.n	80017f0 <LCD_IO_WriteCmd8DataFill16+0x1f0>
 80017e8:	4b29      	ldr	r3, [pc, #164]	; (8001890 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80017ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ee:	619a      	str	r2, [r3, #24]
 80017f0:	4b24      	ldr	r3, [pc, #144]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d004      	beq.n	8001806 <LCD_IO_WriteCmd8DataFill16+0x206>
 80017fc:	4b25      	ldr	r3, [pc, #148]	; (8001894 <LCD_IO_WriteCmd8DataFill16+0x294>)
 80017fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001802:	619a      	str	r2, [r3, #24]
 8001804:	e003      	b.n	800180e <LCD_IO_WriteCmd8DataFill16+0x20e>
 8001806:	4b23      	ldr	r3, [pc, #140]	; (8001894 <LCD_IO_WriteCmd8DataFill16+0x294>)
 8001808:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800180c:	619a      	str	r2, [r3, #24]
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b25b      	sxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	da04      	bge.n	8001822 <LCD_IO_WriteCmd8DataFill16+0x222>
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800181a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800181e:	619a      	str	r2, [r3, #24]
 8001820:	e003      	b.n	800182a <LCD_IO_WriteCmd8DataFill16+0x22a>
 8001822:	4b19      	ldr	r3, [pc, #100]	; (8001888 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001828:	619a      	str	r2, [r3, #24]
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800182c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001830:	619a      	str	r2, [r3, #24]
 8001832:	2008      	movs	r0, #8
 8001834:	f7ff fb5c 	bl	8000ef0 <LCD_IO_Delay>
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800183a:	2201      	movs	r2, #1
 800183c:	619a      	str	r2, [r3, #24]
 800183e:	88bb      	ldrh	r3, [r7, #4]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d004      	beq.n	800185c <LCD_IO_WriteCmd8DataFill16+0x25c>
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001858:	619a      	str	r2, [r3, #24]
 800185a:	e003      	b.n	8001864 <LCD_IO_WriteCmd8DataFill16+0x264>
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800185e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001862:	619a      	str	r2, [r3, #24]
 8001864:	4b07      	ldr	r3, [pc, #28]	; (8001884 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d013      	beq.n	8001898 <LCD_IO_WriteCmd8DataFill16+0x298>
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001872:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001876:	619a      	str	r2, [r3, #24]
 8001878:	e012      	b.n	80018a0 <LCD_IO_WriteCmd8DataFill16+0x2a0>
 800187a:	bf00      	nop
 800187c:	58020400 	.word	0x58020400
 8001880:	58020800 	.word	0x58020800
 8001884:	240000ac 	.word	0x240000ac
 8001888:	58021800 	.word	0x58021800
 800188c:	58020c00 	.word	0x58020c00
 8001890:	58021000 	.word	0x58021000
 8001894:	58020000 	.word	0x58020000
 8001898:	4b39      	ldr	r3, [pc, #228]	; (8001980 <LCD_IO_WriteCmd8DataFill16+0x380>)
 800189a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800189e:	619a      	str	r2, [r3, #24]
 80018a0:	4b38      	ldr	r3, [pc, #224]	; (8001984 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <LCD_IO_WriteCmd8DataFill16+0x2b6>
 80018ac:	4b36      	ldr	r3, [pc, #216]	; (8001988 <LCD_IO_WriteCmd8DataFill16+0x388>)
 80018ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018b2:	619a      	str	r2, [r3, #24]
 80018b4:	e003      	b.n	80018be <LCD_IO_WriteCmd8DataFill16+0x2be>
 80018b6:	4b34      	ldr	r3, [pc, #208]	; (8001988 <LCD_IO_WriteCmd8DataFill16+0x388>)
 80018b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018bc:	619a      	str	r2, [r3, #24]
 80018be:	4b31      	ldr	r3, [pc, #196]	; (8001984 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d004      	beq.n	80018d4 <LCD_IO_WriteCmd8DataFill16+0x2d4>
 80018ca:	4b30      	ldr	r3, [pc, #192]	; (800198c <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80018cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018d0:	619a      	str	r2, [r3, #24]
 80018d2:	e003      	b.n	80018dc <LCD_IO_WriteCmd8DataFill16+0x2dc>
 80018d4:	4b2d      	ldr	r3, [pc, #180]	; (800198c <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80018d6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80018da:	619a      	str	r2, [r3, #24]
 80018dc:	4b29      	ldr	r3, [pc, #164]	; (8001984 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	f003 0310 	and.w	r3, r3, #16
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d004      	beq.n	80018f2 <LCD_IO_WriteCmd8DataFill16+0x2f2>
 80018e8:	4b28      	ldr	r3, [pc, #160]	; (800198c <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80018ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ee:	619a      	str	r2, [r3, #24]
 80018f0:	e003      	b.n	80018fa <LCD_IO_WriteCmd8DataFill16+0x2fa>
 80018f2:	4b26      	ldr	r3, [pc, #152]	; (800198c <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80018f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018f8:	619a      	str	r2, [r3, #24]
 80018fa:	4b22      	ldr	r3, [pc, #136]	; (8001984 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	f003 0320 	and.w	r3, r3, #32
 8001902:	2b00      	cmp	r3, #0
 8001904:	d004      	beq.n	8001910 <LCD_IO_WriteCmd8DataFill16+0x310>
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800190c:	619a      	str	r2, [r3, #24]
 800190e:	e003      	b.n	8001918 <LCD_IO_WriteCmd8DataFill16+0x318>
 8001910:	4b1e      	ldr	r3, [pc, #120]	; (800198c <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001912:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001916:	619a      	str	r2, [r3, #24]
 8001918:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <LCD_IO_WriteCmd8DataFill16+0x384>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001920:	2b00      	cmp	r3, #0
 8001922:	d004      	beq.n	800192e <LCD_IO_WriteCmd8DataFill16+0x32e>
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <LCD_IO_WriteCmd8DataFill16+0x390>)
 8001926:	f44f 7280 	mov.w	r2, #256	; 0x100
 800192a:	619a      	str	r2, [r3, #24]
 800192c:	e003      	b.n	8001936 <LCD_IO_WriteCmd8DataFill16+0x336>
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <LCD_IO_WriteCmd8DataFill16+0x390>)
 8001930:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001934:	619a      	str	r2, [r3, #24]
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <LCD_IO_WriteCmd8DataFill16+0x384>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b25b      	sxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	da04      	bge.n	800194a <LCD_IO_WriteCmd8DataFill16+0x34a>
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001942:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001946:	619a      	str	r2, [r3, #24]
 8001948:	e003      	b.n	8001952 <LCD_IO_WriteCmd8DataFill16+0x352>
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <LCD_IO_WriteCmd8DataFill16+0x388>)
 800194c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001950:	619a      	str	r2, [r3, #24]
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <LCD_IO_WriteCmd8DataFill16+0x394>)
 8001954:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001958:	619a      	str	r2, [r3, #24]
 800195a:	2008      	movs	r0, #8
 800195c:	f7ff fac8 	bl	8000ef0 <LCD_IO_Delay>
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <LCD_IO_WriteCmd8DataFill16+0x394>)
 8001962:	2201      	movs	r2, #1
 8001964:	619a      	str	r2, [r3, #24]
  while(Size--)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	1e5a      	subs	r2, r3, #1
 800196a:	603a      	str	r2, [r7, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	f47f aedf 	bne.w	8001730 <LCD_IO_WriteCmd8DataFill16+0x130>
  }
  LCD_CS_OFF;
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <LCD_IO_WriteCmd8DataFill16+0x398>)
 8001974:	2202      	movs	r2, #2
 8001976:	619a      	str	r2, [r3, #24]
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	58020c00 	.word	0x58020c00
 8001984:	240000ac 	.word	0x240000ac
 8001988:	58021800 	.word	0x58021800
 800198c:	58021000 	.word	0x58021000
 8001990:	58020000 	.word	0x58020000
 8001994:	58020800 	.word	0x58020800
 8001998:	58020400 	.word	0x58020400

0800199c <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 80019aa:	4b92      	ldr	r3, [pc, #584]	; (8001bf4 <LCD_IO_WriteCmd8MultipleData8+0x258>)
 80019ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019b0:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 80019b4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019b8:	619a      	str	r2, [r3, #24]
 80019ba:	4a90      	ldr	r2, [pc, #576]	; (8001bfc <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	7013      	strb	r3, [r2, #0]
 80019c0:	4b8e      	ldr	r3, [pc, #568]	; (8001bfc <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d004      	beq.n	80019d6 <LCD_IO_WriteCmd8MultipleData8+0x3a>
 80019cc:	4b8c      	ldr	r3, [pc, #560]	; (8001c00 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80019ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d2:	619a      	str	r2, [r3, #24]
 80019d4:	e003      	b.n	80019de <LCD_IO_WriteCmd8MultipleData8+0x42>
 80019d6:	4b8a      	ldr	r3, [pc, #552]	; (8001c00 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80019d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019dc:	619a      	str	r2, [r3, #24]
 80019de:	4b87      	ldr	r3, [pc, #540]	; (8001bfc <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d004      	beq.n	80019f4 <LCD_IO_WriteCmd8MultipleData8+0x58>
 80019ea:	4b86      	ldr	r3, [pc, #536]	; (8001c04 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 80019ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019f0:	619a      	str	r2, [r3, #24]
 80019f2:	e003      	b.n	80019fc <LCD_IO_WriteCmd8MultipleData8+0x60>
 80019f4:	4b83      	ldr	r3, [pc, #524]	; (8001c04 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 80019f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019fa:	619a      	str	r2, [r3, #24]
 80019fc:	4b7f      	ldr	r3, [pc, #508]	; (8001bfc <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d004      	beq.n	8001a12 <LCD_IO_WriteCmd8MultipleData8+0x76>
 8001a08:	4b7d      	ldr	r3, [pc, #500]	; (8001c00 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001a0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a0e:	619a      	str	r2, [r3, #24]
 8001a10:	e003      	b.n	8001a1a <LCD_IO_WriteCmd8MultipleData8+0x7e>
 8001a12:	4b7b      	ldr	r3, [pc, #492]	; (8001c00 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001a14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a18:	619a      	str	r2, [r3, #24]
 8001a1a:	4b78      	ldr	r3, [pc, #480]	; (8001bfc <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d004      	beq.n	8001a30 <LCD_IO_WriteCmd8MultipleData8+0x94>
 8001a26:	4b78      	ldr	r3, [pc, #480]	; (8001c08 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001a28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a2c:	619a      	str	r2, [r3, #24]
 8001a2e:	e003      	b.n	8001a38 <LCD_IO_WriteCmd8MultipleData8+0x9c>
 8001a30:	4b75      	ldr	r3, [pc, #468]	; (8001c08 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001a32:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a36:	619a      	str	r2, [r3, #24]
 8001a38:	4b70      	ldr	r3, [pc, #448]	; (8001bfc <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d004      	beq.n	8001a4e <LCD_IO_WriteCmd8MultipleData8+0xb2>
 8001a44:	4b70      	ldr	r3, [pc, #448]	; (8001c08 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001a46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a4a:	619a      	str	r2, [r3, #24]
 8001a4c:	e003      	b.n	8001a56 <LCD_IO_WriteCmd8MultipleData8+0xba>
 8001a4e:	4b6e      	ldr	r3, [pc, #440]	; (8001c08 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001a50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a54:	619a      	str	r2, [r3, #24]
 8001a56:	4b69      	ldr	r3, [pc, #420]	; (8001bfc <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	f003 0320 	and.w	r3, r3, #32
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d004      	beq.n	8001a6c <LCD_IO_WriteCmd8MultipleData8+0xd0>
 8001a62:	4b69      	ldr	r3, [pc, #420]	; (8001c08 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a68:	619a      	str	r2, [r3, #24]
 8001a6a:	e003      	b.n	8001a74 <LCD_IO_WriteCmd8MultipleData8+0xd8>
 8001a6c:	4b66      	ldr	r3, [pc, #408]	; (8001c08 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001a6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a72:	619a      	str	r2, [r3, #24]
 8001a74:	4b61      	ldr	r3, [pc, #388]	; (8001bfc <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d004      	beq.n	8001a8a <LCD_IO_WriteCmd8MultipleData8+0xee>
 8001a80:	4b62      	ldr	r3, [pc, #392]	; (8001c0c <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a86:	619a      	str	r2, [r3, #24]
 8001a88:	e003      	b.n	8001a92 <LCD_IO_WriteCmd8MultipleData8+0xf6>
 8001a8a:	4b60      	ldr	r3, [pc, #384]	; (8001c0c <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001a8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a90:	619a      	str	r2, [r3, #24]
 8001a92:	4b5a      	ldr	r3, [pc, #360]	; (8001bfc <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b25b      	sxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	da04      	bge.n	8001aa6 <LCD_IO_WriteCmd8MultipleData8+0x10a>
 8001a9c:	4b58      	ldr	r3, [pc, #352]	; (8001c00 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001a9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aa2:	619a      	str	r2, [r3, #24]
 8001aa4:	e003      	b.n	8001aae <LCD_IO_WriteCmd8MultipleData8+0x112>
 8001aa6:	4b56      	ldr	r3, [pc, #344]	; (8001c00 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aac:	619a      	str	r2, [r3, #24]
 8001aae:	4b52      	ldr	r3, [pc, #328]	; (8001bf8 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001ab0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ab4:	619a      	str	r2, [r3, #24]
 8001ab6:	2008      	movs	r0, #8
 8001ab8:	f7ff fa1a 	bl	8000ef0 <LCD_IO_Delay>
 8001abc:	4b4e      	ldr	r3, [pc, #312]	; (8001bf8 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	619a      	str	r2, [r3, #24]
 8001ac2:	4b4d      	ldr	r3, [pc, #308]	; (8001bf8 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	619a      	str	r2, [r3, #24]

  while(Size--)
 8001ac8:	e087      	b.n	8001bda <LCD_IO_WriteCmd8MultipleData8+0x23e>
  {
    LCD_DATA8_WRITE(*pData);
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	781a      	ldrb	r2, [r3, #0]
 8001ace:	4b4b      	ldr	r3, [pc, #300]	; (8001bfc <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001ad0:	701a      	strb	r2, [r3, #0]
 8001ad2:	4b4a      	ldr	r3, [pc, #296]	; (8001bfc <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d004      	beq.n	8001ae8 <LCD_IO_WriteCmd8MultipleData8+0x14c>
 8001ade:	4b48      	ldr	r3, [pc, #288]	; (8001c00 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae4:	619a      	str	r2, [r3, #24]
 8001ae6:	e003      	b.n	8001af0 <LCD_IO_WriteCmd8MultipleData8+0x154>
 8001ae8:	4b45      	ldr	r3, [pc, #276]	; (8001c00 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001aea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aee:	619a      	str	r2, [r3, #24]
 8001af0:	4b42      	ldr	r3, [pc, #264]	; (8001bfc <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d004      	beq.n	8001b06 <LCD_IO_WriteCmd8MultipleData8+0x16a>
 8001afc:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8001afe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b02:	619a      	str	r2, [r3, #24]
 8001b04:	e003      	b.n	8001b0e <LCD_IO_WriteCmd8MultipleData8+0x172>
 8001b06:	4b3f      	ldr	r3, [pc, #252]	; (8001c04 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8001b08:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b0c:	619a      	str	r2, [r3, #24]
 8001b0e:	4b3b      	ldr	r3, [pc, #236]	; (8001bfc <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d004      	beq.n	8001b24 <LCD_IO_WriteCmd8MultipleData8+0x188>
 8001b1a:	4b39      	ldr	r3, [pc, #228]	; (8001c00 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001b1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b20:	619a      	str	r2, [r3, #24]
 8001b22:	e003      	b.n	8001b2c <LCD_IO_WriteCmd8MultipleData8+0x190>
 8001b24:	4b36      	ldr	r3, [pc, #216]	; (8001c00 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001b26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b2a:	619a      	str	r2, [r3, #24]
 8001b2c:	4b33      	ldr	r3, [pc, #204]	; (8001bfc <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d004      	beq.n	8001b42 <LCD_IO_WriteCmd8MultipleData8+0x1a6>
 8001b38:	4b33      	ldr	r3, [pc, #204]	; (8001c08 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b3e:	619a      	str	r2, [r3, #24]
 8001b40:	e003      	b.n	8001b4a <LCD_IO_WriteCmd8MultipleData8+0x1ae>
 8001b42:	4b31      	ldr	r3, [pc, #196]	; (8001c08 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b48:	619a      	str	r2, [r3, #24]
 8001b4a:	4b2c      	ldr	r3, [pc, #176]	; (8001bfc <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <LCD_IO_WriteCmd8MultipleData8+0x1c4>
 8001b56:	4b2c      	ldr	r3, [pc, #176]	; (8001c08 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b5c:	619a      	str	r2, [r3, #24]
 8001b5e:	e003      	b.n	8001b68 <LCD_IO_WriteCmd8MultipleData8+0x1cc>
 8001b60:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b66:	619a      	str	r2, [r3, #24]
 8001b68:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	f003 0320 	and.w	r3, r3, #32
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d004      	beq.n	8001b7e <LCD_IO_WriteCmd8MultipleData8+0x1e2>
 8001b74:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b7a:	619a      	str	r2, [r3, #24]
 8001b7c:	e003      	b.n	8001b86 <LCD_IO_WriteCmd8MultipleData8+0x1ea>
 8001b7e:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b84:	619a      	str	r2, [r3, #24]
 8001b86:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d004      	beq.n	8001b9c <LCD_IO_WriteCmd8MultipleData8+0x200>
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b98:	619a      	str	r2, [r3, #24]
 8001b9a:	e003      	b.n	8001ba4 <LCD_IO_WriteCmd8MultipleData8+0x208>
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001b9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ba2:	619a      	str	r2, [r3, #24]
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b25b      	sxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	da04      	bge.n	8001bb8 <LCD_IO_WriteCmd8MultipleData8+0x21c>
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001bb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bb4:	619a      	str	r2, [r3, #24]
 8001bb6:	e003      	b.n	8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x224>
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bbe:	619a      	str	r2, [r3, #24]
 8001bc0:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001bc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bc6:	619a      	str	r2, [r3, #24]
 8001bc8:	2008      	movs	r0, #8
 8001bca:	f7ff f991 	bl	8000ef0 <LCD_IO_Delay>
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	619a      	str	r2, [r3, #24]
    pData ++;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	1e5a      	subs	r2, r3, #1
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f47f af72 	bne.w	8001aca <LCD_IO_WriteCmd8MultipleData8+0x12e>
  }
  LCD_CS_OFF;
 8001be6:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <LCD_IO_WriteCmd8MultipleData8+0x258>)
 8001be8:	2202      	movs	r2, #2
 8001bea:	619a      	str	r2, [r3, #24]
}
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	58020400 	.word	0x58020400
 8001bf8:	58020800 	.word	0x58020800
 8001bfc:	240000ac 	.word	0x240000ac
 8001c00:	58021800 	.word	0x58021800
 8001c04:	58020c00 	.word	0x58020c00
 8001c08:	58021000 	.word	0x58021000
 8001c0c:	58020000 	.word	0x58020000

08001c10 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 8001c1e:	4b9b      	ldr	r3, [pc, #620]	; (8001e8c <LCD_IO_WriteCmd8MultipleData16+0x27c>)
 8001c20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c24:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8001c26:	4b9a      	ldr	r3, [pc, #616]	; (8001e90 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001c28:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c2c:	619a      	str	r2, [r3, #24]
 8001c2e:	4a99      	ldr	r2, [pc, #612]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	7013      	strb	r3, [r2, #0]
 8001c34:	4b97      	ldr	r3, [pc, #604]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d004      	beq.n	8001c4a <LCD_IO_WriteCmd8MultipleData16+0x3a>
 8001c40:	4b95      	ldr	r3, [pc, #596]	; (8001e98 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c46:	619a      	str	r2, [r3, #24]
 8001c48:	e003      	b.n	8001c52 <LCD_IO_WriteCmd8MultipleData16+0x42>
 8001c4a:	4b93      	ldr	r3, [pc, #588]	; (8001e98 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001c4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c50:	619a      	str	r2, [r3, #24]
 8001c52:	4b90      	ldr	r3, [pc, #576]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d004      	beq.n	8001c68 <LCD_IO_WriteCmd8MultipleData16+0x58>
 8001c5e:	4b8f      	ldr	r3, [pc, #572]	; (8001e9c <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001c60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c64:	619a      	str	r2, [r3, #24]
 8001c66:	e003      	b.n	8001c70 <LCD_IO_WriteCmd8MultipleData16+0x60>
 8001c68:	4b8c      	ldr	r3, [pc, #560]	; (8001e9c <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001c6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c6e:	619a      	str	r2, [r3, #24]
 8001c70:	4b88      	ldr	r3, [pc, #544]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <LCD_IO_WriteCmd8MultipleData16+0x76>
 8001c7c:	4b86      	ldr	r3, [pc, #536]	; (8001e98 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001c7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c82:	619a      	str	r2, [r3, #24]
 8001c84:	e003      	b.n	8001c8e <LCD_IO_WriteCmd8MultipleData16+0x7e>
 8001c86:	4b84      	ldr	r3, [pc, #528]	; (8001e98 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001c88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c8c:	619a      	str	r2, [r3, #24]
 8001c8e:	4b81      	ldr	r3, [pc, #516]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d004      	beq.n	8001ca4 <LCD_IO_WriteCmd8MultipleData16+0x94>
 8001c9a:	4b81      	ldr	r3, [pc, #516]	; (8001ea0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001c9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ca0:	619a      	str	r2, [r3, #24]
 8001ca2:	e003      	b.n	8001cac <LCD_IO_WriteCmd8MultipleData16+0x9c>
 8001ca4:	4b7e      	ldr	r3, [pc, #504]	; (8001ea0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001ca6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001caa:	619a      	str	r2, [r3, #24]
 8001cac:	4b79      	ldr	r3, [pc, #484]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d004      	beq.n	8001cc2 <LCD_IO_WriteCmd8MultipleData16+0xb2>
 8001cb8:	4b79      	ldr	r3, [pc, #484]	; (8001ea0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001cba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cbe:	619a      	str	r2, [r3, #24]
 8001cc0:	e003      	b.n	8001cca <LCD_IO_WriteCmd8MultipleData16+0xba>
 8001cc2:	4b77      	ldr	r3, [pc, #476]	; (8001ea0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001cc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cc8:	619a      	str	r2, [r3, #24]
 8001cca:	4b72      	ldr	r3, [pc, #456]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	f003 0320 	and.w	r3, r3, #32
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d004      	beq.n	8001ce0 <LCD_IO_WriteCmd8MultipleData16+0xd0>
 8001cd6:	4b72      	ldr	r3, [pc, #456]	; (8001ea0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001cd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cdc:	619a      	str	r2, [r3, #24]
 8001cde:	e003      	b.n	8001ce8 <LCD_IO_WriteCmd8MultipleData16+0xd8>
 8001ce0:	4b6f      	ldr	r3, [pc, #444]	; (8001ea0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001ce2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ce6:	619a      	str	r2, [r3, #24]
 8001ce8:	4b6a      	ldr	r3, [pc, #424]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d004      	beq.n	8001cfe <LCD_IO_WriteCmd8MultipleData16+0xee>
 8001cf4:	4b6b      	ldr	r3, [pc, #428]	; (8001ea4 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cfa:	619a      	str	r2, [r3, #24]
 8001cfc:	e003      	b.n	8001d06 <LCD_IO_WriteCmd8MultipleData16+0xf6>
 8001cfe:	4b69      	ldr	r3, [pc, #420]	; (8001ea4 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001d00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d04:	619a      	str	r2, [r3, #24]
 8001d06:	4b63      	ldr	r3, [pc, #396]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	b25b      	sxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	da04      	bge.n	8001d1a <LCD_IO_WriteCmd8MultipleData16+0x10a>
 8001d10:	4b61      	ldr	r3, [pc, #388]	; (8001e98 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001d12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d16:	619a      	str	r2, [r3, #24]
 8001d18:	e003      	b.n	8001d22 <LCD_IO_WriteCmd8MultipleData16+0x112>
 8001d1a:	4b5f      	ldr	r3, [pc, #380]	; (8001e98 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d20:	619a      	str	r2, [r3, #24]
 8001d22:	4b5b      	ldr	r3, [pc, #364]	; (8001e90 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001d24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d28:	619a      	str	r2, [r3, #24]
 8001d2a:	2008      	movs	r0, #8
 8001d2c:	f7ff f8e0 	bl	8000ef0 <LCD_IO_Delay>
 8001d30:	4b57      	ldr	r3, [pc, #348]	; (8001e90 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	619a      	str	r2, [r3, #24]
 8001d36:	4b56      	ldr	r3, [pc, #344]	; (8001e90 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001d38:	2208      	movs	r2, #8
 8001d3a:	619a      	str	r2, [r3, #24]
  while(Size--)
 8001d3c:	e11e      	b.n	8001f7c <LCD_IO_WriteCmd8MultipleData16+0x36c>
  {
    LCD_DATA16_WRITE(*pData);
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	4b52      	ldr	r3, [pc, #328]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	4b51      	ldr	r3, [pc, #324]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d004      	beq.n	8001d62 <LCD_IO_WriteCmd8MultipleData16+0x152>
 8001d58:	4b4f      	ldr	r3, [pc, #316]	; (8001e98 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d5e:	619a      	str	r2, [r3, #24]
 8001d60:	e003      	b.n	8001d6a <LCD_IO_WriteCmd8MultipleData16+0x15a>
 8001d62:	4b4d      	ldr	r3, [pc, #308]	; (8001e98 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001d64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d68:	619a      	str	r2, [r3, #24]
 8001d6a:	4b4a      	ldr	r3, [pc, #296]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d004      	beq.n	8001d80 <LCD_IO_WriteCmd8MultipleData16+0x170>
 8001d76:	4b49      	ldr	r3, [pc, #292]	; (8001e9c <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001d78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d7c:	619a      	str	r2, [r3, #24]
 8001d7e:	e003      	b.n	8001d88 <LCD_IO_WriteCmd8MultipleData16+0x178>
 8001d80:	4b46      	ldr	r3, [pc, #280]	; (8001e9c <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001d82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d86:	619a      	str	r2, [r3, #24]
 8001d88:	4b42      	ldr	r3, [pc, #264]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d004      	beq.n	8001d9e <LCD_IO_WriteCmd8MultipleData16+0x18e>
 8001d94:	4b40      	ldr	r3, [pc, #256]	; (8001e98 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001d96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d9a:	619a      	str	r2, [r3, #24]
 8001d9c:	e003      	b.n	8001da6 <LCD_IO_WriteCmd8MultipleData16+0x196>
 8001d9e:	4b3e      	ldr	r3, [pc, #248]	; (8001e98 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001da0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001da4:	619a      	str	r2, [r3, #24]
 8001da6:	4b3b      	ldr	r3, [pc, #236]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d004      	beq.n	8001dbc <LCD_IO_WriteCmd8MultipleData16+0x1ac>
 8001db2:	4b3b      	ldr	r3, [pc, #236]	; (8001ea0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001db4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001db8:	619a      	str	r2, [r3, #24]
 8001dba:	e003      	b.n	8001dc4 <LCD_IO_WriteCmd8MultipleData16+0x1b4>
 8001dbc:	4b38      	ldr	r3, [pc, #224]	; (8001ea0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001dbe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001dc2:	619a      	str	r2, [r3, #24]
 8001dc4:	4b33      	ldr	r3, [pc, #204]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d004      	beq.n	8001dda <LCD_IO_WriteCmd8MultipleData16+0x1ca>
 8001dd0:	4b33      	ldr	r3, [pc, #204]	; (8001ea0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001dd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dd6:	619a      	str	r2, [r3, #24]
 8001dd8:	e003      	b.n	8001de2 <LCD_IO_WriteCmd8MultipleData16+0x1d2>
 8001dda:	4b31      	ldr	r3, [pc, #196]	; (8001ea0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001ddc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001de0:	619a      	str	r2, [r3, #24]
 8001de2:	4b2c      	ldr	r3, [pc, #176]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d004      	beq.n	8001df8 <LCD_IO_WriteCmd8MultipleData16+0x1e8>
 8001dee:	4b2c      	ldr	r3, [pc, #176]	; (8001ea0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001df4:	619a      	str	r2, [r3, #24]
 8001df6:	e003      	b.n	8001e00 <LCD_IO_WriteCmd8MultipleData16+0x1f0>
 8001df8:	4b29      	ldr	r3, [pc, #164]	; (8001ea0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001dfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dfe:	619a      	str	r2, [r3, #24]
 8001e00:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d004      	beq.n	8001e16 <LCD_IO_WriteCmd8MultipleData16+0x206>
 8001e0c:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e12:	619a      	str	r2, [r3, #24]
 8001e14:	e003      	b.n	8001e1e <LCD_IO_WriteCmd8MultipleData16+0x20e>
 8001e16:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001e18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e1c:	619a      	str	r2, [r3, #24]
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	b25b      	sxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	da04      	bge.n	8001e32 <LCD_IO_WriteCmd8MultipleData16+0x222>
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e2e:	619a      	str	r2, [r3, #24]
 8001e30:	e003      	b.n	8001e3a <LCD_IO_WriteCmd8MultipleData16+0x22a>
 8001e32:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e38:	619a      	str	r2, [r3, #24]
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001e3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e40:	619a      	str	r2, [r3, #24]
 8001e42:	2008      	movs	r0, #8
 8001e44:	f7ff f854 	bl	8000ef0 <LCD_IO_Delay>
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	619a      	str	r2, [r3, #24]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e56:	701a      	strb	r2, [r3, #0]
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d004      	beq.n	8001e6e <LCD_IO_WriteCmd8MultipleData16+0x25e>
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e6a:	619a      	str	r2, [r3, #24]
 8001e6c:	e003      	b.n	8001e76 <LCD_IO_WriteCmd8MultipleData16+0x266>
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001e70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e74:	619a      	str	r2, [r3, #24]
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d012      	beq.n	8001ea8 <LCD_IO_WriteCmd8MultipleData16+0x298>
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001e84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e88:	619a      	str	r2, [r3, #24]
 8001e8a:	e011      	b.n	8001eb0 <LCD_IO_WriteCmd8MultipleData16+0x2a0>
 8001e8c:	58020400 	.word	0x58020400
 8001e90:	58020800 	.word	0x58020800
 8001e94:	240000ac 	.word	0x240000ac
 8001e98:	58021800 	.word	0x58021800
 8001e9c:	58020c00 	.word	0x58020c00
 8001ea0:	58021000 	.word	0x58021000
 8001ea4:	58020000 	.word	0x58020000
 8001ea8:	4b3b      	ldr	r3, [pc, #236]	; (8001f98 <LCD_IO_WriteCmd8MultipleData16+0x388>)
 8001eaa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001eae:	619a      	str	r2, [r3, #24]
 8001eb0:	4b3a      	ldr	r3, [pc, #232]	; (8001f9c <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d004      	beq.n	8001ec6 <LCD_IO_WriteCmd8MultipleData16+0x2b6>
 8001ebc:	4b38      	ldr	r3, [pc, #224]	; (8001fa0 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001ebe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ec2:	619a      	str	r2, [r3, #24]
 8001ec4:	e003      	b.n	8001ece <LCD_IO_WriteCmd8MultipleData16+0x2be>
 8001ec6:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001ec8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ecc:	619a      	str	r2, [r3, #24]
 8001ece:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d004      	beq.n	8001ee4 <LCD_IO_WriteCmd8MultipleData16+0x2d4>
 8001eda:	4b32      	ldr	r3, [pc, #200]	; (8001fa4 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001edc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee0:	619a      	str	r2, [r3, #24]
 8001ee2:	e003      	b.n	8001eec <LCD_IO_WriteCmd8MultipleData16+0x2dc>
 8001ee4:	4b2f      	ldr	r3, [pc, #188]	; (8001fa4 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001ee6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001eea:	619a      	str	r2, [r3, #24]
 8001eec:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d004      	beq.n	8001f02 <LCD_IO_WriteCmd8MultipleData16+0x2f2>
 8001ef8:	4b2a      	ldr	r3, [pc, #168]	; (8001fa4 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001efa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001efe:	619a      	str	r2, [r3, #24]
 8001f00:	e003      	b.n	8001f0a <LCD_IO_WriteCmd8MultipleData16+0x2fa>
 8001f02:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001f04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f08:	619a      	str	r2, [r3, #24]
 8001f0a:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	f003 0320 	and.w	r3, r3, #32
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d004      	beq.n	8001f20 <LCD_IO_WriteCmd8MultipleData16+0x310>
 8001f16:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f1c:	619a      	str	r2, [r3, #24]
 8001f1e:	e003      	b.n	8001f28 <LCD_IO_WriteCmd8MultipleData16+0x318>
 8001f20:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001f22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f26:	619a      	str	r2, [r3, #24]
 8001f28:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d004      	beq.n	8001f3e <LCD_IO_WriteCmd8MultipleData16+0x32e>
 8001f34:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <LCD_IO_WriteCmd8MultipleData16+0x398>)
 8001f36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f3a:	619a      	str	r2, [r3, #24]
 8001f3c:	e003      	b.n	8001f46 <LCD_IO_WriteCmd8MultipleData16+0x336>
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <LCD_IO_WriteCmd8MultipleData16+0x398>)
 8001f40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f44:	619a      	str	r2, [r3, #24]
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	da04      	bge.n	8001f5a <LCD_IO_WriteCmd8MultipleData16+0x34a>
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001f52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f56:	619a      	str	r2, [r3, #24]
 8001f58:	e003      	b.n	8001f62 <LCD_IO_WriteCmd8MultipleData16+0x352>
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f60:	619a      	str	r2, [r3, #24]
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <LCD_IO_WriteCmd8MultipleData16+0x39c>)
 8001f64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f68:	619a      	str	r2, [r3, #24]
 8001f6a:	2008      	movs	r0, #8
 8001f6c:	f7fe ffc0 	bl	8000ef0 <LCD_IO_Delay>
 8001f70:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <LCD_IO_WriteCmd8MultipleData16+0x39c>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	619a      	str	r2, [r3, #24]
    pData ++;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	3302      	adds	r3, #2
 8001f7a:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	1e5a      	subs	r2, r3, #1
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f47f aedb 	bne.w	8001d3e <LCD_IO_WriteCmd8MultipleData16+0x12e>
  }
  LCD_CS_OFF;
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <LCD_IO_WriteCmd8MultipleData16+0x3a0>)
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	619a      	str	r2, [r3, #24]
}
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	58020c00 	.word	0x58020c00
 8001f9c:	240000ac 	.word	0x240000ac
 8001fa0:	58021800 	.word	0x58021800
 8001fa4:	58021000 	.word	0x58021000
 8001fa8:	58020000 	.word	0x58020000
 8001fac:	58020800 	.word	0x58020800
 8001fb0:	58020400 	.word	0x58020400

08001fb4 <LCD_IO_ReadCmd8MultipleData8>:
}

//-----------------------------------------------------------------------------
#if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	73fb      	strb	r3, [r7, #15]
  uint8_t  d;
  LCD_CS_ON;
 8001fc4:	4b6f      	ldr	r3, [pc, #444]	; (8002184 <LCD_IO_ReadCmd8MultipleData8+0x1d0>)
 8001fc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fca:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8001fcc:	4b6e      	ldr	r3, [pc, #440]	; (8002188 <LCD_IO_ReadCmd8MultipleData8+0x1d4>)
 8001fce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001fd2:	619a      	str	r2, [r3, #24]
 8001fd4:	4a6d      	ldr	r2, [pc, #436]	; (800218c <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	7013      	strb	r3, [r2, #0]
 8001fda:	4b6c      	ldr	r3, [pc, #432]	; (800218c <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d004      	beq.n	8001ff0 <LCD_IO_ReadCmd8MultipleData8+0x3c>
 8001fe6:	4b6a      	ldr	r3, [pc, #424]	; (8002190 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8001fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fec:	619a      	str	r2, [r3, #24]
 8001fee:	e003      	b.n	8001ff8 <LCD_IO_ReadCmd8MultipleData8+0x44>
 8001ff0:	4b67      	ldr	r3, [pc, #412]	; (8002190 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8001ff2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ff6:	619a      	str	r2, [r3, #24]
 8001ff8:	4b64      	ldr	r3, [pc, #400]	; (800218c <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d004      	beq.n	800200e <LCD_IO_ReadCmd8MultipleData8+0x5a>
 8002004:	4b63      	ldr	r3, [pc, #396]	; (8002194 <LCD_IO_ReadCmd8MultipleData8+0x1e0>)
 8002006:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800200a:	619a      	str	r2, [r3, #24]
 800200c:	e003      	b.n	8002016 <LCD_IO_ReadCmd8MultipleData8+0x62>
 800200e:	4b61      	ldr	r3, [pc, #388]	; (8002194 <LCD_IO_ReadCmd8MultipleData8+0x1e0>)
 8002010:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002014:	619a      	str	r2, [r3, #24]
 8002016:	4b5d      	ldr	r3, [pc, #372]	; (800218c <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	2b00      	cmp	r3, #0
 8002020:	d004      	beq.n	800202c <LCD_IO_ReadCmd8MultipleData8+0x78>
 8002022:	4b5b      	ldr	r3, [pc, #364]	; (8002190 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002024:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002028:	619a      	str	r2, [r3, #24]
 800202a:	e003      	b.n	8002034 <LCD_IO_ReadCmd8MultipleData8+0x80>
 800202c:	4b58      	ldr	r3, [pc, #352]	; (8002190 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 800202e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002032:	619a      	str	r2, [r3, #24]
 8002034:	4b55      	ldr	r3, [pc, #340]	; (800218c <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d004      	beq.n	800204a <LCD_IO_ReadCmd8MultipleData8+0x96>
 8002040:	4b55      	ldr	r3, [pc, #340]	; (8002198 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002042:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002046:	619a      	str	r2, [r3, #24]
 8002048:	e003      	b.n	8002052 <LCD_IO_ReadCmd8MultipleData8+0x9e>
 800204a:	4b53      	ldr	r3, [pc, #332]	; (8002198 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 800204c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002050:	619a      	str	r2, [r3, #24]
 8002052:	4b4e      	ldr	r3, [pc, #312]	; (800218c <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b00      	cmp	r3, #0
 800205c:	d004      	beq.n	8002068 <LCD_IO_ReadCmd8MultipleData8+0xb4>
 800205e:	4b4e      	ldr	r3, [pc, #312]	; (8002198 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002060:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002064:	619a      	str	r2, [r3, #24]
 8002066:	e003      	b.n	8002070 <LCD_IO_ReadCmd8MultipleData8+0xbc>
 8002068:	4b4b      	ldr	r3, [pc, #300]	; (8002198 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 800206a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800206e:	619a      	str	r2, [r3, #24]
 8002070:	4b46      	ldr	r3, [pc, #280]	; (800218c <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	f003 0320 	and.w	r3, r3, #32
 8002078:	2b00      	cmp	r3, #0
 800207a:	d004      	beq.n	8002086 <LCD_IO_ReadCmd8MultipleData8+0xd2>
 800207c:	4b46      	ldr	r3, [pc, #280]	; (8002198 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 800207e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002082:	619a      	str	r2, [r3, #24]
 8002084:	e003      	b.n	800208e <LCD_IO_ReadCmd8MultipleData8+0xda>
 8002086:	4b44      	ldr	r3, [pc, #272]	; (8002198 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002088:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800208c:	619a      	str	r2, [r3, #24]
 800208e:	4b3f      	ldr	r3, [pc, #252]	; (800218c <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d004      	beq.n	80020a4 <LCD_IO_ReadCmd8MultipleData8+0xf0>
 800209a:	4b40      	ldr	r3, [pc, #256]	; (800219c <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 800209c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020a0:	619a      	str	r2, [r3, #24]
 80020a2:	e003      	b.n	80020ac <LCD_IO_ReadCmd8MultipleData8+0xf8>
 80020a4:	4b3d      	ldr	r3, [pc, #244]	; (800219c <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 80020a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020aa:	619a      	str	r2, [r3, #24]
 80020ac:	4b37      	ldr	r3, [pc, #220]	; (800218c <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	b25b      	sxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	da04      	bge.n	80020c0 <LCD_IO_ReadCmd8MultipleData8+0x10c>
 80020b6:	4b36      	ldr	r3, [pc, #216]	; (8002190 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 80020b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020bc:	619a      	str	r2, [r3, #24]
 80020be:	e003      	b.n	80020c8 <LCD_IO_ReadCmd8MultipleData8+0x114>
 80020c0:	4b33      	ldr	r3, [pc, #204]	; (8002190 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 80020c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020c6:	619a      	str	r2, [r3, #24]
 80020c8:	4b2f      	ldr	r3, [pc, #188]	; (8002188 <LCD_IO_ReadCmd8MultipleData8+0x1d4>)
 80020ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020ce:	619a      	str	r2, [r3, #24]
 80020d0:	2008      	movs	r0, #8
 80020d2:	f7fe ff0d 	bl	8000ef0 <LCD_IO_Delay>
 80020d6:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <LCD_IO_ReadCmd8MultipleData8+0x1d4>)
 80020d8:	2201      	movs	r2, #1
 80020da:	619a      	str	r2, [r3, #24]
 80020dc:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <LCD_IO_ReadCmd8MultipleData8+0x1d4>)
 80020de:	2208      	movs	r2, #8
 80020e0:	619a      	str	r2, [r3, #24]
  LCD_DIRREAD;
 80020e2:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a2a      	ldr	r2, [pc, #168]	; (8002190 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 80020e8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b29      	ldr	r3, [pc, #164]	; (8002194 <LCD_IO_ReadCmd8MultipleData8+0x1e0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a28      	ldr	r2, [pc, #160]	; (8002194 <LCD_IO_ReadCmd8MultipleData8+0x1e0>)
 80020f4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4b25      	ldr	r3, [pc, #148]	; (8002190 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a24      	ldr	r2, [pc, #144]	; (8002190 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002100:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4b24      	ldr	r3, [pc, #144]	; (8002198 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a23      	ldr	r2, [pc, #140]	; (8002198 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 800210c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b21      	ldr	r3, [pc, #132]	; (8002198 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a20      	ldr	r2, [pc, #128]	; (8002198 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002118:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002124:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b1c      	ldr	r3, [pc, #112]	; (800219c <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a1b      	ldr	r2, [pc, #108]	; (800219c <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8002130:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a15      	ldr	r2, [pc, #84]	; (8002190 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 800213c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002140:	6013      	str	r3, [r2, #0]
  while(DummySize--)
 8002142:	e009      	b.n	8002158 <LCD_IO_ReadCmd8MultipleData8+0x1a4>
    LCD_DUMMY_READ;
 8002144:	4b15      	ldr	r3, [pc, #84]	; (800219c <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8002146:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800214a:	619a      	str	r2, [r3, #24]
 800214c:	2012      	movs	r0, #18
 800214e:	f7fe fecf 	bl	8000ef0 <LCD_IO_Delay>
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8002154:	2208      	movs	r2, #8
 8002156:	619a      	str	r2, [r3, #24]
  while(DummySize--)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	1e5a      	subs	r2, r3, #1
 800215c:	603a      	str	r2, [r7, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <LCD_IO_ReadCmd8MultipleData8+0x190>
  while(Size--)
 8002162:	e06e      	b.n	8002242 <LCD_IO_ReadCmd8MultipleData8+0x28e>
  {
    LCD_DATA8_READ(d);
 8002164:	4b0d      	ldr	r3, [pc, #52]	; (800219c <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8002166:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800216a:	619a      	str	r2, [r3, #24]
 800216c:	2012      	movs	r0, #18
 800216e:	f7fe febf 	bl	8000ef0 <LCD_IO_Delay>
 8002172:	4b07      	ldr	r3, [pc, #28]	; (8002190 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800217a:	2b00      	cmp	r3, #0
 800217c:	d010      	beq.n	80021a0 <LCD_IO_ReadCmd8MultipleData8+0x1ec>
 800217e:	2301      	movs	r3, #1
 8002180:	75fb      	strb	r3, [r7, #23]
 8002182:	e00f      	b.n	80021a4 <LCD_IO_ReadCmd8MultipleData8+0x1f0>
 8002184:	58020400 	.word	0x58020400
 8002188:	58020800 	.word	0x58020800
 800218c:	240000ac 	.word	0x240000ac
 8002190:	58021800 	.word	0x58021800
 8002194:	58020c00 	.word	0x58020c00
 8002198:	58021000 	.word	0x58021000
 800219c:	58020000 	.word	0x58020000
 80021a0:	2300      	movs	r3, #0
 80021a2:	75fb      	strb	r3, [r7, #23]
 80021a4:	4b4d      	ldr	r3, [pc, #308]	; (80022dc <LCD_IO_ReadCmd8MultipleData8+0x328>)
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <LCD_IO_ReadCmd8MultipleData8+0x204>
 80021b0:	7dfb      	ldrb	r3, [r7, #23]
 80021b2:	f043 0302 	orr.w	r3, r3, #2
 80021b6:	75fb      	strb	r3, [r7, #23]
 80021b8:	4b49      	ldr	r3, [pc, #292]	; (80022e0 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <LCD_IO_ReadCmd8MultipleData8+0x218>
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
 80021c6:	f043 0304 	orr.w	r3, r3, #4
 80021ca:	75fb      	strb	r3, [r7, #23]
 80021cc:	4b45      	ldr	r3, [pc, #276]	; (80022e4 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <LCD_IO_ReadCmd8MultipleData8+0x22c>
 80021d8:	7dfb      	ldrb	r3, [r7, #23]
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	75fb      	strb	r3, [r7, #23]
 80021e0:	4b40      	ldr	r3, [pc, #256]	; (80022e4 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <LCD_IO_ReadCmd8MultipleData8+0x240>
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	f043 0310 	orr.w	r3, r3, #16
 80021f2:	75fb      	strb	r3, [r7, #23]
 80021f4:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <LCD_IO_ReadCmd8MultipleData8+0x254>
 8002200:	7dfb      	ldrb	r3, [r7, #23]
 8002202:	f043 0320 	orr.w	r3, r3, #32
 8002206:	75fb      	strb	r3, [r7, #23]
 8002208:	4b37      	ldr	r3, [pc, #220]	; (80022e8 <LCD_IO_ReadCmd8MultipleData8+0x334>)
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <LCD_IO_ReadCmd8MultipleData8+0x268>
 8002214:	7dfb      	ldrb	r3, [r7, #23]
 8002216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800221a:	75fb      	strb	r3, [r7, #23]
 800221c:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <LCD_IO_ReadCmd8MultipleData8+0x27c>
 8002228:	7dfb      	ldrb	r3, [r7, #23]
 800222a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800222e:	75fb      	strb	r3, [r7, #23]
 8002230:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <LCD_IO_ReadCmd8MultipleData8+0x334>)
 8002232:	2208      	movs	r2, #8
 8002234:	619a      	str	r2, [r3, #24]
    *pData = d;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	7dfa      	ldrb	r2, [r7, #23]
 800223a:	701a      	strb	r2, [r3, #0]
    pData++;
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	1e5a      	subs	r2, r3, #1
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d18b      	bne.n	8002164 <LCD_IO_ReadCmd8MultipleData8+0x1b0>
  }
  LCD_CS_OFF;
 800224c:	4b27      	ldr	r3, [pc, #156]	; (80022ec <LCD_IO_ReadCmd8MultipleData8+0x338>)
 800224e:	2202      	movs	r2, #2
 8002250:	619a      	str	r2, [r3, #24]
  LCD_DIRWRITE;
 8002252:	4b23      	ldr	r3, [pc, #140]	; (80022e0 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800225a:	4a21      	ldr	r2, [pc, #132]	; (80022e0 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 800225c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <LCD_IO_ReadCmd8MultipleData8+0x328>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800226a:	4a1c      	ldr	r2, [pc, #112]	; (80022dc <LCD_IO_ReadCmd8MultipleData8+0x328>)
 800226c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800227a:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 800227c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800228a:	4a16      	ldr	r2, [pc, #88]	; (80022e4 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 800228c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800229a:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 800229c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80022aa:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 80022ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <LCD_IO_ReadCmd8MultipleData8+0x334>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80022ba:	4a0b      	ldr	r2, [pc, #44]	; (80022e8 <LCD_IO_ReadCmd8MultipleData8+0x334>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 80022cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022d0:	6013      	str	r3, [r2, #0]
}
 80022d2:	bf00      	nop
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	58020c00 	.word	0x58020c00
 80022e0:	58021800 	.word	0x58021800
 80022e4:	58021000 	.word	0x58021000
 80022e8:	58020000 	.word	0x58020000
 80022ec:	58020400 	.word	0x58020400

080022f0 <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_DIRWRITE;
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	4603      	mov	r3, r0
 80022fe:	73fb      	strb	r3, [r7, #15]
  uint8_t  rgb888[3];
  LCD_CS_ON;
 8002300:	4ba0      	ldr	r3, [pc, #640]	; (8002584 <LCD_IO_ReadCmd8MultipleData24to16+0x294>)
 8002302:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002306:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8002308:	4b9f      	ldr	r3, [pc, #636]	; (8002588 <LCD_IO_ReadCmd8MultipleData24to16+0x298>)
 800230a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800230e:	619a      	str	r2, [r3, #24]
 8002310:	4a9e      	ldr	r2, [pc, #632]	; (800258c <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	7013      	strb	r3, [r2, #0]
 8002316:	4b9d      	ldr	r3, [pc, #628]	; (800258c <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d004      	beq.n	800232c <LCD_IO_ReadCmd8MultipleData24to16+0x3c>
 8002322:	4b9b      	ldr	r3, [pc, #620]	; (8002590 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002328:	619a      	str	r2, [r3, #24]
 800232a:	e003      	b.n	8002334 <LCD_IO_ReadCmd8MultipleData24to16+0x44>
 800232c:	4b98      	ldr	r3, [pc, #608]	; (8002590 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 800232e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002332:	619a      	str	r2, [r3, #24]
 8002334:	4b95      	ldr	r3, [pc, #596]	; (800258c <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d004      	beq.n	800234a <LCD_IO_ReadCmd8MultipleData24to16+0x5a>
 8002340:	4b94      	ldr	r3, [pc, #592]	; (8002594 <LCD_IO_ReadCmd8MultipleData24to16+0x2a4>)
 8002342:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002346:	619a      	str	r2, [r3, #24]
 8002348:	e003      	b.n	8002352 <LCD_IO_ReadCmd8MultipleData24to16+0x62>
 800234a:	4b92      	ldr	r3, [pc, #584]	; (8002594 <LCD_IO_ReadCmd8MultipleData24to16+0x2a4>)
 800234c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002350:	619a      	str	r2, [r3, #24]
 8002352:	4b8e      	ldr	r3, [pc, #568]	; (800258c <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b00      	cmp	r3, #0
 800235c:	d004      	beq.n	8002368 <LCD_IO_ReadCmd8MultipleData24to16+0x78>
 800235e:	4b8c      	ldr	r3, [pc, #560]	; (8002590 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002360:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002364:	619a      	str	r2, [r3, #24]
 8002366:	e003      	b.n	8002370 <LCD_IO_ReadCmd8MultipleData24to16+0x80>
 8002368:	4b89      	ldr	r3, [pc, #548]	; (8002590 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 800236a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800236e:	619a      	str	r2, [r3, #24]
 8002370:	4b86      	ldr	r3, [pc, #536]	; (800258c <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	2b00      	cmp	r3, #0
 800237a:	d004      	beq.n	8002386 <LCD_IO_ReadCmd8MultipleData24to16+0x96>
 800237c:	4b86      	ldr	r3, [pc, #536]	; (8002598 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 800237e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002382:	619a      	str	r2, [r3, #24]
 8002384:	e003      	b.n	800238e <LCD_IO_ReadCmd8MultipleData24to16+0x9e>
 8002386:	4b84      	ldr	r3, [pc, #528]	; (8002598 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002388:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800238c:	619a      	str	r2, [r3, #24]
 800238e:	4b7f      	ldr	r3, [pc, #508]	; (800258c <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	2b00      	cmp	r3, #0
 8002398:	d004      	beq.n	80023a4 <LCD_IO_ReadCmd8MultipleData24to16+0xb4>
 800239a:	4b7f      	ldr	r3, [pc, #508]	; (8002598 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 800239c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023a0:	619a      	str	r2, [r3, #24]
 80023a2:	e003      	b.n	80023ac <LCD_IO_ReadCmd8MultipleData24to16+0xbc>
 80023a4:	4b7c      	ldr	r3, [pc, #496]	; (8002598 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 80023a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023aa:	619a      	str	r2, [r3, #24]
 80023ac:	4b77      	ldr	r3, [pc, #476]	; (800258c <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	f003 0320 	and.w	r3, r3, #32
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <LCD_IO_ReadCmd8MultipleData24to16+0xd2>
 80023b8:	4b77      	ldr	r3, [pc, #476]	; (8002598 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 80023ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023be:	619a      	str	r2, [r3, #24]
 80023c0:	e003      	b.n	80023ca <LCD_IO_ReadCmd8MultipleData24to16+0xda>
 80023c2:	4b75      	ldr	r3, [pc, #468]	; (8002598 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 80023c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023c8:	619a      	str	r2, [r3, #24]
 80023ca:	4b70      	ldr	r3, [pc, #448]	; (800258c <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d004      	beq.n	80023e0 <LCD_IO_ReadCmd8MultipleData24to16+0xf0>
 80023d6:	4b71      	ldr	r3, [pc, #452]	; (800259c <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 80023d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023dc:	619a      	str	r2, [r3, #24]
 80023de:	e003      	b.n	80023e8 <LCD_IO_ReadCmd8MultipleData24to16+0xf8>
 80023e0:	4b6e      	ldr	r3, [pc, #440]	; (800259c <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 80023e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023e6:	619a      	str	r2, [r3, #24]
 80023e8:	4b68      	ldr	r3, [pc, #416]	; (800258c <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	b25b      	sxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	da04      	bge.n	80023fc <LCD_IO_ReadCmd8MultipleData24to16+0x10c>
 80023f2:	4b67      	ldr	r3, [pc, #412]	; (8002590 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 80023f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023f8:	619a      	str	r2, [r3, #24]
 80023fa:	e003      	b.n	8002404 <LCD_IO_ReadCmd8MultipleData24to16+0x114>
 80023fc:	4b64      	ldr	r3, [pc, #400]	; (8002590 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 80023fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002402:	619a      	str	r2, [r3, #24]
 8002404:	4b60      	ldr	r3, [pc, #384]	; (8002588 <LCD_IO_ReadCmd8MultipleData24to16+0x298>)
 8002406:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800240a:	619a      	str	r2, [r3, #24]
 800240c:	2008      	movs	r0, #8
 800240e:	f7fe fd6f 	bl	8000ef0 <LCD_IO_Delay>
 8002412:	4b5d      	ldr	r3, [pc, #372]	; (8002588 <LCD_IO_ReadCmd8MultipleData24to16+0x298>)
 8002414:	2201      	movs	r2, #1
 8002416:	619a      	str	r2, [r3, #24]
 8002418:	4b5b      	ldr	r3, [pc, #364]	; (8002588 <LCD_IO_ReadCmd8MultipleData24to16+0x298>)
 800241a:	2208      	movs	r2, #8
 800241c:	619a      	str	r2, [r3, #24]
  LCD_DIRREAD;
 800241e:	4b5c      	ldr	r3, [pc, #368]	; (8002590 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a5b      	ldr	r2, [pc, #364]	; (8002590 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002424:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b5a      	ldr	r3, [pc, #360]	; (8002594 <LCD_IO_ReadCmd8MultipleData24to16+0x2a4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a59      	ldr	r2, [pc, #356]	; (8002594 <LCD_IO_ReadCmd8MultipleData24to16+0x2a4>)
 8002430:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	4b56      	ldr	r3, [pc, #344]	; (8002590 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a55      	ldr	r2, [pc, #340]	; (8002590 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 800243c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	4b55      	ldr	r3, [pc, #340]	; (8002598 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a54      	ldr	r2, [pc, #336]	; (8002598 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002448:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b52      	ldr	r3, [pc, #328]	; (8002598 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a51      	ldr	r2, [pc, #324]	; (8002598 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002454:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b4f      	ldr	r3, [pc, #316]	; (8002598 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a4e      	ldr	r2, [pc, #312]	; (8002598 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002460:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	4b4d      	ldr	r3, [pc, #308]	; (800259c <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a4c      	ldr	r2, [pc, #304]	; (800259c <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 800246c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	4b47      	ldr	r3, [pc, #284]	; (8002590 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a46      	ldr	r2, [pc, #280]	; (8002590 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002478:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800247c:	6013      	str	r3, [r2, #0]
  while(DummySize--)
 800247e:	e009      	b.n	8002494 <LCD_IO_ReadCmd8MultipleData24to16+0x1a4>
    LCD_DUMMY_READ;
 8002480:	4b46      	ldr	r3, [pc, #280]	; (800259c <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 8002482:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002486:	619a      	str	r2, [r3, #24]
 8002488:	2012      	movs	r0, #18
 800248a:	f7fe fd31 	bl	8000ef0 <LCD_IO_Delay>
 800248e:	4b43      	ldr	r3, [pc, #268]	; (800259c <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 8002490:	2208      	movs	r2, #8
 8002492:	619a      	str	r2, [r3, #24]
  while(DummySize--)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	603a      	str	r2, [r7, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <LCD_IO_ReadCmd8MultipleData24to16+0x190>
  while(Size--)
 800249e:	e14d      	b.n	800273c <LCD_IO_ReadCmd8MultipleData24to16+0x44c>
  {
    LCD_DATA8_READ(rgb888[0]);
 80024a0:	4b3e      	ldr	r3, [pc, #248]	; (800259c <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 80024a2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024a6:	619a      	str	r2, [r3, #24]
 80024a8:	2012      	movs	r0, #18
 80024aa:	f7fe fd21 	bl	8000ef0 <LCD_IO_Delay>
 80024ae:	4b38      	ldr	r3, [pc, #224]	; (8002590 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <LCD_IO_ReadCmd8MultipleData24to16+0x1d0>
 80024ba:	2301      	movs	r3, #1
 80024bc:	753b      	strb	r3, [r7, #20]
 80024be:	e001      	b.n	80024c4 <LCD_IO_ReadCmd8MultipleData24to16+0x1d4>
 80024c0:	2300      	movs	r3, #0
 80024c2:	753b      	strb	r3, [r7, #20]
 80024c4:	4b33      	ldr	r3, [pc, #204]	; (8002594 <LCD_IO_ReadCmd8MultipleData24to16+0x2a4>)
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d004      	beq.n	80024da <LCD_IO_ReadCmd8MultipleData24to16+0x1ea>
 80024d0:	7d3b      	ldrb	r3, [r7, #20]
 80024d2:	f043 0302 	orr.w	r3, r3, #2
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	753b      	strb	r3, [r7, #20]
 80024da:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d004      	beq.n	80024f0 <LCD_IO_ReadCmd8MultipleData24to16+0x200>
 80024e6:	7d3b      	ldrb	r3, [r7, #20]
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	753b      	strb	r3, [r7, #20]
 80024f0:	4b29      	ldr	r3, [pc, #164]	; (8002598 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d004      	beq.n	8002506 <LCD_IO_ReadCmd8MultipleData24to16+0x216>
 80024fc:	7d3b      	ldrb	r3, [r7, #20]
 80024fe:	f043 0308 	orr.w	r3, r3, #8
 8002502:	b2db      	uxtb	r3, r3
 8002504:	753b      	strb	r3, [r7, #20]
 8002506:	4b24      	ldr	r3, [pc, #144]	; (8002598 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d004      	beq.n	800251c <LCD_IO_ReadCmd8MultipleData24to16+0x22c>
 8002512:	7d3b      	ldrb	r3, [r7, #20]
 8002514:	f043 0310 	orr.w	r3, r3, #16
 8002518:	b2db      	uxtb	r3, r3
 800251a:	753b      	strb	r3, [r7, #20]
 800251c:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002524:	2b00      	cmp	r3, #0
 8002526:	d004      	beq.n	8002532 <LCD_IO_ReadCmd8MultipleData24to16+0x242>
 8002528:	7d3b      	ldrb	r3, [r7, #20]
 800252a:	f043 0320 	orr.w	r3, r3, #32
 800252e:	b2db      	uxtb	r3, r3
 8002530:	753b      	strb	r3, [r7, #20]
 8002532:	4b1a      	ldr	r3, [pc, #104]	; (800259c <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d004      	beq.n	8002548 <LCD_IO_ReadCmd8MultipleData24to16+0x258>
 800253e:	7d3b      	ldrb	r3, [r7, #20]
 8002540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002544:	b2db      	uxtb	r3, r3
 8002546:	753b      	strb	r3, [r7, #20]
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d004      	beq.n	800255e <LCD_IO_ReadCmd8MultipleData24to16+0x26e>
 8002554:	7d3b      	ldrb	r3, [r7, #20]
 8002556:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800255a:	b2db      	uxtb	r3, r3
 800255c:	753b      	strb	r3, [r7, #20]
 800255e:	4b0f      	ldr	r3, [pc, #60]	; (800259c <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 8002560:	2208      	movs	r2, #8
 8002562:	619a      	str	r2, [r3, #24]
    LCD_DATA8_READ(rgb888[1]);
 8002564:	4b0d      	ldr	r3, [pc, #52]	; (800259c <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 8002566:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800256a:	619a      	str	r2, [r3, #24]
 800256c:	2012      	movs	r0, #18
 800256e:	f7fe fcbf 	bl	8000ef0 <LCD_IO_Delay>
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800257a:	2b00      	cmp	r3, #0
 800257c:	d010      	beq.n	80025a0 <LCD_IO_ReadCmd8MultipleData24to16+0x2b0>
 800257e:	2301      	movs	r3, #1
 8002580:	757b      	strb	r3, [r7, #21]
 8002582:	e00f      	b.n	80025a4 <LCD_IO_ReadCmd8MultipleData24to16+0x2b4>
 8002584:	58020400 	.word	0x58020400
 8002588:	58020800 	.word	0x58020800
 800258c:	240000ac 	.word	0x240000ac
 8002590:	58021800 	.word	0x58021800
 8002594:	58020c00 	.word	0x58020c00
 8002598:	58021000 	.word	0x58021000
 800259c:	58020000 	.word	0x58020000
 80025a0:	2300      	movs	r3, #0
 80025a2:	757b      	strb	r3, [r7, #21]
 80025a4:	4b8c      	ldr	r3, [pc, #560]	; (80027d8 <LCD_IO_ReadCmd8MultipleData24to16+0x4e8>)
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d004      	beq.n	80025ba <LCD_IO_ReadCmd8MultipleData24to16+0x2ca>
 80025b0:	7d7b      	ldrb	r3, [r7, #21]
 80025b2:	f043 0302 	orr.w	r3, r3, #2
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	757b      	strb	r3, [r7, #21]
 80025ba:	4b88      	ldr	r3, [pc, #544]	; (80027dc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d004      	beq.n	80025d0 <LCD_IO_ReadCmd8MultipleData24to16+0x2e0>
 80025c6:	7d7b      	ldrb	r3, [r7, #21]
 80025c8:	f043 0304 	orr.w	r3, r3, #4
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	757b      	strb	r3, [r7, #21]
 80025d0:	4b83      	ldr	r3, [pc, #524]	; (80027e0 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d004      	beq.n	80025e6 <LCD_IO_ReadCmd8MultipleData24to16+0x2f6>
 80025dc:	7d7b      	ldrb	r3, [r7, #21]
 80025de:	f043 0308 	orr.w	r3, r3, #8
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	757b      	strb	r3, [r7, #21]
 80025e6:	4b7e      	ldr	r3, [pc, #504]	; (80027e0 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d004      	beq.n	80025fc <LCD_IO_ReadCmd8MultipleData24to16+0x30c>
 80025f2:	7d7b      	ldrb	r3, [r7, #21]
 80025f4:	f043 0310 	orr.w	r3, r3, #16
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	757b      	strb	r3, [r7, #21]
 80025fc:	4b78      	ldr	r3, [pc, #480]	; (80027e0 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002604:	2b00      	cmp	r3, #0
 8002606:	d004      	beq.n	8002612 <LCD_IO_ReadCmd8MultipleData24to16+0x322>
 8002608:	7d7b      	ldrb	r3, [r7, #21]
 800260a:	f043 0320 	orr.w	r3, r3, #32
 800260e:	b2db      	uxtb	r3, r3
 8002610:	757b      	strb	r3, [r7, #21]
 8002612:	4b74      	ldr	r3, [pc, #464]	; (80027e4 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d004      	beq.n	8002628 <LCD_IO_ReadCmd8MultipleData24to16+0x338>
 800261e:	7d7b      	ldrb	r3, [r7, #21]
 8002620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002624:	b2db      	uxtb	r3, r3
 8002626:	757b      	strb	r3, [r7, #21]
 8002628:	4b6c      	ldr	r3, [pc, #432]	; (80027dc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d004      	beq.n	800263e <LCD_IO_ReadCmd8MultipleData24to16+0x34e>
 8002634:	7d7b      	ldrb	r3, [r7, #21]
 8002636:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800263a:	b2db      	uxtb	r3, r3
 800263c:	757b      	strb	r3, [r7, #21]
 800263e:	4b69      	ldr	r3, [pc, #420]	; (80027e4 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 8002640:	2208      	movs	r2, #8
 8002642:	619a      	str	r2, [r3, #24]
    LCD_DATA8_READ(rgb888[2]);
 8002644:	4b67      	ldr	r3, [pc, #412]	; (80027e4 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 8002646:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800264a:	619a      	str	r2, [r3, #24]
 800264c:	2012      	movs	r0, #18
 800264e:	f7fe fc4f 	bl	8000ef0 <LCD_IO_Delay>
 8002652:	4b62      	ldr	r3, [pc, #392]	; (80027dc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <LCD_IO_ReadCmd8MultipleData24to16+0x374>
 800265e:	2301      	movs	r3, #1
 8002660:	75bb      	strb	r3, [r7, #22]
 8002662:	e001      	b.n	8002668 <LCD_IO_ReadCmd8MultipleData24to16+0x378>
 8002664:	2300      	movs	r3, #0
 8002666:	75bb      	strb	r3, [r7, #22]
 8002668:	4b5b      	ldr	r3, [pc, #364]	; (80027d8 <LCD_IO_ReadCmd8MultipleData24to16+0x4e8>)
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <LCD_IO_ReadCmd8MultipleData24to16+0x38e>
 8002674:	7dbb      	ldrb	r3, [r7, #22]
 8002676:	f043 0302 	orr.w	r3, r3, #2
 800267a:	b2db      	uxtb	r3, r3
 800267c:	75bb      	strb	r3, [r7, #22]
 800267e:	4b57      	ldr	r3, [pc, #348]	; (80027dc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d004      	beq.n	8002694 <LCD_IO_ReadCmd8MultipleData24to16+0x3a4>
 800268a:	7dbb      	ldrb	r3, [r7, #22]
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	b2db      	uxtb	r3, r3
 8002692:	75bb      	strb	r3, [r7, #22]
 8002694:	4b52      	ldr	r3, [pc, #328]	; (80027e0 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d004      	beq.n	80026aa <LCD_IO_ReadCmd8MultipleData24to16+0x3ba>
 80026a0:	7dbb      	ldrb	r3, [r7, #22]
 80026a2:	f043 0308 	orr.w	r3, r3, #8
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	75bb      	strb	r3, [r7, #22]
 80026aa:	4b4d      	ldr	r3, [pc, #308]	; (80027e0 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d004      	beq.n	80026c0 <LCD_IO_ReadCmd8MultipleData24to16+0x3d0>
 80026b6:	7dbb      	ldrb	r3, [r7, #22]
 80026b8:	f043 0310 	orr.w	r3, r3, #16
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	75bb      	strb	r3, [r7, #22]
 80026c0:	4b47      	ldr	r3, [pc, #284]	; (80027e0 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d004      	beq.n	80026d6 <LCD_IO_ReadCmd8MultipleData24to16+0x3e6>
 80026cc:	7dbb      	ldrb	r3, [r7, #22]
 80026ce:	f043 0320 	orr.w	r3, r3, #32
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	75bb      	strb	r3, [r7, #22]
 80026d6:	4b43      	ldr	r3, [pc, #268]	; (80027e4 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d004      	beq.n	80026ec <LCD_IO_ReadCmd8MultipleData24to16+0x3fc>
 80026e2:	7dbb      	ldrb	r3, [r7, #22]
 80026e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	75bb      	strb	r3, [r7, #22]
 80026ec:	4b3b      	ldr	r3, [pc, #236]	; (80027dc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d004      	beq.n	8002702 <LCD_IO_ReadCmd8MultipleData24to16+0x412>
 80026f8:	7dbb      	ldrb	r3, [r7, #22]
 80026fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	75bb      	strb	r3, [r7, #22]
 8002702:	4b38      	ldr	r3, [pc, #224]	; (80027e4 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 8002704:	2208      	movs	r2, #8
 8002706:	619a      	str	r2, [r3, #24]
    #if LCD_REVERSE16 == 0
    *pData = ((rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3);
 8002708:	7d3b      	ldrb	r3, [r7, #20]
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	b21a      	sxth	r2, r3
 800270e:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <LCD_IO_ReadCmd8MultipleData24to16+0x4f8>)
 8002710:	4013      	ands	r3, r2
 8002712:	b21a      	sxth	r2, r3
 8002714:	7d7b      	ldrb	r3, [r7, #21]
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	b21b      	sxth	r3, r3
 800271a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800271e:	b21b      	sxth	r3, r3
 8002720:	4313      	orrs	r3, r2
 8002722:	b21a      	sxth	r2, r3
 8002724:	7dbb      	ldrb	r3, [r7, #22]
 8002726:	08db      	lsrs	r3, r3, #3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	b21b      	sxth	r3, r3
 800272c:	4313      	orrs	r3, r2
 800272e:	b21b      	sxth	r3, r3
 8002730:	b29a      	uxth	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	801a      	strh	r2, [r3, #0]
    #else
    *pData = __REVSH((rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3);
    #endif
    pData++;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	3302      	adds	r3, #2
 800273a:	60bb      	str	r3, [r7, #8]
  while(Size--)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	1e5a      	subs	r2, r3, #1
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	f47f aeac 	bne.w	80024a0 <LCD_IO_ReadCmd8MultipleData24to16+0x1b0>
  }
  LCD_CS_OFF;
 8002748:	4b28      	ldr	r3, [pc, #160]	; (80027ec <LCD_IO_ReadCmd8MultipleData24to16+0x4fc>)
 800274a:	2202      	movs	r2, #2
 800274c:	619a      	str	r2, [r3, #24]
  LCD_DIRWRITE;
 800274e:	4b23      	ldr	r3, [pc, #140]	; (80027dc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002756:	4a21      	ldr	r2, [pc, #132]	; (80027dc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 8002758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	4b1e      	ldr	r3, [pc, #120]	; (80027d8 <LCD_IO_ReadCmd8MultipleData24to16+0x4e8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002766:	4a1c      	ldr	r2, [pc, #112]	; (80027d8 <LCD_IO_ReadCmd8MultipleData24to16+0x4e8>)
 8002768:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002776:	4a19      	ldr	r2, [pc, #100]	; (80027dc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 8002778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002786:	4a16      	ldr	r2, [pc, #88]	; (80027e0 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 8002788:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002796:	4a12      	ldr	r2, [pc, #72]	; (80027e0 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80027a6:	4a0e      	ldr	r2, [pc, #56]	; (80027e0 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80027a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80027b6:	4a0b      	ldr	r2, [pc, #44]	; (80027e4 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b07      	ldr	r3, [pc, #28]	; (80027dc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80027c6:	4a05      	ldr	r2, [pc, #20]	; (80027dc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 80027c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027cc:	6013      	str	r3, [r2, #0]
}
 80027ce:	bf00      	nop
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	58020c00 	.word	0x58020c00
 80027dc:	58021800 	.word	0x58021800
 80027e0:	58021000 	.word	0x58021000
 80027e4:	58020000 	.word	0x58020000
 80027e8:	fffff800 	.word	0xfffff800
 80027ec:	58020400 	.word	0x58020400

080027f0 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <BSP_LCD_Init+0x34>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <BSP_LCD_Init+0x38>)
 8002804:	2200      	movs	r2, #0
 8002806:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8002808:	4b07      	ldr	r3, [pc, #28]	; (8002828 <BSP_LCD_Init+0x38>)
 800280a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800280e:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <BSP_LCD_Init+0x38>)
 8002812:	4a06      	ldr	r2, [pc, #24]	; (800282c <BSP_LCD_Init+0x3c>)
 8002814:	609a      	str	r2, [r3, #8]
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
  #endif
  
  ret = LCD_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800281a:	79fb      	ldrb	r3, [r7, #7]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	2400006c 	.word	0x2400006c
 8002828:	240000b0 	.word	0x240000b0
 800282c:	24000020 	.word	0x24000020

08002830 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <BSP_LCD_GetXSize+0x14>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	4798      	blx	r3
 800283c:	4603      	mov	r3, r0
}
 800283e:	4618      	mov	r0, r3
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	2400006c 	.word	0x2400006c

08002848 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <BSP_LCD_GetYSize+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	4798      	blx	r3
 8002854:	4603      	mov	r3, r0
}
 8002856:	4618      	mov	r0, r3
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	2400006c 	.word	0x2400006c

08002860 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8002860:	b5b0      	push	{r4, r5, r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af02      	add	r7, sp, #8
 8002866:	4603      	mov	r3, r0
 8002868:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 800286a:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <BSP_LCD_Clear+0x38>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002870:	f7ff ffde 	bl	8002830 <BSP_LCD_GetXSize>
 8002874:	4603      	mov	r3, r0
 8002876:	461d      	mov	r5, r3
 8002878:	f7ff ffe6 	bl	8002848 <BSP_LCD_GetYSize>
 800287c:	4603      	mov	r3, r0
 800287e:	461a      	mov	r2, r3
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	4613      	mov	r3, r2
 8002886:	462a      	mov	r2, r5
 8002888:	2100      	movs	r1, #0
 800288a:	2000      	movs	r0, #0
 800288c:	47a0      	blx	r4
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bdb0      	pop	{r4, r5, r7, pc}
 8002896:	bf00      	nop
 8002898:	2400006c 	.word	0x2400006c

0800289c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	80fb      	strh	r3, [r7, #6]
 80028a6:	460b      	mov	r3, r1
 80028a8:	80bb      	strh	r3, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <BSP_LCD_DrawPixel+0x34>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d006      	beq.n	80028c6 <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 80028b8:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <BSP_LCD_DrawPixel+0x34>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	88b9      	ldrh	r1, [r7, #4]
 80028c2:	88f8      	ldrh	r0, [r7, #6]
 80028c4:	4798      	blx	r3
  }
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	2400006c 	.word	0x2400006c

080028d4 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	80fb      	strh	r3, [r7, #6]
 80028de:	460b      	mov	r3, r1
 80028e0:	80bb      	strh	r3, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <BSP_LCD_DrawHLine+0x6c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80028f4:	4b12      	ldr	r3, [pc, #72]	; (8002940 <BSP_LCD_DrawHLine+0x6c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6a1c      	ldr	r4, [r3, #32]
 80028fa:	4b12      	ldr	r3, [pc, #72]	; (8002944 <BSP_LCD_DrawHLine+0x70>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	b298      	uxth	r0, r3
 8002900:	887b      	ldrh	r3, [r7, #2]
 8002902:	88ba      	ldrh	r2, [r7, #4]
 8002904:	88f9      	ldrh	r1, [r7, #6]
 8002906:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8002908:	e015      	b.n	8002936 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	e00e      	b.n	800292e <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	b29a      	uxth	r2, r3
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	4413      	add	r3, r2
 8002918:	b29b      	uxth	r3, r3
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <BSP_LCD_DrawHLine+0x70>)
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	b292      	uxth	r2, r2
 8002920:	88b9      	ldrh	r1, [r7, #4]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ffba 	bl	800289c <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3301      	adds	r3, #1
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	429a      	cmp	r2, r3
 8002934:	d3ec      	bcc.n	8002910 <BSP_LCD_DrawHLine+0x3c>
}
 8002936:	bf00      	nop
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bd90      	pop	{r4, r7, pc}
 800293e:	bf00      	nop
 8002940:	2400006c 	.word	0x2400006c
 8002944:	240000b0 	.word	0x240000b0

08002948 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	80fb      	strh	r3, [r7, #6]
 8002952:	460b      	mov	r3, r1
 8002954:	80bb      	strh	r3, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <BSP_LCD_DrawVLine+0x6c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002968:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <BSP_LCD_DrawVLine+0x6c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <BSP_LCD_DrawVLine+0x70>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	b298      	uxth	r0, r3
 8002974:	887b      	ldrh	r3, [r7, #2]
 8002976:	88ba      	ldrh	r2, [r7, #4]
 8002978:	88f9      	ldrh	r1, [r7, #6]
 800297a:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 800297c:	e015      	b.n	80029aa <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	e00e      	b.n	80029a2 <BSP_LCD_DrawVLine+0x5a>
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	b29a      	uxth	r2, r3
 8002988:	88bb      	ldrh	r3, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	b299      	uxth	r1, r3
 800298e:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <BSP_LCD_DrawVLine+0x70>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	b29a      	uxth	r2, r3
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ff80 	bl	800289c <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3301      	adds	r3, #1
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	887b      	ldrh	r3, [r7, #2]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d3ec      	bcc.n	8002984 <BSP_LCD_DrawVLine+0x3c>
}
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd90      	pop	{r4, r7, pc}
 80029b2:	bf00      	nop
 80029b4:	2400006c 	.word	0x2400006c
 80029b8:	240000b0 	.word	0x240000b0

080029bc <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80029bc:	b590      	push	{r4, r7, lr}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4604      	mov	r4, r0
 80029c4:	4608      	mov	r0, r1
 80029c6:	4611      	mov	r1, r2
 80029c8:	461a      	mov	r2, r3
 80029ca:	4623      	mov	r3, r4
 80029cc:	80fb      	strh	r3, [r7, #6]
 80029ce:	4603      	mov	r3, r0
 80029d0:	80bb      	strh	r3, [r7, #4]
 80029d2:	460b      	mov	r3, r1
 80029d4:	807b      	strh	r3, [r7, #2]
 80029d6:	4613      	mov	r3, r2
 80029d8:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80029da:	887a      	ldrh	r2, [r7, #2]
 80029dc:	88b9      	ldrh	r1, [r7, #4]
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff77 	bl	80028d4 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos + Height - 1), Width);
 80029e6:	88ba      	ldrh	r2, [r7, #4]
 80029e8:	883b      	ldrh	r3, [r7, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b299      	uxth	r1, r3
 80029f2:	887a      	ldrh	r2, [r7, #2]
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ff6c 	bl	80028d4 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80029fc:	883a      	ldrh	r2, [r7, #0]
 80029fe:	88b9      	ldrh	r1, [r7, #4]
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff ffa0 	bl	8002948 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width - 1), Ypos, Height);
 8002a08:	88fa      	ldrh	r2, [r7, #6]
 8002a0a:	887b      	ldrh	r3, [r7, #2]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	883a      	ldrh	r2, [r7, #0]
 8002a16:	88b9      	ldrh	r1, [r7, #4]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff95 	bl	8002948 <BSP_LCD_DrawVLine>
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd90      	pop	{r4, r7, pc}
	...

08002a28 <BSP_LCD_DisplayOn>:
  * @brief  Enables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  lcd_drv->DisplayOn();
 8002a2c:	4b02      	ldr	r3, [pc, #8]	; (8002a38 <BSP_LCD_DisplayOn+0x10>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	4798      	blx	r3
}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	2400006c 	.word	0x2400006c

08002a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a42:	f000 fd85 	bl	8003550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a46:	f000 f94b 	bl	8002ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a4a:	f000 fa3b 	bl	8002ec4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002a4e:	f000 f9e5 	bl	8002e1c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8002a52:	f000 fa2f 	bl	8002eb4 <MX_USB_OTG_HS_USB_Init>
  MX_TIM17_Init();
 8002a56:	f000 f9b9 	bl	8002dcc <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim17);
  ili9486_Init();
 8002a5a:	f7fd fe09 	bl	8000670 <ili9486_Init>
  ili9486_DisplayOn();
 8002a5e:	f7fd fdc7 	bl	80005f0 <ili9486_DisplayOn>

  BSP_LCD_Init();
 8002a62:	f7ff fec5 	bl	80027f0 <BSP_LCD_Init>
  BSP_LCD_DisplayOn();
 8002a66:	f7ff ffdf 	bl	8002a28 <BSP_LCD_DisplayOn>

  baaa[0] = ili9486_GetLcdPixelWidth();
 8002a6a:	f7fd fdd5 	bl	8000618 <ili9486_GetLcdPixelWidth>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	4b8b      	ldr	r3, [pc, #556]	; (8002ca0 <main+0x264>)
 8002a74:	801a      	strh	r2, [r3, #0]
  baaa[1] = ili9486_GetLcdPixelHeight();
 8002a76:	f7fd fdd8 	bl	800062a <ili9486_GetLcdPixelHeight>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	4b88      	ldr	r3, [pc, #544]	; (8002ca0 <main+0x264>)
 8002a80:	805a      	strh	r2, [r3, #2]
  baaa[2] = ili9486_ReadID();
 8002a82:	f7fd fddb 	bl	800063c <ili9486_ReadID>
 8002a86:	4603      	mov	r3, r0
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	4b85      	ldr	r3, [pc, #532]	; (8002ca0 <main+0x264>)
 8002a8c:	809a      	strh	r2, [r3, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GetTick() - timestamp_one >= 3000){
 8002a8e:	f000 fde5 	bl	800365c <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	4b83      	ldr	r3, [pc, #524]	; (8002ca4 <main+0x268>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d908      	bls.n	8002ab4 <main+0x78>
		  timestamp_one = HAL_GetTick();
 8002aa2:	f000 fddb 	bl	800365c <HAL_GetTick>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4a7e      	ldr	r2, [pc, #504]	; (8002ca4 <main+0x268>)
 8002aaa:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002aac:	2102      	movs	r1, #2
 8002aae:	487e      	ldr	r0, [pc, #504]	; (8002ca8 <main+0x26c>)
 8002ab0:	f001 f8dd 	bl	8003c6e <HAL_GPIO_TogglePin>
	  }


	  if(HAL_GetTick() - timestamp_two >= 20){
 8002ab4:	f000 fdd2 	bl	800365c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4b7c      	ldr	r3, [pc, #496]	; (8002cac <main+0x270>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b13      	cmp	r3, #19
 8002ac2:	d908      	bls.n	8002ad6 <main+0x9a>
		  timestamp_two = HAL_GetTick();
 8002ac4:	f000 fdca 	bl	800365c <HAL_GetTick>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4a78      	ldr	r2, [pc, #480]	; (8002cac <main+0x270>)
 8002acc:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002ace:	2101      	movs	r1, #1
 8002ad0:	4877      	ldr	r0, [pc, #476]	; (8002cb0 <main+0x274>)
 8002ad2:	f001 f8cc 	bl	8003c6e <HAL_GPIO_TogglePin>
	  }

	  if(flag_blue == 4){
 8002ad6:	4b77      	ldr	r3, [pc, #476]	; (8002cb4 <main+0x278>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d10c      	bne.n	8002af8 <main+0xbc>
		  BSP_LCD_Clear(0xff00);
 8002ade:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8002ae2:	f7ff febd 	bl	8002860 <BSP_LCD_Clear>
		  BSP_LCD_DrawRect(50, 50, 50, 50);
 8002ae6:	2332      	movs	r3, #50	; 0x32
 8002ae8:	2232      	movs	r2, #50	; 0x32
 8002aea:	2132      	movs	r1, #50	; 0x32
 8002aec:	2032      	movs	r0, #50	; 0x32
 8002aee:	f7ff ff65 	bl	80029bc <BSP_LCD_DrawRect>

		  flag_blue = 0;
 8002af2:	4b70      	ldr	r3, [pc, #448]	; (8002cb4 <main+0x278>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_blue == 3){
 8002af8:	4b6e      	ldr	r3, [pc, #440]	; (8002cb4 <main+0x278>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d175      	bne.n	8002bec <main+0x1b0>
	  		  ili9486_FillRect(0, 0, 480, 320, 0x0000);
 8002b00:	2300      	movs	r3, #0
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b08:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7fe f820 	bl	8000b54 <ili9486_FillRect>
	  		  ili9486_DrawRGBImage(50, 100, 128, 128, (uint16_t*)image_data_ImageoftestN2);
 8002b14:	4b68      	ldr	r3, [pc, #416]	; (8002cb8 <main+0x27c>)
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	2280      	movs	r2, #128	; 0x80
 8002b1c:	2164      	movs	r1, #100	; 0x64
 8002b1e:	2032      	movs	r0, #50	; 0x32
 8002b20:	f7fe f8da 	bl	8000cd8 <ili9486_DrawRGBImage>
	  		  ili9486_DrawRGBImage(300, 100, 128, 90, (uint16_t*)image_data_owlflood);
 8002b24:	4b65      	ldr	r3, [pc, #404]	; (8002cbc <main+0x280>)
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	235a      	movs	r3, #90	; 0x5a
 8002b2a:	2280      	movs	r2, #128	; 0x80
 8002b2c:	2164      	movs	r1, #100	; 0x64
 8002b2e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002b32:	f7fe f8d1 	bl	8000cd8 <ili9486_DrawRGBImage>


	  		  for(int i = 0; i < 40; i = i + 2){
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	e015      	b.n	8002b68 <main+0x12c>
	  			  for(int j = 0; j < 60; j = j + 4)
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	e00c      	b.n	8002b5c <main+0x120>
	  			ili9486_WritePixel(210 + i, 80 + j, cl_GREEN);
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f103 00d2 	add.w	r0, r3, #210	; 0xd2
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	3350      	adds	r3, #80	; 0x50
 8002b4c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002b50:	4619      	mov	r1, r3
 8002b52:	f7fd fe47 	bl	80007e4 <ili9486_WritePixel>
	  			  for(int j = 0; j < 60; j = j + 4)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	2b3b      	cmp	r3, #59	; 0x3b
 8002b60:	ddef      	ble.n	8002b42 <main+0x106>
	  		  for(int i = 0; i < 40; i = i + 2){
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	3302      	adds	r3, #2
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2b27      	cmp	r3, #39	; 0x27
 8002b6c:	dde6      	ble.n	8002b3c <main+0x100>
//	  		  ili9486_WriteChar(50, 20, "R", Font12, cl_WHITE);
//	  		  ili9486_WriteChar(80, 20, "R", Font16, cl_WHITE);
//	  		  ili9486_WriteChar(110, 20, "R", Font20, cl_WHITE);
//	  		  ili9486_WriteChar(140, 20, "R", Font24, cl_WHITE);

	  		  ili9486_WriteChar(20, 50, "E", Font8, cl_WHITE);
 8002b6e:	4b54      	ldr	r3, [pc, #336]	; (8002cc0 <main+0x284>)
 8002b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b74:	9201      	str	r2, [sp, #4]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	9200      	str	r2, [sp, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a51      	ldr	r2, [pc, #324]	; (8002cc4 <main+0x288>)
 8002b7e:	2132      	movs	r1, #50	; 0x32
 8002b80:	2014      	movs	r0, #20
 8002b82:	f7fe f8fd 	bl	8000d80 <ili9486_WriteChar>
			  ili9486_WriteChar(50, 50, "E", Font12, cl_WHITE);
 8002b86:	4b50      	ldr	r3, [pc, #320]	; (8002cc8 <main+0x28c>)
 8002b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b8c:	9201      	str	r2, [sp, #4]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	9200      	str	r2, [sp, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a4b      	ldr	r2, [pc, #300]	; (8002cc4 <main+0x288>)
 8002b96:	2132      	movs	r1, #50	; 0x32
 8002b98:	2032      	movs	r0, #50	; 0x32
 8002b9a:	f7fe f8f1 	bl	8000d80 <ili9486_WriteChar>
			  ili9486_WriteChar(80, 50, "E", Font16, cl_WHITE);
 8002b9e:	4b4b      	ldr	r3, [pc, #300]	; (8002ccc <main+0x290>)
 8002ba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ba4:	9201      	str	r2, [sp, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	9200      	str	r2, [sp, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a45      	ldr	r2, [pc, #276]	; (8002cc4 <main+0x288>)
 8002bae:	2132      	movs	r1, #50	; 0x32
 8002bb0:	2050      	movs	r0, #80	; 0x50
 8002bb2:	f7fe f8e5 	bl	8000d80 <ili9486_WriteChar>
			  ili9486_WriteChar(110, 50, "E", Font20, cl_WHITE);
 8002bb6:	4b46      	ldr	r3, [pc, #280]	; (8002cd0 <main+0x294>)
 8002bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bbc:	9201      	str	r2, [sp, #4]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	9200      	str	r2, [sp, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a3f      	ldr	r2, [pc, #252]	; (8002cc4 <main+0x288>)
 8002bc6:	2132      	movs	r1, #50	; 0x32
 8002bc8:	206e      	movs	r0, #110	; 0x6e
 8002bca:	f7fe f8d9 	bl	8000d80 <ili9486_WriteChar>
			  ili9486_WriteChar(140, 50, "E", Font24, cl_WHITE);
 8002bce:	4b41      	ldr	r3, [pc, #260]	; (8002cd4 <main+0x298>)
 8002bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bd4:	9201      	str	r2, [sp, #4]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	9200      	str	r2, [sp, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a39      	ldr	r2, [pc, #228]	; (8002cc4 <main+0x288>)
 8002bde:	2132      	movs	r1, #50	; 0x32
 8002be0:	208c      	movs	r0, #140	; 0x8c
 8002be2:	f7fe f8cd 	bl	8000d80 <ili9486_WriteChar>

	  		  flag_blue = 0;
 8002be6:	4b33      	ldr	r3, [pc, #204]	; (8002cb4 <main+0x278>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
	  	  }

	  if(flag_blue == 1){
 8002bec:	4b31      	ldr	r3, [pc, #196]	; (8002cb4 <main+0x278>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d104      	bne.n	8002bfe <main+0x1c2>
		  ili_screen_1();
 8002bf4:	f000 fa88 	bl	8003108 <ili_screen_1>
		  flag_blue = 0;
 8002bf8:	4b2e      	ldr	r3, [pc, #184]	; (8002cb4 <main+0x278>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]

	  }

	  if(flag_blue == 2){
 8002bfe:	4b2d      	ldr	r3, [pc, #180]	; (8002cb4 <main+0x278>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	f47f af43 	bne.w	8002a8e <main+0x52>
		  //// Running Box ////
		  if(ff == 1){
 8002c08:	4b33      	ldr	r3, [pc, #204]	; (8002cd8 <main+0x29c>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d10d      	bne.n	8002c2c <main+0x1f0>
			  ili9486_FillRect(0, 0, 480, 320, 0xF792); // screen
 8002c10:	f24f 7392 	movw	r3, #63378	; 0xf792
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c1a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002c1e:	2100      	movs	r1, #0
 8002c20:	2000      	movs	r0, #0
 8002c22:	f7fd ff97 	bl	8000b54 <ili9486_FillRect>
			  ff = 0;
 8002c26:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <main+0x29c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
		  }
		  int ratte = 1;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
		  int sizo = 40;
 8002c30:	2328      	movs	r3, #40	; 0x28
 8002c32:	60bb      	str	r3, [r7, #8]
		  int offs = 140;
 8002c34:	238c      	movs	r3, #140	; 0x8c
 8002c36:	607b      	str	r3, [r7, #4]
		  static uint16_t xsh = 0;
		  ili9486_FillRect(xsh, offs, ratte ,sizo, 0xF792);
 8002c38:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <main+0x2a0>)
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f24f 7392 	movw	r3, #63378	; 0xf792
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	f7fd ff83 	bl	8000b54 <ili9486_FillRect>
		  xsh += ratte;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <main+0x2a0>)
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	4413      	add	r3, r2
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <main+0x2a0>)
 8002c5c:	801a      	strh	r2, [r3, #0]
		  ili9486_FillRect(xsh, offs, sizo, sizo, 0x0410); //// box
 8002c5e:	4b1f      	ldr	r3, [pc, #124]	; (8002cdc <main+0x2a0>)
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	f7fd ff70 	bl	8000b54 <ili9486_FillRect>
		  if(xsh >= 480){ // clear
 8002c74:	4b19      	ldr	r3, [pc, #100]	; (8002cdc <main+0x2a0>)
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002c7c:	f4ff af07 	bcc.w	8002a8e <main+0x52>
			  ili9486_FillRect(xsh, offs, sizo, sizo, 0xF792);
 8002c80:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <main+0x2a0>)
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f24f 7392 	movw	r3, #63378	; 0xf792
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	f7fd ff5f 	bl	8000b54 <ili9486_FillRect>
			  xsh = 0;
 8002c96:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <main+0x2a0>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	801a      	strh	r2, [r3, #0]
	  if(HAL_GetTick() - timestamp_one >= 3000){
 8002c9c:	e6f7      	b.n	8002a8e <main+0x52>
 8002c9e:	bf00      	nop
 8002ca0:	24000198 	.word	0x24000198
 8002ca4:	240001a8 	.word	0x240001a8
 8002ca8:	58021000 	.word	0x58021000
 8002cac:	240001ac 	.word	0x240001ac
 8002cb0:	58020400 	.word	0x58020400
 8002cb4:	240001a3 	.word	0x240001a3
 8002cb8:	0800b824 	.word	0x0800b824
 8002cbc:	08013824 	.word	0x08013824
 8002cc0:	24000020 	.word	0x24000020
 8002cc4:	08007b44 	.word	0x08007b44
 8002cc8:	24000000 	.word	0x24000000
 8002ccc:	24000008 	.word	0x24000008
 8002cd0:	24000010 	.word	0x24000010
 8002cd4:	24000018 	.word	0x24000018
 8002cd8:	240001a4 	.word	0x240001a4
 8002cdc:	240001b8 	.word	0x240001b8

08002ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b09c      	sub	sp, #112	; 0x70
 8002ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cea:	224c      	movs	r2, #76	; 0x4c
 8002cec:	2100      	movs	r1, #0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f004 fef8 	bl	8007ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cf4:	1d3b      	adds	r3, r7, #4
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f004 fef2 	bl	8007ae4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8002d00:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <SystemClock_Config+0xe4>)
 8002d02:	f04f 32ff 	mov.w	r2, #4294967295
 8002d06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002d0a:	2004      	movs	r0, #4
 8002d0c:	f000 ffe4 	bl	8003cd8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002d10:	2300      	movs	r3, #0
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <SystemClock_Config+0xe8>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	4a2b      	ldr	r2, [pc, #172]	; (8002dc8 <SystemClock_Config+0xe8>)
 8002d1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d1e:	6193      	str	r3, [r2, #24]
 8002d20:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <SystemClock_Config+0xe8>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002d2c:	bf00      	nop
 8002d2e:	4b26      	ldr	r3, [pc, #152]	; (8002dc8 <SystemClock_Config+0xe8>)
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d3a:	d1f8      	bne.n	8002d2e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002d3c:	2321      	movs	r3, #33	; 0x21
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002d40:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002d46:	2301      	movs	r3, #1
 8002d48:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002d52:	2301      	movs	r3, #1
 8002d54:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8002d56:	2346      	movs	r3, #70	; 0x46
 8002d58:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d5e:	2304      	movs	r3, #4
 8002d60:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002d62:	2302      	movs	r3, #2
 8002d64:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002d66:	230c      	movs	r3, #12
 8002d68:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d76:	4618      	mov	r0, r3
 8002d78:	f001 f808 	bl	8003d8c <HAL_RCC_OscConfig>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002d82:	f000 fa59 	bl	8003238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d86:	233f      	movs	r3, #63	; 0x3f
 8002d88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002d96:	2340      	movs	r3, #64	; 0x40
 8002d98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002d9a:	2340      	movs	r3, #64	; 0x40
 8002d9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002da2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002da4:	2340      	movs	r3, #64	; 0x40
 8002da6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002da8:	1d3b      	adds	r3, r7, #4
 8002daa:	2107      	movs	r1, #7
 8002dac:	4618      	mov	r0, r3
 8002dae:	f001 fbf1 	bl	8004594 <HAL_RCC_ClockConfig>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8002db8:	f000 fa3e 	bl	8003238 <Error_Handler>
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	3770      	adds	r7, #112	; 0x70
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	58024400 	.word	0x58024400
 8002dc8:	58024800 	.word	0x58024800

08002dcc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002dd0:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <MX_TIM17_Init+0x48>)
 8002dd2:	4a11      	ldr	r2, [pc, #68]	; (8002e18 <MX_TIM17_Init+0x4c>)
 8002dd4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 279;
 8002dd6:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <MX_TIM17_Init+0x48>)
 8002dd8:	f240 1217 	movw	r2, #279	; 0x117
 8002ddc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dde:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <MX_TIM17_Init+0x48>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <MX_TIM17_Init+0x48>)
 8002de6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dea:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dec:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <MX_TIM17_Init+0x48>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002df2:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <MX_TIM17_Init+0x48>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <MX_TIM17_Init+0x48>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002dfe:	4805      	ldr	r0, [pc, #20]	; (8002e14 <MX_TIM17_Init+0x48>)
 8002e00:	f003 fa82 	bl	8006308 <HAL_TIM_Base_Init>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8002e0a:	f000 fa15 	bl	8003238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	240000bc 	.word	0x240000bc
 8002e18:	40014800 	.word	0x40014800

08002e1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e20:	4b22      	ldr	r3, [pc, #136]	; (8002eac <MX_USART3_UART_Init+0x90>)
 8002e22:	4a23      	ldr	r2, [pc, #140]	; (8002eb0 <MX_USART3_UART_Init+0x94>)
 8002e24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e26:	4b21      	ldr	r3, [pc, #132]	; (8002eac <MX_USART3_UART_Init+0x90>)
 8002e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e2e:	4b1f      	ldr	r3, [pc, #124]	; (8002eac <MX_USART3_UART_Init+0x90>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e34:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <MX_USART3_UART_Init+0x90>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e3a:	4b1c      	ldr	r3, [pc, #112]	; (8002eac <MX_USART3_UART_Init+0x90>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e40:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <MX_USART3_UART_Init+0x90>)
 8002e42:	220c      	movs	r2, #12
 8002e44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e46:	4b19      	ldr	r3, [pc, #100]	; (8002eac <MX_USART3_UART_Init+0x90>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e4c:	4b17      	ldr	r3, [pc, #92]	; (8002eac <MX_USART3_UART_Init+0x90>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e52:	4b16      	ldr	r3, [pc, #88]	; (8002eac <MX_USART3_UART_Init+0x90>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e58:	4b14      	ldr	r3, [pc, #80]	; (8002eac <MX_USART3_UART_Init+0x90>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <MX_USART3_UART_Init+0x90>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e64:	4811      	ldr	r0, [pc, #68]	; (8002eac <MX_USART3_UART_Init+0x90>)
 8002e66:	f003 fca5 	bl	80067b4 <HAL_UART_Init>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e70:	f000 f9e2 	bl	8003238 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e74:	2100      	movs	r1, #0
 8002e76:	480d      	ldr	r0, [pc, #52]	; (8002eac <MX_USART3_UART_Init+0x90>)
 8002e78:	f004 fd46 	bl	8007908 <HAL_UARTEx_SetTxFifoThreshold>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002e82:	f000 f9d9 	bl	8003238 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e86:	2100      	movs	r1, #0
 8002e88:	4808      	ldr	r0, [pc, #32]	; (8002eac <MX_USART3_UART_Init+0x90>)
 8002e8a:	f004 fd7b 	bl	8007984 <HAL_UARTEx_SetRxFifoThreshold>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002e94:	f000 f9d0 	bl	8003238 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e98:	4804      	ldr	r0, [pc, #16]	; (8002eac <MX_USART3_UART_Init+0x90>)
 8002e9a:	f004 fcfc 	bl	8007896 <HAL_UARTEx_DisableFifoMode>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002ea4:	f000 f9c8 	bl	8003238 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ea8:	bf00      	nop
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	24000108 	.word	0x24000108
 8002eb0:	40004800 	.word	0x40004800

08002eb4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08e      	sub	sp, #56	; 0x38
 8002ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	609a      	str	r2, [r3, #8]
 8002ed6:	60da      	str	r2, [r3, #12]
 8002ed8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eda:	4b84      	ldr	r3, [pc, #528]	; (80030ec <MX_GPIO_Init+0x228>)
 8002edc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ee0:	4a82      	ldr	r2, [pc, #520]	; (80030ec <MX_GPIO_Init+0x228>)
 8002ee2:	f043 0304 	orr.w	r3, r3, #4
 8002ee6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002eea:	4b80      	ldr	r3, [pc, #512]	; (80030ec <MX_GPIO_Init+0x228>)
 8002eec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	623b      	str	r3, [r7, #32]
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ef8:	4b7c      	ldr	r3, [pc, #496]	; (80030ec <MX_GPIO_Init+0x228>)
 8002efa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002efe:	4a7b      	ldr	r2, [pc, #492]	; (80030ec <MX_GPIO_Init+0x228>)
 8002f00:	f043 0320 	orr.w	r3, r3, #32
 8002f04:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002f08:	4b78      	ldr	r3, [pc, #480]	; (80030ec <MX_GPIO_Init+0x228>)
 8002f0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f16:	4b75      	ldr	r3, [pc, #468]	; (80030ec <MX_GPIO_Init+0x228>)
 8002f18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002f1c:	4a73      	ldr	r2, [pc, #460]	; (80030ec <MX_GPIO_Init+0x228>)
 8002f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f22:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002f26:	4b71      	ldr	r3, [pc, #452]	; (80030ec <MX_GPIO_Init+0x228>)
 8002f28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f34:	4b6d      	ldr	r3, [pc, #436]	; (80030ec <MX_GPIO_Init+0x228>)
 8002f36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002f3a:	4a6c      	ldr	r2, [pc, #432]	; (80030ec <MX_GPIO_Init+0x228>)
 8002f3c:	f043 0302 	orr.w	r3, r3, #2
 8002f40:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002f44:	4b69      	ldr	r3, [pc, #420]	; (80030ec <MX_GPIO_Init+0x228>)
 8002f46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f52:	4b66      	ldr	r3, [pc, #408]	; (80030ec <MX_GPIO_Init+0x228>)
 8002f54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002f58:	4a64      	ldr	r2, [pc, #400]	; (80030ec <MX_GPIO_Init+0x228>)
 8002f5a:	f043 0308 	orr.w	r3, r3, #8
 8002f5e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002f62:	4b62      	ldr	r3, [pc, #392]	; (80030ec <MX_GPIO_Init+0x228>)
 8002f64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f70:	4b5e      	ldr	r3, [pc, #376]	; (80030ec <MX_GPIO_Init+0x228>)
 8002f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002f76:	4a5d      	ldr	r2, [pc, #372]	; (80030ec <MX_GPIO_Init+0x228>)
 8002f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f7c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002f80:	4b5a      	ldr	r3, [pc, #360]	; (80030ec <MX_GPIO_Init+0x228>)
 8002f82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f8e:	4b57      	ldr	r3, [pc, #348]	; (80030ec <MX_GPIO_Init+0x228>)
 8002f90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002f94:	4a55      	ldr	r2, [pc, #340]	; (80030ec <MX_GPIO_Init+0x228>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002f9e:	4b53      	ldr	r3, [pc, #332]	; (80030ec <MX_GPIO_Init+0x228>)
 8002fa0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fac:	4b4f      	ldr	r3, [pc, #316]	; (80030ec <MX_GPIO_Init+0x228>)
 8002fae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002fb2:	4a4e      	ldr	r2, [pc, #312]	; (80030ec <MX_GPIO_Init+0x228>)
 8002fb4:	f043 0310 	orr.w	r3, r3, #16
 8002fb8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002fbc:	4b4b      	ldr	r3, [pc, #300]	; (80030ec <MX_GPIO_Init+0x228>)
 8002fbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	607b      	str	r3, [r7, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fd0:	4847      	ldr	r0, [pc, #284]	; (80030f0 <MX_GPIO_Init+0x22c>)
 8002fd2:	f000 fe33 	bl	8003c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f244 0101 	movw	r1, #16385	; 0x4001
 8002fdc:	4845      	ldr	r0, [pc, #276]	; (80030f4 <MX_GPIO_Init+0x230>)
 8002fde:	f000 fe2d 	bl	8003c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2102      	movs	r1, #2
 8002fe6:	4844      	ldr	r0, [pc, #272]	; (80030f8 <MX_GPIO_Init+0x234>)
 8002fe8:	f000 fe28 	bl	8003c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002fec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ff2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003000:	4619      	mov	r1, r3
 8003002:	483e      	ldr	r0, [pc, #248]	; (80030fc <MX_GPIO_Init+0x238>)
 8003004:	f000 fc6a 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8003008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800300e:	2301      	movs	r3, #1
 8003010:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	2300      	movs	r3, #0
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003016:	2300      	movs	r3, #0
 8003018:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800301a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800301e:	4619      	mov	r1, r3
 8003020:	4833      	ldr	r0, [pc, #204]	; (80030f0 <MX_GPIO_Init+0x22c>)
 8003022:	f000 fc5b 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8003026:	f244 0301 	movw	r3, #16385	; 0x4001
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800302c:	2301      	movs	r3, #1
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003034:	2300      	movs	r3, #0
 8003036:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800303c:	4619      	mov	r1, r3
 800303e:	482d      	ldr	r0, [pc, #180]	; (80030f4 <MX_GPIO_Init+0x230>)
 8003040:	f000 fc4c 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003048:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800304c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304e:	2300      	movs	r3, #0
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8003052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003056:	4619      	mov	r1, r3
 8003058:	4829      	ldr	r0, [pc, #164]	; (8003100 <MX_GPIO_Init+0x23c>)
 800305a:	f000 fc3f 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800305e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003064:	2300      	movs	r3, #0
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800306c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003070:	4619      	mov	r1, r3
 8003072:	4824      	ldr	r0, [pc, #144]	; (8003104 <MX_GPIO_Init+0x240>)
 8003074:	f000 fc32 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8003078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307e:	2302      	movs	r3, #2
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003082:	2300      	movs	r3, #0
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003086:	2300      	movs	r3, #0
 8003088:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800308a:	230a      	movs	r3, #10
 800308c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800308e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003092:	4619      	mov	r1, r3
 8003094:	481b      	ldr	r0, [pc, #108]	; (8003104 <MX_GPIO_Init+0x240>)
 8003096:	f000 fc21 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800309a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a0:	2302      	movs	r3, #2
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a8:	2300      	movs	r3, #0
 80030aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b0:	4619      	mov	r1, r3
 80030b2:	4814      	ldr	r0, [pc, #80]	; (8003104 <MX_GPIO_Init+0x240>)
 80030b4:	f000 fc12 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80030b8:	2302      	movs	r3, #2
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030bc:	2301      	movs	r3, #1
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c4:	2300      	movs	r3, #0
 80030c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80030c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030cc:	4619      	mov	r1, r3
 80030ce:	480a      	ldr	r0, [pc, #40]	; (80030f8 <MX_GPIO_Init+0x234>)
 80030d0:	f000 fc04 	bl	80038dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80030d4:	2200      	movs	r2, #0
 80030d6:	2100      	movs	r1, #0
 80030d8:	2028      	movs	r0, #40	; 0x28
 80030da:	f000 fbca 	bl	8003872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030de:	2028      	movs	r0, #40	; 0x28
 80030e0:	f000 fbe1 	bl	80038a6 <HAL_NVIC_EnableIRQ>

}
 80030e4:	bf00      	nop
 80030e6:	3738      	adds	r7, #56	; 0x38
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	58024400 	.word	0x58024400
 80030f0:	58021400 	.word	0x58021400
 80030f4:	58020400 	.word	0x58020400
 80030f8:	58021000 	.word	0x58021000
 80030fc:	58020800 	.word	0x58020800
 8003100:	58021800 	.word	0x58021800
 8003104:	58020000 	.word	0x58020000

08003108 <ili_screen_1>:

/* USER CODE BEGIN 4 */
void ili_screen_1(){
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af02      	add	r7, sp, #8
	  ili9486_FillRect(0, 0, 480, 320, 0xffff);  // White BG
 800310e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003118:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800311c:	2100      	movs	r1, #0
 800311e:	2000      	movs	r0, #0
 8003120:	f7fd fd18 	bl	8000b54 <ili9486_FillRect>

	  ili9486_FillRect(30, 30, 100, 100, 0xF8E0); // Red
 8003124:	f64f 03e0 	movw	r3, #63712	; 0xf8e0
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	2364      	movs	r3, #100	; 0x64
 800312c:	2264      	movs	r2, #100	; 0x64
 800312e:	211e      	movs	r1, #30
 8003130:	201e      	movs	r0, #30
 8003132:	f7fd fd0f 	bl	8000b54 <ili9486_FillRect>
	  ili9486_FillRect(150, 30, 100, 100, 0x07E0); // Green RGB565
 8003136:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	2364      	movs	r3, #100	; 0x64
 800313e:	2264      	movs	r2, #100	; 0x64
 8003140:	211e      	movs	r1, #30
 8003142:	2096      	movs	r0, #150	; 0x96
 8003144:	f7fd fd06 	bl	8000b54 <ili9486_FillRect>
	  ili9486_FillRect(270, 30, 100, 100, 0x001F); // Blue
 8003148:	231f      	movs	r3, #31
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	2364      	movs	r3, #100	; 0x64
 800314e:	2264      	movs	r2, #100	; 0x64
 8003150:	211e      	movs	r1, #30
 8003152:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003156:	f7fd fcfd 	bl	8000b54 <ili9486_FillRect>

	  ili9486_FillRect(30, 160,  100, 100, cl_CYAN); // C0x07FF
 800315a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2364      	movs	r3, #100	; 0x64
 8003162:	2264      	movs	r2, #100	; 0x64
 8003164:	21a0      	movs	r1, #160	; 0xa0
 8003166:	201e      	movs	r0, #30
 8003168:	f7fd fcf4 	bl	8000b54 <ili9486_FillRect>
	  ili9486_FillRect(150, 160, 100, 100, cl_MAGENTA); // M 0xF81F
 800316c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	2364      	movs	r3, #100	; 0x64
 8003174:	2264      	movs	r2, #100	; 0x64
 8003176:	21a0      	movs	r1, #160	; 0xa0
 8003178:	2096      	movs	r0, #150	; 0x96
 800317a:	f7fd fceb 	bl	8000b54 <ili9486_FillRect>
	  ili9486_FillRect(270, 160, 100, 100, cl_YELLOW); // Y0xFFE0
 800317e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	2364      	movs	r3, #100	; 0x64
 8003186:	2264      	movs	r2, #100	; 0x64
 8003188:	21a0      	movs	r1, #160	; 0xa0
 800318a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800318e:	f7fd fce1 	bl	8000b54 <ili9486_FillRect>
	  ili9486_FillRect(390, 30, 70, 230, cl_BLACK); // K
 8003192:	2300      	movs	r3, #0
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	23e6      	movs	r3, #230	; 0xe6
 8003198:	2246      	movs	r2, #70	; 0x46
 800319a:	211e      	movs	r1, #30
 800319c:	f44f 70c3 	mov.w	r0, #390	; 0x186
 80031a0:	f7fd fcd8 	bl	8000b54 <ili9486_FillRect>
}
 80031a4:	bf00      	nop
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <HAL_GPIO_EXTI_Callback>:

uint64_t micros()
{return _micros + htim17.Instance->CNT;}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031bc:	d113      	bne.n	80031e6 <HAL_GPIO_EXTI_Callback+0x3a>
		bluecounter++;
 80031be:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <HAL_GPIO_EXTI_Callback+0x48>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	3301      	adds	r3, #1
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_GPIO_EXTI_Callback+0x48>)
 80031c8:	701a      	strb	r2, [r3, #0]
		bluecounter%=4;
 80031ca:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <HAL_GPIO_EXTI_Callback+0x48>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <HAL_GPIO_EXTI_Callback+0x48>)
 80031d6:	701a      	strb	r2, [r3, #0]
		flag_blue = bluecounter;
 80031d8:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <HAL_GPIO_EXTI_Callback+0x48>)
 80031da:	781a      	ldrb	r2, [r3, #0]
 80031dc:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80031de:	701a      	strb	r2, [r3, #0]
		ff = 1;
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_GPIO_EXTI_Callback+0x50>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	701a      	strb	r2, [r3, #0]
	}

}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	240001a2 	.word	0x240001a2
 80031f8:	240001a3 	.word	0x240001a3
 80031fc:	240001a4 	.word	0x240001a4

08003200 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003200:	b4b0      	push	{r4, r5, r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 if(htim == &htim17)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a09      	ldr	r2, [pc, #36]	; (8003230 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d10a      	bne.n	8003226 <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 8003210:	4b08      	ldr	r3, [pc, #32]	; (8003234 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003216:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800321a:	1854      	adds	r4, r2, r1
 800321c:	f143 0500 	adc.w	r5, r3, #0
 8003220:	4b04      	ldr	r3, [pc, #16]	; (8003234 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003222:	e9c3 4500 	strd	r4, r5, [r3]
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	bcb0      	pop	{r4, r5, r7}
 800322e:	4770      	bx	lr
 8003230:	240000bc 	.word	0x240000bc
 8003234:	240001b0 	.word	0x240001b0

08003238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800323c:	b672      	cpsid	i
}
 800323e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003240:	e7fe      	b.n	8003240 <Error_Handler+0x8>
	...

08003244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <HAL_MspInit+0x30>)
 800324c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003250:	4a08      	ldr	r2, [pc, #32]	; (8003274 <HAL_MspInit+0x30>)
 8003252:	f043 0302 	orr.w	r3, r3, #2
 8003256:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_MspInit+0x30>)
 800325c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	607b      	str	r3, [r7, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	58024400 	.word	0x58024400

08003278 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a0e      	ldr	r2, [pc, #56]	; (80032c0 <HAL_TIM_Base_MspInit+0x48>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d116      	bne.n	80032b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800328a:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <HAL_TIM_Base_MspInit+0x4c>)
 800328c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003290:	4a0c      	ldr	r2, [pc, #48]	; (80032c4 <HAL_TIM_Base_MspInit+0x4c>)
 8003292:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003296:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800329a:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <HAL_TIM_Base_MspInit+0x4c>)
 800329c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80032a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80032a8:	2200      	movs	r2, #0
 80032aa:	2100      	movs	r1, #0
 80032ac:	2076      	movs	r0, #118	; 0x76
 80032ae:	f000 fae0 	bl	8003872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80032b2:	2076      	movs	r0, #118	; 0x76
 80032b4:	f000 faf7 	bl	80038a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80032b8:	bf00      	nop
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40014800 	.word	0x40014800
 80032c4:	58024400 	.word	0x58024400

080032c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b0b8      	sub	sp, #224	; 0xe0
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032e0:	f107 0314 	add.w	r3, r7, #20
 80032e4:	22b8      	movs	r2, #184	; 0xb8
 80032e6:	2100      	movs	r1, #0
 80032e8:	4618      	mov	r0, r3
 80032ea:	f004 fbfb 	bl	8007ae4 <memset>
  if(huart->Instance==USART3)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a25      	ldr	r2, [pc, #148]	; (8003388 <HAL_UART_MspInit+0xc0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d142      	bne.n	800337e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80032f8:	2302      	movs	r3, #2
 80032fa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80032fc:	2300      	movs	r3, #0
 80032fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003302:	f107 0314 	add.w	r3, r7, #20
 8003306:	4618      	mov	r0, r3
 8003308:	f001 fcd0 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003312:	f7ff ff91 	bl	8003238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003316:	4b1d      	ldr	r3, [pc, #116]	; (800338c <HAL_UART_MspInit+0xc4>)
 8003318:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800331c:	4a1b      	ldr	r2, [pc, #108]	; (800338c <HAL_UART_MspInit+0xc4>)
 800331e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003322:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8003326:	4b19      	ldr	r3, [pc, #100]	; (800338c <HAL_UART_MspInit+0xc4>)
 8003328:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800332c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003334:	4b15      	ldr	r3, [pc, #84]	; (800338c <HAL_UART_MspInit+0xc4>)
 8003336:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800333a:	4a14      	ldr	r2, [pc, #80]	; (800338c <HAL_UART_MspInit+0xc4>)
 800333c:	f043 0308 	orr.w	r3, r3, #8
 8003340:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003344:	4b11      	ldr	r3, [pc, #68]	; (800338c <HAL_UART_MspInit+0xc4>)
 8003346:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003352:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003356:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335a:	2302      	movs	r3, #2
 800335c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003360:	2300      	movs	r3, #0
 8003362:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003366:	2300      	movs	r3, #0
 8003368:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800336c:	2307      	movs	r3, #7
 800336e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003372:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003376:	4619      	mov	r1, r3
 8003378:	4805      	ldr	r0, [pc, #20]	; (8003390 <HAL_UART_MspInit+0xc8>)
 800337a:	f000 faaf 	bl	80038dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800337e:	bf00      	nop
 8003380:	37e0      	adds	r7, #224	; 0xe0
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40004800 	.word	0x40004800
 800338c:	58024400 	.word	0x58024400
 8003390:	58020c00 	.word	0x58020c00

08003394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003398:	e7fe      	b.n	8003398 <NMI_Handler+0x4>

0800339a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800339a:	b480      	push	{r7}
 800339c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800339e:	e7fe      	b.n	800339e <HardFault_Handler+0x4>

080033a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033a4:	e7fe      	b.n	80033a4 <MemManage_Handler+0x4>

080033a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033a6:	b480      	push	{r7}
 80033a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033aa:	e7fe      	b.n	80033aa <BusFault_Handler+0x4>

080033ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033b0:	e7fe      	b.n	80033b0 <UsageFault_Handler+0x4>

080033b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033b2:	b480      	push	{r7}
 80033b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033d2:	bf00      	nop
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033e0:	f000 f928 	bl	8003634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80033ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80033f0:	f000 fc57 	bl	8003ca2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033f4:	bf00      	nop
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80033fc:	4802      	ldr	r0, [pc, #8]	; (8003408 <TIM17_IRQHandler+0x10>)
 80033fe:	f002 ffda 	bl	80063b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	240000bc 	.word	0x240000bc

0800340c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003410:	4b32      	ldr	r3, [pc, #200]	; (80034dc <SystemInit+0xd0>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003416:	4a31      	ldr	r2, [pc, #196]	; (80034dc <SystemInit+0xd0>)
 8003418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800341c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003420:	4b2f      	ldr	r3, [pc, #188]	; (80034e0 <SystemInit+0xd4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	2b02      	cmp	r3, #2
 800342a:	d807      	bhi.n	800343c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800342c:	4b2c      	ldr	r3, [pc, #176]	; (80034e0 <SystemInit+0xd4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f023 030f 	bic.w	r3, r3, #15
 8003434:	4a2a      	ldr	r2, [pc, #168]	; (80034e0 <SystemInit+0xd4>)
 8003436:	f043 0303 	orr.w	r3, r3, #3
 800343a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800343c:	4b29      	ldr	r3, [pc, #164]	; (80034e4 <SystemInit+0xd8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a28      	ldr	r2, [pc, #160]	; (80034e4 <SystemInit+0xd8>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003448:	4b26      	ldr	r3, [pc, #152]	; (80034e4 <SystemInit+0xd8>)
 800344a:	2200      	movs	r2, #0
 800344c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800344e:	4b25      	ldr	r3, [pc, #148]	; (80034e4 <SystemInit+0xd8>)
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4924      	ldr	r1, [pc, #144]	; (80034e4 <SystemInit+0xd8>)
 8003454:	4b24      	ldr	r3, [pc, #144]	; (80034e8 <SystemInit+0xdc>)
 8003456:	4013      	ands	r3, r2
 8003458:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800345a:	4b21      	ldr	r3, [pc, #132]	; (80034e0 <SystemInit+0xd4>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b00      	cmp	r3, #0
 8003464:	d007      	beq.n	8003476 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003466:	4b1e      	ldr	r3, [pc, #120]	; (80034e0 <SystemInit+0xd4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 030f 	bic.w	r3, r3, #15
 800346e:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <SystemInit+0xd4>)
 8003470:	f043 0303 	orr.w	r3, r3, #3
 8003474:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003476:	4b1b      	ldr	r3, [pc, #108]	; (80034e4 <SystemInit+0xd8>)
 8003478:	2200      	movs	r2, #0
 800347a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800347c:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <SystemInit+0xd8>)
 800347e:	2200      	movs	r2, #0
 8003480:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8003482:	4b18      	ldr	r3, [pc, #96]	; (80034e4 <SystemInit+0xd8>)
 8003484:	2200      	movs	r2, #0
 8003486:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003488:	4b16      	ldr	r3, [pc, #88]	; (80034e4 <SystemInit+0xd8>)
 800348a:	4a18      	ldr	r2, [pc, #96]	; (80034ec <SystemInit+0xe0>)
 800348c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <SystemInit+0xd8>)
 8003490:	4a17      	ldr	r2, [pc, #92]	; (80034f0 <SystemInit+0xe4>)
 8003492:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003494:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <SystemInit+0xd8>)
 8003496:	4a17      	ldr	r2, [pc, #92]	; (80034f4 <SystemInit+0xe8>)
 8003498:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800349a:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <SystemInit+0xd8>)
 800349c:	2200      	movs	r2, #0
 800349e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80034a0:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <SystemInit+0xd8>)
 80034a2:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <SystemInit+0xe8>)
 80034a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80034a6:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <SystemInit+0xd8>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80034ac:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <SystemInit+0xd8>)
 80034ae:	4a11      	ldr	r2, [pc, #68]	; (80034f4 <SystemInit+0xe8>)
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80034b2:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <SystemInit+0xd8>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80034b8:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <SystemInit+0xd8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a09      	ldr	r2, [pc, #36]	; (80034e4 <SystemInit+0xd8>)
 80034be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80034c4:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <SystemInit+0xd8>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <SystemInit+0xec>)
 80034cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80034d0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80034d2:	bf00      	nop
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000ed00 	.word	0xe000ed00
 80034e0:	52002000 	.word	0x52002000
 80034e4:	58024400 	.word	0x58024400
 80034e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80034ec:	02020200 	.word	0x02020200
 80034f0:	01ff0000 	.word	0x01ff0000
 80034f4:	01010280 	.word	0x01010280
 80034f8:	52004000 	.word	0x52004000

080034fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80034fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003534 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003500:	f7ff ff84 	bl	800340c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003504:	480c      	ldr	r0, [pc, #48]	; (8003538 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003506:	490d      	ldr	r1, [pc, #52]	; (800353c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003508:	4a0d      	ldr	r2, [pc, #52]	; (8003540 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800350a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800350c:	e002      	b.n	8003514 <LoopCopyDataInit>

0800350e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800350e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003512:	3304      	adds	r3, #4

08003514 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8003514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003518:	d3f9      	bcc.n	800350e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800351a:	4a0a      	ldr	r2, [pc, #40]	; (8003544 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800351c:	4c0a      	ldr	r4, [pc, #40]	; (8003548 <LoopFillZerobss+0x22>)
  movs r3, #0
 800351e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003520:	e001      	b.n	8003526 <LoopFillZerobss>

08003522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003524:	3204      	adds	r2, #4

08003526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003528:	d3fb      	bcc.n	8003522 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800352a:	f004 fab7 	bl	8007a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800352e:	f7ff fa85 	bl	8002a3c <main>
  bx  lr
 8003532:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003534:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8003538:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800353c:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 8003540:	0801926c 	.word	0x0801926c
  ldr r2, =_sbss
 8003544:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8003548:	240001c0 	.word	0x240001c0

0800354c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800354c:	e7fe      	b.n	800354c <ADC_IRQHandler>
	...

08003550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003556:	2003      	movs	r0, #3
 8003558:	f000 f980 	bl	800385c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800355c:	f001 f9d0 	bl	8004900 <HAL_RCC_GetSysClockFreq>
 8003560:	4602      	mov	r2, r0
 8003562:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <HAL_Init+0x68>)
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	0a1b      	lsrs	r3, r3, #8
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	4913      	ldr	r1, [pc, #76]	; (80035bc <HAL_Init+0x6c>)
 800356e:	5ccb      	ldrb	r3, [r1, r3]
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
 8003578:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800357a:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <HAL_Init+0x68>)
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	4a0e      	ldr	r2, [pc, #56]	; (80035bc <HAL_Init+0x6c>)
 8003584:	5cd3      	ldrb	r3, [r2, r3]
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
 8003590:	4a0b      	ldr	r2, [pc, #44]	; (80035c0 <HAL_Init+0x70>)
 8003592:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003594:	4a0b      	ldr	r2, [pc, #44]	; (80035c4 <HAL_Init+0x74>)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800359a:	2000      	movs	r0, #0
 800359c:	f000 f814 	bl	80035c8 <HAL_InitTick>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e002      	b.n	80035b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80035aa:	f7ff fe4b 	bl	8003244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	58024400 	.word	0x58024400
 80035bc:	08019224 	.word	0x08019224
 80035c0:	24000074 	.word	0x24000074
 80035c4:	24000070 	.word	0x24000070

080035c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80035d0:	4b15      	ldr	r3, [pc, #84]	; (8003628 <HAL_InitTick+0x60>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e021      	b.n	8003620 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80035dc:	4b13      	ldr	r3, [pc, #76]	; (800362c <HAL_InitTick+0x64>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4b11      	ldr	r3, [pc, #68]	; (8003628 <HAL_InitTick+0x60>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	4619      	mov	r1, r3
 80035e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80035ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 f965 	bl	80038c2 <HAL_SYSTICK_Config>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e00e      	b.n	8003620 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b0f      	cmp	r3, #15
 8003606:	d80a      	bhi.n	800361e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003608:	2200      	movs	r2, #0
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	f04f 30ff 	mov.w	r0, #4294967295
 8003610:	f000 f92f 	bl	8003872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003614:	4a06      	ldr	r2, [pc, #24]	; (8003630 <HAL_InitTick+0x68>)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	e000      	b.n	8003620 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	2400007c 	.word	0x2400007c
 800362c:	24000070 	.word	0x24000070
 8003630:	24000078 	.word	0x24000078

08003634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003638:	4b06      	ldr	r3, [pc, #24]	; (8003654 <HAL_IncTick+0x20>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_IncTick+0x24>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4413      	add	r3, r2
 8003644:	4a04      	ldr	r2, [pc, #16]	; (8003658 <HAL_IncTick+0x24>)
 8003646:	6013      	str	r3, [r2, #0]
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	2400007c 	.word	0x2400007c
 8003658:	240001bc 	.word	0x240001bc

0800365c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  return uwTick;
 8003660:	4b03      	ldr	r3, [pc, #12]	; (8003670 <HAL_GetTick+0x14>)
 8003662:	681b      	ldr	r3, [r3, #0]
}
 8003664:	4618      	mov	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	240001bc 	.word	0x240001bc

08003674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800367c:	f7ff ffee 	bl	800365c <HAL_GetTick>
 8003680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368c:	d005      	beq.n	800369a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800368e:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <HAL_Delay+0x44>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4413      	add	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800369a:	bf00      	nop
 800369c:	f7ff ffde 	bl	800365c <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d8f7      	bhi.n	800369c <HAL_Delay+0x28>
  {
  }
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	2400007c 	.word	0x2400007c

080036bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <__NVIC_SetPriorityGrouping+0x40>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036d8:	4013      	ands	r3, r2
 80036da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <__NVIC_SetPriorityGrouping+0x44>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ea:	4a04      	ldr	r2, [pc, #16]	; (80036fc <__NVIC_SetPriorityGrouping+0x40>)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	60d3      	str	r3, [r2, #12]
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	e000ed00 	.word	0xe000ed00
 8003700:	05fa0000 	.word	0x05fa0000

08003704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003708:	4b04      	ldr	r3, [pc, #16]	; (800371c <__NVIC_GetPriorityGrouping+0x18>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	0a1b      	lsrs	r3, r3, #8
 800370e:	f003 0307 	and.w	r3, r3, #7
}
 8003712:	4618      	mov	r0, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	e000ed00 	.word	0xe000ed00

08003720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800372a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800372e:	2b00      	cmp	r3, #0
 8003730:	db0b      	blt.n	800374a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	f003 021f 	and.w	r2, r3, #31
 8003738:	4907      	ldr	r1, [pc, #28]	; (8003758 <__NVIC_EnableIRQ+0x38>)
 800373a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	2001      	movs	r0, #1
 8003742:	fa00 f202 	lsl.w	r2, r0, r2
 8003746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	e000e100 	.word	0xe000e100

0800375c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	6039      	str	r1, [r7, #0]
 8003766:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800376c:	2b00      	cmp	r3, #0
 800376e:	db0a      	blt.n	8003786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	b2da      	uxtb	r2, r3
 8003774:	490c      	ldr	r1, [pc, #48]	; (80037a8 <__NVIC_SetPriority+0x4c>)
 8003776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800377a:	0112      	lsls	r2, r2, #4
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	440b      	add	r3, r1
 8003780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003784:	e00a      	b.n	800379c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	b2da      	uxtb	r2, r3
 800378a:	4908      	ldr	r1, [pc, #32]	; (80037ac <__NVIC_SetPriority+0x50>)
 800378c:	88fb      	ldrh	r3, [r7, #6]
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	3b04      	subs	r3, #4
 8003794:	0112      	lsls	r2, r2, #4
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	440b      	add	r3, r1
 800379a:	761a      	strb	r2, [r3, #24]
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	e000e100 	.word	0xe000e100
 80037ac:	e000ed00 	.word	0xe000ed00

080037b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b089      	sub	sp, #36	; 0x24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f1c3 0307 	rsb	r3, r3, #7
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	bf28      	it	cs
 80037ce:	2304      	movcs	r3, #4
 80037d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	3304      	adds	r3, #4
 80037d6:	2b06      	cmp	r3, #6
 80037d8:	d902      	bls.n	80037e0 <NVIC_EncodePriority+0x30>
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	3b03      	subs	r3, #3
 80037de:	e000      	b.n	80037e2 <NVIC_EncodePriority+0x32>
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e4:	f04f 32ff 	mov.w	r2, #4294967295
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43da      	mvns	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	401a      	ands	r2, r3
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037f8:	f04f 31ff 	mov.w	r1, #4294967295
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003802:	43d9      	mvns	r1, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003808:	4313      	orrs	r3, r2
         );
}
 800380a:	4618      	mov	r0, r3
 800380c:	3724      	adds	r7, #36	; 0x24
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3b01      	subs	r3, #1
 8003824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003828:	d301      	bcc.n	800382e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800382a:	2301      	movs	r3, #1
 800382c:	e00f      	b.n	800384e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800382e:	4a0a      	ldr	r2, [pc, #40]	; (8003858 <SysTick_Config+0x40>)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3b01      	subs	r3, #1
 8003834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003836:	210f      	movs	r1, #15
 8003838:	f04f 30ff 	mov.w	r0, #4294967295
 800383c:	f7ff ff8e 	bl	800375c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003840:	4b05      	ldr	r3, [pc, #20]	; (8003858 <SysTick_Config+0x40>)
 8003842:	2200      	movs	r2, #0
 8003844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003846:	4b04      	ldr	r3, [pc, #16]	; (8003858 <SysTick_Config+0x40>)
 8003848:	2207      	movs	r2, #7
 800384a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	e000e010 	.word	0xe000e010

0800385c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff ff29 	bl	80036bc <__NVIC_SetPriorityGrouping>
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b086      	sub	sp, #24
 8003876:	af00      	add	r7, sp, #0
 8003878:	4603      	mov	r3, r0
 800387a:	60b9      	str	r1, [r7, #8]
 800387c:	607a      	str	r2, [r7, #4]
 800387e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003880:	f7ff ff40 	bl	8003704 <__NVIC_GetPriorityGrouping>
 8003884:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	6978      	ldr	r0, [r7, #20]
 800388c:	f7ff ff90 	bl	80037b0 <NVIC_EncodePriority>
 8003890:	4602      	mov	r2, r0
 8003892:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003896:	4611      	mov	r1, r2
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff ff5f 	bl	800375c <__NVIC_SetPriority>
}
 800389e:	bf00      	nop
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b082      	sub	sp, #8
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	4603      	mov	r3, r0
 80038ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff ff33 	bl	8003720 <__NVIC_EnableIRQ>
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b082      	sub	sp, #8
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff ffa4 	bl	8003818 <SysTick_Config>
 80038d0:	4603      	mov	r3, r0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038dc:	b480      	push	{r7}
 80038de:	b089      	sub	sp, #36	; 0x24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80038ea:	4b89      	ldr	r3, [pc, #548]	; (8003b10 <HAL_GPIO_Init+0x234>)
 80038ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038ee:	e194      	b.n	8003c1a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	2101      	movs	r1, #1
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	fa01 f303 	lsl.w	r3, r1, r3
 80038fc:	4013      	ands	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 8186 	beq.w	8003c14 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	2b01      	cmp	r3, #1
 8003912:	d005      	beq.n	8003920 <HAL_GPIO_Init+0x44>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d130      	bne.n	8003982 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	2203      	movs	r2, #3
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003956:	2201      	movs	r2, #1
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	091b      	lsrs	r3, r3, #4
 800396c:	f003 0201 	and.w	r2, r3, #1
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4313      	orrs	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b03      	cmp	r3, #3
 800398c:	d017      	beq.n	80039be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	2203      	movs	r2, #3
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4013      	ands	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d123      	bne.n	8003a12 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	08da      	lsrs	r2, r3, #3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3208      	adds	r2, #8
 80039d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	220f      	movs	r2, #15
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4013      	ands	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	08da      	lsrs	r2, r3, #3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3208      	adds	r2, #8
 8003a0c:	69b9      	ldr	r1, [r7, #24]
 8003a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43db      	mvns	r3, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4013      	ands	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f003 0203 	and.w	r2, r3, #3
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80e0 	beq.w	8003c14 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a54:	4b2f      	ldr	r3, [pc, #188]	; (8003b14 <HAL_GPIO_Init+0x238>)
 8003a56:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003a5a:	4a2e      	ldr	r2, [pc, #184]	; (8003b14 <HAL_GPIO_Init+0x238>)
 8003a5c:	f043 0302 	orr.w	r3, r3, #2
 8003a60:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003a64:	4b2b      	ldr	r3, [pc, #172]	; (8003b14 <HAL_GPIO_Init+0x238>)
 8003a66:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a72:	4a29      	ldr	r2, [pc, #164]	; (8003b18 <HAL_GPIO_Init+0x23c>)
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	089b      	lsrs	r3, r3, #2
 8003a78:	3302      	adds	r3, #2
 8003a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	220f      	movs	r2, #15
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4013      	ands	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a20      	ldr	r2, [pc, #128]	; (8003b1c <HAL_GPIO_Init+0x240>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d052      	beq.n	8003b44 <HAL_GPIO_Init+0x268>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a1f      	ldr	r2, [pc, #124]	; (8003b20 <HAL_GPIO_Init+0x244>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d031      	beq.n	8003b0a <HAL_GPIO_Init+0x22e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a1e      	ldr	r2, [pc, #120]	; (8003b24 <HAL_GPIO_Init+0x248>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d02b      	beq.n	8003b06 <HAL_GPIO_Init+0x22a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a1d      	ldr	r2, [pc, #116]	; (8003b28 <HAL_GPIO_Init+0x24c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d025      	beq.n	8003b02 <HAL_GPIO_Init+0x226>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a1c      	ldr	r2, [pc, #112]	; (8003b2c <HAL_GPIO_Init+0x250>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d01f      	beq.n	8003afe <HAL_GPIO_Init+0x222>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <HAL_GPIO_Init+0x254>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d019      	beq.n	8003afa <HAL_GPIO_Init+0x21e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a1a      	ldr	r2, [pc, #104]	; (8003b34 <HAL_GPIO_Init+0x258>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d013      	beq.n	8003af6 <HAL_GPIO_Init+0x21a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a19      	ldr	r2, [pc, #100]	; (8003b38 <HAL_GPIO_Init+0x25c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00d      	beq.n	8003af2 <HAL_GPIO_Init+0x216>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <HAL_GPIO_Init+0x260>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d007      	beq.n	8003aee <HAL_GPIO_Init+0x212>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a17      	ldr	r2, [pc, #92]	; (8003b40 <HAL_GPIO_Init+0x264>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d101      	bne.n	8003aea <HAL_GPIO_Init+0x20e>
 8003ae6:	2309      	movs	r3, #9
 8003ae8:	e02d      	b.n	8003b46 <HAL_GPIO_Init+0x26a>
 8003aea:	230a      	movs	r3, #10
 8003aec:	e02b      	b.n	8003b46 <HAL_GPIO_Init+0x26a>
 8003aee:	2308      	movs	r3, #8
 8003af0:	e029      	b.n	8003b46 <HAL_GPIO_Init+0x26a>
 8003af2:	2307      	movs	r3, #7
 8003af4:	e027      	b.n	8003b46 <HAL_GPIO_Init+0x26a>
 8003af6:	2306      	movs	r3, #6
 8003af8:	e025      	b.n	8003b46 <HAL_GPIO_Init+0x26a>
 8003afa:	2305      	movs	r3, #5
 8003afc:	e023      	b.n	8003b46 <HAL_GPIO_Init+0x26a>
 8003afe:	2304      	movs	r3, #4
 8003b00:	e021      	b.n	8003b46 <HAL_GPIO_Init+0x26a>
 8003b02:	2303      	movs	r3, #3
 8003b04:	e01f      	b.n	8003b46 <HAL_GPIO_Init+0x26a>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e01d      	b.n	8003b46 <HAL_GPIO_Init+0x26a>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e01b      	b.n	8003b46 <HAL_GPIO_Init+0x26a>
 8003b0e:	bf00      	nop
 8003b10:	58000080 	.word	0x58000080
 8003b14:	58024400 	.word	0x58024400
 8003b18:	58000400 	.word	0x58000400
 8003b1c:	58020000 	.word	0x58020000
 8003b20:	58020400 	.word	0x58020400
 8003b24:	58020800 	.word	0x58020800
 8003b28:	58020c00 	.word	0x58020c00
 8003b2c:	58021000 	.word	0x58021000
 8003b30:	58021400 	.word	0x58021400
 8003b34:	58021800 	.word	0x58021800
 8003b38:	58021c00 	.word	0x58021c00
 8003b3c:	58022000 	.word	0x58022000
 8003b40:	58022400 	.word	0x58022400
 8003b44:	2300      	movs	r3, #0
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	f002 0203 	and.w	r2, r2, #3
 8003b4c:	0092      	lsls	r2, r2, #2
 8003b4e:	4093      	lsls	r3, r2
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b56:	4938      	ldr	r1, [pc, #224]	; (8003c38 <HAL_GPIO_Init+0x35c>)
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	089b      	lsrs	r3, r3, #2
 8003b5c:	3302      	adds	r3, #2
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4013      	ands	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003bb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	3301      	adds	r3, #1
 8003c18:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	fa22 f303 	lsr.w	r3, r2, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f47f ae63 	bne.w	80038f0 <HAL_GPIO_Init+0x14>
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	bf00      	nop
 8003c2e:	3724      	adds	r7, #36	; 0x24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	58000400 	.word	0x58000400

08003c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	807b      	strh	r3, [r7, #2]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c4c:	787b      	ldrb	r3, [r7, #1]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c52:	887a      	ldrh	r2, [r7, #2]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c58:	e003      	b.n	8003c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c5a:	887b      	ldrh	r3, [r7, #2]
 8003c5c:	041a      	lsls	r2, r3, #16
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	619a      	str	r2, [r3, #24]
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b085      	sub	sp, #20
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	460b      	mov	r3, r1
 8003c78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c80:	887a      	ldrh	r2, [r7, #2]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4013      	ands	r3, r2
 8003c86:	041a      	lsls	r2, r3, #16
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	43d9      	mvns	r1, r3
 8003c8c:	887b      	ldrh	r3, [r7, #2]
 8003c8e:	400b      	ands	r3, r1
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	619a      	str	r2, [r3, #24]
}
 8003c96:	bf00      	nop
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	4603      	mov	r3, r0
 8003caa:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d008      	beq.n	8003cce <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff fa6f 	bl	80031ac <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003ce0:	4b29      	ldr	r3, [pc, #164]	; (8003d88 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	2b06      	cmp	r3, #6
 8003cea:	d00a      	beq.n	8003d02 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003cec:	4b26      	ldr	r3, [pc, #152]	; (8003d88 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d001      	beq.n	8003cfe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e040      	b.n	8003d80 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e03e      	b.n	8003d80 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d02:	4b21      	ldr	r3, [pc, #132]	; (8003d88 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003d0a:	491f      	ldr	r1, [pc, #124]	; (8003d88 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d12:	f7ff fca3 	bl	800365c <HAL_GetTick>
 8003d16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d18:	e009      	b.n	8003d2e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d1a:	f7ff fc9f 	bl	800365c <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d28:	d901      	bls.n	8003d2e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e028      	b.n	8003d80 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d2e:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d3a:	d1ee      	bne.n	8003d1a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b1e      	cmp	r3, #30
 8003d40:	d008      	beq.n	8003d54 <HAL_PWREx_ConfigSupply+0x7c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b2e      	cmp	r3, #46	; 0x2e
 8003d46:	d005      	beq.n	8003d54 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b1d      	cmp	r3, #29
 8003d4c:	d002      	beq.n	8003d54 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b2d      	cmp	r3, #45	; 0x2d
 8003d52:	d114      	bne.n	8003d7e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003d54:	f7ff fc82 	bl	800365c <HAL_GetTick>
 8003d58:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d5a:	e009      	b.n	8003d70 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d5c:	f7ff fc7e 	bl	800365c <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d6a:	d901      	bls.n	8003d70 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e007      	b.n	8003d80 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d70:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7c:	d1ee      	bne.n	8003d5c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	58024800 	.word	0x58024800

08003d8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08c      	sub	sp, #48	; 0x30
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e3f4      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 80b3 	beq.w	8003f12 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dac:	4b95      	ldr	r3, [pc, #596]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003db6:	4b93      	ldr	r3, [pc, #588]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dbe:	2b10      	cmp	r3, #16
 8003dc0:	d007      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x46>
 8003dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc4:	2b18      	cmp	r3, #24
 8003dc6:	d112      	bne.n	8003dee <HAL_RCC_OscConfig+0x62>
 8003dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d10d      	bne.n	8003dee <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd2:	4b8c      	ldr	r3, [pc, #560]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8098 	beq.w	8003f10 <HAL_RCC_OscConfig+0x184>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f040 8093 	bne.w	8003f10 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e3cc      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df6:	d106      	bne.n	8003e06 <HAL_RCC_OscConfig+0x7a>
 8003df8:	4b82      	ldr	r3, [pc, #520]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a81      	ldr	r2, [pc, #516]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	e058      	b.n	8003eb8 <HAL_RCC_OscConfig+0x12c>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d112      	bne.n	8003e34 <HAL_RCC_OscConfig+0xa8>
 8003e0e:	4b7d      	ldr	r3, [pc, #500]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a7c      	ldr	r2, [pc, #496]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	4b7a      	ldr	r3, [pc, #488]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a79      	ldr	r2, [pc, #484]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003e20:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b77      	ldr	r3, [pc, #476]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a76      	ldr	r2, [pc, #472]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e041      	b.n	8003eb8 <HAL_RCC_OscConfig+0x12c>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e3c:	d112      	bne.n	8003e64 <HAL_RCC_OscConfig+0xd8>
 8003e3e:	4b71      	ldr	r3, [pc, #452]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a70      	ldr	r2, [pc, #448]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4b6e      	ldr	r3, [pc, #440]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a6d      	ldr	r2, [pc, #436]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003e50:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	4b6b      	ldr	r3, [pc, #428]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a6a      	ldr	r2, [pc, #424]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	e029      	b.n	8003eb8 <HAL_RCC_OscConfig+0x12c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003e6c:	d112      	bne.n	8003e94 <HAL_RCC_OscConfig+0x108>
 8003e6e:	4b65      	ldr	r3, [pc, #404]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a64      	ldr	r2, [pc, #400]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	4b62      	ldr	r3, [pc, #392]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a61      	ldr	r2, [pc, #388]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003e80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	4b5f      	ldr	r3, [pc, #380]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a5e      	ldr	r2, [pc, #376]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	e011      	b.n	8003eb8 <HAL_RCC_OscConfig+0x12c>
 8003e94:	4b5b      	ldr	r3, [pc, #364]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a5a      	ldr	r2, [pc, #360]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	4b58      	ldr	r3, [pc, #352]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a57      	ldr	r2, [pc, #348]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	4b55      	ldr	r3, [pc, #340]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a54      	ldr	r2, [pc, #336]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003eb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d013      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7ff fbcc 	bl	800365c <HAL_GetTick>
 8003ec4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7ff fbc8 	bl	800365c <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	; 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e356      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003eda:	4b4a      	ldr	r3, [pc, #296]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x13c>
 8003ee6:	e014      	b.n	8003f12 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee8:	f7ff fbb8 	bl	800365c <HAL_GetTick>
 8003eec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ef0:	f7ff fbb4 	bl	800365c <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b64      	cmp	r3, #100	; 0x64
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e342      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f02:	4b40      	ldr	r3, [pc, #256]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x164>
 8003f0e:	e000      	b.n	8003f12 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 808d 	beq.w	800403a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f20:	4b38      	ldr	r3, [pc, #224]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f28:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f2a:	4b36      	ldr	r3, [pc, #216]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d007      	beq.n	8003f46 <HAL_RCC_OscConfig+0x1ba>
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	2b18      	cmp	r3, #24
 8003f3a:	d137      	bne.n	8003fac <HAL_RCC_OscConfig+0x220>
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d132      	bne.n	8003fac <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f46:	4b2f      	ldr	r3, [pc, #188]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_RCC_OscConfig+0x1d2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e314      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f5e:	4b29      	ldr	r3, [pc, #164]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 0219 	bic.w	r2, r3, #25
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	4926      	ldr	r1, [pc, #152]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f70:	f7ff fb74 	bl	800365c <HAL_GetTick>
 8003f74:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f78:	f7ff fb70 	bl	800365c <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e2fe      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f8a:	4b1e      	ldr	r3, [pc, #120]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0f0      	beq.n	8003f78 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f96:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	061b      	lsls	r3, r3, #24
 8003fa4:	4917      	ldr	r1, [pc, #92]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003faa:	e046      	b.n	800403a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d029      	beq.n	8004008 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003fb4:	4b13      	ldr	r3, [pc, #76]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f023 0219 	bic.w	r2, r3, #25
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4910      	ldr	r1, [pc, #64]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc6:	f7ff fb49 	bl	800365c <HAL_GetTick>
 8003fca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fce:	f7ff fb45 	bl	800365c <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e2d3      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fe0:	4b08      	ldr	r3, [pc, #32]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fec:	4b05      	ldr	r3, [pc, #20]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	061b      	lsls	r3, r3, #24
 8003ffa:	4902      	ldr	r1, [pc, #8]	; (8004004 <HAL_RCC_OscConfig+0x278>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]
 8004000:	e01b      	b.n	800403a <HAL_RCC_OscConfig+0x2ae>
 8004002:	bf00      	nop
 8004004:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004008:	4b97      	ldr	r3, [pc, #604]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a96      	ldr	r2, [pc, #600]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7ff fb22 	bl	800365c <HAL_GetTick>
 8004018:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800401c:	f7ff fb1e 	bl	800365c <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e2ac      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800402e:	4b8e      	ldr	r3, [pc, #568]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	2b00      	cmp	r3, #0
 8004044:	d06a      	beq.n	800411c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004046:	4b88      	ldr	r3, [pc, #544]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800404e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004050:	4b85      	ldr	r3, [pc, #532]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b08      	cmp	r3, #8
 800405a:	d007      	beq.n	800406c <HAL_RCC_OscConfig+0x2e0>
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2b18      	cmp	r3, #24
 8004060:	d11b      	bne.n	800409a <HAL_RCC_OscConfig+0x30e>
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f003 0303 	and.w	r3, r3, #3
 8004068:	2b01      	cmp	r3, #1
 800406a:	d116      	bne.n	800409a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800406c:	4b7e      	ldr	r3, [pc, #504]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_RCC_OscConfig+0x2f8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	2b80      	cmp	r3, #128	; 0x80
 800407e:	d001      	beq.n	8004084 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e281      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004084:	4b78      	ldr	r3, [pc, #480]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	061b      	lsls	r3, r3, #24
 8004092:	4975      	ldr	r1, [pc, #468]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 8004094:	4313      	orrs	r3, r2
 8004096:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004098:	e040      	b.n	800411c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d023      	beq.n	80040ea <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80040a2:	4b71      	ldr	r3, [pc, #452]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a70      	ldr	r2, [pc, #448]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 80040a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ae:	f7ff fad5 	bl	800365c <HAL_GetTick>
 80040b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80040b6:	f7ff fad1 	bl	800365c <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e25f      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040c8:	4b67      	ldr	r3, [pc, #412]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0f0      	beq.n	80040b6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040d4:	4b64      	ldr	r3, [pc, #400]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	061b      	lsls	r3, r3, #24
 80040e2:	4961      	ldr	r1, [pc, #388]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60cb      	str	r3, [r1, #12]
 80040e8:	e018      	b.n	800411c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80040ea:	4b5f      	ldr	r3, [pc, #380]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a5e      	ldr	r2, [pc, #376]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 80040f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f6:	f7ff fab1 	bl	800365c <HAL_GetTick>
 80040fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80040fe:	f7ff faad 	bl	800365c <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e23b      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004110:	4b55      	ldr	r3, [pc, #340]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1f0      	bne.n	80040fe <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b00      	cmp	r3, #0
 8004126:	d036      	beq.n	8004196 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d019      	beq.n	8004164 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004130:	4b4d      	ldr	r3, [pc, #308]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 8004132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004134:	4a4c      	ldr	r2, [pc, #304]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 8004136:	f043 0301 	orr.w	r3, r3, #1
 800413a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413c:	f7ff fa8e 	bl	800365c <HAL_GetTick>
 8004140:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004144:	f7ff fa8a 	bl	800365c <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e218      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004156:	4b44      	ldr	r3, [pc, #272]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 8004158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0x3b8>
 8004162:	e018      	b.n	8004196 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004164:	4b40      	ldr	r3, [pc, #256]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 8004166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004168:	4a3f      	ldr	r2, [pc, #252]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 800416a:	f023 0301 	bic.w	r3, r3, #1
 800416e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004170:	f7ff fa74 	bl	800365c <HAL_GetTick>
 8004174:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004178:	f7ff fa70 	bl	800365c <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e1fe      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800418a:	4b37      	ldr	r3, [pc, #220]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 800418c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d036      	beq.n	8004210 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d019      	beq.n	80041de <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041aa:	4b2f      	ldr	r3, [pc, #188]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a2e      	ldr	r2, [pc, #184]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 80041b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041b6:	f7ff fa51 	bl	800365c <HAL_GetTick>
 80041ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80041be:	f7ff fa4d 	bl	800365c <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e1db      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80041d0:	4b25      	ldr	r3, [pc, #148]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCC_OscConfig+0x432>
 80041dc:	e018      	b.n	8004210 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041de:	4b22      	ldr	r3, [pc, #136]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a21      	ldr	r2, [pc, #132]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 80041e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041ea:	f7ff fa37 	bl	800365c <HAL_GetTick>
 80041ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80041f2:	f7ff fa33 	bl	800365c <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e1c1      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004204:	4b18      	ldr	r3, [pc, #96]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1f0      	bne.n	80041f2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 80af 	beq.w	800437c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800421e:	4b13      	ldr	r3, [pc, #76]	; (800426c <HAL_RCC_OscConfig+0x4e0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a12      	ldr	r2, [pc, #72]	; (800426c <HAL_RCC_OscConfig+0x4e0>)
 8004224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004228:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800422a:	f7ff fa17 	bl	800365c <HAL_GetTick>
 800422e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004232:	f7ff fa13 	bl	800365c <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b64      	cmp	r3, #100	; 0x64
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e1a1      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004244:	4b09      	ldr	r3, [pc, #36]	; (800426c <HAL_RCC_OscConfig+0x4e0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0f0      	beq.n	8004232 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d10b      	bne.n	8004270 <HAL_RCC_OscConfig+0x4e4>
 8004258:	4b03      	ldr	r3, [pc, #12]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425c:	4a02      	ldr	r2, [pc, #8]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 800425e:	f043 0301 	orr.w	r3, r3, #1
 8004262:	6713      	str	r3, [r2, #112]	; 0x70
 8004264:	e05b      	b.n	800431e <HAL_RCC_OscConfig+0x592>
 8004266:	bf00      	nop
 8004268:	58024400 	.word	0x58024400
 800426c:	58024800 	.word	0x58024800
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d112      	bne.n	800429e <HAL_RCC_OscConfig+0x512>
 8004278:	4b9d      	ldr	r3, [pc, #628]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427c:	4a9c      	ldr	r2, [pc, #624]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 800427e:	f023 0301 	bic.w	r3, r3, #1
 8004282:	6713      	str	r3, [r2, #112]	; 0x70
 8004284:	4b9a      	ldr	r3, [pc, #616]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	4a99      	ldr	r2, [pc, #612]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 800428a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800428e:	6713      	str	r3, [r2, #112]	; 0x70
 8004290:	4b97      	ldr	r3, [pc, #604]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004294:	4a96      	ldr	r2, [pc, #600]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 8004296:	f023 0304 	bic.w	r3, r3, #4
 800429a:	6713      	str	r3, [r2, #112]	; 0x70
 800429c:	e03f      	b.n	800431e <HAL_RCC_OscConfig+0x592>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b05      	cmp	r3, #5
 80042a4:	d112      	bne.n	80042cc <HAL_RCC_OscConfig+0x540>
 80042a6:	4b92      	ldr	r3, [pc, #584]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042aa:	4a91      	ldr	r2, [pc, #580]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80042ac:	f043 0304 	orr.w	r3, r3, #4
 80042b0:	6713      	str	r3, [r2, #112]	; 0x70
 80042b2:	4b8f      	ldr	r3, [pc, #572]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	4a8e      	ldr	r2, [pc, #568]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80042b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042bc:	6713      	str	r3, [r2, #112]	; 0x70
 80042be:	4b8c      	ldr	r3, [pc, #560]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	4a8b      	ldr	r2, [pc, #556]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	6713      	str	r3, [r2, #112]	; 0x70
 80042ca:	e028      	b.n	800431e <HAL_RCC_OscConfig+0x592>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b85      	cmp	r3, #133	; 0x85
 80042d2:	d112      	bne.n	80042fa <HAL_RCC_OscConfig+0x56e>
 80042d4:	4b86      	ldr	r3, [pc, #536]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d8:	4a85      	ldr	r2, [pc, #532]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80042da:	f043 0304 	orr.w	r3, r3, #4
 80042de:	6713      	str	r3, [r2, #112]	; 0x70
 80042e0:	4b83      	ldr	r3, [pc, #524]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80042e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e4:	4a82      	ldr	r2, [pc, #520]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80042e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ea:	6713      	str	r3, [r2, #112]	; 0x70
 80042ec:	4b80      	ldr	r3, [pc, #512]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80042ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f0:	4a7f      	ldr	r2, [pc, #508]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	6713      	str	r3, [r2, #112]	; 0x70
 80042f8:	e011      	b.n	800431e <HAL_RCC_OscConfig+0x592>
 80042fa:	4b7d      	ldr	r3, [pc, #500]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fe:	4a7c      	ldr	r2, [pc, #496]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 8004300:	f023 0301 	bic.w	r3, r3, #1
 8004304:	6713      	str	r3, [r2, #112]	; 0x70
 8004306:	4b7a      	ldr	r3, [pc, #488]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	4a79      	ldr	r2, [pc, #484]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 800430c:	f023 0304 	bic.w	r3, r3, #4
 8004310:	6713      	str	r3, [r2, #112]	; 0x70
 8004312:	4b77      	ldr	r3, [pc, #476]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004316:	4a76      	ldr	r2, [pc, #472]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 8004318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800431c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d015      	beq.n	8004352 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004326:	f7ff f999 	bl	800365c <HAL_GetTick>
 800432a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800432c:	e00a      	b.n	8004344 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800432e:	f7ff f995 	bl	800365c <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	f241 3288 	movw	r2, #5000	; 0x1388
 800433c:	4293      	cmp	r3, r2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e121      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004344:	4b6a      	ldr	r3, [pc, #424]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0ee      	beq.n	800432e <HAL_RCC_OscConfig+0x5a2>
 8004350:	e014      	b.n	800437c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004352:	f7ff f983 	bl	800365c <HAL_GetTick>
 8004356:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004358:	e00a      	b.n	8004370 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800435a:	f7ff f97f 	bl	800365c <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	f241 3288 	movw	r2, #5000	; 0x1388
 8004368:	4293      	cmp	r3, r2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e10b      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004370:	4b5f      	ldr	r3, [pc, #380]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 8004372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1ee      	bne.n	800435a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8100 	beq.w	8004586 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004386:	4b5a      	ldr	r3, [pc, #360]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800438e:	2b18      	cmp	r3, #24
 8004390:	f000 80bb 	beq.w	800450a <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	2b02      	cmp	r3, #2
 800439a:	f040 8095 	bne.w	80044c8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439e:	4b54      	ldr	r3, [pc, #336]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a53      	ldr	r2, [pc, #332]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80043a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043aa:	f7ff f957 	bl	800365c <HAL_GetTick>
 80043ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b2:	f7ff f953 	bl	800365c <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e0e1      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043c4:	4b4a      	ldr	r3, [pc, #296]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1f0      	bne.n	80043b2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043d0:	4b47      	ldr	r3, [pc, #284]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80043d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043d4:	4b47      	ldr	r3, [pc, #284]	; (80044f4 <HAL_RCC_OscConfig+0x768>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80043e0:	0112      	lsls	r2, r2, #4
 80043e2:	430a      	orrs	r2, r1
 80043e4:	4942      	ldr	r1, [pc, #264]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	628b      	str	r3, [r1, #40]	; 0x28
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	3b01      	subs	r3, #1
 80043f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	3b01      	subs	r3, #1
 80043fa:	025b      	lsls	r3, r3, #9
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	3b01      	subs	r3, #1
 8004406:	041b      	lsls	r3, r3, #16
 8004408:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004412:	3b01      	subs	r3, #1
 8004414:	061b      	lsls	r3, r3, #24
 8004416:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800441a:	4935      	ldr	r1, [pc, #212]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 800441c:	4313      	orrs	r3, r2
 800441e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004420:	4b33      	ldr	r3, [pc, #204]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	4a32      	ldr	r2, [pc, #200]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 8004426:	f023 0301 	bic.w	r3, r3, #1
 800442a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800442c:	4b30      	ldr	r3, [pc, #192]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 800442e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004430:	4b31      	ldr	r3, [pc, #196]	; (80044f8 <HAL_RCC_OscConfig+0x76c>)
 8004432:	4013      	ands	r3, r2
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004438:	00d2      	lsls	r2, r2, #3
 800443a:	492d      	ldr	r1, [pc, #180]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 800443c:	4313      	orrs	r3, r2
 800443e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004440:	4b2b      	ldr	r3, [pc, #172]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	f023 020c 	bic.w	r2, r3, #12
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	4928      	ldr	r1, [pc, #160]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 800444e:	4313      	orrs	r3, r2
 8004450:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004452:	4b27      	ldr	r3, [pc, #156]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	f023 0202 	bic.w	r2, r3, #2
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445e:	4924      	ldr	r1, [pc, #144]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 8004460:	4313      	orrs	r3, r2
 8004462:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004464:	4b22      	ldr	r3, [pc, #136]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	4a21      	ldr	r2, [pc, #132]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 800446a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004470:	4b1f      	ldr	r3, [pc, #124]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	4a1e      	ldr	r2, [pc, #120]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 8004476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800447a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800447c:	4b1c      	ldr	r3, [pc, #112]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	4a1b      	ldr	r2, [pc, #108]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 8004482:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004486:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004488:	4b19      	ldr	r3, [pc, #100]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	4a18      	ldr	r2, [pc, #96]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004494:	4b16      	ldr	r3, [pc, #88]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a15      	ldr	r2, [pc, #84]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 800449a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800449e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a0:	f7ff f8dc 	bl	800365c <HAL_GetTick>
 80044a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a8:	f7ff f8d8 	bl	800365c <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e066      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044ba:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCC_OscConfig+0x71c>
 80044c6:	e05e      	b.n	8004586 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c8:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a08      	ldr	r2, [pc, #32]	; (80044f0 <HAL_RCC_OscConfig+0x764>)
 80044ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d4:	f7ff f8c2 	bl	800365c <HAL_GetTick>
 80044d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044da:	e00f      	b.n	80044fc <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044dc:	f7ff f8be 	bl	800365c <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d908      	bls.n	80044fc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e04c      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
 80044ee:	bf00      	nop
 80044f0:	58024400 	.word	0x58024400
 80044f4:	fffffc0c 	.word	0xfffffc0c
 80044f8:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044fc:	4b24      	ldr	r3, [pc, #144]	; (8004590 <HAL_RCC_OscConfig+0x804>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e9      	bne.n	80044dc <HAL_RCC_OscConfig+0x750>
 8004508:	e03d      	b.n	8004586 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800450a:	4b21      	ldr	r3, [pc, #132]	; (8004590 <HAL_RCC_OscConfig+0x804>)
 800450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004510:	4b1f      	ldr	r3, [pc, #124]	; (8004590 <HAL_RCC_OscConfig+0x804>)
 8004512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004514:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	2b01      	cmp	r3, #1
 800451c:	d031      	beq.n	8004582 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f003 0203 	and.w	r2, r3, #3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d12a      	bne.n	8004582 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	091b      	lsrs	r3, r3, #4
 8004530:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004538:	429a      	cmp	r2, r3
 800453a:	d122      	bne.n	8004582 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d11a      	bne.n	8004582 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	0a5b      	lsrs	r3, r3, #9
 8004550:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004558:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800455a:	429a      	cmp	r2, r3
 800455c:	d111      	bne.n	8004582 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	0c1b      	lsrs	r3, r3, #16
 8004562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800456c:	429a      	cmp	r2, r3
 800456e:	d108      	bne.n	8004582 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	0e1b      	lsrs	r3, r3, #24
 8004574:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800457e:	429a      	cmp	r2, r3
 8004580:	d001      	beq.n	8004586 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3730      	adds	r7, #48	; 0x30
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	58024400 	.word	0x58024400

08004594 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e19c      	b.n	80048e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a8:	4b8a      	ldr	r3, [pc, #552]	; (80047d4 <HAL_RCC_ClockConfig+0x240>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d910      	bls.n	80045d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b6:	4b87      	ldr	r3, [pc, #540]	; (80047d4 <HAL_RCC_ClockConfig+0x240>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 020f 	bic.w	r2, r3, #15
 80045be:	4985      	ldr	r1, [pc, #532]	; (80047d4 <HAL_RCC_ClockConfig+0x240>)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c6:	4b83      	ldr	r3, [pc, #524]	; (80047d4 <HAL_RCC_ClockConfig+0x240>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d001      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e184      	b.n	80048e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d010      	beq.n	8004606 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	4b7b      	ldr	r3, [pc, #492]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d908      	bls.n	8004606 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045f4:	4b78      	ldr	r3, [pc, #480]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	4975      	ldr	r1, [pc, #468]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 8004602:	4313      	orrs	r3, r2
 8004604:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d010      	beq.n	8004634 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695a      	ldr	r2, [r3, #20]
 8004616:	4b70      	ldr	r3, [pc, #448]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800461e:	429a      	cmp	r2, r3
 8004620:	d908      	bls.n	8004634 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004622:	4b6d      	ldr	r3, [pc, #436]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	496a      	ldr	r1, [pc, #424]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 8004630:	4313      	orrs	r3, r2
 8004632:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	2b00      	cmp	r3, #0
 800463e:	d010      	beq.n	8004662 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699a      	ldr	r2, [r3, #24]
 8004644:	4b64      	ldr	r3, [pc, #400]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800464c:	429a      	cmp	r2, r3
 800464e:	d908      	bls.n	8004662 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004650:	4b61      	ldr	r3, [pc, #388]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	495e      	ldr	r1, [pc, #376]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 800465e:	4313      	orrs	r3, r2
 8004660:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0320 	and.w	r3, r3, #32
 800466a:	2b00      	cmp	r3, #0
 800466c:	d010      	beq.n	8004690 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69da      	ldr	r2, [r3, #28]
 8004672:	4b59      	ldr	r3, [pc, #356]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800467a:	429a      	cmp	r2, r3
 800467c:	d908      	bls.n	8004690 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800467e:	4b56      	ldr	r3, [pc, #344]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	4953      	ldr	r1, [pc, #332]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 800468c:	4313      	orrs	r3, r2
 800468e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d010      	beq.n	80046be <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	4b4d      	ldr	r3, [pc, #308]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	f003 030f 	and.w	r3, r3, #15
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d908      	bls.n	80046be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ac:	4b4a      	ldr	r3, [pc, #296]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	f023 020f 	bic.w	r2, r3, #15
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	4947      	ldr	r1, [pc, #284]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d055      	beq.n	8004776 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80046ca:	4b43      	ldr	r3, [pc, #268]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	4940      	ldr	r1, [pc, #256]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d107      	bne.n	80046f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046e4:	4b3c      	ldr	r3, [pc, #240]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d121      	bne.n	8004734 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e0f6      	b.n	80048e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d107      	bne.n	800470c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046fc:	4b36      	ldr	r3, [pc, #216]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d115      	bne.n	8004734 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0ea      	b.n	80048e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d107      	bne.n	8004724 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004714:	4b30      	ldr	r3, [pc, #192]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471c:	2b00      	cmp	r3, #0
 800471e:	d109      	bne.n	8004734 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e0de      	b.n	80048e2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004724:	4b2c      	ldr	r3, [pc, #176]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0d6      	b.n	80048e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004734:	4b28      	ldr	r3, [pc, #160]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	f023 0207 	bic.w	r2, r3, #7
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	4925      	ldr	r1, [pc, #148]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 8004742:	4313      	orrs	r3, r2
 8004744:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004746:	f7fe ff89 	bl	800365c <HAL_GetTick>
 800474a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474c:	e00a      	b.n	8004764 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800474e:	f7fe ff85 	bl	800365c <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	f241 3288 	movw	r2, #5000	; 0x1388
 800475c:	4293      	cmp	r3, r2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e0be      	b.n	80048e2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004764:	4b1c      	ldr	r3, [pc, #112]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	429a      	cmp	r2, r3
 8004774:	d1eb      	bne.n	800474e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d010      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	4b14      	ldr	r3, [pc, #80]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	429a      	cmp	r2, r3
 8004790:	d208      	bcs.n	80047a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004792:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	f023 020f 	bic.w	r2, r3, #15
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	490e      	ldr	r1, [pc, #56]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047a4:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_RCC_ClockConfig+0x240>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 030f 	and.w	r3, r3, #15
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d214      	bcs.n	80047dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b2:	4b08      	ldr	r3, [pc, #32]	; (80047d4 <HAL_RCC_ClockConfig+0x240>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f023 020f 	bic.w	r2, r3, #15
 80047ba:	4906      	ldr	r1, [pc, #24]	; (80047d4 <HAL_RCC_ClockConfig+0x240>)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	4313      	orrs	r3, r2
 80047c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	4b04      	ldr	r3, [pc, #16]	; (80047d4 <HAL_RCC_ClockConfig+0x240>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d005      	beq.n	80047dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e086      	b.n	80048e2 <HAL_RCC_ClockConfig+0x34e>
 80047d4:	52002000 	.word	0x52002000
 80047d8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d010      	beq.n	800480a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	4b3f      	ldr	r3, [pc, #252]	; (80048ec <HAL_RCC_ClockConfig+0x358>)
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d208      	bcs.n	800480a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047f8:	4b3c      	ldr	r3, [pc, #240]	; (80048ec <HAL_RCC_ClockConfig+0x358>)
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	4939      	ldr	r1, [pc, #228]	; (80048ec <HAL_RCC_ClockConfig+0x358>)
 8004806:	4313      	orrs	r3, r2
 8004808:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d010      	beq.n	8004838 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695a      	ldr	r2, [r3, #20]
 800481a:	4b34      	ldr	r3, [pc, #208]	; (80048ec <HAL_RCC_ClockConfig+0x358>)
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004822:	429a      	cmp	r2, r3
 8004824:	d208      	bcs.n	8004838 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004826:	4b31      	ldr	r3, [pc, #196]	; (80048ec <HAL_RCC_ClockConfig+0x358>)
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	492e      	ldr	r1, [pc, #184]	; (80048ec <HAL_RCC_ClockConfig+0x358>)
 8004834:	4313      	orrs	r3, r2
 8004836:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0310 	and.w	r3, r3, #16
 8004840:	2b00      	cmp	r3, #0
 8004842:	d010      	beq.n	8004866 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699a      	ldr	r2, [r3, #24]
 8004848:	4b28      	ldr	r3, [pc, #160]	; (80048ec <HAL_RCC_ClockConfig+0x358>)
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004850:	429a      	cmp	r2, r3
 8004852:	d208      	bcs.n	8004866 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004854:	4b25      	ldr	r3, [pc, #148]	; (80048ec <HAL_RCC_ClockConfig+0x358>)
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	4922      	ldr	r1, [pc, #136]	; (80048ec <HAL_RCC_ClockConfig+0x358>)
 8004862:	4313      	orrs	r3, r2
 8004864:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b00      	cmp	r3, #0
 8004870:	d010      	beq.n	8004894 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69da      	ldr	r2, [r3, #28]
 8004876:	4b1d      	ldr	r3, [pc, #116]	; (80048ec <HAL_RCC_ClockConfig+0x358>)
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800487e:	429a      	cmp	r2, r3
 8004880:	d208      	bcs.n	8004894 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004882:	4b1a      	ldr	r3, [pc, #104]	; (80048ec <HAL_RCC_ClockConfig+0x358>)
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	4917      	ldr	r1, [pc, #92]	; (80048ec <HAL_RCC_ClockConfig+0x358>)
 8004890:	4313      	orrs	r3, r2
 8004892:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004894:	f000 f834 	bl	8004900 <HAL_RCC_GetSysClockFreq>
 8004898:	4602      	mov	r2, r0
 800489a:	4b14      	ldr	r3, [pc, #80]	; (80048ec <HAL_RCC_ClockConfig+0x358>)
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	0a1b      	lsrs	r3, r3, #8
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	4912      	ldr	r1, [pc, #72]	; (80048f0 <HAL_RCC_ClockConfig+0x35c>)
 80048a6:	5ccb      	ldrb	r3, [r1, r3]
 80048a8:	f003 031f 	and.w	r3, r3, #31
 80048ac:	fa22 f303 	lsr.w	r3, r2, r3
 80048b0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80048b2:	4b0e      	ldr	r3, [pc, #56]	; (80048ec <HAL_RCC_ClockConfig+0x358>)
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	4a0d      	ldr	r2, [pc, #52]	; (80048f0 <HAL_RCC_ClockConfig+0x35c>)
 80048bc:	5cd3      	ldrb	r3, [r2, r3]
 80048be:	f003 031f 	and.w	r3, r3, #31
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	fa22 f303 	lsr.w	r3, r2, r3
 80048c8:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <HAL_RCC_ClockConfig+0x360>)
 80048ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048cc:	4a0a      	ldr	r2, [pc, #40]	; (80048f8 <HAL_RCC_ClockConfig+0x364>)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80048d2:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <HAL_RCC_ClockConfig+0x368>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe fe76 	bl	80035c8 <HAL_InitTick>
 80048dc:	4603      	mov	r3, r0
 80048de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	58024400 	.word	0x58024400
 80048f0:	08019224 	.word	0x08019224
 80048f4:	24000074 	.word	0x24000074
 80048f8:	24000070 	.word	0x24000070
 80048fc:	24000078 	.word	0x24000078

08004900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004900:	b480      	push	{r7}
 8004902:	b089      	sub	sp, #36	; 0x24
 8004904:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004906:	4bb3      	ldr	r3, [pc, #716]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800490e:	2b18      	cmp	r3, #24
 8004910:	f200 8155 	bhi.w	8004bbe <HAL_RCC_GetSysClockFreq+0x2be>
 8004914:	a201      	add	r2, pc, #4	; (adr r2, 800491c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	08004981 	.word	0x08004981
 8004920:	08004bbf 	.word	0x08004bbf
 8004924:	08004bbf 	.word	0x08004bbf
 8004928:	08004bbf 	.word	0x08004bbf
 800492c:	08004bbf 	.word	0x08004bbf
 8004930:	08004bbf 	.word	0x08004bbf
 8004934:	08004bbf 	.word	0x08004bbf
 8004938:	08004bbf 	.word	0x08004bbf
 800493c:	080049a7 	.word	0x080049a7
 8004940:	08004bbf 	.word	0x08004bbf
 8004944:	08004bbf 	.word	0x08004bbf
 8004948:	08004bbf 	.word	0x08004bbf
 800494c:	08004bbf 	.word	0x08004bbf
 8004950:	08004bbf 	.word	0x08004bbf
 8004954:	08004bbf 	.word	0x08004bbf
 8004958:	08004bbf 	.word	0x08004bbf
 800495c:	080049ad 	.word	0x080049ad
 8004960:	08004bbf 	.word	0x08004bbf
 8004964:	08004bbf 	.word	0x08004bbf
 8004968:	08004bbf 	.word	0x08004bbf
 800496c:	08004bbf 	.word	0x08004bbf
 8004970:	08004bbf 	.word	0x08004bbf
 8004974:	08004bbf 	.word	0x08004bbf
 8004978:	08004bbf 	.word	0x08004bbf
 800497c:	080049b3 	.word	0x080049b3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004980:	4b94      	ldr	r3, [pc, #592]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b00      	cmp	r3, #0
 800498a:	d009      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800498c:	4b91      	ldr	r3, [pc, #580]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	08db      	lsrs	r3, r3, #3
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	4a90      	ldr	r2, [pc, #576]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004998:	fa22 f303 	lsr.w	r3, r2, r3
 800499c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800499e:	e111      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80049a0:	4b8d      	ldr	r3, [pc, #564]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049a2:	61bb      	str	r3, [r7, #24]
    break;
 80049a4:	e10e      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80049a6:	4b8d      	ldr	r3, [pc, #564]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80049a8:	61bb      	str	r3, [r7, #24]
    break;
 80049aa:	e10b      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80049ac:	4b8c      	ldr	r3, [pc, #560]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80049ae:	61bb      	str	r3, [r7, #24]
    break;
 80049b0:	e108      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049b2:	4b88      	ldr	r3, [pc, #544]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80049bc:	4b85      	ldr	r3, [pc, #532]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c0:	091b      	lsrs	r3, r3, #4
 80049c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80049c8:	4b82      	ldr	r3, [pc, #520]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80049d2:	4b80      	ldr	r3, [pc, #512]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d6:	08db      	lsrs	r3, r3, #3
 80049d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	fb02 f303 	mul.w	r3, r2, r3
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 80e1 	beq.w	8004bb8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	f000 8083 	beq.w	8004b04 <HAL_RCC_GetSysClockFreq+0x204>
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	f200 80a1 	bhi.w	8004b48 <HAL_RCC_GetSysClockFreq+0x248>
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_RCC_GetSysClockFreq+0x114>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d056      	beq.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004a12:	e099      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a14:	4b6f      	ldr	r3, [pc, #444]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0320 	and.w	r3, r3, #32
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d02d      	beq.n	8004a7c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a20:	4b6c      	ldr	r3, [pc, #432]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	08db      	lsrs	r3, r3, #3
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	4a6b      	ldr	r2, [pc, #428]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a30:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	ee07 3a90 	vmov	s15, r3
 8004a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a4a:	4b62      	ldr	r3, [pc, #392]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a5e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004a7a:	e087      	b.n	8004b8c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a86:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004be8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a8e:	4b51      	ldr	r3, [pc, #324]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aa2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004abe:	e065      	b.n	8004b8c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aca:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004bec <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad2:	4b40      	ldr	r3, [pc, #256]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ae6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b02:	e043      	b.n	8004b8c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004bf0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b16:	4b2f      	ldr	r3, [pc, #188]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1e:	ee07 3a90 	vmov	s15, r3
 8004b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b26:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b2a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b46:	e021      	b.n	8004b8c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b52:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004bec <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b5a:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b62:	ee07 3a90 	vmov	s15, r3
 8004b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b6e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b8a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004b8c:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	0a5b      	lsrs	r3, r3, #9
 8004b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b96:	3301      	adds	r3, #1
 8004b98:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	ee07 3a90 	vmov	s15, r3
 8004ba0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ba4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bb0:	ee17 3a90 	vmov	r3, s15
 8004bb4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004bb6:	e005      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	61bb      	str	r3, [r7, #24]
    break;
 8004bbc:	e002      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004bbe:	4b07      	ldr	r3, [pc, #28]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004bc0:	61bb      	str	r3, [r7, #24]
    break;
 8004bc2:	bf00      	nop
  }

  return sysclockfreq;
 8004bc4:	69bb      	ldr	r3, [r7, #24]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3724      	adds	r7, #36	; 0x24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	58024400 	.word	0x58024400
 8004bd8:	03d09000 	.word	0x03d09000
 8004bdc:	003d0900 	.word	0x003d0900
 8004be0:	007a1200 	.word	0x007a1200
 8004be4:	46000000 	.word	0x46000000
 8004be8:	4c742400 	.word	0x4c742400
 8004bec:	4a742400 	.word	0x4a742400
 8004bf0:	4af42400 	.word	0x4af42400

08004bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004bfa:	f7ff fe81 	bl	8004900 <HAL_RCC_GetSysClockFreq>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	4b10      	ldr	r3, [pc, #64]	; (8004c44 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	0a1b      	lsrs	r3, r3, #8
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	490f      	ldr	r1, [pc, #60]	; (8004c48 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c0c:	5ccb      	ldrb	r3, [r1, r3]
 8004c0e:	f003 031f 	and.w	r3, r3, #31
 8004c12:	fa22 f303 	lsr.w	r3, r2, r3
 8004c16:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004c18:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	f003 030f 	and.w	r3, r3, #15
 8004c20:	4a09      	ldr	r2, [pc, #36]	; (8004c48 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c22:	5cd3      	ldrb	r3, [r2, r3]
 8004c24:	f003 031f 	and.w	r3, r3, #31
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2e:	4a07      	ldr	r2, [pc, #28]	; (8004c4c <HAL_RCC_GetHCLKFreq+0x58>)
 8004c30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c32:	4a07      	ldr	r2, [pc, #28]	; (8004c50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004c38:	4b04      	ldr	r3, [pc, #16]	; (8004c4c <HAL_RCC_GetHCLKFreq+0x58>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	58024400 	.word	0x58024400
 8004c48:	08019224 	.word	0x08019224
 8004c4c:	24000074 	.word	0x24000074
 8004c50:	24000070 	.word	0x24000070

08004c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004c58:	f7ff ffcc 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	091b      	lsrs	r3, r3, #4
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	4904      	ldr	r1, [pc, #16]	; (8004c7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c6a:	5ccb      	ldrb	r3, [r1, r3]
 8004c6c:	f003 031f 	and.w	r3, r3, #31
 8004c70:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	58024400 	.word	0x58024400
 8004c7c:	08019224 	.word	0x08019224

08004c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004c84:	f7ff ffb6 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	4904      	ldr	r1, [pc, #16]	; (8004ca8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c96:	5ccb      	ldrb	r3, [r1, r3]
 8004c98:	f003 031f 	and.w	r3, r3, #31
 8004c9c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	58024400 	.word	0x58024400
 8004ca8:	08019224 	.word	0x08019224

08004cac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cb8:	2300      	movs	r3, #0
 8004cba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d03f      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ccc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cd0:	d02a      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004cd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cd6:	d824      	bhi.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004cd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cdc:	d018      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004cde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ce2:	d81e      	bhi.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ce8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cec:	d007      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004cee:	e018      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf0:	4b9f      	ldr	r3, [pc, #636]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	4a9e      	ldr	r2, [pc, #632]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004cfc:	e015      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3304      	adds	r3, #4
 8004d02:	2102      	movs	r1, #2
 8004d04:	4618      	mov	r0, r3
 8004d06:	f001 f99b 	bl	8006040 <RCCEx_PLL2_Config>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d0e:	e00c      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3324      	adds	r3, #36	; 0x24
 8004d14:	2102      	movs	r1, #2
 8004d16:	4618      	mov	r0, r3
 8004d18:	f001 fa44 	bl	80061a4 <RCCEx_PLL3_Config>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d20:	e003      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	75fb      	strb	r3, [r7, #23]
      break;
 8004d26:	e000      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d2a:	7dfb      	ldrb	r3, [r7, #23]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d109      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004d30:	4b8f      	ldr	r3, [pc, #572]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d3c:	498c      	ldr	r1, [pc, #560]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	650b      	str	r3, [r1, #80]	; 0x50
 8004d42:	e001      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d44:	7dfb      	ldrb	r3, [r7, #23]
 8004d46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d03d      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d826      	bhi.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004d5c:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d62:	bf00      	nop
 8004d64:	08004d79 	.word	0x08004d79
 8004d68:	08004d87 	.word	0x08004d87
 8004d6c:	08004d99 	.word	0x08004d99
 8004d70:	08004db1 	.word	0x08004db1
 8004d74:	08004db1 	.word	0x08004db1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d78:	4b7d      	ldr	r3, [pc, #500]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	4a7c      	ldr	r2, [pc, #496]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d84:	e015      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f001 f957 	bl	8006040 <RCCEx_PLL2_Config>
 8004d92:	4603      	mov	r3, r0
 8004d94:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d96:	e00c      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3324      	adds	r3, #36	; 0x24
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f001 fa00 	bl	80061a4 <RCCEx_PLL3_Config>
 8004da4:	4603      	mov	r3, r0
 8004da6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004da8:	e003      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	75fb      	strb	r3, [r7, #23]
      break;
 8004dae:	e000      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d109      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004db8:	4b6d      	ldr	r3, [pc, #436]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dbc:	f023 0207 	bic.w	r2, r3, #7
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc4:	496a      	ldr	r1, [pc, #424]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	650b      	str	r3, [r1, #80]	; 0x50
 8004dca:	e001      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dcc:	7dfb      	ldrb	r3, [r7, #23]
 8004dce:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d04a      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004de4:	d031      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8004de6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004dea:	d82b      	bhi.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df0:	d02d      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8004df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df6:	d825      	bhi.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004df8:	2bc0      	cmp	r3, #192	; 0xc0
 8004dfa:	d02a      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004dfc:	2bc0      	cmp	r3, #192	; 0xc0
 8004dfe:	d821      	bhi.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004e00:	2b80      	cmp	r3, #128	; 0x80
 8004e02:	d016      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004e04:	2b80      	cmp	r3, #128	; 0x80
 8004e06:	d81d      	bhi.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	d007      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8004e10:	e018      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e12:	4b57      	ldr	r3, [pc, #348]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	4a56      	ldr	r2, [pc, #344]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004e1e:	e019      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3304      	adds	r3, #4
 8004e24:	2100      	movs	r1, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	f001 f90a 	bl	8006040 <RCCEx_PLL2_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004e30:	e010      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3324      	adds	r3, #36	; 0x24
 8004e36:	2100      	movs	r1, #0
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f001 f9b3 	bl	80061a4 <RCCEx_PLL3_Config>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004e42:	e007      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	75fb      	strb	r3, [r7, #23]
      break;
 8004e48:	e004      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004e4a:	bf00      	nop
 8004e4c:	e002      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004e4e:	bf00      	nop
 8004e50:	e000      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e54:	7dfb      	ldrb	r3, [r7, #23]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d109      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004e5a:	4b45      	ldr	r3, [pc, #276]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e5e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	4942      	ldr	r1, [pc, #264]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	650b      	str	r3, [r1, #80]	; 0x50
 8004e6c:	e001      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6e:	7dfb      	ldrb	r3, [r7, #23]
 8004e70:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d04f      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e82:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004e86:	d036      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004e88:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004e8c:	d830      	bhi.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004e8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e92:	d032      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e98:	d82a      	bhi.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004e9a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e9e:	d02e      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004ea0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ea4:	d824      	bhi.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eaa:	d018      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x232>
 8004eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb0:	d81e      	bhi.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004eb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eba:	d007      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004ebc:	e018      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ebe:	4b2c      	ldr	r3, [pc, #176]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	4a2b      	ldr	r2, [pc, #172]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004eca:	e019      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f001 f8b4 	bl	8006040 <RCCEx_PLL2_Config>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004edc:	e010      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	3324      	adds	r3, #36	; 0x24
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f001 f95d 	bl	80061a4 <RCCEx_PLL3_Config>
 8004eea:	4603      	mov	r3, r0
 8004eec:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004eee:	e007      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ef4:	e004      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004ef6:	bf00      	nop
 8004ef8:	e002      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004efa:	bf00      	nop
 8004efc:	e000      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d109      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004f06:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0a:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f12:	4917      	ldr	r1, [pc, #92]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	650b      	str	r3, [r1, #80]	; 0x50
 8004f18:	e001      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1a:	7dfb      	ldrb	r3, [r7, #23]
 8004f1c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d034      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f2e:	2b30      	cmp	r3, #48	; 0x30
 8004f30:	d01c      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004f32:	2b30      	cmp	r3, #48	; 0x30
 8004f34:	d817      	bhi.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	d00c      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d813      	bhi.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d018      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004f42:	2b10      	cmp	r3, #16
 8004f44:	d10f      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f46:	4b0a      	ldr	r3, [pc, #40]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	4a09      	ldr	r2, [pc, #36]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004f52:	e010      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3304      	adds	r3, #4
 8004f58:	2102      	movs	r1, #2
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f001 f870 	bl	8006040 <RCCEx_PLL2_Config>
 8004f60:	4603      	mov	r3, r0
 8004f62:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004f64:	e007      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	75fb      	strb	r3, [r7, #23]
      break;
 8004f6a:	e004      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8004f6c:	bf00      	nop
 8004f6e:	e002      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004f70:	58024400 	.word	0x58024400
      break;
 8004f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f76:	7dfb      	ldrb	r3, [r7, #23]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d109      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004f7c:	4b9b      	ldr	r3, [pc, #620]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f88:	4998      	ldr	r1, [pc, #608]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f8e:	e001      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
 8004f92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d047      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fa8:	d030      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004faa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fae:	d82a      	bhi.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004fb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fb4:	d02c      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8004fb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fba:	d824      	bhi.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc0:	d018      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc6:	d81e      	bhi.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd0:	d007      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004fd2:	e018      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd4:	4b85      	ldr	r3, [pc, #532]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	4a84      	ldr	r2, [pc, #528]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004fe0:	e017      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f001 f829 	bl	8006040 <RCCEx_PLL2_Config>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004ff2:	e00e      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3324      	adds	r3, #36	; 0x24
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f001 f8d2 	bl	80061a4 <RCCEx_PLL3_Config>
 8005000:	4603      	mov	r3, r0
 8005002:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005004:	e005      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	75fb      	strb	r3, [r7, #23]
      break;
 800500a:	e002      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800500c:	bf00      	nop
 800500e:	e000      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005010:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005012:	7dfb      	ldrb	r3, [r7, #23]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d109      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005018:	4b74      	ldr	r3, [pc, #464]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800501a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005024:	4971      	ldr	r1, [pc, #452]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005026:	4313      	orrs	r3, r2
 8005028:	650b      	str	r3, [r1, #80]	; 0x50
 800502a:	e001      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800502c:	7dfb      	ldrb	r3, [r7, #23]
 800502e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d049      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005044:	d02e      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005046:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800504a:	d828      	bhi.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800504c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005050:	d02a      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005052:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005056:	d822      	bhi.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005058:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800505c:	d026      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x400>
 800505e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005062:	d81c      	bhi.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005064:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005068:	d010      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800506a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800506e:	d816      	bhi.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d01d      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005078:	d111      	bne.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	2101      	movs	r1, #1
 8005080:	4618      	mov	r0, r3
 8005082:	f000 ffdd 	bl	8006040 <RCCEx_PLL2_Config>
 8005086:	4603      	mov	r3, r0
 8005088:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800508a:	e012      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3324      	adds	r3, #36	; 0x24
 8005090:	2101      	movs	r1, #1
 8005092:	4618      	mov	r0, r3
 8005094:	f001 f886 	bl	80061a4 <RCCEx_PLL3_Config>
 8005098:	4603      	mov	r3, r0
 800509a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800509c:	e009      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	75fb      	strb	r3, [r7, #23]
      break;
 80050a2:	e006      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80050a4:	bf00      	nop
 80050a6:	e004      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80050a8:	bf00      	nop
 80050aa:	e002      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80050ac:	bf00      	nop
 80050ae:	e000      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80050b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050b2:	7dfb      	ldrb	r3, [r7, #23]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d109      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80050b8:	4b4c      	ldr	r3, [pc, #304]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80050ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050bc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050c4:	4949      	ldr	r1, [pc, #292]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	650b      	str	r3, [r1, #80]	; 0x50
 80050ca:	e001      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
 80050ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d053      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050e2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80050e6:	d034      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80050e8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80050ec:	d82e      	bhi.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80050ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050f2:	d030      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80050f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050f8:	d828      	bhi.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80050fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fe:	d02c      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005104:	d822      	bhi.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005106:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800510a:	d028      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800510c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005110:	d81c      	bhi.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005112:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005116:	d010      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8005118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800511c:	d816      	bhi.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d01f      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005126:	d111      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3304      	adds	r3, #4
 800512c:	2101      	movs	r1, #1
 800512e:	4618      	mov	r0, r3
 8005130:	f000 ff86 	bl	8006040 <RCCEx_PLL2_Config>
 8005134:	4603      	mov	r3, r0
 8005136:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005138:	e014      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3324      	adds	r3, #36	; 0x24
 800513e:	2101      	movs	r1, #1
 8005140:	4618      	mov	r0, r3
 8005142:	f001 f82f 	bl	80061a4 <RCCEx_PLL3_Config>
 8005146:	4603      	mov	r3, r0
 8005148:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800514a:	e00b      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	75fb      	strb	r3, [r7, #23]
      break;
 8005150:	e008      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005152:	bf00      	nop
 8005154:	e006      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005156:	bf00      	nop
 8005158:	e004      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800515a:	bf00      	nop
 800515c:	e002      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800515e:	bf00      	nop
 8005160:	e000      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005162:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005164:	7dfb      	ldrb	r3, [r7, #23]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800516a:	4b20      	ldr	r3, [pc, #128]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800516c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005178:	491c      	ldr	r1, [pc, #112]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800517a:	4313      	orrs	r3, r2
 800517c:	658b      	str	r3, [r1, #88]	; 0x58
 800517e:	e001      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005180:	7dfb      	ldrb	r3, [r7, #23]
 8005182:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d031      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005198:	d00e      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800519a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800519e:	d814      	bhi.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d015      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80051a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051a8:	d10f      	bne.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051aa:	4b10      	ldr	r3, [pc, #64]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	4a0f      	ldr	r2, [pc, #60]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80051b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80051b6:	e00c      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3304      	adds	r3, #4
 80051bc:	2101      	movs	r1, #1
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 ff3e 	bl	8006040 <RCCEx_PLL2_Config>
 80051c4:	4603      	mov	r3, r0
 80051c6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80051c8:	e003      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	75fb      	strb	r3, [r7, #23]
      break;
 80051ce:	e000      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80051d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10b      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051d8:	4b04      	ldr	r3, [pc, #16]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80051da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e4:	4901      	ldr	r1, [pc, #4]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	650b      	str	r3, [r1, #80]	; 0x50
 80051ea:	e003      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x548>
 80051ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f0:	7dfb      	ldrb	r3, [r7, #23]
 80051f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d032      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005204:	2b03      	cmp	r3, #3
 8005206:	d81b      	bhi.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005208:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520e:	bf00      	nop
 8005210:	08005247 	.word	0x08005247
 8005214:	08005221 	.word	0x08005221
 8005218:	0800522f 	.word	0x0800522f
 800521c:	08005247 	.word	0x08005247
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005220:	4bb2      	ldr	r3, [pc, #712]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	4ab1      	ldr	r2, [pc, #708]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800522a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800522c:	e00c      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3304      	adds	r3, #4
 8005232:	2102      	movs	r1, #2
 8005234:	4618      	mov	r0, r3
 8005236:	f000 ff03 	bl	8006040 <RCCEx_PLL2_Config>
 800523a:	4603      	mov	r3, r0
 800523c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800523e:	e003      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	75fb      	strb	r3, [r7, #23]
      break;
 8005244:	e000      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005246:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005248:	7dfb      	ldrb	r3, [r7, #23]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d109      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800524e:	4ba7      	ldr	r3, [pc, #668]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005252:	f023 0203 	bic.w	r2, r3, #3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525a:	49a4      	ldr	r1, [pc, #656]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800525c:	4313      	orrs	r3, r2
 800525e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005260:	e001      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005262:	7dfb      	ldrb	r3, [r7, #23]
 8005264:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 8086 	beq.w	8005380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005274:	4b9e      	ldr	r3, [pc, #632]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a9d      	ldr	r2, [pc, #628]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800527a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800527e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005280:	f7fe f9ec 	bl	800365c <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005286:	e009      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005288:	f7fe f9e8 	bl	800365c <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b64      	cmp	r3, #100	; 0x64
 8005294:	d902      	bls.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	75fb      	strb	r3, [r7, #23]
        break;
 800529a:	e005      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800529c:	4b94      	ldr	r3, [pc, #592]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0ef      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80052a8:	7dfb      	ldrb	r3, [r7, #23]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d166      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80052ae:	4b8f      	ldr	r3, [pc, #572]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80052b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052b8:	4053      	eors	r3, r2
 80052ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d013      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052c2:	4b8a      	ldr	r3, [pc, #552]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80052c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052cc:	4b87      	ldr	r3, [pc, #540]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80052ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d0:	4a86      	ldr	r2, [pc, #536]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80052d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052d8:	4b84      	ldr	r3, [pc, #528]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80052da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052dc:	4a83      	ldr	r2, [pc, #524]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80052de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80052e4:	4a81      	ldr	r2, [pc, #516]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f4:	d115      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f6:	f7fe f9b1 	bl	800365c <HAL_GetTick>
 80052fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052fc:	e00b      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052fe:	f7fe f9ad 	bl	800365c <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	f241 3288 	movw	r2, #5000	; 0x1388
 800530c:	4293      	cmp	r3, r2
 800530e:	d902      	bls.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	75fb      	strb	r3, [r7, #23]
            break;
 8005314:	e005      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005316:	4b75      	ldr	r3, [pc, #468]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0ed      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8005322:	7dfb      	ldrb	r3, [r7, #23]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d126      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800532e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005332:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005336:	d10d      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8005338:	4b6c      	ldr	r3, [pc, #432]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005346:	0919      	lsrs	r1, r3, #4
 8005348:	4b6a      	ldr	r3, [pc, #424]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800534a:	400b      	ands	r3, r1
 800534c:	4967      	ldr	r1, [pc, #412]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800534e:	4313      	orrs	r3, r2
 8005350:	610b      	str	r3, [r1, #16]
 8005352:	e005      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8005354:	4b65      	ldr	r3, [pc, #404]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	4a64      	ldr	r2, [pc, #400]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800535a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800535e:	6113      	str	r3, [r2, #16]
 8005360:	4b62      	ldr	r3, [pc, #392]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005362:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800536a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800536e:	495f      	ldr	r1, [pc, #380]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005370:	4313      	orrs	r3, r2
 8005372:	670b      	str	r3, [r1, #112]	; 0x70
 8005374:	e004      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005376:	7dfb      	ldrb	r3, [r7, #23]
 8005378:	75bb      	strb	r3, [r7, #22]
 800537a:	e001      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800537c:	7dfb      	ldrb	r3, [r7, #23]
 800537e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d07f      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005392:	2b28      	cmp	r3, #40	; 0x28
 8005394:	d866      	bhi.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8005396:	a201      	add	r2, pc, #4	; (adr r2, 800539c <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8005398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539c:	0800546b 	.word	0x0800546b
 80053a0:	08005465 	.word	0x08005465
 80053a4:	08005465 	.word	0x08005465
 80053a8:	08005465 	.word	0x08005465
 80053ac:	08005465 	.word	0x08005465
 80053b0:	08005465 	.word	0x08005465
 80053b4:	08005465 	.word	0x08005465
 80053b8:	08005465 	.word	0x08005465
 80053bc:	08005441 	.word	0x08005441
 80053c0:	08005465 	.word	0x08005465
 80053c4:	08005465 	.word	0x08005465
 80053c8:	08005465 	.word	0x08005465
 80053cc:	08005465 	.word	0x08005465
 80053d0:	08005465 	.word	0x08005465
 80053d4:	08005465 	.word	0x08005465
 80053d8:	08005465 	.word	0x08005465
 80053dc:	08005453 	.word	0x08005453
 80053e0:	08005465 	.word	0x08005465
 80053e4:	08005465 	.word	0x08005465
 80053e8:	08005465 	.word	0x08005465
 80053ec:	08005465 	.word	0x08005465
 80053f0:	08005465 	.word	0x08005465
 80053f4:	08005465 	.word	0x08005465
 80053f8:	08005465 	.word	0x08005465
 80053fc:	0800546b 	.word	0x0800546b
 8005400:	08005465 	.word	0x08005465
 8005404:	08005465 	.word	0x08005465
 8005408:	08005465 	.word	0x08005465
 800540c:	08005465 	.word	0x08005465
 8005410:	08005465 	.word	0x08005465
 8005414:	08005465 	.word	0x08005465
 8005418:	08005465 	.word	0x08005465
 800541c:	0800546b 	.word	0x0800546b
 8005420:	08005465 	.word	0x08005465
 8005424:	08005465 	.word	0x08005465
 8005428:	08005465 	.word	0x08005465
 800542c:	08005465 	.word	0x08005465
 8005430:	08005465 	.word	0x08005465
 8005434:	08005465 	.word	0x08005465
 8005438:	08005465 	.word	0x08005465
 800543c:	0800546b 	.word	0x0800546b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3304      	adds	r3, #4
 8005444:	2101      	movs	r1, #1
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fdfa 	bl	8006040 <RCCEx_PLL2_Config>
 800544c:	4603      	mov	r3, r0
 800544e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005450:	e00c      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3324      	adds	r3, #36	; 0x24
 8005456:	2101      	movs	r1, #1
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fea3 	bl	80061a4 <RCCEx_PLL3_Config>
 800545e:	4603      	mov	r3, r0
 8005460:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005462:	e003      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	75fb      	strb	r3, [r7, #23]
      break;
 8005468:	e000      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 800546a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800546c:	7dfb      	ldrb	r3, [r7, #23]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10a      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005472:	4b1e      	ldr	r3, [pc, #120]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005476:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005480:	491a      	ldr	r1, [pc, #104]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005482:	4313      	orrs	r3, r2
 8005484:	654b      	str	r3, [r1, #84]	; 0x54
 8005486:	e001      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005488:	7dfb      	ldrb	r3, [r7, #23]
 800548a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d03f      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800549c:	2b05      	cmp	r3, #5
 800549e:	d821      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80054a0:	a201      	add	r2, pc, #4	; (adr r2, 80054a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80054a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a6:	bf00      	nop
 80054a8:	080054f9 	.word	0x080054f9
 80054ac:	080054c1 	.word	0x080054c1
 80054b0:	080054d3 	.word	0x080054d3
 80054b4:	080054f9 	.word	0x080054f9
 80054b8:	080054f9 	.word	0x080054f9
 80054bc:	080054f9 	.word	0x080054f9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3304      	adds	r3, #4
 80054c4:	2101      	movs	r1, #1
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fdba 	bl	8006040 <RCCEx_PLL2_Config>
 80054cc:	4603      	mov	r3, r0
 80054ce:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80054d0:	e013      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3324      	adds	r3, #36	; 0x24
 80054d6:	2101      	movs	r1, #1
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fe63 	bl	80061a4 <RCCEx_PLL3_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80054e2:	e00a      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	75fb      	strb	r3, [r7, #23]
      break;
 80054e8:	e007      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80054ea:	bf00      	nop
 80054ec:	58024400 	.word	0x58024400
 80054f0:	58024800 	.word	0x58024800
 80054f4:	00ffffcf 	.word	0x00ffffcf
      break;
 80054f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054fa:	7dfb      	ldrb	r3, [r7, #23]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d109      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005500:	4b9f      	ldr	r3, [pc, #636]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005504:	f023 0207 	bic.w	r2, r3, #7
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800550c:	499c      	ldr	r1, [pc, #624]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800550e:	4313      	orrs	r3, r2
 8005510:	654b      	str	r3, [r1, #84]	; 0x54
 8005512:	e001      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005514:	7dfb      	ldrb	r3, [r7, #23]
 8005516:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d039      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800552a:	2b05      	cmp	r3, #5
 800552c:	d820      	bhi.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800552e:	a201      	add	r2, pc, #4	; (adr r2, 8005534 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8005530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005534:	08005577 	.word	0x08005577
 8005538:	0800554d 	.word	0x0800554d
 800553c:	0800555f 	.word	0x0800555f
 8005540:	08005577 	.word	0x08005577
 8005544:	08005577 	.word	0x08005577
 8005548:	08005577 	.word	0x08005577
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3304      	adds	r3, #4
 8005550:	2101      	movs	r1, #1
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fd74 	bl	8006040 <RCCEx_PLL2_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800555c:	e00c      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	3324      	adds	r3, #36	; 0x24
 8005562:	2101      	movs	r1, #1
 8005564:	4618      	mov	r0, r3
 8005566:	f000 fe1d 	bl	80061a4 <RCCEx_PLL3_Config>
 800556a:	4603      	mov	r3, r0
 800556c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800556e:	e003      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	75fb      	strb	r3, [r7, #23]
      break;
 8005574:	e000      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8005576:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005578:	7dfb      	ldrb	r3, [r7, #23]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10a      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800557e:	4b80      	ldr	r3, [pc, #512]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005582:	f023 0207 	bic.w	r2, r3, #7
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800558c:	497c      	ldr	r1, [pc, #496]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800558e:	4313      	orrs	r3, r2
 8005590:	658b      	str	r3, [r1, #88]	; 0x58
 8005592:	e001      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005594:	7dfb      	ldrb	r3, [r7, #23]
 8005596:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d04b      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055ae:	d02e      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x962>
 80055b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055b4:	d828      	bhi.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80055b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ba:	d02a      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80055bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c0:	d822      	bhi.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80055c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055c6:	d026      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80055c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055cc:	d81c      	bhi.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80055ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055d2:	d010      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80055d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055d8:	d816      	bhi.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d01d      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80055de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055e2:	d111      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3304      	adds	r3, #4
 80055e8:	2100      	movs	r1, #0
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fd28 	bl	8006040 <RCCEx_PLL2_Config>
 80055f0:	4603      	mov	r3, r0
 80055f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80055f4:	e012      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	3324      	adds	r3, #36	; 0x24
 80055fa:	2102      	movs	r1, #2
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 fdd1 	bl	80061a4 <RCCEx_PLL3_Config>
 8005602:	4603      	mov	r3, r0
 8005604:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005606:	e009      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	75fb      	strb	r3, [r7, #23]
      break;
 800560c:	e006      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800560e:	bf00      	nop
 8005610:	e004      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005612:	bf00      	nop
 8005614:	e002      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005616:	bf00      	nop
 8005618:	e000      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800561a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800561c:	7dfb      	ldrb	r3, [r7, #23]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10a      	bne.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005622:	4b57      	ldr	r3, [pc, #348]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005626:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005630:	4953      	ldr	r1, [pc, #332]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005632:	4313      	orrs	r3, r2
 8005634:	654b      	str	r3, [r1, #84]	; 0x54
 8005636:	e001      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005638:	7dfb      	ldrb	r3, [r7, #23]
 800563a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005644:	2b00      	cmp	r3, #0
 8005646:	d04b      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800564e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005652:	d02e      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8005654:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005658:	d828      	bhi.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800565a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800565e:	d02a      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005664:	d822      	bhi.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005666:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800566a:	d026      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800566c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005670:	d81c      	bhi.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005676:	d010      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800567c:	d816      	bhi.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800567e:	2b00      	cmp	r3, #0
 8005680:	d01d      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005686:	d111      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3304      	adds	r3, #4
 800568c:	2100      	movs	r1, #0
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fcd6 	bl	8006040 <RCCEx_PLL2_Config>
 8005694:	4603      	mov	r3, r0
 8005696:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005698:	e012      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3324      	adds	r3, #36	; 0x24
 800569e:	2102      	movs	r1, #2
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fd7f 	bl	80061a4 <RCCEx_PLL3_Config>
 80056a6:	4603      	mov	r3, r0
 80056a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80056aa:	e009      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	75fb      	strb	r3, [r7, #23]
      break;
 80056b0:	e006      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80056b2:	bf00      	nop
 80056b4:	e004      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80056b6:	bf00      	nop
 80056b8:	e002      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80056ba:	bf00      	nop
 80056bc:	e000      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80056be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10a      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056c6:	4b2e      	ldr	r3, [pc, #184]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80056c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056d4:	492a      	ldr	r1, [pc, #168]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	658b      	str	r3, [r1, #88]	; 0x58
 80056da:	e001      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056dc:	7dfb      	ldrb	r3, [r7, #23]
 80056de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d04d      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80056f2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80056f6:	d02e      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80056f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80056fc:	d828      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80056fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005702:	d02a      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005708:	d822      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800570a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800570e:	d026      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005710:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005714:	d81c      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005716:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800571a:	d010      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800571c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005720:	d816      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d01d      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8005726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572a:	d111      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	2100      	movs	r1, #0
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fc84 	bl	8006040 <RCCEx_PLL2_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800573c:	e012      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3324      	adds	r3, #36	; 0x24
 8005742:	2102      	movs	r1, #2
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fd2d 	bl	80061a4 <RCCEx_PLL3_Config>
 800574a:	4603      	mov	r3, r0
 800574c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800574e:	e009      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	75fb      	strb	r3, [r7, #23]
      break;
 8005754:	e006      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005756:	bf00      	nop
 8005758:	e004      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800575a:	bf00      	nop
 800575c:	e002      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800575e:	bf00      	nop
 8005760:	e000      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005764:	7dfb      	ldrb	r3, [r7, #23]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10c      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800576a:	4b05      	ldr	r3, [pc, #20]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800576c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005778:	4901      	ldr	r1, [pc, #4]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800577a:	4313      	orrs	r3, r2
 800577c:	658b      	str	r3, [r1, #88]	; 0x58
 800577e:	e003      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005780:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005784:	7dfb      	ldrb	r3, [r7, #23]
 8005786:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01a      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800579e:	d10a      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3324      	adds	r3, #36	; 0x24
 80057a4:	2102      	movs	r1, #2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 fcfc 	bl	80061a4 <RCCEx_PLL3_Config>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80057b6:	4b8c      	ldr	r3, [pc, #560]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80057b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c4:	4988      	ldr	r1, [pc, #544]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0310 	and.w	r3, r3, #16
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d01a      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057e0:	d10a      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	3324      	adds	r3, #36	; 0x24
 80057e6:	2102      	movs	r1, #2
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fcdb 	bl	80061a4 <RCCEx_PLL3_Config>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057f8:	4b7b      	ldr	r3, [pc, #492]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80057fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005806:	4978      	ldr	r1, [pc, #480]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005808:	4313      	orrs	r3, r2
 800580a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d034      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800581e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005822:	d01d      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8005824:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005828:	d817      	bhi.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800582e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005832:	d009      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005834:	e011      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3304      	adds	r3, #4
 800583a:	2100      	movs	r1, #0
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fbff 	bl	8006040 <RCCEx_PLL2_Config>
 8005842:	4603      	mov	r3, r0
 8005844:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005846:	e00c      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3324      	adds	r3, #36	; 0x24
 800584c:	2102      	movs	r1, #2
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fca8 	bl	80061a4 <RCCEx_PLL3_Config>
 8005854:	4603      	mov	r3, r0
 8005856:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005858:	e003      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	75fb      	strb	r3, [r7, #23]
      break;
 800585e:	e000      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8005860:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005862:	7dfb      	ldrb	r3, [r7, #23]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10a      	bne.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005868:	4b5f      	ldr	r3, [pc, #380]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800586a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800586c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005876:	495c      	ldr	r1, [pc, #368]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005878:	4313      	orrs	r3, r2
 800587a:	658b      	str	r3, [r1, #88]	; 0x58
 800587c:	e001      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800587e:	7dfb      	ldrb	r3, [r7, #23]
 8005880:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d033      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005894:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005898:	d01c      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800589a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800589e:	d816      	bhi.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80058a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058a4:	d003      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80058a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058aa:	d007      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80058ac:	e00f      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ae:	4b4e      	ldr	r3, [pc, #312]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b2:	4a4d      	ldr	r2, [pc, #308]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80058b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80058ba:	e00c      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3324      	adds	r3, #36	; 0x24
 80058c0:	2101      	movs	r1, #1
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fc6e 	bl	80061a4 <RCCEx_PLL3_Config>
 80058c8:	4603      	mov	r3, r0
 80058ca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80058cc:	e003      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	75fb      	strb	r3, [r7, #23]
      break;
 80058d2:	e000      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80058d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058dc:	4b42      	ldr	r3, [pc, #264]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80058de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ea:	493f      	ldr	r1, [pc, #252]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	654b      	str	r3, [r1, #84]	; 0x54
 80058f0:	e001      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f2:	7dfb      	ldrb	r3, [r7, #23]
 80058f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d029      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 800590a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800590e:	d007      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005910:	e00f      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005912:	4b35      	ldr	r3, [pc, #212]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005916:	4a34      	ldr	r2, [pc, #208]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800591c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800591e:	e00b      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3304      	adds	r3, #4
 8005924:	2102      	movs	r1, #2
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fb8a 	bl	8006040 <RCCEx_PLL2_Config>
 800592c:	4603      	mov	r3, r0
 800592e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005930:	e002      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	75fb      	strb	r3, [r7, #23]
      break;
 8005936:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005938:	7dfb      	ldrb	r3, [r7, #23]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d109      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800593e:	4b2a      	ldr	r3, [pc, #168]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005942:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800594a:	4927      	ldr	r1, [pc, #156]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800594c:	4313      	orrs	r3, r2
 800594e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005950:	e001      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005952:	7dfb      	ldrb	r3, [r7, #23]
 8005954:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3324      	adds	r3, #36	; 0x24
 8005966:	2102      	movs	r1, #2
 8005968:	4618      	mov	r0, r3
 800596a:	f000 fc1b 	bl	80061a4 <RCCEx_PLL3_Config>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d035      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800598a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800598e:	d017      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005990:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005994:	d811      	bhi.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800599a:	d013      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800599c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059a0:	d80b      	bhi.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d010      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80059a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059aa:	d106      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ac:	4b0e      	ldr	r3, [pc, #56]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	4a0d      	ldr	r2, [pc, #52]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80059b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80059b8:	e007      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	75fb      	strb	r3, [r7, #23]
      break;
 80059be:	e004      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80059c0:	bf00      	nop
 80059c2:	e002      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80059c4:	bf00      	nop
 80059c6:	e000      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80059c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059ca:	7dfb      	ldrb	r3, [r7, #23]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10d      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80059d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059de:	4902      	ldr	r1, [pc, #8]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	654b      	str	r3, [r1, #84]	; 0x54
 80059e4:	e004      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80059e6:	bf00      	nop
 80059e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ec:	7dfb      	ldrb	r3, [r7, #23]
 80059ee:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d008      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059fc:	4b30      	ldr	r3, [pc, #192]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80059fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a08:	492d      	ldr	r1, [pc, #180]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d008      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a1a:	4b29      	ldr	r3, [pc, #164]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a26:	4926      	ldr	r1, [pc, #152]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d008      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005a38:	4b21      	ldr	r3, [pc, #132]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a44:	491e      	ldr	r1, [pc, #120]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00d      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a56:	4b1a      	ldr	r3, [pc, #104]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	4a19      	ldr	r2, [pc, #100]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a60:	6113      	str	r3, [r2, #16]
 8005a62:	4b17      	ldr	r3, [pc, #92]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a6c:	4914      	ldr	r1, [pc, #80]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	da08      	bge.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a7a:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a86:	490e      	ldr	r1, [pc, #56]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d009      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a98:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa6:	4906      	ldr	r1, [pc, #24]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005aac:	7dbb      	ldrb	r3, [r7, #22]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e000      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	58024400 	.word	0x58024400

08005ac4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005ac8:	f7ff f894 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8005acc:	4602      	mov	r2, r0
 8005ace:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	091b      	lsrs	r3, r3, #4
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	4904      	ldr	r1, [pc, #16]	; (8005aec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005ada:	5ccb      	ldrb	r3, [r1, r3]
 8005adc:	f003 031f 	and.w	r3, r3, #31
 8005ae0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	58024400 	.word	0x58024400
 8005aec:	08019224 	.word	0x08019224

08005af0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b089      	sub	sp, #36	; 0x24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005af8:	4ba1      	ldr	r3, [pc, #644]	; (8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afc:	f003 0303 	and.w	r3, r3, #3
 8005b00:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005b02:	4b9f      	ldr	r3, [pc, #636]	; (8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	0b1b      	lsrs	r3, r3, #12
 8005b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b0c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005b0e:	4b9c      	ldr	r3, [pc, #624]	; (8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b12:	091b      	lsrs	r3, r3, #4
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005b1a:	4b99      	ldr	r3, [pc, #612]	; (8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1e:	08db      	lsrs	r3, r3, #3
 8005b20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	fb02 f303 	mul.w	r3, r2, r3
 8005b2a:	ee07 3a90 	vmov	s15, r3
 8005b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 8111 	beq.w	8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	f000 8083 	beq.w	8005c4c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	f200 80a1 	bhi.w	8005c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d056      	beq.n	8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005b5a:	e099      	b.n	8005c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b5c:	4b88      	ldr	r3, [pc, #544]	; (8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0320 	and.w	r3, r3, #32
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d02d      	beq.n	8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b68:	4b85      	ldr	r3, [pc, #532]	; (8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	08db      	lsrs	r3, r3, #3
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	4a84      	ldr	r2, [pc, #528]	; (8005d84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005b74:	fa22 f303 	lsr.w	r3, r2, r3
 8005b78:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	ee07 3a90 	vmov	s15, r3
 8005b80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	ee07 3a90 	vmov	s15, r3
 8005b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b92:	4b7b      	ldr	r3, [pc, #492]	; (8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ba6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bbe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005bc2:	e087      	b.n	8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	ee07 3a90 	vmov	s15, r3
 8005bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d8c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bd6:	4b6a      	ldr	r3, [pc, #424]	; (8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bde:	ee07 3a90 	vmov	s15, r3
 8005be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c06:	e065      	b.n	8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c12:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c1a:	4b59      	ldr	r3, [pc, #356]	; (8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c2e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c4a:	e043      	b.n	8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c56:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c5e:	4b48      	ldr	r3, [pc, #288]	; (8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c72:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c8e:	e021      	b.n	8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ca2:	4b37      	ldr	r3, [pc, #220]	; (8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cb6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cd2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005cd4:	4b2a      	ldr	r3, [pc, #168]	; (8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd8:	0a5b      	lsrs	r3, r3, #9
 8005cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cee:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cfa:	ee17 2a90 	vmov	r2, s15
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005d02:	4b1f      	ldr	r3, [pc, #124]	; (8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d06:	0c1b      	lsrs	r3, r3, #16
 8005d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d0c:	ee07 3a90 	vmov	s15, r3
 8005d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d28:	ee17 2a90 	vmov	r2, s15
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005d30:	4b13      	ldr	r3, [pc, #76]	; (8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d34:	0e1b      	lsrs	r3, r3, #24
 8005d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d3a:	ee07 3a90 	vmov	s15, r3
 8005d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d56:	ee17 2a90 	vmov	r2, s15
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d5e:	e008      	b.n	8005d72 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	609a      	str	r2, [r3, #8]
}
 8005d72:	bf00      	nop
 8005d74:	3724      	adds	r7, #36	; 0x24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	58024400 	.word	0x58024400
 8005d84:	03d09000 	.word	0x03d09000
 8005d88:	46000000 	.word	0x46000000
 8005d8c:	4c742400 	.word	0x4c742400
 8005d90:	4a742400 	.word	0x4a742400
 8005d94:	4af42400 	.word	0x4af42400

08005d98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b089      	sub	sp, #36	; 0x24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005da0:	4ba1      	ldr	r3, [pc, #644]	; (8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da4:	f003 0303 	and.w	r3, r3, #3
 8005da8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005daa:	4b9f      	ldr	r3, [pc, #636]	; (8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dae:	0d1b      	lsrs	r3, r3, #20
 8005db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005db4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005db6:	4b9c      	ldr	r3, [pc, #624]	; (8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dba:	0a1b      	lsrs	r3, r3, #8
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005dc2:	4b99      	ldr	r3, [pc, #612]	; (8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc6:	08db      	lsrs	r3, r3, #3
 8005dc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	fb02 f303 	mul.w	r3, r2, r3
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 8111 	beq.w	8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	f000 8083 	beq.w	8005ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	f200 80a1 	bhi.w	8005f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d056      	beq.n	8005eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005e02:	e099      	b.n	8005f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e04:	4b88      	ldr	r3, [pc, #544]	; (8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0320 	and.w	r3, r3, #32
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d02d      	beq.n	8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e10:	4b85      	ldr	r3, [pc, #532]	; (8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	08db      	lsrs	r3, r3, #3
 8005e16:	f003 0303 	and.w	r3, r3, #3
 8005e1a:	4a84      	ldr	r2, [pc, #528]	; (800602c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e20:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	ee07 3a90 	vmov	s15, r3
 8005e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e3a:	4b7b      	ldr	r3, [pc, #492]	; (8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e4e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006030 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e66:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005e6a:	e087      	b.n	8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e76:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006034 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e7e:	4b6a      	ldr	r3, [pc, #424]	; (8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e86:	ee07 3a90 	vmov	s15, r3
 8005e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e92:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006030 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005eae:	e065      	b.n	8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	ee07 3a90 	vmov	s15, r3
 8005eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ec2:	4b59      	ldr	r3, [pc, #356]	; (8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ed6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006030 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ef2:	e043      	b.n	8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800603c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f06:	4b48      	ldr	r3, [pc, #288]	; (8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f1a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006030 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f36:	e021      	b.n	8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	ee07 3a90 	vmov	s15, r3
 8005f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f42:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006038 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f4a:	4b37      	ldr	r3, [pc, #220]	; (8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006030 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f7a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005f7c:	4b2a      	ldr	r3, [pc, #168]	; (8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f80:	0a5b      	lsrs	r3, r3, #9
 8005f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f96:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fa2:	ee17 2a90 	vmov	r2, s15
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005faa:	4b1f      	ldr	r3, [pc, #124]	; (8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	0c1b      	lsrs	r3, r3, #16
 8005fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fb4:	ee07 3a90 	vmov	s15, r3
 8005fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fd0:	ee17 2a90 	vmov	r2, s15
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005fd8:	4b13      	ldr	r3, [pc, #76]	; (8006028 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	0e1b      	lsrs	r3, r3, #24
 8005fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ff2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ffe:	ee17 2a90 	vmov	r2, s15
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006006:	e008      	b.n	800601a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	609a      	str	r2, [r3, #8]
}
 800601a:	bf00      	nop
 800601c:	3724      	adds	r7, #36	; 0x24
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	58024400 	.word	0x58024400
 800602c:	03d09000 	.word	0x03d09000
 8006030:	46000000 	.word	0x46000000
 8006034:	4c742400 	.word	0x4c742400
 8006038:	4a742400 	.word	0x4a742400
 800603c:	4af42400 	.word	0x4af42400

08006040 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800604e:	4b53      	ldr	r3, [pc, #332]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006052:	f003 0303 	and.w	r3, r3, #3
 8006056:	2b03      	cmp	r3, #3
 8006058:	d101      	bne.n	800605e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e099      	b.n	8006192 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800605e:	4b4f      	ldr	r3, [pc, #316]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a4e      	ldr	r2, [pc, #312]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 8006064:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800606a:	f7fd faf7 	bl	800365c <HAL_GetTick>
 800606e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006070:	e008      	b.n	8006084 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006072:	f7fd faf3 	bl	800365c <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b02      	cmp	r3, #2
 800607e:	d901      	bls.n	8006084 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e086      	b.n	8006192 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006084:	4b45      	ldr	r3, [pc, #276]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1f0      	bne.n	8006072 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006090:	4b42      	ldr	r3, [pc, #264]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 8006092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006094:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	031b      	lsls	r3, r3, #12
 800609e:	493f      	ldr	r1, [pc, #252]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	628b      	str	r3, [r1, #40]	; 0x28
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	025b      	lsls	r3, r3, #9
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	431a      	orrs	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	3b01      	subs	r3, #1
 80060c0:	041b      	lsls	r3, r3, #16
 80060c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	061b      	lsls	r3, r3, #24
 80060d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060d4:	4931      	ldr	r1, [pc, #196]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80060da:	4b30      	ldr	r3, [pc, #192]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 80060dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	492d      	ldr	r1, [pc, #180]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80060ec:	4b2b      	ldr	r3, [pc, #172]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	f023 0220 	bic.w	r2, r3, #32
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	4928      	ldr	r1, [pc, #160]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80060fe:	4b27      	ldr	r3, [pc, #156]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 8006100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006102:	4a26      	ldr	r2, [pc, #152]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 8006104:	f023 0310 	bic.w	r3, r3, #16
 8006108:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800610a:	4b24      	ldr	r3, [pc, #144]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 800610c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800610e:	4b24      	ldr	r3, [pc, #144]	; (80061a0 <RCCEx_PLL2_Config+0x160>)
 8006110:	4013      	ands	r3, r2
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	69d2      	ldr	r2, [r2, #28]
 8006116:	00d2      	lsls	r2, r2, #3
 8006118:	4920      	ldr	r1, [pc, #128]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 800611a:	4313      	orrs	r3, r2
 800611c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800611e:	4b1f      	ldr	r3, [pc, #124]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 8006120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006122:	4a1e      	ldr	r2, [pc, #120]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 8006124:	f043 0310 	orr.w	r3, r3, #16
 8006128:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d106      	bne.n	800613e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006130:	4b1a      	ldr	r3, [pc, #104]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 8006132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006134:	4a19      	ldr	r2, [pc, #100]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 8006136:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800613a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800613c:	e00f      	b.n	800615e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d106      	bne.n	8006152 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006144:	4b15      	ldr	r3, [pc, #84]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006148:	4a14      	ldr	r2, [pc, #80]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 800614a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800614e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006150:	e005      	b.n	800615e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006152:	4b12      	ldr	r3, [pc, #72]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 8006154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006156:	4a11      	ldr	r2, [pc, #68]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 8006158:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800615c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800615e:	4b0f      	ldr	r3, [pc, #60]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a0e      	ldr	r2, [pc, #56]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 8006164:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800616a:	f7fd fa77 	bl	800365c <HAL_GetTick>
 800616e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006170:	e008      	b.n	8006184 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006172:	f7fd fa73 	bl	800365c <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	2b02      	cmp	r3, #2
 800617e:	d901      	bls.n	8006184 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e006      	b.n	8006192 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006184:	4b05      	ldr	r3, [pc, #20]	; (800619c <RCCEx_PLL2_Config+0x15c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0f0      	beq.n	8006172 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006190:	7bfb      	ldrb	r3, [r7, #15]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	58024400 	.word	0x58024400
 80061a0:	ffff0007 	.word	0xffff0007

080061a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061b2:	4b53      	ldr	r3, [pc, #332]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 80061b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b6:	f003 0303 	and.w	r3, r3, #3
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d101      	bne.n	80061c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e099      	b.n	80062f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80061c2:	4b4f      	ldr	r3, [pc, #316]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a4e      	ldr	r2, [pc, #312]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 80061c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ce:	f7fd fa45 	bl	800365c <HAL_GetTick>
 80061d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061d4:	e008      	b.n	80061e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80061d6:	f7fd fa41 	bl	800365c <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d901      	bls.n	80061e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e086      	b.n	80062f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061e8:	4b45      	ldr	r3, [pc, #276]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1f0      	bne.n	80061d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80061f4:	4b42      	ldr	r3, [pc, #264]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 80061f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	051b      	lsls	r3, r3, #20
 8006202:	493f      	ldr	r1, [pc, #252]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 8006204:	4313      	orrs	r3, r2
 8006206:	628b      	str	r3, [r1, #40]	; 0x28
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	3b01      	subs	r3, #1
 800620e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	3b01      	subs	r3, #1
 8006218:	025b      	lsls	r3, r3, #9
 800621a:	b29b      	uxth	r3, r3
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	3b01      	subs	r3, #1
 8006224:	041b      	lsls	r3, r3, #16
 8006226:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	3b01      	subs	r3, #1
 8006232:	061b      	lsls	r3, r3, #24
 8006234:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006238:	4931      	ldr	r1, [pc, #196]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 800623a:	4313      	orrs	r3, r2
 800623c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800623e:	4b30      	ldr	r3, [pc, #192]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 8006240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006242:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	492d      	ldr	r1, [pc, #180]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 800624c:	4313      	orrs	r3, r2
 800624e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006250:	4b2b      	ldr	r3, [pc, #172]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 8006252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006254:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	4928      	ldr	r1, [pc, #160]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 800625e:	4313      	orrs	r3, r2
 8006260:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006262:	4b27      	ldr	r3, [pc, #156]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 8006264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006266:	4a26      	ldr	r2, [pc, #152]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 8006268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800626c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800626e:	4b24      	ldr	r3, [pc, #144]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 8006270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006272:	4b24      	ldr	r3, [pc, #144]	; (8006304 <RCCEx_PLL3_Config+0x160>)
 8006274:	4013      	ands	r3, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	69d2      	ldr	r2, [r2, #28]
 800627a:	00d2      	lsls	r2, r2, #3
 800627c:	4920      	ldr	r1, [pc, #128]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 800627e:	4313      	orrs	r3, r2
 8006280:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006282:	4b1f      	ldr	r3, [pc, #124]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 8006284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006286:	4a1e      	ldr	r2, [pc, #120]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 8006288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800628c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d106      	bne.n	80062a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006294:	4b1a      	ldr	r3, [pc, #104]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	4a19      	ldr	r2, [pc, #100]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 800629a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800629e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062a0:	e00f      	b.n	80062c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d106      	bne.n	80062b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80062a8:	4b15      	ldr	r3, [pc, #84]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 80062aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ac:	4a14      	ldr	r2, [pc, #80]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 80062ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80062b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062b4:	e005      	b.n	80062c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80062b6:	4b12      	ldr	r3, [pc, #72]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 80062b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ba:	4a11      	ldr	r2, [pc, #68]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 80062bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80062c2:	4b0f      	ldr	r3, [pc, #60]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a0e      	ldr	r2, [pc, #56]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 80062c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ce:	f7fd f9c5 	bl	800365c <HAL_GetTick>
 80062d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062d4:	e008      	b.n	80062e8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80062d6:	f7fd f9c1 	bl	800365c <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d901      	bls.n	80062e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e006      	b.n	80062f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062e8:	4b05      	ldr	r3, [pc, #20]	; (8006300 <RCCEx_PLL3_Config+0x15c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0f0      	beq.n	80062d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	58024400 	.word	0x58024400
 8006304:	ffff0007 	.word	0xffff0007

08006308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e049      	b.n	80063ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d106      	bne.n	8006334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7fc ffa2 	bl	8003278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3304      	adds	r3, #4
 8006344:	4619      	mov	r1, r3
 8006346:	4610      	mov	r0, r2
 8006348:	f000 f97c 	bl	8006644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b082      	sub	sp, #8
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d122      	bne.n	8006412 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d11b      	bne.n	8006412 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f06f 0202 	mvn.w	r2, #2
 80063e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	f003 0303 	and.w	r3, r3, #3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d003      	beq.n	8006400 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f905 	bl	8006608 <HAL_TIM_IC_CaptureCallback>
 80063fe:	e005      	b.n	800640c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f8f7 	bl	80065f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f908 	bl	800661c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b04      	cmp	r3, #4
 800641e:	d122      	bne.n	8006466 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f003 0304 	and.w	r3, r3, #4
 800642a:	2b04      	cmp	r3, #4
 800642c:	d11b      	bne.n	8006466 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f06f 0204 	mvn.w	r2, #4
 8006436:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f8db 	bl	8006608 <HAL_TIM_IC_CaptureCallback>
 8006452:	e005      	b.n	8006460 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f8cd 	bl	80065f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f8de 	bl	800661c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	f003 0308 	and.w	r3, r3, #8
 8006470:	2b08      	cmp	r3, #8
 8006472:	d122      	bne.n	80064ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f003 0308 	and.w	r3, r3, #8
 800647e:	2b08      	cmp	r3, #8
 8006480:	d11b      	bne.n	80064ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f06f 0208 	mvn.w	r2, #8
 800648a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2204      	movs	r2, #4
 8006490:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	f003 0303 	and.w	r3, r3, #3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d003      	beq.n	80064a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f8b1 	bl	8006608 <HAL_TIM_IC_CaptureCallback>
 80064a6:	e005      	b.n	80064b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f8a3 	bl	80065f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f8b4 	bl	800661c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	f003 0310 	and.w	r3, r3, #16
 80064c4:	2b10      	cmp	r3, #16
 80064c6:	d122      	bne.n	800650e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f003 0310 	and.w	r3, r3, #16
 80064d2:	2b10      	cmp	r3, #16
 80064d4:	d11b      	bne.n	800650e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f06f 0210 	mvn.w	r2, #16
 80064de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2208      	movs	r2, #8
 80064e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69db      	ldr	r3, [r3, #28]
 80064ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f887 	bl	8006608 <HAL_TIM_IC_CaptureCallback>
 80064fa:	e005      	b.n	8006508 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f879 	bl	80065f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f88a 	bl	800661c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b01      	cmp	r3, #1
 800651a:	d10e      	bne.n	800653a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b01      	cmp	r3, #1
 8006528:	d107      	bne.n	800653a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f06f 0201 	mvn.w	r2, #1
 8006532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7fc fe63 	bl	8003200 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006544:	2b80      	cmp	r3, #128	; 0x80
 8006546:	d10e      	bne.n	8006566 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006552:	2b80      	cmp	r3, #128	; 0x80
 8006554:	d107      	bne.n	8006566 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800655e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f913 	bl	800678c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006574:	d10e      	bne.n	8006594 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006580:	2b80      	cmp	r3, #128	; 0x80
 8006582:	d107      	bne.n	8006594 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800658c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f906 	bl	80067a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659e:	2b40      	cmp	r3, #64	; 0x40
 80065a0:	d10e      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ac:	2b40      	cmp	r3, #64	; 0x40
 80065ae:	d107      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f838 	bl	8006630 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d10e      	bne.n	80065ec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d107      	bne.n	80065ec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f06f 0220 	mvn.w	r2, #32
 80065e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f8c6 	bl	8006778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065ec:	bf00      	nop
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a40      	ldr	r2, [pc, #256]	; (8006758 <TIM_Base_SetConfig+0x114>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d013      	beq.n	8006684 <TIM_Base_SetConfig+0x40>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006662:	d00f      	beq.n	8006684 <TIM_Base_SetConfig+0x40>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a3d      	ldr	r2, [pc, #244]	; (800675c <TIM_Base_SetConfig+0x118>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d00b      	beq.n	8006684 <TIM_Base_SetConfig+0x40>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a3c      	ldr	r2, [pc, #240]	; (8006760 <TIM_Base_SetConfig+0x11c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d007      	beq.n	8006684 <TIM_Base_SetConfig+0x40>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a3b      	ldr	r2, [pc, #236]	; (8006764 <TIM_Base_SetConfig+0x120>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d003      	beq.n	8006684 <TIM_Base_SetConfig+0x40>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a3a      	ldr	r2, [pc, #232]	; (8006768 <TIM_Base_SetConfig+0x124>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d108      	bne.n	8006696 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a2f      	ldr	r2, [pc, #188]	; (8006758 <TIM_Base_SetConfig+0x114>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d01f      	beq.n	80066de <TIM_Base_SetConfig+0x9a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a4:	d01b      	beq.n	80066de <TIM_Base_SetConfig+0x9a>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a2c      	ldr	r2, [pc, #176]	; (800675c <TIM_Base_SetConfig+0x118>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d017      	beq.n	80066de <TIM_Base_SetConfig+0x9a>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a2b      	ldr	r2, [pc, #172]	; (8006760 <TIM_Base_SetConfig+0x11c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d013      	beq.n	80066de <TIM_Base_SetConfig+0x9a>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a2a      	ldr	r2, [pc, #168]	; (8006764 <TIM_Base_SetConfig+0x120>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d00f      	beq.n	80066de <TIM_Base_SetConfig+0x9a>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a29      	ldr	r2, [pc, #164]	; (8006768 <TIM_Base_SetConfig+0x124>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d00b      	beq.n	80066de <TIM_Base_SetConfig+0x9a>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a28      	ldr	r2, [pc, #160]	; (800676c <TIM_Base_SetConfig+0x128>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d007      	beq.n	80066de <TIM_Base_SetConfig+0x9a>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a27      	ldr	r2, [pc, #156]	; (8006770 <TIM_Base_SetConfig+0x12c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d003      	beq.n	80066de <TIM_Base_SetConfig+0x9a>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a26      	ldr	r2, [pc, #152]	; (8006774 <TIM_Base_SetConfig+0x130>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d108      	bne.n	80066f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a10      	ldr	r2, [pc, #64]	; (8006758 <TIM_Base_SetConfig+0x114>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d00f      	beq.n	800673c <TIM_Base_SetConfig+0xf8>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a12      	ldr	r2, [pc, #72]	; (8006768 <TIM_Base_SetConfig+0x124>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d00b      	beq.n	800673c <TIM_Base_SetConfig+0xf8>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a11      	ldr	r2, [pc, #68]	; (800676c <TIM_Base_SetConfig+0x128>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d007      	beq.n	800673c <TIM_Base_SetConfig+0xf8>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a10      	ldr	r2, [pc, #64]	; (8006770 <TIM_Base_SetConfig+0x12c>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d003      	beq.n	800673c <TIM_Base_SetConfig+0xf8>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a0f      	ldr	r2, [pc, #60]	; (8006774 <TIM_Base_SetConfig+0x130>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d103      	bne.n	8006744 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	691a      	ldr	r2, [r3, #16]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	615a      	str	r2, [r3, #20]
}
 800674a:	bf00      	nop
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	40010000 	.word	0x40010000
 800675c:	40000400 	.word	0x40000400
 8006760:	40000800 	.word	0x40000800
 8006764:	40000c00 	.word	0x40000c00
 8006768:	40010400 	.word	0x40010400
 800676c:	40014000 	.word	0x40014000
 8006770:	40014400 	.word	0x40014400
 8006774:	40014800 	.word	0x40014800

08006778 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e042      	b.n	800684c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d106      	bne.n	80067de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7fc fd75 	bl	80032c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2224      	movs	r2, #36	; 0x24
 80067e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f022 0201 	bic.w	r2, r2, #1
 80067f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f82c 	bl	8006854 <UART_SetConfig>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d101      	bne.n	8006806 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e022      	b.n	800684c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fe8c 	bl	800752c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006822:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689a      	ldr	r2, [r3, #8]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006832:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0201 	orr.w	r2, r2, #1
 8006842:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 ff13 	bl	8007670 <UART_CheckIdleState>
 800684a:	4603      	mov	r3, r0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006858:	b092      	sub	sp, #72	; 0x48
 800685a:	af00      	add	r7, sp, #0
 800685c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	431a      	orrs	r2, r3
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	431a      	orrs	r2, r3
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	4313      	orrs	r3, r2
 800687a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	4bbe      	ldr	r3, [pc, #760]	; (8006b7c <UART_SetConfig+0x328>)
 8006884:	4013      	ands	r3, r2
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800688c:	430b      	orrs	r3, r1
 800688e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4ab3      	ldr	r2, [pc, #716]	; (8006b80 <UART_SetConfig+0x32c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d004      	beq.n	80068c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068bc:	4313      	orrs	r3, r2
 80068be:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689a      	ldr	r2, [r3, #8]
 80068c6:	4baf      	ldr	r3, [pc, #700]	; (8006b84 <UART_SetConfig+0x330>)
 80068c8:	4013      	ands	r3, r2
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	6812      	ldr	r2, [r2, #0]
 80068ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068d0:	430b      	orrs	r3, r1
 80068d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068da:	f023 010f 	bic.w	r1, r3, #15
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4aa6      	ldr	r2, [pc, #664]	; (8006b88 <UART_SetConfig+0x334>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d177      	bne.n	80069e4 <UART_SetConfig+0x190>
 80068f4:	4ba5      	ldr	r3, [pc, #660]	; (8006b8c <UART_SetConfig+0x338>)
 80068f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068fc:	2b28      	cmp	r3, #40	; 0x28
 80068fe:	d86d      	bhi.n	80069dc <UART_SetConfig+0x188>
 8006900:	a201      	add	r2, pc, #4	; (adr r2, 8006908 <UART_SetConfig+0xb4>)
 8006902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006906:	bf00      	nop
 8006908:	080069ad 	.word	0x080069ad
 800690c:	080069dd 	.word	0x080069dd
 8006910:	080069dd 	.word	0x080069dd
 8006914:	080069dd 	.word	0x080069dd
 8006918:	080069dd 	.word	0x080069dd
 800691c:	080069dd 	.word	0x080069dd
 8006920:	080069dd 	.word	0x080069dd
 8006924:	080069dd 	.word	0x080069dd
 8006928:	080069b5 	.word	0x080069b5
 800692c:	080069dd 	.word	0x080069dd
 8006930:	080069dd 	.word	0x080069dd
 8006934:	080069dd 	.word	0x080069dd
 8006938:	080069dd 	.word	0x080069dd
 800693c:	080069dd 	.word	0x080069dd
 8006940:	080069dd 	.word	0x080069dd
 8006944:	080069dd 	.word	0x080069dd
 8006948:	080069bd 	.word	0x080069bd
 800694c:	080069dd 	.word	0x080069dd
 8006950:	080069dd 	.word	0x080069dd
 8006954:	080069dd 	.word	0x080069dd
 8006958:	080069dd 	.word	0x080069dd
 800695c:	080069dd 	.word	0x080069dd
 8006960:	080069dd 	.word	0x080069dd
 8006964:	080069dd 	.word	0x080069dd
 8006968:	080069c5 	.word	0x080069c5
 800696c:	080069dd 	.word	0x080069dd
 8006970:	080069dd 	.word	0x080069dd
 8006974:	080069dd 	.word	0x080069dd
 8006978:	080069dd 	.word	0x080069dd
 800697c:	080069dd 	.word	0x080069dd
 8006980:	080069dd 	.word	0x080069dd
 8006984:	080069dd 	.word	0x080069dd
 8006988:	080069cd 	.word	0x080069cd
 800698c:	080069dd 	.word	0x080069dd
 8006990:	080069dd 	.word	0x080069dd
 8006994:	080069dd 	.word	0x080069dd
 8006998:	080069dd 	.word	0x080069dd
 800699c:	080069dd 	.word	0x080069dd
 80069a0:	080069dd 	.word	0x080069dd
 80069a4:	080069dd 	.word	0x080069dd
 80069a8:	080069d5 	.word	0x080069d5
 80069ac:	2301      	movs	r3, #1
 80069ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069b2:	e326      	b.n	8007002 <UART_SetConfig+0x7ae>
 80069b4:	2304      	movs	r3, #4
 80069b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ba:	e322      	b.n	8007002 <UART_SetConfig+0x7ae>
 80069bc:	2308      	movs	r3, #8
 80069be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069c2:	e31e      	b.n	8007002 <UART_SetConfig+0x7ae>
 80069c4:	2310      	movs	r3, #16
 80069c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ca:	e31a      	b.n	8007002 <UART_SetConfig+0x7ae>
 80069cc:	2320      	movs	r3, #32
 80069ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069d2:	e316      	b.n	8007002 <UART_SetConfig+0x7ae>
 80069d4:	2340      	movs	r3, #64	; 0x40
 80069d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069da:	e312      	b.n	8007002 <UART_SetConfig+0x7ae>
 80069dc:	2380      	movs	r3, #128	; 0x80
 80069de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069e2:	e30e      	b.n	8007002 <UART_SetConfig+0x7ae>
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a69      	ldr	r2, [pc, #420]	; (8006b90 <UART_SetConfig+0x33c>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d130      	bne.n	8006a50 <UART_SetConfig+0x1fc>
 80069ee:	4b67      	ldr	r3, [pc, #412]	; (8006b8c <UART_SetConfig+0x338>)
 80069f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f2:	f003 0307 	and.w	r3, r3, #7
 80069f6:	2b05      	cmp	r3, #5
 80069f8:	d826      	bhi.n	8006a48 <UART_SetConfig+0x1f4>
 80069fa:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <UART_SetConfig+0x1ac>)
 80069fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a00:	08006a19 	.word	0x08006a19
 8006a04:	08006a21 	.word	0x08006a21
 8006a08:	08006a29 	.word	0x08006a29
 8006a0c:	08006a31 	.word	0x08006a31
 8006a10:	08006a39 	.word	0x08006a39
 8006a14:	08006a41 	.word	0x08006a41
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a1e:	e2f0      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006a20:	2304      	movs	r3, #4
 8006a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a26:	e2ec      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006a28:	2308      	movs	r3, #8
 8006a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a2e:	e2e8      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006a30:	2310      	movs	r3, #16
 8006a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a36:	e2e4      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006a38:	2320      	movs	r3, #32
 8006a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a3e:	e2e0      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006a40:	2340      	movs	r3, #64	; 0x40
 8006a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a46:	e2dc      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006a48:	2380      	movs	r3, #128	; 0x80
 8006a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a4e:	e2d8      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a4f      	ldr	r2, [pc, #316]	; (8006b94 <UART_SetConfig+0x340>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d130      	bne.n	8006abc <UART_SetConfig+0x268>
 8006a5a:	4b4c      	ldr	r3, [pc, #304]	; (8006b8c <UART_SetConfig+0x338>)
 8006a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5e:	f003 0307 	and.w	r3, r3, #7
 8006a62:	2b05      	cmp	r3, #5
 8006a64:	d826      	bhi.n	8006ab4 <UART_SetConfig+0x260>
 8006a66:	a201      	add	r2, pc, #4	; (adr r2, 8006a6c <UART_SetConfig+0x218>)
 8006a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6c:	08006a85 	.word	0x08006a85
 8006a70:	08006a8d 	.word	0x08006a8d
 8006a74:	08006a95 	.word	0x08006a95
 8006a78:	08006a9d 	.word	0x08006a9d
 8006a7c:	08006aa5 	.word	0x08006aa5
 8006a80:	08006aad 	.word	0x08006aad
 8006a84:	2300      	movs	r3, #0
 8006a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a8a:	e2ba      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006a8c:	2304      	movs	r3, #4
 8006a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a92:	e2b6      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006a94:	2308      	movs	r3, #8
 8006a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a9a:	e2b2      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006a9c:	2310      	movs	r3, #16
 8006a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aa2:	e2ae      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006aa4:	2320      	movs	r3, #32
 8006aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aaa:	e2aa      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006aac:	2340      	movs	r3, #64	; 0x40
 8006aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ab2:	e2a6      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006ab4:	2380      	movs	r3, #128	; 0x80
 8006ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aba:	e2a2      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a35      	ldr	r2, [pc, #212]	; (8006b98 <UART_SetConfig+0x344>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d130      	bne.n	8006b28 <UART_SetConfig+0x2d4>
 8006ac6:	4b31      	ldr	r3, [pc, #196]	; (8006b8c <UART_SetConfig+0x338>)
 8006ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aca:	f003 0307 	and.w	r3, r3, #7
 8006ace:	2b05      	cmp	r3, #5
 8006ad0:	d826      	bhi.n	8006b20 <UART_SetConfig+0x2cc>
 8006ad2:	a201      	add	r2, pc, #4	; (adr r2, 8006ad8 <UART_SetConfig+0x284>)
 8006ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad8:	08006af1 	.word	0x08006af1
 8006adc:	08006af9 	.word	0x08006af9
 8006ae0:	08006b01 	.word	0x08006b01
 8006ae4:	08006b09 	.word	0x08006b09
 8006ae8:	08006b11 	.word	0x08006b11
 8006aec:	08006b19 	.word	0x08006b19
 8006af0:	2300      	movs	r3, #0
 8006af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006af6:	e284      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006af8:	2304      	movs	r3, #4
 8006afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afe:	e280      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006b00:	2308      	movs	r3, #8
 8006b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b06:	e27c      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006b08:	2310      	movs	r3, #16
 8006b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0e:	e278      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006b10:	2320      	movs	r3, #32
 8006b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b16:	e274      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006b18:	2340      	movs	r3, #64	; 0x40
 8006b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1e:	e270      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006b20:	2380      	movs	r3, #128	; 0x80
 8006b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b26:	e26c      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a1b      	ldr	r2, [pc, #108]	; (8006b9c <UART_SetConfig+0x348>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d142      	bne.n	8006bb8 <UART_SetConfig+0x364>
 8006b32:	4b16      	ldr	r3, [pc, #88]	; (8006b8c <UART_SetConfig+0x338>)
 8006b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b36:	f003 0307 	and.w	r3, r3, #7
 8006b3a:	2b05      	cmp	r3, #5
 8006b3c:	d838      	bhi.n	8006bb0 <UART_SetConfig+0x35c>
 8006b3e:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <UART_SetConfig+0x2f0>)
 8006b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b44:	08006b5d 	.word	0x08006b5d
 8006b48:	08006b65 	.word	0x08006b65
 8006b4c:	08006b6d 	.word	0x08006b6d
 8006b50:	08006b75 	.word	0x08006b75
 8006b54:	08006ba1 	.word	0x08006ba1
 8006b58:	08006ba9 	.word	0x08006ba9
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b62:	e24e      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006b64:	2304      	movs	r3, #4
 8006b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b6a:	e24a      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006b6c:	2308      	movs	r3, #8
 8006b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b72:	e246      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006b74:	2310      	movs	r3, #16
 8006b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b7a:	e242      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006b7c:	cfff69f3 	.word	0xcfff69f3
 8006b80:	58000c00 	.word	0x58000c00
 8006b84:	11fff4ff 	.word	0x11fff4ff
 8006b88:	40011000 	.word	0x40011000
 8006b8c:	58024400 	.word	0x58024400
 8006b90:	40004400 	.word	0x40004400
 8006b94:	40004800 	.word	0x40004800
 8006b98:	40004c00 	.word	0x40004c00
 8006b9c:	40005000 	.word	0x40005000
 8006ba0:	2320      	movs	r3, #32
 8006ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ba6:	e22c      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006ba8:	2340      	movs	r3, #64	; 0x40
 8006baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bae:	e228      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006bb0:	2380      	movs	r3, #128	; 0x80
 8006bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bb6:	e224      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4ab1      	ldr	r2, [pc, #708]	; (8006e84 <UART_SetConfig+0x630>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d176      	bne.n	8006cb0 <UART_SetConfig+0x45c>
 8006bc2:	4bb1      	ldr	r3, [pc, #708]	; (8006e88 <UART_SetConfig+0x634>)
 8006bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bca:	2b28      	cmp	r3, #40	; 0x28
 8006bcc:	d86c      	bhi.n	8006ca8 <UART_SetConfig+0x454>
 8006bce:	a201      	add	r2, pc, #4	; (adr r2, 8006bd4 <UART_SetConfig+0x380>)
 8006bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd4:	08006c79 	.word	0x08006c79
 8006bd8:	08006ca9 	.word	0x08006ca9
 8006bdc:	08006ca9 	.word	0x08006ca9
 8006be0:	08006ca9 	.word	0x08006ca9
 8006be4:	08006ca9 	.word	0x08006ca9
 8006be8:	08006ca9 	.word	0x08006ca9
 8006bec:	08006ca9 	.word	0x08006ca9
 8006bf0:	08006ca9 	.word	0x08006ca9
 8006bf4:	08006c81 	.word	0x08006c81
 8006bf8:	08006ca9 	.word	0x08006ca9
 8006bfc:	08006ca9 	.word	0x08006ca9
 8006c00:	08006ca9 	.word	0x08006ca9
 8006c04:	08006ca9 	.word	0x08006ca9
 8006c08:	08006ca9 	.word	0x08006ca9
 8006c0c:	08006ca9 	.word	0x08006ca9
 8006c10:	08006ca9 	.word	0x08006ca9
 8006c14:	08006c89 	.word	0x08006c89
 8006c18:	08006ca9 	.word	0x08006ca9
 8006c1c:	08006ca9 	.word	0x08006ca9
 8006c20:	08006ca9 	.word	0x08006ca9
 8006c24:	08006ca9 	.word	0x08006ca9
 8006c28:	08006ca9 	.word	0x08006ca9
 8006c2c:	08006ca9 	.word	0x08006ca9
 8006c30:	08006ca9 	.word	0x08006ca9
 8006c34:	08006c91 	.word	0x08006c91
 8006c38:	08006ca9 	.word	0x08006ca9
 8006c3c:	08006ca9 	.word	0x08006ca9
 8006c40:	08006ca9 	.word	0x08006ca9
 8006c44:	08006ca9 	.word	0x08006ca9
 8006c48:	08006ca9 	.word	0x08006ca9
 8006c4c:	08006ca9 	.word	0x08006ca9
 8006c50:	08006ca9 	.word	0x08006ca9
 8006c54:	08006c99 	.word	0x08006c99
 8006c58:	08006ca9 	.word	0x08006ca9
 8006c5c:	08006ca9 	.word	0x08006ca9
 8006c60:	08006ca9 	.word	0x08006ca9
 8006c64:	08006ca9 	.word	0x08006ca9
 8006c68:	08006ca9 	.word	0x08006ca9
 8006c6c:	08006ca9 	.word	0x08006ca9
 8006c70:	08006ca9 	.word	0x08006ca9
 8006c74:	08006ca1 	.word	0x08006ca1
 8006c78:	2301      	movs	r3, #1
 8006c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c7e:	e1c0      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006c80:	2304      	movs	r3, #4
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c86:	e1bc      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006c88:	2308      	movs	r3, #8
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c8e:	e1b8      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006c90:	2310      	movs	r3, #16
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c96:	e1b4      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006c98:	2320      	movs	r3, #32
 8006c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c9e:	e1b0      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006ca0:	2340      	movs	r3, #64	; 0x40
 8006ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ca6:	e1ac      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006ca8:	2380      	movs	r3, #128	; 0x80
 8006caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cae:	e1a8      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a75      	ldr	r2, [pc, #468]	; (8006e8c <UART_SetConfig+0x638>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d130      	bne.n	8006d1c <UART_SetConfig+0x4c8>
 8006cba:	4b73      	ldr	r3, [pc, #460]	; (8006e88 <UART_SetConfig+0x634>)
 8006cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cbe:	f003 0307 	and.w	r3, r3, #7
 8006cc2:	2b05      	cmp	r3, #5
 8006cc4:	d826      	bhi.n	8006d14 <UART_SetConfig+0x4c0>
 8006cc6:	a201      	add	r2, pc, #4	; (adr r2, 8006ccc <UART_SetConfig+0x478>)
 8006cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ccc:	08006ce5 	.word	0x08006ce5
 8006cd0:	08006ced 	.word	0x08006ced
 8006cd4:	08006cf5 	.word	0x08006cf5
 8006cd8:	08006cfd 	.word	0x08006cfd
 8006cdc:	08006d05 	.word	0x08006d05
 8006ce0:	08006d0d 	.word	0x08006d0d
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cea:	e18a      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006cec:	2304      	movs	r3, #4
 8006cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cf2:	e186      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006cf4:	2308      	movs	r3, #8
 8006cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cfa:	e182      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006cfc:	2310      	movs	r3, #16
 8006cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d02:	e17e      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006d04:	2320      	movs	r3, #32
 8006d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d0a:	e17a      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006d0c:	2340      	movs	r3, #64	; 0x40
 8006d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d12:	e176      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006d14:	2380      	movs	r3, #128	; 0x80
 8006d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d1a:	e172      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a5b      	ldr	r2, [pc, #364]	; (8006e90 <UART_SetConfig+0x63c>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d130      	bne.n	8006d88 <UART_SetConfig+0x534>
 8006d26:	4b58      	ldr	r3, [pc, #352]	; (8006e88 <UART_SetConfig+0x634>)
 8006d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2a:	f003 0307 	and.w	r3, r3, #7
 8006d2e:	2b05      	cmp	r3, #5
 8006d30:	d826      	bhi.n	8006d80 <UART_SetConfig+0x52c>
 8006d32:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <UART_SetConfig+0x4e4>)
 8006d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d38:	08006d51 	.word	0x08006d51
 8006d3c:	08006d59 	.word	0x08006d59
 8006d40:	08006d61 	.word	0x08006d61
 8006d44:	08006d69 	.word	0x08006d69
 8006d48:	08006d71 	.word	0x08006d71
 8006d4c:	08006d79 	.word	0x08006d79
 8006d50:	2300      	movs	r3, #0
 8006d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d56:	e154      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006d58:	2304      	movs	r3, #4
 8006d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d5e:	e150      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006d60:	2308      	movs	r3, #8
 8006d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d66:	e14c      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006d68:	2310      	movs	r3, #16
 8006d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d6e:	e148      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006d70:	2320      	movs	r3, #32
 8006d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d76:	e144      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006d78:	2340      	movs	r3, #64	; 0x40
 8006d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d7e:	e140      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006d80:	2380      	movs	r3, #128	; 0x80
 8006d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d86:	e13c      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a41      	ldr	r2, [pc, #260]	; (8006e94 <UART_SetConfig+0x640>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	f040 8082 	bne.w	8006e98 <UART_SetConfig+0x644>
 8006d94:	4b3c      	ldr	r3, [pc, #240]	; (8006e88 <UART_SetConfig+0x634>)
 8006d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d9c:	2b28      	cmp	r3, #40	; 0x28
 8006d9e:	d86d      	bhi.n	8006e7c <UART_SetConfig+0x628>
 8006da0:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <UART_SetConfig+0x554>)
 8006da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da6:	bf00      	nop
 8006da8:	08006e4d 	.word	0x08006e4d
 8006dac:	08006e7d 	.word	0x08006e7d
 8006db0:	08006e7d 	.word	0x08006e7d
 8006db4:	08006e7d 	.word	0x08006e7d
 8006db8:	08006e7d 	.word	0x08006e7d
 8006dbc:	08006e7d 	.word	0x08006e7d
 8006dc0:	08006e7d 	.word	0x08006e7d
 8006dc4:	08006e7d 	.word	0x08006e7d
 8006dc8:	08006e55 	.word	0x08006e55
 8006dcc:	08006e7d 	.word	0x08006e7d
 8006dd0:	08006e7d 	.word	0x08006e7d
 8006dd4:	08006e7d 	.word	0x08006e7d
 8006dd8:	08006e7d 	.word	0x08006e7d
 8006ddc:	08006e7d 	.word	0x08006e7d
 8006de0:	08006e7d 	.word	0x08006e7d
 8006de4:	08006e7d 	.word	0x08006e7d
 8006de8:	08006e5d 	.word	0x08006e5d
 8006dec:	08006e7d 	.word	0x08006e7d
 8006df0:	08006e7d 	.word	0x08006e7d
 8006df4:	08006e7d 	.word	0x08006e7d
 8006df8:	08006e7d 	.word	0x08006e7d
 8006dfc:	08006e7d 	.word	0x08006e7d
 8006e00:	08006e7d 	.word	0x08006e7d
 8006e04:	08006e7d 	.word	0x08006e7d
 8006e08:	08006e65 	.word	0x08006e65
 8006e0c:	08006e7d 	.word	0x08006e7d
 8006e10:	08006e7d 	.word	0x08006e7d
 8006e14:	08006e7d 	.word	0x08006e7d
 8006e18:	08006e7d 	.word	0x08006e7d
 8006e1c:	08006e7d 	.word	0x08006e7d
 8006e20:	08006e7d 	.word	0x08006e7d
 8006e24:	08006e7d 	.word	0x08006e7d
 8006e28:	08006e6d 	.word	0x08006e6d
 8006e2c:	08006e7d 	.word	0x08006e7d
 8006e30:	08006e7d 	.word	0x08006e7d
 8006e34:	08006e7d 	.word	0x08006e7d
 8006e38:	08006e7d 	.word	0x08006e7d
 8006e3c:	08006e7d 	.word	0x08006e7d
 8006e40:	08006e7d 	.word	0x08006e7d
 8006e44:	08006e7d 	.word	0x08006e7d
 8006e48:	08006e75 	.word	0x08006e75
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e52:	e0d6      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006e54:	2304      	movs	r3, #4
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e5a:	e0d2      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006e5c:	2308      	movs	r3, #8
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e62:	e0ce      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006e64:	2310      	movs	r3, #16
 8006e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e6a:	e0ca      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006e6c:	2320      	movs	r3, #32
 8006e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e72:	e0c6      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006e74:	2340      	movs	r3, #64	; 0x40
 8006e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e7a:	e0c2      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006e7c:	2380      	movs	r3, #128	; 0x80
 8006e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e82:	e0be      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006e84:	40011400 	.word	0x40011400
 8006e88:	58024400 	.word	0x58024400
 8006e8c:	40007800 	.word	0x40007800
 8006e90:	40007c00 	.word	0x40007c00
 8006e94:	40011800 	.word	0x40011800
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4aad      	ldr	r2, [pc, #692]	; (8007154 <UART_SetConfig+0x900>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d176      	bne.n	8006f90 <UART_SetConfig+0x73c>
 8006ea2:	4bad      	ldr	r3, [pc, #692]	; (8007158 <UART_SetConfig+0x904>)
 8006ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006eaa:	2b28      	cmp	r3, #40	; 0x28
 8006eac:	d86c      	bhi.n	8006f88 <UART_SetConfig+0x734>
 8006eae:	a201      	add	r2, pc, #4	; (adr r2, 8006eb4 <UART_SetConfig+0x660>)
 8006eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb4:	08006f59 	.word	0x08006f59
 8006eb8:	08006f89 	.word	0x08006f89
 8006ebc:	08006f89 	.word	0x08006f89
 8006ec0:	08006f89 	.word	0x08006f89
 8006ec4:	08006f89 	.word	0x08006f89
 8006ec8:	08006f89 	.word	0x08006f89
 8006ecc:	08006f89 	.word	0x08006f89
 8006ed0:	08006f89 	.word	0x08006f89
 8006ed4:	08006f61 	.word	0x08006f61
 8006ed8:	08006f89 	.word	0x08006f89
 8006edc:	08006f89 	.word	0x08006f89
 8006ee0:	08006f89 	.word	0x08006f89
 8006ee4:	08006f89 	.word	0x08006f89
 8006ee8:	08006f89 	.word	0x08006f89
 8006eec:	08006f89 	.word	0x08006f89
 8006ef0:	08006f89 	.word	0x08006f89
 8006ef4:	08006f69 	.word	0x08006f69
 8006ef8:	08006f89 	.word	0x08006f89
 8006efc:	08006f89 	.word	0x08006f89
 8006f00:	08006f89 	.word	0x08006f89
 8006f04:	08006f89 	.word	0x08006f89
 8006f08:	08006f89 	.word	0x08006f89
 8006f0c:	08006f89 	.word	0x08006f89
 8006f10:	08006f89 	.word	0x08006f89
 8006f14:	08006f71 	.word	0x08006f71
 8006f18:	08006f89 	.word	0x08006f89
 8006f1c:	08006f89 	.word	0x08006f89
 8006f20:	08006f89 	.word	0x08006f89
 8006f24:	08006f89 	.word	0x08006f89
 8006f28:	08006f89 	.word	0x08006f89
 8006f2c:	08006f89 	.word	0x08006f89
 8006f30:	08006f89 	.word	0x08006f89
 8006f34:	08006f79 	.word	0x08006f79
 8006f38:	08006f89 	.word	0x08006f89
 8006f3c:	08006f89 	.word	0x08006f89
 8006f40:	08006f89 	.word	0x08006f89
 8006f44:	08006f89 	.word	0x08006f89
 8006f48:	08006f89 	.word	0x08006f89
 8006f4c:	08006f89 	.word	0x08006f89
 8006f50:	08006f89 	.word	0x08006f89
 8006f54:	08006f81 	.word	0x08006f81
 8006f58:	2301      	movs	r3, #1
 8006f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f5e:	e050      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006f60:	2304      	movs	r3, #4
 8006f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f66:	e04c      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006f68:	2308      	movs	r3, #8
 8006f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f6e:	e048      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006f70:	2310      	movs	r3, #16
 8006f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f76:	e044      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006f78:	2320      	movs	r3, #32
 8006f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f7e:	e040      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006f80:	2340      	movs	r3, #64	; 0x40
 8006f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f86:	e03c      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006f88:	2380      	movs	r3, #128	; 0x80
 8006f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8e:	e038      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a71      	ldr	r2, [pc, #452]	; (800715c <UART_SetConfig+0x908>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d130      	bne.n	8006ffc <UART_SetConfig+0x7a8>
 8006f9a:	4b6f      	ldr	r3, [pc, #444]	; (8007158 <UART_SetConfig+0x904>)
 8006f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f9e:	f003 0307 	and.w	r3, r3, #7
 8006fa2:	2b05      	cmp	r3, #5
 8006fa4:	d826      	bhi.n	8006ff4 <UART_SetConfig+0x7a0>
 8006fa6:	a201      	add	r2, pc, #4	; (adr r2, 8006fac <UART_SetConfig+0x758>)
 8006fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fac:	08006fc5 	.word	0x08006fc5
 8006fb0:	08006fcd 	.word	0x08006fcd
 8006fb4:	08006fd5 	.word	0x08006fd5
 8006fb8:	08006fdd 	.word	0x08006fdd
 8006fbc:	08006fe5 	.word	0x08006fe5
 8006fc0:	08006fed 	.word	0x08006fed
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fca:	e01a      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006fcc:	2304      	movs	r3, #4
 8006fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd2:	e016      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006fd4:	2308      	movs	r3, #8
 8006fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fda:	e012      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006fdc:	2310      	movs	r3, #16
 8006fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe2:	e00e      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006fe4:	2320      	movs	r3, #32
 8006fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fea:	e00a      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006fec:	2340      	movs	r3, #64	; 0x40
 8006fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ff2:	e006      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006ff4:	2380      	movs	r3, #128	; 0x80
 8006ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ffa:	e002      	b.n	8007002 <UART_SetConfig+0x7ae>
 8006ffc:	2380      	movs	r3, #128	; 0x80
 8006ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a55      	ldr	r2, [pc, #340]	; (800715c <UART_SetConfig+0x908>)
 8007008:	4293      	cmp	r3, r2
 800700a:	f040 80f8 	bne.w	80071fe <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800700e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007012:	2b20      	cmp	r3, #32
 8007014:	dc46      	bgt.n	80070a4 <UART_SetConfig+0x850>
 8007016:	2b02      	cmp	r3, #2
 8007018:	db75      	blt.n	8007106 <UART_SetConfig+0x8b2>
 800701a:	3b02      	subs	r3, #2
 800701c:	2b1e      	cmp	r3, #30
 800701e:	d872      	bhi.n	8007106 <UART_SetConfig+0x8b2>
 8007020:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <UART_SetConfig+0x7d4>)
 8007022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007026:	bf00      	nop
 8007028:	080070ab 	.word	0x080070ab
 800702c:	08007107 	.word	0x08007107
 8007030:	080070b3 	.word	0x080070b3
 8007034:	08007107 	.word	0x08007107
 8007038:	08007107 	.word	0x08007107
 800703c:	08007107 	.word	0x08007107
 8007040:	080070c3 	.word	0x080070c3
 8007044:	08007107 	.word	0x08007107
 8007048:	08007107 	.word	0x08007107
 800704c:	08007107 	.word	0x08007107
 8007050:	08007107 	.word	0x08007107
 8007054:	08007107 	.word	0x08007107
 8007058:	08007107 	.word	0x08007107
 800705c:	08007107 	.word	0x08007107
 8007060:	080070d3 	.word	0x080070d3
 8007064:	08007107 	.word	0x08007107
 8007068:	08007107 	.word	0x08007107
 800706c:	08007107 	.word	0x08007107
 8007070:	08007107 	.word	0x08007107
 8007074:	08007107 	.word	0x08007107
 8007078:	08007107 	.word	0x08007107
 800707c:	08007107 	.word	0x08007107
 8007080:	08007107 	.word	0x08007107
 8007084:	08007107 	.word	0x08007107
 8007088:	08007107 	.word	0x08007107
 800708c:	08007107 	.word	0x08007107
 8007090:	08007107 	.word	0x08007107
 8007094:	08007107 	.word	0x08007107
 8007098:	08007107 	.word	0x08007107
 800709c:	08007107 	.word	0x08007107
 80070a0:	080070f9 	.word	0x080070f9
 80070a4:	2b40      	cmp	r3, #64	; 0x40
 80070a6:	d02a      	beq.n	80070fe <UART_SetConfig+0x8aa>
 80070a8:	e02d      	b.n	8007106 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80070aa:	f7fe fd0b 	bl	8005ac4 <HAL_RCCEx_GetD3PCLK1Freq>
 80070ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80070b0:	e02f      	b.n	8007112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fe fd1a 	bl	8005af0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070c0:	e027      	b.n	8007112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070c2:	f107 0318 	add.w	r3, r7, #24
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fe fe66 	bl	8005d98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070d0:	e01f      	b.n	8007112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070d2:	4b21      	ldr	r3, [pc, #132]	; (8007158 <UART_SetConfig+0x904>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0320 	and.w	r3, r3, #32
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d009      	beq.n	80070f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070de:	4b1e      	ldr	r3, [pc, #120]	; (8007158 <UART_SetConfig+0x904>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	08db      	lsrs	r3, r3, #3
 80070e4:	f003 0303 	and.w	r3, r3, #3
 80070e8:	4a1d      	ldr	r2, [pc, #116]	; (8007160 <UART_SetConfig+0x90c>)
 80070ea:	fa22 f303 	lsr.w	r3, r2, r3
 80070ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070f0:	e00f      	b.n	8007112 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80070f2:	4b1b      	ldr	r3, [pc, #108]	; (8007160 <UART_SetConfig+0x90c>)
 80070f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070f6:	e00c      	b.n	8007112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80070f8:	4b1a      	ldr	r3, [pc, #104]	; (8007164 <UART_SetConfig+0x910>)
 80070fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070fc:	e009      	b.n	8007112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007104:	e005      	b.n	8007112 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007110:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 81ee 	beq.w	80074f6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711e:	4a12      	ldr	r2, [pc, #72]	; (8007168 <UART_SetConfig+0x914>)
 8007120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007124:	461a      	mov	r2, r3
 8007126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007128:	fbb3 f3f2 	udiv	r3, r3, r2
 800712c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	4613      	mov	r3, r2
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	4413      	add	r3, r2
 8007138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800713a:	429a      	cmp	r2, r3
 800713c:	d305      	bcc.n	800714a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007146:	429a      	cmp	r2, r3
 8007148:	d910      	bls.n	800716c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007150:	e1d1      	b.n	80074f6 <UART_SetConfig+0xca2>
 8007152:	bf00      	nop
 8007154:	40011c00 	.word	0x40011c00
 8007158:	58024400 	.word	0x58024400
 800715c:	58000c00 	.word	0x58000c00
 8007160:	03d09000 	.word	0x03d09000
 8007164:	003d0900 	.word	0x003d0900
 8007168:	08019234 	.word	0x08019234
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800716c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800716e:	2200      	movs	r2, #0
 8007170:	60bb      	str	r3, [r7, #8]
 8007172:	60fa      	str	r2, [r7, #12]
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	4ac0      	ldr	r2, [pc, #768]	; (800747c <UART_SetConfig+0xc28>)
 800717a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800717e:	b29b      	uxth	r3, r3
 8007180:	2200      	movs	r2, #0
 8007182:	603b      	str	r3, [r7, #0]
 8007184:	607a      	str	r2, [r7, #4]
 8007186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800718a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800718e:	f7f9 f8ad 	bl	80002ec <__aeabi_uldivmod>
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	4610      	mov	r0, r2
 8007198:	4619      	mov	r1, r3
 800719a:	f04f 0200 	mov.w	r2, #0
 800719e:	f04f 0300 	mov.w	r3, #0
 80071a2:	020b      	lsls	r3, r1, #8
 80071a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80071a8:	0202      	lsls	r2, r0, #8
 80071aa:	6979      	ldr	r1, [r7, #20]
 80071ac:	6849      	ldr	r1, [r1, #4]
 80071ae:	0849      	lsrs	r1, r1, #1
 80071b0:	2000      	movs	r0, #0
 80071b2:	460c      	mov	r4, r1
 80071b4:	4605      	mov	r5, r0
 80071b6:	eb12 0804 	adds.w	r8, r2, r4
 80071ba:	eb43 0905 	adc.w	r9, r3, r5
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	469a      	mov	sl, r3
 80071c6:	4693      	mov	fp, r2
 80071c8:	4652      	mov	r2, sl
 80071ca:	465b      	mov	r3, fp
 80071cc:	4640      	mov	r0, r8
 80071ce:	4649      	mov	r1, r9
 80071d0:	f7f9 f88c 	bl	80002ec <__aeabi_uldivmod>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4613      	mov	r3, r2
 80071da:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071e2:	d308      	bcc.n	80071f6 <UART_SetConfig+0x9a2>
 80071e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071ea:	d204      	bcs.n	80071f6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071f2:	60da      	str	r2, [r3, #12]
 80071f4:	e17f      	b.n	80074f6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80071fc:	e17b      	b.n	80074f6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007206:	f040 80bd 	bne.w	8007384 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800720a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800720e:	2b20      	cmp	r3, #32
 8007210:	dc48      	bgt.n	80072a4 <UART_SetConfig+0xa50>
 8007212:	2b00      	cmp	r3, #0
 8007214:	db7b      	blt.n	800730e <UART_SetConfig+0xaba>
 8007216:	2b20      	cmp	r3, #32
 8007218:	d879      	bhi.n	800730e <UART_SetConfig+0xaba>
 800721a:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <UART_SetConfig+0x9cc>)
 800721c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007220:	080072ab 	.word	0x080072ab
 8007224:	080072b3 	.word	0x080072b3
 8007228:	0800730f 	.word	0x0800730f
 800722c:	0800730f 	.word	0x0800730f
 8007230:	080072bb 	.word	0x080072bb
 8007234:	0800730f 	.word	0x0800730f
 8007238:	0800730f 	.word	0x0800730f
 800723c:	0800730f 	.word	0x0800730f
 8007240:	080072cb 	.word	0x080072cb
 8007244:	0800730f 	.word	0x0800730f
 8007248:	0800730f 	.word	0x0800730f
 800724c:	0800730f 	.word	0x0800730f
 8007250:	0800730f 	.word	0x0800730f
 8007254:	0800730f 	.word	0x0800730f
 8007258:	0800730f 	.word	0x0800730f
 800725c:	0800730f 	.word	0x0800730f
 8007260:	080072db 	.word	0x080072db
 8007264:	0800730f 	.word	0x0800730f
 8007268:	0800730f 	.word	0x0800730f
 800726c:	0800730f 	.word	0x0800730f
 8007270:	0800730f 	.word	0x0800730f
 8007274:	0800730f 	.word	0x0800730f
 8007278:	0800730f 	.word	0x0800730f
 800727c:	0800730f 	.word	0x0800730f
 8007280:	0800730f 	.word	0x0800730f
 8007284:	0800730f 	.word	0x0800730f
 8007288:	0800730f 	.word	0x0800730f
 800728c:	0800730f 	.word	0x0800730f
 8007290:	0800730f 	.word	0x0800730f
 8007294:	0800730f 	.word	0x0800730f
 8007298:	0800730f 	.word	0x0800730f
 800729c:	0800730f 	.word	0x0800730f
 80072a0:	08007301 	.word	0x08007301
 80072a4:	2b40      	cmp	r3, #64	; 0x40
 80072a6:	d02e      	beq.n	8007306 <UART_SetConfig+0xab2>
 80072a8:	e031      	b.n	800730e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072aa:	f7fd fcd3 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 80072ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80072b0:	e033      	b.n	800731a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072b2:	f7fd fce5 	bl	8004c80 <HAL_RCC_GetPCLK2Freq>
 80072b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80072b8:	e02f      	b.n	800731a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fe fc16 	bl	8005af0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80072c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072c8:	e027      	b.n	800731a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072ca:	f107 0318 	add.w	r3, r7, #24
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fe fd62 	bl	8005d98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072d8:	e01f      	b.n	800731a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072da:	4b69      	ldr	r3, [pc, #420]	; (8007480 <UART_SetConfig+0xc2c>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0320 	and.w	r3, r3, #32
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d009      	beq.n	80072fa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80072e6:	4b66      	ldr	r3, [pc, #408]	; (8007480 <UART_SetConfig+0xc2c>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	08db      	lsrs	r3, r3, #3
 80072ec:	f003 0303 	and.w	r3, r3, #3
 80072f0:	4a64      	ldr	r2, [pc, #400]	; (8007484 <UART_SetConfig+0xc30>)
 80072f2:	fa22 f303 	lsr.w	r3, r2, r3
 80072f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80072f8:	e00f      	b.n	800731a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80072fa:	4b62      	ldr	r3, [pc, #392]	; (8007484 <UART_SetConfig+0xc30>)
 80072fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072fe:	e00c      	b.n	800731a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007300:	4b61      	ldr	r3, [pc, #388]	; (8007488 <UART_SetConfig+0xc34>)
 8007302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007304:	e009      	b.n	800731a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800730a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800730c:	e005      	b.n	800731a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800730e:	2300      	movs	r3, #0
 8007310:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007318:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800731a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 80ea 	beq.w	80074f6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007326:	4a55      	ldr	r2, [pc, #340]	; (800747c <UART_SetConfig+0xc28>)
 8007328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800732c:	461a      	mov	r2, r3
 800732e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007330:	fbb3 f3f2 	udiv	r3, r3, r2
 8007334:	005a      	lsls	r2, r3, #1
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	085b      	lsrs	r3, r3, #1
 800733c:	441a      	add	r2, r3
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	fbb2 f3f3 	udiv	r3, r2, r3
 8007346:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734a:	2b0f      	cmp	r3, #15
 800734c:	d916      	bls.n	800737c <UART_SetConfig+0xb28>
 800734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007354:	d212      	bcs.n	800737c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007358:	b29b      	uxth	r3, r3
 800735a:	f023 030f 	bic.w	r3, r3, #15
 800735e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007362:	085b      	lsrs	r3, r3, #1
 8007364:	b29b      	uxth	r3, r3
 8007366:	f003 0307 	and.w	r3, r3, #7
 800736a:	b29a      	uxth	r2, r3
 800736c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800736e:	4313      	orrs	r3, r2
 8007370:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007378:	60da      	str	r2, [r3, #12]
 800737a:	e0bc      	b.n	80074f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007382:	e0b8      	b.n	80074f6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007384:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007388:	2b20      	cmp	r3, #32
 800738a:	dc4b      	bgt.n	8007424 <UART_SetConfig+0xbd0>
 800738c:	2b00      	cmp	r3, #0
 800738e:	f2c0 8087 	blt.w	80074a0 <UART_SetConfig+0xc4c>
 8007392:	2b20      	cmp	r3, #32
 8007394:	f200 8084 	bhi.w	80074a0 <UART_SetConfig+0xc4c>
 8007398:	a201      	add	r2, pc, #4	; (adr r2, 80073a0 <UART_SetConfig+0xb4c>)
 800739a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739e:	bf00      	nop
 80073a0:	0800742b 	.word	0x0800742b
 80073a4:	08007433 	.word	0x08007433
 80073a8:	080074a1 	.word	0x080074a1
 80073ac:	080074a1 	.word	0x080074a1
 80073b0:	0800743b 	.word	0x0800743b
 80073b4:	080074a1 	.word	0x080074a1
 80073b8:	080074a1 	.word	0x080074a1
 80073bc:	080074a1 	.word	0x080074a1
 80073c0:	0800744b 	.word	0x0800744b
 80073c4:	080074a1 	.word	0x080074a1
 80073c8:	080074a1 	.word	0x080074a1
 80073cc:	080074a1 	.word	0x080074a1
 80073d0:	080074a1 	.word	0x080074a1
 80073d4:	080074a1 	.word	0x080074a1
 80073d8:	080074a1 	.word	0x080074a1
 80073dc:	080074a1 	.word	0x080074a1
 80073e0:	0800745b 	.word	0x0800745b
 80073e4:	080074a1 	.word	0x080074a1
 80073e8:	080074a1 	.word	0x080074a1
 80073ec:	080074a1 	.word	0x080074a1
 80073f0:	080074a1 	.word	0x080074a1
 80073f4:	080074a1 	.word	0x080074a1
 80073f8:	080074a1 	.word	0x080074a1
 80073fc:	080074a1 	.word	0x080074a1
 8007400:	080074a1 	.word	0x080074a1
 8007404:	080074a1 	.word	0x080074a1
 8007408:	080074a1 	.word	0x080074a1
 800740c:	080074a1 	.word	0x080074a1
 8007410:	080074a1 	.word	0x080074a1
 8007414:	080074a1 	.word	0x080074a1
 8007418:	080074a1 	.word	0x080074a1
 800741c:	080074a1 	.word	0x080074a1
 8007420:	08007493 	.word	0x08007493
 8007424:	2b40      	cmp	r3, #64	; 0x40
 8007426:	d037      	beq.n	8007498 <UART_SetConfig+0xc44>
 8007428:	e03a      	b.n	80074a0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800742a:	f7fd fc13 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 800742e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007430:	e03c      	b.n	80074ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007432:	f7fd fc25 	bl	8004c80 <HAL_RCC_GetPCLK2Freq>
 8007436:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007438:	e038      	b.n	80074ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800743a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe fb56 	bl	8005af0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007448:	e030      	b.n	80074ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800744a:	f107 0318 	add.w	r3, r7, #24
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe fca2 	bl	8005d98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007458:	e028      	b.n	80074ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800745a:	4b09      	ldr	r3, [pc, #36]	; (8007480 <UART_SetConfig+0xc2c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0320 	and.w	r3, r3, #32
 8007462:	2b00      	cmp	r3, #0
 8007464:	d012      	beq.n	800748c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007466:	4b06      	ldr	r3, [pc, #24]	; (8007480 <UART_SetConfig+0xc2c>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	08db      	lsrs	r3, r3, #3
 800746c:	f003 0303 	and.w	r3, r3, #3
 8007470:	4a04      	ldr	r2, [pc, #16]	; (8007484 <UART_SetConfig+0xc30>)
 8007472:	fa22 f303 	lsr.w	r3, r2, r3
 8007476:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007478:	e018      	b.n	80074ac <UART_SetConfig+0xc58>
 800747a:	bf00      	nop
 800747c:	08019234 	.word	0x08019234
 8007480:	58024400 	.word	0x58024400
 8007484:	03d09000 	.word	0x03d09000
 8007488:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800748c:	4b24      	ldr	r3, [pc, #144]	; (8007520 <UART_SetConfig+0xccc>)
 800748e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007490:	e00c      	b.n	80074ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007492:	4b24      	ldr	r3, [pc, #144]	; (8007524 <UART_SetConfig+0xcd0>)
 8007494:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007496:	e009      	b.n	80074ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007498:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800749c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800749e:	e005      	b.n	80074ac <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80074a0:	2300      	movs	r3, #0
 80074a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80074aa:	bf00      	nop
    }

    if (pclk != 0U)
 80074ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d021      	beq.n	80074f6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	4a1c      	ldr	r2, [pc, #112]	; (8007528 <UART_SetConfig+0xcd4>)
 80074b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074bc:	461a      	mov	r2, r3
 80074be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	085b      	lsrs	r3, r3, #1
 80074ca:	441a      	add	r2, r3
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d8:	2b0f      	cmp	r3, #15
 80074da:	d909      	bls.n	80074f0 <UART_SetConfig+0xc9c>
 80074dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074e2:	d205      	bcs.n	80074f0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	60da      	str	r2, [r3, #12]
 80074ee:	e002      	b.n	80074f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	2201      	movs	r2, #1
 8007502:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	2200      	movs	r2, #0
 800750a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	2200      	movs	r2, #0
 8007510:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007512:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007516:	4618      	mov	r0, r3
 8007518:	3748      	adds	r7, #72	; 0x48
 800751a:	46bd      	mov	sp, r7
 800751c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007520:	03d09000 	.word	0x03d09000
 8007524:	003d0900 	.word	0x003d0900
 8007528:	08019234 	.word	0x08019234

0800752c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757c:	f003 0304 	and.w	r3, r3, #4
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00a      	beq.n	800759a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759e:	f003 0308 	and.w	r3, r3, #8
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c0:	f003 0310 	and.w	r3, r3, #16
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00a      	beq.n	80075de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e2:	f003 0320 	and.w	r3, r3, #32
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00a      	beq.n	8007600 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007608:	2b00      	cmp	r3, #0
 800760a:	d01a      	beq.n	8007642 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800762a:	d10a      	bne.n	8007642 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00a      	beq.n	8007664 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	605a      	str	r2, [r3, #4]
  }
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af02      	add	r7, sp, #8
 8007676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007680:	f7fb ffec 	bl	800365c <HAL_GetTick>
 8007684:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0308 	and.w	r3, r3, #8
 8007690:	2b08      	cmp	r3, #8
 8007692:	d10e      	bne.n	80076b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007694:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f82f 	bl	8007706 <UART_WaitOnFlagUntilTimeout>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e025      	b.n	80076fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0304 	and.w	r3, r3, #4
 80076bc:	2b04      	cmp	r3, #4
 80076be:	d10e      	bne.n	80076de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f819 	bl	8007706 <UART_WaitOnFlagUntilTimeout>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e00f      	b.n	80076fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2220      	movs	r2, #32
 80076ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b09c      	sub	sp, #112	; 0x70
 800770a:	af00      	add	r7, sp, #0
 800770c:	60f8      	str	r0, [r7, #12]
 800770e:	60b9      	str	r1, [r7, #8]
 8007710:	603b      	str	r3, [r7, #0]
 8007712:	4613      	mov	r3, r2
 8007714:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007716:	e0a9      	b.n	800786c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800771a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771e:	f000 80a5 	beq.w	800786c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007722:	f7fb ff9b 	bl	800365c <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800772e:	429a      	cmp	r2, r3
 8007730:	d302      	bcc.n	8007738 <UART_WaitOnFlagUntilTimeout+0x32>
 8007732:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007734:	2b00      	cmp	r3, #0
 8007736:	d140      	bne.n	80077ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007748:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800774c:	667b      	str	r3, [r7, #100]	; 0x64
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007756:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007758:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800775c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800775e:	e841 2300 	strex	r3, r2, [r1]
 8007762:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1e6      	bne.n	8007738 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3308      	adds	r3, #8
 8007770:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007774:	e853 3f00 	ldrex	r3, [r3]
 8007778:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800777a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777c:	f023 0301 	bic.w	r3, r3, #1
 8007780:	663b      	str	r3, [r7, #96]	; 0x60
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3308      	adds	r3, #8
 8007788:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800778a:	64ba      	str	r2, [r7, #72]	; 0x48
 800778c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007790:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007792:	e841 2300 	strex	r3, r2, [r1]
 8007796:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e5      	bne.n	800776a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2220      	movs	r2, #32
 80077a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2220      	movs	r2, #32
 80077aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e069      	b.n	800788e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d051      	beq.n	800786c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077d6:	d149      	bne.n	800786c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ea:	e853 3f00 	ldrex	r3, [r3]
 80077ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007800:	637b      	str	r3, [r7, #52]	; 0x34
 8007802:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007804:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007808:	e841 2300 	strex	r3, r2, [r1]
 800780c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800780e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e6      	bne.n	80077e2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	3308      	adds	r3, #8
 800781a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	613b      	str	r3, [r7, #16]
   return(result);
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f023 0301 	bic.w	r3, r3, #1
 800782a:	66bb      	str	r3, [r7, #104]	; 0x68
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3308      	adds	r3, #8
 8007832:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007834:	623a      	str	r2, [r7, #32]
 8007836:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007838:	69f9      	ldr	r1, [r7, #28]
 800783a:	6a3a      	ldr	r2, [r7, #32]
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	61bb      	str	r3, [r7, #24]
   return(result);
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e5      	bne.n	8007814 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2220      	movs	r2, #32
 800784c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2220      	movs	r2, #32
 8007854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2220      	movs	r2, #32
 800785c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	e010      	b.n	800788e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	69da      	ldr	r2, [r3, #28]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	4013      	ands	r3, r2
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	429a      	cmp	r2, r3
 800787a:	bf0c      	ite	eq
 800787c:	2301      	moveq	r3, #1
 800787e:	2300      	movne	r3, #0
 8007880:	b2db      	uxtb	r3, r3
 8007882:	461a      	mov	r2, r3
 8007884:	79fb      	ldrb	r3, [r7, #7]
 8007886:	429a      	cmp	r2, r3
 8007888:	f43f af46 	beq.w	8007718 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3770      	adds	r7, #112	; 0x70
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007896:	b480      	push	{r7}
 8007898:	b085      	sub	sp, #20
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d101      	bne.n	80078ac <HAL_UARTEx_DisableFifoMode+0x16>
 80078a8:	2302      	movs	r3, #2
 80078aa:	e027      	b.n	80078fc <HAL_UARTEx_DisableFifoMode+0x66>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2224      	movs	r2, #36	; 0x24
 80078b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 0201 	bic.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80078da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2220      	movs	r2, #32
 80078ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007918:	2b01      	cmp	r3, #1
 800791a:	d101      	bne.n	8007920 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800791c:	2302      	movs	r3, #2
 800791e:	e02d      	b.n	800797c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2224      	movs	r2, #36	; 0x24
 800792c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f022 0201 	bic.w	r2, r2, #1
 8007946:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	430a      	orrs	r2, r1
 800795a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f84f 	bl	8007a00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2220      	movs	r2, #32
 800796e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007994:	2b01      	cmp	r3, #1
 8007996:	d101      	bne.n	800799c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007998:	2302      	movs	r3, #2
 800799a:	e02d      	b.n	80079f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2224      	movs	r2, #36	; 0x24
 80079a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0201 	bic.w	r2, r2, #1
 80079c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f811 	bl	8007a00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d108      	bne.n	8007a22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a20:	e031      	b.n	8007a86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a22:	2310      	movs	r3, #16
 8007a24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a26:	2310      	movs	r3, #16
 8007a28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	0e5b      	lsrs	r3, r3, #25
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	f003 0307 	and.w	r3, r3, #7
 8007a38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	0f5b      	lsrs	r3, r3, #29
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	f003 0307 	and.w	r3, r3, #7
 8007a48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a4a:	7bbb      	ldrb	r3, [r7, #14]
 8007a4c:	7b3a      	ldrb	r2, [r7, #12]
 8007a4e:	4911      	ldr	r1, [pc, #68]	; (8007a94 <UARTEx_SetNbDataToProcess+0x94>)
 8007a50:	5c8a      	ldrb	r2, [r1, r2]
 8007a52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a56:	7b3a      	ldrb	r2, [r7, #12]
 8007a58:	490f      	ldr	r1, [pc, #60]	; (8007a98 <UARTEx_SetNbDataToProcess+0x98>)
 8007a5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
 8007a6a:	7b7a      	ldrb	r2, [r7, #13]
 8007a6c:	4909      	ldr	r1, [pc, #36]	; (8007a94 <UARTEx_SetNbDataToProcess+0x94>)
 8007a6e:	5c8a      	ldrb	r2, [r1, r2]
 8007a70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a74:	7b7a      	ldrb	r2, [r7, #13]
 8007a76:	4908      	ldr	r1, [pc, #32]	; (8007a98 <UARTEx_SetNbDataToProcess+0x98>)
 8007a78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007a86:	bf00      	nop
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	0801924c 	.word	0x0801924c
 8007a98:	08019254 	.word	0x08019254

08007a9c <__libc_init_array>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	4d0d      	ldr	r5, [pc, #52]	; (8007ad4 <__libc_init_array+0x38>)
 8007aa0:	4c0d      	ldr	r4, [pc, #52]	; (8007ad8 <__libc_init_array+0x3c>)
 8007aa2:	1b64      	subs	r4, r4, r5
 8007aa4:	10a4      	asrs	r4, r4, #2
 8007aa6:	2600      	movs	r6, #0
 8007aa8:	42a6      	cmp	r6, r4
 8007aaa:	d109      	bne.n	8007ac0 <__libc_init_array+0x24>
 8007aac:	4d0b      	ldr	r5, [pc, #44]	; (8007adc <__libc_init_array+0x40>)
 8007aae:	4c0c      	ldr	r4, [pc, #48]	; (8007ae0 <__libc_init_array+0x44>)
 8007ab0:	f000 f820 	bl	8007af4 <_init>
 8007ab4:	1b64      	subs	r4, r4, r5
 8007ab6:	10a4      	asrs	r4, r4, #2
 8007ab8:	2600      	movs	r6, #0
 8007aba:	42a6      	cmp	r6, r4
 8007abc:	d105      	bne.n	8007aca <__libc_init_array+0x2e>
 8007abe:	bd70      	pop	{r4, r5, r6, pc}
 8007ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ac4:	4798      	blx	r3
 8007ac6:	3601      	adds	r6, #1
 8007ac8:	e7ee      	b.n	8007aa8 <__libc_init_array+0xc>
 8007aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ace:	4798      	blx	r3
 8007ad0:	3601      	adds	r6, #1
 8007ad2:	e7f2      	b.n	8007aba <__libc_init_array+0x1e>
 8007ad4:	08019264 	.word	0x08019264
 8007ad8:	08019264 	.word	0x08019264
 8007adc:	08019264 	.word	0x08019264
 8007ae0:	08019268 	.word	0x08019268

08007ae4 <memset>:
 8007ae4:	4402      	add	r2, r0
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d100      	bne.n	8007aee <memset+0xa>
 8007aec:	4770      	bx	lr
 8007aee:	f803 1b01 	strb.w	r1, [r3], #1
 8007af2:	e7f9      	b.n	8007ae8 <memset+0x4>

08007af4 <_init>:
 8007af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af6:	bf00      	nop
 8007af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007afa:	bc08      	pop	{r3}
 8007afc:	469e      	mov	lr, r3
 8007afe:	4770      	bx	lr

08007b00 <_fini>:
 8007b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b02:	bf00      	nop
 8007b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b06:	bc08      	pop	{r3}
 8007b08:	469e      	mov	lr, r3
 8007b0a:	4770      	bx	lr
