
H7A3_LCD35.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072ac  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011848  08007558  08007558  00017558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018da0  08018da0  00028da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018da8  08018da8  00028da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018dac  08018dac  00028dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000038  24000000  08018db0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000154  24000038  08018de8  00030038  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400018c  08018de8  0003018c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030038  2**0
                  CONTENTS, READONLY
 10 .debug_info   000173cf  00000000  00000000  00030066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a41  00000000  00000000  00047435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011e8  00000000  00000000  00049e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003106b  00000000  00000000  0004b060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00017bdf  00000000  00000000  0007c0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014181c  00000000  00000000  00093caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001d54c6  2**0
                  CONTENTS, READONLY
 17 .debug_ranges 000010b0  00000000  00000000  001d5518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004aa0  00000000  00000000  001d65c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000038 	.word	0x24000038
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08007540 	.word	0x08007540

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	2400003c 	.word	0x2400003c
 80002e8:	08007540 	.word	0x08007540

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <ili9486_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9486_DisplayOn(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep
 80005f4:	2011      	movs	r0, #17
 80005f6:	f000 fc2f 	bl	8000e58 <LCD_IO_WriteCmd8>
  ILI9486_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 fb37 	bl	8000c6e <LCD_IO_Bl_OnOff>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <ili9486_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9486_GetLcdPixelWidth(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_X;
 8000608:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 800060c:	4618      	mov	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <ili9486_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9486_GetLcdPixelHeight(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_Y;
 800061a:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <ili9486_ReadID>:
  * @brief  Get the ILI9486 ID.
  * @param  None
  * @retval The ILI9486 ID
  */
uint16_t ili9486_ReadID(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_ReadCmd8MultipleData8(0xD3, (uint8_t *)&id, 3, 1);
 8000632:	1d39      	adds	r1, r7, #4
 8000634:	2301      	movs	r3, #1
 8000636:	2203      	movs	r2, #3
 8000638:	20d3      	movs	r0, #211	; 0xd3
 800063a:	f001 fb5d 	bl	8001cf8 <LCD_IO_ReadCmd8MultipleData8>
  ILI9486_LCDMUTEX_POP();
  if(id == 0x869400)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a05      	ldr	r2, [pc, #20]	; (8000658 <ili9486_ReadID+0x30>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d102      	bne.n	800064c <ili9486_ReadID+0x24>
    return 0x9486;
 8000646:	f249 4386 	movw	r3, #38022	; 0x9486
 800064a:	e000      	b.n	800064e <ili9486_ReadID+0x26>
  else
    return 0;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	00869400 	.word	0x00869400

0800065c <ili9486_Init>:
  * @brief  ILI9486 initialization
  * @param  None
  * @retval None
  */
void ili9486_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  if((Is_ili9486_Initialized & ILI9486_LCD_INITIALIZED) == 0)
 8000660:	4b33      	ldr	r3, [pc, #204]	; (8000730 <ili9486_Init+0xd4>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	2b00      	cmp	r3, #0
 800066a:	d115      	bne.n	8000698 <ili9486_Init+0x3c>
  {
    Is_ili9486_Initialized |= ILI9486_LCD_INITIALIZED;
 800066c:	4b30      	ldr	r3, [pc, #192]	; (8000730 <ili9486_Init+0xd4>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4b2e      	ldr	r3, [pc, #184]	; (8000730 <ili9486_Init+0xd4>)
 8000678:	701a      	strb	r2, [r3, #0]
    if((Is_ili9486_Initialized & ILI9486_IO_INITIALIZED) == 0)
 800067a:	4b2d      	ldr	r3, [pc, #180]	; (8000730 <ili9486_Init+0xd4>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	2b00      	cmp	r3, #0
 8000684:	d101      	bne.n	800068a <ili9486_Init+0x2e>
      LCD_IO_Init();
 8000686:	f000 fafd 	bl	8000c84 <LCD_IO_Init>
    Is_ili9486_Initialized |= ILI9486_IO_INITIALIZED;
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <ili9486_Init+0xd4>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	f043 0302 	orr.w	r3, r3, #2
 8000692:	b2da      	uxtb	r2, r3
 8000694:	4b26      	ldr	r3, [pc, #152]	; (8000730 <ili9486_Init+0xd4>)
 8000696:	701a      	strb	r2, [r3, #0]
  }
  LCD_Delay(10);
 8000698:	200a      	movs	r0, #10
 800069a:	f000 fadd 	bl	8000c58 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_SWRESET);
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 fbda 	bl	8000e58 <LCD_IO_WriteCmd8>
  LCD_Delay(100);
 80006a4:	2064      	movs	r0, #100	; 0x64
 80006a6:	f000 fad7 	bl	8000c58 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_RGB_INTERFACE, (uint8_t *)"\x00", 1); // RGB mode off (0xB0)
 80006aa:	2201      	movs	r2, #1
 80006ac:	4921      	ldr	r1, [pc, #132]	; (8000734 <ili9486_Init+0xd8>)
 80006ae:	20b0      	movs	r0, #176	; 0xb0
 80006b0:	f001 f816 	bl	80016e0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 80006b4:	2011      	movs	r0, #17
 80006b6:	f000 fbcf 	bl	8000e58 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80006ba:	200a      	movs	r0, #10
 80006bc:	f000 facc 	bl	8000c58 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // interface format (0x3A)
 80006c0:	2201      	movs	r2, #1
 80006c2:	491d      	ldr	r1, [pc, #116]	; (8000738 <ili9486_Init+0xdc>)
 80006c4:	203a      	movs	r0, #58	; 0x3a
 80006c6:	f001 f80b 	bl	80016e0 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_DOWN);
 80006ca:	2036      	movs	r0, #54	; 0x36
 80006cc:	f000 fbc4 	bl	8000e58 <LCD_IO_WriteCmd8>
 80006d0:	2028      	movs	r0, #40	; 0x28
 80006d2:	f000 fc6b 	bl	8000fac <LCD_IO_WriteData8>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PWCTR3, (uint8_t *)"\x44", 1); // 0xC2
 80006d6:	2201      	movs	r2, #1
 80006d8:	4918      	ldr	r1, [pc, #96]	; (800073c <ili9486_Init+0xe0>)
 80006da:	20c2      	movs	r0, #194	; 0xc2
 80006dc:	f001 f800 	bl	80016e0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_VMCTR1, (uint8_t *)"\x00\x00\x00\x00", 4); // 0xC5
 80006e0:	2204      	movs	r2, #4
 80006e2:	4917      	ldr	r1, [pc, #92]	; (8000740 <ili9486_Init+0xe4>)
 80006e4:	20c5      	movs	r0, #197	; 0xc5
 80006e6:	f000 fffb 	bl	80016e0 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control (0xE0)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRP1, (uint8_t *)"\x0F\x1F\x1C\x0C\x0F\x08\x48\x98\x37\x0A\x13\x04\x11\x0D\x00", 15);
 80006ea:	220f      	movs	r2, #15
 80006ec:	4915      	ldr	r1, [pc, #84]	; (8000744 <ili9486_Init+0xe8>)
 80006ee:	20e0      	movs	r0, #224	; 0xe0
 80006f0:	f000 fff6 	bl	80016e0 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control (0xE1)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRN1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 80006f4:	220f      	movs	r2, #15
 80006f6:	4914      	ldr	r1, [pc, #80]	; (8000748 <ili9486_Init+0xec>)
 80006f8:	20e1      	movs	r0, #225	; 0xe1
 80006fa:	f000 fff1 	bl	80016e0 <LCD_IO_WriteCmd8MultipleData8>

  // Digital gamma control1 (0xE2)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_DGCTR1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 80006fe:	220f      	movs	r2, #15
 8000700:	4911      	ldr	r1, [pc, #68]	; (8000748 <ili9486_Init+0xec>)
 8000702:	20e2      	movs	r0, #226	; 0xe2
 8000704:	f000 ffec 	bl	80016e0 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_NORON);     // Normal display on (0x13)
 8000708:	2013      	movs	r0, #19
 800070a:	f000 fba5 	bl	8000e58 <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_INVOFF);    // Display inversion off (0x20)
 800070e:	2020      	movs	r0, #32
 8000710:	f000 fba2 	bl	8000e58 <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 8000714:	2011      	movs	r0, #17
 8000716:	f000 fb9f 	bl	8000e58 <LCD_IO_WriteCmd8>
  LCD_Delay(200);
 800071a:	20c8      	movs	r0, #200	; 0xc8
 800071c:	f000 fa9c 	bl	8000c58 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_DISPON);    // Display on (0x29)
 8000720:	2029      	movs	r0, #41	; 0x29
 8000722:	f000 fb99 	bl	8000e58 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000726:	200a      	movs	r0, #10
 8000728:	f000 fa96 	bl	8000c58 <LCD_Delay>
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	24000054 	.word	0x24000054
 8000734:	08007558 	.word	0x08007558
 8000738:	0800755c 	.word	0x0800755c
 800073c:	08007560 	.word	0x08007560
 8000740:	08007564 	.word	0x08007564
 8000744:	0800756c 	.word	0x0800756c
 8000748:	0800757c 	.word	0x0800757c

0800074c <ili9486_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9486_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	80fb      	strh	r3, [r7, #6]
 8000756:	460b      	mov	r3, r1
 8000758:	80bb      	strh	r3, [r7, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	807b      	strh	r3, [r7, #2]
  ILI9486_LCDMUTEX_PUSH();
  ILI9486_SETCURSOR(Xpos, Ypos);
 800075e:	202a      	movs	r0, #42	; 0x2a
 8000760:	f000 fb7a 	bl	8000e58 <LCD_IO_WriteCmd8>
 8000764:	88fb      	ldrh	r3, [r7, #6]
 8000766:	0a1b      	lsrs	r3, r3, #8
 8000768:	b29b      	uxth	r3, r3
 800076a:	b2db      	uxtb	r3, r3
 800076c:	4618      	mov	r0, r3
 800076e:	f000 fc1d 	bl	8000fac <LCD_IO_WriteData8>
 8000772:	88fb      	ldrh	r3, [r7, #6]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fc18 	bl	8000fac <LCD_IO_WriteData8>
 800077c:	88fb      	ldrh	r3, [r7, #6]
 800077e:	0a1b      	lsrs	r3, r3, #8
 8000780:	b29b      	uxth	r3, r3
 8000782:	b2db      	uxtb	r3, r3
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fc11 	bl	8000fac <LCD_IO_WriteData8>
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fc0c 	bl	8000fac <LCD_IO_WriteData8>
 8000794:	202b      	movs	r0, #43	; 0x2b
 8000796:	f000 fb5f 	bl	8000e58 <LCD_IO_WriteCmd8>
 800079a:	88bb      	ldrh	r3, [r7, #4]
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	b29b      	uxth	r3, r3
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fc02 	bl	8000fac <LCD_IO_WriteData8>
 80007a8:	88bb      	ldrh	r3, [r7, #4]
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 fbfd 	bl	8000fac <LCD_IO_WriteData8>
 80007b2:	88bb      	ldrh	r3, [r7, #4]
 80007b4:	0a1b      	lsrs	r3, r3, #8
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fbf6 	bl	8000fac <LCD_IO_WriteData8>
 80007c0:	88bb      	ldrh	r3, [r7, #4]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 fbf1 	bl	8000fac <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_RAMWR); LCD_IO_WriteData16(RGBCode);
 80007ca:	202c      	movs	r0, #44	; 0x2c
 80007cc:	f000 fb44 	bl	8000e58 <LCD_IO_WriteCmd8>
 80007d0:	887b      	ldrh	r3, [r7, #2]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fc8c 	bl	80010f0 <LCD_IO_WriteData16>
  ILI9486_LCDMUTEX_POP();
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <ili9486_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9486_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4604      	mov	r4, r0
 80007e8:	4608      	mov	r0, r1
 80007ea:	4611      	mov	r1, r2
 80007ec:	461a      	mov	r2, r3
 80007ee:	4623      	mov	r3, r4
 80007f0:	80fb      	strh	r3, [r7, #6]
 80007f2:	4603      	mov	r3, r0
 80007f4:	80bb      	strh	r3, [r7, #4]
 80007f6:	460b      	mov	r3, r1
 80007f8:	807b      	strh	r3, [r7, #2]
 80007fa:	4613      	mov	r3, r2
 80007fc:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 80007fe:	4a2a      	ldr	r2, [pc, #168]	; (80008a8 <ili9486_SetDisplayWindow+0xc8>)
 8000800:	88bb      	ldrh	r3, [r7, #4]
 8000802:	8013      	strh	r3, [r2, #0]
 8000804:	88ba      	ldrh	r2, [r7, #4]
 8000806:	883b      	ldrh	r3, [r7, #0]
 8000808:	4413      	add	r3, r2
 800080a:	b29b      	uxth	r3, r3
 800080c:	3b01      	subs	r3, #1
 800080e:	b29a      	uxth	r2, r3
 8000810:	4b26      	ldr	r3, [pc, #152]	; (80008ac <ili9486_SetDisplayWindow+0xcc>)
 8000812:	801a      	strh	r2, [r3, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8000814:	202a      	movs	r0, #42	; 0x2a
 8000816:	f000 fb1f 	bl	8000e58 <LCD_IO_WriteCmd8>
 800081a:	88fb      	ldrh	r3, [r7, #6]
 800081c:	0a1b      	lsrs	r3, r3, #8
 800081e:	b29b      	uxth	r3, r3
 8000820:	b2db      	uxtb	r3, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fbc2 	bl	8000fac <LCD_IO_WriteData8>
 8000828:	88fb      	ldrh	r3, [r7, #6]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fbbd 	bl	8000fac <LCD_IO_WriteData8>
 8000832:	88fa      	ldrh	r2, [r7, #6]
 8000834:	887b      	ldrh	r3, [r7, #2]
 8000836:	4413      	add	r3, r2
 8000838:	3b01      	subs	r3, #1
 800083a:	121b      	asrs	r3, r3, #8
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fbb4 	bl	8000fac <LCD_IO_WriteData8>
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	887b      	ldrh	r3, [r7, #2]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4413      	add	r3, r2
 800084e:	b2db      	uxtb	r3, r3
 8000850:	3b01      	subs	r3, #1
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fba9 	bl	8000fac <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 800085a:	202b      	movs	r0, #43	; 0x2b
 800085c:	f000 fafc 	bl	8000e58 <LCD_IO_WriteCmd8>
 8000860:	88bb      	ldrh	r3, [r7, #4]
 8000862:	0a1b      	lsrs	r3, r3, #8
 8000864:	b29b      	uxth	r3, r3
 8000866:	b2db      	uxtb	r3, r3
 8000868:	4618      	mov	r0, r3
 800086a:	f000 fb9f 	bl	8000fac <LCD_IO_WriteData8>
 800086e:	88bb      	ldrh	r3, [r7, #4]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f000 fb9a 	bl	8000fac <LCD_IO_WriteData8>
 8000878:	88ba      	ldrh	r2, [r7, #4]
 800087a:	883b      	ldrh	r3, [r7, #0]
 800087c:	4413      	add	r3, r2
 800087e:	3b01      	subs	r3, #1
 8000880:	121b      	asrs	r3, r3, #8
 8000882:	b2db      	uxtb	r3, r3
 8000884:	4618      	mov	r0, r3
 8000886:	f000 fb91 	bl	8000fac <LCD_IO_WriteData8>
 800088a:	88bb      	ldrh	r3, [r7, #4]
 800088c:	b2da      	uxtb	r2, r3
 800088e:	883b      	ldrh	r3, [r7, #0]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	4413      	add	r3, r2
 8000894:	b2db      	uxtb	r3, r3
 8000896:	3b01      	subs	r3, #1
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fb86 	bl	8000fac <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd90      	pop	{r4, r7, pc}
 80008a8:	24000056 	.word	0x24000056
 80008ac:	24000058 	.word	0x24000058

080008b0 <ili9486_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9486_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4604      	mov	r4, r0
 80008b8:	4608      	mov	r0, r1
 80008ba:	4611      	mov	r1, r2
 80008bc:	461a      	mov	r2, r3
 80008be:	4623      	mov	r3, r4
 80008c0:	80fb      	strh	r3, [r7, #6]
 80008c2:	4603      	mov	r3, r0
 80008c4:	80bb      	strh	r3, [r7, #4]
 80008c6:	460b      	mov	r3, r1
 80008c8:	807b      	strh	r3, [r7, #2]
 80008ca:	4613      	mov	r3, r2
 80008cc:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 80008ce:	202a      	movs	r0, #42	; 0x2a
 80008d0:	f000 fac2 	bl	8000e58 <LCD_IO_WriteCmd8>
 80008d4:	88bb      	ldrh	r3, [r7, #4]
 80008d6:	0a1b      	lsrs	r3, r3, #8
 80008d8:	b29b      	uxth	r3, r3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 fb65 	bl	8000fac <LCD_IO_WriteData8>
 80008e2:	88bb      	ldrh	r3, [r7, #4]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fb60 	bl	8000fac <LCD_IO_WriteData8>
 80008ec:	88bb      	ldrh	r3, [r7, #4]
 80008ee:	0a1b      	lsrs	r3, r3, #8
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fb59 	bl	8000fac <LCD_IO_WriteData8>
 80008fa:	88bb      	ldrh	r3, [r7, #4]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 fb54 	bl	8000fac <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 8000904:	202b      	movs	r0, #43	; 0x2b
 8000906:	f000 faa7 	bl	8000e58 <LCD_IO_WriteCmd8>
 800090a:	887b      	ldrh	r3, [r7, #2]
 800090c:	0a1b      	lsrs	r3, r3, #8
 800090e:	b29b      	uxth	r3, r3
 8000910:	b2db      	uxtb	r3, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f000 fb4a 	bl	8000fac <LCD_IO_WriteData8>
 8000918:	887b      	ldrh	r3, [r7, #2]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4618      	mov	r0, r3
 800091e:	f000 fb45 	bl	8000fac <LCD_IO_WriteData8>
 8000922:	887a      	ldrh	r2, [r7, #2]
 8000924:	883b      	ldrh	r3, [r7, #0]
 8000926:	4413      	add	r3, r2
 8000928:	3b01      	subs	r3, #1
 800092a:	121b      	asrs	r3, r3, #8
 800092c:	b2db      	uxtb	r3, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fb3c 	bl	8000fac <LCD_IO_WriteData8>
 8000934:	887b      	ldrh	r3, [r7, #2]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	883b      	ldrh	r3, [r7, #0]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4413      	add	r3, r2
 800093e:	b2db      	uxtb	r3, r3
 8000940:	3b01      	subs	r3, #1
 8000942:	b2db      	uxtb	r3, r3
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fb31 	bl	8000fac <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Length);
 800094a:	883a      	ldrh	r2, [r7, #0]
 800094c:	88fb      	ldrh	r3, [r7, #6]
 800094e:	4619      	mov	r1, r3
 8000950:	202c      	movs	r0, #44	; 0x2c
 8000952:	f000 fcf7 	bl	8001344 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	bd90      	pop	{r4, r7, pc}

0800095e <ili9486_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9486_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 800095e:	b590      	push	{r4, r7, lr}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	4604      	mov	r4, r0
 8000966:	4608      	mov	r0, r1
 8000968:	4611      	mov	r1, r2
 800096a:	461a      	mov	r2, r3
 800096c:	4623      	mov	r3, r4
 800096e:	80fb      	strh	r3, [r7, #6]
 8000970:	4603      	mov	r3, r0
 8000972:	80bb      	strh	r3, [r7, #4]
 8000974:	460b      	mov	r3, r1
 8000976:	807b      	strh	r3, [r7, #2]
 8000978:	4613      	mov	r3, r2
 800097a:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 800097c:	202a      	movs	r0, #42	; 0x2a
 800097e:	f000 fa6b 	bl	8000e58 <LCD_IO_WriteCmd8>
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	0a1b      	lsrs	r3, r3, #8
 8000986:	b29b      	uxth	r3, r3
 8000988:	b2db      	uxtb	r3, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fb0e 	bl	8000fac <LCD_IO_WriteData8>
 8000990:	88fb      	ldrh	r3, [r7, #6]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4618      	mov	r0, r3
 8000996:	f000 fb09 	bl	8000fac <LCD_IO_WriteData8>
 800099a:	88fa      	ldrh	r2, [r7, #6]
 800099c:	887b      	ldrh	r3, [r7, #2]
 800099e:	4413      	add	r3, r2
 80009a0:	3b01      	subs	r3, #1
 80009a2:	121b      	asrs	r3, r3, #8
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 fb00 	bl	8000fac <LCD_IO_WriteData8>
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	887b      	ldrh	r3, [r7, #2]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	4413      	add	r3, r2
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	3b01      	subs	r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 faf5 	bl	8000fac <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 80009c2:	202b      	movs	r0, #43	; 0x2b
 80009c4:	f000 fa48 	bl	8000e58 <LCD_IO_WriteCmd8>
 80009c8:	88bb      	ldrh	r3, [r7, #4]
 80009ca:	0a1b      	lsrs	r3, r3, #8
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 faeb 	bl	8000fac <LCD_IO_WriteData8>
 80009d6:	88bb      	ldrh	r3, [r7, #4]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 fae6 	bl	8000fac <LCD_IO_WriteData8>
 80009e0:	88ba      	ldrh	r2, [r7, #4]
 80009e2:	883b      	ldrh	r3, [r7, #0]
 80009e4:	4413      	add	r3, r2
 80009e6:	3b01      	subs	r3, #1
 80009e8:	121b      	asrs	r3, r3, #8
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 fadd 	bl	8000fac <LCD_IO_WriteData8>
 80009f2:	88bb      	ldrh	r3, [r7, #4]
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	883b      	ldrh	r3, [r7, #0]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	4413      	add	r3, r2
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	3b01      	subs	r3, #1
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 fad2 	bl	8000fac <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Xsize * Ysize);
 8000a08:	887b      	ldrh	r3, [r7, #2]
 8000a0a:	883a      	ldrh	r2, [r7, #0]
 8000a0c:	fb02 f303 	mul.w	r3, r2, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	8b3b      	ldrh	r3, [r7, #24]
 8000a14:	4619      	mov	r1, r3
 8000a16:	202c      	movs	r0, #44	; 0x2c
 8000a18:	f000 fc94 	bl	8001344 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd90      	pop	{r4, r7, pc}

08000a24 <ili9486_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9486_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	4608      	mov	r0, r1
 8000a2e:	4611      	mov	r1, r2
 8000a30:	461a      	mov	r2, r3
 8000a32:	4623      	mov	r3, r4
 8000a34:	80fb      	strh	r3, [r7, #6]
 8000a36:	4603      	mov	r3, r0
 8000a38:	80bb      	strh	r3, [r7, #4]
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	807b      	strh	r3, [r7, #2]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	803b      	strh	r3, [r7, #0]
  ili9486_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000a42:	883b      	ldrh	r3, [r7, #0]
 8000a44:	887a      	ldrh	r2, [r7, #2]
 8000a46:	88b9      	ldrh	r1, [r7, #4]
 8000a48:	88f8      	ldrh	r0, [r7, #6]
 8000a4a:	f7ff fec9 	bl	80007e0 <ili9486_SetDisplayWindow>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9486_RAMWR, pData, Xsize * Ysize);
 8000a4e:	887b      	ldrh	r3, [r7, #2]
 8000a50:	883a      	ldrh	r2, [r7, #0]
 8000a52:	fb02 f303 	mul.w	r3, r2, r3
 8000a56:	461a      	mov	r2, r3
 8000a58:	69b9      	ldr	r1, [r7, #24]
 8000a5a:	202c      	movs	r0, #44	; 0x2c
 8000a5c:	f000 ff7a 	bl	8001954 <LCD_IO_WriteCmd8MultipleData16>
  ILI9486_LCDMUTEX_POP();
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd90      	pop	{r4, r7, pc}

08000a68 <ili9486_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9486_WriteChar(uint16_t Xpo, uint16_t Ypo, char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8000a68:	b082      	sub	sp, #8
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b08a      	sub	sp, #40	; 0x28
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	603a      	str	r2, [r7, #0]
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
 8000a74:	4603      	mov	r3, r0
 8000a76:	80fb      	strh	r3, [r7, #6]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8000a84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000a86:	ee07 3a90 	vmov	s15, r3
 8000a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a8e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000a92:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a96:	eeb0 0a47 	vmov.f32	s0, s14
 8000a9a:	f006 fd0f 	bl	80074bc <ceilf>
 8000a9e:	eef0 7a40 	vmov.f32	s15, s0
 8000aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aa6:	ee17 3a90 	vmov	r3, s15
 8000aaa:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
 8000abe:	e060      	b.n	8000b82 <ili9486_WriteChar+0x11a>

		hop32 = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
 8000ac8:	e024      	b.n	8000b14 <ili9486_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8000aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	7812      	ldrb	r2, [r2, #0]
 8000ad0:	3a20      	subs	r2, #32
 8000ad2:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8000ad4:	fb01 f202 	mul.w	r2, r1, r2
 8000ad8:	6979      	ldr	r1, [r7, #20]
 8000ada:	fb02 f101 	mul.w	r1, r2, r1
 8000ade:	6a3a      	ldr	r2, [r7, #32]
 8000ae0:	6978      	ldr	r0, [r7, #20]
 8000ae2:	fb00 f202 	mul.w	r2, r0, r2
 8000ae6:	4411      	add	r1, r2
 8000ae8:	69fa      	ldr	r2, [r7, #28]
 8000aea:	440a      	add	r2, r1
 8000aec:	4413      	add	r3, r2
 8000aee:	7819      	ldrb	r1, [r3, #0]
 8000af0:	f107 020c 	add.w	r2, r7, #12
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	4413      	add	r3, r2
 8000af8:	460a      	mov	r2, r1
 8000afa:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	f107 010c 	add.w	r1, r7, #12
 8000b04:	69fa      	ldr	r2, [r7, #28]
 8000b06:	440a      	add	r2, r1
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3301      	adds	r3, #1
 8000b12:	61fb      	str	r3, [r7, #28]
 8000b14:	69fa      	ldr	r2, [r7, #28]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbd6      	blt.n	8000aca <ili9486_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
 8000b20:	e027      	b.n	8000b72 <ili9486_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8000b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	409a      	lsls	r2, r3
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00e      	beq.n	8000b4e <ili9486_WriteChar+0xe6>
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	88fb      	ldrh	r3, [r7, #6]
 8000b36:	4413      	add	r3, r2
 8000b38:	b298      	uxth	r0, r3
 8000b3a:	6a3b      	ldr	r3, [r7, #32]
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	88bb      	ldrh	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000b46:	4619      	mov	r1, r3
 8000b48:	f7ff fe00 	bl	800074c <ili9486_WritePixel>
 8000b4c:	e00e      	b.n	8000b6c <ili9486_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	4413      	add	r3, r2
 8000b56:	b298      	uxth	r0, r3
 8000b58:	6a3b      	ldr	r3, [r7, #32]
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	88bb      	ldrh	r3, [r7, #4]
 8000b5e:	4413      	add	r3, r2
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000b66:	4619      	mov	r1, r3
 8000b68:	f7ff fdf0 	bl	800074c <ili9486_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]
 8000b72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b74:	461a      	mov	r2, r3
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	dbd2      	blt.n	8000b22 <ili9486_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8000b7c:	6a3b      	ldr	r3, [r7, #32]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	623b      	str	r3, [r7, #32]
 8000b82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000b84:	461a      	mov	r2, r3
 8000b86:	6a3b      	ldr	r3, [r7, #32]
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	db99      	blt.n	8000ac0 <ili9486_WriteChar+0x58>
			}

		}
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b98:	b002      	add	sp, #8
 8000b9a:	4770      	bx	lr

08000b9c <ili9486_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9486_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b088      	sub	sp, #32
 8000ba2:	af04      	add	r7, sp, #16
 8000ba4:	603a      	str	r2, [r7, #0]
 8000ba6:	61fb      	str	r3, [r7, #28]
 8000ba8:	4603      	mov	r3, r0
 8000baa:	80fb      	strh	r3, [r7, #6]
 8000bac:	460b      	mov	r3, r1
 8000bae:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9486_GetLcdPixelHeight();
 8000bb0:	f7ff fd31 	bl	8000616 <ili9486_GetLcdPixelHeight>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9486_GetLcdPixelWidth();
 8000bb8:	f7ff fd24 	bl	8000604 <ili9486_GetLcdPixelWidth>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8000bc0:	e02c      	b.n	8000c1c <ili9486_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	8c3a      	ldrh	r2, [r7, #32]
 8000bc6:	441a      	add	r2, r3
 8000bc8:	89bb      	ldrh	r3, [r7, #12]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	db13      	blt.n	8000bf6 <ili9486_WriteString+0x5a>
			Xpo = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8000bd2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000bd4:	88bb      	ldrh	r3, [r7, #4]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8000bda:	88bb      	ldrh	r3, [r7, #4]
 8000bdc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000bde:	441a      	add	r2, r3
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	da1f      	bge.n	8000c26 <ili9486_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b20      	cmp	r3, #32
 8000bec:	d103      	bne.n	8000bf6 <ili9486_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	603b      	str	r3, [r7, #0]
				continue;
 8000bf4:	e012      	b.n	8000c1c <ili9486_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9486_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8000bf6:	88b9      	ldrh	r1, [r7, #4]
 8000bf8:	88f8      	ldrh	r0, [r7, #6]
 8000bfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bfc:	9302      	str	r3, [sp, #8]
 8000bfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c00:	9301      	str	r3, [sp, #4]
 8000c02:	6a3b      	ldr	r3, [r7, #32]
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	f7ff ff2d 	bl	8000a68 <ili9486_WriteChar>
		Xpo += fonto.Width;
 8000c0e:	8c3a      	ldrh	r2, [r7, #32]
 8000c10:	88fb      	ldrh	r3, [r7, #6]
 8000c12:	4413      	add	r3, r2
 8000c14:	80fb      	strh	r3, [r7, #6]
		strr++;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	603b      	str	r3, [r7, #0]
	while(*strr){
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1ce      	bne.n	8000bc2 <ili9486_WriteString+0x26>
	}
}
 8000c24:	e000      	b.n	8000c28 <ili9486_WriteString+0x8c>
				break;
 8000c26:	bf00      	nop
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c32:	b002      	add	sp, #8
 8000c34:	4770      	bx	lr

08000c36 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  while(c--);
 8000c3e:	bf00      	nop
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	1e5a      	subs	r2, r3, #1
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1fa      	bne.n	8000c40 <LCD_IO_Delay+0xa>
}
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <LCD_Delay>:
#pragma pop
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f002 f9eb 	bl	800303c <HAL_Delay>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	71fb      	strb	r3, [r7, #7]
    GPIOX_CLR(LCD_BL);
  else
    GPIOX_SET(LCD_BL);
  #endif
  #endif
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  #define GPIOX_CLOCK_LCD_RD    GPIOX_CLOCK(LCD_RD)
  #else
  #define GPIOX_CLOCK_LCD_RD    0
  #endif

  RCC->AHB4ENR |= (GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_WR) |
 8000c88:	4b6c      	ldr	r3, [pc, #432]	; (8000e3c <LCD_IO_Init+0x1b8>)
 8000c8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c8e:	4a6b      	ldr	r2, [pc, #428]	; (8000e3c <LCD_IO_Init+0x1b8>)
 8000c90:	f043 035f 	orr.w	r3, r3, #95	; 0x5f
 8000c94:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
                   GPIOX_CLOCK(LCD_D0) | GPIOX_CLOCK(LCD_D1) | GPIOX_CLOCK(LCD_D2) | GPIOX_CLOCK(LCD_D3) |
                   GPIOX_CLOCK(LCD_D4) | GPIOX_CLOCK(LCD_D5) | GPIOX_CLOCK(LCD_D6) | GPIOX_CLOCK(LCD_D7) |
                   GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_RD);

  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_RST_OFF;                          /* RST = 1 */
 8000c98:	4b69      	ldr	r3, [pc, #420]	; (8000e40 <LCD_IO_Init+0x1bc>)
 8000c9a:	2204      	movs	r2, #4
 8000c9c:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8000c9e:	4b68      	ldr	r3, [pc, #416]	; (8000e40 <LCD_IO_Init+0x1bc>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ca6:	4a66      	ldr	r2, [pc, #408]	; (8000e40 <LCD_IO_Init+0x1bc>)
 8000ca8:	f043 0310 	orr.w	r3, r3, #16
 8000cac:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_BL) = LCD_BLON;
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  GPIOX_SET(LCD_CS);                    /* CS = 1 */
 8000cae:	4b65      	ldr	r3, [pc, #404]	; (8000e44 <LCD_IO_Init+0x1c0>)
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	619a      	str	r2, [r3, #24]
  LCD_RS_DATA;                          /* RS = 1 */
 8000cb4:	4b62      	ldr	r3, [pc, #392]	; (8000e40 <LCD_IO_Init+0x1bc>)
 8000cb6:	2208      	movs	r2, #8
 8000cb8:	619a      	str	r2, [r3, #24]
  GPIOX_SET(LCD_WR);                    /* WR = 1 */
 8000cba:	4b61      	ldr	r3, [pc, #388]	; (8000e40 <LCD_IO_Init+0x1bc>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	619a      	str	r2, [r3, #24]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_SET(LCD_RD);                    /* RD = 1 */
 8000cc0:	4b61      	ldr	r3, [pc, #388]	; (8000e48 <LCD_IO_Init+0x1c4>)
 8000cc2:	2208      	movs	r2, #8
 8000cc4:	619a      	str	r2, [r3, #24]
  #endif

  GPIOX_MODER(MODE_OUT, LCD_CS);
 8000cc6:	4b5f      	ldr	r3, [pc, #380]	; (8000e44 <LCD_IO_Init+0x1c0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f023 030c 	bic.w	r3, r3, #12
 8000cce:	4a5d      	ldr	r2, [pc, #372]	; (8000e44 <LCD_IO_Init+0x1c0>)
 8000cd0:	f043 0304 	orr.w	r3, r3, #4
 8000cd4:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8000cd6:	4b5a      	ldr	r3, [pc, #360]	; (8000e40 <LCD_IO_Init+0x1bc>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000cde:	4a58      	ldr	r2, [pc, #352]	; (8000e40 <LCD_IO_Init+0x1bc>)
 8000ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce4:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_WR);
 8000ce6:	4b56      	ldr	r3, [pc, #344]	; (8000e40 <LCD_IO_Init+0x1bc>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f023 0303 	bic.w	r3, r3, #3
 8000cee:	4a54      	ldr	r2, [pc, #336]	; (8000e40 <LCD_IO_Init+0x1bc>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RD);
 8000cf6:	4b54      	ldr	r3, [pc, #336]	; (8000e48 <LCD_IO_Init+0x1c4>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000cfe:	4a52      	ldr	r2, [pc, #328]	; (8000e48 <LCD_IO_Init+0x1c4>)
 8000d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d04:	6013      	str	r3, [r2, #0]
  #endif

  LCD_DIRWRITE;                         /* data pins set the output direction */
 8000d06:	4b51      	ldr	r3, [pc, #324]	; (8000e4c <LCD_IO_Init+0x1c8>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000d0e:	4a4f      	ldr	r2, [pc, #316]	; (8000e4c <LCD_IO_Init+0x1c8>)
 8000d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d14:	6013      	str	r3, [r2, #0]
 8000d16:	4b4e      	ldr	r3, [pc, #312]	; (8000e50 <LCD_IO_Init+0x1cc>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000d1e:	4a4c      	ldr	r2, [pc, #304]	; (8000e50 <LCD_IO_Init+0x1cc>)
 8000d20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d24:	6013      	str	r3, [r2, #0]
 8000d26:	4b49      	ldr	r3, [pc, #292]	; (8000e4c <LCD_IO_Init+0x1c8>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000d2e:	4a47      	ldr	r2, [pc, #284]	; (8000e4c <LCD_IO_Init+0x1c8>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	4b47      	ldr	r3, [pc, #284]	; (8000e54 <LCD_IO_Init+0x1d0>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000d3e:	4a45      	ldr	r2, [pc, #276]	; (8000e54 <LCD_IO_Init+0x1d0>)
 8000d40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	4b43      	ldr	r3, [pc, #268]	; (8000e54 <LCD_IO_Init+0x1d0>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000d4e:	4a41      	ldr	r2, [pc, #260]	; (8000e54 <LCD_IO_Init+0x1d0>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	4b3f      	ldr	r3, [pc, #252]	; (8000e54 <LCD_IO_Init+0x1d0>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000d5e:	4a3d      	ldr	r2, [pc, #244]	; (8000e54 <LCD_IO_Init+0x1d0>)
 8000d60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	4b38      	ldr	r3, [pc, #224]	; (8000e48 <LCD_IO_Init+0x1c4>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000d6e:	4a36      	ldr	r2, [pc, #216]	; (8000e48 <LCD_IO_Init+0x1c4>)
 8000d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	4b35      	ldr	r3, [pc, #212]	; (8000e4c <LCD_IO_Init+0x1c8>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000d7e:	4a33      	ldr	r2, [pc, #204]	; (8000e4c <LCD_IO_Init+0x1c8>)
 8000d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d84:	6013      	str	r3, [r2, #0]

  /* GPIO speed */
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8000d86:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <LCD_IO_Init+0x1c0>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	4a2e      	ldr	r2, [pc, #184]	; (8000e44 <LCD_IO_Init+0x1c0>)
 8000d8c:	f043 030c 	orr.w	r3, r3, #12
 8000d90:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8000d92:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <LCD_IO_Init+0x1bc>)
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	4a2a      	ldr	r2, [pc, #168]	; (8000e40 <LCD_IO_Init+0x1bc>)
 8000d98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d9c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_WR);
 8000d9e:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <LCD_IO_Init+0x1bc>)
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	4a27      	ldr	r2, [pc, #156]	; (8000e40 <LCD_IO_Init+0x1bc>)
 8000da4:	f043 0303 	orr.w	r3, r3, #3
 8000da8:	6093      	str	r3, [r2, #8]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RD);
 8000daa:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <LCD_IO_Init+0x1c4>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	4a26      	ldr	r2, [pc, #152]	; (8000e48 <LCD_IO_Init+0x1c4>)
 8000db0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000db4:	6093      	str	r3, [r2, #8]
  #endif
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D0);
 8000db6:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <LCD_IO_Init+0x1c8>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <LCD_IO_Init+0x1c8>)
 8000dbc:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8000dc0:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D1);
 8000dc2:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <LCD_IO_Init+0x1cc>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	4a22      	ldr	r2, [pc, #136]	; (8000e50 <LCD_IO_Init+0x1cc>)
 8000dc8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000dcc:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D2);
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <LCD_IO_Init+0x1c8>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	4a1e      	ldr	r2, [pc, #120]	; (8000e4c <LCD_IO_Init+0x1c8>)
 8000dd4:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000dd8:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D3);
 8000dda:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <LCD_IO_Init+0x1d0>)
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <LCD_IO_Init+0x1d0>)
 8000de0:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8000de4:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D4);
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <LCD_IO_Init+0x1d0>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	4a1a      	ldr	r2, [pc, #104]	; (8000e54 <LCD_IO_Init+0x1d0>)
 8000dec:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000df0:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D5);
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <LCD_IO_Init+0x1d0>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <LCD_IO_Init+0x1d0>)
 8000df8:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8000dfc:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D6);
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <LCD_IO_Init+0x1c4>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	4a11      	ldr	r2, [pc, #68]	; (8000e48 <LCD_IO_Init+0x1c4>)
 8000e04:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000e08:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D7);
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <LCD_IO_Init+0x1c8>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	4a0f      	ldr	r2, [pc, #60]	; (8000e4c <LCD_IO_Init+0x1c8>)
 8000e10:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000e14:	6093      	str	r3, [r2, #8]

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f7ff ff1e 	bl	8000c58 <LCD_Delay>
  LCD_RST_ON;                           /* RST = 0 */
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <LCD_IO_Init+0x1bc>)
 8000e1e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e22:	619a      	str	r2, [r3, #24]
  LCD_Delay(1);
 8000e24:	2001      	movs	r0, #1
 8000e26:	f7ff ff17 	bl	8000c58 <LCD_Delay>
  LCD_RST_OFF;                          /* RST = 1 */
 8000e2a:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <LCD_IO_Init+0x1bc>)
 8000e2c:	2204      	movs	r2, #4
 8000e2e:	619a      	str	r2, [r3, #24]
  #endif
  LCD_Delay(1);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f7ff ff11 	bl	8000c58 <LCD_Delay>
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	58024400 	.word	0x58024400
 8000e40:	58020800 	.word	0x58020800
 8000e44:	58020400 	.word	0x58020400
 8000e48:	58020000 	.word	0x58020000
 8000e4c:	58021800 	.word	0x58021800
 8000e50:	58020c00 	.word	0x58020c00
 8000e54:	58021000 	.word	0x58021000

08000e58 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8000e62:	4b4b      	ldr	r3, [pc, #300]	; (8000f90 <LCD_IO_WriteCmd8+0x138>)
 8000e64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e68:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8000e6a:	4b4a      	ldr	r3, [pc, #296]	; (8000f94 <LCD_IO_WriteCmd8+0x13c>)
 8000e6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e70:	619a      	str	r2, [r3, #24]
 8000e72:	4a49      	ldr	r2, [pc, #292]	; (8000f98 <LCD_IO_WriteCmd8+0x140>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	7013      	strb	r3, [r2, #0]
 8000e78:	4b47      	ldr	r3, [pc, #284]	; (8000f98 <LCD_IO_WriteCmd8+0x140>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d004      	beq.n	8000e8e <LCD_IO_WriteCmd8+0x36>
 8000e84:	4b45      	ldr	r3, [pc, #276]	; (8000f9c <LCD_IO_WriteCmd8+0x144>)
 8000e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8a:	619a      	str	r2, [r3, #24]
 8000e8c:	e003      	b.n	8000e96 <LCD_IO_WriteCmd8+0x3e>
 8000e8e:	4b43      	ldr	r3, [pc, #268]	; (8000f9c <LCD_IO_WriteCmd8+0x144>)
 8000e90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e94:	619a      	str	r2, [r3, #24]
 8000e96:	4b40      	ldr	r3, [pc, #256]	; (8000f98 <LCD_IO_WriteCmd8+0x140>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d004      	beq.n	8000eac <LCD_IO_WriteCmd8+0x54>
 8000ea2:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <LCD_IO_WriteCmd8+0x148>)
 8000ea4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ea8:	619a      	str	r2, [r3, #24]
 8000eaa:	e003      	b.n	8000eb4 <LCD_IO_WriteCmd8+0x5c>
 8000eac:	4b3c      	ldr	r3, [pc, #240]	; (8000fa0 <LCD_IO_WriteCmd8+0x148>)
 8000eae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000eb2:	619a      	str	r2, [r3, #24]
 8000eb4:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <LCD_IO_WriteCmd8+0x140>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d004      	beq.n	8000eca <LCD_IO_WriteCmd8+0x72>
 8000ec0:	4b36      	ldr	r3, [pc, #216]	; (8000f9c <LCD_IO_WriteCmd8+0x144>)
 8000ec2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ec6:	619a      	str	r2, [r3, #24]
 8000ec8:	e003      	b.n	8000ed2 <LCD_IO_WriteCmd8+0x7a>
 8000eca:	4b34      	ldr	r3, [pc, #208]	; (8000f9c <LCD_IO_WriteCmd8+0x144>)
 8000ecc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed0:	619a      	str	r2, [r3, #24]
 8000ed2:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <LCD_IO_WriteCmd8+0x140>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	f003 0308 	and.w	r3, r3, #8
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d004      	beq.n	8000ee8 <LCD_IO_WriteCmd8+0x90>
 8000ede:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <LCD_IO_WriteCmd8+0x14c>)
 8000ee0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee4:	619a      	str	r2, [r3, #24]
 8000ee6:	e003      	b.n	8000ef0 <LCD_IO_WriteCmd8+0x98>
 8000ee8:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <LCD_IO_WriteCmd8+0x14c>)
 8000eea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000eee:	619a      	str	r2, [r3, #24]
 8000ef0:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <LCD_IO_WriteCmd8+0x140>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	f003 0310 	and.w	r3, r3, #16
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d004      	beq.n	8000f06 <LCD_IO_WriteCmd8+0xae>
 8000efc:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <LCD_IO_WriteCmd8+0x14c>)
 8000efe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f02:	619a      	str	r2, [r3, #24]
 8000f04:	e003      	b.n	8000f0e <LCD_IO_WriteCmd8+0xb6>
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <LCD_IO_WriteCmd8+0x14c>)
 8000f08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f0c:	619a      	str	r2, [r3, #24]
 8000f0e:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <LCD_IO_WriteCmd8+0x140>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	f003 0320 	and.w	r3, r3, #32
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d004      	beq.n	8000f24 <LCD_IO_WriteCmd8+0xcc>
 8000f1a:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <LCD_IO_WriteCmd8+0x14c>)
 8000f1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f20:	619a      	str	r2, [r3, #24]
 8000f22:	e003      	b.n	8000f2c <LCD_IO_WriteCmd8+0xd4>
 8000f24:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <LCD_IO_WriteCmd8+0x14c>)
 8000f26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f2a:	619a      	str	r2, [r3, #24]
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <LCD_IO_WriteCmd8+0x140>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d004      	beq.n	8000f42 <LCD_IO_WriteCmd8+0xea>
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <LCD_IO_WriteCmd8+0x150>)
 8000f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f3e:	619a      	str	r2, [r3, #24]
 8000f40:	e003      	b.n	8000f4a <LCD_IO_WriteCmd8+0xf2>
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <LCD_IO_WriteCmd8+0x150>)
 8000f44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f48:	619a      	str	r2, [r3, #24]
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <LCD_IO_WriteCmd8+0x140>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	da04      	bge.n	8000f5e <LCD_IO_WriteCmd8+0x106>
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <LCD_IO_WriteCmd8+0x144>)
 8000f56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f5a:	619a      	str	r2, [r3, #24]
 8000f5c:	e003      	b.n	8000f66 <LCD_IO_WriteCmd8+0x10e>
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <LCD_IO_WriteCmd8+0x144>)
 8000f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f64:	619a      	str	r2, [r3, #24]
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <LCD_IO_WriteCmd8+0x13c>)
 8000f68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f6c:	619a      	str	r2, [r3, #24]
 8000f6e:	2008      	movs	r0, #8
 8000f70:	f7ff fe61 	bl	8000c36 <LCD_IO_Delay>
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <LCD_IO_WriteCmd8+0x13c>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	619a      	str	r2, [r3, #24]
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <LCD_IO_WriteCmd8+0x13c>)
 8000f7c:	2208      	movs	r2, #8
 8000f7e:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <LCD_IO_WriteCmd8+0x138>)
 8000f82:	2202      	movs	r2, #2
 8000f84:	619a      	str	r2, [r3, #24]
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	58020400 	.word	0x58020400
 8000f94:	58020800 	.word	0x58020800
 8000f98:	2400005a 	.word	0x2400005a
 8000f9c:	58021800 	.word	0x58021800
 8000fa0:	58020c00 	.word	0x58020c00
 8000fa4:	58021000 	.word	0x58021000
 8000fa8:	58020000 	.word	0x58020000

08000fac <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8000fb6:	4b47      	ldr	r3, [pc, #284]	; (80010d4 <LCD_IO_WriteData8+0x128>)
 8000fb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fbc:	619a      	str	r2, [r3, #24]
  LCD_DATA8_WRITE(Data);
 8000fbe:	4a46      	ldr	r2, [pc, #280]	; (80010d8 <LCD_IO_WriteData8+0x12c>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	7013      	strb	r3, [r2, #0]
 8000fc4:	4b44      	ldr	r3, [pc, #272]	; (80010d8 <LCD_IO_WriteData8+0x12c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d004      	beq.n	8000fda <LCD_IO_WriteData8+0x2e>
 8000fd0:	4b42      	ldr	r3, [pc, #264]	; (80010dc <LCD_IO_WriteData8+0x130>)
 8000fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd6:	619a      	str	r2, [r3, #24]
 8000fd8:	e003      	b.n	8000fe2 <LCD_IO_WriteData8+0x36>
 8000fda:	4b40      	ldr	r3, [pc, #256]	; (80010dc <LCD_IO_WriteData8+0x130>)
 8000fdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fe0:	619a      	str	r2, [r3, #24]
 8000fe2:	4b3d      	ldr	r3, [pc, #244]	; (80010d8 <LCD_IO_WriteData8+0x12c>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d004      	beq.n	8000ff8 <LCD_IO_WriteData8+0x4c>
 8000fee:	4b3c      	ldr	r3, [pc, #240]	; (80010e0 <LCD_IO_WriteData8+0x134>)
 8000ff0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ff4:	619a      	str	r2, [r3, #24]
 8000ff6:	e003      	b.n	8001000 <LCD_IO_WriteData8+0x54>
 8000ff8:	4b39      	ldr	r3, [pc, #228]	; (80010e0 <LCD_IO_WriteData8+0x134>)
 8000ffa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000ffe:	619a      	str	r2, [r3, #24]
 8001000:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <LCD_IO_WriteData8+0x12c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	2b00      	cmp	r3, #0
 800100a:	d004      	beq.n	8001016 <LCD_IO_WriteData8+0x6a>
 800100c:	4b33      	ldr	r3, [pc, #204]	; (80010dc <LCD_IO_WriteData8+0x130>)
 800100e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001012:	619a      	str	r2, [r3, #24]
 8001014:	e003      	b.n	800101e <LCD_IO_WriteData8+0x72>
 8001016:	4b31      	ldr	r3, [pc, #196]	; (80010dc <LCD_IO_WriteData8+0x130>)
 8001018:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800101c:	619a      	str	r2, [r3, #24]
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <LCD_IO_WriteData8+0x12c>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	f003 0308 	and.w	r3, r3, #8
 8001026:	2b00      	cmp	r3, #0
 8001028:	d004      	beq.n	8001034 <LCD_IO_WriteData8+0x88>
 800102a:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <LCD_IO_WriteData8+0x138>)
 800102c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001030:	619a      	str	r2, [r3, #24]
 8001032:	e003      	b.n	800103c <LCD_IO_WriteData8+0x90>
 8001034:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <LCD_IO_WriteData8+0x138>)
 8001036:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800103a:	619a      	str	r2, [r3, #24]
 800103c:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <LCD_IO_WriteData8+0x12c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	f003 0310 	and.w	r3, r3, #16
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <LCD_IO_WriteData8+0xa6>
 8001048:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <LCD_IO_WriteData8+0x138>)
 800104a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800104e:	619a      	str	r2, [r3, #24]
 8001050:	e003      	b.n	800105a <LCD_IO_WriteData8+0xae>
 8001052:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <LCD_IO_WriteData8+0x138>)
 8001054:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001058:	619a      	str	r2, [r3, #24]
 800105a:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <LCD_IO_WriteData8+0x12c>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	f003 0320 	and.w	r3, r3, #32
 8001062:	2b00      	cmp	r3, #0
 8001064:	d004      	beq.n	8001070 <LCD_IO_WriteData8+0xc4>
 8001066:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <LCD_IO_WriteData8+0x138>)
 8001068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800106c:	619a      	str	r2, [r3, #24]
 800106e:	e003      	b.n	8001078 <LCD_IO_WriteData8+0xcc>
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <LCD_IO_WriteData8+0x138>)
 8001072:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001076:	619a      	str	r2, [r3, #24]
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <LCD_IO_WriteData8+0x12c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001080:	2b00      	cmp	r3, #0
 8001082:	d004      	beq.n	800108e <LCD_IO_WriteData8+0xe2>
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <LCD_IO_WriteData8+0x13c>)
 8001086:	f44f 7280 	mov.w	r2, #256	; 0x100
 800108a:	619a      	str	r2, [r3, #24]
 800108c:	e003      	b.n	8001096 <LCD_IO_WriteData8+0xea>
 800108e:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <LCD_IO_WriteData8+0x13c>)
 8001090:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001094:	619a      	str	r2, [r3, #24]
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <LCD_IO_WriteData8+0x12c>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b25b      	sxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	da04      	bge.n	80010aa <LCD_IO_WriteData8+0xfe>
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <LCD_IO_WriteData8+0x130>)
 80010a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a6:	619a      	str	r2, [r3, #24]
 80010a8:	e003      	b.n	80010b2 <LCD_IO_WriteData8+0x106>
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <LCD_IO_WriteData8+0x130>)
 80010ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010b0:	619a      	str	r2, [r3, #24]
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <LCD_IO_WriteData8+0x140>)
 80010b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010b8:	619a      	str	r2, [r3, #24]
 80010ba:	2008      	movs	r0, #8
 80010bc:	f7ff fdbb 	bl	8000c36 <LCD_IO_Delay>
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <LCD_IO_WriteData8+0x140>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 80010c6:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <LCD_IO_WriteData8+0x128>)
 80010c8:	2202      	movs	r2, #2
 80010ca:	619a      	str	r2, [r3, #24]
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	58020400 	.word	0x58020400
 80010d8:	2400005a 	.word	0x2400005a
 80010dc:	58021800 	.word	0x58021800
 80010e0:	58020c00 	.word	0x58020c00
 80010e4:	58021000 	.word	0x58021000
 80010e8:	58020000 	.word	0x58020000
 80010ec:	58020800 	.word	0x58020800

080010f0 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]
  LCD_CS_ON;
 80010fa:	4b8b      	ldr	r3, [pc, #556]	; (8001328 <LCD_IO_WriteData16+0x238>)
 80010fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001100:	619a      	str	r2, [r3, #24]
  LCD_DATA16_WRITE(Data);
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	b29b      	uxth	r3, r3
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b88      	ldr	r3, [pc, #544]	; (800132c <LCD_IO_WriteData16+0x23c>)
 800110c:	701a      	strb	r2, [r3, #0]
 800110e:	4b87      	ldr	r3, [pc, #540]	; (800132c <LCD_IO_WriteData16+0x23c>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d004      	beq.n	8001124 <LCD_IO_WriteData16+0x34>
 800111a:	4b85      	ldr	r3, [pc, #532]	; (8001330 <LCD_IO_WriteData16+0x240>)
 800111c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001120:	619a      	str	r2, [r3, #24]
 8001122:	e003      	b.n	800112c <LCD_IO_WriteData16+0x3c>
 8001124:	4b82      	ldr	r3, [pc, #520]	; (8001330 <LCD_IO_WriteData16+0x240>)
 8001126:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800112a:	619a      	str	r2, [r3, #24]
 800112c:	4b7f      	ldr	r3, [pc, #508]	; (800132c <LCD_IO_WriteData16+0x23c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d004      	beq.n	8001142 <LCD_IO_WriteData16+0x52>
 8001138:	4b7e      	ldr	r3, [pc, #504]	; (8001334 <LCD_IO_WriteData16+0x244>)
 800113a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800113e:	619a      	str	r2, [r3, #24]
 8001140:	e003      	b.n	800114a <LCD_IO_WriteData16+0x5a>
 8001142:	4b7c      	ldr	r3, [pc, #496]	; (8001334 <LCD_IO_WriteData16+0x244>)
 8001144:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001148:	619a      	str	r2, [r3, #24]
 800114a:	4b78      	ldr	r3, [pc, #480]	; (800132c <LCD_IO_WriteData16+0x23c>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	2b00      	cmp	r3, #0
 8001154:	d004      	beq.n	8001160 <LCD_IO_WriteData16+0x70>
 8001156:	4b76      	ldr	r3, [pc, #472]	; (8001330 <LCD_IO_WriteData16+0x240>)
 8001158:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800115c:	619a      	str	r2, [r3, #24]
 800115e:	e003      	b.n	8001168 <LCD_IO_WriteData16+0x78>
 8001160:	4b73      	ldr	r3, [pc, #460]	; (8001330 <LCD_IO_WriteData16+0x240>)
 8001162:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001166:	619a      	str	r2, [r3, #24]
 8001168:	4b70      	ldr	r3, [pc, #448]	; (800132c <LCD_IO_WriteData16+0x23c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	2b00      	cmp	r3, #0
 8001172:	d004      	beq.n	800117e <LCD_IO_WriteData16+0x8e>
 8001174:	4b70      	ldr	r3, [pc, #448]	; (8001338 <LCD_IO_WriteData16+0x248>)
 8001176:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800117a:	619a      	str	r2, [r3, #24]
 800117c:	e003      	b.n	8001186 <LCD_IO_WriteData16+0x96>
 800117e:	4b6e      	ldr	r3, [pc, #440]	; (8001338 <LCD_IO_WriteData16+0x248>)
 8001180:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001184:	619a      	str	r2, [r3, #24]
 8001186:	4b69      	ldr	r3, [pc, #420]	; (800132c <LCD_IO_WriteData16+0x23c>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	f003 0310 	and.w	r3, r3, #16
 800118e:	2b00      	cmp	r3, #0
 8001190:	d004      	beq.n	800119c <LCD_IO_WriteData16+0xac>
 8001192:	4b69      	ldr	r3, [pc, #420]	; (8001338 <LCD_IO_WriteData16+0x248>)
 8001194:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001198:	619a      	str	r2, [r3, #24]
 800119a:	e003      	b.n	80011a4 <LCD_IO_WriteData16+0xb4>
 800119c:	4b66      	ldr	r3, [pc, #408]	; (8001338 <LCD_IO_WriteData16+0x248>)
 800119e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011a2:	619a      	str	r2, [r3, #24]
 80011a4:	4b61      	ldr	r3, [pc, #388]	; (800132c <LCD_IO_WriteData16+0x23c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	f003 0320 	and.w	r3, r3, #32
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d004      	beq.n	80011ba <LCD_IO_WriteData16+0xca>
 80011b0:	4b61      	ldr	r3, [pc, #388]	; (8001338 <LCD_IO_WriteData16+0x248>)
 80011b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011b6:	619a      	str	r2, [r3, #24]
 80011b8:	e003      	b.n	80011c2 <LCD_IO_WriteData16+0xd2>
 80011ba:	4b5f      	ldr	r3, [pc, #380]	; (8001338 <LCD_IO_WriteData16+0x248>)
 80011bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011c0:	619a      	str	r2, [r3, #24]
 80011c2:	4b5a      	ldr	r3, [pc, #360]	; (800132c <LCD_IO_WriteData16+0x23c>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d004      	beq.n	80011d8 <LCD_IO_WriteData16+0xe8>
 80011ce:	4b5b      	ldr	r3, [pc, #364]	; (800133c <LCD_IO_WriteData16+0x24c>)
 80011d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d4:	619a      	str	r2, [r3, #24]
 80011d6:	e003      	b.n	80011e0 <LCD_IO_WriteData16+0xf0>
 80011d8:	4b58      	ldr	r3, [pc, #352]	; (800133c <LCD_IO_WriteData16+0x24c>)
 80011da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011de:	619a      	str	r2, [r3, #24]
 80011e0:	4b52      	ldr	r3, [pc, #328]	; (800132c <LCD_IO_WriteData16+0x23c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	da04      	bge.n	80011f4 <LCD_IO_WriteData16+0x104>
 80011ea:	4b51      	ldr	r3, [pc, #324]	; (8001330 <LCD_IO_WriteData16+0x240>)
 80011ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011f0:	619a      	str	r2, [r3, #24]
 80011f2:	e003      	b.n	80011fc <LCD_IO_WriteData16+0x10c>
 80011f4:	4b4e      	ldr	r3, [pc, #312]	; (8001330 <LCD_IO_WriteData16+0x240>)
 80011f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011fa:	619a      	str	r2, [r3, #24]
 80011fc:	4b50      	ldr	r3, [pc, #320]	; (8001340 <LCD_IO_WriteData16+0x250>)
 80011fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001202:	619a      	str	r2, [r3, #24]
 8001204:	2008      	movs	r0, #8
 8001206:	f7ff fd16 	bl	8000c36 <LCD_IO_Delay>
 800120a:	4b4d      	ldr	r3, [pc, #308]	; (8001340 <LCD_IO_WriteData16+0x250>)
 800120c:	2201      	movs	r2, #1
 800120e:	619a      	str	r2, [r3, #24]
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	4b45      	ldr	r3, [pc, #276]	; (800132c <LCD_IO_WriteData16+0x23c>)
 8001216:	701a      	strb	r2, [r3, #0]
 8001218:	4b44      	ldr	r3, [pc, #272]	; (800132c <LCD_IO_WriteData16+0x23c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d004      	beq.n	800122e <LCD_IO_WriteData16+0x13e>
 8001224:	4b42      	ldr	r3, [pc, #264]	; (8001330 <LCD_IO_WriteData16+0x240>)
 8001226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800122a:	619a      	str	r2, [r3, #24]
 800122c:	e003      	b.n	8001236 <LCD_IO_WriteData16+0x146>
 800122e:	4b40      	ldr	r3, [pc, #256]	; (8001330 <LCD_IO_WriteData16+0x240>)
 8001230:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001234:	619a      	str	r2, [r3, #24]
 8001236:	4b3d      	ldr	r3, [pc, #244]	; (800132c <LCD_IO_WriteData16+0x23c>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d004      	beq.n	800124c <LCD_IO_WriteData16+0x15c>
 8001242:	4b3c      	ldr	r3, [pc, #240]	; (8001334 <LCD_IO_WriteData16+0x244>)
 8001244:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001248:	619a      	str	r2, [r3, #24]
 800124a:	e003      	b.n	8001254 <LCD_IO_WriteData16+0x164>
 800124c:	4b39      	ldr	r3, [pc, #228]	; (8001334 <LCD_IO_WriteData16+0x244>)
 800124e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001252:	619a      	str	r2, [r3, #24]
 8001254:	4b35      	ldr	r3, [pc, #212]	; (800132c <LCD_IO_WriteData16+0x23c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <LCD_IO_WriteData16+0x17a>
 8001260:	4b33      	ldr	r3, [pc, #204]	; (8001330 <LCD_IO_WriteData16+0x240>)
 8001262:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001266:	619a      	str	r2, [r3, #24]
 8001268:	e003      	b.n	8001272 <LCD_IO_WriteData16+0x182>
 800126a:	4b31      	ldr	r3, [pc, #196]	; (8001330 <LCD_IO_WriteData16+0x240>)
 800126c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001270:	619a      	str	r2, [r3, #24]
 8001272:	4b2e      	ldr	r3, [pc, #184]	; (800132c <LCD_IO_WriteData16+0x23c>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d004      	beq.n	8001288 <LCD_IO_WriteData16+0x198>
 800127e:	4b2e      	ldr	r3, [pc, #184]	; (8001338 <LCD_IO_WriteData16+0x248>)
 8001280:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001284:	619a      	str	r2, [r3, #24]
 8001286:	e003      	b.n	8001290 <LCD_IO_WriteData16+0x1a0>
 8001288:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <LCD_IO_WriteData16+0x248>)
 800128a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800128e:	619a      	str	r2, [r3, #24]
 8001290:	4b26      	ldr	r3, [pc, #152]	; (800132c <LCD_IO_WriteData16+0x23c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	f003 0310 	and.w	r3, r3, #16
 8001298:	2b00      	cmp	r3, #0
 800129a:	d004      	beq.n	80012a6 <LCD_IO_WriteData16+0x1b6>
 800129c:	4b26      	ldr	r3, [pc, #152]	; (8001338 <LCD_IO_WriteData16+0x248>)
 800129e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012a2:	619a      	str	r2, [r3, #24]
 80012a4:	e003      	b.n	80012ae <LCD_IO_WriteData16+0x1be>
 80012a6:	4b24      	ldr	r3, [pc, #144]	; (8001338 <LCD_IO_WriteData16+0x248>)
 80012a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ac:	619a      	str	r2, [r3, #24]
 80012ae:	4b1f      	ldr	r3, [pc, #124]	; (800132c <LCD_IO_WriteData16+0x23c>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	f003 0320 	and.w	r3, r3, #32
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d004      	beq.n	80012c4 <LCD_IO_WriteData16+0x1d4>
 80012ba:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <LCD_IO_WriteData16+0x248>)
 80012bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012c0:	619a      	str	r2, [r3, #24]
 80012c2:	e003      	b.n	80012cc <LCD_IO_WriteData16+0x1dc>
 80012c4:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <LCD_IO_WriteData16+0x248>)
 80012c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ca:	619a      	str	r2, [r3, #24]
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <LCD_IO_WriteData16+0x23c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <LCD_IO_WriteData16+0x1f2>
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <LCD_IO_WriteData16+0x24c>)
 80012da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012de:	619a      	str	r2, [r3, #24]
 80012e0:	e003      	b.n	80012ea <LCD_IO_WriteData16+0x1fa>
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <LCD_IO_WriteData16+0x24c>)
 80012e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012e8:	619a      	str	r2, [r3, #24]
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <LCD_IO_WriteData16+0x23c>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	da04      	bge.n	80012fe <LCD_IO_WriteData16+0x20e>
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <LCD_IO_WriteData16+0x240>)
 80012f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012fa:	619a      	str	r2, [r3, #24]
 80012fc:	e003      	b.n	8001306 <LCD_IO_WriteData16+0x216>
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <LCD_IO_WriteData16+0x240>)
 8001300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001304:	619a      	str	r2, [r3, #24]
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <LCD_IO_WriteData16+0x250>)
 8001308:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800130c:	619a      	str	r2, [r3, #24]
 800130e:	2008      	movs	r0, #8
 8001310:	f7ff fc91 	bl	8000c36 <LCD_IO_Delay>
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <LCD_IO_WriteData16+0x250>)
 8001316:	2201      	movs	r2, #1
 8001318:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 800131a:	4b03      	ldr	r3, [pc, #12]	; (8001328 <LCD_IO_WriteData16+0x238>)
 800131c:	2202      	movs	r2, #2
 800131e:	619a      	str	r2, [r3, #24]
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	58020400 	.word	0x58020400
 800132c:	2400005a 	.word	0x2400005a
 8001330:	58021800 	.word	0x58021800
 8001334:	58020c00 	.word	0x58020c00
 8001338:	58021000 	.word	0x58021000
 800133c:	58020000 	.word	0x58020000
 8001340:	58020800 	.word	0x58020800

08001344 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	603a      	str	r2, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
 8001350:	460b      	mov	r3, r1
 8001352:	80bb      	strh	r3, [r7, #4]
  LCD_CS_ON;
 8001354:	4b9a      	ldr	r3, [pc, #616]	; (80015c0 <LCD_IO_WriteCmd8DataFill16+0x27c>)
 8001356:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800135a:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 800135c:	4b99      	ldr	r3, [pc, #612]	; (80015c4 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800135e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001362:	619a      	str	r2, [r3, #24]
 8001364:	4a98      	ldr	r2, [pc, #608]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	7013      	strb	r3, [r2, #0]
 800136a:	4b97      	ldr	r3, [pc, #604]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d004      	beq.n	8001380 <LCD_IO_WriteCmd8DataFill16+0x3c>
 8001376:	4b95      	ldr	r3, [pc, #596]	; (80015cc <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800137c:	619a      	str	r2, [r3, #24]
 800137e:	e003      	b.n	8001388 <LCD_IO_WriteCmd8DataFill16+0x44>
 8001380:	4b92      	ldr	r3, [pc, #584]	; (80015cc <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001382:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001386:	619a      	str	r2, [r3, #24]
 8001388:	4b8f      	ldr	r3, [pc, #572]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d004      	beq.n	800139e <LCD_IO_WriteCmd8DataFill16+0x5a>
 8001394:	4b8e      	ldr	r3, [pc, #568]	; (80015d0 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001396:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800139a:	619a      	str	r2, [r3, #24]
 800139c:	e003      	b.n	80013a6 <LCD_IO_WriteCmd8DataFill16+0x62>
 800139e:	4b8c      	ldr	r3, [pc, #560]	; (80015d0 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 80013a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013a4:	619a      	str	r2, [r3, #24]
 80013a6:	4b88      	ldr	r3, [pc, #544]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d004      	beq.n	80013bc <LCD_IO_WriteCmd8DataFill16+0x78>
 80013b2:	4b86      	ldr	r3, [pc, #536]	; (80015cc <LCD_IO_WriteCmd8DataFill16+0x288>)
 80013b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013b8:	619a      	str	r2, [r3, #24]
 80013ba:	e003      	b.n	80013c4 <LCD_IO_WriteCmd8DataFill16+0x80>
 80013bc:	4b83      	ldr	r3, [pc, #524]	; (80015cc <LCD_IO_WriteCmd8DataFill16+0x288>)
 80013be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013c2:	619a      	str	r2, [r3, #24]
 80013c4:	4b80      	ldr	r3, [pc, #512]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d004      	beq.n	80013da <LCD_IO_WriteCmd8DataFill16+0x96>
 80013d0:	4b80      	ldr	r3, [pc, #512]	; (80015d4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80013d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013d6:	619a      	str	r2, [r3, #24]
 80013d8:	e003      	b.n	80013e2 <LCD_IO_WriteCmd8DataFill16+0x9e>
 80013da:	4b7e      	ldr	r3, [pc, #504]	; (80015d4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80013dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80013e0:	619a      	str	r2, [r3, #24]
 80013e2:	4b79      	ldr	r3, [pc, #484]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d004      	beq.n	80013f8 <LCD_IO_WriteCmd8DataFill16+0xb4>
 80013ee:	4b79      	ldr	r3, [pc, #484]	; (80015d4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80013f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013f4:	619a      	str	r2, [r3, #24]
 80013f6:	e003      	b.n	8001400 <LCD_IO_WriteCmd8DataFill16+0xbc>
 80013f8:	4b76      	ldr	r3, [pc, #472]	; (80015d4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80013fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013fe:	619a      	str	r2, [r3, #24]
 8001400:	4b71      	ldr	r3, [pc, #452]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	f003 0320 	and.w	r3, r3, #32
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <LCD_IO_WriteCmd8DataFill16+0xd2>
 800140c:	4b71      	ldr	r3, [pc, #452]	; (80015d4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800140e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001412:	619a      	str	r2, [r3, #24]
 8001414:	e003      	b.n	800141e <LCD_IO_WriteCmd8DataFill16+0xda>
 8001416:	4b6f      	ldr	r3, [pc, #444]	; (80015d4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001418:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800141c:	619a      	str	r2, [r3, #24]
 800141e:	4b6a      	ldr	r3, [pc, #424]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001426:	2b00      	cmp	r3, #0
 8001428:	d004      	beq.n	8001434 <LCD_IO_WriteCmd8DataFill16+0xf0>
 800142a:	4b6b      	ldr	r3, [pc, #428]	; (80015d8 <LCD_IO_WriteCmd8DataFill16+0x294>)
 800142c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001430:	619a      	str	r2, [r3, #24]
 8001432:	e003      	b.n	800143c <LCD_IO_WriteCmd8DataFill16+0xf8>
 8001434:	4b68      	ldr	r3, [pc, #416]	; (80015d8 <LCD_IO_WriteCmd8DataFill16+0x294>)
 8001436:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800143a:	619a      	str	r2, [r3, #24]
 800143c:	4b62      	ldr	r3, [pc, #392]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b25b      	sxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	da04      	bge.n	8001450 <LCD_IO_WriteCmd8DataFill16+0x10c>
 8001446:	4b61      	ldr	r3, [pc, #388]	; (80015cc <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001448:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800144c:	619a      	str	r2, [r3, #24]
 800144e:	e003      	b.n	8001458 <LCD_IO_WriteCmd8DataFill16+0x114>
 8001450:	4b5e      	ldr	r3, [pc, #376]	; (80015cc <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001456:	619a      	str	r2, [r3, #24]
 8001458:	4b5a      	ldr	r3, [pc, #360]	; (80015c4 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800145a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800145e:	619a      	str	r2, [r3, #24]
 8001460:	2008      	movs	r0, #8
 8001462:	f7ff fbe8 	bl	8000c36 <LCD_IO_Delay>
 8001466:	4b57      	ldr	r3, [pc, #348]	; (80015c4 <LCD_IO_WriteCmd8DataFill16+0x280>)
 8001468:	2201      	movs	r2, #1
 800146a:	619a      	str	r2, [r3, #24]
 800146c:	4b55      	ldr	r3, [pc, #340]	; (80015c4 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800146e:	2208      	movs	r2, #8
 8001470:	619a      	str	r2, [r3, #24]
  while(Size--)
 8001472:	e11a      	b.n	80016aa <LCD_IO_WriteCmd8DataFill16+0x366>
  {
    LCD_DATA16_WRITE(Data);
 8001474:	88bb      	ldrh	r3, [r7, #4]
 8001476:	0a1b      	lsrs	r3, r3, #8
 8001478:	b29b      	uxth	r3, r3
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b52      	ldr	r3, [pc, #328]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800147e:	701a      	strb	r2, [r3, #0]
 8001480:	4b51      	ldr	r3, [pc, #324]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <LCD_IO_WriteCmd8DataFill16+0x152>
 800148c:	4b4f      	ldr	r3, [pc, #316]	; (80015cc <LCD_IO_WriteCmd8DataFill16+0x288>)
 800148e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001492:	619a      	str	r2, [r3, #24]
 8001494:	e003      	b.n	800149e <LCD_IO_WriteCmd8DataFill16+0x15a>
 8001496:	4b4d      	ldr	r3, [pc, #308]	; (80015cc <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001498:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800149c:	619a      	str	r2, [r3, #24]
 800149e:	4b4a      	ldr	r3, [pc, #296]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d004      	beq.n	80014b4 <LCD_IO_WriteCmd8DataFill16+0x170>
 80014aa:	4b49      	ldr	r3, [pc, #292]	; (80015d0 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 80014ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014b0:	619a      	str	r2, [r3, #24]
 80014b2:	e003      	b.n	80014bc <LCD_IO_WriteCmd8DataFill16+0x178>
 80014b4:	4b46      	ldr	r3, [pc, #280]	; (80015d0 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 80014b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80014ba:	619a      	str	r2, [r3, #24]
 80014bc:	4b42      	ldr	r3, [pc, #264]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d004      	beq.n	80014d2 <LCD_IO_WriteCmd8DataFill16+0x18e>
 80014c8:	4b40      	ldr	r3, [pc, #256]	; (80015cc <LCD_IO_WriteCmd8DataFill16+0x288>)
 80014ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ce:	619a      	str	r2, [r3, #24]
 80014d0:	e003      	b.n	80014da <LCD_IO_WriteCmd8DataFill16+0x196>
 80014d2:	4b3e      	ldr	r3, [pc, #248]	; (80015cc <LCD_IO_WriteCmd8DataFill16+0x288>)
 80014d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014d8:	619a      	str	r2, [r3, #24]
 80014da:	4b3b      	ldr	r3, [pc, #236]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d004      	beq.n	80014f0 <LCD_IO_WriteCmd8DataFill16+0x1ac>
 80014e6:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80014e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ec:	619a      	str	r2, [r3, #24]
 80014ee:	e003      	b.n	80014f8 <LCD_IO_WriteCmd8DataFill16+0x1b4>
 80014f0:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80014f2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014f6:	619a      	str	r2, [r3, #24]
 80014f8:	4b33      	ldr	r3, [pc, #204]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	f003 0310 	and.w	r3, r3, #16
 8001500:	2b00      	cmp	r3, #0
 8001502:	d004      	beq.n	800150e <LCD_IO_WriteCmd8DataFill16+0x1ca>
 8001504:	4b33      	ldr	r3, [pc, #204]	; (80015d4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001506:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800150a:	619a      	str	r2, [r3, #24]
 800150c:	e003      	b.n	8001516 <LCD_IO_WriteCmd8DataFill16+0x1d2>
 800150e:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001510:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001514:	619a      	str	r2, [r3, #24]
 8001516:	4b2c      	ldr	r3, [pc, #176]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	f003 0320 	and.w	r3, r3, #32
 800151e:	2b00      	cmp	r3, #0
 8001520:	d004      	beq.n	800152c <LCD_IO_WriteCmd8DataFill16+0x1e8>
 8001522:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001528:	619a      	str	r2, [r3, #24]
 800152a:	e003      	b.n	8001534 <LCD_IO_WriteCmd8DataFill16+0x1f0>
 800152c:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800152e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001532:	619a      	str	r2, [r3, #24]
 8001534:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153c:	2b00      	cmp	r3, #0
 800153e:	d004      	beq.n	800154a <LCD_IO_WriteCmd8DataFill16+0x206>
 8001540:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <LCD_IO_WriteCmd8DataFill16+0x294>)
 8001542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001546:	619a      	str	r2, [r3, #24]
 8001548:	e003      	b.n	8001552 <LCD_IO_WriteCmd8DataFill16+0x20e>
 800154a:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <LCD_IO_WriteCmd8DataFill16+0x294>)
 800154c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001550:	619a      	str	r2, [r3, #24]
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	b25b      	sxtb	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	da04      	bge.n	8001566 <LCD_IO_WriteCmd8DataFill16+0x222>
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <LCD_IO_WriteCmd8DataFill16+0x288>)
 800155e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001562:	619a      	str	r2, [r3, #24]
 8001564:	e003      	b.n	800156e <LCD_IO_WriteCmd8DataFill16+0x22a>
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800156c:	619a      	str	r2, [r3, #24]
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <LCD_IO_WriteCmd8DataFill16+0x280>)
 8001570:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001574:	619a      	str	r2, [r3, #24]
 8001576:	2008      	movs	r0, #8
 8001578:	f7ff fb5d 	bl	8000c36 <LCD_IO_Delay>
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800157e:	2201      	movs	r2, #1
 8001580:	619a      	str	r2, [r3, #24]
 8001582:	88bb      	ldrh	r3, [r7, #4]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d004      	beq.n	80015a0 <LCD_IO_WriteCmd8DataFill16+0x25c>
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159c:	619a      	str	r2, [r3, #24]
 800159e:	e003      	b.n	80015a8 <LCD_IO_WriteCmd8DataFill16+0x264>
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <LCD_IO_WriteCmd8DataFill16+0x288>)
 80015a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015a6:	619a      	str	r2, [r3, #24]
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d013      	beq.n	80015dc <LCD_IO_WriteCmd8DataFill16+0x298>
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 80015b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015ba:	619a      	str	r2, [r3, #24]
 80015bc:	e012      	b.n	80015e4 <LCD_IO_WriteCmd8DataFill16+0x2a0>
 80015be:	bf00      	nop
 80015c0:	58020400 	.word	0x58020400
 80015c4:	58020800 	.word	0x58020800
 80015c8:	2400005a 	.word	0x2400005a
 80015cc:	58021800 	.word	0x58021800
 80015d0:	58020c00 	.word	0x58020c00
 80015d4:	58021000 	.word	0x58021000
 80015d8:	58020000 	.word	0x58020000
 80015dc:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <LCD_IO_WriteCmd8DataFill16+0x380>)
 80015de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015e2:	619a      	str	r2, [r3, #24]
 80015e4:	4b38      	ldr	r3, [pc, #224]	; (80016c8 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d004      	beq.n	80015fa <LCD_IO_WriteCmd8DataFill16+0x2b6>
 80015f0:	4b36      	ldr	r3, [pc, #216]	; (80016cc <LCD_IO_WriteCmd8DataFill16+0x388>)
 80015f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f6:	619a      	str	r2, [r3, #24]
 80015f8:	e003      	b.n	8001602 <LCD_IO_WriteCmd8DataFill16+0x2be>
 80015fa:	4b34      	ldr	r3, [pc, #208]	; (80016cc <LCD_IO_WriteCmd8DataFill16+0x388>)
 80015fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001600:	619a      	str	r2, [r3, #24]
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <LCD_IO_WriteCmd8DataFill16+0x384>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <LCD_IO_WriteCmd8DataFill16+0x2d4>
 800160e:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001610:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001614:	619a      	str	r2, [r3, #24]
 8001616:	e003      	b.n	8001620 <LCD_IO_WriteCmd8DataFill16+0x2dc>
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 800161a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800161e:	619a      	str	r2, [r3, #24]
 8001620:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <LCD_IO_WriteCmd8DataFill16+0x384>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b00      	cmp	r3, #0
 800162a:	d004      	beq.n	8001636 <LCD_IO_WriteCmd8DataFill16+0x2f2>
 800162c:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 800162e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001632:	619a      	str	r2, [r3, #24]
 8001634:	e003      	b.n	800163e <LCD_IO_WriteCmd8DataFill16+0x2fa>
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001638:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800163c:	619a      	str	r2, [r3, #24]
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <LCD_IO_WriteCmd8DataFill16+0x384>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	f003 0320 	and.w	r3, r3, #32
 8001646:	2b00      	cmp	r3, #0
 8001648:	d004      	beq.n	8001654 <LCD_IO_WriteCmd8DataFill16+0x310>
 800164a:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 800164c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001650:	619a      	str	r2, [r3, #24]
 8001652:	e003      	b.n	800165c <LCD_IO_WriteCmd8DataFill16+0x318>
 8001654:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001656:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800165a:	619a      	str	r2, [r3, #24]
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <LCD_IO_WriteCmd8DataFill16+0x384>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001664:	2b00      	cmp	r3, #0
 8001666:	d004      	beq.n	8001672 <LCD_IO_WriteCmd8DataFill16+0x32e>
 8001668:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <LCD_IO_WriteCmd8DataFill16+0x390>)
 800166a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800166e:	619a      	str	r2, [r3, #24]
 8001670:	e003      	b.n	800167a <LCD_IO_WriteCmd8DataFill16+0x336>
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <LCD_IO_WriteCmd8DataFill16+0x390>)
 8001674:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001678:	619a      	str	r2, [r3, #24]
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <LCD_IO_WriteCmd8DataFill16+0x384>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b25b      	sxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	da04      	bge.n	800168e <LCD_IO_WriteCmd8DataFill16+0x34a>
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800168a:	619a      	str	r2, [r3, #24]
 800168c:	e003      	b.n	8001696 <LCD_IO_WriteCmd8DataFill16+0x352>
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001694:	619a      	str	r2, [r3, #24]
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <LCD_IO_WriteCmd8DataFill16+0x394>)
 8001698:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800169c:	619a      	str	r2, [r3, #24]
 800169e:	2008      	movs	r0, #8
 80016a0:	f7ff fac9 	bl	8000c36 <LCD_IO_Delay>
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <LCD_IO_WriteCmd8DataFill16+0x394>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	619a      	str	r2, [r3, #24]
  while(Size--)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	1e5a      	subs	r2, r3, #1
 80016ae:	603a      	str	r2, [r7, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f47f aedf 	bne.w	8001474 <LCD_IO_WriteCmd8DataFill16+0x130>
  }
  LCD_CS_OFF;
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <LCD_IO_WriteCmd8DataFill16+0x398>)
 80016b8:	2202      	movs	r2, #2
 80016ba:	619a      	str	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	58020c00 	.word	0x58020c00
 80016c8:	2400005a 	.word	0x2400005a
 80016cc:	58021800 	.word	0x58021800
 80016d0:	58021000 	.word	0x58021000
 80016d4:	58020000 	.word	0x58020000
 80016d8:	58020800 	.word	0x58020800
 80016dc:	58020400 	.word	0x58020400

080016e0 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 80016ee:	4b92      	ldr	r3, [pc, #584]	; (8001938 <LCD_IO_WriteCmd8MultipleData8+0x258>)
 80016f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016f4:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 80016f6:	4b91      	ldr	r3, [pc, #580]	; (800193c <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 80016f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016fc:	619a      	str	r2, [r3, #24]
 80016fe:	4a90      	ldr	r2, [pc, #576]	; (8001940 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	7013      	strb	r3, [r2, #0]
 8001704:	4b8e      	ldr	r3, [pc, #568]	; (8001940 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d004      	beq.n	800171a <LCD_IO_WriteCmd8MultipleData8+0x3a>
 8001710:	4b8c      	ldr	r3, [pc, #560]	; (8001944 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001716:	619a      	str	r2, [r3, #24]
 8001718:	e003      	b.n	8001722 <LCD_IO_WriteCmd8MultipleData8+0x42>
 800171a:	4b8a      	ldr	r3, [pc, #552]	; (8001944 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 800171c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001720:	619a      	str	r2, [r3, #24]
 8001722:	4b87      	ldr	r3, [pc, #540]	; (8001940 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d004      	beq.n	8001738 <LCD_IO_WriteCmd8MultipleData8+0x58>
 800172e:	4b86      	ldr	r3, [pc, #536]	; (8001948 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8001730:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001734:	619a      	str	r2, [r3, #24]
 8001736:	e003      	b.n	8001740 <LCD_IO_WriteCmd8MultipleData8+0x60>
 8001738:	4b83      	ldr	r3, [pc, #524]	; (8001948 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 800173a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800173e:	619a      	str	r2, [r3, #24]
 8001740:	4b7f      	ldr	r3, [pc, #508]	; (8001940 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d004      	beq.n	8001756 <LCD_IO_WriteCmd8MultipleData8+0x76>
 800174c:	4b7d      	ldr	r3, [pc, #500]	; (8001944 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 800174e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001752:	619a      	str	r2, [r3, #24]
 8001754:	e003      	b.n	800175e <LCD_IO_WriteCmd8MultipleData8+0x7e>
 8001756:	4b7b      	ldr	r3, [pc, #492]	; (8001944 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001758:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800175c:	619a      	str	r2, [r3, #24]
 800175e:	4b78      	ldr	r3, [pc, #480]	; (8001940 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d004      	beq.n	8001774 <LCD_IO_WriteCmd8MultipleData8+0x94>
 800176a:	4b78      	ldr	r3, [pc, #480]	; (800194c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800176c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001770:	619a      	str	r2, [r3, #24]
 8001772:	e003      	b.n	800177c <LCD_IO_WriteCmd8MultipleData8+0x9c>
 8001774:	4b75      	ldr	r3, [pc, #468]	; (800194c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001776:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800177a:	619a      	str	r2, [r3, #24]
 800177c:	4b70      	ldr	r3, [pc, #448]	; (8001940 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	f003 0310 	and.w	r3, r3, #16
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <LCD_IO_WriteCmd8MultipleData8+0xb2>
 8001788:	4b70      	ldr	r3, [pc, #448]	; (800194c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800178a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800178e:	619a      	str	r2, [r3, #24]
 8001790:	e003      	b.n	800179a <LCD_IO_WriteCmd8MultipleData8+0xba>
 8001792:	4b6e      	ldr	r3, [pc, #440]	; (800194c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001794:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001798:	619a      	str	r2, [r3, #24]
 800179a:	4b69      	ldr	r3, [pc, #420]	; (8001940 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	f003 0320 	and.w	r3, r3, #32
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d004      	beq.n	80017b0 <LCD_IO_WriteCmd8MultipleData8+0xd0>
 80017a6:	4b69      	ldr	r3, [pc, #420]	; (800194c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 80017a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017ac:	619a      	str	r2, [r3, #24]
 80017ae:	e003      	b.n	80017b8 <LCD_IO_WriteCmd8MultipleData8+0xd8>
 80017b0:	4b66      	ldr	r3, [pc, #408]	; (800194c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 80017b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017b6:	619a      	str	r2, [r3, #24]
 80017b8:	4b61      	ldr	r3, [pc, #388]	; (8001940 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <LCD_IO_WriteCmd8MultipleData8+0xee>
 80017c4:	4b62      	ldr	r3, [pc, #392]	; (8001950 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 80017c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ca:	619a      	str	r2, [r3, #24]
 80017cc:	e003      	b.n	80017d6 <LCD_IO_WriteCmd8MultipleData8+0xf6>
 80017ce:	4b60      	ldr	r3, [pc, #384]	; (8001950 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 80017d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017d4:	619a      	str	r2, [r3, #24]
 80017d6:	4b5a      	ldr	r3, [pc, #360]	; (8001940 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	da04      	bge.n	80017ea <LCD_IO_WriteCmd8MultipleData8+0x10a>
 80017e0:	4b58      	ldr	r3, [pc, #352]	; (8001944 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80017e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017e6:	619a      	str	r2, [r3, #24]
 80017e8:	e003      	b.n	80017f2 <LCD_IO_WriteCmd8MultipleData8+0x112>
 80017ea:	4b56      	ldr	r3, [pc, #344]	; (8001944 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80017ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017f0:	619a      	str	r2, [r3, #24]
 80017f2:	4b52      	ldr	r3, [pc, #328]	; (800193c <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 80017f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017f8:	619a      	str	r2, [r3, #24]
 80017fa:	2008      	movs	r0, #8
 80017fc:	f7ff fa1b 	bl	8000c36 <LCD_IO_Delay>
 8001800:	4b4e      	ldr	r3, [pc, #312]	; (800193c <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001802:	2201      	movs	r2, #1
 8001804:	619a      	str	r2, [r3, #24]
 8001806:	4b4d      	ldr	r3, [pc, #308]	; (800193c <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001808:	2208      	movs	r2, #8
 800180a:	619a      	str	r2, [r3, #24]

  while(Size--)
 800180c:	e087      	b.n	800191e <LCD_IO_WriteCmd8MultipleData8+0x23e>
  {
    LCD_DATA8_WRITE(*pData);
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	781a      	ldrb	r2, [r3, #0]
 8001812:	4b4b      	ldr	r3, [pc, #300]	; (8001940 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001814:	701a      	strb	r2, [r3, #0]
 8001816:	4b4a      	ldr	r3, [pc, #296]	; (8001940 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d004      	beq.n	800182c <LCD_IO_WriteCmd8MultipleData8+0x14c>
 8001822:	4b48      	ldr	r3, [pc, #288]	; (8001944 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001828:	619a      	str	r2, [r3, #24]
 800182a:	e003      	b.n	8001834 <LCD_IO_WriteCmd8MultipleData8+0x154>
 800182c:	4b45      	ldr	r3, [pc, #276]	; (8001944 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 800182e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001832:	619a      	str	r2, [r3, #24]
 8001834:	4b42      	ldr	r3, [pc, #264]	; (8001940 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d004      	beq.n	800184a <LCD_IO_WriteCmd8MultipleData8+0x16a>
 8001840:	4b41      	ldr	r3, [pc, #260]	; (8001948 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8001842:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001846:	619a      	str	r2, [r3, #24]
 8001848:	e003      	b.n	8001852 <LCD_IO_WriteCmd8MultipleData8+0x172>
 800184a:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 800184c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001850:	619a      	str	r2, [r3, #24]
 8001852:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b00      	cmp	r3, #0
 800185c:	d004      	beq.n	8001868 <LCD_IO_WriteCmd8MultipleData8+0x188>
 800185e:	4b39      	ldr	r3, [pc, #228]	; (8001944 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001860:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001864:	619a      	str	r2, [r3, #24]
 8001866:	e003      	b.n	8001870 <LCD_IO_WriteCmd8MultipleData8+0x190>
 8001868:	4b36      	ldr	r3, [pc, #216]	; (8001944 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 800186a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800186e:	619a      	str	r2, [r3, #24]
 8001870:	4b33      	ldr	r3, [pc, #204]	; (8001940 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b00      	cmp	r3, #0
 800187a:	d004      	beq.n	8001886 <LCD_IO_WriteCmd8MultipleData8+0x1a6>
 800187c:	4b33      	ldr	r3, [pc, #204]	; (800194c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800187e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001882:	619a      	str	r2, [r3, #24]
 8001884:	e003      	b.n	800188e <LCD_IO_WriteCmd8MultipleData8+0x1ae>
 8001886:	4b31      	ldr	r3, [pc, #196]	; (800194c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001888:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800188c:	619a      	str	r2, [r3, #24]
 800188e:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	f003 0310 	and.w	r3, r3, #16
 8001896:	2b00      	cmp	r3, #0
 8001898:	d004      	beq.n	80018a4 <LCD_IO_WriteCmd8MultipleData8+0x1c4>
 800189a:	4b2c      	ldr	r3, [pc, #176]	; (800194c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800189c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018a0:	619a      	str	r2, [r3, #24]
 80018a2:	e003      	b.n	80018ac <LCD_IO_WriteCmd8MultipleData8+0x1cc>
 80018a4:	4b29      	ldr	r3, [pc, #164]	; (800194c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 80018a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018aa:	619a      	str	r2, [r3, #24]
 80018ac:	4b24      	ldr	r3, [pc, #144]	; (8001940 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	f003 0320 	and.w	r3, r3, #32
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d004      	beq.n	80018c2 <LCD_IO_WriteCmd8MultipleData8+0x1e2>
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 80018ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018be:	619a      	str	r2, [r3, #24]
 80018c0:	e003      	b.n	80018ca <LCD_IO_WriteCmd8MultipleData8+0x1ea>
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 80018c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018c8:	619a      	str	r2, [r3, #24]
 80018ca:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d004      	beq.n	80018e0 <LCD_IO_WriteCmd8MultipleData8+0x200>
 80018d6:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 80018d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018dc:	619a      	str	r2, [r3, #24]
 80018de:	e003      	b.n	80018e8 <LCD_IO_WriteCmd8MultipleData8+0x208>
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 80018e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018e6:	619a      	str	r2, [r3, #24]
 80018e8:	4b15      	ldr	r3, [pc, #84]	; (8001940 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	b25b      	sxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	da04      	bge.n	80018fc <LCD_IO_WriteCmd8MultipleData8+0x21c>
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80018f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018f8:	619a      	str	r2, [r3, #24]
 80018fa:	e003      	b.n	8001904 <LCD_IO_WriteCmd8MultipleData8+0x224>
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80018fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001902:	619a      	str	r2, [r3, #24]
 8001904:	4b0d      	ldr	r3, [pc, #52]	; (800193c <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001906:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800190a:	619a      	str	r2, [r3, #24]
 800190c:	2008      	movs	r0, #8
 800190e:	f7ff f992 	bl	8000c36 <LCD_IO_Delay>
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001914:	2201      	movs	r2, #1
 8001916:	619a      	str	r2, [r3, #24]
    pData ++;
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	3301      	adds	r3, #1
 800191c:	60bb      	str	r3, [r7, #8]
  while(Size--)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	1e5a      	subs	r2, r3, #1
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	f47f af72 	bne.w	800180e <LCD_IO_WriteCmd8MultipleData8+0x12e>
  }
  LCD_CS_OFF;
 800192a:	4b03      	ldr	r3, [pc, #12]	; (8001938 <LCD_IO_WriteCmd8MultipleData8+0x258>)
 800192c:	2202      	movs	r2, #2
 800192e:	619a      	str	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	58020400 	.word	0x58020400
 800193c:	58020800 	.word	0x58020800
 8001940:	2400005a 	.word	0x2400005a
 8001944:	58021800 	.word	0x58021800
 8001948:	58020c00 	.word	0x58020c00
 800194c:	58021000 	.word	0x58021000
 8001950:	58020000 	.word	0x58020000

08001954 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 8001962:	4b9b      	ldr	r3, [pc, #620]	; (8001bd0 <LCD_IO_WriteCmd8MultipleData16+0x27c>)
 8001964:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001968:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 800196a:	4b9a      	ldr	r3, [pc, #616]	; (8001bd4 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 800196c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001970:	619a      	str	r2, [r3, #24]
 8001972:	4a99      	ldr	r2, [pc, #612]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	7013      	strb	r3, [r2, #0]
 8001978:	4b97      	ldr	r3, [pc, #604]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d004      	beq.n	800198e <LCD_IO_WriteCmd8MultipleData16+0x3a>
 8001984:	4b95      	ldr	r3, [pc, #596]	; (8001bdc <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198a:	619a      	str	r2, [r3, #24]
 800198c:	e003      	b.n	8001996 <LCD_IO_WriteCmd8MultipleData16+0x42>
 800198e:	4b93      	ldr	r3, [pc, #588]	; (8001bdc <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001990:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001994:	619a      	str	r2, [r3, #24]
 8001996:	4b90      	ldr	r3, [pc, #576]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d004      	beq.n	80019ac <LCD_IO_WriteCmd8MultipleData16+0x58>
 80019a2:	4b8f      	ldr	r3, [pc, #572]	; (8001be0 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 80019a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019a8:	619a      	str	r2, [r3, #24]
 80019aa:	e003      	b.n	80019b4 <LCD_IO_WriteCmd8MultipleData16+0x60>
 80019ac:	4b8c      	ldr	r3, [pc, #560]	; (8001be0 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 80019ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019b2:	619a      	str	r2, [r3, #24]
 80019b4:	4b88      	ldr	r3, [pc, #544]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d004      	beq.n	80019ca <LCD_IO_WriteCmd8MultipleData16+0x76>
 80019c0:	4b86      	ldr	r3, [pc, #536]	; (8001bdc <LCD_IO_WriteCmd8MultipleData16+0x288>)
 80019c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019c6:	619a      	str	r2, [r3, #24]
 80019c8:	e003      	b.n	80019d2 <LCD_IO_WriteCmd8MultipleData16+0x7e>
 80019ca:	4b84      	ldr	r3, [pc, #528]	; (8001bdc <LCD_IO_WriteCmd8MultipleData16+0x288>)
 80019cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019d0:	619a      	str	r2, [r3, #24]
 80019d2:	4b81      	ldr	r3, [pc, #516]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d004      	beq.n	80019e8 <LCD_IO_WriteCmd8MultipleData16+0x94>
 80019de:	4b81      	ldr	r3, [pc, #516]	; (8001be4 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 80019e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e4:	619a      	str	r2, [r3, #24]
 80019e6:	e003      	b.n	80019f0 <LCD_IO_WriteCmd8MultipleData16+0x9c>
 80019e8:	4b7e      	ldr	r3, [pc, #504]	; (8001be4 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 80019ea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019ee:	619a      	str	r2, [r3, #24]
 80019f0:	4b79      	ldr	r3, [pc, #484]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	f003 0310 	and.w	r3, r3, #16
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d004      	beq.n	8001a06 <LCD_IO_WriteCmd8MultipleData16+0xb2>
 80019fc:	4b79      	ldr	r3, [pc, #484]	; (8001be4 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 80019fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a02:	619a      	str	r2, [r3, #24]
 8001a04:	e003      	b.n	8001a0e <LCD_IO_WriteCmd8MultipleData16+0xba>
 8001a06:	4b77      	ldr	r3, [pc, #476]	; (8001be4 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001a08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a0c:	619a      	str	r2, [r3, #24]
 8001a0e:	4b72      	ldr	r3, [pc, #456]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	f003 0320 	and.w	r3, r3, #32
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d004      	beq.n	8001a24 <LCD_IO_WriteCmd8MultipleData16+0xd0>
 8001a1a:	4b72      	ldr	r3, [pc, #456]	; (8001be4 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001a1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a20:	619a      	str	r2, [r3, #24]
 8001a22:	e003      	b.n	8001a2c <LCD_IO_WriteCmd8MultipleData16+0xd8>
 8001a24:	4b6f      	ldr	r3, [pc, #444]	; (8001be4 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001a26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a2a:	619a      	str	r2, [r3, #24]
 8001a2c:	4b6a      	ldr	r3, [pc, #424]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d004      	beq.n	8001a42 <LCD_IO_WriteCmd8MultipleData16+0xee>
 8001a38:	4b6b      	ldr	r3, [pc, #428]	; (8001be8 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001a3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a3e:	619a      	str	r2, [r3, #24]
 8001a40:	e003      	b.n	8001a4a <LCD_IO_WriteCmd8MultipleData16+0xf6>
 8001a42:	4b69      	ldr	r3, [pc, #420]	; (8001be8 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001a44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a48:	619a      	str	r2, [r3, #24]
 8001a4a:	4b63      	ldr	r3, [pc, #396]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	b25b      	sxtb	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	da04      	bge.n	8001a5e <LCD_IO_WriteCmd8MultipleData16+0x10a>
 8001a54:	4b61      	ldr	r3, [pc, #388]	; (8001bdc <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001a56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a5a:	619a      	str	r2, [r3, #24]
 8001a5c:	e003      	b.n	8001a66 <LCD_IO_WriteCmd8MultipleData16+0x112>
 8001a5e:	4b5f      	ldr	r3, [pc, #380]	; (8001bdc <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a64:	619a      	str	r2, [r3, #24]
 8001a66:	4b5b      	ldr	r3, [pc, #364]	; (8001bd4 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001a68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a6c:	619a      	str	r2, [r3, #24]
 8001a6e:	2008      	movs	r0, #8
 8001a70:	f7ff f8e1 	bl	8000c36 <LCD_IO_Delay>
 8001a74:	4b57      	ldr	r3, [pc, #348]	; (8001bd4 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	619a      	str	r2, [r3, #24]
 8001a7a:	4b56      	ldr	r3, [pc, #344]	; (8001bd4 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	619a      	str	r2, [r3, #24]
  while(Size--)
 8001a80:	e11e      	b.n	8001cc0 <LCD_IO_WriteCmd8MultipleData16+0x36c>
  {
    LCD_DATA16_WRITE(*pData);
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	0a1b      	lsrs	r3, r3, #8
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	4b52      	ldr	r3, [pc, #328]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	4b51      	ldr	r3, [pc, #324]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d004      	beq.n	8001aa6 <LCD_IO_WriteCmd8MultipleData16+0x152>
 8001a9c:	4b4f      	ldr	r3, [pc, #316]	; (8001bdc <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa2:	619a      	str	r2, [r3, #24]
 8001aa4:	e003      	b.n	8001aae <LCD_IO_WriteCmd8MultipleData16+0x15a>
 8001aa6:	4b4d      	ldr	r3, [pc, #308]	; (8001bdc <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001aa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aac:	619a      	str	r2, [r3, #24]
 8001aae:	4b4a      	ldr	r3, [pc, #296]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d004      	beq.n	8001ac4 <LCD_IO_WriteCmd8MultipleData16+0x170>
 8001aba:	4b49      	ldr	r3, [pc, #292]	; (8001be0 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001abc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ac0:	619a      	str	r2, [r3, #24]
 8001ac2:	e003      	b.n	8001acc <LCD_IO_WriteCmd8MultipleData16+0x178>
 8001ac4:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001ac6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001aca:	619a      	str	r2, [r3, #24]
 8001acc:	4b42      	ldr	r3, [pc, #264]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d004      	beq.n	8001ae2 <LCD_IO_WriteCmd8MultipleData16+0x18e>
 8001ad8:	4b40      	ldr	r3, [pc, #256]	; (8001bdc <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ade:	619a      	str	r2, [r3, #24]
 8001ae0:	e003      	b.n	8001aea <LCD_IO_WriteCmd8MultipleData16+0x196>
 8001ae2:	4b3e      	ldr	r3, [pc, #248]	; (8001bdc <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001ae4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ae8:	619a      	str	r2, [r3, #24]
 8001aea:	4b3b      	ldr	r3, [pc, #236]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d004      	beq.n	8001b00 <LCD_IO_WriteCmd8MultipleData16+0x1ac>
 8001af6:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001af8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001afc:	619a      	str	r2, [r3, #24]
 8001afe:	e003      	b.n	8001b08 <LCD_IO_WriteCmd8MultipleData16+0x1b4>
 8001b00:	4b38      	ldr	r3, [pc, #224]	; (8001be4 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001b02:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b06:	619a      	str	r2, [r3, #24]
 8001b08:	4b33      	ldr	r3, [pc, #204]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d004      	beq.n	8001b1e <LCD_IO_WriteCmd8MultipleData16+0x1ca>
 8001b14:	4b33      	ldr	r3, [pc, #204]	; (8001be4 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001b16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b1a:	619a      	str	r2, [r3, #24]
 8001b1c:	e003      	b.n	8001b26 <LCD_IO_WriteCmd8MultipleData16+0x1d2>
 8001b1e:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001b20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b24:	619a      	str	r2, [r3, #24]
 8001b26:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	f003 0320 	and.w	r3, r3, #32
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d004      	beq.n	8001b3c <LCD_IO_WriteCmd8MultipleData16+0x1e8>
 8001b32:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b38:	619a      	str	r2, [r3, #24]
 8001b3a:	e003      	b.n	8001b44 <LCD_IO_WriteCmd8MultipleData16+0x1f0>
 8001b3c:	4b29      	ldr	r3, [pc, #164]	; (8001be4 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001b3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b42:	619a      	str	r2, [r3, #24]
 8001b44:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d004      	beq.n	8001b5a <LCD_IO_WriteCmd8MultipleData16+0x206>
 8001b50:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b56:	619a      	str	r2, [r3, #24]
 8001b58:	e003      	b.n	8001b62 <LCD_IO_WriteCmd8MultipleData16+0x20e>
 8001b5a:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001b5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b60:	619a      	str	r2, [r3, #24]
 8001b62:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	b25b      	sxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	da04      	bge.n	8001b76 <LCD_IO_WriteCmd8MultipleData16+0x222>
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001b6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b72:	619a      	str	r2, [r3, #24]
 8001b74:	e003      	b.n	8001b7e <LCD_IO_WriteCmd8MultipleData16+0x22a>
 8001b76:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b7c:	619a      	str	r2, [r3, #24]
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001b80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b84:	619a      	str	r2, [r3, #24]
 8001b86:	2008      	movs	r0, #8
 8001b88:	f7ff f855 	bl	8000c36 <LCD_IO_Delay>
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	619a      	str	r2, [r3, #24]
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001b9a:	701a      	strb	r2, [r3, #0]
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d004      	beq.n	8001bb2 <LCD_IO_WriteCmd8MultipleData16+0x25e>
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bae:	619a      	str	r2, [r3, #24]
 8001bb0:	e003      	b.n	8001bba <LCD_IO_WriteCmd8MultipleData16+0x266>
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001bb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb8:	619a      	str	r2, [r3, #24]
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d012      	beq.n	8001bec <LCD_IO_WriteCmd8MultipleData16+0x298>
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001bc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bcc:	619a      	str	r2, [r3, #24]
 8001bce:	e011      	b.n	8001bf4 <LCD_IO_WriteCmd8MultipleData16+0x2a0>
 8001bd0:	58020400 	.word	0x58020400
 8001bd4:	58020800 	.word	0x58020800
 8001bd8:	2400005a 	.word	0x2400005a
 8001bdc:	58021800 	.word	0x58021800
 8001be0:	58020c00 	.word	0x58020c00
 8001be4:	58021000 	.word	0x58021000
 8001be8:	58020000 	.word	0x58020000
 8001bec:	4b3b      	ldr	r3, [pc, #236]	; (8001cdc <LCD_IO_WriteCmd8MultipleData16+0x388>)
 8001bee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001bf2:	619a      	str	r2, [r3, #24]
 8001bf4:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d004      	beq.n	8001c0a <LCD_IO_WriteCmd8MultipleData16+0x2b6>
 8001c00:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001c02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c06:	619a      	str	r2, [r3, #24]
 8001c08:	e003      	b.n	8001c12 <LCD_IO_WriteCmd8MultipleData16+0x2be>
 8001c0a:	4b36      	ldr	r3, [pc, #216]	; (8001ce4 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001c0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c10:	619a      	str	r2, [r3, #24]
 8001c12:	4b33      	ldr	r3, [pc, #204]	; (8001ce0 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d004      	beq.n	8001c28 <LCD_IO_WriteCmd8MultipleData16+0x2d4>
 8001c1e:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001c20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c24:	619a      	str	r2, [r3, #24]
 8001c26:	e003      	b.n	8001c30 <LCD_IO_WriteCmd8MultipleData16+0x2dc>
 8001c28:	4b2f      	ldr	r3, [pc, #188]	; (8001ce8 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001c2a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c2e:	619a      	str	r2, [r3, #24]
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d004      	beq.n	8001c46 <LCD_IO_WriteCmd8MultipleData16+0x2f2>
 8001c3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001c3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c42:	619a      	str	r2, [r3, #24]
 8001c44:	e003      	b.n	8001c4e <LCD_IO_WriteCmd8MultipleData16+0x2fa>
 8001c46:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001c48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c4c:	619a      	str	r2, [r3, #24]
 8001c4e:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d004      	beq.n	8001c64 <LCD_IO_WriteCmd8MultipleData16+0x310>
 8001c5a:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001c5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c60:	619a      	str	r2, [r3, #24]
 8001c62:	e003      	b.n	8001c6c <LCD_IO_WriteCmd8MultipleData16+0x318>
 8001c64:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001c66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c6a:	619a      	str	r2, [r3, #24]
 8001c6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d004      	beq.n	8001c82 <LCD_IO_WriteCmd8MultipleData16+0x32e>
 8001c78:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <LCD_IO_WriteCmd8MultipleData16+0x398>)
 8001c7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c7e:	619a      	str	r2, [r3, #24]
 8001c80:	e003      	b.n	8001c8a <LCD_IO_WriteCmd8MultipleData16+0x336>
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <LCD_IO_WriteCmd8MultipleData16+0x398>)
 8001c84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c88:	619a      	str	r2, [r3, #24]
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	b25b      	sxtb	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	da04      	bge.n	8001c9e <LCD_IO_WriteCmd8MultipleData16+0x34a>
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001c96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c9a:	619a      	str	r2, [r3, #24]
 8001c9c:	e003      	b.n	8001ca6 <LCD_IO_WriteCmd8MultipleData16+0x352>
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ca4:	619a      	str	r2, [r3, #24]
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <LCD_IO_WriteCmd8MultipleData16+0x39c>)
 8001ca8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cac:	619a      	str	r2, [r3, #24]
 8001cae:	2008      	movs	r0, #8
 8001cb0:	f7fe ffc1 	bl	8000c36 <LCD_IO_Delay>
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <LCD_IO_WriteCmd8MultipleData16+0x39c>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	619a      	str	r2, [r3, #24]
    pData ++;
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	1e5a      	subs	r2, r3, #1
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f47f aedb 	bne.w	8001a82 <LCD_IO_WriteCmd8MultipleData16+0x12e>
  }
  LCD_CS_OFF;
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <LCD_IO_WriteCmd8MultipleData16+0x3a0>)
 8001cce:	2202      	movs	r2, #2
 8001cd0:	619a      	str	r2, [r3, #24]
}
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	58020c00 	.word	0x58020c00
 8001ce0:	2400005a 	.word	0x2400005a
 8001ce4:	58021800 	.word	0x58021800
 8001ce8:	58021000 	.word	0x58021000
 8001cec:	58020000 	.word	0x58020000
 8001cf0:	58020800 	.word	0x58020800
 8001cf4:	58020400 	.word	0x58020400

08001cf8 <LCD_IO_ReadCmd8MultipleData8>:
}

//-----------------------------------------------------------------------------
#if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	4603      	mov	r3, r0
 8001d06:	73fb      	strb	r3, [r7, #15]
  uint8_t  d;
  LCD_CS_ON;
 8001d08:	4b6f      	ldr	r3, [pc, #444]	; (8001ec8 <LCD_IO_ReadCmd8MultipleData8+0x1d0>)
 8001d0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d0e:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8001d10:	4b6e      	ldr	r3, [pc, #440]	; (8001ecc <LCD_IO_ReadCmd8MultipleData8+0x1d4>)
 8001d12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d16:	619a      	str	r2, [r3, #24]
 8001d18:	4a6d      	ldr	r2, [pc, #436]	; (8001ed0 <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	7013      	strb	r3, [r2, #0]
 8001d1e:	4b6c      	ldr	r3, [pc, #432]	; (8001ed0 <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d004      	beq.n	8001d34 <LCD_IO_ReadCmd8MultipleData8+0x3c>
 8001d2a:	4b6a      	ldr	r3, [pc, #424]	; (8001ed4 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8001d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d30:	619a      	str	r2, [r3, #24]
 8001d32:	e003      	b.n	8001d3c <LCD_IO_ReadCmd8MultipleData8+0x44>
 8001d34:	4b67      	ldr	r3, [pc, #412]	; (8001ed4 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8001d36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d3a:	619a      	str	r2, [r3, #24]
 8001d3c:	4b64      	ldr	r3, [pc, #400]	; (8001ed0 <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d004      	beq.n	8001d52 <LCD_IO_ReadCmd8MultipleData8+0x5a>
 8001d48:	4b63      	ldr	r3, [pc, #396]	; (8001ed8 <LCD_IO_ReadCmd8MultipleData8+0x1e0>)
 8001d4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d4e:	619a      	str	r2, [r3, #24]
 8001d50:	e003      	b.n	8001d5a <LCD_IO_ReadCmd8MultipleData8+0x62>
 8001d52:	4b61      	ldr	r3, [pc, #388]	; (8001ed8 <LCD_IO_ReadCmd8MultipleData8+0x1e0>)
 8001d54:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d58:	619a      	str	r2, [r3, #24]
 8001d5a:	4b5d      	ldr	r3, [pc, #372]	; (8001ed0 <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d004      	beq.n	8001d70 <LCD_IO_ReadCmd8MultipleData8+0x78>
 8001d66:	4b5b      	ldr	r3, [pc, #364]	; (8001ed4 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8001d68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d6c:	619a      	str	r2, [r3, #24]
 8001d6e:	e003      	b.n	8001d78 <LCD_IO_ReadCmd8MultipleData8+0x80>
 8001d70:	4b58      	ldr	r3, [pc, #352]	; (8001ed4 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8001d72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d76:	619a      	str	r2, [r3, #24]
 8001d78:	4b55      	ldr	r3, [pc, #340]	; (8001ed0 <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d004      	beq.n	8001d8e <LCD_IO_ReadCmd8MultipleData8+0x96>
 8001d84:	4b55      	ldr	r3, [pc, #340]	; (8001edc <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8001d86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d8a:	619a      	str	r2, [r3, #24]
 8001d8c:	e003      	b.n	8001d96 <LCD_IO_ReadCmd8MultipleData8+0x9e>
 8001d8e:	4b53      	ldr	r3, [pc, #332]	; (8001edc <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8001d90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d94:	619a      	str	r2, [r3, #24]
 8001d96:	4b4e      	ldr	r3, [pc, #312]	; (8001ed0 <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d004      	beq.n	8001dac <LCD_IO_ReadCmd8MultipleData8+0xb4>
 8001da2:	4b4e      	ldr	r3, [pc, #312]	; (8001edc <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8001da4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001da8:	619a      	str	r2, [r3, #24]
 8001daa:	e003      	b.n	8001db4 <LCD_IO_ReadCmd8MultipleData8+0xbc>
 8001dac:	4b4b      	ldr	r3, [pc, #300]	; (8001edc <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8001dae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001db2:	619a      	str	r2, [r3, #24]
 8001db4:	4b46      	ldr	r3, [pc, #280]	; (8001ed0 <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	f003 0320 	and.w	r3, r3, #32
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d004      	beq.n	8001dca <LCD_IO_ReadCmd8MultipleData8+0xd2>
 8001dc0:	4b46      	ldr	r3, [pc, #280]	; (8001edc <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8001dc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dc6:	619a      	str	r2, [r3, #24]
 8001dc8:	e003      	b.n	8001dd2 <LCD_IO_ReadCmd8MultipleData8+0xda>
 8001dca:	4b44      	ldr	r3, [pc, #272]	; (8001edc <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8001dcc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dd0:	619a      	str	r2, [r3, #24]
 8001dd2:	4b3f      	ldr	r3, [pc, #252]	; (8001ed0 <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d004      	beq.n	8001de8 <LCD_IO_ReadCmd8MultipleData8+0xf0>
 8001dde:	4b40      	ldr	r3, [pc, #256]	; (8001ee0 <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8001de0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001de4:	619a      	str	r2, [r3, #24]
 8001de6:	e003      	b.n	8001df0 <LCD_IO_ReadCmd8MultipleData8+0xf8>
 8001de8:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8001dea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dee:	619a      	str	r2, [r3, #24]
 8001df0:	4b37      	ldr	r3, [pc, #220]	; (8001ed0 <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	b25b      	sxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	da04      	bge.n	8001e04 <LCD_IO_ReadCmd8MultipleData8+0x10c>
 8001dfa:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8001dfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e00:	619a      	str	r2, [r3, #24]
 8001e02:	e003      	b.n	8001e0c <LCD_IO_ReadCmd8MultipleData8+0x114>
 8001e04:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8001e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e0a:	619a      	str	r2, [r3, #24]
 8001e0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ecc <LCD_IO_ReadCmd8MultipleData8+0x1d4>)
 8001e0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e12:	619a      	str	r2, [r3, #24]
 8001e14:	2008      	movs	r0, #8
 8001e16:	f7fe ff0e 	bl	8000c36 <LCD_IO_Delay>
 8001e1a:	4b2c      	ldr	r3, [pc, #176]	; (8001ecc <LCD_IO_ReadCmd8MultipleData8+0x1d4>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	619a      	str	r2, [r3, #24]
 8001e20:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <LCD_IO_ReadCmd8MultipleData8+0x1d4>)
 8001e22:	2208      	movs	r2, #8
 8001e24:	619a      	str	r2, [r3, #24]
  LCD_DIRREAD;
 8001e26:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a2a      	ldr	r2, [pc, #168]	; (8001ed4 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8001e2c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <LCD_IO_ReadCmd8MultipleData8+0x1e0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a28      	ldr	r2, [pc, #160]	; (8001ed8 <LCD_IO_ReadCmd8MultipleData8+0x1e0>)
 8001e38:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a24      	ldr	r2, [pc, #144]	; (8001ed4 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8001e44:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b24      	ldr	r3, [pc, #144]	; (8001edc <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a23      	ldr	r2, [pc, #140]	; (8001edc <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8001e50:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a20      	ldr	r2, [pc, #128]	; (8001edc <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8001e5c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a1d      	ldr	r2, [pc, #116]	; (8001edc <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8001e68:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1b      	ldr	r2, [pc, #108]	; (8001ee0 <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8001e74:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8001e80:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001e84:	6013      	str	r3, [r2, #0]
  while(DummySize--)
 8001e86:	e009      	b.n	8001e9c <LCD_IO_ReadCmd8MultipleData8+0x1a4>
    LCD_DUMMY_READ;
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8001e8a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e8e:	619a      	str	r2, [r3, #24]
 8001e90:	2012      	movs	r0, #18
 8001e92:	f7fe fed0 	bl	8000c36 <LCD_IO_Delay>
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8001e98:	2208      	movs	r2, #8
 8001e9a:	619a      	str	r2, [r3, #24]
  while(DummySize--)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	1e5a      	subs	r2, r3, #1
 8001ea0:	603a      	str	r2, [r7, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <LCD_IO_ReadCmd8MultipleData8+0x190>
  while(Size--)
 8001ea6:	e06e      	b.n	8001f86 <LCD_IO_ReadCmd8MultipleData8+0x28e>
  {
    LCD_DATA8_READ(d);
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8001eaa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001eae:	619a      	str	r2, [r3, #24]
 8001eb0:	2012      	movs	r0, #18
 8001eb2:	f7fe fec0 	bl	8000c36 <LCD_IO_Delay>
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d010      	beq.n	8001ee4 <LCD_IO_ReadCmd8MultipleData8+0x1ec>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	75fb      	strb	r3, [r7, #23]
 8001ec6:	e00f      	b.n	8001ee8 <LCD_IO_ReadCmd8MultipleData8+0x1f0>
 8001ec8:	58020400 	.word	0x58020400
 8001ecc:	58020800 	.word	0x58020800
 8001ed0:	2400005a 	.word	0x2400005a
 8001ed4:	58021800 	.word	0x58021800
 8001ed8:	58020c00 	.word	0x58020c00
 8001edc:	58021000 	.word	0x58021000
 8001ee0:	58020000 	.word	0x58020000
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	75fb      	strb	r3, [r7, #23]
 8001ee8:	4b4d      	ldr	r3, [pc, #308]	; (8002020 <LCD_IO_ReadCmd8MultipleData8+0x328>)
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <LCD_IO_ReadCmd8MultipleData8+0x204>
 8001ef4:	7dfb      	ldrb	r3, [r7, #23]
 8001ef6:	f043 0302 	orr.w	r3, r3, #2
 8001efa:	75fb      	strb	r3, [r7, #23]
 8001efc:	4b49      	ldr	r3, [pc, #292]	; (8002024 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <LCD_IO_ReadCmd8MultipleData8+0x218>
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	f043 0304 	orr.w	r3, r3, #4
 8001f0e:	75fb      	strb	r3, [r7, #23]
 8001f10:	4b45      	ldr	r3, [pc, #276]	; (8002028 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <LCD_IO_ReadCmd8MultipleData8+0x22c>
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
 8001f1e:	f043 0308 	orr.w	r3, r3, #8
 8001f22:	75fb      	strb	r3, [r7, #23]
 8001f24:	4b40      	ldr	r3, [pc, #256]	; (8002028 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <LCD_IO_ReadCmd8MultipleData8+0x240>
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	f043 0310 	orr.w	r3, r3, #16
 8001f36:	75fb      	strb	r3, [r7, #23]
 8001f38:	4b3b      	ldr	r3, [pc, #236]	; (8002028 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <LCD_IO_ReadCmd8MultipleData8+0x254>
 8001f44:	7dfb      	ldrb	r3, [r7, #23]
 8001f46:	f043 0320 	orr.w	r3, r3, #32
 8001f4a:	75fb      	strb	r3, [r7, #23]
 8001f4c:	4b37      	ldr	r3, [pc, #220]	; (800202c <LCD_IO_ReadCmd8MultipleData8+0x334>)
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <LCD_IO_ReadCmd8MultipleData8+0x268>
 8001f58:	7dfb      	ldrb	r3, [r7, #23]
 8001f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f5e:	75fb      	strb	r3, [r7, #23]
 8001f60:	4b30      	ldr	r3, [pc, #192]	; (8002024 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <LCD_IO_ReadCmd8MultipleData8+0x27c>
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
 8001f6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f72:	75fb      	strb	r3, [r7, #23]
 8001f74:	4b2d      	ldr	r3, [pc, #180]	; (800202c <LCD_IO_ReadCmd8MultipleData8+0x334>)
 8001f76:	2208      	movs	r2, #8
 8001f78:	619a      	str	r2, [r3, #24]
    *pData = d;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	7dfa      	ldrb	r2, [r7, #23]
 8001f7e:	701a      	strb	r2, [r3, #0]
    pData++;
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	3301      	adds	r3, #1
 8001f84:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	1e5a      	subs	r2, r3, #1
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d18b      	bne.n	8001ea8 <LCD_IO_ReadCmd8MultipleData8+0x1b0>
  }
  LCD_CS_OFF;
 8001f90:	4b27      	ldr	r3, [pc, #156]	; (8002030 <LCD_IO_ReadCmd8MultipleData8+0x338>)
 8001f92:	2202      	movs	r2, #2
 8001f94:	619a      	str	r2, [r3, #24]
  LCD_DIRWRITE;
 8001f96:	4b23      	ldr	r3, [pc, #140]	; (8002024 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001f9e:	4a21      	ldr	r2, [pc, #132]	; (8002024 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 8001fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <LCD_IO_ReadCmd8MultipleData8+0x328>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001fae:	4a1c      	ldr	r2, [pc, #112]	; (8002020 <LCD_IO_ReadCmd8MultipleData8+0x328>)
 8001fb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001fbe:	4a19      	ldr	r2, [pc, #100]	; (8002024 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001fce:	4a16      	ldr	r2, [pc, #88]	; (8002028 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 8001fd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	4b14      	ldr	r3, [pc, #80]	; (8002028 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001fde:	4a12      	ldr	r2, [pc, #72]	; (8002028 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001fee:	4a0e      	ldr	r2, [pc, #56]	; (8002028 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 8001ff0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <LCD_IO_ReadCmd8MultipleData8+0x334>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ffe:	4a0b      	ldr	r2, [pc, #44]	; (800202c <LCD_IO_ReadCmd8MultipleData8+0x334>)
 8002000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	4b07      	ldr	r3, [pc, #28]	; (8002024 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 8002010:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002014:	6013      	str	r3, [r2, #0]
}
 8002016:	bf00      	nop
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	58020c00 	.word	0x58020c00
 8002024:	58021800 	.word	0x58021800
 8002028:	58021000 	.word	0x58021000
 800202c:	58020000 	.word	0x58020000
 8002030:	58020400 	.word	0x58020400

08002034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b08b      	sub	sp, #44	; 0x2c
 8002038:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800203a:	f000 ff6d 	bl	8002f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800203e:	f000 fa23 	bl	8002488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002042:	f000 fb13 	bl	800266c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002046:	f000 fabd 	bl	80025c4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800204a:	f000 fb07 	bl	800265c <MX_USB_OTG_HS_USB_Init>
  MX_TIM17_Init();
 800204e:	f000 fa91 	bl	8002574 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim17);
  ili9486_Init();
 8002052:	f7fe fb03 	bl	800065c <ili9486_Init>
  ili9486_DisplayOn();
 8002056:	f7fe facb 	bl	80005f0 <ili9486_DisplayOn>

  //BSP_LCD_Init();
  //BSP_LCD_DisplayOn();

  baaa[0] = ili9486_GetLcdPixelWidth();
 800205a:	f7fe fad3 	bl	8000604 <ili9486_GetLcdPixelWidth>
 800205e:	4603      	mov	r3, r0
 8002060:	461a      	mov	r2, r3
 8002062:	4b34      	ldr	r3, [pc, #208]	; (8002134 <main+0x100>)
 8002064:	801a      	strh	r2, [r3, #0]
  baaa[1] = ili9486_GetLcdPixelHeight();
 8002066:	f7fe fad6 	bl	8000616 <ili9486_GetLcdPixelHeight>
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
 800206e:	4b31      	ldr	r3, [pc, #196]	; (8002134 <main+0x100>)
 8002070:	805a      	strh	r2, [r3, #2]
  baaa[2] = ili9486_ReadID();
 8002072:	f7fe fad9 	bl	8000628 <ili9486_ReadID>
 8002076:	4603      	mov	r3, r0
 8002078:	461a      	mov	r2, r3
 800207a:	4b2e      	ldr	r3, [pc, #184]	; (8002134 <main+0x100>)
 800207c:	809a      	strh	r2, [r3, #4]
  ili9486_FillRect(0, 0, 480, 320, 0x0000);
 800207e:	2300      	movs	r3, #0
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002086:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800208a:	2100      	movs	r1, #0
 800208c:	2000      	movs	r0, #0
 800208e:	f7fe fc66 	bl	800095e <ili9486_FillRect>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GetTick() - timestamp_one >= 3000){
 8002092:	f000 ffc7 	bl	8003024 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	4b27      	ldr	r3, [pc, #156]	; (8002138 <main+0x104>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d908      	bls.n	80020b8 <main+0x84>
		  timestamp_one = HAL_GetTick();
 80020a6:	f000 ffbd 	bl	8003024 <HAL_GetTick>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4a22      	ldr	r2, [pc, #136]	; (8002138 <main+0x104>)
 80020ae:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80020b0:	2102      	movs	r1, #2
 80020b2:	4822      	ldr	r0, [pc, #136]	; (800213c <main+0x108>)
 80020b4:	f001 fabf 	bl	8003636 <HAL_GPIO_TogglePin>
	  }


	  if(HAL_GetTick() - timestamp_two >= 20){
 80020b8:	f000 ffb4 	bl	8003024 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b20      	ldr	r3, [pc, #128]	; (8002140 <main+0x10c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b13      	cmp	r3, #19
 80020c6:	d908      	bls.n	80020da <main+0xa6>
		  timestamp_two = HAL_GetTick();
 80020c8:	f000 ffac 	bl	8003024 <HAL_GetTick>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4a1c      	ldr	r2, [pc, #112]	; (8002140 <main+0x10c>)
 80020d0:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80020d2:	2101      	movs	r1, #1
 80020d4:	481b      	ldr	r0, [pc, #108]	; (8002144 <main+0x110>)
 80020d6:	f001 faae 	bl	8003636 <HAL_GPIO_TogglePin>
	  }

	  if(flag_blue == 4){
 80020da:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <main+0x114>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d102      	bne.n	80020e8 <main+0xb4>
		  //BSP_LCD_Clear(0xff00);
		  //BSP_LCD_DrawRect(50, 50, 50, 50);
		  flag_blue = 0;
 80020e2:	4b19      	ldr	r3, [pc, #100]	; (8002148 <main+0x114>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_blue == 3){
 80020e8:	4b17      	ldr	r3, [pc, #92]	; (8002148 <main+0x114>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	f040 8148 	bne.w	8002382 <main+0x34e>
	  		  ili9486_FillRect(0, 0, 480, 320, 0x0000);
 80020f2:	2300      	movs	r3, #0
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80020fa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80020fe:	2100      	movs	r1, #0
 8002100:	2000      	movs	r0, #0
 8002102:	f7fe fc2c 	bl	800095e <ili9486_FillRect>
	  		  ili9486_DrawRGBImage(50, 100, 128, 128, (uint16_t*)image_data_ImageoftestN2);
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <main+0x118>)
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	2280      	movs	r2, #128	; 0x80
 800210e:	2164      	movs	r1, #100	; 0x64
 8002110:	2032      	movs	r0, #50	; 0x32
 8002112:	f7fe fc87 	bl	8000a24 <ili9486_DrawRGBImage>
	  		  ili9486_DrawRGBImage(300, 100, 128, 90, (uint16_t*)image_data_owlflood);
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <main+0x11c>)
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	235a      	movs	r3, #90	; 0x5a
 800211c:	2280      	movs	r2, #128	; 0x80
 800211e:	2164      	movs	r1, #100	; 0x64
 8002120:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002124:	f7fe fc7e 	bl	8000a24 <ili9486_DrawRGBImage>


	  		  for(int i = 0; i < 40; i = i + 2){
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	e028      	b.n	8002180 <main+0x14c>
	  			  for(int j = 0; j < 60; j = j + 4)
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	e01f      	b.n	8002174 <main+0x140>
 8002134:	24000138 	.word	0x24000138
 8002138:	24000170 	.word	0x24000170
 800213c:	58021000 	.word	0x58021000
 8002140:	24000174 	.word	0x24000174
 8002144:	58020400 	.word	0x58020400
 8002148:	24000143 	.word	0x24000143
 800214c:	0800b368 	.word	0x0800b368
 8002150:	08013368 	.word	0x08013368
	  			ili9486_WritePixel(210 + i, 80 + j, cl_GREEN);
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	b29b      	uxth	r3, r3
 8002158:	33d2      	adds	r3, #210	; 0xd2
 800215a:	b298      	uxth	r0, r3
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	b29b      	uxth	r3, r3
 8002160:	3350      	adds	r3, #80	; 0x50
 8002162:	b29b      	uxth	r3, r3
 8002164:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002168:	4619      	mov	r1, r3
 800216a:	f7fe faef 	bl	800074c <ili9486_WritePixel>
	  			  for(int j = 0; j < 60; j = j + 4)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	3304      	adds	r3, #4
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	2b3b      	cmp	r3, #59	; 0x3b
 8002178:	ddec      	ble.n	8002154 <main+0x120>
	  		  for(int i = 0; i < 40; i = i + 2){
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3302      	adds	r3, #2
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2b27      	cmp	r3, #39	; 0x27
 8002184:	ddd3      	ble.n	800212e <main+0xfa>
	  		  }

	  		  ili9486_WriteChar(20, 50, "E", Font8, cl_RED, cl_GREEN);
 8002186:	4baa      	ldr	r3, [pc, #680]	; (8002430 <main+0x3fc>)
 8002188:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800218c:	9202      	str	r2, [sp, #8]
 800218e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002192:	9201      	str	r2, [sp, #4]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	9200      	str	r2, [sp, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4aa6      	ldr	r2, [pc, #664]	; (8002434 <main+0x400>)
 800219c:	2132      	movs	r1, #50	; 0x32
 800219e:	2014      	movs	r0, #20
 80021a0:	f7fe fc62 	bl	8000a68 <ili9486_WriteChar>
			  ili9486_WriteChar(50, 50, "E", Font12, cl_WHITE, cl_BLACK);
 80021a4:	4ba4      	ldr	r3, [pc, #656]	; (8002438 <main+0x404>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	9202      	str	r2, [sp, #8]
 80021aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ae:	9201      	str	r2, [sp, #4]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	9200      	str	r2, [sp, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a9f      	ldr	r2, [pc, #636]	; (8002434 <main+0x400>)
 80021b8:	2132      	movs	r1, #50	; 0x32
 80021ba:	2032      	movs	r0, #50	; 0x32
 80021bc:	f7fe fc54 	bl	8000a68 <ili9486_WriteChar>
			  ili9486_WriteChar(80, 50, "E", Font16, cl_BLUE, cl_CYAN);
 80021c0:	4b9e      	ldr	r3, [pc, #632]	; (800243c <main+0x408>)
 80021c2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80021c6:	9202      	str	r2, [sp, #8]
 80021c8:	221f      	movs	r2, #31
 80021ca:	9201      	str	r2, [sp, #4]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	9200      	str	r2, [sp, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a98      	ldr	r2, [pc, #608]	; (8002434 <main+0x400>)
 80021d4:	2132      	movs	r1, #50	; 0x32
 80021d6:	2050      	movs	r0, #80	; 0x50
 80021d8:	f7fe fc46 	bl	8000a68 <ili9486_WriteChar>
			  ili9486_WriteChar(110, 50, "E", Font20, cl_WHITE, cl_RED);
 80021dc:	4b98      	ldr	r3, [pc, #608]	; (8002440 <main+0x40c>)
 80021de:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80021e2:	9202      	str	r2, [sp, #8]
 80021e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021e8:	9201      	str	r2, [sp, #4]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	9200      	str	r2, [sp, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a90      	ldr	r2, [pc, #576]	; (8002434 <main+0x400>)
 80021f2:	2132      	movs	r1, #50	; 0x32
 80021f4:	206e      	movs	r0, #110	; 0x6e
 80021f6:	f7fe fc37 	bl	8000a68 <ili9486_WriteChar>
			  ili9486_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
 80021fa:	4b92      	ldr	r3, [pc, #584]	; (8002444 <main+0x410>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	9202      	str	r2, [sp, #8]
 8002200:	f64f 5220 	movw	r2, #64800	; 0xfd20
 8002204:	9201      	str	r2, [sp, #4]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	9200      	str	r2, [sp, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a89      	ldr	r2, [pc, #548]	; (8002434 <main+0x400>)
 800220e:	2132      	movs	r1, #50	; 0x32
 8002210:	208c      	movs	r0, #140	; 0x8c
 8002212:	f7fe fc29 	bl	8000a68 <ili9486_WriteChar>

			  //ili9486_FillRect(198, 30, 2, 30, cl_YELLOW);
			  ili9486_DrawVLine(cl_YELLOW, 200, 40, 24);
 8002216:	2318      	movs	r3, #24
 8002218:	2228      	movs	r2, #40	; 0x28
 800221a:	21c8      	movs	r1, #200	; 0xc8
 800221c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002220:	f7fe fb46 	bl	80008b0 <ili9486_DrawVLine>
			  ili9486_DrawVLine(cl_YELLOW, 225, 40, 24);
 8002224:	2318      	movs	r3, #24
 8002226:	2228      	movs	r2, #40	; 0x28
 8002228:	21e1      	movs	r1, #225	; 0xe1
 800222a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800222e:	f7fe fb3f 	bl	80008b0 <ili9486_DrawVLine>
			  //// Font24 @2664 E
			  ili_fonttest(200, 40, "A", Font24, cl_WHITE);
 8002232:	4b84      	ldr	r3, [pc, #528]	; (8002444 <main+0x410>)
 8002234:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002238:	9201      	str	r2, [sp, #4]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	9200      	str	r2, [sp, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a81      	ldr	r2, [pc, #516]	; (8002448 <main+0x414>)
 8002242:	2128      	movs	r1, #40	; 0x28
 8002244:	20c8      	movs	r0, #200	; 0xc8
 8002246:	f000 fb85 	bl	8002954 <ili_fonttest>
			  ili_fonttest(225, 40, "B", Font24, cl_WHITE);
 800224a:	4b7e      	ldr	r3, [pc, #504]	; (8002444 <main+0x410>)
 800224c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002250:	9201      	str	r2, [sp, #4]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	9200      	str	r2, [sp, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a7c      	ldr	r2, [pc, #496]	; (800244c <main+0x418>)
 800225a:	2128      	movs	r1, #40	; 0x28
 800225c:	20e1      	movs	r0, #225	; 0xe1
 800225e:	f000 fb79 	bl	8002954 <ili_fonttest>
			  ili_fonttest(250, 40, "C", Font24, cl_WHITE);
 8002262:	4b78      	ldr	r3, [pc, #480]	; (8002444 <main+0x410>)
 8002264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002268:	9201      	str	r2, [sp, #4]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	9200      	str	r2, [sp, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a77      	ldr	r2, [pc, #476]	; (8002450 <main+0x41c>)
 8002272:	2128      	movs	r1, #40	; 0x28
 8002274:	20fa      	movs	r0, #250	; 0xfa
 8002276:	f000 fb6d 	bl	8002954 <ili_fonttest>
			  ili_fonttest(275, 40, "D", Font24, cl_WHITE);
 800227a:	4b72      	ldr	r3, [pc, #456]	; (8002444 <main+0x410>)
 800227c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002280:	9201      	str	r2, [sp, #4]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	9200      	str	r2, [sp, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a72      	ldr	r2, [pc, #456]	; (8002454 <main+0x420>)
 800228a:	2128      	movs	r1, #40	; 0x28
 800228c:	f240 1013 	movw	r0, #275	; 0x113
 8002290:	f000 fb60 	bl	8002954 <ili_fonttest>

			  ili_fonttest(300, 40, "A", Font8, cl_WHITE);
 8002294:	4b66      	ldr	r3, [pc, #408]	; (8002430 <main+0x3fc>)
 8002296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800229a:	9201      	str	r2, [sp, #4]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	9200      	str	r2, [sp, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a69      	ldr	r2, [pc, #420]	; (8002448 <main+0x414>)
 80022a4:	2128      	movs	r1, #40	; 0x28
 80022a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80022aa:	f000 fb53 	bl	8002954 <ili_fonttest>
			  ili_fonttest(325, 40, "B", Font12, cl_WHITE);
 80022ae:	4b62      	ldr	r3, [pc, #392]	; (8002438 <main+0x404>)
 80022b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b4:	9201      	str	r2, [sp, #4]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	9200      	str	r2, [sp, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a63      	ldr	r2, [pc, #396]	; (800244c <main+0x418>)
 80022be:	2128      	movs	r1, #40	; 0x28
 80022c0:	f240 1045 	movw	r0, #325	; 0x145
 80022c4:	f000 fb46 	bl	8002954 <ili_fonttest>
			  ili_fonttest(350, 40, "C", Font16, cl_WHITE);
 80022c8:	4b5c      	ldr	r3, [pc, #368]	; (800243c <main+0x408>)
 80022ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ce:	9201      	str	r2, [sp, #4]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	9200      	str	r2, [sp, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a5e      	ldr	r2, [pc, #376]	; (8002450 <main+0x41c>)
 80022d8:	2128      	movs	r1, #40	; 0x28
 80022da:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80022de:	f000 fb39 	bl	8002954 <ili_fonttest>
			  ili_fonttest(375, 40, "D", Font20, cl_WHITE);
 80022e2:	4b57      	ldr	r3, [pc, #348]	; (8002440 <main+0x40c>)
 80022e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022e8:	9201      	str	r2, [sp, #4]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	9200      	str	r2, [sp, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a58      	ldr	r2, [pc, #352]	; (8002454 <main+0x420>)
 80022f2:	2128      	movs	r1, #40	; 0x28
 80022f4:	f240 1077 	movw	r0, #375	; 0x177
 80022f8:	f000 fb2c 	bl	8002954 <ili_fonttest>

			  ili9486_WriteString(20, 300, "KaleAR Terra", Font20, cl_WHITE, cl_BLACK);
 80022fc:	4b50      	ldr	r3, [pc, #320]	; (8002440 <main+0x40c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	9202      	str	r2, [sp, #8]
 8002302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002306:	9201      	str	r2, [sp, #4]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	9200      	str	r2, [sp, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a52      	ldr	r2, [pc, #328]	; (8002458 <main+0x424>)
 8002310:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002314:	2014      	movs	r0, #20
 8002316:	f7fe fc41 	bl	8000b9c <ili9486_WriteString>
			  ili_texttest(200, 200, "Helios Terra Renai Kaliber Barx Maxon 129035"
 800231a:	4b49      	ldr	r3, [pc, #292]	; (8002440 <main+0x40c>)
 800231c:	2200      	movs	r2, #0
 800231e:	9202      	str	r2, [sp, #8]
 8002320:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002324:	9201      	str	r2, [sp, #4]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	9200      	str	r2, [sp, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a4b      	ldr	r2, [pc, #300]	; (800245c <main+0x428>)
 800232e:	21c8      	movs	r1, #200	; 0xc8
 8002330:	20c8      	movs	r0, #200	; 0xc8
 8002332:	f000 fbc3 	bl	8002abc <ili_texttest>
					  " __ --== + &&6.. [ ggg ]??? Rhivalia DIAR Barvarrian"
					  " vicar nexus iICCTVS \ / %%% $ *(!@#$%^&*)_{} "
					  , Font20, cl_GREEN, cl_BLACK);
			  char* aa = "A";
 8002336:	4b44      	ldr	r3, [pc, #272]	; (8002448 <main+0x414>)
 8002338:	60fb      	str	r3, [r7, #12]
			  txtbuf[14] = *aa;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	781a      	ldrb	r2, [r3, #0]
 800233e:	4b48      	ldr	r3, [pc, #288]	; (8002460 <main+0x42c>)
 8002340:	739a      	strb	r2, [r3, #14]

			  ili_fonttest(400, 30, aa, Font24, cl_WHITE); // A  <- output
 8002342:	4b40      	ldr	r3, [pc, #256]	; (8002444 <main+0x410>)
 8002344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002348:	9201      	str	r2, [sp, #4]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	9200      	str	r2, [sp, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	211e      	movs	r1, #30
 8002354:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002358:	f000 fafc 	bl	8002954 <ili_fonttest>
			  ili_fonttest(420, 30, *aa, Font24, cl_WHITE); // N  <- output
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	4b38      	ldr	r3, [pc, #224]	; (8002444 <main+0x410>)
 8002364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002368:	9201      	str	r2, [sp, #4]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	9200      	str	r2, [sp, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	460a      	mov	r2, r1
 8002372:	211e      	movs	r1, #30
 8002374:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8002378:	f000 faec 	bl	8002954 <ili_fonttest>

	  		  flag_blue = 0; // comment this to forever loop
 800237c:	4b39      	ldr	r3, [pc, #228]	; (8002464 <main+0x430>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
	  	  }

	  if(flag_blue == 1){
 8002382:	4b38      	ldr	r3, [pc, #224]	; (8002464 <main+0x430>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d104      	bne.n	8002394 <main+0x360>
		  ili_screen_1();
 800238a:	f000 fa91 	bl	80028b0 <ili_screen_1>
		  flag_blue = 0;
 800238e:	4b35      	ldr	r3, [pc, #212]	; (8002464 <main+0x430>)
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]

	  }

	  if(flag_blue == 2){
 8002394:	4b33      	ldr	r3, [pc, #204]	; (8002464 <main+0x430>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b02      	cmp	r3, #2
 800239a:	f47f ae7a 	bne.w	8002092 <main+0x5e>
		  //// Running Box ////
		  if(ff == 1){
 800239e:	4b32      	ldr	r3, [pc, #200]	; (8002468 <main+0x434>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d10d      	bne.n	80023c2 <main+0x38e>
			  ili9486_FillRect(0, 0, 480, 320, 0xF792); // screen
 80023a6:	f24f 7392 	movw	r3, #63378	; 0xf792
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80023b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80023b4:	2100      	movs	r1, #0
 80023b6:	2000      	movs	r0, #0
 80023b8:	f7fe fad1 	bl	800095e <ili9486_FillRect>
			  ff = 0;
 80023bc:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <main+0x434>)
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
		  }
		  int ratte = 1;
 80023c2:	2301      	movs	r3, #1
 80023c4:	60bb      	str	r3, [r7, #8]
		  int sizo = 30;
 80023c6:	231e      	movs	r3, #30
 80023c8:	607b      	str	r3, [r7, #4]
		  int offs = 140;
 80023ca:	238c      	movs	r3, #140	; 0x8c
 80023cc:	603b      	str	r3, [r7, #0]
		  static uint16_t xsh = 0;
		  ili9486_FillRect(xsh, offs, ratte ,sizo, 0xF792);
 80023ce:	4b27      	ldr	r3, [pc, #156]	; (800246c <main+0x438>)
 80023d0:	8818      	ldrh	r0, [r3, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	b299      	uxth	r1, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	b29a      	uxth	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	f24f 7492 	movw	r4, #63378	; 0xf792
 80023e2:	9400      	str	r4, [sp, #0]
 80023e4:	f7fe fabb 	bl	800095e <ili9486_FillRect>
		  xsh += ratte;
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	4b1f      	ldr	r3, [pc, #124]	; (800246c <main+0x438>)
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	4413      	add	r3, r2
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	4b1d      	ldr	r3, [pc, #116]	; (800246c <main+0x438>)
 80023f6:	801a      	strh	r2, [r3, #0]
		  ili9486_FillRect(xsh, offs, sizo, sizo, 0x0410); //// box
 80023f8:	4b1c      	ldr	r3, [pc, #112]	; (800246c <main+0x438>)
 80023fa:	8818      	ldrh	r0, [r3, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	b299      	uxth	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	b29a      	uxth	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	b29b      	uxth	r3, r3
 8002408:	f44f 6482 	mov.w	r4, #1040	; 0x410
 800240c:	9400      	str	r4, [sp, #0]
 800240e:	f7fe faa6 	bl	800095e <ili9486_FillRect>
		  if(xsh >= 480){ // clear
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <main+0x438>)
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800241a:	f4ff ae3a 	bcc.w	8002092 <main+0x5e>
			  ili9486_FillRect(xsh, offs, sizo, sizo, 0xF792);
 800241e:	4b13      	ldr	r3, [pc, #76]	; (800246c <main+0x438>)
 8002420:	8818      	ldrh	r0, [r3, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	b299      	uxth	r1, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	b29a      	uxth	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	e020      	b.n	8002470 <main+0x43c>
 800242e:	bf00      	nop
 8002430:	24000020 	.word	0x24000020
 8002434:	08007590 	.word	0x08007590
 8002438:	24000000 	.word	0x24000000
 800243c:	24000008 	.word	0x24000008
 8002440:	24000010 	.word	0x24000010
 8002444:	24000018 	.word	0x24000018
 8002448:	08007594 	.word	0x08007594
 800244c:	08007598 	.word	0x08007598
 8002450:	0800759c 	.word	0x0800759c
 8002454:	080075a0 	.word	0x080075a0
 8002458:	080075a4 	.word	0x080075a4
 800245c:	080075b4 	.word	0x080075b4
 8002460:	2400015c 	.word	0x2400015c
 8002464:	24000143 	.word	0x24000143
 8002468:	24000144 	.word	0x24000144
 800246c:	24000180 	.word	0x24000180
 8002470:	b29b      	uxth	r3, r3
 8002472:	f24f 7492 	movw	r4, #63378	; 0xf792
 8002476:	9400      	str	r4, [sp, #0]
 8002478:	f7fe fa71 	bl	800095e <ili9486_FillRect>
			  xsh = 0;
 800247c:	4b01      	ldr	r3, [pc, #4]	; (8002484 <main+0x450>)
 800247e:	2200      	movs	r2, #0
 8002480:	801a      	strh	r2, [r3, #0]
	  if(HAL_GetTick() - timestamp_one >= 3000){
 8002482:	e606      	b.n	8002092 <main+0x5e>
 8002484:	24000180 	.word	0x24000180

08002488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b09c      	sub	sp, #112	; 0x70
 800248c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800248e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002492:	224c      	movs	r2, #76	; 0x4c
 8002494:	2100      	movs	r1, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f005 f808 	bl	80074ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	2220      	movs	r2, #32
 80024a0:	2100      	movs	r1, #0
 80024a2:	4618      	mov	r0, r3
 80024a4:	f005 f802 	bl	80074ac <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80024a8:	4b30      	ldr	r3, [pc, #192]	; (800256c <SystemClock_Config+0xe4>)
 80024aa:	f04f 32ff 	mov.w	r2, #4294967295
 80024ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80024b2:	2004      	movs	r0, #4
 80024b4:	f001 f8f4 	bl	80036a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80024b8:	2300      	movs	r3, #0
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	4b2c      	ldr	r3, [pc, #176]	; (8002570 <SystemClock_Config+0xe8>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	4a2b      	ldr	r2, [pc, #172]	; (8002570 <SystemClock_Config+0xe8>)
 80024c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024c6:	6193      	str	r3, [r2, #24]
 80024c8:	4b29      	ldr	r3, [pc, #164]	; (8002570 <SystemClock_Config+0xe8>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024d0:	603b      	str	r3, [r7, #0]
 80024d2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80024d4:	bf00      	nop
 80024d6:	4b26      	ldr	r3, [pc, #152]	; (8002570 <SystemClock_Config+0xe8>)
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024e2:	d1f8      	bne.n	80024d6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80024e4:	2321      	movs	r3, #33	; 0x21
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80024e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80024ee:	2301      	movs	r3, #1
 80024f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024f2:	2302      	movs	r3, #2
 80024f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024f6:	2302      	movs	r3, #2
 80024f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80024fa:	2301      	movs	r3, #1
 80024fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 80024fe:	2346      	movs	r3, #70	; 0x46
 8002500:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002502:	2302      	movs	r3, #2
 8002504:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002506:	2304      	movs	r3, #4
 8002508:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800250a:	2302      	movs	r3, #2
 800250c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800250e:	230c      	movs	r3, #12
 8002510:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002512:	2300      	movs	r3, #0
 8002514:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800251a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800251e:	4618      	mov	r0, r3
 8002520:	f001 f918 	bl	8003754 <HAL_RCC_OscConfig>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800252a:	f000 fb69 	bl	8002c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800252e:	233f      	movs	r3, #63	; 0x3f
 8002530:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002532:	2303      	movs	r3, #3
 8002534:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800253e:	2340      	movs	r3, #64	; 0x40
 8002540:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002542:	2340      	movs	r3, #64	; 0x40
 8002544:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800254a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800254c:	2340      	movs	r3, #64	; 0x40
 800254e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	2107      	movs	r1, #7
 8002554:	4618      	mov	r0, r3
 8002556:	f001 fd01 	bl	8003f5c <HAL_RCC_ClockConfig>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8002560:	f000 fb4e 	bl	8002c00 <Error_Handler>
  }
}
 8002564:	bf00      	nop
 8002566:	3770      	adds	r7, #112	; 0x70
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	58024400 	.word	0x58024400
 8002570:	58024800 	.word	0x58024800

08002574 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002578:	4b10      	ldr	r3, [pc, #64]	; (80025bc <MX_TIM17_Init+0x48>)
 800257a:	4a11      	ldr	r2, [pc, #68]	; (80025c0 <MX_TIM17_Init+0x4c>)
 800257c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 279;
 800257e:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <MX_TIM17_Init+0x48>)
 8002580:	f240 1217 	movw	r2, #279	; 0x117
 8002584:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <MX_TIM17_Init+0x48>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <MX_TIM17_Init+0x48>)
 800258e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002592:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <MX_TIM17_Init+0x48>)
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <MX_TIM17_Init+0x48>)
 800259c:	2200      	movs	r2, #0
 800259e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <MX_TIM17_Init+0x48>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80025a6:	4805      	ldr	r0, [pc, #20]	; (80025bc <MX_TIM17_Init+0x48>)
 80025a8:	f003 fb92 	bl	8005cd0 <HAL_TIM_Base_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80025b2:	f000 fb25 	bl	8002c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	2400005c 	.word	0x2400005c
 80025c0:	40014800 	.word	0x40014800

080025c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025c8:	4b22      	ldr	r3, [pc, #136]	; (8002654 <MX_USART3_UART_Init+0x90>)
 80025ca:	4a23      	ldr	r2, [pc, #140]	; (8002658 <MX_USART3_UART_Init+0x94>)
 80025cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80025ce:	4b21      	ldr	r3, [pc, #132]	; (8002654 <MX_USART3_UART_Init+0x90>)
 80025d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025d6:	4b1f      	ldr	r3, [pc, #124]	; (8002654 <MX_USART3_UART_Init+0x90>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025dc:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <MX_USART3_UART_Init+0x90>)
 80025de:	2200      	movs	r2, #0
 80025e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025e2:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <MX_USART3_UART_Init+0x90>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025e8:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <MX_USART3_UART_Init+0x90>)
 80025ea:	220c      	movs	r2, #12
 80025ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ee:	4b19      	ldr	r3, [pc, #100]	; (8002654 <MX_USART3_UART_Init+0x90>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f4:	4b17      	ldr	r3, [pc, #92]	; (8002654 <MX_USART3_UART_Init+0x90>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025fa:	4b16      	ldr	r3, [pc, #88]	; (8002654 <MX_USART3_UART_Init+0x90>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002600:	4b14      	ldr	r3, [pc, #80]	; (8002654 <MX_USART3_UART_Init+0x90>)
 8002602:	2200      	movs	r2, #0
 8002604:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002606:	4b13      	ldr	r3, [pc, #76]	; (8002654 <MX_USART3_UART_Init+0x90>)
 8002608:	2200      	movs	r2, #0
 800260a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800260c:	4811      	ldr	r0, [pc, #68]	; (8002654 <MX_USART3_UART_Init+0x90>)
 800260e:	f003 fdb5 	bl	800617c <HAL_UART_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002618:	f000 faf2 	bl	8002c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800261c:	2100      	movs	r1, #0
 800261e:	480d      	ldr	r0, [pc, #52]	; (8002654 <MX_USART3_UART_Init+0x90>)
 8002620:	f004 fe56 	bl	80072d0 <HAL_UARTEx_SetTxFifoThreshold>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800262a:	f000 fae9 	bl	8002c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800262e:	2100      	movs	r1, #0
 8002630:	4808      	ldr	r0, [pc, #32]	; (8002654 <MX_USART3_UART_Init+0x90>)
 8002632:	f004 fe8b 	bl	800734c <HAL_UARTEx_SetRxFifoThreshold>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800263c:	f000 fae0 	bl	8002c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002640:	4804      	ldr	r0, [pc, #16]	; (8002654 <MX_USART3_UART_Init+0x90>)
 8002642:	f004 fe0c 	bl	800725e <HAL_UARTEx_DisableFifoMode>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800264c:	f000 fad8 	bl	8002c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}
 8002654:	240000a8 	.word	0x240000a8
 8002658:	40004800 	.word	0x40004800

0800265c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08e      	sub	sp, #56	; 0x38
 8002670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	605a      	str	r2, [r3, #4]
 800267c:	609a      	str	r2, [r3, #8]
 800267e:	60da      	str	r2, [r3, #12]
 8002680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002682:	4b84      	ldr	r3, [pc, #528]	; (8002894 <MX_GPIO_Init+0x228>)
 8002684:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002688:	4a82      	ldr	r2, [pc, #520]	; (8002894 <MX_GPIO_Init+0x228>)
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002692:	4b80      	ldr	r3, [pc, #512]	; (8002894 <MX_GPIO_Init+0x228>)
 8002694:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	623b      	str	r3, [r7, #32]
 800269e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026a0:	4b7c      	ldr	r3, [pc, #496]	; (8002894 <MX_GPIO_Init+0x228>)
 80026a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80026a6:	4a7b      	ldr	r2, [pc, #492]	; (8002894 <MX_GPIO_Init+0x228>)
 80026a8:	f043 0320 	orr.w	r3, r3, #32
 80026ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80026b0:	4b78      	ldr	r3, [pc, #480]	; (8002894 <MX_GPIO_Init+0x228>)
 80026b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	61fb      	str	r3, [r7, #28]
 80026bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026be:	4b75      	ldr	r3, [pc, #468]	; (8002894 <MX_GPIO_Init+0x228>)
 80026c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80026c4:	4a73      	ldr	r2, [pc, #460]	; (8002894 <MX_GPIO_Init+0x228>)
 80026c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80026ce:	4b71      	ldr	r3, [pc, #452]	; (8002894 <MX_GPIO_Init+0x228>)
 80026d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80026d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d8:	61bb      	str	r3, [r7, #24]
 80026da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026dc:	4b6d      	ldr	r3, [pc, #436]	; (8002894 <MX_GPIO_Init+0x228>)
 80026de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80026e2:	4a6c      	ldr	r2, [pc, #432]	; (8002894 <MX_GPIO_Init+0x228>)
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80026ec:	4b69      	ldr	r3, [pc, #420]	; (8002894 <MX_GPIO_Init+0x228>)
 80026ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026fa:	4b66      	ldr	r3, [pc, #408]	; (8002894 <MX_GPIO_Init+0x228>)
 80026fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002700:	4a64      	ldr	r2, [pc, #400]	; (8002894 <MX_GPIO_Init+0x228>)
 8002702:	f043 0308 	orr.w	r3, r3, #8
 8002706:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800270a:	4b62      	ldr	r3, [pc, #392]	; (8002894 <MX_GPIO_Init+0x228>)
 800270c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002718:	4b5e      	ldr	r3, [pc, #376]	; (8002894 <MX_GPIO_Init+0x228>)
 800271a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800271e:	4a5d      	ldr	r2, [pc, #372]	; (8002894 <MX_GPIO_Init+0x228>)
 8002720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002724:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002728:	4b5a      	ldr	r3, [pc, #360]	; (8002894 <MX_GPIO_Init+0x228>)
 800272a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800272e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002736:	4b57      	ldr	r3, [pc, #348]	; (8002894 <MX_GPIO_Init+0x228>)
 8002738:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800273c:	4a55      	ldr	r2, [pc, #340]	; (8002894 <MX_GPIO_Init+0x228>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002746:	4b53      	ldr	r3, [pc, #332]	; (8002894 <MX_GPIO_Init+0x228>)
 8002748:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002754:	4b4f      	ldr	r3, [pc, #316]	; (8002894 <MX_GPIO_Init+0x228>)
 8002756:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800275a:	4a4e      	ldr	r2, [pc, #312]	; (8002894 <MX_GPIO_Init+0x228>)
 800275c:	f043 0310 	orr.w	r3, r3, #16
 8002760:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002764:	4b4b      	ldr	r3, [pc, #300]	; (8002894 <MX_GPIO_Init+0x228>)
 8002766:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002772:	2200      	movs	r2, #0
 8002774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002778:	4847      	ldr	r0, [pc, #284]	; (8002898 <MX_GPIO_Init+0x22c>)
 800277a:	f000 ff43 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800277e:	2200      	movs	r2, #0
 8002780:	f244 0101 	movw	r1, #16385	; 0x4001
 8002784:	4845      	ldr	r0, [pc, #276]	; (800289c <MX_GPIO_Init+0x230>)
 8002786:	f000 ff3d 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800278a:	2200      	movs	r2, #0
 800278c:	2102      	movs	r1, #2
 800278e:	4844      	ldr	r0, [pc, #272]	; (80028a0 <MX_GPIO_Init+0x234>)
 8002790:	f000 ff38 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800279a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800279e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a8:	4619      	mov	r1, r3
 80027aa:	483e      	ldr	r0, [pc, #248]	; (80028a4 <MX_GPIO_Init+0x238>)
 80027ac:	f000 fd7a 	bl	80032a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80027b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b6:	2301      	movs	r3, #1
 80027b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027be:	2300      	movs	r3, #0
 80027c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80027c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c6:	4619      	mov	r1, r3
 80027c8:	4833      	ldr	r0, [pc, #204]	; (8002898 <MX_GPIO_Init+0x22c>)
 80027ca:	f000 fd6b 	bl	80032a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80027ce:	f244 0301 	movw	r3, #16385	; 0x4001
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d4:	2301      	movs	r3, #1
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027dc:	2300      	movs	r3, #0
 80027de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e4:	4619      	mov	r1, r3
 80027e6:	482d      	ldr	r0, [pc, #180]	; (800289c <MX_GPIO_Init+0x230>)
 80027e8:	f000 fd5c 	bl	80032a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80027fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027fe:	4619      	mov	r1, r3
 8002800:	4829      	ldr	r0, [pc, #164]	; (80028a8 <MX_GPIO_Init+0x23c>)
 8002802:	f000 fd4f 	bl	80032a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8002806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800280c:	2300      	movs	r3, #0
 800280e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002818:	4619      	mov	r1, r3
 800281a:	4824      	ldr	r0, [pc, #144]	; (80028ac <MX_GPIO_Init+0x240>)
 800281c:	f000 fd42 	bl	80032a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8002820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	2300      	movs	r3, #0
 8002830:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8002832:	230a      	movs	r3, #10
 8002834:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8002836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283a:	4619      	mov	r1, r3
 800283c:	481b      	ldr	r0, [pc, #108]	; (80028ac <MX_GPIO_Init+0x240>)
 800283e:	f000 fd31 	bl	80032a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8002842:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002848:	2302      	movs	r3, #2
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002850:	2300      	movs	r3, #0
 8002852:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002858:	4619      	mov	r1, r3
 800285a:	4814      	ldr	r0, [pc, #80]	; (80028ac <MX_GPIO_Init+0x240>)
 800285c:	f000 fd22 	bl	80032a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002860:	2302      	movs	r3, #2
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002864:	2301      	movs	r3, #1
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286c:	2300      	movs	r3, #0
 800286e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002874:	4619      	mov	r1, r3
 8002876:	480a      	ldr	r0, [pc, #40]	; (80028a0 <MX_GPIO_Init+0x234>)
 8002878:	f000 fd14 	bl	80032a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800287c:	2200      	movs	r2, #0
 800287e:	2100      	movs	r1, #0
 8002880:	2028      	movs	r0, #40	; 0x28
 8002882:	f000 fcda 	bl	800323a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002886:	2028      	movs	r0, #40	; 0x28
 8002888:	f000 fcf1 	bl	800326e <HAL_NVIC_EnableIRQ>

}
 800288c:	bf00      	nop
 800288e:	3738      	adds	r7, #56	; 0x38
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	58024400 	.word	0x58024400
 8002898:	58021400 	.word	0x58021400
 800289c:	58020400 	.word	0x58020400
 80028a0:	58021000 	.word	0x58021000
 80028a4:	58020800 	.word	0x58020800
 80028a8:	58021800 	.word	0x58021800
 80028ac:	58020000 	.word	0x58020000

080028b0 <ili_screen_1>:

/* USER CODE BEGIN 4 */
void ili_screen_1(){
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af02      	add	r7, sp, #8
	  ili9486_FillRect(0, 0, 480, 320, 0xffff);  // White BG
 80028b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80028c0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80028c4:	2100      	movs	r1, #0
 80028c6:	2000      	movs	r0, #0
 80028c8:	f7fe f849 	bl	800095e <ili9486_FillRect>

	  ili9486_FillRect(30, 30, 100, 100, 0xF8E0); // Red
 80028cc:	f64f 03e0 	movw	r3, #63712	; 0xf8e0
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	2364      	movs	r3, #100	; 0x64
 80028d4:	2264      	movs	r2, #100	; 0x64
 80028d6:	211e      	movs	r1, #30
 80028d8:	201e      	movs	r0, #30
 80028da:	f7fe f840 	bl	800095e <ili9486_FillRect>
	  ili9486_FillRect(150, 30, 100, 100, 0x07E0); // Green RGB565
 80028de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	2364      	movs	r3, #100	; 0x64
 80028e6:	2264      	movs	r2, #100	; 0x64
 80028e8:	211e      	movs	r1, #30
 80028ea:	2096      	movs	r0, #150	; 0x96
 80028ec:	f7fe f837 	bl	800095e <ili9486_FillRect>
	  ili9486_FillRect(270, 30, 100, 100, 0x001F); // Blue
 80028f0:	231f      	movs	r3, #31
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2364      	movs	r3, #100	; 0x64
 80028f6:	2264      	movs	r2, #100	; 0x64
 80028f8:	211e      	movs	r1, #30
 80028fa:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80028fe:	f7fe f82e 	bl	800095e <ili9486_FillRect>

	  ili9486_FillRect(30, 160,  100, 100, cl_CYAN); // C0x07FF
 8002902:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	2364      	movs	r3, #100	; 0x64
 800290a:	2264      	movs	r2, #100	; 0x64
 800290c:	21a0      	movs	r1, #160	; 0xa0
 800290e:	201e      	movs	r0, #30
 8002910:	f7fe f825 	bl	800095e <ili9486_FillRect>
	  ili9486_FillRect(150, 160, 100, 100, cl_MAGENTA); // M 0xF81F
 8002914:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2364      	movs	r3, #100	; 0x64
 800291c:	2264      	movs	r2, #100	; 0x64
 800291e:	21a0      	movs	r1, #160	; 0xa0
 8002920:	2096      	movs	r0, #150	; 0x96
 8002922:	f7fe f81c 	bl	800095e <ili9486_FillRect>
	  ili9486_FillRect(270, 160, 100, 100, cl_YELLOW); // Y0xFFE0
 8002926:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2364      	movs	r3, #100	; 0x64
 800292e:	2264      	movs	r2, #100	; 0x64
 8002930:	21a0      	movs	r1, #160	; 0xa0
 8002932:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8002936:	f7fe f812 	bl	800095e <ili9486_FillRect>
	  ili9486_FillRect(390, 30, 70, 230, cl_BLACK); // K
 800293a:	2300      	movs	r3, #0
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	23e6      	movs	r3, #230	; 0xe6
 8002940:	2246      	movs	r2, #70	; 0x46
 8002942:	211e      	movs	r1, #30
 8002944:	f44f 70c3 	mov.w	r0, #390	; 0x186
 8002948:	f7fe f809 	bl	800095e <ili9486_FillRect>
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <ili_fonttest>:

void ili_fonttest(uint16_t Xpo, uint16_t Ypo, char *chr,sFONT fonto, uint16_t RGB_Coder){
 8002954:	b082      	sub	sp, #8
 8002956:	b580      	push	{r7, lr}
 8002958:	b088      	sub	sp, #32
 800295a:	af00      	add	r7, sp, #0
 800295c:	60ba      	str	r2, [r7, #8]
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002960:	4603      	mov	r3, r0
 8002962:	81fb      	strh	r3, [r7, #14]
 8002964:	460b      	mov	r3, r1
 8002966:	81bb      	strh	r3, [r7, #12]

	rowbox = ceilf((float)(fonto.Width) / 8);
 8002968:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800296a:	ee07 3a90 	vmov	s15, r3
 800296e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002972:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002976:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800297a:	eeb0 0a47 	vmov.f32	s0, s14
 800297e:	f004 fd9d 	bl	80074bc <ceilf>
 8002982:	eef0 7a40 	vmov.f32	s15, s0
 8002986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800298a:	edc7 7a01 	vstr	s15, [r7, #4]
 800298e:	793b      	ldrb	r3, [r7, #4]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4b44      	ldr	r3, [pc, #272]	; (8002aa4 <ili_fonttest+0x150>)
 8002994:	701a      	strb	r2, [r3, #0]
	//// choose MSB check pos for each font size
	cliff = 0x80 << (8 * (rowbox - 1));
 8002996:	4b43      	ldr	r3, [pc, #268]	; (8002aa4 <ili_fonttest+0x150>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	3b01      	subs	r3, #1
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	2280      	movs	r2, #128	; 0x80
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b40      	ldr	r3, [pc, #256]	; (8002aa8 <ili_fonttest+0x154>)
 80029a8:	601a      	str	r2, [r3, #0]
	//rowbox = (fonto.Width / 8) + 1;

	for(int i = 0; i < fonto.Height; i++){
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	e06c      	b.n	8002a8a <ili_fonttest+0x136>
		//b = fonto.table[((chr - 31) * fonto.Height * rowbox)+ (i*rowbox)];
		chpos = (int)(*chr) - 32;
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b20      	subs	r3, #32
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	4b3c      	ldr	r3, [pc, #240]	; (8002aac <ili_fonttest+0x158>)
 80029bc:	801a      	strh	r2, [r3, #0]
		bfpos = ((int)(*chr) - 32) * fonto.Height * rowbox;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	3b20      	subs	r3, #32
 80029c4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80029c6:	fb02 f303 	mul.w	r3, r2, r3
 80029ca:	4a36      	ldr	r2, [pc, #216]	; (8002aa4 <ili_fonttest+0x150>)
 80029cc:	7812      	ldrb	r2, [r2, #0]
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	4b36      	ldr	r3, [pc, #216]	; (8002ab0 <ili_fonttest+0x15c>)
 80029d6:	601a      	str	r2, [r3, #0]

		hop = 0;
 80029d8:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <ili_fonttest+0x160>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
		for(int k = 0; k < rowbox; k++){
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	e027      	b.n	8002a34 <ili_fonttest+0xe0>
			//// Works
			buu32.b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 80029e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	7812      	ldrb	r2, [r2, #0]
 80029ea:	3a20      	subs	r2, #32
 80029ec:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80029ee:	fb01 f202 	mul.w	r2, r1, r2
 80029f2:	492c      	ldr	r1, [pc, #176]	; (8002aa4 <ili_fonttest+0x150>)
 80029f4:	7809      	ldrb	r1, [r1, #0]
 80029f6:	fb02 f101 	mul.w	r1, r2, r1
 80029fa:	4a2a      	ldr	r2, [pc, #168]	; (8002aa4 <ili_fonttest+0x150>)
 80029fc:	7812      	ldrb	r2, [r2, #0]
 80029fe:	4610      	mov	r0, r2
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	fb00 f202 	mul.w	r2, r0, r2
 8002a06:	4411      	add	r1, r2
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	440a      	add	r2, r1
 8002a0c:	4413      	add	r3, r2
 8002a0e:	7819      	ldrb	r1, [r3, #0]
 8002a10:	4a29      	ldr	r2, [pc, #164]	; (8002ab8 <ili_fonttest+0x164>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	4413      	add	r3, r2
 8002a16:	460a      	mov	r2, r1
 8002a18:	701a      	strb	r2, [r3, #0]
			hop = (hop << 8) + buu32.b8[k];
 8002a1a:	4b26      	ldr	r3, [pc, #152]	; (8002ab4 <ili_fonttest+0x160>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	4925      	ldr	r1, [pc, #148]	; (8002ab8 <ili_fonttest+0x164>)
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	440a      	add	r2, r1
 8002a26:	7812      	ldrb	r2, [r2, #0]
 8002a28:	4413      	add	r3, r2
 8002a2a:	4a22      	ldr	r2, [pc, #136]	; (8002ab4 <ili_fonttest+0x160>)
 8002a2c:	6013      	str	r3, [r2, #0]
		for(int k = 0; k < rowbox; k++){
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	3301      	adds	r3, #1
 8002a32:	61bb      	str	r3, [r7, #24]
 8002a34:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <ili_fonttest+0x150>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	dbd1      	blt.n	80029e4 <ili_fonttest+0x90>
			//HAL_Delay(30);
			//// how to insert in union
			//buu32.b8[rowbox - k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
		}

		for(int j = 0; j < fonto.Width; j++){
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	e019      	b.n	8002a7a <ili_fonttest+0x126>
			////Works
			if((hop << j) & cliff){ // buu32.b32
 8002a46:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <ili_fonttest+0x160>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <ili_fonttest+0x154>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00d      	beq.n	8002a74 <ili_fonttest+0x120>

			//if((buu32.b32 << j) & cliff){ //
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	89fb      	ldrh	r3, [r7, #14]
 8002a5e:	4413      	add	r3, r2
 8002a60:	b298      	uxth	r0, r3
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	89bb      	ldrh	r3, [r7, #12]
 8002a68:	4413      	add	r3, r2
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a6e:	4619      	mov	r1, r3
 8002a70:	f7fd fe6c 	bl	800074c <ili9486_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	3301      	adds	r3, #1
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	4293      	cmp	r3, r2
 8002a82:	dbe0      	blt.n	8002a46 <ili_fonttest+0xf2>
	for(int i = 0; i < fonto.Height; i++){
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	3301      	adds	r3, #1
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	4293      	cmp	r3, r2
 8002a92:	db8d      	blt.n	80029b0 <ili_fonttest+0x5c>
			}

		}
	}
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002aa0:	b002      	add	sp, #8
 8002aa2:	4770      	bx	lr
 8002aa4:	2400014c 	.word	0x2400014c
 8002aa8:	24000158 	.word	0x24000158
 8002aac:	2400014e 	.word	0x2400014e
 8002ab0:	24000150 	.word	0x24000150
 8002ab4:	24000154 	.word	0x24000154
 8002ab8:	24000148 	.word	0x24000148

08002abc <ili_texttest>:

void ili_texttest(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8002abc:	b082      	sub	sp, #8
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b088      	sub	sp, #32
 8002ac2:	af04      	add	r7, sp, #16
 8002ac4:	603a      	str	r2, [r7, #0]
 8002ac6:	61fb      	str	r3, [r7, #28]
 8002ac8:	4603      	mov	r3, r0
 8002aca:	80fb      	strh	r3, [r7, #6]
 8002acc:	460b      	mov	r3, r1
 8002ace:	80bb      	strh	r3, [r7, #4]

	uint16_t ili_heigh = ili9486_GetLcdPixelHeight();
 8002ad0:	f7fd fda1 	bl	8000616 <ili9486_GetLcdPixelHeight>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9486_GetLcdPixelWidth();
 8002ad8:	f7fd fd94 	bl	8000604 <ili9486_GetLcdPixelWidth>
 8002adc:	4603      	mov	r3, r0
 8002ade:	81bb      	strh	r3, [r7, #12]

	while(*strr){
 8002ae0:	e037      	b.n	8002b52 <ili_texttest+0x96>

	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	8c3a      	ldrh	r2, [r7, #32]
 8002ae6:	441a      	add	r2, r3
 8002ae8:	89bb      	ldrh	r3, [r7, #12]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	db13      	blt.n	8002b16 <ili_texttest+0x5a>
			Xpo = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8002af2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002af4:	88bb      	ldrh	r3, [r7, #4]
 8002af6:	4413      	add	r3, r2
 8002af8:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8002afa:	88bb      	ldrh	r3, [r7, #4]
 8002afc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002afe:	441a      	add	r2, r3
 8002b00:	89fb      	ldrh	r3, [r7, #14]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	da2a      	bge.n	8002b5c <ili_texttest+0xa0>
				break;
			}

			if(*strr == ' ') {
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d103      	bne.n	8002b16 <ili_texttest+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	3301      	adds	r3, #1
 8002b12:	603b      	str	r3, [r7, #0]
				continue;
 8002b14:	e01d      	b.n	8002b52 <ili_texttest+0x96>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		static int nummm = 0;
		txtbuf[nummm] = *strr;
 8002b16:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <ili_texttest+0xb0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	7811      	ldrb	r1, [r2, #0]
 8002b1e:	4a14      	ldr	r2, [pc, #80]	; (8002b70 <ili_texttest+0xb4>)
 8002b20:	54d1      	strb	r1, [r2, r3]
		ili9486_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8002b22:	88b9      	ldrh	r1, [r7, #4]
 8002b24:	88f8      	ldrh	r0, [r7, #6]
 8002b26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b28:	9302      	str	r3, [sp, #8]
 8002b2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	f7fd ff97 	bl	8000a68 <ili9486_WriteChar>
		Xpo += fonto.Width;
 8002b3a:	8c3a      	ldrh	r2, [r7, #32]
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	4413      	add	r3, r2
 8002b40:	80fb      	strh	r3, [r7, #6]
		strr++; nummm++;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	3301      	adds	r3, #1
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <ili_texttest+0xb0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	4a07      	ldr	r2, [pc, #28]	; (8002b6c <ili_texttest+0xb0>)
 8002b50:	6013      	str	r3, [r2, #0]
	while(*strr){
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1c3      	bne.n	8002ae2 <ili_texttest+0x26>
	}
}
 8002b5a:	e000      	b.n	8002b5e <ili_texttest+0xa2>
				break;
 8002b5c:	bf00      	nop
}
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b68:	b002      	add	sp, #8
 8002b6a:	4770      	bx	lr
 8002b6c:	24000184 	.word	0x24000184
 8002b70:	2400015c 	.word	0x2400015c

08002b74 <HAL_GPIO_EXTI_Callback>:

uint64_t micros()
{return _micros + htim17.Instance->CNT;}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b84:	d113      	bne.n	8002bae <HAL_GPIO_EXTI_Callback+0x3a>
		bluecounter++;
 8002b86:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x48>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x48>)
 8002b90:	701a      	strb	r2, [r3, #0]
		bluecounter%=4;
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x48>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x48>)
 8002b9e:	701a      	strb	r2, [r3, #0]
		flag_blue = bluecounter;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x48>)
 8002ba2:	781a      	ldrb	r2, [r3, #0]
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002ba6:	701a      	strb	r2, [r3, #0]
		ff = 1;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_GPIO_EXTI_Callback+0x50>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	701a      	strb	r2, [r3, #0]
	}

}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	24000142 	.word	0x24000142
 8002bc0:	24000143 	.word	0x24000143
 8002bc4:	24000144 	.word	0x24000144

08002bc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002bc8:	b4b0      	push	{r4, r5, r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 if(htim == &htim17)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a09      	ldr	r2, [pc, #36]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d10a      	bne.n	8002bee <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 8002bd8:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002be2:	1854      	adds	r4, r2, r1
 8002be4:	f143 0500 	adc.w	r5, r3, #0
 8002be8:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002bea:	e9c3 4500 	strd	r4, r5, [r3]
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bcb0      	pop	{r4, r5, r7}
 8002bf6:	4770      	bx	lr
 8002bf8:	2400005c 	.word	0x2400005c
 8002bfc:	24000178 	.word	0x24000178

08002c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c04:	b672      	cpsid	i
}
 8002c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c08:	e7fe      	b.n	8002c08 <Error_Handler+0x8>
	...

08002c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <HAL_MspInit+0x30>)
 8002c14:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002c18:	4a08      	ldr	r2, [pc, #32]	; (8002c3c <HAL_MspInit+0x30>)
 8002c1a:	f043 0302 	orr.w	r3, r3, #2
 8002c1e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002c22:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_MspInit+0x30>)
 8002c24:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	58024400 	.word	0x58024400

08002c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a0e      	ldr	r2, [pc, #56]	; (8002c88 <HAL_TIM_Base_MspInit+0x48>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d116      	bne.n	8002c80 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002c52:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <HAL_TIM_Base_MspInit+0x4c>)
 8002c54:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002c58:	4a0c      	ldr	r2, [pc, #48]	; (8002c8c <HAL_TIM_Base_MspInit+0x4c>)
 8002c5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c5e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <HAL_TIM_Base_MspInit+0x4c>)
 8002c64:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002c70:	2200      	movs	r2, #0
 8002c72:	2100      	movs	r1, #0
 8002c74:	2076      	movs	r0, #118	; 0x76
 8002c76:	f000 fae0 	bl	800323a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002c7a:	2076      	movs	r0, #118	; 0x76
 8002c7c:	f000 faf7 	bl	800326e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002c80:	bf00      	nop
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40014800 	.word	0x40014800
 8002c8c:	58024400 	.word	0x58024400

08002c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b0b8      	sub	sp, #224	; 0xe0
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	22b8      	movs	r2, #184	; 0xb8
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f004 fbfb 	bl	80074ac <memset>
  if(huart->Instance==USART3)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a25      	ldr	r2, [pc, #148]	; (8002d50 <HAL_UART_MspInit+0xc0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d142      	bne.n	8002d46 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cca:	f107 0314 	add.w	r3, r7, #20
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f001 fcd0 	bl	8004674 <HAL_RCCEx_PeriphCLKConfig>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002cda:	f7ff ff91 	bl	8002c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cde:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <HAL_UART_MspInit+0xc4>)
 8002ce0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002ce4:	4a1b      	ldr	r2, [pc, #108]	; (8002d54 <HAL_UART_MspInit+0xc4>)
 8002ce6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cea:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002cee:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <HAL_UART_MspInit+0xc4>)
 8002cf0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002cf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cfc:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <HAL_UART_MspInit+0xc4>)
 8002cfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002d02:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <HAL_UART_MspInit+0xc4>)
 8002d04:	f043 0308 	orr.w	r3, r3, #8
 8002d08:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002d0c:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <HAL_UART_MspInit+0xc4>)
 8002d0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002d1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d22:	2302      	movs	r3, #2
 8002d24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d34:	2307      	movs	r3, #7
 8002d36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d3a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4805      	ldr	r0, [pc, #20]	; (8002d58 <HAL_UART_MspInit+0xc8>)
 8002d42:	f000 faaf 	bl	80032a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d46:	bf00      	nop
 8002d48:	37e0      	adds	r7, #224	; 0xe0
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40004800 	.word	0x40004800
 8002d54:	58024400 	.word	0x58024400
 8002d58:	58020c00 	.word	0x58020c00

08002d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d60:	e7fe      	b.n	8002d60 <NMI_Handler+0x4>

08002d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d66:	e7fe      	b.n	8002d66 <HardFault_Handler+0x4>

08002d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d6c:	e7fe      	b.n	8002d6c <MemManage_Handler+0x4>

08002d6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d72:	e7fe      	b.n	8002d72 <BusFault_Handler+0x4>

08002d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d78:	e7fe      	b.n	8002d78 <UsageFault_Handler+0x4>

08002d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d96:	b480      	push	{r7}
 8002d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002da8:	f000 f928 	bl	8002ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002db4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002db8:	f000 fc57 	bl	800366a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002dbc:	bf00      	nop
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002dc4:	4802      	ldr	r0, [pc, #8]	; (8002dd0 <TIM17_IRQHandler+0x10>)
 8002dc6:	f002 ffda 	bl	8005d7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	2400005c 	.word	0x2400005c

08002dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002dd8:	4b32      	ldr	r3, [pc, #200]	; (8002ea4 <SystemInit+0xd0>)
 8002dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dde:	4a31      	ldr	r2, [pc, #196]	; (8002ea4 <SystemInit+0xd0>)
 8002de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002de8:	4b2f      	ldr	r3, [pc, #188]	; (8002ea8 <SystemInit+0xd4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d807      	bhi.n	8002e04 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002df4:	4b2c      	ldr	r3, [pc, #176]	; (8002ea8 <SystemInit+0xd4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f023 030f 	bic.w	r3, r3, #15
 8002dfc:	4a2a      	ldr	r2, [pc, #168]	; (8002ea8 <SystemInit+0xd4>)
 8002dfe:	f043 0303 	orr.w	r3, r3, #3
 8002e02:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002e04:	4b29      	ldr	r3, [pc, #164]	; (8002eac <SystemInit+0xd8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a28      	ldr	r2, [pc, #160]	; (8002eac <SystemInit+0xd8>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e10:	4b26      	ldr	r3, [pc, #152]	; (8002eac <SystemInit+0xd8>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002e16:	4b25      	ldr	r3, [pc, #148]	; (8002eac <SystemInit+0xd8>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	4924      	ldr	r1, [pc, #144]	; (8002eac <SystemInit+0xd8>)
 8002e1c:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <SystemInit+0xdc>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e22:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <SystemInit+0xd4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <SystemInit+0xd4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 030f 	bic.w	r3, r3, #15
 8002e36:	4a1c      	ldr	r2, [pc, #112]	; (8002ea8 <SystemInit+0xd4>)
 8002e38:	f043 0303 	orr.w	r3, r3, #3
 8002e3c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <SystemInit+0xd8>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <SystemInit+0xd8>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002e4a:	4b18      	ldr	r3, [pc, #96]	; (8002eac <SystemInit+0xd8>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <SystemInit+0xd8>)
 8002e52:	4a18      	ldr	r2, [pc, #96]	; (8002eb4 <SystemInit+0xe0>)
 8002e54:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <SystemInit+0xd8>)
 8002e58:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <SystemInit+0xe4>)
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002e5c:	4b13      	ldr	r3, [pc, #76]	; (8002eac <SystemInit+0xd8>)
 8002e5e:	4a17      	ldr	r2, [pc, #92]	; (8002ebc <SystemInit+0xe8>)
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002e62:	4b12      	ldr	r3, [pc, #72]	; (8002eac <SystemInit+0xd8>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002e68:	4b10      	ldr	r3, [pc, #64]	; (8002eac <SystemInit+0xd8>)
 8002e6a:	4a14      	ldr	r2, [pc, #80]	; (8002ebc <SystemInit+0xe8>)
 8002e6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <SystemInit+0xd8>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002e74:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <SystemInit+0xd8>)
 8002e76:	4a11      	ldr	r2, [pc, #68]	; (8002ebc <SystemInit+0xe8>)
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002e7a:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <SystemInit+0xd8>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e80:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <SystemInit+0xd8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a09      	ldr	r2, [pc, #36]	; (8002eac <SystemInit+0xd8>)
 8002e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e8c:	4b07      	ldr	r3, [pc, #28]	; (8002eac <SystemInit+0xd8>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <SystemInit+0xec>)
 8002e94:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002e98:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002e9a:	bf00      	nop
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	e000ed00 	.word	0xe000ed00
 8002ea8:	52002000 	.word	0x52002000
 8002eac:	58024400 	.word	0x58024400
 8002eb0:	eaf6ed7f 	.word	0xeaf6ed7f
 8002eb4:	02020200 	.word	0x02020200
 8002eb8:	01ff0000 	.word	0x01ff0000
 8002ebc:	01010280 	.word	0x01010280
 8002ec0:	52004000 	.word	0x52004000

08002ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002efc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ec8:	f7ff ff84 	bl	8002dd4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ecc:	480c      	ldr	r0, [pc, #48]	; (8002f00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ece:	490d      	ldr	r1, [pc, #52]	; (8002f04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	; (8002f08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed4:	e002      	b.n	8002edc <LoopCopyDataInit>

08002ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eda:	3304      	adds	r3, #4

08002edc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee0:	d3f9      	bcc.n	8002ed6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ee4:	4c0a      	ldr	r4, [pc, #40]	; (8002f10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee8:	e001      	b.n	8002eee <LoopFillZerobss>

08002eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eec:	3204      	adds	r2, #4

08002eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef0:	d3fb      	bcc.n	8002eea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002ef2:	f004 fab7 	bl	8007464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ef6:	f7ff f89d 	bl	8002034 <main>
  bx  lr
 8002efa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002efc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002f00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002f04:	24000038 	.word	0x24000038
  ldr r2, =_sidata
 8002f08:	08018db0 	.word	0x08018db0
  ldr r2, =_sbss
 8002f0c:	24000038 	.word	0x24000038
  ldr r4, =_ebss
 8002f10:	2400018c 	.word	0x2400018c

08002f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f14:	e7fe      	b.n	8002f14 <ADC_IRQHandler>
	...

08002f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f1e:	2003      	movs	r0, #3
 8002f20:	f000 f980 	bl	8003224 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002f24:	f001 f9d0 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <HAL_Init+0x68>)
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	f003 030f 	and.w	r3, r3, #15
 8002f34:	4913      	ldr	r1, [pc, #76]	; (8002f84 <HAL_Init+0x6c>)
 8002f36:	5ccb      	ldrb	r3, [r1, r3]
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f40:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002f42:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <HAL_Init+0x68>)
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	4a0e      	ldr	r2, [pc, #56]	; (8002f84 <HAL_Init+0x6c>)
 8002f4c:	5cd3      	ldrb	r3, [r2, r3]
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
 8002f58:	4a0b      	ldr	r2, [pc, #44]	; (8002f88 <HAL_Init+0x70>)
 8002f5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f5c:	4a0b      	ldr	r2, [pc, #44]	; (8002f8c <HAL_Init+0x74>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f62:	2000      	movs	r0, #0
 8002f64:	f000 f814 	bl	8002f90 <HAL_InitTick>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e002      	b.n	8002f78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f72:	f7ff fe4b 	bl	8002c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	58024400 	.word	0x58024400
 8002f84:	08018d68 	.word	0x08018d68
 8002f88:	2400002c 	.word	0x2400002c
 8002f8c:	24000028 	.word	0x24000028

08002f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f98:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <HAL_InitTick+0x60>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e021      	b.n	8002fe8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002fa4:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <HAL_InitTick+0x64>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <HAL_InitTick+0x60>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	4619      	mov	r1, r3
 8002fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 f965 	bl	800328a <HAL_SYSTICK_Config>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e00e      	b.n	8002fe8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b0f      	cmp	r3, #15
 8002fce:	d80a      	bhi.n	8002fe6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd8:	f000 f92f 	bl	800323a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fdc:	4a06      	ldr	r2, [pc, #24]	; (8002ff8 <HAL_InitTick+0x68>)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e000      	b.n	8002fe8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	24000034 	.word	0x24000034
 8002ff4:	24000028 	.word	0x24000028
 8002ff8:	24000030 	.word	0x24000030

08002ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_IncTick+0x20>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_IncTick+0x24>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4413      	add	r3, r2
 800300c:	4a04      	ldr	r2, [pc, #16]	; (8003020 <HAL_IncTick+0x24>)
 800300e:	6013      	str	r3, [r2, #0]
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	24000034 	.word	0x24000034
 8003020:	24000188 	.word	0x24000188

08003024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return uwTick;
 8003028:	4b03      	ldr	r3, [pc, #12]	; (8003038 <HAL_GetTick+0x14>)
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	24000188 	.word	0x24000188

0800303c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003044:	f7ff ffee 	bl	8003024 <HAL_GetTick>
 8003048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003054:	d005      	beq.n	8003062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003056:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <HAL_Delay+0x44>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4413      	add	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003062:	bf00      	nop
 8003064:	f7ff ffde 	bl	8003024 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	429a      	cmp	r2, r3
 8003072:	d8f7      	bhi.n	8003064 <HAL_Delay+0x28>
  {
  }
}
 8003074:	bf00      	nop
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	24000034 	.word	0x24000034

08003084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <__NVIC_SetPriorityGrouping+0x40>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030a0:	4013      	ands	r3, r2
 80030a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <__NVIC_SetPriorityGrouping+0x44>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030b2:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <__NVIC_SetPriorityGrouping+0x40>)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	60d3      	str	r3, [r2, #12]
}
 80030b8:	bf00      	nop
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	e000ed00 	.word	0xe000ed00
 80030c8:	05fa0000 	.word	0x05fa0000

080030cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d0:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <__NVIC_GetPriorityGrouping+0x18>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	0a1b      	lsrs	r3, r3, #8
 80030d6:	f003 0307 	and.w	r3, r3, #7
}
 80030da:	4618      	mov	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	db0b      	blt.n	8003112 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	f003 021f 	and.w	r2, r3, #31
 8003100:	4907      	ldr	r1, [pc, #28]	; (8003120 <__NVIC_EnableIRQ+0x38>)
 8003102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	2001      	movs	r0, #1
 800310a:	fa00 f202 	lsl.w	r2, r0, r2
 800310e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	e000e100 	.word	0xe000e100

08003124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	6039      	str	r1, [r7, #0]
 800312e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003130:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003134:	2b00      	cmp	r3, #0
 8003136:	db0a      	blt.n	800314e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	b2da      	uxtb	r2, r3
 800313c:	490c      	ldr	r1, [pc, #48]	; (8003170 <__NVIC_SetPriority+0x4c>)
 800313e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003142:	0112      	lsls	r2, r2, #4
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	440b      	add	r3, r1
 8003148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800314c:	e00a      	b.n	8003164 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4908      	ldr	r1, [pc, #32]	; (8003174 <__NVIC_SetPriority+0x50>)
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	3b04      	subs	r3, #4
 800315c:	0112      	lsls	r2, r2, #4
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	440b      	add	r3, r1
 8003162:	761a      	strb	r2, [r3, #24]
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	e000e100 	.word	0xe000e100
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003178:	b480      	push	{r7}
 800317a:	b089      	sub	sp, #36	; 0x24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f1c3 0307 	rsb	r3, r3, #7
 8003192:	2b04      	cmp	r3, #4
 8003194:	bf28      	it	cs
 8003196:	2304      	movcs	r3, #4
 8003198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3304      	adds	r3, #4
 800319e:	2b06      	cmp	r3, #6
 80031a0:	d902      	bls.n	80031a8 <NVIC_EncodePriority+0x30>
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3b03      	subs	r3, #3
 80031a6:	e000      	b.n	80031aa <NVIC_EncodePriority+0x32>
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ac:	f04f 32ff 	mov.w	r2, #4294967295
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43da      	mvns	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	401a      	ands	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c0:	f04f 31ff 	mov.w	r1, #4294967295
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	43d9      	mvns	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	4313      	orrs	r3, r2
         );
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3724      	adds	r7, #36	; 0x24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031f0:	d301      	bcc.n	80031f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031f2:	2301      	movs	r3, #1
 80031f4:	e00f      	b.n	8003216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031f6:	4a0a      	ldr	r2, [pc, #40]	; (8003220 <SysTick_Config+0x40>)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031fe:	210f      	movs	r1, #15
 8003200:	f04f 30ff 	mov.w	r0, #4294967295
 8003204:	f7ff ff8e 	bl	8003124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <SysTick_Config+0x40>)
 800320a:	2200      	movs	r2, #0
 800320c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800320e:	4b04      	ldr	r3, [pc, #16]	; (8003220 <SysTick_Config+0x40>)
 8003210:	2207      	movs	r2, #7
 8003212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	e000e010 	.word	0xe000e010

08003224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff ff29 	bl	8003084 <__NVIC_SetPriorityGrouping>
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b086      	sub	sp, #24
 800323e:	af00      	add	r7, sp, #0
 8003240:	4603      	mov	r3, r0
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
 8003246:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003248:	f7ff ff40 	bl	80030cc <__NVIC_GetPriorityGrouping>
 800324c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68b9      	ldr	r1, [r7, #8]
 8003252:	6978      	ldr	r0, [r7, #20]
 8003254:	f7ff ff90 	bl	8003178 <NVIC_EncodePriority>
 8003258:	4602      	mov	r2, r0
 800325a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800325e:	4611      	mov	r1, r2
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ff5f 	bl	8003124 <__NVIC_SetPriority>
}
 8003266:	bf00      	nop
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	4603      	mov	r3, r0
 8003276:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff ff33 	bl	80030e8 <__NVIC_EnableIRQ>
}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff ffa4 	bl	80031e0 <SysTick_Config>
 8003298:	4603      	mov	r3, r0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b089      	sub	sp, #36	; 0x24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80032b2:	4b89      	ldr	r3, [pc, #548]	; (80034d8 <HAL_GPIO_Init+0x234>)
 80032b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032b6:	e194      	b.n	80035e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	2101      	movs	r1, #1
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	fa01 f303 	lsl.w	r3, r1, r3
 80032c4:	4013      	ands	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 8186 	beq.w	80035dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d005      	beq.n	80032e8 <HAL_GPIO_Init+0x44>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0303 	and.w	r3, r3, #3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d130      	bne.n	800334a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	2203      	movs	r2, #3
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800331e:	2201      	movs	r2, #1
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	091b      	lsrs	r3, r3, #4
 8003334:	f003 0201 	and.w	r2, r3, #1
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4313      	orrs	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	2b03      	cmp	r3, #3
 8003354:	d017      	beq.n	8003386 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	2203      	movs	r2, #3
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d123      	bne.n	80033da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	08da      	lsrs	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3208      	adds	r2, #8
 800339a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	220f      	movs	r2, #15
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	08da      	lsrs	r2, r3, #3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3208      	adds	r2, #8
 80033d4:	69b9      	ldr	r1, [r7, #24]
 80033d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	2203      	movs	r2, #3
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0203 	and.w	r2, r3, #3
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4313      	orrs	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 80e0 	beq.w	80035dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800341c:	4b2f      	ldr	r3, [pc, #188]	; (80034dc <HAL_GPIO_Init+0x238>)
 800341e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003422:	4a2e      	ldr	r2, [pc, #184]	; (80034dc <HAL_GPIO_Init+0x238>)
 8003424:	f043 0302 	orr.w	r3, r3, #2
 8003428:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800342c:	4b2b      	ldr	r3, [pc, #172]	; (80034dc <HAL_GPIO_Init+0x238>)
 800342e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800343a:	4a29      	ldr	r2, [pc, #164]	; (80034e0 <HAL_GPIO_Init+0x23c>)
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	089b      	lsrs	r3, r3, #2
 8003440:	3302      	adds	r3, #2
 8003442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	220f      	movs	r2, #15
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a20      	ldr	r2, [pc, #128]	; (80034e4 <HAL_GPIO_Init+0x240>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d052      	beq.n	800350c <HAL_GPIO_Init+0x268>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a1f      	ldr	r2, [pc, #124]	; (80034e8 <HAL_GPIO_Init+0x244>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d031      	beq.n	80034d2 <HAL_GPIO_Init+0x22e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a1e      	ldr	r2, [pc, #120]	; (80034ec <HAL_GPIO_Init+0x248>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d02b      	beq.n	80034ce <HAL_GPIO_Init+0x22a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a1d      	ldr	r2, [pc, #116]	; (80034f0 <HAL_GPIO_Init+0x24c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d025      	beq.n	80034ca <HAL_GPIO_Init+0x226>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a1c      	ldr	r2, [pc, #112]	; (80034f4 <HAL_GPIO_Init+0x250>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01f      	beq.n	80034c6 <HAL_GPIO_Init+0x222>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a1b      	ldr	r2, [pc, #108]	; (80034f8 <HAL_GPIO_Init+0x254>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d019      	beq.n	80034c2 <HAL_GPIO_Init+0x21e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a1a      	ldr	r2, [pc, #104]	; (80034fc <HAL_GPIO_Init+0x258>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <HAL_GPIO_Init+0x21a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a19      	ldr	r2, [pc, #100]	; (8003500 <HAL_GPIO_Init+0x25c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00d      	beq.n	80034ba <HAL_GPIO_Init+0x216>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a18      	ldr	r2, [pc, #96]	; (8003504 <HAL_GPIO_Init+0x260>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d007      	beq.n	80034b6 <HAL_GPIO_Init+0x212>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a17      	ldr	r2, [pc, #92]	; (8003508 <HAL_GPIO_Init+0x264>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d101      	bne.n	80034b2 <HAL_GPIO_Init+0x20e>
 80034ae:	2309      	movs	r3, #9
 80034b0:	e02d      	b.n	800350e <HAL_GPIO_Init+0x26a>
 80034b2:	230a      	movs	r3, #10
 80034b4:	e02b      	b.n	800350e <HAL_GPIO_Init+0x26a>
 80034b6:	2308      	movs	r3, #8
 80034b8:	e029      	b.n	800350e <HAL_GPIO_Init+0x26a>
 80034ba:	2307      	movs	r3, #7
 80034bc:	e027      	b.n	800350e <HAL_GPIO_Init+0x26a>
 80034be:	2306      	movs	r3, #6
 80034c0:	e025      	b.n	800350e <HAL_GPIO_Init+0x26a>
 80034c2:	2305      	movs	r3, #5
 80034c4:	e023      	b.n	800350e <HAL_GPIO_Init+0x26a>
 80034c6:	2304      	movs	r3, #4
 80034c8:	e021      	b.n	800350e <HAL_GPIO_Init+0x26a>
 80034ca:	2303      	movs	r3, #3
 80034cc:	e01f      	b.n	800350e <HAL_GPIO_Init+0x26a>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e01d      	b.n	800350e <HAL_GPIO_Init+0x26a>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e01b      	b.n	800350e <HAL_GPIO_Init+0x26a>
 80034d6:	bf00      	nop
 80034d8:	58000080 	.word	0x58000080
 80034dc:	58024400 	.word	0x58024400
 80034e0:	58000400 	.word	0x58000400
 80034e4:	58020000 	.word	0x58020000
 80034e8:	58020400 	.word	0x58020400
 80034ec:	58020800 	.word	0x58020800
 80034f0:	58020c00 	.word	0x58020c00
 80034f4:	58021000 	.word	0x58021000
 80034f8:	58021400 	.word	0x58021400
 80034fc:	58021800 	.word	0x58021800
 8003500:	58021c00 	.word	0x58021c00
 8003504:	58022000 	.word	0x58022000
 8003508:	58022400 	.word	0x58022400
 800350c:	2300      	movs	r3, #0
 800350e:	69fa      	ldr	r2, [r7, #28]
 8003510:	f002 0203 	and.w	r2, r2, #3
 8003514:	0092      	lsls	r2, r2, #2
 8003516:	4093      	lsls	r3, r2
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800351e:	4938      	ldr	r1, [pc, #224]	; (8003600 <HAL_GPIO_Init+0x35c>)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	3302      	adds	r3, #2
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800352c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800355a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003580:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	43db      	mvns	r3, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4013      	ands	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	43db      	mvns	r3, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4013      	ands	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	3301      	adds	r3, #1
 80035e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f47f ae63 	bne.w	80032b8 <HAL_GPIO_Init+0x14>
  }
}
 80035f2:	bf00      	nop
 80035f4:	bf00      	nop
 80035f6:	3724      	adds	r7, #36	; 0x24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	58000400 	.word	0x58000400

08003604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	807b      	strh	r3, [r7, #2]
 8003610:	4613      	mov	r3, r2
 8003612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003614:	787b      	ldrb	r3, [r7, #1]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800361a:	887a      	ldrh	r2, [r7, #2]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003620:	e003      	b.n	800362a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003622:	887b      	ldrh	r3, [r7, #2]
 8003624:	041a      	lsls	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	619a      	str	r2, [r3, #24]
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003636:	b480      	push	{r7}
 8003638:	b085      	sub	sp, #20
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003648:	887a      	ldrh	r2, [r7, #2]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4013      	ands	r3, r2
 800364e:	041a      	lsls	r2, r3, #16
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	43d9      	mvns	r1, r3
 8003654:	887b      	ldrh	r3, [r7, #2]
 8003656:	400b      	ands	r3, r1
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	619a      	str	r2, [r3, #24]
}
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b082      	sub	sp, #8
 800366e:	af00      	add	r7, sp, #0
 8003670:	4603      	mov	r3, r0
 8003672:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003678:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	4013      	ands	r3, r2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003688:	88fb      	ldrh	r3, [r7, #6]
 800368a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fa6f 	bl	8002b74 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80036a8:	4b29      	ldr	r3, [pc, #164]	; (8003750 <HAL_PWREx_ConfigSupply+0xb0>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	2b06      	cmp	r3, #6
 80036b2:	d00a      	beq.n	80036ca <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80036b4:	4b26      	ldr	r3, [pc, #152]	; (8003750 <HAL_PWREx_ConfigSupply+0xb0>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d001      	beq.n	80036c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e040      	b.n	8003748 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	e03e      	b.n	8003748 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80036ca:	4b21      	ldr	r3, [pc, #132]	; (8003750 <HAL_PWREx_ConfigSupply+0xb0>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80036d2:	491f      	ldr	r1, [pc, #124]	; (8003750 <HAL_PWREx_ConfigSupply+0xb0>)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80036da:	f7ff fca3 	bl	8003024 <HAL_GetTick>
 80036de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036e0:	e009      	b.n	80036f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80036e2:	f7ff fc9f 	bl	8003024 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036f0:	d901      	bls.n	80036f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e028      	b.n	8003748 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80036f6:	4b16      	ldr	r3, [pc, #88]	; (8003750 <HAL_PWREx_ConfigSupply+0xb0>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003702:	d1ee      	bne.n	80036e2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b1e      	cmp	r3, #30
 8003708:	d008      	beq.n	800371c <HAL_PWREx_ConfigSupply+0x7c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b2e      	cmp	r3, #46	; 0x2e
 800370e:	d005      	beq.n	800371c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b1d      	cmp	r3, #29
 8003714:	d002      	beq.n	800371c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b2d      	cmp	r3, #45	; 0x2d
 800371a:	d114      	bne.n	8003746 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800371c:	f7ff fc82 	bl	8003024 <HAL_GetTick>
 8003720:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003722:	e009      	b.n	8003738 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003724:	f7ff fc7e 	bl	8003024 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003732:	d901      	bls.n	8003738 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e007      	b.n	8003748 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_PWREx_ConfigSupply+0xb0>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003744:	d1ee      	bne.n	8003724 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	58024800 	.word	0x58024800

08003754 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08c      	sub	sp, #48	; 0x30
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e3f4      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80b3 	beq.w	80038da <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003774:	4b95      	ldr	r3, [pc, #596]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800377e:	4b93      	ldr	r3, [pc, #588]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003786:	2b10      	cmp	r3, #16
 8003788:	d007      	beq.n	800379a <HAL_RCC_OscConfig+0x46>
 800378a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378c:	2b18      	cmp	r3, #24
 800378e:	d112      	bne.n	80037b6 <HAL_RCC_OscConfig+0x62>
 8003790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d10d      	bne.n	80037b6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800379a:	4b8c      	ldr	r3, [pc, #560]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 8098 	beq.w	80038d8 <HAL_RCC_OscConfig+0x184>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f040 8093 	bne.w	80038d8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e3cc      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037be:	d106      	bne.n	80037ce <HAL_RCC_OscConfig+0x7a>
 80037c0:	4b82      	ldr	r3, [pc, #520]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a81      	ldr	r2, [pc, #516]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 80037c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	e058      	b.n	8003880 <HAL_RCC_OscConfig+0x12c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d112      	bne.n	80037fc <HAL_RCC_OscConfig+0xa8>
 80037d6:	4b7d      	ldr	r3, [pc, #500]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a7c      	ldr	r2, [pc, #496]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 80037dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	4b7a      	ldr	r3, [pc, #488]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a79      	ldr	r2, [pc, #484]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 80037e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	4b77      	ldr	r3, [pc, #476]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a76      	ldr	r2, [pc, #472]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 80037f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e041      	b.n	8003880 <HAL_RCC_OscConfig+0x12c>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003804:	d112      	bne.n	800382c <HAL_RCC_OscConfig+0xd8>
 8003806:	4b71      	ldr	r3, [pc, #452]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a70      	ldr	r2, [pc, #448]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 800380c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	4b6e      	ldr	r3, [pc, #440]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a6d      	ldr	r2, [pc, #436]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 8003818:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	4b6b      	ldr	r3, [pc, #428]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a6a      	ldr	r2, [pc, #424]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 8003824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e029      	b.n	8003880 <HAL_RCC_OscConfig+0x12c>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003834:	d112      	bne.n	800385c <HAL_RCC_OscConfig+0x108>
 8003836:	4b65      	ldr	r3, [pc, #404]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a64      	ldr	r2, [pc, #400]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 800383c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	4b62      	ldr	r3, [pc, #392]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a61      	ldr	r2, [pc, #388]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 8003848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b5f      	ldr	r3, [pc, #380]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a5e      	ldr	r2, [pc, #376]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 8003854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e011      	b.n	8003880 <HAL_RCC_OscConfig+0x12c>
 800385c:	4b5b      	ldr	r3, [pc, #364]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a5a      	ldr	r2, [pc, #360]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 8003862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	4b58      	ldr	r3, [pc, #352]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a57      	ldr	r2, [pc, #348]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 800386e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	4b55      	ldr	r3, [pc, #340]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a54      	ldr	r2, [pc, #336]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 800387a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800387e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d013      	beq.n	80038b0 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003888:	f7ff fbcc 	bl	8003024 <HAL_GetTick>
 800388c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003890:	f7ff fbc8 	bl	8003024 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b64      	cmp	r3, #100	; 0x64
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e356      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038a2:	4b4a      	ldr	r3, [pc, #296]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0x13c>
 80038ae:	e014      	b.n	80038da <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7ff fbb8 	bl	8003024 <HAL_GetTick>
 80038b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b8:	f7ff fbb4 	bl	8003024 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b64      	cmp	r3, #100	; 0x64
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e342      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038ca:	4b40      	ldr	r3, [pc, #256]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x164>
 80038d6:	e000      	b.n	80038da <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 808d 	beq.w	8003a02 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038e8:	4b38      	ldr	r3, [pc, #224]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038f2:	4b36      	ldr	r3, [pc, #216]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d007      	beq.n	800390e <HAL_RCC_OscConfig+0x1ba>
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	2b18      	cmp	r3, #24
 8003902:	d137      	bne.n	8003974 <HAL_RCC_OscConfig+0x220>
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d132      	bne.n	8003974 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800390e:	4b2f      	ldr	r3, [pc, #188]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_RCC_OscConfig+0x1d2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e314      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003926:	4b29      	ldr	r3, [pc, #164]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 0219 	bic.w	r2, r3, #25
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	4926      	ldr	r1, [pc, #152]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 8003934:	4313      	orrs	r3, r2
 8003936:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003938:	f7ff fb74 	bl	8003024 <HAL_GetTick>
 800393c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003940:	f7ff fb70 	bl	8003024 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e2fe      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003952:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395e:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	061b      	lsls	r3, r3, #24
 800396c:	4917      	ldr	r1, [pc, #92]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 800396e:	4313      	orrs	r3, r2
 8003970:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003972:	e046      	b.n	8003a02 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d029      	beq.n	80039d0 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800397c:	4b13      	ldr	r3, [pc, #76]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f023 0219 	bic.w	r2, r3, #25
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4910      	ldr	r1, [pc, #64]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398e:	f7ff fb49 	bl	8003024 <HAL_GetTick>
 8003992:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003996:	f7ff fb45 	bl	8003024 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e2d3      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039a8:	4b08      	ldr	r3, [pc, #32]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	061b      	lsls	r3, r3, #24
 80039c2:	4902      	ldr	r1, [pc, #8]	; (80039cc <HAL_RCC_OscConfig+0x278>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	604b      	str	r3, [r1, #4]
 80039c8:	e01b      	b.n	8003a02 <HAL_RCC_OscConfig+0x2ae>
 80039ca:	bf00      	nop
 80039cc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039d0:	4b97      	ldr	r3, [pc, #604]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a96      	ldr	r2, [pc, #600]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7ff fb22 	bl	8003024 <HAL_GetTick>
 80039e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e4:	f7ff fb1e 	bl	8003024 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e2ac      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039f6:	4b8e      	ldr	r3, [pc, #568]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0310 	and.w	r3, r3, #16
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d06a      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a0e:	4b88      	ldr	r3, [pc, #544]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a18:	4b85      	ldr	r3, [pc, #532]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d007      	beq.n	8003a34 <HAL_RCC_OscConfig+0x2e0>
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b18      	cmp	r3, #24
 8003a28:	d11b      	bne.n	8003a62 <HAL_RCC_OscConfig+0x30e>
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d116      	bne.n	8003a62 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a34:	4b7e      	ldr	r3, [pc, #504]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_OscConfig+0x2f8>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	2b80      	cmp	r3, #128	; 0x80
 8003a46:	d001      	beq.n	8003a4c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e281      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a4c:	4b78      	ldr	r3, [pc, #480]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	061b      	lsls	r3, r3, #24
 8003a5a:	4975      	ldr	r1, [pc, #468]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a60:	e040      	b.n	8003ae4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d023      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a6a:	4b71      	ldr	r3, [pc, #452]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a70      	ldr	r2, [pc, #448]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a76:	f7ff fad5 	bl	8003024 <HAL_GetTick>
 8003a7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a7e:	f7ff fad1 	bl	8003024 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e25f      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a90:	4b67      	ldr	r3, [pc, #412]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a9c:	4b64      	ldr	r3, [pc, #400]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	061b      	lsls	r3, r3, #24
 8003aaa:	4961      	ldr	r1, [pc, #388]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60cb      	str	r3, [r1, #12]
 8003ab0:	e018      	b.n	8003ae4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ab2:	4b5f      	ldr	r3, [pc, #380]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a5e      	ldr	r2, [pc, #376]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abe:	f7ff fab1 	bl	8003024 <HAL_GetTick>
 8003ac2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003ac6:	f7ff faad 	bl	8003024 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e23b      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ad8:	4b55      	ldr	r3, [pc, #340]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1f0      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d036      	beq.n	8003b5e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d019      	beq.n	8003b2c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003af8:	4b4d      	ldr	r3, [pc, #308]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afc:	4a4c      	ldr	r2, [pc, #304]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b04:	f7ff fa8e 	bl	8003024 <HAL_GetTick>
 8003b08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b0c:	f7ff fa8a 	bl	8003024 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e218      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b1e:	4b44      	ldr	r3, [pc, #272]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0x3b8>
 8003b2a:	e018      	b.n	8003b5e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b2c:	4b40      	ldr	r3, [pc, #256]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b30:	4a3f      	ldr	r2, [pc, #252]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b38:	f7ff fa74 	bl	8003024 <HAL_GetTick>
 8003b3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b40:	f7ff fa70 	bl	8003024 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e1fe      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b52:	4b37      	ldr	r3, [pc, #220]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d036      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d019      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b72:	4b2f      	ldr	r3, [pc, #188]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a2e      	ldr	r2, [pc, #184]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003b78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b7c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b7e:	f7ff fa51 	bl	8003024 <HAL_GetTick>
 8003b82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b86:	f7ff fa4d 	bl	8003024 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e1db      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b98:	4b25      	ldr	r3, [pc, #148]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCC_OscConfig+0x432>
 8003ba4:	e018      	b.n	8003bd8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ba6:	4b22      	ldr	r3, [pc, #136]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a21      	ldr	r2, [pc, #132]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003bac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bb0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003bb2:	f7ff fa37 	bl	8003024 <HAL_GetTick>
 8003bb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003bba:	f7ff fa33 	bl	8003024 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e1c1      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bcc:	4b18      	ldr	r3, [pc, #96]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f0      	bne.n	8003bba <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80af 	beq.w	8003d44 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003be6:	4b13      	ldr	r3, [pc, #76]	; (8003c34 <HAL_RCC_OscConfig+0x4e0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <HAL_RCC_OscConfig+0x4e0>)
 8003bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bf2:	f7ff fa17 	bl	8003024 <HAL_GetTick>
 8003bf6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003bfa:	f7ff fa13 	bl	8003024 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b64      	cmp	r3, #100	; 0x64
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e1a1      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <HAL_RCC_OscConfig+0x4e0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d10b      	bne.n	8003c38 <HAL_RCC_OscConfig+0x4e4>
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	4a02      	ldr	r2, [pc, #8]	; (8003c30 <HAL_RCC_OscConfig+0x4dc>)
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c2c:	e05b      	b.n	8003ce6 <HAL_RCC_OscConfig+0x592>
 8003c2e:	bf00      	nop
 8003c30:	58024400 	.word	0x58024400
 8003c34:	58024800 	.word	0x58024800
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d112      	bne.n	8003c66 <HAL_RCC_OscConfig+0x512>
 8003c40:	4b9d      	ldr	r3, [pc, #628]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	4a9c      	ldr	r2, [pc, #624]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003c46:	f023 0301 	bic.w	r3, r3, #1
 8003c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c4c:	4b9a      	ldr	r3, [pc, #616]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	4a99      	ldr	r2, [pc, #612]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c56:	6713      	str	r3, [r2, #112]	; 0x70
 8003c58:	4b97      	ldr	r3, [pc, #604]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	4a96      	ldr	r2, [pc, #600]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003c5e:	f023 0304 	bic.w	r3, r3, #4
 8003c62:	6713      	str	r3, [r2, #112]	; 0x70
 8003c64:	e03f      	b.n	8003ce6 <HAL_RCC_OscConfig+0x592>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b05      	cmp	r3, #5
 8003c6c:	d112      	bne.n	8003c94 <HAL_RCC_OscConfig+0x540>
 8003c6e:	4b92      	ldr	r3, [pc, #584]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	4a91      	ldr	r2, [pc, #580]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7a:	4b8f      	ldr	r3, [pc, #572]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	4a8e      	ldr	r2, [pc, #568]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003c80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c84:	6713      	str	r3, [r2, #112]	; 0x70
 8003c86:	4b8c      	ldr	r3, [pc, #560]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8a:	4a8b      	ldr	r2, [pc, #556]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	6713      	str	r3, [r2, #112]	; 0x70
 8003c92:	e028      	b.n	8003ce6 <HAL_RCC_OscConfig+0x592>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b85      	cmp	r3, #133	; 0x85
 8003c9a:	d112      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x56e>
 8003c9c:	4b86      	ldr	r3, [pc, #536]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	4a85      	ldr	r2, [pc, #532]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003ca2:	f043 0304 	orr.w	r3, r3, #4
 8003ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca8:	4b83      	ldr	r3, [pc, #524]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	4a82      	ldr	r2, [pc, #520]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb4:	4b80      	ldr	r3, [pc, #512]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	4a7f      	ldr	r2, [pc, #508]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc0:	e011      	b.n	8003ce6 <HAL_RCC_OscConfig+0x592>
 8003cc2:	4b7d      	ldr	r3, [pc, #500]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc6:	4a7c      	ldr	r2, [pc, #496]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003cc8:	f023 0301 	bic.w	r3, r3, #1
 8003ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cce:	4b7a      	ldr	r3, [pc, #488]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd2:	4a79      	ldr	r2, [pc, #484]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003cd4:	f023 0304 	bic.w	r3, r3, #4
 8003cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cda:	4b77      	ldr	r3, [pc, #476]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	4a76      	ldr	r2, [pc, #472]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d015      	beq.n	8003d1a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cee:	f7ff f999 	bl	8003024 <HAL_GetTick>
 8003cf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cf4:	e00a      	b.n	8003d0c <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7ff f995 	bl	8003024 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e121      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d0c:	4b6a      	ldr	r3, [pc, #424]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0ee      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x5a2>
 8003d18:	e014      	b.n	8003d44 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1a:	f7ff f983 	bl	8003024 <HAL_GetTick>
 8003d1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d20:	e00a      	b.n	8003d38 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d22:	f7ff f97f 	bl	8003024 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e10b      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d38:	4b5f      	ldr	r3, [pc, #380]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1ee      	bne.n	8003d22 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8100 	beq.w	8003f4e <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d4e:	4b5a      	ldr	r3, [pc, #360]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d56:	2b18      	cmp	r3, #24
 8003d58:	f000 80bb 	beq.w	8003ed2 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	f040 8095 	bne.w	8003e90 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d66:	4b54      	ldr	r3, [pc, #336]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a53      	ldr	r2, [pc, #332]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003d6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d72:	f7ff f957 	bl	8003024 <HAL_GetTick>
 8003d76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d7a:	f7ff f953 	bl	8003024 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e0e1      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d8c:	4b4a      	ldr	r3, [pc, #296]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1f0      	bne.n	8003d7a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d98:	4b47      	ldr	r3, [pc, #284]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003d9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d9c:	4b47      	ldr	r3, [pc, #284]	; (8003ebc <HAL_RCC_OscConfig+0x768>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003da8:	0112      	lsls	r2, r2, #4
 8003daa:	430a      	orrs	r2, r1
 8003dac:	4942      	ldr	r1, [pc, #264]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	628b      	str	r3, [r1, #40]	; 0x28
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	3b01      	subs	r3, #1
 8003db8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	025b      	lsls	r3, r3, #9
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	041b      	lsls	r3, r3, #16
 8003dd0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	061b      	lsls	r3, r3, #24
 8003dde:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003de2:	4935      	ldr	r1, [pc, #212]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003de8:	4b33      	ldr	r3, [pc, #204]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	4a32      	ldr	r2, [pc, #200]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003dee:	f023 0301 	bic.w	r3, r3, #1
 8003df2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003df4:	4b30      	ldr	r3, [pc, #192]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df8:	4b31      	ldr	r3, [pc, #196]	; (8003ec0 <HAL_RCC_OscConfig+0x76c>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e00:	00d2      	lsls	r2, r2, #3
 8003e02:	492d      	ldr	r1, [pc, #180]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e08:	4b2b      	ldr	r3, [pc, #172]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	f023 020c 	bic.w	r2, r3, #12
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	4928      	ldr	r1, [pc, #160]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003e1a:	4b27      	ldr	r3, [pc, #156]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	f023 0202 	bic.w	r2, r3, #2
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	4924      	ldr	r1, [pc, #144]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e2c:	4b22      	ldr	r3, [pc, #136]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	4a21      	ldr	r2, [pc, #132]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e38:	4b1f      	ldr	r3, [pc, #124]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	4a1e      	ldr	r2, [pc, #120]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e44:	4b1c      	ldr	r3, [pc, #112]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	4a1b      	ldr	r2, [pc, #108]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003e4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003e50:	4b19      	ldr	r3, [pc, #100]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	4a18      	ldr	r2, [pc, #96]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e5c:	4b16      	ldr	r3, [pc, #88]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a15      	ldr	r2, [pc, #84]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e68:	f7ff f8dc 	bl	8003024 <HAL_GetTick>
 8003e6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e70:	f7ff f8d8 	bl	8003024 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e066      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e82:	4b0d      	ldr	r3, [pc, #52]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0x71c>
 8003e8e:	e05e      	b.n	8003f4e <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e90:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a08      	ldr	r2, [pc, #32]	; (8003eb8 <HAL_RCC_OscConfig+0x764>)
 8003e96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9c:	f7ff f8c2 	bl	8003024 <HAL_GetTick>
 8003ea0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ea2:	e00f      	b.n	8003ec4 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea4:	f7ff f8be 	bl	8003024 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d908      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e04c      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
 8003eb6:	bf00      	nop
 8003eb8:	58024400 	.word	0x58024400
 8003ebc:	fffffc0c 	.word	0xfffffc0c
 8003ec0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ec4:	4b24      	ldr	r3, [pc, #144]	; (8003f58 <HAL_RCC_OscConfig+0x804>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e9      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x750>
 8003ed0:	e03d      	b.n	8003f4e <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ed2:	4b21      	ldr	r3, [pc, #132]	; (8003f58 <HAL_RCC_OscConfig+0x804>)
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ed8:	4b1f      	ldr	r3, [pc, #124]	; (8003f58 <HAL_RCC_OscConfig+0x804>)
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d031      	beq.n	8003f4a <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f003 0203 	and.w	r2, r3, #3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d12a      	bne.n	8003f4a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	091b      	lsrs	r3, r3, #4
 8003ef8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d122      	bne.n	8003f4a <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d11a      	bne.n	8003f4a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	0a5b      	lsrs	r3, r3, #9
 8003f18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f20:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d111      	bne.n	8003f4a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	0c1b      	lsrs	r3, r3, #16
 8003f2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d108      	bne.n	8003f4a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	0e1b      	lsrs	r3, r3, #24
 8003f3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f44:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d001      	beq.n	8003f4e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3730      	adds	r7, #48	; 0x30
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	58024400 	.word	0x58024400

08003f5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e19c      	b.n	80042aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f70:	4b8a      	ldr	r3, [pc, #552]	; (800419c <HAL_RCC_ClockConfig+0x240>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 030f 	and.w	r3, r3, #15
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d910      	bls.n	8003fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7e:	4b87      	ldr	r3, [pc, #540]	; (800419c <HAL_RCC_ClockConfig+0x240>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f023 020f 	bic.w	r2, r3, #15
 8003f86:	4985      	ldr	r1, [pc, #532]	; (800419c <HAL_RCC_ClockConfig+0x240>)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8e:	4b83      	ldr	r3, [pc, #524]	; (800419c <HAL_RCC_ClockConfig+0x240>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e184      	b.n	80042aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d010      	beq.n	8003fce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	4b7b      	ldr	r3, [pc, #492]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d908      	bls.n	8003fce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fbc:	4b78      	ldr	r3, [pc, #480]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	4975      	ldr	r1, [pc, #468]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d010      	beq.n	8003ffc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695a      	ldr	r2, [r3, #20]
 8003fde:	4b70      	ldr	r3, [pc, #448]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d908      	bls.n	8003ffc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003fea:	4b6d      	ldr	r3, [pc, #436]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	496a      	ldr	r1, [pc, #424]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b00      	cmp	r3, #0
 8004006:	d010      	beq.n	800402a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699a      	ldr	r2, [r3, #24]
 800400c:	4b64      	ldr	r3, [pc, #400]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004014:	429a      	cmp	r2, r3
 8004016:	d908      	bls.n	800402a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004018:	4b61      	ldr	r3, [pc, #388]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	495e      	ldr	r1, [pc, #376]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 8004026:	4313      	orrs	r3, r2
 8004028:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d010      	beq.n	8004058 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69da      	ldr	r2, [r3, #28]
 800403a:	4b59      	ldr	r3, [pc, #356]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004042:	429a      	cmp	r2, r3
 8004044:	d908      	bls.n	8004058 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004046:	4b56      	ldr	r3, [pc, #344]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	4953      	ldr	r1, [pc, #332]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 8004054:	4313      	orrs	r3, r2
 8004056:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d010      	beq.n	8004086 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	4b4d      	ldr	r3, [pc, #308]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	429a      	cmp	r2, r3
 8004072:	d908      	bls.n	8004086 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004074:	4b4a      	ldr	r3, [pc, #296]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	f023 020f 	bic.w	r2, r3, #15
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4947      	ldr	r1, [pc, #284]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 8004082:	4313      	orrs	r3, r2
 8004084:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d055      	beq.n	800413e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004092:	4b43      	ldr	r3, [pc, #268]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	4940      	ldr	r1, [pc, #256]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d107      	bne.n	80040bc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040ac:	4b3c      	ldr	r3, [pc, #240]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d121      	bne.n	80040fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0f6      	b.n	80042aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d107      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040c4:	4b36      	ldr	r3, [pc, #216]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d115      	bne.n	80040fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0ea      	b.n	80042aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d107      	bne.n	80040ec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040dc:	4b30      	ldr	r3, [pc, #192]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0de      	b.n	80042aa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040ec:	4b2c      	ldr	r3, [pc, #176]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0d6      	b.n	80042aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040fc:	4b28      	ldr	r3, [pc, #160]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	f023 0207 	bic.w	r2, r3, #7
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4925      	ldr	r1, [pc, #148]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 800410a:	4313      	orrs	r3, r2
 800410c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410e:	f7fe ff89 	bl	8003024 <HAL_GetTick>
 8004112:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004114:	e00a      	b.n	800412c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004116:	f7fe ff85 	bl	8003024 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	f241 3288 	movw	r2, #5000	; 0x1388
 8004124:	4293      	cmp	r3, r2
 8004126:	d901      	bls.n	800412c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e0be      	b.n	80042aa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412c:	4b1c      	ldr	r3, [pc, #112]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	429a      	cmp	r2, r3
 800413c:	d1eb      	bne.n	8004116 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d010      	beq.n	800416c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	429a      	cmp	r2, r3
 8004158:	d208      	bcs.n	800416c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800415a:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	f023 020f 	bic.w	r2, r3, #15
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	490e      	ldr	r1, [pc, #56]	; (80041a0 <HAL_RCC_ClockConfig+0x244>)
 8004168:	4313      	orrs	r3, r2
 800416a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800416c:	4b0b      	ldr	r3, [pc, #44]	; (800419c <HAL_RCC_ClockConfig+0x240>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 030f 	and.w	r3, r3, #15
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d214      	bcs.n	80041a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417a:	4b08      	ldr	r3, [pc, #32]	; (800419c <HAL_RCC_ClockConfig+0x240>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f023 020f 	bic.w	r2, r3, #15
 8004182:	4906      	ldr	r1, [pc, #24]	; (800419c <HAL_RCC_ClockConfig+0x240>)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	4313      	orrs	r3, r2
 8004188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418a:	4b04      	ldr	r3, [pc, #16]	; (800419c <HAL_RCC_ClockConfig+0x240>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d005      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e086      	b.n	80042aa <HAL_RCC_ClockConfig+0x34e>
 800419c:	52002000 	.word	0x52002000
 80041a0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d010      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	4b3f      	ldr	r3, [pc, #252]	; (80042b4 <HAL_RCC_ClockConfig+0x358>)
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041bc:	429a      	cmp	r2, r3
 80041be:	d208      	bcs.n	80041d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041c0:	4b3c      	ldr	r3, [pc, #240]	; (80042b4 <HAL_RCC_ClockConfig+0x358>)
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	4939      	ldr	r1, [pc, #228]	; (80042b4 <HAL_RCC_ClockConfig+0x358>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d010      	beq.n	8004200 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695a      	ldr	r2, [r3, #20]
 80041e2:	4b34      	ldr	r3, [pc, #208]	; (80042b4 <HAL_RCC_ClockConfig+0x358>)
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d208      	bcs.n	8004200 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041ee:	4b31      	ldr	r3, [pc, #196]	; (80042b4 <HAL_RCC_ClockConfig+0x358>)
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	492e      	ldr	r1, [pc, #184]	; (80042b4 <HAL_RCC_ClockConfig+0x358>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0310 	and.w	r3, r3, #16
 8004208:	2b00      	cmp	r3, #0
 800420a:	d010      	beq.n	800422e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	699a      	ldr	r2, [r3, #24]
 8004210:	4b28      	ldr	r3, [pc, #160]	; (80042b4 <HAL_RCC_ClockConfig+0x358>)
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004218:	429a      	cmp	r2, r3
 800421a:	d208      	bcs.n	800422e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800421c:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <HAL_RCC_ClockConfig+0x358>)
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	4922      	ldr	r1, [pc, #136]	; (80042b4 <HAL_RCC_ClockConfig+0x358>)
 800422a:	4313      	orrs	r3, r2
 800422c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b00      	cmp	r3, #0
 8004238:	d010      	beq.n	800425c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69da      	ldr	r2, [r3, #28]
 800423e:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <HAL_RCC_ClockConfig+0x358>)
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004246:	429a      	cmp	r2, r3
 8004248:	d208      	bcs.n	800425c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800424a:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <HAL_RCC_ClockConfig+0x358>)
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	4917      	ldr	r1, [pc, #92]	; (80042b4 <HAL_RCC_ClockConfig+0x358>)
 8004258:	4313      	orrs	r3, r2
 800425a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800425c:	f000 f834 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8004260:	4602      	mov	r2, r0
 8004262:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <HAL_RCC_ClockConfig+0x358>)
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	0a1b      	lsrs	r3, r3, #8
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	4912      	ldr	r1, [pc, #72]	; (80042b8 <HAL_RCC_ClockConfig+0x35c>)
 800426e:	5ccb      	ldrb	r3, [r1, r3]
 8004270:	f003 031f 	and.w	r3, r3, #31
 8004274:	fa22 f303 	lsr.w	r3, r2, r3
 8004278:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800427a:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <HAL_RCC_ClockConfig+0x358>)
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	4a0d      	ldr	r2, [pc, #52]	; (80042b8 <HAL_RCC_ClockConfig+0x35c>)
 8004284:	5cd3      	ldrb	r3, [r2, r3]
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
 8004290:	4a0a      	ldr	r2, [pc, #40]	; (80042bc <HAL_RCC_ClockConfig+0x360>)
 8004292:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004294:	4a0a      	ldr	r2, [pc, #40]	; (80042c0 <HAL_RCC_ClockConfig+0x364>)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800429a:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <HAL_RCC_ClockConfig+0x368>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fe fe76 	bl	8002f90 <HAL_InitTick>
 80042a4:	4603      	mov	r3, r0
 80042a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	58024400 	.word	0x58024400
 80042b8:	08018d68 	.word	0x08018d68
 80042bc:	2400002c 	.word	0x2400002c
 80042c0:	24000028 	.word	0x24000028
 80042c4:	24000030 	.word	0x24000030

080042c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b089      	sub	sp, #36	; 0x24
 80042cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042ce:	4bb3      	ldr	r3, [pc, #716]	; (800459c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042d6:	2b18      	cmp	r3, #24
 80042d8:	f200 8155 	bhi.w	8004586 <HAL_RCC_GetSysClockFreq+0x2be>
 80042dc:	a201      	add	r2, pc, #4	; (adr r2, 80042e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80042de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e2:	bf00      	nop
 80042e4:	08004349 	.word	0x08004349
 80042e8:	08004587 	.word	0x08004587
 80042ec:	08004587 	.word	0x08004587
 80042f0:	08004587 	.word	0x08004587
 80042f4:	08004587 	.word	0x08004587
 80042f8:	08004587 	.word	0x08004587
 80042fc:	08004587 	.word	0x08004587
 8004300:	08004587 	.word	0x08004587
 8004304:	0800436f 	.word	0x0800436f
 8004308:	08004587 	.word	0x08004587
 800430c:	08004587 	.word	0x08004587
 8004310:	08004587 	.word	0x08004587
 8004314:	08004587 	.word	0x08004587
 8004318:	08004587 	.word	0x08004587
 800431c:	08004587 	.word	0x08004587
 8004320:	08004587 	.word	0x08004587
 8004324:	08004375 	.word	0x08004375
 8004328:	08004587 	.word	0x08004587
 800432c:	08004587 	.word	0x08004587
 8004330:	08004587 	.word	0x08004587
 8004334:	08004587 	.word	0x08004587
 8004338:	08004587 	.word	0x08004587
 800433c:	08004587 	.word	0x08004587
 8004340:	08004587 	.word	0x08004587
 8004344:	0800437b 	.word	0x0800437b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004348:	4b94      	ldr	r3, [pc, #592]	; (800459c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b00      	cmp	r3, #0
 8004352:	d009      	beq.n	8004368 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004354:	4b91      	ldr	r3, [pc, #580]	; (800459c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	08db      	lsrs	r3, r3, #3
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	4a90      	ldr	r2, [pc, #576]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004360:	fa22 f303 	lsr.w	r3, r2, r3
 8004364:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004366:	e111      	b.n	800458c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004368:	4b8d      	ldr	r3, [pc, #564]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800436a:	61bb      	str	r3, [r7, #24]
    break;
 800436c:	e10e      	b.n	800458c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800436e:	4b8d      	ldr	r3, [pc, #564]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004370:	61bb      	str	r3, [r7, #24]
    break;
 8004372:	e10b      	b.n	800458c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004374:	4b8c      	ldr	r3, [pc, #560]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004376:	61bb      	str	r3, [r7, #24]
    break;
 8004378:	e108      	b.n	800458c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800437a:	4b88      	ldr	r3, [pc, #544]	; (800459c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004384:	4b85      	ldr	r3, [pc, #532]	; (800459c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800438e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004390:	4b82      	ldr	r3, [pc, #520]	; (800459c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800439a:	4b80      	ldr	r3, [pc, #512]	; (800459c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800439c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439e:	08db      	lsrs	r3, r3, #3
 80043a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	fb02 f303 	mul.w	r3, r2, r3
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 80e1 	beq.w	8004580 <HAL_RCC_GetSysClockFreq+0x2b8>
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	f000 8083 	beq.w	80044cc <HAL_RCC_GetSysClockFreq+0x204>
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	f200 80a1 	bhi.w	8004510 <HAL_RCC_GetSysClockFreq+0x248>
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_RCC_GetSysClockFreq+0x114>
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d056      	beq.n	8004488 <HAL_RCC_GetSysClockFreq+0x1c0>
 80043da:	e099      	b.n	8004510 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043dc:	4b6f      	ldr	r3, [pc, #444]	; (800459c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0320 	and.w	r3, r3, #32
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d02d      	beq.n	8004444 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043e8:	4b6c      	ldr	r3, [pc, #432]	; (800459c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	08db      	lsrs	r3, r3, #3
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	4a6b      	ldr	r2, [pc, #428]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
 80043f8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	ee07 3a90 	vmov	s15, r3
 8004400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	ee07 3a90 	vmov	s15, r3
 800440a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004412:	4b62      	ldr	r3, [pc, #392]	; (800459c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004422:	ed97 6a02 	vldr	s12, [r7, #8]
 8004426:	eddf 5a61 	vldr	s11, [pc, #388]	; 80045ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800442a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800442e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800443a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004442:	e087      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	ee07 3a90 	vmov	s15, r3
 800444a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80045b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004456:	4b51      	ldr	r3, [pc, #324]	; (800459c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004466:	ed97 6a02 	vldr	s12, [r7, #8]
 800446a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80045ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800446e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800447a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800447e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004486:	e065      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	ee07 3a90 	vmov	s15, r3
 800448e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004492:	eddf 6a48 	vldr	s13, [pc, #288]	; 80045b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800449a:	4b40      	ldr	r3, [pc, #256]	; (800459c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a2:	ee07 3a90 	vmov	s15, r3
 80044a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80044ae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80045ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80044b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044ca:	e043      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	ee07 3a90 	vmov	s15, r3
 80044d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80045b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80044da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044de:	4b2f      	ldr	r3, [pc, #188]	; (800459c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e6:	ee07 3a90 	vmov	s15, r3
 80044ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80044f2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80045ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80044f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800450a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800450e:	e021      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	ee07 3a90 	vmov	s15, r3
 8004516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80045b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800451e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004522:	4b1e      	ldr	r3, [pc, #120]	; (800459c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004532:	ed97 6a02 	vldr	s12, [r7, #8]
 8004536:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80045ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800453a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800453e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800454a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800454e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004552:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004554:	4b11      	ldr	r3, [pc, #68]	; (800459c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004558:	0a5b      	lsrs	r3, r3, #9
 800455a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800455e:	3301      	adds	r3, #1
 8004560:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	ee07 3a90 	vmov	s15, r3
 8004568:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800456c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004578:	ee17 3a90 	vmov	r3, s15
 800457c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800457e:	e005      	b.n	800458c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	61bb      	str	r3, [r7, #24]
    break;
 8004584:	e002      	b.n	800458c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004586:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004588:	61bb      	str	r3, [r7, #24]
    break;
 800458a:	bf00      	nop
  }

  return sysclockfreq;
 800458c:	69bb      	ldr	r3, [r7, #24]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3724      	adds	r7, #36	; 0x24
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	58024400 	.word	0x58024400
 80045a0:	03d09000 	.word	0x03d09000
 80045a4:	003d0900 	.word	0x003d0900
 80045a8:	007a1200 	.word	0x007a1200
 80045ac:	46000000 	.word	0x46000000
 80045b0:	4c742400 	.word	0x4c742400
 80045b4:	4a742400 	.word	0x4a742400
 80045b8:	4af42400 	.word	0x4af42400

080045bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80045c2:	f7ff fe81 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 80045c6:	4602      	mov	r2, r0
 80045c8:	4b10      	ldr	r3, [pc, #64]	; (800460c <HAL_RCC_GetHCLKFreq+0x50>)
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	0a1b      	lsrs	r3, r3, #8
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	490f      	ldr	r1, [pc, #60]	; (8004610 <HAL_RCC_GetHCLKFreq+0x54>)
 80045d4:	5ccb      	ldrb	r3, [r1, r3]
 80045d6:	f003 031f 	and.w	r3, r3, #31
 80045da:	fa22 f303 	lsr.w	r3, r2, r3
 80045de:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80045e0:	4b0a      	ldr	r3, [pc, #40]	; (800460c <HAL_RCC_GetHCLKFreq+0x50>)
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	f003 030f 	and.w	r3, r3, #15
 80045e8:	4a09      	ldr	r2, [pc, #36]	; (8004610 <HAL_RCC_GetHCLKFreq+0x54>)
 80045ea:	5cd3      	ldrb	r3, [r2, r3]
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	fa22 f303 	lsr.w	r3, r2, r3
 80045f6:	4a07      	ldr	r2, [pc, #28]	; (8004614 <HAL_RCC_GetHCLKFreq+0x58>)
 80045f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045fa:	4a07      	ldr	r2, [pc, #28]	; (8004618 <HAL_RCC_GetHCLKFreq+0x5c>)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004600:	4b04      	ldr	r3, [pc, #16]	; (8004614 <HAL_RCC_GetHCLKFreq+0x58>)
 8004602:	681b      	ldr	r3, [r3, #0]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	58024400 	.word	0x58024400
 8004610:	08018d68 	.word	0x08018d68
 8004614:	2400002c 	.word	0x2400002c
 8004618:	24000028 	.word	0x24000028

0800461c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004620:	f7ff ffcc 	bl	80045bc <HAL_RCC_GetHCLKFreq>
 8004624:	4602      	mov	r2, r0
 8004626:	4b06      	ldr	r3, [pc, #24]	; (8004640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	091b      	lsrs	r3, r3, #4
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	4904      	ldr	r1, [pc, #16]	; (8004644 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004632:	5ccb      	ldrb	r3, [r1, r3]
 8004634:	f003 031f 	and.w	r3, r3, #31
 8004638:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800463c:	4618      	mov	r0, r3
 800463e:	bd80      	pop	{r7, pc}
 8004640:	58024400 	.word	0x58024400
 8004644:	08018d68 	.word	0x08018d68

08004648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800464c:	f7ff ffb6 	bl	80045bc <HAL_RCC_GetHCLKFreq>
 8004650:	4602      	mov	r2, r0
 8004652:	4b06      	ldr	r3, [pc, #24]	; (800466c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	0a1b      	lsrs	r3, r3, #8
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	4904      	ldr	r1, [pc, #16]	; (8004670 <HAL_RCC_GetPCLK2Freq+0x28>)
 800465e:	5ccb      	ldrb	r3, [r1, r3]
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004668:	4618      	mov	r0, r3
 800466a:	bd80      	pop	{r7, pc}
 800466c:	58024400 	.word	0x58024400
 8004670:	08018d68 	.word	0x08018d68

08004674 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800467c:	2300      	movs	r3, #0
 800467e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004680:	2300      	movs	r3, #0
 8004682:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d03f      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004694:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004698:	d02a      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800469a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800469e:	d824      	bhi.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046a4:	d018      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046aa:	d81e      	bhi.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80046b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b4:	d007      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80046b6:	e018      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b8:	4b9f      	ldr	r3, [pc, #636]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	4a9e      	ldr	r2, [pc, #632]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80046c4:	e015      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3304      	adds	r3, #4
 80046ca:	2102      	movs	r1, #2
 80046cc:	4618      	mov	r0, r3
 80046ce:	f001 f99b 	bl	8005a08 <RCCEx_PLL2_Config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80046d6:	e00c      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3324      	adds	r3, #36	; 0x24
 80046dc:	2102      	movs	r1, #2
 80046de:	4618      	mov	r0, r3
 80046e0:	f001 fa44 	bl	8005b6c <RCCEx_PLL3_Config>
 80046e4:	4603      	mov	r3, r0
 80046e6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80046e8:	e003      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	75fb      	strb	r3, [r7, #23]
      break;
 80046ee:	e000      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80046f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046f2:	7dfb      	ldrb	r3, [r7, #23]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d109      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80046f8:	4b8f      	ldr	r3, [pc, #572]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004704:	498c      	ldr	r1, [pc, #560]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004706:	4313      	orrs	r3, r2
 8004708:	650b      	str	r3, [r1, #80]	; 0x50
 800470a:	e001      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470c:	7dfb      	ldrb	r3, [r7, #23]
 800470e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004718:	2b00      	cmp	r3, #0
 800471a:	d03d      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004720:	2b04      	cmp	r3, #4
 8004722:	d826      	bhi.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004724:	a201      	add	r2, pc, #4	; (adr r2, 800472c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	08004741 	.word	0x08004741
 8004730:	0800474f 	.word	0x0800474f
 8004734:	08004761 	.word	0x08004761
 8004738:	08004779 	.word	0x08004779
 800473c:	08004779 	.word	0x08004779
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004740:	4b7d      	ldr	r3, [pc, #500]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	4a7c      	ldr	r2, [pc, #496]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800474a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800474c:	e015      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3304      	adds	r3, #4
 8004752:	2100      	movs	r1, #0
 8004754:	4618      	mov	r0, r3
 8004756:	f001 f957 	bl	8005a08 <RCCEx_PLL2_Config>
 800475a:	4603      	mov	r3, r0
 800475c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800475e:	e00c      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3324      	adds	r3, #36	; 0x24
 8004764:	2100      	movs	r1, #0
 8004766:	4618      	mov	r0, r3
 8004768:	f001 fa00 	bl	8005b6c <RCCEx_PLL3_Config>
 800476c:	4603      	mov	r3, r0
 800476e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004770:	e003      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	75fb      	strb	r3, [r7, #23]
      break;
 8004776:	e000      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004778:	bf00      	nop
    }

    if(ret == HAL_OK)
 800477a:	7dfb      	ldrb	r3, [r7, #23]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d109      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004780:	4b6d      	ldr	r3, [pc, #436]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004784:	f023 0207 	bic.w	r2, r3, #7
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478c:	496a      	ldr	r1, [pc, #424]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800478e:	4313      	orrs	r3, r2
 8004790:	650b      	str	r3, [r1, #80]	; 0x50
 8004792:	e001      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004794:	7dfb      	ldrb	r3, [r7, #23]
 8004796:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d04a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80047ac:	d031      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80047ae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80047b2:	d82b      	bhi.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x198>
 80047b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b8:	d02d      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80047ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047be:	d825      	bhi.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x198>
 80047c0:	2bc0      	cmp	r3, #192	; 0xc0
 80047c2:	d02a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80047c4:	2bc0      	cmp	r3, #192	; 0xc0
 80047c6:	d821      	bhi.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x198>
 80047c8:	2b80      	cmp	r3, #128	; 0x80
 80047ca:	d016      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x186>
 80047cc:	2b80      	cmp	r3, #128	; 0x80
 80047ce:	d81d      	bhi.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x198>
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x166>
 80047d4:	2b40      	cmp	r3, #64	; 0x40
 80047d6:	d007      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80047d8:	e018      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047da:	4b57      	ldr	r3, [pc, #348]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	4a56      	ldr	r2, [pc, #344]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80047e6:	e019      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3304      	adds	r3, #4
 80047ec:	2100      	movs	r1, #0
 80047ee:	4618      	mov	r0, r3
 80047f0:	f001 f90a 	bl	8005a08 <RCCEx_PLL2_Config>
 80047f4:	4603      	mov	r3, r0
 80047f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80047f8:	e010      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3324      	adds	r3, #36	; 0x24
 80047fe:	2100      	movs	r1, #0
 8004800:	4618      	mov	r0, r3
 8004802:	f001 f9b3 	bl	8005b6c <RCCEx_PLL3_Config>
 8004806:	4603      	mov	r3, r0
 8004808:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800480a:	e007      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	75fb      	strb	r3, [r7, #23]
      break;
 8004810:	e004      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004812:	bf00      	nop
 8004814:	e002      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004816:	bf00      	nop
 8004818:	e000      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800481a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800481c:	7dfb      	ldrb	r3, [r7, #23]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d109      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004822:	4b45      	ldr	r3, [pc, #276]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004826:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482e:	4942      	ldr	r1, [pc, #264]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004830:	4313      	orrs	r3, r2
 8004832:	650b      	str	r3, [r1, #80]	; 0x50
 8004834:	e001      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004836:	7dfb      	ldrb	r3, [r7, #23]
 8004838:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004842:	2b00      	cmp	r3, #0
 8004844:	d04f      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800484e:	d036      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004850:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004854:	d830      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800485a:	d032      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800485c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004860:	d82a      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004862:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004866:	d02e      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004868:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800486c:	d824      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800486e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004872:	d018      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8004874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004878:	d81e      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800487e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004882:	d007      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004884:	e018      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004886:	4b2c      	ldr	r3, [pc, #176]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488a:	4a2b      	ldr	r2, [pc, #172]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800488c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004890:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004892:	e019      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3304      	adds	r3, #4
 8004898:	2100      	movs	r1, #0
 800489a:	4618      	mov	r0, r3
 800489c:	f001 f8b4 	bl	8005a08 <RCCEx_PLL2_Config>
 80048a0:	4603      	mov	r3, r0
 80048a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80048a4:	e010      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3324      	adds	r3, #36	; 0x24
 80048aa:	2100      	movs	r1, #0
 80048ac:	4618      	mov	r0, r3
 80048ae:	f001 f95d 	bl	8005b6c <RCCEx_PLL3_Config>
 80048b2:	4603      	mov	r3, r0
 80048b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80048b6:	e007      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	75fb      	strb	r3, [r7, #23]
      break;
 80048bc:	e004      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80048be:	bf00      	nop
 80048c0:	e002      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80048c2:	bf00      	nop
 80048c4:	e000      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80048c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048c8:	7dfb      	ldrb	r3, [r7, #23]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80048ce:	4b1a      	ldr	r3, [pc, #104]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d2:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048da:	4917      	ldr	r1, [pc, #92]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	650b      	str	r3, [r1, #80]	; 0x50
 80048e0:	e001      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
 80048e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d034      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f6:	2b30      	cmp	r3, #48	; 0x30
 80048f8:	d01c      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80048fa:	2b30      	cmp	r3, #48	; 0x30
 80048fc:	d817      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d00c      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004902:	2b20      	cmp	r3, #32
 8004904:	d813      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004906:	2b00      	cmp	r3, #0
 8004908:	d018      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800490a:	2b10      	cmp	r3, #16
 800490c:	d10f      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800490e:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004912:	4a09      	ldr	r2, [pc, #36]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004918:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800491a:	e010      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3304      	adds	r3, #4
 8004920:	2102      	movs	r1, #2
 8004922:	4618      	mov	r0, r3
 8004924:	f001 f870 	bl	8005a08 <RCCEx_PLL2_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800492c:	e007      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
      break;
 8004932:	e004      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8004934:	bf00      	nop
 8004936:	e002      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004938:	58024400 	.word	0x58024400
      break;
 800493c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800493e:	7dfb      	ldrb	r3, [r7, #23]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d109      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004944:	4b9b      	ldr	r3, [pc, #620]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004948:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004950:	4998      	ldr	r1, [pc, #608]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004952:	4313      	orrs	r3, r2
 8004954:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004956:	e001      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004958:	7dfb      	ldrb	r3, [r7, #23]
 800495a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d047      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800496c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004970:	d030      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004972:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004976:	d82a      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004978:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800497c:	d02c      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800497e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004982:	d824      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004988:	d018      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x348>
 800498a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800498e:	d81e      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004998:	d007      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x336>
 800499a:	e018      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800499c:	4b85      	ldr	r3, [pc, #532]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	4a84      	ldr	r2, [pc, #528]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80049a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049a8:	e017      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3304      	adds	r3, #4
 80049ae:	2100      	movs	r1, #0
 80049b0:	4618      	mov	r0, r3
 80049b2:	f001 f829 	bl	8005a08 <RCCEx_PLL2_Config>
 80049b6:	4603      	mov	r3, r0
 80049b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049ba:	e00e      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3324      	adds	r3, #36	; 0x24
 80049c0:	2100      	movs	r1, #0
 80049c2:	4618      	mov	r0, r3
 80049c4:	f001 f8d2 	bl	8005b6c <RCCEx_PLL3_Config>
 80049c8:	4603      	mov	r3, r0
 80049ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049cc:	e005      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	75fb      	strb	r3, [r7, #23]
      break;
 80049d2:	e002      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80049d4:	bf00      	nop
 80049d6:	e000      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80049d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049da:	7dfb      	ldrb	r3, [r7, #23]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d109      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80049e0:	4b74      	ldr	r3, [pc, #464]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80049e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ec:	4971      	ldr	r1, [pc, #452]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	650b      	str	r3, [r1, #80]	; 0x50
 80049f2:	e001      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f4:	7dfb      	ldrb	r3, [r7, #23]
 80049f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d049      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a0c:	d02e      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004a0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a12:	d828      	bhi.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004a14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a18:	d02a      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004a1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a1e:	d822      	bhi.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004a20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a24:	d026      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004a26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a2a:	d81c      	bhi.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004a2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a30:	d010      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004a32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a36:	d816      	bhi.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01d      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a40:	d111      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	3304      	adds	r3, #4
 8004a46:	2101      	movs	r1, #1
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 ffdd 	bl	8005a08 <RCCEx_PLL2_Config>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a52:	e012      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3324      	adds	r3, #36	; 0x24
 8004a58:	2101      	movs	r1, #1
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 f886 	bl	8005b6c <RCCEx_PLL3_Config>
 8004a60:	4603      	mov	r3, r0
 8004a62:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a64:	e009      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	75fb      	strb	r3, [r7, #23]
      break;
 8004a6a:	e006      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004a6c:	bf00      	nop
 8004a6e:	e004      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004a70:	bf00      	nop
 8004a72:	e002      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004a74:	bf00      	nop
 8004a76:	e000      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a7a:	7dfb      	ldrb	r3, [r7, #23]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d109      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a80:	4b4c      	ldr	r3, [pc, #304]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a84:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a8c:	4949      	ldr	r1, [pc, #292]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	650b      	str	r3, [r1, #80]	; 0x50
 8004a92:	e001      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a94:	7dfb      	ldrb	r3, [r7, #23]
 8004a96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d053      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004aaa:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004aae:	d034      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004ab0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004ab4:	d82e      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004aba:	d030      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ac0:	d828      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac6:	d02c      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004acc:	d822      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004ace:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ad2:	d028      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004ad4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ad8:	d81c      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004ada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ade:	d010      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae4:	d816      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d01f      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004aea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aee:	d111      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3304      	adds	r3, #4
 8004af4:	2101      	movs	r1, #1
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 ff86 	bl	8005a08 <RCCEx_PLL2_Config>
 8004afc:	4603      	mov	r3, r0
 8004afe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b00:	e014      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3324      	adds	r3, #36	; 0x24
 8004b06:	2101      	movs	r1, #1
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f001 f82f 	bl	8005b6c <RCCEx_PLL3_Config>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b12:	e00b      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	75fb      	strb	r3, [r7, #23]
      break;
 8004b18:	e008      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004b1a:	bf00      	nop
 8004b1c:	e006      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004b1e:	bf00      	nop
 8004b20:	e004      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004b22:	bf00      	nop
 8004b24:	e002      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004b26:	bf00      	nop
 8004b28:	e000      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b2c:	7dfb      	ldrb	r3, [r7, #23]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10a      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b32:	4b20      	ldr	r3, [pc, #128]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b36:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b40:	491c      	ldr	r1, [pc, #112]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	658b      	str	r3, [r1, #88]	; 0x58
 8004b46:	e001      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b48:	7dfb      	ldrb	r3, [r7, #23]
 8004b4a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d031      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b60:	d00e      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004b62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b66:	d814      	bhi.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d015      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004b6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b70:	d10f      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b72:	4b10      	ldr	r3, [pc, #64]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	4a0f      	ldr	r2, [pc, #60]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b7e:	e00c      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3304      	adds	r3, #4
 8004b84:	2101      	movs	r1, #1
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 ff3e 	bl	8005a08 <RCCEx_PLL2_Config>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b90:	e003      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	75fb      	strb	r3, [r7, #23]
      break;
 8004b96:	e000      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8004b98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b9a:	7dfb      	ldrb	r3, [r7, #23]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10b      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ba0:	4b04      	ldr	r3, [pc, #16]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bac:	4901      	ldr	r1, [pc, #4]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	650b      	str	r3, [r1, #80]	; 0x50
 8004bb2:	e003      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x548>
 8004bb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb8:	7dfb      	ldrb	r3, [r7, #23]
 8004bba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d032      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	d81b      	bhi.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004bd0:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd6:	bf00      	nop
 8004bd8:	08004c0f 	.word	0x08004c0f
 8004bdc:	08004be9 	.word	0x08004be9
 8004be0:	08004bf7 	.word	0x08004bf7
 8004be4:	08004c0f 	.word	0x08004c0f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004be8:	4bb2      	ldr	r3, [pc, #712]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	4ab1      	ldr	r2, [pc, #708]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004bf4:	e00c      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	2102      	movs	r1, #2
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 ff03 	bl	8005a08 <RCCEx_PLL2_Config>
 8004c02:	4603      	mov	r3, r0
 8004c04:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004c06:	e003      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c0c:	e000      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c10:	7dfb      	ldrb	r3, [r7, #23]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d109      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004c16:	4ba7      	ldr	r3, [pc, #668]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1a:	f023 0203 	bic.w	r2, r3, #3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c22:	49a4      	ldr	r1, [pc, #656]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c28:	e001      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
 8004c2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 8086 	beq.w	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c3c:	4b9e      	ldr	r3, [pc, #632]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a9d      	ldr	r2, [pc, #628]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c48:	f7fe f9ec 	bl	8003024 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c4e:	e009      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c50:	f7fe f9e8 	bl	8003024 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b64      	cmp	r3, #100	; 0x64
 8004c5c:	d902      	bls.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	75fb      	strb	r3, [r7, #23]
        break;
 8004c62:	e005      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c64:	4b94      	ldr	r3, [pc, #592]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0ef      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d166      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004c76:	4b8f      	ldr	r3, [pc, #572]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c80:	4053      	eors	r3, r2
 8004c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d013      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c8a:	4b8a      	ldr	r3, [pc, #552]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c92:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c94:	4b87      	ldr	r3, [pc, #540]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c98:	4a86      	ldr	r2, [pc, #536]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c9e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ca0:	4b84      	ldr	r3, [pc, #528]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca4:	4a83      	ldr	r2, [pc, #524]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004caa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004cac:	4a81      	ldr	r2, [pc, #516]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cbc:	d115      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbe:	f7fe f9b1 	bl	8003024 <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cc4:	e00b      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc6:	f7fe f9ad 	bl	8003024 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d902      	bls.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	75fb      	strb	r3, [r7, #23]
            break;
 8004cdc:	e005      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cde:	4b75      	ldr	r3, [pc, #468]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0ed      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8004cea:	7dfb      	ldrb	r3, [r7, #23]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d126      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cfe:	d10d      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8004d00:	4b6c      	ldr	r3, [pc, #432]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d0e:	0919      	lsrs	r1, r3, #4
 8004d10:	4b6a      	ldr	r3, [pc, #424]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004d12:	400b      	ands	r3, r1
 8004d14:	4967      	ldr	r1, [pc, #412]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	610b      	str	r3, [r1, #16]
 8004d1a:	e005      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8004d1c:	4b65      	ldr	r3, [pc, #404]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	4a64      	ldr	r2, [pc, #400]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d26:	6113      	str	r3, [r2, #16]
 8004d28:	4b62      	ldr	r3, [pc, #392]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d36:	495f      	ldr	r1, [pc, #380]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	670b      	str	r3, [r1, #112]	; 0x70
 8004d3c:	e004      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d3e:	7dfb      	ldrb	r3, [r7, #23]
 8004d40:	75bb      	strb	r3, [r7, #22]
 8004d42:	e001      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d44:	7dfb      	ldrb	r3, [r7, #23]
 8004d46:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d07f      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d5a:	2b28      	cmp	r3, #40	; 0x28
 8004d5c:	d866      	bhi.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8004d5e:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8004d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d64:	08004e33 	.word	0x08004e33
 8004d68:	08004e2d 	.word	0x08004e2d
 8004d6c:	08004e2d 	.word	0x08004e2d
 8004d70:	08004e2d 	.word	0x08004e2d
 8004d74:	08004e2d 	.word	0x08004e2d
 8004d78:	08004e2d 	.word	0x08004e2d
 8004d7c:	08004e2d 	.word	0x08004e2d
 8004d80:	08004e2d 	.word	0x08004e2d
 8004d84:	08004e09 	.word	0x08004e09
 8004d88:	08004e2d 	.word	0x08004e2d
 8004d8c:	08004e2d 	.word	0x08004e2d
 8004d90:	08004e2d 	.word	0x08004e2d
 8004d94:	08004e2d 	.word	0x08004e2d
 8004d98:	08004e2d 	.word	0x08004e2d
 8004d9c:	08004e2d 	.word	0x08004e2d
 8004da0:	08004e2d 	.word	0x08004e2d
 8004da4:	08004e1b 	.word	0x08004e1b
 8004da8:	08004e2d 	.word	0x08004e2d
 8004dac:	08004e2d 	.word	0x08004e2d
 8004db0:	08004e2d 	.word	0x08004e2d
 8004db4:	08004e2d 	.word	0x08004e2d
 8004db8:	08004e2d 	.word	0x08004e2d
 8004dbc:	08004e2d 	.word	0x08004e2d
 8004dc0:	08004e2d 	.word	0x08004e2d
 8004dc4:	08004e33 	.word	0x08004e33
 8004dc8:	08004e2d 	.word	0x08004e2d
 8004dcc:	08004e2d 	.word	0x08004e2d
 8004dd0:	08004e2d 	.word	0x08004e2d
 8004dd4:	08004e2d 	.word	0x08004e2d
 8004dd8:	08004e2d 	.word	0x08004e2d
 8004ddc:	08004e2d 	.word	0x08004e2d
 8004de0:	08004e2d 	.word	0x08004e2d
 8004de4:	08004e33 	.word	0x08004e33
 8004de8:	08004e2d 	.word	0x08004e2d
 8004dec:	08004e2d 	.word	0x08004e2d
 8004df0:	08004e2d 	.word	0x08004e2d
 8004df4:	08004e2d 	.word	0x08004e2d
 8004df8:	08004e2d 	.word	0x08004e2d
 8004dfc:	08004e2d 	.word	0x08004e2d
 8004e00:	08004e2d 	.word	0x08004e2d
 8004e04:	08004e33 	.word	0x08004e33
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 fdfa 	bl	8005a08 <RCCEx_PLL2_Config>
 8004e14:	4603      	mov	r3, r0
 8004e16:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e18:	e00c      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3324      	adds	r3, #36	; 0x24
 8004e1e:	2101      	movs	r1, #1
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 fea3 	bl	8005b6c <RCCEx_PLL3_Config>
 8004e26:	4603      	mov	r3, r0
 8004e28:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e2a:	e003      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e30:	e000      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8004e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e34:	7dfb      	ldrb	r3, [r7, #23]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10a      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e3a:	4b1e      	ldr	r3, [pc, #120]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e48:	491a      	ldr	r1, [pc, #104]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	654b      	str	r3, [r1, #84]	; 0x54
 8004e4e:	e001      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
 8004e52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d03f      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e64:	2b05      	cmp	r3, #5
 8004e66:	d821      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x838>
 8004e68:	a201      	add	r2, pc, #4	; (adr r2, 8004e70 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8004e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6e:	bf00      	nop
 8004e70:	08004ec1 	.word	0x08004ec1
 8004e74:	08004e89 	.word	0x08004e89
 8004e78:	08004e9b 	.word	0x08004e9b
 8004e7c:	08004ec1 	.word	0x08004ec1
 8004e80:	08004ec1 	.word	0x08004ec1
 8004e84:	08004ec1 	.word	0x08004ec1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fdba 	bl	8005a08 <RCCEx_PLL2_Config>
 8004e94:	4603      	mov	r3, r0
 8004e96:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e98:	e013      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3324      	adds	r3, #36	; 0x24
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fe63 	bl	8005b6c <RCCEx_PLL3_Config>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004eaa:	e00a      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	75fb      	strb	r3, [r7, #23]
      break;
 8004eb0:	e007      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8004eb2:	bf00      	nop
 8004eb4:	58024400 	.word	0x58024400
 8004eb8:	58024800 	.word	0x58024800
 8004ebc:	00ffffcf 	.word	0x00ffffcf
      break;
 8004ec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec2:	7dfb      	ldrb	r3, [r7, #23]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d109      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ec8:	4b9f      	ldr	r3, [pc, #636]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ecc:	f023 0207 	bic.w	r2, r3, #7
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed4:	499c      	ldr	r1, [pc, #624]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	654b      	str	r3, [r1, #84]	; 0x54
 8004eda:	e001      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d039      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	d820      	bhi.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8004ef6:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8004ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efc:	08004f3f 	.word	0x08004f3f
 8004f00:	08004f15 	.word	0x08004f15
 8004f04:	08004f27 	.word	0x08004f27
 8004f08:	08004f3f 	.word	0x08004f3f
 8004f0c:	08004f3f 	.word	0x08004f3f
 8004f10:	08004f3f 	.word	0x08004f3f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3304      	adds	r3, #4
 8004f18:	2101      	movs	r1, #1
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fd74 	bl	8005a08 <RCCEx_PLL2_Config>
 8004f20:	4603      	mov	r3, r0
 8004f22:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f24:	e00c      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3324      	adds	r3, #36	; 0x24
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fe1d 	bl	8005b6c <RCCEx_PLL3_Config>
 8004f32:	4603      	mov	r3, r0
 8004f34:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f36:	e003      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f3c:	e000      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8004f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f40:	7dfb      	ldrb	r3, [r7, #23]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10a      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f46:	4b80      	ldr	r3, [pc, #512]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4a:	f023 0207 	bic.w	r2, r3, #7
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f54:	497c      	ldr	r1, [pc, #496]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	658b      	str	r3, [r1, #88]	; 0x58
 8004f5a:	e001      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
 8004f5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d04b      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f76:	d02e      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f7c:	d828      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f82:	d02a      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f88:	d822      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004f8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f8e:	d026      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004f90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f94:	d81c      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f9a:	d010      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8004f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa0:	d816      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d01d      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004fa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004faa:	d111      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 fd28 	bl	8005a08 <RCCEx_PLL2_Config>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004fbc:	e012      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3324      	adds	r3, #36	; 0x24
 8004fc2:	2102      	movs	r1, #2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 fdd1 	bl	8005b6c <RCCEx_PLL3_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004fce:	e009      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004fd4:	e006      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004fd6:	bf00      	nop
 8004fd8:	e004      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004fda:	bf00      	nop
 8004fdc:	e002      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004fde:	bf00      	nop
 8004fe0:	e000      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004fe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fe4:	7dfb      	ldrb	r3, [r7, #23]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10a      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fea:	4b57      	ldr	r3, [pc, #348]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff8:	4953      	ldr	r1, [pc, #332]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	654b      	str	r3, [r1, #84]	; 0x54
 8004ffe:	e001      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005000:	7dfb      	ldrb	r3, [r7, #23]
 8005002:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500c:	2b00      	cmp	r3, #0
 800500e:	d04b      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005016:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800501a:	d02e      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800501c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005020:	d828      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005026:	d02a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502c:	d822      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800502e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005032:	d026      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005034:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005038:	d81c      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800503a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800503e:	d010      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005044:	d816      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005046:	2b00      	cmp	r3, #0
 8005048:	d01d      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800504a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504e:	d111      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3304      	adds	r3, #4
 8005054:	2100      	movs	r1, #0
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fcd6 	bl	8005a08 <RCCEx_PLL2_Config>
 800505c:	4603      	mov	r3, r0
 800505e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005060:	e012      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3324      	adds	r3, #36	; 0x24
 8005066:	2102      	movs	r1, #2
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fd7f 	bl	8005b6c <RCCEx_PLL3_Config>
 800506e:	4603      	mov	r3, r0
 8005070:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005072:	e009      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	75fb      	strb	r3, [r7, #23]
      break;
 8005078:	e006      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800507a:	bf00      	nop
 800507c:	e004      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800507e:	bf00      	nop
 8005080:	e002      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005082:	bf00      	nop
 8005084:	e000      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005086:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005088:	7dfb      	ldrb	r3, [r7, #23]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10a      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800508e:	4b2e      	ldr	r3, [pc, #184]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005092:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800509c:	492a      	ldr	r1, [pc, #168]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	658b      	str	r3, [r1, #88]	; 0x58
 80050a2:	e001      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a4:	7dfb      	ldrb	r3, [r7, #23]
 80050a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d04d      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050be:	d02e      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80050c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050c4:	d828      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80050c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ca:	d02a      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80050cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d0:	d822      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80050d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050d6:	d026      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80050d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050dc:	d81c      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80050de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050e2:	d010      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80050e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050e8:	d816      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d01d      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80050ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f2:	d111      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3304      	adds	r3, #4
 80050f8:	2100      	movs	r1, #0
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fc84 	bl	8005a08 <RCCEx_PLL2_Config>
 8005100:	4603      	mov	r3, r0
 8005102:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005104:	e012      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3324      	adds	r3, #36	; 0x24
 800510a:	2102      	movs	r1, #2
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fd2d 	bl	8005b6c <RCCEx_PLL3_Config>
 8005112:	4603      	mov	r3, r0
 8005114:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005116:	e009      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	75fb      	strb	r3, [r7, #23]
      break;
 800511c:	e006      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800511e:	bf00      	nop
 8005120:	e004      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005122:	bf00      	nop
 8005124:	e002      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005126:	bf00      	nop
 8005128:	e000      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800512a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800512c:	7dfb      	ldrb	r3, [r7, #23]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10c      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005132:	4b05      	ldr	r3, [pc, #20]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005136:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005140:	4901      	ldr	r1, [pc, #4]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005142:	4313      	orrs	r3, r2
 8005144:	658b      	str	r3, [r1, #88]	; 0x58
 8005146:	e003      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005148:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514c:	7dfb      	ldrb	r3, [r7, #23]
 800514e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b00      	cmp	r3, #0
 800515a:	d01a      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005166:	d10a      	bne.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3324      	adds	r3, #36	; 0x24
 800516c:	2102      	movs	r1, #2
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fcfc 	bl	8005b6c <RCCEx_PLL3_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800517e:	4b8c      	ldr	r3, [pc, #560]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005182:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518c:	4988      	ldr	r1, [pc, #544]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800518e:	4313      	orrs	r3, r2
 8005190:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0310 	and.w	r3, r3, #16
 800519a:	2b00      	cmp	r3, #0
 800519c:	d01a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a8:	d10a      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3324      	adds	r3, #36	; 0x24
 80051ae:	2102      	movs	r1, #2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fcdb 	bl	8005b6c <RCCEx_PLL3_Config>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051c0:	4b7b      	ldr	r3, [pc, #492]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80051c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051ce:	4978      	ldr	r1, [pc, #480]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d034      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80051e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ea:	d01d      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80051ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051f0:	d817      	bhi.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80051f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fa:	d009      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80051fc:	e011      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3304      	adds	r3, #4
 8005202:	2100      	movs	r1, #0
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fbff 	bl	8005a08 <RCCEx_PLL2_Config>
 800520a:	4603      	mov	r3, r0
 800520c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800520e:	e00c      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3324      	adds	r3, #36	; 0x24
 8005214:	2102      	movs	r1, #2
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fca8 	bl	8005b6c <RCCEx_PLL3_Config>
 800521c:	4603      	mov	r3, r0
 800521e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005220:	e003      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	75fb      	strb	r3, [r7, #23]
      break;
 8005226:	e000      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8005228:	bf00      	nop
    }

    if(ret == HAL_OK)
 800522a:	7dfb      	ldrb	r3, [r7, #23]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005230:	4b5f      	ldr	r3, [pc, #380]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005234:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800523e:	495c      	ldr	r1, [pc, #368]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005240:	4313      	orrs	r3, r2
 8005242:	658b      	str	r3, [r1, #88]	; 0x58
 8005244:	e001      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005246:	7dfb      	ldrb	r3, [r7, #23]
 8005248:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d033      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800525c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005260:	d01c      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005262:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005266:	d816      	bhi.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800526c:	d003      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800526e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005272:	d007      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005274:	e00f      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005276:	4b4e      	ldr	r3, [pc, #312]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	4a4d      	ldr	r2, [pc, #308]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800527c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005280:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005282:	e00c      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3324      	adds	r3, #36	; 0x24
 8005288:	2101      	movs	r1, #1
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fc6e 	bl	8005b6c <RCCEx_PLL3_Config>
 8005290:	4603      	mov	r3, r0
 8005292:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005294:	e003      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	75fb      	strb	r3, [r7, #23]
      break;
 800529a:	e000      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800529c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800529e:	7dfb      	ldrb	r3, [r7, #23]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052a4:	4b42      	ldr	r3, [pc, #264]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80052a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b2:	493f      	ldr	r1, [pc, #252]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	654b      	str	r3, [r1, #84]	; 0x54
 80052b8:	e001      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
 80052bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d029      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80052d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d6:	d007      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80052d8:	e00f      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052da:	4b35      	ldr	r3, [pc, #212]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	4a34      	ldr	r2, [pc, #208]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80052e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80052e6:	e00b      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3304      	adds	r3, #4
 80052ec:	2102      	movs	r1, #2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fb8a 	bl	8005a08 <RCCEx_PLL2_Config>
 80052f4:	4603      	mov	r3, r0
 80052f6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80052f8:	e002      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	75fb      	strb	r3, [r7, #23]
      break;
 80052fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005300:	7dfb      	ldrb	r3, [r7, #23]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005306:	4b2a      	ldr	r3, [pc, #168]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005312:	4927      	ldr	r1, [pc, #156]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005314:	4313      	orrs	r3, r2
 8005316:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005318:	e001      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531a:	7dfb      	ldrb	r3, [r7, #23]
 800531c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3324      	adds	r3, #36	; 0x24
 800532e:	2102      	movs	r1, #2
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fc1b 	bl	8005b6c <RCCEx_PLL3_Config>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d035      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005356:	d017      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005358:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800535c:	d811      	bhi.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800535e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005362:	d013      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8005364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005368:	d80b      	bhi.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800536a:	2b00      	cmp	r3, #0
 800536c:	d010      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800536e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005372:	d106      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005374:	4b0e      	ldr	r3, [pc, #56]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	4a0d      	ldr	r2, [pc, #52]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800537a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800537e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005380:	e007      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	75fb      	strb	r3, [r7, #23]
      break;
 8005386:	e004      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005388:	bf00      	nop
 800538a:	e002      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800538c:	bf00      	nop
 800538e:	e000      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005392:	7dfb      	ldrb	r3, [r7, #23]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10d      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005398:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800539a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a6:	4902      	ldr	r1, [pc, #8]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	654b      	str	r3, [r1, #84]	; 0x54
 80053ac:	e004      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80053ae:	bf00      	nop
 80053b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b4:	7dfb      	ldrb	r3, [r7, #23]
 80053b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053c4:	4b30      	ldr	r3, [pc, #192]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80053c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053d0:	492d      	ldr	r1, [pc, #180]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d008      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053e2:	4b29      	ldr	r3, [pc, #164]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80053e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ee:	4926      	ldr	r1, [pc, #152]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005400:	4b21      	ldr	r3, [pc, #132]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005404:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540c:	491e      	ldr	r1, [pc, #120]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800540e:	4313      	orrs	r3, r2
 8005410:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00d      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800541e:	4b1a      	ldr	r3, [pc, #104]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	4a19      	ldr	r2, [pc, #100]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005424:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005428:	6113      	str	r3, [r2, #16]
 800542a:	4b17      	ldr	r3, [pc, #92]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005434:	4914      	ldr	r1, [pc, #80]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005436:	4313      	orrs	r3, r2
 8005438:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	da08      	bge.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005442:	4b11      	ldr	r3, [pc, #68]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005446:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800544e:	490e      	ldr	r1, [pc, #56]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005450:	4313      	orrs	r3, r2
 8005452:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d009      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005460:	4b09      	ldr	r3, [pc, #36]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005464:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546e:	4906      	ldr	r1, [pc, #24]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005470:	4313      	orrs	r3, r2
 8005472:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005474:	7dbb      	ldrb	r3, [r7, #22]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	e000      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	58024400 	.word	0x58024400

0800548c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005490:	f7ff f894 	bl	80045bc <HAL_RCC_GetHCLKFreq>
 8005494:	4602      	mov	r2, r0
 8005496:	4b06      	ldr	r3, [pc, #24]	; (80054b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	091b      	lsrs	r3, r3, #4
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	4904      	ldr	r1, [pc, #16]	; (80054b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80054a2:	5ccb      	ldrb	r3, [r1, r3]
 80054a4:	f003 031f 	and.w	r3, r3, #31
 80054a8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	58024400 	.word	0x58024400
 80054b4:	08018d68 	.word	0x08018d68

080054b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b089      	sub	sp, #36	; 0x24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054c0:	4ba1      	ldr	r3, [pc, #644]	; (8005748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c4:	f003 0303 	and.w	r3, r3, #3
 80054c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80054ca:	4b9f      	ldr	r3, [pc, #636]	; (8005748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	0b1b      	lsrs	r3, r3, #12
 80054d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80054d6:	4b9c      	ldr	r3, [pc, #624]	; (8005748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054da:	091b      	lsrs	r3, r3, #4
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80054e2:	4b99      	ldr	r3, [pc, #612]	; (8005748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e6:	08db      	lsrs	r3, r3, #3
 80054e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	fb02 f303 	mul.w	r3, r2, r3
 80054f2:	ee07 3a90 	vmov	s15, r3
 80054f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 8111 	beq.w	8005728 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	2b02      	cmp	r3, #2
 800550a:	f000 8083 	beq.w	8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	2b02      	cmp	r3, #2
 8005512:	f200 80a1 	bhi.w	8005658 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d056      	beq.n	80055d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005522:	e099      	b.n	8005658 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005524:	4b88      	ldr	r3, [pc, #544]	; (8005748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0320 	and.w	r3, r3, #32
 800552c:	2b00      	cmp	r3, #0
 800552e:	d02d      	beq.n	800558c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005530:	4b85      	ldr	r3, [pc, #532]	; (8005748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	08db      	lsrs	r3, r3, #3
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	4a84      	ldr	r2, [pc, #528]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
 8005540:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	ee07 3a90 	vmov	s15, r3
 8005548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	ee07 3a90 	vmov	s15, r3
 8005552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800555a:	4b7b      	ldr	r3, [pc, #492]	; (8005748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005562:	ee07 3a90 	vmov	s15, r3
 8005566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800556a:	ed97 6a03 	vldr	s12, [r7, #12]
 800556e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800557a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800557e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005586:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800558a:	e087      	b.n	800569c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	ee07 3a90 	vmov	s15, r3
 8005592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005596:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005754 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800559a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800559e:	4b6a      	ldr	r3, [pc, #424]	; (8005748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80055b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055ce:	e065      	b.n	800569c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80055de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e2:	4b59      	ldr	r3, [pc, #356]	; (8005748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800560a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005612:	e043      	b.n	800569c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800575c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005626:	4b48      	ldr	r3, [pc, #288]	; (8005748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005636:	ed97 6a03 	vldr	s12, [r7, #12]
 800563a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800563e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800564a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800564e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005652:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005656:	e021      	b.n	800569c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005662:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005758 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800566a:	4b37      	ldr	r3, [pc, #220]	; (8005748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005672:	ee07 3a90 	vmov	s15, r3
 8005676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800567a:	ed97 6a03 	vldr	s12, [r7, #12]
 800567e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800568a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800568e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005696:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800569a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800569c:	4b2a      	ldr	r3, [pc, #168]	; (8005748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800569e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a0:	0a5b      	lsrs	r3, r3, #9
 80056a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80056ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056c2:	ee17 2a90 	vmov	r2, s15
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80056ca:	4b1f      	ldr	r3, [pc, #124]	; (8005748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	0c1b      	lsrs	r3, r3, #16
 80056d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056d4:	ee07 3a90 	vmov	s15, r3
 80056d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80056e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056f0:	ee17 2a90 	vmov	r2, s15
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80056f8:	4b13      	ldr	r3, [pc, #76]	; (8005748 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fc:	0e1b      	lsrs	r3, r3, #24
 80056fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800570e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005712:	edd7 6a07 	vldr	s13, [r7, #28]
 8005716:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800571a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800571e:	ee17 2a90 	vmov	r2, s15
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005726:	e008      	b.n	800573a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	609a      	str	r2, [r3, #8]
}
 800573a:	bf00      	nop
 800573c:	3724      	adds	r7, #36	; 0x24
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	58024400 	.word	0x58024400
 800574c:	03d09000 	.word	0x03d09000
 8005750:	46000000 	.word	0x46000000
 8005754:	4c742400 	.word	0x4c742400
 8005758:	4a742400 	.word	0x4a742400
 800575c:	4af42400 	.word	0x4af42400

08005760 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005760:	b480      	push	{r7}
 8005762:	b089      	sub	sp, #36	; 0x24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005768:	4ba1      	ldr	r3, [pc, #644]	; (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800576a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576c:	f003 0303 	and.w	r3, r3, #3
 8005770:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005772:	4b9f      	ldr	r3, [pc, #636]	; (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	0d1b      	lsrs	r3, r3, #20
 8005778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800577c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800577e:	4b9c      	ldr	r3, [pc, #624]	; (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	0a1b      	lsrs	r3, r3, #8
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800578a:	4b99      	ldr	r3, [pc, #612]	; (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800578c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578e:	08db      	lsrs	r3, r3, #3
 8005790:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	fb02 f303 	mul.w	r3, r2, r3
 800579a:	ee07 3a90 	vmov	s15, r3
 800579e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 8111 	beq.w	80059d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	f000 8083 	beq.w	80058bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	f200 80a1 	bhi.w	8005900 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d056      	beq.n	8005878 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80057ca:	e099      	b.n	8005900 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057cc:	4b88      	ldr	r3, [pc, #544]	; (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d02d      	beq.n	8005834 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057d8:	4b85      	ldr	r3, [pc, #532]	; (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	08db      	lsrs	r3, r3, #3
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	4a84      	ldr	r2, [pc, #528]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80057e4:	fa22 f303 	lsr.w	r3, r2, r3
 80057e8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	ee07 3a90 	vmov	s15, r3
 80057f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005802:	4b7b      	ldr	r3, [pc, #492]	; (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005812:	ed97 6a03 	vldr	s12, [r7, #12]
 8005816:	eddf 5a78 	vldr	s11, [pc, #480]	; 80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800581a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800581e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800582a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005832:	e087      	b.n	8005944 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800583e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80059fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005846:	4b6a      	ldr	r3, [pc, #424]	; (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005856:	ed97 6a03 	vldr	s12, [r7, #12]
 800585a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800585e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800586a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800586e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005872:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005876:	e065      	b.n	8005944 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005882:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005a00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588a:	4b59      	ldr	r3, [pc, #356]	; (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589a:	ed97 6a03 	vldr	s12, [r7, #12]
 800589e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058ba:	e043      	b.n	8005944 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80058ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ce:	4b48      	ldr	r3, [pc, #288]	; (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058de:	ed97 6a03 	vldr	s12, [r7, #12]
 80058e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058fe:	e021      	b.n	8005944 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005a00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800590e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005912:	4b37      	ldr	r3, [pc, #220]	; (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005922:	ed97 6a03 	vldr	s12, [r7, #12]
 8005926:	eddf 5a34 	vldr	s11, [pc, #208]	; 80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800592a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800592e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005942:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005944:	4b2a      	ldr	r3, [pc, #168]	; (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	0a5b      	lsrs	r3, r3, #9
 800594a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800594e:	ee07 3a90 	vmov	s15, r3
 8005952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800595a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800595e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800596a:	ee17 2a90 	vmov	r2, s15
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005972:	4b1f      	ldr	r3, [pc, #124]	; (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	0c1b      	lsrs	r3, r3, #16
 8005978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800597c:	ee07 3a90 	vmov	s15, r3
 8005980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005984:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005988:	ee37 7a87 	vadd.f32	s14, s15, s14
 800598c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005998:	ee17 2a90 	vmov	r2, s15
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80059a0:	4b13      	ldr	r3, [pc, #76]	; (80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	0e1b      	lsrs	r3, r3, #24
 80059a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059aa:	ee07 3a90 	vmov	s15, r3
 80059ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80059be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059c6:	ee17 2a90 	vmov	r2, s15
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80059ce:	e008      	b.n	80059e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	609a      	str	r2, [r3, #8]
}
 80059e2:	bf00      	nop
 80059e4:	3724      	adds	r7, #36	; 0x24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	58024400 	.word	0x58024400
 80059f4:	03d09000 	.word	0x03d09000
 80059f8:	46000000 	.word	0x46000000
 80059fc:	4c742400 	.word	0x4c742400
 8005a00:	4a742400 	.word	0x4a742400
 8005a04:	4af42400 	.word	0x4af42400

08005a08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a16:	4b53      	ldr	r3, [pc, #332]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	f003 0303 	and.w	r3, r3, #3
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d101      	bne.n	8005a26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e099      	b.n	8005b5a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005a26:	4b4f      	ldr	r3, [pc, #316]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a4e      	ldr	r2, [pc, #312]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005a2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a32:	f7fd faf7 	bl	8003024 <HAL_GetTick>
 8005a36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a38:	e008      	b.n	8005a4c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005a3a:	f7fd faf3 	bl	8003024 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e086      	b.n	8005b5a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a4c:	4b45      	ldr	r3, [pc, #276]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1f0      	bne.n	8005a3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005a58:	4b42      	ldr	r3, [pc, #264]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	031b      	lsls	r3, r3, #12
 8005a66:	493f      	ldr	r1, [pc, #252]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	628b      	str	r3, [r1, #40]	; 0x28
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	025b      	lsls	r3, r3, #9
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	431a      	orrs	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	041b      	lsls	r3, r3, #16
 8005a8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	3b01      	subs	r3, #1
 8005a96:	061b      	lsls	r3, r3, #24
 8005a98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a9c:	4931      	ldr	r1, [pc, #196]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005aa2:	4b30      	ldr	r3, [pc, #192]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	492d      	ldr	r1, [pc, #180]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005ab4:	4b2b      	ldr	r3, [pc, #172]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	f023 0220 	bic.w	r2, r3, #32
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	4928      	ldr	r1, [pc, #160]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005ac6:	4b27      	ldr	r3, [pc, #156]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aca:	4a26      	ldr	r2, [pc, #152]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005acc:	f023 0310 	bic.w	r3, r3, #16
 8005ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005ad2:	4b24      	ldr	r3, [pc, #144]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005ad4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ad6:	4b24      	ldr	r3, [pc, #144]	; (8005b68 <RCCEx_PLL2_Config+0x160>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	69d2      	ldr	r2, [r2, #28]
 8005ade:	00d2      	lsls	r2, r2, #3
 8005ae0:	4920      	ldr	r1, [pc, #128]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005ae6:	4b1f      	ldr	r3, [pc, #124]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	4a1e      	ldr	r2, [pc, #120]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005aec:	f043 0310 	orr.w	r3, r3, #16
 8005af0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d106      	bne.n	8005b06 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005af8:	4b1a      	ldr	r3, [pc, #104]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	4a19      	ldr	r2, [pc, #100]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005afe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b04:	e00f      	b.n	8005b26 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d106      	bne.n	8005b1a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005b0c:	4b15      	ldr	r3, [pc, #84]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	4a14      	ldr	r2, [pc, #80]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b18:	e005      	b.n	8005b26 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005b1a:	4b12      	ldr	r3, [pc, #72]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1e:	4a11      	ldr	r2, [pc, #68]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005b20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005b26:	4b0f      	ldr	r3, [pc, #60]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a0e      	ldr	r2, [pc, #56]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005b2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b32:	f7fd fa77 	bl	8003024 <HAL_GetTick>
 8005b36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b38:	e008      	b.n	8005b4c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b3a:	f7fd fa73 	bl	8003024 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d901      	bls.n	8005b4c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e006      	b.n	8005b5a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b4c:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <RCCEx_PLL2_Config+0x15c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d0f0      	beq.n	8005b3a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	58024400 	.word	0x58024400
 8005b68:	ffff0007 	.word	0xffff0007

08005b6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b7a:	4b53      	ldr	r3, [pc, #332]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	f003 0303 	and.w	r3, r3, #3
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d101      	bne.n	8005b8a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e099      	b.n	8005cbe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005b8a:	4b4f      	ldr	r3, [pc, #316]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a4e      	ldr	r2, [pc, #312]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b96:	f7fd fa45 	bl	8003024 <HAL_GetTick>
 8005b9a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b9c:	e008      	b.n	8005bb0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b9e:	f7fd fa41 	bl	8003024 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d901      	bls.n	8005bb0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e086      	b.n	8005cbe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bb0:	4b45      	ldr	r3, [pc, #276]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1f0      	bne.n	8005b9e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005bbc:	4b42      	ldr	r3, [pc, #264]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	051b      	lsls	r3, r3, #20
 8005bca:	493f      	ldr	r1, [pc, #252]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	628b      	str	r3, [r1, #40]	; 0x28
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	025b      	lsls	r3, r3, #9
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	431a      	orrs	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	041b      	lsls	r3, r3, #16
 8005bee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	061b      	lsls	r3, r3, #24
 8005bfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c00:	4931      	ldr	r1, [pc, #196]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005c06:	4b30      	ldr	r3, [pc, #192]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	492d      	ldr	r1, [pc, #180]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005c18:	4b2b      	ldr	r3, [pc, #172]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	4928      	ldr	r1, [pc, #160]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005c2a:	4b27      	ldr	r3, [pc, #156]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2e:	4a26      	ldr	r2, [pc, #152]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c36:	4b24      	ldr	r3, [pc, #144]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c3a:	4b24      	ldr	r3, [pc, #144]	; (8005ccc <RCCEx_PLL3_Config+0x160>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	69d2      	ldr	r2, [r2, #28]
 8005c42:	00d2      	lsls	r2, r2, #3
 8005c44:	4920      	ldr	r1, [pc, #128]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c4a:	4b1f      	ldr	r3, [pc, #124]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4e:	4a1e      	ldr	r2, [pc, #120]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d106      	bne.n	8005c6a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005c5c:	4b1a      	ldr	r3, [pc, #104]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	4a19      	ldr	r2, [pc, #100]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005c62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c68:	e00f      	b.n	8005c8a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d106      	bne.n	8005c7e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005c70:	4b15      	ldr	r3, [pc, #84]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c74:	4a14      	ldr	r2, [pc, #80]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005c76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c7c:	e005      	b.n	8005c8a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005c7e:	4b12      	ldr	r3, [pc, #72]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c82:	4a11      	ldr	r2, [pc, #68]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005c84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005c8a:	4b0f      	ldr	r3, [pc, #60]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a0e      	ldr	r2, [pc, #56]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c96:	f7fd f9c5 	bl	8003024 <HAL_GetTick>
 8005c9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c9c:	e008      	b.n	8005cb0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005c9e:	f7fd f9c1 	bl	8003024 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d901      	bls.n	8005cb0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e006      	b.n	8005cbe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005cb0:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <RCCEx_PLL3_Config+0x15c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d0f0      	beq.n	8005c9e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	58024400 	.word	0x58024400
 8005ccc:	ffff0007 	.word	0xffff0007

08005cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e049      	b.n	8005d76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d106      	bne.n	8005cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fc ffa2 	bl	8002c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	f000 f97c 	bl	800600c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b082      	sub	sp, #8
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d122      	bne.n	8005dda <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d11b      	bne.n	8005dda <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f06f 0202 	mvn.w	r2, #2
 8005daa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	f003 0303 	and.w	r3, r3, #3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f905 	bl	8005fd0 <HAL_TIM_IC_CaptureCallback>
 8005dc6:	e005      	b.n	8005dd4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f8f7 	bl	8005fbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f908 	bl	8005fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d122      	bne.n	8005e2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f003 0304 	and.w	r3, r3, #4
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d11b      	bne.n	8005e2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f06f 0204 	mvn.w	r2, #4
 8005dfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f8db 	bl	8005fd0 <HAL_TIM_IC_CaptureCallback>
 8005e1a:	e005      	b.n	8005e28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f8cd 	bl	8005fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f8de 	bl	8005fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	f003 0308 	and.w	r3, r3, #8
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d122      	bne.n	8005e82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f003 0308 	and.w	r3, r3, #8
 8005e46:	2b08      	cmp	r3, #8
 8005e48:	d11b      	bne.n	8005e82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f06f 0208 	mvn.w	r2, #8
 8005e52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2204      	movs	r2, #4
 8005e58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	f003 0303 	and.w	r3, r3, #3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f8b1 	bl	8005fd0 <HAL_TIM_IC_CaptureCallback>
 8005e6e:	e005      	b.n	8005e7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f8a3 	bl	8005fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f8b4 	bl	8005fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	2b10      	cmp	r3, #16
 8005e8e:	d122      	bne.n	8005ed6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f003 0310 	and.w	r3, r3, #16
 8005e9a:	2b10      	cmp	r3, #16
 8005e9c:	d11b      	bne.n	8005ed6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f06f 0210 	mvn.w	r2, #16
 8005ea6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2208      	movs	r2, #8
 8005eac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f887 	bl	8005fd0 <HAL_TIM_IC_CaptureCallback>
 8005ec2:	e005      	b.n	8005ed0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f879 	bl	8005fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f88a 	bl	8005fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d10e      	bne.n	8005f02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d107      	bne.n	8005f02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f06f 0201 	mvn.w	r2, #1
 8005efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7fc fe63 	bl	8002bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0c:	2b80      	cmp	r3, #128	; 0x80
 8005f0e:	d10e      	bne.n	8005f2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1a:	2b80      	cmp	r3, #128	; 0x80
 8005f1c:	d107      	bne.n	8005f2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f913 	bl	8006154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f3c:	d10e      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f48:	2b80      	cmp	r3, #128	; 0x80
 8005f4a:	d107      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f906 	bl	8006168 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f66:	2b40      	cmp	r3, #64	; 0x40
 8005f68:	d10e      	bne.n	8005f88 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f74:	2b40      	cmp	r3, #64	; 0x40
 8005f76:	d107      	bne.n	8005f88 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f838 	bl	8005ff8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b20      	cmp	r3, #32
 8005f94:	d10e      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d107      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f06f 0220 	mvn.w	r2, #32
 8005fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f8c6 	bl	8006140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fb4:	bf00      	nop
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a40      	ldr	r2, [pc, #256]	; (8006120 <TIM_Base_SetConfig+0x114>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d013      	beq.n	800604c <TIM_Base_SetConfig+0x40>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800602a:	d00f      	beq.n	800604c <TIM_Base_SetConfig+0x40>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a3d      	ldr	r2, [pc, #244]	; (8006124 <TIM_Base_SetConfig+0x118>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00b      	beq.n	800604c <TIM_Base_SetConfig+0x40>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a3c      	ldr	r2, [pc, #240]	; (8006128 <TIM_Base_SetConfig+0x11c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d007      	beq.n	800604c <TIM_Base_SetConfig+0x40>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a3b      	ldr	r2, [pc, #236]	; (800612c <TIM_Base_SetConfig+0x120>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d003      	beq.n	800604c <TIM_Base_SetConfig+0x40>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a3a      	ldr	r2, [pc, #232]	; (8006130 <TIM_Base_SetConfig+0x124>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d108      	bne.n	800605e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a2f      	ldr	r2, [pc, #188]	; (8006120 <TIM_Base_SetConfig+0x114>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d01f      	beq.n	80060a6 <TIM_Base_SetConfig+0x9a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606c:	d01b      	beq.n	80060a6 <TIM_Base_SetConfig+0x9a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a2c      	ldr	r2, [pc, #176]	; (8006124 <TIM_Base_SetConfig+0x118>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d017      	beq.n	80060a6 <TIM_Base_SetConfig+0x9a>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a2b      	ldr	r2, [pc, #172]	; (8006128 <TIM_Base_SetConfig+0x11c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <TIM_Base_SetConfig+0x9a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a2a      	ldr	r2, [pc, #168]	; (800612c <TIM_Base_SetConfig+0x120>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00f      	beq.n	80060a6 <TIM_Base_SetConfig+0x9a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a29      	ldr	r2, [pc, #164]	; (8006130 <TIM_Base_SetConfig+0x124>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00b      	beq.n	80060a6 <TIM_Base_SetConfig+0x9a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a28      	ldr	r2, [pc, #160]	; (8006134 <TIM_Base_SetConfig+0x128>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d007      	beq.n	80060a6 <TIM_Base_SetConfig+0x9a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a27      	ldr	r2, [pc, #156]	; (8006138 <TIM_Base_SetConfig+0x12c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d003      	beq.n	80060a6 <TIM_Base_SetConfig+0x9a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a26      	ldr	r2, [pc, #152]	; (800613c <TIM_Base_SetConfig+0x130>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d108      	bne.n	80060b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a10      	ldr	r2, [pc, #64]	; (8006120 <TIM_Base_SetConfig+0x114>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00f      	beq.n	8006104 <TIM_Base_SetConfig+0xf8>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a12      	ldr	r2, [pc, #72]	; (8006130 <TIM_Base_SetConfig+0x124>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00b      	beq.n	8006104 <TIM_Base_SetConfig+0xf8>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a11      	ldr	r2, [pc, #68]	; (8006134 <TIM_Base_SetConfig+0x128>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d007      	beq.n	8006104 <TIM_Base_SetConfig+0xf8>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a10      	ldr	r2, [pc, #64]	; (8006138 <TIM_Base_SetConfig+0x12c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d003      	beq.n	8006104 <TIM_Base_SetConfig+0xf8>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a0f      	ldr	r2, [pc, #60]	; (800613c <TIM_Base_SetConfig+0x130>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d103      	bne.n	800610c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	615a      	str	r2, [r3, #20]
}
 8006112:	bf00      	nop
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	40010000 	.word	0x40010000
 8006124:	40000400 	.word	0x40000400
 8006128:	40000800 	.word	0x40000800
 800612c:	40000c00 	.word	0x40000c00
 8006130:	40010400 	.word	0x40010400
 8006134:	40014000 	.word	0x40014000
 8006138:	40014400 	.word	0x40014400
 800613c:	40014800 	.word	0x40014800

08006140 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e042      	b.n	8006214 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006194:	2b00      	cmp	r3, #0
 8006196:	d106      	bne.n	80061a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7fc fd75 	bl	8002c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2224      	movs	r2, #36	; 0x24
 80061aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0201 	bic.w	r2, r2, #1
 80061bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f82c 	bl	800621c <UART_SetConfig>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e022      	b.n	8006214 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fe8c 	bl	8006ef4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689a      	ldr	r2, [r3, #8]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0201 	orr.w	r2, r2, #1
 800620a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 ff13 	bl	8007038 <UART_CheckIdleState>
 8006212:	4603      	mov	r3, r0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800621c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006220:	b092      	sub	sp, #72	; 0x48
 8006222:	af00      	add	r7, sp, #0
 8006224:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	431a      	orrs	r2, r3
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	431a      	orrs	r2, r3
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	4313      	orrs	r3, r2
 8006242:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	4bbe      	ldr	r3, [pc, #760]	; (8006544 <UART_SetConfig+0x328>)
 800624c:	4013      	ands	r3, r2
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	6812      	ldr	r2, [r2, #0]
 8006252:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006254:	430b      	orrs	r3, r1
 8006256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4ab3      	ldr	r2, [pc, #716]	; (8006548 <UART_SetConfig+0x32c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d004      	beq.n	8006288 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006284:	4313      	orrs	r3, r2
 8006286:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	4baf      	ldr	r3, [pc, #700]	; (800654c <UART_SetConfig+0x330>)
 8006290:	4013      	ands	r3, r2
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	6812      	ldr	r2, [r2, #0]
 8006296:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006298:	430b      	orrs	r3, r1
 800629a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a2:	f023 010f 	bic.w	r1, r3, #15
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4aa6      	ldr	r2, [pc, #664]	; (8006550 <UART_SetConfig+0x334>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d177      	bne.n	80063ac <UART_SetConfig+0x190>
 80062bc:	4ba5      	ldr	r3, [pc, #660]	; (8006554 <UART_SetConfig+0x338>)
 80062be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062c4:	2b28      	cmp	r3, #40	; 0x28
 80062c6:	d86d      	bhi.n	80063a4 <UART_SetConfig+0x188>
 80062c8:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <UART_SetConfig+0xb4>)
 80062ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ce:	bf00      	nop
 80062d0:	08006375 	.word	0x08006375
 80062d4:	080063a5 	.word	0x080063a5
 80062d8:	080063a5 	.word	0x080063a5
 80062dc:	080063a5 	.word	0x080063a5
 80062e0:	080063a5 	.word	0x080063a5
 80062e4:	080063a5 	.word	0x080063a5
 80062e8:	080063a5 	.word	0x080063a5
 80062ec:	080063a5 	.word	0x080063a5
 80062f0:	0800637d 	.word	0x0800637d
 80062f4:	080063a5 	.word	0x080063a5
 80062f8:	080063a5 	.word	0x080063a5
 80062fc:	080063a5 	.word	0x080063a5
 8006300:	080063a5 	.word	0x080063a5
 8006304:	080063a5 	.word	0x080063a5
 8006308:	080063a5 	.word	0x080063a5
 800630c:	080063a5 	.word	0x080063a5
 8006310:	08006385 	.word	0x08006385
 8006314:	080063a5 	.word	0x080063a5
 8006318:	080063a5 	.word	0x080063a5
 800631c:	080063a5 	.word	0x080063a5
 8006320:	080063a5 	.word	0x080063a5
 8006324:	080063a5 	.word	0x080063a5
 8006328:	080063a5 	.word	0x080063a5
 800632c:	080063a5 	.word	0x080063a5
 8006330:	0800638d 	.word	0x0800638d
 8006334:	080063a5 	.word	0x080063a5
 8006338:	080063a5 	.word	0x080063a5
 800633c:	080063a5 	.word	0x080063a5
 8006340:	080063a5 	.word	0x080063a5
 8006344:	080063a5 	.word	0x080063a5
 8006348:	080063a5 	.word	0x080063a5
 800634c:	080063a5 	.word	0x080063a5
 8006350:	08006395 	.word	0x08006395
 8006354:	080063a5 	.word	0x080063a5
 8006358:	080063a5 	.word	0x080063a5
 800635c:	080063a5 	.word	0x080063a5
 8006360:	080063a5 	.word	0x080063a5
 8006364:	080063a5 	.word	0x080063a5
 8006368:	080063a5 	.word	0x080063a5
 800636c:	080063a5 	.word	0x080063a5
 8006370:	0800639d 	.word	0x0800639d
 8006374:	2301      	movs	r3, #1
 8006376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800637a:	e326      	b.n	80069ca <UART_SetConfig+0x7ae>
 800637c:	2304      	movs	r3, #4
 800637e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006382:	e322      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006384:	2308      	movs	r3, #8
 8006386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800638a:	e31e      	b.n	80069ca <UART_SetConfig+0x7ae>
 800638c:	2310      	movs	r3, #16
 800638e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006392:	e31a      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006394:	2320      	movs	r3, #32
 8006396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800639a:	e316      	b.n	80069ca <UART_SetConfig+0x7ae>
 800639c:	2340      	movs	r3, #64	; 0x40
 800639e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063a2:	e312      	b.n	80069ca <UART_SetConfig+0x7ae>
 80063a4:	2380      	movs	r3, #128	; 0x80
 80063a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063aa:	e30e      	b.n	80069ca <UART_SetConfig+0x7ae>
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a69      	ldr	r2, [pc, #420]	; (8006558 <UART_SetConfig+0x33c>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d130      	bne.n	8006418 <UART_SetConfig+0x1fc>
 80063b6:	4b67      	ldr	r3, [pc, #412]	; (8006554 <UART_SetConfig+0x338>)
 80063b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	2b05      	cmp	r3, #5
 80063c0:	d826      	bhi.n	8006410 <UART_SetConfig+0x1f4>
 80063c2:	a201      	add	r2, pc, #4	; (adr r2, 80063c8 <UART_SetConfig+0x1ac>)
 80063c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c8:	080063e1 	.word	0x080063e1
 80063cc:	080063e9 	.word	0x080063e9
 80063d0:	080063f1 	.word	0x080063f1
 80063d4:	080063f9 	.word	0x080063f9
 80063d8:	08006401 	.word	0x08006401
 80063dc:	08006409 	.word	0x08006409
 80063e0:	2300      	movs	r3, #0
 80063e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063e6:	e2f0      	b.n	80069ca <UART_SetConfig+0x7ae>
 80063e8:	2304      	movs	r3, #4
 80063ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ee:	e2ec      	b.n	80069ca <UART_SetConfig+0x7ae>
 80063f0:	2308      	movs	r3, #8
 80063f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063f6:	e2e8      	b.n	80069ca <UART_SetConfig+0x7ae>
 80063f8:	2310      	movs	r3, #16
 80063fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063fe:	e2e4      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006400:	2320      	movs	r3, #32
 8006402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006406:	e2e0      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006408:	2340      	movs	r3, #64	; 0x40
 800640a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800640e:	e2dc      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006410:	2380      	movs	r3, #128	; 0x80
 8006412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006416:	e2d8      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a4f      	ldr	r2, [pc, #316]	; (800655c <UART_SetConfig+0x340>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d130      	bne.n	8006484 <UART_SetConfig+0x268>
 8006422:	4b4c      	ldr	r3, [pc, #304]	; (8006554 <UART_SetConfig+0x338>)
 8006424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006426:	f003 0307 	and.w	r3, r3, #7
 800642a:	2b05      	cmp	r3, #5
 800642c:	d826      	bhi.n	800647c <UART_SetConfig+0x260>
 800642e:	a201      	add	r2, pc, #4	; (adr r2, 8006434 <UART_SetConfig+0x218>)
 8006430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006434:	0800644d 	.word	0x0800644d
 8006438:	08006455 	.word	0x08006455
 800643c:	0800645d 	.word	0x0800645d
 8006440:	08006465 	.word	0x08006465
 8006444:	0800646d 	.word	0x0800646d
 8006448:	08006475 	.word	0x08006475
 800644c:	2300      	movs	r3, #0
 800644e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006452:	e2ba      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006454:	2304      	movs	r3, #4
 8006456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800645a:	e2b6      	b.n	80069ca <UART_SetConfig+0x7ae>
 800645c:	2308      	movs	r3, #8
 800645e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006462:	e2b2      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006464:	2310      	movs	r3, #16
 8006466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800646a:	e2ae      	b.n	80069ca <UART_SetConfig+0x7ae>
 800646c:	2320      	movs	r3, #32
 800646e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006472:	e2aa      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006474:	2340      	movs	r3, #64	; 0x40
 8006476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800647a:	e2a6      	b.n	80069ca <UART_SetConfig+0x7ae>
 800647c:	2380      	movs	r3, #128	; 0x80
 800647e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006482:	e2a2      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a35      	ldr	r2, [pc, #212]	; (8006560 <UART_SetConfig+0x344>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d130      	bne.n	80064f0 <UART_SetConfig+0x2d4>
 800648e:	4b31      	ldr	r3, [pc, #196]	; (8006554 <UART_SetConfig+0x338>)
 8006490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006492:	f003 0307 	and.w	r3, r3, #7
 8006496:	2b05      	cmp	r3, #5
 8006498:	d826      	bhi.n	80064e8 <UART_SetConfig+0x2cc>
 800649a:	a201      	add	r2, pc, #4	; (adr r2, 80064a0 <UART_SetConfig+0x284>)
 800649c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a0:	080064b9 	.word	0x080064b9
 80064a4:	080064c1 	.word	0x080064c1
 80064a8:	080064c9 	.word	0x080064c9
 80064ac:	080064d1 	.word	0x080064d1
 80064b0:	080064d9 	.word	0x080064d9
 80064b4:	080064e1 	.word	0x080064e1
 80064b8:	2300      	movs	r3, #0
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064be:	e284      	b.n	80069ca <UART_SetConfig+0x7ae>
 80064c0:	2304      	movs	r3, #4
 80064c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064c6:	e280      	b.n	80069ca <UART_SetConfig+0x7ae>
 80064c8:	2308      	movs	r3, #8
 80064ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ce:	e27c      	b.n	80069ca <UART_SetConfig+0x7ae>
 80064d0:	2310      	movs	r3, #16
 80064d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064d6:	e278      	b.n	80069ca <UART_SetConfig+0x7ae>
 80064d8:	2320      	movs	r3, #32
 80064da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064de:	e274      	b.n	80069ca <UART_SetConfig+0x7ae>
 80064e0:	2340      	movs	r3, #64	; 0x40
 80064e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064e6:	e270      	b.n	80069ca <UART_SetConfig+0x7ae>
 80064e8:	2380      	movs	r3, #128	; 0x80
 80064ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ee:	e26c      	b.n	80069ca <UART_SetConfig+0x7ae>
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a1b      	ldr	r2, [pc, #108]	; (8006564 <UART_SetConfig+0x348>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d142      	bne.n	8006580 <UART_SetConfig+0x364>
 80064fa:	4b16      	ldr	r3, [pc, #88]	; (8006554 <UART_SetConfig+0x338>)
 80064fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	2b05      	cmp	r3, #5
 8006504:	d838      	bhi.n	8006578 <UART_SetConfig+0x35c>
 8006506:	a201      	add	r2, pc, #4	; (adr r2, 800650c <UART_SetConfig+0x2f0>)
 8006508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650c:	08006525 	.word	0x08006525
 8006510:	0800652d 	.word	0x0800652d
 8006514:	08006535 	.word	0x08006535
 8006518:	0800653d 	.word	0x0800653d
 800651c:	08006569 	.word	0x08006569
 8006520:	08006571 	.word	0x08006571
 8006524:	2300      	movs	r3, #0
 8006526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800652a:	e24e      	b.n	80069ca <UART_SetConfig+0x7ae>
 800652c:	2304      	movs	r3, #4
 800652e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006532:	e24a      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006534:	2308      	movs	r3, #8
 8006536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800653a:	e246      	b.n	80069ca <UART_SetConfig+0x7ae>
 800653c:	2310      	movs	r3, #16
 800653e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006542:	e242      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006544:	cfff69f3 	.word	0xcfff69f3
 8006548:	58000c00 	.word	0x58000c00
 800654c:	11fff4ff 	.word	0x11fff4ff
 8006550:	40011000 	.word	0x40011000
 8006554:	58024400 	.word	0x58024400
 8006558:	40004400 	.word	0x40004400
 800655c:	40004800 	.word	0x40004800
 8006560:	40004c00 	.word	0x40004c00
 8006564:	40005000 	.word	0x40005000
 8006568:	2320      	movs	r3, #32
 800656a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800656e:	e22c      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006570:	2340      	movs	r3, #64	; 0x40
 8006572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006576:	e228      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006578:	2380      	movs	r3, #128	; 0x80
 800657a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800657e:	e224      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4ab1      	ldr	r2, [pc, #708]	; (800684c <UART_SetConfig+0x630>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d176      	bne.n	8006678 <UART_SetConfig+0x45c>
 800658a:	4bb1      	ldr	r3, [pc, #708]	; (8006850 <UART_SetConfig+0x634>)
 800658c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006592:	2b28      	cmp	r3, #40	; 0x28
 8006594:	d86c      	bhi.n	8006670 <UART_SetConfig+0x454>
 8006596:	a201      	add	r2, pc, #4	; (adr r2, 800659c <UART_SetConfig+0x380>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	08006641 	.word	0x08006641
 80065a0:	08006671 	.word	0x08006671
 80065a4:	08006671 	.word	0x08006671
 80065a8:	08006671 	.word	0x08006671
 80065ac:	08006671 	.word	0x08006671
 80065b0:	08006671 	.word	0x08006671
 80065b4:	08006671 	.word	0x08006671
 80065b8:	08006671 	.word	0x08006671
 80065bc:	08006649 	.word	0x08006649
 80065c0:	08006671 	.word	0x08006671
 80065c4:	08006671 	.word	0x08006671
 80065c8:	08006671 	.word	0x08006671
 80065cc:	08006671 	.word	0x08006671
 80065d0:	08006671 	.word	0x08006671
 80065d4:	08006671 	.word	0x08006671
 80065d8:	08006671 	.word	0x08006671
 80065dc:	08006651 	.word	0x08006651
 80065e0:	08006671 	.word	0x08006671
 80065e4:	08006671 	.word	0x08006671
 80065e8:	08006671 	.word	0x08006671
 80065ec:	08006671 	.word	0x08006671
 80065f0:	08006671 	.word	0x08006671
 80065f4:	08006671 	.word	0x08006671
 80065f8:	08006671 	.word	0x08006671
 80065fc:	08006659 	.word	0x08006659
 8006600:	08006671 	.word	0x08006671
 8006604:	08006671 	.word	0x08006671
 8006608:	08006671 	.word	0x08006671
 800660c:	08006671 	.word	0x08006671
 8006610:	08006671 	.word	0x08006671
 8006614:	08006671 	.word	0x08006671
 8006618:	08006671 	.word	0x08006671
 800661c:	08006661 	.word	0x08006661
 8006620:	08006671 	.word	0x08006671
 8006624:	08006671 	.word	0x08006671
 8006628:	08006671 	.word	0x08006671
 800662c:	08006671 	.word	0x08006671
 8006630:	08006671 	.word	0x08006671
 8006634:	08006671 	.word	0x08006671
 8006638:	08006671 	.word	0x08006671
 800663c:	08006669 	.word	0x08006669
 8006640:	2301      	movs	r3, #1
 8006642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006646:	e1c0      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006648:	2304      	movs	r3, #4
 800664a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800664e:	e1bc      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006650:	2308      	movs	r3, #8
 8006652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006656:	e1b8      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006658:	2310      	movs	r3, #16
 800665a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800665e:	e1b4      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006660:	2320      	movs	r3, #32
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006666:	e1b0      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006668:	2340      	movs	r3, #64	; 0x40
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800666e:	e1ac      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006670:	2380      	movs	r3, #128	; 0x80
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006676:	e1a8      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a75      	ldr	r2, [pc, #468]	; (8006854 <UART_SetConfig+0x638>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d130      	bne.n	80066e4 <UART_SetConfig+0x4c8>
 8006682:	4b73      	ldr	r3, [pc, #460]	; (8006850 <UART_SetConfig+0x634>)
 8006684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	2b05      	cmp	r3, #5
 800668c:	d826      	bhi.n	80066dc <UART_SetConfig+0x4c0>
 800668e:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <UART_SetConfig+0x478>)
 8006690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006694:	080066ad 	.word	0x080066ad
 8006698:	080066b5 	.word	0x080066b5
 800669c:	080066bd 	.word	0x080066bd
 80066a0:	080066c5 	.word	0x080066c5
 80066a4:	080066cd 	.word	0x080066cd
 80066a8:	080066d5 	.word	0x080066d5
 80066ac:	2300      	movs	r3, #0
 80066ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066b2:	e18a      	b.n	80069ca <UART_SetConfig+0x7ae>
 80066b4:	2304      	movs	r3, #4
 80066b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ba:	e186      	b.n	80069ca <UART_SetConfig+0x7ae>
 80066bc:	2308      	movs	r3, #8
 80066be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066c2:	e182      	b.n	80069ca <UART_SetConfig+0x7ae>
 80066c4:	2310      	movs	r3, #16
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ca:	e17e      	b.n	80069ca <UART_SetConfig+0x7ae>
 80066cc:	2320      	movs	r3, #32
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066d2:	e17a      	b.n	80069ca <UART_SetConfig+0x7ae>
 80066d4:	2340      	movs	r3, #64	; 0x40
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066da:	e176      	b.n	80069ca <UART_SetConfig+0x7ae>
 80066dc:	2380      	movs	r3, #128	; 0x80
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066e2:	e172      	b.n	80069ca <UART_SetConfig+0x7ae>
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a5b      	ldr	r2, [pc, #364]	; (8006858 <UART_SetConfig+0x63c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d130      	bne.n	8006750 <UART_SetConfig+0x534>
 80066ee:	4b58      	ldr	r3, [pc, #352]	; (8006850 <UART_SetConfig+0x634>)
 80066f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	2b05      	cmp	r3, #5
 80066f8:	d826      	bhi.n	8006748 <UART_SetConfig+0x52c>
 80066fa:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <UART_SetConfig+0x4e4>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	08006719 	.word	0x08006719
 8006704:	08006721 	.word	0x08006721
 8006708:	08006729 	.word	0x08006729
 800670c:	08006731 	.word	0x08006731
 8006710:	08006739 	.word	0x08006739
 8006714:	08006741 	.word	0x08006741
 8006718:	2300      	movs	r3, #0
 800671a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800671e:	e154      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006720:	2304      	movs	r3, #4
 8006722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006726:	e150      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006728:	2308      	movs	r3, #8
 800672a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800672e:	e14c      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006730:	2310      	movs	r3, #16
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006736:	e148      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006738:	2320      	movs	r3, #32
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800673e:	e144      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006740:	2340      	movs	r3, #64	; 0x40
 8006742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006746:	e140      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006748:	2380      	movs	r3, #128	; 0x80
 800674a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800674e:	e13c      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a41      	ldr	r2, [pc, #260]	; (800685c <UART_SetConfig+0x640>)
 8006756:	4293      	cmp	r3, r2
 8006758:	f040 8082 	bne.w	8006860 <UART_SetConfig+0x644>
 800675c:	4b3c      	ldr	r3, [pc, #240]	; (8006850 <UART_SetConfig+0x634>)
 800675e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006760:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006764:	2b28      	cmp	r3, #40	; 0x28
 8006766:	d86d      	bhi.n	8006844 <UART_SetConfig+0x628>
 8006768:	a201      	add	r2, pc, #4	; (adr r2, 8006770 <UART_SetConfig+0x554>)
 800676a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676e:	bf00      	nop
 8006770:	08006815 	.word	0x08006815
 8006774:	08006845 	.word	0x08006845
 8006778:	08006845 	.word	0x08006845
 800677c:	08006845 	.word	0x08006845
 8006780:	08006845 	.word	0x08006845
 8006784:	08006845 	.word	0x08006845
 8006788:	08006845 	.word	0x08006845
 800678c:	08006845 	.word	0x08006845
 8006790:	0800681d 	.word	0x0800681d
 8006794:	08006845 	.word	0x08006845
 8006798:	08006845 	.word	0x08006845
 800679c:	08006845 	.word	0x08006845
 80067a0:	08006845 	.word	0x08006845
 80067a4:	08006845 	.word	0x08006845
 80067a8:	08006845 	.word	0x08006845
 80067ac:	08006845 	.word	0x08006845
 80067b0:	08006825 	.word	0x08006825
 80067b4:	08006845 	.word	0x08006845
 80067b8:	08006845 	.word	0x08006845
 80067bc:	08006845 	.word	0x08006845
 80067c0:	08006845 	.word	0x08006845
 80067c4:	08006845 	.word	0x08006845
 80067c8:	08006845 	.word	0x08006845
 80067cc:	08006845 	.word	0x08006845
 80067d0:	0800682d 	.word	0x0800682d
 80067d4:	08006845 	.word	0x08006845
 80067d8:	08006845 	.word	0x08006845
 80067dc:	08006845 	.word	0x08006845
 80067e0:	08006845 	.word	0x08006845
 80067e4:	08006845 	.word	0x08006845
 80067e8:	08006845 	.word	0x08006845
 80067ec:	08006845 	.word	0x08006845
 80067f0:	08006835 	.word	0x08006835
 80067f4:	08006845 	.word	0x08006845
 80067f8:	08006845 	.word	0x08006845
 80067fc:	08006845 	.word	0x08006845
 8006800:	08006845 	.word	0x08006845
 8006804:	08006845 	.word	0x08006845
 8006808:	08006845 	.word	0x08006845
 800680c:	08006845 	.word	0x08006845
 8006810:	0800683d 	.word	0x0800683d
 8006814:	2301      	movs	r3, #1
 8006816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800681a:	e0d6      	b.n	80069ca <UART_SetConfig+0x7ae>
 800681c:	2304      	movs	r3, #4
 800681e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006822:	e0d2      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006824:	2308      	movs	r3, #8
 8006826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800682a:	e0ce      	b.n	80069ca <UART_SetConfig+0x7ae>
 800682c:	2310      	movs	r3, #16
 800682e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006832:	e0ca      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006834:	2320      	movs	r3, #32
 8006836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800683a:	e0c6      	b.n	80069ca <UART_SetConfig+0x7ae>
 800683c:	2340      	movs	r3, #64	; 0x40
 800683e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006842:	e0c2      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006844:	2380      	movs	r3, #128	; 0x80
 8006846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800684a:	e0be      	b.n	80069ca <UART_SetConfig+0x7ae>
 800684c:	40011400 	.word	0x40011400
 8006850:	58024400 	.word	0x58024400
 8006854:	40007800 	.word	0x40007800
 8006858:	40007c00 	.word	0x40007c00
 800685c:	40011800 	.word	0x40011800
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4aad      	ldr	r2, [pc, #692]	; (8006b1c <UART_SetConfig+0x900>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d176      	bne.n	8006958 <UART_SetConfig+0x73c>
 800686a:	4bad      	ldr	r3, [pc, #692]	; (8006b20 <UART_SetConfig+0x904>)
 800686c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006872:	2b28      	cmp	r3, #40	; 0x28
 8006874:	d86c      	bhi.n	8006950 <UART_SetConfig+0x734>
 8006876:	a201      	add	r2, pc, #4	; (adr r2, 800687c <UART_SetConfig+0x660>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	08006921 	.word	0x08006921
 8006880:	08006951 	.word	0x08006951
 8006884:	08006951 	.word	0x08006951
 8006888:	08006951 	.word	0x08006951
 800688c:	08006951 	.word	0x08006951
 8006890:	08006951 	.word	0x08006951
 8006894:	08006951 	.word	0x08006951
 8006898:	08006951 	.word	0x08006951
 800689c:	08006929 	.word	0x08006929
 80068a0:	08006951 	.word	0x08006951
 80068a4:	08006951 	.word	0x08006951
 80068a8:	08006951 	.word	0x08006951
 80068ac:	08006951 	.word	0x08006951
 80068b0:	08006951 	.word	0x08006951
 80068b4:	08006951 	.word	0x08006951
 80068b8:	08006951 	.word	0x08006951
 80068bc:	08006931 	.word	0x08006931
 80068c0:	08006951 	.word	0x08006951
 80068c4:	08006951 	.word	0x08006951
 80068c8:	08006951 	.word	0x08006951
 80068cc:	08006951 	.word	0x08006951
 80068d0:	08006951 	.word	0x08006951
 80068d4:	08006951 	.word	0x08006951
 80068d8:	08006951 	.word	0x08006951
 80068dc:	08006939 	.word	0x08006939
 80068e0:	08006951 	.word	0x08006951
 80068e4:	08006951 	.word	0x08006951
 80068e8:	08006951 	.word	0x08006951
 80068ec:	08006951 	.word	0x08006951
 80068f0:	08006951 	.word	0x08006951
 80068f4:	08006951 	.word	0x08006951
 80068f8:	08006951 	.word	0x08006951
 80068fc:	08006941 	.word	0x08006941
 8006900:	08006951 	.word	0x08006951
 8006904:	08006951 	.word	0x08006951
 8006908:	08006951 	.word	0x08006951
 800690c:	08006951 	.word	0x08006951
 8006910:	08006951 	.word	0x08006951
 8006914:	08006951 	.word	0x08006951
 8006918:	08006951 	.word	0x08006951
 800691c:	08006949 	.word	0x08006949
 8006920:	2301      	movs	r3, #1
 8006922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006926:	e050      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006928:	2304      	movs	r3, #4
 800692a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800692e:	e04c      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006930:	2308      	movs	r3, #8
 8006932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006936:	e048      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006938:	2310      	movs	r3, #16
 800693a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800693e:	e044      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006940:	2320      	movs	r3, #32
 8006942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006946:	e040      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006948:	2340      	movs	r3, #64	; 0x40
 800694a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800694e:	e03c      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006950:	2380      	movs	r3, #128	; 0x80
 8006952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006956:	e038      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a71      	ldr	r2, [pc, #452]	; (8006b24 <UART_SetConfig+0x908>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d130      	bne.n	80069c4 <UART_SetConfig+0x7a8>
 8006962:	4b6f      	ldr	r3, [pc, #444]	; (8006b20 <UART_SetConfig+0x904>)
 8006964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	2b05      	cmp	r3, #5
 800696c:	d826      	bhi.n	80069bc <UART_SetConfig+0x7a0>
 800696e:	a201      	add	r2, pc, #4	; (adr r2, 8006974 <UART_SetConfig+0x758>)
 8006970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006974:	0800698d 	.word	0x0800698d
 8006978:	08006995 	.word	0x08006995
 800697c:	0800699d 	.word	0x0800699d
 8006980:	080069a5 	.word	0x080069a5
 8006984:	080069ad 	.word	0x080069ad
 8006988:	080069b5 	.word	0x080069b5
 800698c:	2302      	movs	r3, #2
 800698e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006992:	e01a      	b.n	80069ca <UART_SetConfig+0x7ae>
 8006994:	2304      	movs	r3, #4
 8006996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800699a:	e016      	b.n	80069ca <UART_SetConfig+0x7ae>
 800699c:	2308      	movs	r3, #8
 800699e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069a2:	e012      	b.n	80069ca <UART_SetConfig+0x7ae>
 80069a4:	2310      	movs	r3, #16
 80069a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069aa:	e00e      	b.n	80069ca <UART_SetConfig+0x7ae>
 80069ac:	2320      	movs	r3, #32
 80069ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069b2:	e00a      	b.n	80069ca <UART_SetConfig+0x7ae>
 80069b4:	2340      	movs	r3, #64	; 0x40
 80069b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ba:	e006      	b.n	80069ca <UART_SetConfig+0x7ae>
 80069bc:	2380      	movs	r3, #128	; 0x80
 80069be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069c2:	e002      	b.n	80069ca <UART_SetConfig+0x7ae>
 80069c4:	2380      	movs	r3, #128	; 0x80
 80069c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a55      	ldr	r2, [pc, #340]	; (8006b24 <UART_SetConfig+0x908>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	f040 80f8 	bne.w	8006bc6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80069da:	2b20      	cmp	r3, #32
 80069dc:	dc46      	bgt.n	8006a6c <UART_SetConfig+0x850>
 80069de:	2b02      	cmp	r3, #2
 80069e0:	db75      	blt.n	8006ace <UART_SetConfig+0x8b2>
 80069e2:	3b02      	subs	r3, #2
 80069e4:	2b1e      	cmp	r3, #30
 80069e6:	d872      	bhi.n	8006ace <UART_SetConfig+0x8b2>
 80069e8:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <UART_SetConfig+0x7d4>)
 80069ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ee:	bf00      	nop
 80069f0:	08006a73 	.word	0x08006a73
 80069f4:	08006acf 	.word	0x08006acf
 80069f8:	08006a7b 	.word	0x08006a7b
 80069fc:	08006acf 	.word	0x08006acf
 8006a00:	08006acf 	.word	0x08006acf
 8006a04:	08006acf 	.word	0x08006acf
 8006a08:	08006a8b 	.word	0x08006a8b
 8006a0c:	08006acf 	.word	0x08006acf
 8006a10:	08006acf 	.word	0x08006acf
 8006a14:	08006acf 	.word	0x08006acf
 8006a18:	08006acf 	.word	0x08006acf
 8006a1c:	08006acf 	.word	0x08006acf
 8006a20:	08006acf 	.word	0x08006acf
 8006a24:	08006acf 	.word	0x08006acf
 8006a28:	08006a9b 	.word	0x08006a9b
 8006a2c:	08006acf 	.word	0x08006acf
 8006a30:	08006acf 	.word	0x08006acf
 8006a34:	08006acf 	.word	0x08006acf
 8006a38:	08006acf 	.word	0x08006acf
 8006a3c:	08006acf 	.word	0x08006acf
 8006a40:	08006acf 	.word	0x08006acf
 8006a44:	08006acf 	.word	0x08006acf
 8006a48:	08006acf 	.word	0x08006acf
 8006a4c:	08006acf 	.word	0x08006acf
 8006a50:	08006acf 	.word	0x08006acf
 8006a54:	08006acf 	.word	0x08006acf
 8006a58:	08006acf 	.word	0x08006acf
 8006a5c:	08006acf 	.word	0x08006acf
 8006a60:	08006acf 	.word	0x08006acf
 8006a64:	08006acf 	.word	0x08006acf
 8006a68:	08006ac1 	.word	0x08006ac1
 8006a6c:	2b40      	cmp	r3, #64	; 0x40
 8006a6e:	d02a      	beq.n	8006ac6 <UART_SetConfig+0x8aa>
 8006a70:	e02d      	b.n	8006ace <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006a72:	f7fe fd0b 	bl	800548c <HAL_RCCEx_GetD3PCLK1Freq>
 8006a76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006a78:	e02f      	b.n	8006ada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fe fd1a 	bl	80054b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a88:	e027      	b.n	8006ada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a8a:	f107 0318 	add.w	r3, r7, #24
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fe fe66 	bl	8005760 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a98:	e01f      	b.n	8006ada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a9a:	4b21      	ldr	r3, [pc, #132]	; (8006b20 <UART_SetConfig+0x904>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0320 	and.w	r3, r3, #32
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d009      	beq.n	8006aba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006aa6:	4b1e      	ldr	r3, [pc, #120]	; (8006b20 <UART_SetConfig+0x904>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	08db      	lsrs	r3, r3, #3
 8006aac:	f003 0303 	and.w	r3, r3, #3
 8006ab0:	4a1d      	ldr	r2, [pc, #116]	; (8006b28 <UART_SetConfig+0x90c>)
 8006ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ab8:	e00f      	b.n	8006ada <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006aba:	4b1b      	ldr	r3, [pc, #108]	; (8006b28 <UART_SetConfig+0x90c>)
 8006abc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006abe:	e00c      	b.n	8006ada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ac0:	4b1a      	ldr	r3, [pc, #104]	; (8006b2c <UART_SetConfig+0x910>)
 8006ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ac4:	e009      	b.n	8006ada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006acc:	e005      	b.n	8006ada <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006ad8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 81ee 	beq.w	8006ebe <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae6:	4a12      	ldr	r2, [pc, #72]	; (8006b30 <UART_SetConfig+0x914>)
 8006ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006aec:	461a      	mov	r2, r3
 8006aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006af4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	4613      	mov	r3, r2
 8006afc:	005b      	lsls	r3, r3, #1
 8006afe:	4413      	add	r3, r2
 8006b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d305      	bcc.n	8006b12 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d910      	bls.n	8006b34 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006b18:	e1d1      	b.n	8006ebe <UART_SetConfig+0xca2>
 8006b1a:	bf00      	nop
 8006b1c:	40011c00 	.word	0x40011c00
 8006b20:	58024400 	.word	0x58024400
 8006b24:	58000c00 	.word	0x58000c00
 8006b28:	03d09000 	.word	0x03d09000
 8006b2c:	003d0900 	.word	0x003d0900
 8006b30:	08018d78 	.word	0x08018d78
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b36:	2200      	movs	r2, #0
 8006b38:	60bb      	str	r3, [r7, #8]
 8006b3a:	60fa      	str	r2, [r7, #12]
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	4ac0      	ldr	r2, [pc, #768]	; (8006e44 <UART_SetConfig+0xc28>)
 8006b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	2200      	movs	r2, #0
 8006b4a:	603b      	str	r3, [r7, #0]
 8006b4c:	607a      	str	r2, [r7, #4]
 8006b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b56:	f7f9 fbc9 	bl	80002ec <__aeabi_uldivmod>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4610      	mov	r0, r2
 8006b60:	4619      	mov	r1, r3
 8006b62:	f04f 0200 	mov.w	r2, #0
 8006b66:	f04f 0300 	mov.w	r3, #0
 8006b6a:	020b      	lsls	r3, r1, #8
 8006b6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b70:	0202      	lsls	r2, r0, #8
 8006b72:	6979      	ldr	r1, [r7, #20]
 8006b74:	6849      	ldr	r1, [r1, #4]
 8006b76:	0849      	lsrs	r1, r1, #1
 8006b78:	2000      	movs	r0, #0
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	4605      	mov	r5, r0
 8006b7e:	eb12 0804 	adds.w	r8, r2, r4
 8006b82:	eb43 0905 	adc.w	r9, r3, r5
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	469a      	mov	sl, r3
 8006b8e:	4693      	mov	fp, r2
 8006b90:	4652      	mov	r2, sl
 8006b92:	465b      	mov	r3, fp
 8006b94:	4640      	mov	r0, r8
 8006b96:	4649      	mov	r1, r9
 8006b98:	f7f9 fba8 	bl	80002ec <__aeabi_uldivmod>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006baa:	d308      	bcc.n	8006bbe <UART_SetConfig+0x9a2>
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bb2:	d204      	bcs.n	8006bbe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bba:	60da      	str	r2, [r3, #12]
 8006bbc:	e17f      	b.n	8006ebe <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006bc4:	e17b      	b.n	8006ebe <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bce:	f040 80bd 	bne.w	8006d4c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006bd2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006bd6:	2b20      	cmp	r3, #32
 8006bd8:	dc48      	bgt.n	8006c6c <UART_SetConfig+0xa50>
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	db7b      	blt.n	8006cd6 <UART_SetConfig+0xaba>
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	d879      	bhi.n	8006cd6 <UART_SetConfig+0xaba>
 8006be2:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <UART_SetConfig+0x9cc>)
 8006be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be8:	08006c73 	.word	0x08006c73
 8006bec:	08006c7b 	.word	0x08006c7b
 8006bf0:	08006cd7 	.word	0x08006cd7
 8006bf4:	08006cd7 	.word	0x08006cd7
 8006bf8:	08006c83 	.word	0x08006c83
 8006bfc:	08006cd7 	.word	0x08006cd7
 8006c00:	08006cd7 	.word	0x08006cd7
 8006c04:	08006cd7 	.word	0x08006cd7
 8006c08:	08006c93 	.word	0x08006c93
 8006c0c:	08006cd7 	.word	0x08006cd7
 8006c10:	08006cd7 	.word	0x08006cd7
 8006c14:	08006cd7 	.word	0x08006cd7
 8006c18:	08006cd7 	.word	0x08006cd7
 8006c1c:	08006cd7 	.word	0x08006cd7
 8006c20:	08006cd7 	.word	0x08006cd7
 8006c24:	08006cd7 	.word	0x08006cd7
 8006c28:	08006ca3 	.word	0x08006ca3
 8006c2c:	08006cd7 	.word	0x08006cd7
 8006c30:	08006cd7 	.word	0x08006cd7
 8006c34:	08006cd7 	.word	0x08006cd7
 8006c38:	08006cd7 	.word	0x08006cd7
 8006c3c:	08006cd7 	.word	0x08006cd7
 8006c40:	08006cd7 	.word	0x08006cd7
 8006c44:	08006cd7 	.word	0x08006cd7
 8006c48:	08006cd7 	.word	0x08006cd7
 8006c4c:	08006cd7 	.word	0x08006cd7
 8006c50:	08006cd7 	.word	0x08006cd7
 8006c54:	08006cd7 	.word	0x08006cd7
 8006c58:	08006cd7 	.word	0x08006cd7
 8006c5c:	08006cd7 	.word	0x08006cd7
 8006c60:	08006cd7 	.word	0x08006cd7
 8006c64:	08006cd7 	.word	0x08006cd7
 8006c68:	08006cc9 	.word	0x08006cc9
 8006c6c:	2b40      	cmp	r3, #64	; 0x40
 8006c6e:	d02e      	beq.n	8006cce <UART_SetConfig+0xab2>
 8006c70:	e031      	b.n	8006cd6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c72:	f7fd fcd3 	bl	800461c <HAL_RCC_GetPCLK1Freq>
 8006c76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c78:	e033      	b.n	8006ce2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c7a:	f7fd fce5 	bl	8004648 <HAL_RCC_GetPCLK2Freq>
 8006c7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c80:	e02f      	b.n	8006ce2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fe fc16 	bl	80054b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c90:	e027      	b.n	8006ce2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c92:	f107 0318 	add.w	r3, r7, #24
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fe fd62 	bl	8005760 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ca0:	e01f      	b.n	8006ce2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ca2:	4b69      	ldr	r3, [pc, #420]	; (8006e48 <UART_SetConfig+0xc2c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0320 	and.w	r3, r3, #32
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d009      	beq.n	8006cc2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cae:	4b66      	ldr	r3, [pc, #408]	; (8006e48 <UART_SetConfig+0xc2c>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	08db      	lsrs	r3, r3, #3
 8006cb4:	f003 0303 	and.w	r3, r3, #3
 8006cb8:	4a64      	ldr	r2, [pc, #400]	; (8006e4c <UART_SetConfig+0xc30>)
 8006cba:	fa22 f303 	lsr.w	r3, r2, r3
 8006cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cc0:	e00f      	b.n	8006ce2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006cc2:	4b62      	ldr	r3, [pc, #392]	; (8006e4c <UART_SetConfig+0xc30>)
 8006cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cc6:	e00c      	b.n	8006ce2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006cc8:	4b61      	ldr	r3, [pc, #388]	; (8006e50 <UART_SetConfig+0xc34>)
 8006cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ccc:	e009      	b.n	8006ce2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cd4:	e005      	b.n	8006ce2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006ce0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 80ea 	beq.w	8006ebe <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	4a55      	ldr	r2, [pc, #340]	; (8006e44 <UART_SetConfig+0xc28>)
 8006cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cfc:	005a      	lsls	r2, r3, #1
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	441a      	add	r2, r3
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d12:	2b0f      	cmp	r3, #15
 8006d14:	d916      	bls.n	8006d44 <UART_SetConfig+0xb28>
 8006d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d1c:	d212      	bcs.n	8006d44 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	f023 030f 	bic.w	r3, r3, #15
 8006d26:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2a:	085b      	lsrs	r3, r3, #1
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d36:	4313      	orrs	r3, r2
 8006d38:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006d40:	60da      	str	r2, [r3, #12]
 8006d42:	e0bc      	b.n	8006ebe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006d4a:	e0b8      	b.n	8006ebe <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006d50:	2b20      	cmp	r3, #32
 8006d52:	dc4b      	bgt.n	8006dec <UART_SetConfig+0xbd0>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f2c0 8087 	blt.w	8006e68 <UART_SetConfig+0xc4c>
 8006d5a:	2b20      	cmp	r3, #32
 8006d5c:	f200 8084 	bhi.w	8006e68 <UART_SetConfig+0xc4c>
 8006d60:	a201      	add	r2, pc, #4	; (adr r2, 8006d68 <UART_SetConfig+0xb4c>)
 8006d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d66:	bf00      	nop
 8006d68:	08006df3 	.word	0x08006df3
 8006d6c:	08006dfb 	.word	0x08006dfb
 8006d70:	08006e69 	.word	0x08006e69
 8006d74:	08006e69 	.word	0x08006e69
 8006d78:	08006e03 	.word	0x08006e03
 8006d7c:	08006e69 	.word	0x08006e69
 8006d80:	08006e69 	.word	0x08006e69
 8006d84:	08006e69 	.word	0x08006e69
 8006d88:	08006e13 	.word	0x08006e13
 8006d8c:	08006e69 	.word	0x08006e69
 8006d90:	08006e69 	.word	0x08006e69
 8006d94:	08006e69 	.word	0x08006e69
 8006d98:	08006e69 	.word	0x08006e69
 8006d9c:	08006e69 	.word	0x08006e69
 8006da0:	08006e69 	.word	0x08006e69
 8006da4:	08006e69 	.word	0x08006e69
 8006da8:	08006e23 	.word	0x08006e23
 8006dac:	08006e69 	.word	0x08006e69
 8006db0:	08006e69 	.word	0x08006e69
 8006db4:	08006e69 	.word	0x08006e69
 8006db8:	08006e69 	.word	0x08006e69
 8006dbc:	08006e69 	.word	0x08006e69
 8006dc0:	08006e69 	.word	0x08006e69
 8006dc4:	08006e69 	.word	0x08006e69
 8006dc8:	08006e69 	.word	0x08006e69
 8006dcc:	08006e69 	.word	0x08006e69
 8006dd0:	08006e69 	.word	0x08006e69
 8006dd4:	08006e69 	.word	0x08006e69
 8006dd8:	08006e69 	.word	0x08006e69
 8006ddc:	08006e69 	.word	0x08006e69
 8006de0:	08006e69 	.word	0x08006e69
 8006de4:	08006e69 	.word	0x08006e69
 8006de8:	08006e5b 	.word	0x08006e5b
 8006dec:	2b40      	cmp	r3, #64	; 0x40
 8006dee:	d037      	beq.n	8006e60 <UART_SetConfig+0xc44>
 8006df0:	e03a      	b.n	8006e68 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006df2:	f7fd fc13 	bl	800461c <HAL_RCC_GetPCLK1Freq>
 8006df6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006df8:	e03c      	b.n	8006e74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dfa:	f7fd fc25 	bl	8004648 <HAL_RCC_GetPCLK2Freq>
 8006dfe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e00:	e038      	b.n	8006e74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fe fb56 	bl	80054b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e10:	e030      	b.n	8006e74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e12:	f107 0318 	add.w	r3, r7, #24
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fe fca2 	bl	8005760 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e20:	e028      	b.n	8006e74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e22:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <UART_SetConfig+0xc2c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0320 	and.w	r3, r3, #32
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d012      	beq.n	8006e54 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e2e:	4b06      	ldr	r3, [pc, #24]	; (8006e48 <UART_SetConfig+0xc2c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	08db      	lsrs	r3, r3, #3
 8006e34:	f003 0303 	and.w	r3, r3, #3
 8006e38:	4a04      	ldr	r2, [pc, #16]	; (8006e4c <UART_SetConfig+0xc30>)
 8006e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e40:	e018      	b.n	8006e74 <UART_SetConfig+0xc58>
 8006e42:	bf00      	nop
 8006e44:	08018d78 	.word	0x08018d78
 8006e48:	58024400 	.word	0x58024400
 8006e4c:	03d09000 	.word	0x03d09000
 8006e50:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006e54:	4b24      	ldr	r3, [pc, #144]	; (8006ee8 <UART_SetConfig+0xccc>)
 8006e56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e58:	e00c      	b.n	8006e74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e5a:	4b24      	ldr	r3, [pc, #144]	; (8006eec <UART_SetConfig+0xcd0>)
 8006e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e5e:	e009      	b.n	8006e74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e66:	e005      	b.n	8006e74 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006e72:	bf00      	nop
    }

    if (pclk != 0U)
 8006e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d021      	beq.n	8006ebe <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	4a1c      	ldr	r2, [pc, #112]	; (8006ef0 <UART_SetConfig+0xcd4>)
 8006e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e84:	461a      	mov	r2, r3
 8006e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e88:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	085b      	lsrs	r3, r3, #1
 8006e92:	441a      	add	r2, r3
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea0:	2b0f      	cmp	r3, #15
 8006ea2:	d909      	bls.n	8006eb8 <UART_SetConfig+0xc9c>
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eaa:	d205      	bcs.n	8006eb8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	60da      	str	r2, [r3, #12]
 8006eb6:	e002      	b.n	8006ebe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006eda:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3748      	adds	r7, #72	; 0x48
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ee8:	03d09000 	.word	0x03d09000
 8006eec:	003d0900 	.word	0x003d0900
 8006ef0:	08018d78 	.word	0x08018d78

08006ef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00a      	beq.n	8006f1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f66:	f003 0308 	and.w	r3, r3, #8
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f88:	f003 0310 	and.w	r3, r3, #16
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00a      	beq.n	8006fa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d01a      	beq.n	800700a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ff2:	d10a      	bne.n	800700a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	430a      	orrs	r2, r1
 800702a:	605a      	str	r2, [r3, #4]
  }
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af02      	add	r7, sp, #8
 800703e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007048:	f7fb ffec 	bl	8003024 <HAL_GetTick>
 800704c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b08      	cmp	r3, #8
 800705a:	d10e      	bne.n	800707a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800705c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f82f 	bl	80070ce <UART_WaitOnFlagUntilTimeout>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e025      	b.n	80070c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b04      	cmp	r3, #4
 8007086:	d10e      	bne.n	80070a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007088:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f819 	bl	80070ce <UART_WaitOnFlagUntilTimeout>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e00f      	b.n	80070c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2220      	movs	r2, #32
 80070aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b09c      	sub	sp, #112	; 0x70
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	60f8      	str	r0, [r7, #12]
 80070d6:	60b9      	str	r1, [r7, #8]
 80070d8:	603b      	str	r3, [r7, #0]
 80070da:	4613      	mov	r3, r2
 80070dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070de:	e0a9      	b.n	8007234 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e6:	f000 80a5 	beq.w	8007234 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ea:	f7fb ff9b 	bl	8003024 <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d302      	bcc.n	8007100 <UART_WaitOnFlagUntilTimeout+0x32>
 80070fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d140      	bne.n	8007182 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007108:	e853 3f00 	ldrex	r3, [r3]
 800710c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800710e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007110:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007114:	667b      	str	r3, [r7, #100]	; 0x64
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800711e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007120:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007124:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800712c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e6      	bne.n	8007100 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3308      	adds	r3, #8
 8007138:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	f023 0301 	bic.w	r3, r3, #1
 8007148:	663b      	str	r3, [r7, #96]	; 0x60
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3308      	adds	r3, #8
 8007150:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007152:	64ba      	str	r2, [r7, #72]	; 0x48
 8007154:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007158:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e5      	bne.n	8007132 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2220      	movs	r2, #32
 800716a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2220      	movs	r2, #32
 8007172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e069      	b.n	8007256 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b00      	cmp	r3, #0
 800718e:	d051      	beq.n	8007234 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800719a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800719e:	d149      	bne.n	8007234 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071c8:	637b      	str	r3, [r7, #52]	; 0x34
 80071ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e6      	bne.n	80071aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3308      	adds	r3, #8
 80071e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	613b      	str	r3, [r7, #16]
   return(result);
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f023 0301 	bic.w	r3, r3, #1
 80071f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3308      	adds	r3, #8
 80071fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80071fc:	623a      	str	r2, [r7, #32]
 80071fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	69f9      	ldr	r1, [r7, #28]
 8007202:	6a3a      	ldr	r2, [r7, #32]
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	61bb      	str	r3, [r7, #24]
   return(result);
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e5      	bne.n	80071dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2220      	movs	r2, #32
 8007214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2220      	movs	r2, #32
 800721c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2220      	movs	r2, #32
 8007224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e010      	b.n	8007256 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	69da      	ldr	r2, [r3, #28]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	4013      	ands	r3, r2
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	429a      	cmp	r2, r3
 8007242:	bf0c      	ite	eq
 8007244:	2301      	moveq	r3, #1
 8007246:	2300      	movne	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	461a      	mov	r2, r3
 800724c:	79fb      	ldrb	r3, [r7, #7]
 800724e:	429a      	cmp	r2, r3
 8007250:	f43f af46 	beq.w	80070e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3770      	adds	r7, #112	; 0x70
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800725e:	b480      	push	{r7}
 8007260:	b085      	sub	sp, #20
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_UARTEx_DisableFifoMode+0x16>
 8007270:	2302      	movs	r3, #2
 8007272:	e027      	b.n	80072c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2224      	movs	r2, #36	; 0x24
 8007280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0201 	bic.w	r2, r2, #1
 800729a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80072a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2220      	movs	r2, #32
 80072b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e02d      	b.n	8007344 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2224      	movs	r2, #36	; 0x24
 80072f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0201 	bic.w	r2, r2, #1
 800730e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f84f 	bl	80073c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2220      	movs	r2, #32
 8007336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800735c:	2b01      	cmp	r3, #1
 800735e:	d101      	bne.n	8007364 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007360:	2302      	movs	r3, #2
 8007362:	e02d      	b.n	80073c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2224      	movs	r2, #36	; 0x24
 8007370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 0201 	bic.w	r2, r2, #1
 800738a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f811 	bl	80073c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d108      	bne.n	80073ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80073e8:	e031      	b.n	800744e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80073ea:	2310      	movs	r3, #16
 80073ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80073ee:	2310      	movs	r3, #16
 80073f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	0e5b      	lsrs	r3, r3, #25
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	f003 0307 	and.w	r3, r3, #7
 8007400:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	0f5b      	lsrs	r3, r3, #29
 800740a:	b2db      	uxtb	r3, r3
 800740c:	f003 0307 	and.w	r3, r3, #7
 8007410:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	7b3a      	ldrb	r2, [r7, #12]
 8007416:	4911      	ldr	r1, [pc, #68]	; (800745c <UARTEx_SetNbDataToProcess+0x94>)
 8007418:	5c8a      	ldrb	r2, [r1, r2]
 800741a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800741e:	7b3a      	ldrb	r2, [r7, #12]
 8007420:	490f      	ldr	r1, [pc, #60]	; (8007460 <UARTEx_SetNbDataToProcess+0x98>)
 8007422:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007424:	fb93 f3f2 	sdiv	r3, r3, r2
 8007428:	b29a      	uxth	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007430:	7bfb      	ldrb	r3, [r7, #15]
 8007432:	7b7a      	ldrb	r2, [r7, #13]
 8007434:	4909      	ldr	r1, [pc, #36]	; (800745c <UARTEx_SetNbDataToProcess+0x94>)
 8007436:	5c8a      	ldrb	r2, [r1, r2]
 8007438:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800743c:	7b7a      	ldrb	r2, [r7, #13]
 800743e:	4908      	ldr	r1, [pc, #32]	; (8007460 <UARTEx_SetNbDataToProcess+0x98>)
 8007440:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007442:	fb93 f3f2 	sdiv	r3, r3, r2
 8007446:	b29a      	uxth	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800744e:	bf00      	nop
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	08018d90 	.word	0x08018d90
 8007460:	08018d98 	.word	0x08018d98

08007464 <__libc_init_array>:
 8007464:	b570      	push	{r4, r5, r6, lr}
 8007466:	4d0d      	ldr	r5, [pc, #52]	; (800749c <__libc_init_array+0x38>)
 8007468:	4c0d      	ldr	r4, [pc, #52]	; (80074a0 <__libc_init_array+0x3c>)
 800746a:	1b64      	subs	r4, r4, r5
 800746c:	10a4      	asrs	r4, r4, #2
 800746e:	2600      	movs	r6, #0
 8007470:	42a6      	cmp	r6, r4
 8007472:	d109      	bne.n	8007488 <__libc_init_array+0x24>
 8007474:	4d0b      	ldr	r5, [pc, #44]	; (80074a4 <__libc_init_array+0x40>)
 8007476:	4c0c      	ldr	r4, [pc, #48]	; (80074a8 <__libc_init_array+0x44>)
 8007478:	f000 f862 	bl	8007540 <_init>
 800747c:	1b64      	subs	r4, r4, r5
 800747e:	10a4      	asrs	r4, r4, #2
 8007480:	2600      	movs	r6, #0
 8007482:	42a6      	cmp	r6, r4
 8007484:	d105      	bne.n	8007492 <__libc_init_array+0x2e>
 8007486:	bd70      	pop	{r4, r5, r6, pc}
 8007488:	f855 3b04 	ldr.w	r3, [r5], #4
 800748c:	4798      	blx	r3
 800748e:	3601      	adds	r6, #1
 8007490:	e7ee      	b.n	8007470 <__libc_init_array+0xc>
 8007492:	f855 3b04 	ldr.w	r3, [r5], #4
 8007496:	4798      	blx	r3
 8007498:	3601      	adds	r6, #1
 800749a:	e7f2      	b.n	8007482 <__libc_init_array+0x1e>
 800749c:	08018da8 	.word	0x08018da8
 80074a0:	08018da8 	.word	0x08018da8
 80074a4:	08018da8 	.word	0x08018da8
 80074a8:	08018dac 	.word	0x08018dac

080074ac <memset>:
 80074ac:	4402      	add	r2, r0
 80074ae:	4603      	mov	r3, r0
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d100      	bne.n	80074b6 <memset+0xa>
 80074b4:	4770      	bx	lr
 80074b6:	f803 1b01 	strb.w	r1, [r3], #1
 80074ba:	e7f9      	b.n	80074b0 <memset+0x4>

080074bc <ceilf>:
 80074bc:	ee10 3a10 	vmov	r3, s0
 80074c0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80074c4:	3a7f      	subs	r2, #127	; 0x7f
 80074c6:	2a16      	cmp	r2, #22
 80074c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80074cc:	dc2a      	bgt.n	8007524 <ceilf+0x68>
 80074ce:	2a00      	cmp	r2, #0
 80074d0:	da11      	bge.n	80074f6 <ceilf+0x3a>
 80074d2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8007538 <ceilf+0x7c>
 80074d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80074da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80074de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e2:	dd05      	ble.n	80074f0 <ceilf+0x34>
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	db23      	blt.n	8007530 <ceilf+0x74>
 80074e8:	2900      	cmp	r1, #0
 80074ea:	bf18      	it	ne
 80074ec:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 80074f0:	ee00 3a10 	vmov	s0, r3
 80074f4:	4770      	bx	lr
 80074f6:	4911      	ldr	r1, [pc, #68]	; (800753c <ceilf+0x80>)
 80074f8:	4111      	asrs	r1, r2
 80074fa:	420b      	tst	r3, r1
 80074fc:	d0fa      	beq.n	80074f4 <ceilf+0x38>
 80074fe:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007538 <ceilf+0x7c>
 8007502:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007506:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800750a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800750e:	ddef      	ble.n	80074f0 <ceilf+0x34>
 8007510:	2b00      	cmp	r3, #0
 8007512:	bfc2      	ittt	gt
 8007514:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8007518:	fa40 f202 	asrgt.w	r2, r0, r2
 800751c:	189b      	addgt	r3, r3, r2
 800751e:	ea23 0301 	bic.w	r3, r3, r1
 8007522:	e7e5      	b.n	80074f0 <ceilf+0x34>
 8007524:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007528:	d3e4      	bcc.n	80074f4 <ceilf+0x38>
 800752a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800752e:	4770      	bx	lr
 8007530:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007534:	e7dc      	b.n	80074f0 <ceilf+0x34>
 8007536:	bf00      	nop
 8007538:	7149f2ca 	.word	0x7149f2ca
 800753c:	007fffff 	.word	0x007fffff

08007540 <_init>:
 8007540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007542:	bf00      	nop
 8007544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007546:	bc08      	pop	{r3}
 8007548:	469e      	mov	lr, r3
 800754a:	4770      	bx	lr

0800754c <_fini>:
 800754c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754e:	bf00      	nop
 8007550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007552:	bc08      	pop	{r3}
 8007554:	469e      	mov	lr, r3
 8007556:	4770      	bx	lr
