
H7A3_LCD35.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d74  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011848  08008020  08008020  00018020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019868  08019868  00029868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019870  08019870  00029870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08019874  08019874  00029874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  24000000  08019878  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000016c  24000080  080198f8  00030080  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240001ec  080198f8  000301ec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 10 .debug_info   000185fe  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002cf6  00000000  00000000  000486ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001318  00000000  00000000  0004b3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000311a0  00000000  00000000  0004c6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00018a31  00000000  00000000  0007d860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00141f54  00000000  00000000  00096291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001d81e5  2**0
                  CONTENTS, READONLY
 17 .debug_ranges 000011d0  00000000  00000000  001d8238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004fa4  00000000  00000000  001d9408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000080 	.word	0x24000080
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08008008 	.word	0x08008008

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000084 	.word	0x24000084
 80002e8:	08008008 	.word	0x08008008

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <ili9486_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9486_DisplayOn(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep
 80005f4:	2011      	movs	r0, #17
 80005f6:	f000 fe1d 	bl	8001234 <LCD_IO_WriteCmd8>
  ILI9486_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 fd24 	bl	8001048 <LCD_IO_Bl_OnOff>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <ili9486_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9486_DisplayOff(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(0);
 8000608:	2000      	movs	r0, #0
 800060a:	f000 fd1d 	bl	8001048 <LCD_IO_Bl_OnOff>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_SLPIN);    // Sleep
 800060e:	2010      	movs	r0, #16
 8000610:	f000 fe10 	bl	8001234 <LCD_IO_WriteCmd8>
  ILI9486_LCDMUTEX_POP();
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}

08000618 <ili9486_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9486_GetLcdPixelWidth(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_X;
 800061c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <ili9486_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9486_GetLcdPixelHeight(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_Y;
 800062e:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8000632:	4618      	mov	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <ili9486_ReadID>:
  * @brief  Get the ILI9486 ID.
  * @param  None
  * @retval The ILI9486 ID
  */
uint16_t ili9486_ReadID(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_ReadCmd8MultipleData8(0xD3, (uint8_t *)&id, 3, 1);
 8000646:	1d39      	adds	r1, r7, #4
 8000648:	2301      	movs	r3, #1
 800064a:	2203      	movs	r2, #3
 800064c:	20d3      	movs	r0, #211	; 0xd3
 800064e:	f001 fd41 	bl	80020d4 <LCD_IO_ReadCmd8MultipleData8>
  ILI9486_LCDMUTEX_POP();
  if(id == 0x869400)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a05      	ldr	r2, [pc, #20]	; (800066c <ili9486_ReadID+0x30>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d102      	bne.n	8000660 <ili9486_ReadID+0x24>
    return 0x9486;
 800065a:	f249 4386 	movw	r3, #38022	; 0x9486
 800065e:	e000      	b.n	8000662 <ili9486_ReadID+0x26>
  else
    return 0;
 8000660:	2300      	movs	r3, #0
}
 8000662:	4618      	mov	r0, r3
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	00869400 	.word	0x00869400

08000670 <ili9486_Init>:
  * @brief  ILI9486 initialization
  * @param  None
  * @retval None
  */
void ili9486_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  if((Is_ili9486_Initialized & ILI9486_LCD_INITIALIZED) == 0)
 8000674:	4b33      	ldr	r3, [pc, #204]	; (8000744 <ili9486_Init+0xd4>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	2b00      	cmp	r3, #0
 800067e:	d115      	bne.n	80006ac <ili9486_Init+0x3c>
  {
    Is_ili9486_Initialized |= ILI9486_LCD_INITIALIZED;
 8000680:	4b30      	ldr	r3, [pc, #192]	; (8000744 <ili9486_Init+0xd4>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <ili9486_Init+0xd4>)
 800068c:	701a      	strb	r2, [r3, #0]
    if((Is_ili9486_Initialized & ILI9486_IO_INITIALIZED) == 0)
 800068e:	4b2d      	ldr	r3, [pc, #180]	; (8000744 <ili9486_Init+0xd4>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	2b00      	cmp	r3, #0
 8000698:	d101      	bne.n	800069e <ili9486_Init+0x2e>
      LCD_IO_Init();
 800069a:	f000 fce1 	bl	8001060 <LCD_IO_Init>
    Is_ili9486_Initialized |= ILI9486_IO_INITIALIZED;
 800069e:	4b29      	ldr	r3, [pc, #164]	; (8000744 <ili9486_Init+0xd4>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	f043 0302 	orr.w	r3, r3, #2
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b26      	ldr	r3, [pc, #152]	; (8000744 <ili9486_Init+0xd4>)
 80006aa:	701a      	strb	r2, [r3, #0]
  }
  LCD_Delay(10);
 80006ac:	200a      	movs	r0, #10
 80006ae:	f000 fcc0 	bl	8001032 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_SWRESET);
 80006b2:	2001      	movs	r0, #1
 80006b4:	f000 fdbe 	bl	8001234 <LCD_IO_WriteCmd8>
  LCD_Delay(100);
 80006b8:	2064      	movs	r0, #100	; 0x64
 80006ba:	f000 fcba 	bl	8001032 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_RGB_INTERFACE, (uint8_t *)"\x00", 1); // RGB mode off (0xB0)
 80006be:	2201      	movs	r2, #1
 80006c0:	4921      	ldr	r1, [pc, #132]	; (8000748 <ili9486_Init+0xd8>)
 80006c2:	20b0      	movs	r0, #176	; 0xb0
 80006c4:	f001 f9fa 	bl	8001abc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 80006c8:	2011      	movs	r0, #17
 80006ca:	f000 fdb3 	bl	8001234 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80006ce:	200a      	movs	r0, #10
 80006d0:	f000 fcaf 	bl	8001032 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // interface format (0x3A)
 80006d4:	2201      	movs	r2, #1
 80006d6:	491d      	ldr	r1, [pc, #116]	; (800074c <ili9486_Init+0xdc>)
 80006d8:	203a      	movs	r0, #58	; 0x3a
 80006da:	f001 f9ef 	bl	8001abc <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_DOWN);
 80006de:	2036      	movs	r0, #54	; 0x36
 80006e0:	f000 fda8 	bl	8001234 <LCD_IO_WriteCmd8>
 80006e4:	2028      	movs	r0, #40	; 0x28
 80006e6:	f000 fe4f 	bl	8001388 <LCD_IO_WriteData8>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PWCTR3, (uint8_t *)"\x44", 1); // 0xC2
 80006ea:	2201      	movs	r2, #1
 80006ec:	4918      	ldr	r1, [pc, #96]	; (8000750 <ili9486_Init+0xe0>)
 80006ee:	20c2      	movs	r0, #194	; 0xc2
 80006f0:	f001 f9e4 	bl	8001abc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_VMCTR1, (uint8_t *)"\x00\x00\x00\x00", 4); // 0xC5
 80006f4:	2204      	movs	r2, #4
 80006f6:	4917      	ldr	r1, [pc, #92]	; (8000754 <ili9486_Init+0xe4>)
 80006f8:	20c5      	movs	r0, #197	; 0xc5
 80006fa:	f001 f9df 	bl	8001abc <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control (0xE0)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRP1, (uint8_t *)"\x0F\x1F\x1C\x0C\x0F\x08\x48\x98\x37\x0A\x13\x04\x11\x0D\x00", 15);
 80006fe:	220f      	movs	r2, #15
 8000700:	4915      	ldr	r1, [pc, #84]	; (8000758 <ili9486_Init+0xe8>)
 8000702:	20e0      	movs	r0, #224	; 0xe0
 8000704:	f001 f9da 	bl	8001abc <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control (0xE1)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRN1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 8000708:	220f      	movs	r2, #15
 800070a:	4914      	ldr	r1, [pc, #80]	; (800075c <ili9486_Init+0xec>)
 800070c:	20e1      	movs	r0, #225	; 0xe1
 800070e:	f001 f9d5 	bl	8001abc <LCD_IO_WriteCmd8MultipleData8>

  // Digital gamma control1 (0xE2)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_DGCTR1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 8000712:	220f      	movs	r2, #15
 8000714:	4911      	ldr	r1, [pc, #68]	; (800075c <ili9486_Init+0xec>)
 8000716:	20e2      	movs	r0, #226	; 0xe2
 8000718:	f001 f9d0 	bl	8001abc <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_NORON);     // Normal display on (0x13)
 800071c:	2013      	movs	r0, #19
 800071e:	f000 fd89 	bl	8001234 <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_INVOFF);    // Display inversion off (0x20)
 8000722:	2020      	movs	r0, #32
 8000724:	f000 fd86 	bl	8001234 <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 8000728:	2011      	movs	r0, #17
 800072a:	f000 fd83 	bl	8001234 <LCD_IO_WriteCmd8>
  LCD_Delay(200);
 800072e:	20c8      	movs	r0, #200	; 0xc8
 8000730:	f000 fc7f 	bl	8001032 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_DISPON);    // Display on (0x29)
 8000734:	2029      	movs	r0, #41	; 0x29
 8000736:	f000 fd7d 	bl	8001234 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 800073a:	200a      	movs	r0, #10
 800073c:	f000 fc79 	bl	8001032 <LCD_Delay>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2400009c 	.word	0x2400009c
 8000748:	08008020 	.word	0x08008020
 800074c:	08008024 	.word	0x08008024
 8000750:	08008028 	.word	0x08008028
 8000754:	0800802c 	.word	0x0800802c
 8000758:	08008034 	.word	0x08008034
 800075c:	08008044 	.word	0x08008044

08000760 <ili9486_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9486_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	460a      	mov	r2, r1
 800076a:	80fb      	strh	r3, [r7, #6]
 800076c:	4613      	mov	r3, r2
 800076e:	80bb      	strh	r3, [r7, #4]
  ILI9486_LCDMUTEX_PUSH();
  ILI9486_SETCURSOR(Xpos, Ypos);
 8000770:	202a      	movs	r0, #42	; 0x2a
 8000772:	f000 fd5f 	bl	8001234 <LCD_IO_WriteCmd8>
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	b29b      	uxth	r3, r3
 800077c:	b2db      	uxtb	r3, r3
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fe02 	bl	8001388 <LCD_IO_WriteData8>
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fdfd 	bl	8001388 <LCD_IO_WriteData8>
 800078e:	88fb      	ldrh	r3, [r7, #6]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	b29b      	uxth	r3, r3
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fdf6 	bl	8001388 <LCD_IO_WriteData8>
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 fdf1 	bl	8001388 <LCD_IO_WriteData8>
 80007a6:	202b      	movs	r0, #43	; 0x2b
 80007a8:	f000 fd44 	bl	8001234 <LCD_IO_WriteCmd8>
 80007ac:	88bb      	ldrh	r3, [r7, #4]
 80007ae:	0a1b      	lsrs	r3, r3, #8
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fde7 	bl	8001388 <LCD_IO_WriteData8>
 80007ba:	88bb      	ldrh	r3, [r7, #4]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 fde2 	bl	8001388 <LCD_IO_WriteData8>
 80007c4:	88bb      	ldrh	r3, [r7, #4]
 80007c6:	0a1b      	lsrs	r3, r3, #8
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 fddb 	bl	8001388 <LCD_IO_WriteData8>
 80007d2:	88bb      	ldrh	r3, [r7, #4]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 fdd6 	bl	8001388 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <ili9486_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9486_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	80fb      	strh	r3, [r7, #6]
 80007ee:	460b      	mov	r3, r1
 80007f0:	80bb      	strh	r3, [r7, #4]
 80007f2:	4613      	mov	r3, r2
 80007f4:	807b      	strh	r3, [r7, #2]
  ILI9486_LCDMUTEX_PUSH();
  ILI9486_SETCURSOR(Xpos, Ypos);
 80007f6:	202a      	movs	r0, #42	; 0x2a
 80007f8:	f000 fd1c 	bl	8001234 <LCD_IO_WriteCmd8>
 80007fc:	88fb      	ldrh	r3, [r7, #6]
 80007fe:	0a1b      	lsrs	r3, r3, #8
 8000800:	b29b      	uxth	r3, r3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4618      	mov	r0, r3
 8000806:	f000 fdbf 	bl	8001388 <LCD_IO_WriteData8>
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fdba 	bl	8001388 <LCD_IO_WriteData8>
 8000814:	88fb      	ldrh	r3, [r7, #6]
 8000816:	0a1b      	lsrs	r3, r3, #8
 8000818:	b29b      	uxth	r3, r3
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fdb3 	bl	8001388 <LCD_IO_WriteData8>
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fdae 	bl	8001388 <LCD_IO_WriteData8>
 800082c:	202b      	movs	r0, #43	; 0x2b
 800082e:	f000 fd01 	bl	8001234 <LCD_IO_WriteCmd8>
 8000832:	88bb      	ldrh	r3, [r7, #4]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	b29b      	uxth	r3, r3
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fda4 	bl	8001388 <LCD_IO_WriteData8>
 8000840:	88bb      	ldrh	r3, [r7, #4]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4618      	mov	r0, r3
 8000846:	f000 fd9f 	bl	8001388 <LCD_IO_WriteData8>
 800084a:	88bb      	ldrh	r3, [r7, #4]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	b29b      	uxth	r3, r3
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f000 fd98 	bl	8001388 <LCD_IO_WriteData8>
 8000858:	88bb      	ldrh	r3, [r7, #4]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4618      	mov	r0, r3
 800085e:	f000 fd93 	bl	8001388 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_RAMWR); LCD_IO_WriteData16(RGBCode);
 8000862:	202c      	movs	r0, #44	; 0x2c
 8000864:	f000 fce6 	bl	8001234 <LCD_IO_WriteCmd8>
 8000868:	887b      	ldrh	r3, [r7, #2]
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fe2e 	bl	80014cc <LCD_IO_WriteData16>
  ILI9486_LCDMUTEX_POP();
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <ili9486_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9486_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	460a      	mov	r2, r1
 8000882:	80fb      	strh	r3, [r7, #6]
 8000884:	4613      	mov	r3, r2
 8000886:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8000888:	2201      	movs	r2, #1
 800088a:	4925      	ldr	r1, [pc, #148]	; (8000920 <ili9486_ReadPixel+0xa8>)
 800088c:	203a      	movs	r0, #58	; 0x3a
 800088e:	f001 f915 	bl	8001abc <LCD_IO_WriteCmd8MultipleData8>
  ILI9486_SETCURSOR(Xpos, Ypos);
 8000892:	202a      	movs	r0, #42	; 0x2a
 8000894:	f000 fcce 	bl	8001234 <LCD_IO_WriteCmd8>
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	0a1b      	lsrs	r3, r3, #8
 800089c:	b29b      	uxth	r3, r3
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 fd71 	bl	8001388 <LCD_IO_WriteData8>
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fd6c 	bl	8001388 <LCD_IO_WriteData8>
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	0a1b      	lsrs	r3, r3, #8
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fd65 	bl	8001388 <LCD_IO_WriteData8>
 80008be:	88fb      	ldrh	r3, [r7, #6]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fd60 	bl	8001388 <LCD_IO_WriteData8>
 80008c8:	202b      	movs	r0, #43	; 0x2b
 80008ca:	f000 fcb3 	bl	8001234 <LCD_IO_WriteCmd8>
 80008ce:	88bb      	ldrh	r3, [r7, #4]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fd56 	bl	8001388 <LCD_IO_WriteData8>
 80008dc:	88bb      	ldrh	r3, [r7, #4]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 fd51 	bl	8001388 <LCD_IO_WriteData8>
 80008e6:	88bb      	ldrh	r3, [r7, #4]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fd4a 	bl	8001388 <LCD_IO_WriteData8>
 80008f4:	88bb      	ldrh	r3, [r7, #4]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 fd45 	bl	8001388 <LCD_IO_WriteData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9486_RAMRD, (uint16_t *)&ret, 1, 1);
 80008fe:	f107 010e 	add.w	r1, r7, #14
 8000902:	2301      	movs	r3, #1
 8000904:	2201      	movs	r2, #1
 8000906:	202e      	movs	r0, #46	; 0x2e
 8000908:	f001 fd82 	bl	8002410 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 800090c:	2201      	movs	r2, #1
 800090e:	4905      	ldr	r1, [pc, #20]	; (8000924 <ili9486_ReadPixel+0xac>)
 8000910:	203a      	movs	r0, #58	; 0x3a
 8000912:	f001 f8d3 	bl	8001abc <LCD_IO_WriteCmd8MultipleData8>
  ILI9486_LCDMUTEX_POP();
  return(ret);
 8000916:	89fb      	ldrh	r3, [r7, #14]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	08008054 	.word	0x08008054
 8000924:	08008024 	.word	0x08008024

08000928 <ili9486_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9486_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4604      	mov	r4, r0
 8000930:	4608      	mov	r0, r1
 8000932:	4611      	mov	r1, r2
 8000934:	461a      	mov	r2, r3
 8000936:	4623      	mov	r3, r4
 8000938:	80fb      	strh	r3, [r7, #6]
 800093a:	4603      	mov	r3, r0
 800093c:	80bb      	strh	r3, [r7, #4]
 800093e:	460b      	mov	r3, r1
 8000940:	807b      	strh	r3, [r7, #2]
 8000942:	4613      	mov	r3, r2
 8000944:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8000946:	4a2a      	ldr	r2, [pc, #168]	; (80009f0 <ili9486_SetDisplayWindow+0xc8>)
 8000948:	88bb      	ldrh	r3, [r7, #4]
 800094a:	8013      	strh	r3, [r2, #0]
 800094c:	88ba      	ldrh	r2, [r7, #4]
 800094e:	883b      	ldrh	r3, [r7, #0]
 8000950:	4413      	add	r3, r2
 8000952:	b29b      	uxth	r3, r3
 8000954:	3b01      	subs	r3, #1
 8000956:	b29a      	uxth	r2, r3
 8000958:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <ili9486_SetDisplayWindow+0xcc>)
 800095a:	801a      	strh	r2, [r3, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 800095c:	202a      	movs	r0, #42	; 0x2a
 800095e:	f000 fc69 	bl	8001234 <LCD_IO_WriteCmd8>
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	b29b      	uxth	r3, r3
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fd0c 	bl	8001388 <LCD_IO_WriteData8>
 8000970:	88fb      	ldrh	r3, [r7, #6]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	4618      	mov	r0, r3
 8000976:	f000 fd07 	bl	8001388 <LCD_IO_WriteData8>
 800097a:	88fa      	ldrh	r2, [r7, #6]
 800097c:	887b      	ldrh	r3, [r7, #2]
 800097e:	4413      	add	r3, r2
 8000980:	3b01      	subs	r3, #1
 8000982:	121b      	asrs	r3, r3, #8
 8000984:	b2db      	uxtb	r3, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fcfe 	bl	8001388 <LCD_IO_WriteData8>
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	b2da      	uxtb	r2, r3
 8000990:	887b      	ldrh	r3, [r7, #2]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4413      	add	r3, r2
 8000996:	b2db      	uxtb	r3, r3
 8000998:	3b01      	subs	r3, #1
 800099a:	b2db      	uxtb	r3, r3
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fcf3 	bl	8001388 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 80009a2:	202b      	movs	r0, #43	; 0x2b
 80009a4:	f000 fc46 	bl	8001234 <LCD_IO_WriteCmd8>
 80009a8:	88bb      	ldrh	r3, [r7, #4]
 80009aa:	0a1b      	lsrs	r3, r3, #8
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fce9 	bl	8001388 <LCD_IO_WriteData8>
 80009b6:	88bb      	ldrh	r3, [r7, #4]
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 fce4 	bl	8001388 <LCD_IO_WriteData8>
 80009c0:	88ba      	ldrh	r2, [r7, #4]
 80009c2:	883b      	ldrh	r3, [r7, #0]
 80009c4:	4413      	add	r3, r2
 80009c6:	3b01      	subs	r3, #1
 80009c8:	121b      	asrs	r3, r3, #8
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fcdb 	bl	8001388 <LCD_IO_WriteData8>
 80009d2:	88bb      	ldrh	r3, [r7, #4]
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	883b      	ldrh	r3, [r7, #0]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4413      	add	r3, r2
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	3b01      	subs	r3, #1
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fcd0 	bl	8001388 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd90      	pop	{r4, r7, pc}
 80009f0:	2400009e 	.word	0x2400009e
 80009f4:	240000a0 	.word	0x240000a0

080009f8 <ili9486_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9486_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4604      	mov	r4, r0
 8000a00:	4608      	mov	r0, r1
 8000a02:	4611      	mov	r1, r2
 8000a04:	461a      	mov	r2, r3
 8000a06:	4623      	mov	r3, r4
 8000a08:	80fb      	strh	r3, [r7, #6]
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80bb      	strh	r3, [r7, #4]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	807b      	strh	r3, [r7, #2]
 8000a12:	4613      	mov	r3, r2
 8000a14:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 8000a16:	202a      	movs	r0, #42	; 0x2a
 8000a18:	f000 fc0c 	bl	8001234 <LCD_IO_WriteCmd8>
 8000a1c:	88bb      	ldrh	r3, [r7, #4]
 8000a1e:	0a1b      	lsrs	r3, r3, #8
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 fcaf 	bl	8001388 <LCD_IO_WriteData8>
 8000a2a:	88bb      	ldrh	r3, [r7, #4]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fcaa 	bl	8001388 <LCD_IO_WriteData8>
 8000a34:	88ba      	ldrh	r2, [r7, #4]
 8000a36:	883b      	ldrh	r3, [r7, #0]
 8000a38:	4413      	add	r3, r2
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	121b      	asrs	r3, r3, #8
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 fca1 	bl	8001388 <LCD_IO_WriteData8>
 8000a46:	88bb      	ldrh	r3, [r7, #4]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	883b      	ldrh	r3, [r7, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4413      	add	r3, r2
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	3b01      	subs	r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fc96 	bl	8001388 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 8000a5c:	202b      	movs	r0, #43	; 0x2b
 8000a5e:	f000 fbe9 	bl	8001234 <LCD_IO_WriteCmd8>
 8000a62:	887b      	ldrh	r3, [r7, #2]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fc8c 	bl	8001388 <LCD_IO_WriteData8>
 8000a70:	887b      	ldrh	r3, [r7, #2]
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fc87 	bl	8001388 <LCD_IO_WriteData8>
 8000a7a:	887b      	ldrh	r3, [r7, #2]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 fc80 	bl	8001388 <LCD_IO_WriteData8>
 8000a88:	887b      	ldrh	r3, [r7, #2]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fc7b 	bl	8001388 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Length);
 8000a92:	883a      	ldrh	r2, [r7, #0]
 8000a94:	88fb      	ldrh	r3, [r7, #6]
 8000a96:	4619      	mov	r1, r3
 8000a98:	202c      	movs	r0, #44	; 0x2c
 8000a9a:	f000 fe41 	bl	8001720 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd90      	pop	{r4, r7, pc}

08000aa6 <ili9486_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9486_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8000aa6:	b590      	push	{r4, r7, lr}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4604      	mov	r4, r0
 8000aae:	4608      	mov	r0, r1
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4623      	mov	r3, r4
 8000ab6:	80fb      	strh	r3, [r7, #6]
 8000ab8:	4603      	mov	r3, r0
 8000aba:	80bb      	strh	r3, [r7, #4]
 8000abc:	460b      	mov	r3, r1
 8000abe:	807b      	strh	r3, [r7, #2]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 8000ac4:	202a      	movs	r0, #42	; 0x2a
 8000ac6:	f000 fbb5 	bl	8001234 <LCD_IO_WriteCmd8>
 8000aca:	88bb      	ldrh	r3, [r7, #4]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 fc58 	bl	8001388 <LCD_IO_WriteData8>
 8000ad8:	88bb      	ldrh	r3, [r7, #4]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 fc53 	bl	8001388 <LCD_IO_WriteData8>
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fc4c 	bl	8001388 <LCD_IO_WriteData8>
 8000af0:	88bb      	ldrh	r3, [r7, #4]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fc47 	bl	8001388 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 8000afa:	202b      	movs	r0, #43	; 0x2b
 8000afc:	f000 fb9a 	bl	8001234 <LCD_IO_WriteCmd8>
 8000b00:	887b      	ldrh	r3, [r7, #2]
 8000b02:	0a1b      	lsrs	r3, r3, #8
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 fc3d 	bl	8001388 <LCD_IO_WriteData8>
 8000b0e:	887b      	ldrh	r3, [r7, #2]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fc38 	bl	8001388 <LCD_IO_WriteData8>
 8000b18:	887a      	ldrh	r2, [r7, #2]
 8000b1a:	883b      	ldrh	r3, [r7, #0]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	121b      	asrs	r3, r3, #8
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 fc2f 	bl	8001388 <LCD_IO_WriteData8>
 8000b2a:	887b      	ldrh	r3, [r7, #2]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	883b      	ldrh	r3, [r7, #0]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	4413      	add	r3, r2
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	3b01      	subs	r3, #1
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 fc24 	bl	8001388 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Length);
 8000b40:	883a      	ldrh	r2, [r7, #0]
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	4619      	mov	r1, r3
 8000b46:	202c      	movs	r0, #44	; 0x2c
 8000b48:	f000 fdea 	bl	8001720 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd90      	pop	{r4, r7, pc}

08000b54 <ili9486_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9486_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	4611      	mov	r1, r2
 8000b60:	461a      	mov	r2, r3
 8000b62:	4623      	mov	r3, r4
 8000b64:	80fb      	strh	r3, [r7, #6]
 8000b66:	4603      	mov	r3, r0
 8000b68:	80bb      	strh	r3, [r7, #4]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	807b      	strh	r3, [r7, #2]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8000b72:	202a      	movs	r0, #42	; 0x2a
 8000b74:	f000 fb5e 	bl	8001234 <LCD_IO_WriteCmd8>
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fc01 	bl	8001388 <LCD_IO_WriteData8>
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 fbfc 	bl	8001388 <LCD_IO_WriteData8>
 8000b90:	88fa      	ldrh	r2, [r7, #6]
 8000b92:	887b      	ldrh	r3, [r7, #2]
 8000b94:	4413      	add	r3, r2
 8000b96:	3b01      	subs	r3, #1
 8000b98:	121b      	asrs	r3, r3, #8
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 fbf3 	bl	8001388 <LCD_IO_WriteData8>
 8000ba2:	88fb      	ldrh	r3, [r7, #6]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4413      	add	r3, r2
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 fbe8 	bl	8001388 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8000bb8:	202b      	movs	r0, #43	; 0x2b
 8000bba:	f000 fb3b 	bl	8001234 <LCD_IO_WriteCmd8>
 8000bbe:	88bb      	ldrh	r3, [r7, #4]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 fbde 	bl	8001388 <LCD_IO_WriteData8>
 8000bcc:	88bb      	ldrh	r3, [r7, #4]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 fbd9 	bl	8001388 <LCD_IO_WriteData8>
 8000bd6:	88ba      	ldrh	r2, [r7, #4]
 8000bd8:	883b      	ldrh	r3, [r7, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	121b      	asrs	r3, r3, #8
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fbd0 	bl	8001388 <LCD_IO_WriteData8>
 8000be8:	88bb      	ldrh	r3, [r7, #4]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	883b      	ldrh	r3, [r7, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 fbc5 	bl	8001388 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Xsize * Ysize);
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	883a      	ldrh	r2, [r7, #0]
 8000c02:	fb02 f303 	mul.w	r3, r2, r3
 8000c06:	461a      	mov	r2, r3
 8000c08:	8b3b      	ldrh	r3, [r7, #24]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	202c      	movs	r0, #44	; 0x2c
 8000c0e:	f000 fd87 	bl	8001720 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd90      	pop	{r4, r7, pc}
	...

08000c1c <ili9486_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9486_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	603a      	str	r2, [r7, #0]
 8000c26:	80fb      	strh	r3, [r7, #6]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	80bb      	strh	r3, [r7, #4]
  uint32_t index, size;
  /* Read bitmap size */
  size = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfSize;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000c32:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfOffBits;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8000c3a:	60bb      	str	r3, [r7, #8]
  size = (size - index) / 2;
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	085b      	lsrs	r3, r3, #1
 8000c44:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 8000c46:	683a      	ldr	r2, [r7, #0]
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	603b      	str	r3, [r7, #0]

  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_UP);
 8000c4e:	2036      	movs	r0, #54	; 0x36
 8000c50:	f000 faf0 	bl	8001234 <LCD_IO_WriteCmd8>
 8000c54:	2068      	movs	r0, #104	; 0x68
 8000c56:	f000 fb97 	bl	8001388 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(ILI9486_SIZE_Y - 1 - yEnd); LCD_IO_WriteData16_to_2x8(ILI9486_SIZE_Y - 1 - yStart);
 8000c5a:	202b      	movs	r0, #43	; 0x2b
 8000c5c:	f000 faea 	bl	8001234 <LCD_IO_WriteCmd8>
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <ili9486_DrawBitmap+0xb4>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	f240 133f 	movw	r3, #319	; 0x13f
 8000c6a:	1a9b      	subs	r3, r3, r2
 8000c6c:	121b      	asrs	r3, r3, #8
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fb89 	bl	8001388 <LCD_IO_WriteData8>
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <ili9486_DrawBitmap+0xb4>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 fb80 	bl	8001388 <LCD_IO_WriteData8>
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <ili9486_DrawBitmap+0xb8>)
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	f240 133f 	movw	r3, #319	; 0x13f
 8000c92:	1a9b      	subs	r3, r3, r2
 8000c94:	121b      	asrs	r3, r3, #8
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 fb75 	bl	8001388 <LCD_IO_WriteData8>
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <ili9486_DrawBitmap+0xb8>)
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 fb6c 	bl	8001388 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9486_RAMWR, (uint16_t *)pbmp, size);
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	6839      	ldr	r1, [r7, #0]
 8000cb4:	202c      	movs	r0, #44	; 0x2c
 8000cb6:	f001 f83b 	bl	8001d30 <LCD_IO_WriteCmd8MultipleData16>
  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_DOWN);
 8000cba:	2036      	movs	r0, #54	; 0x36
 8000cbc:	f000 faba 	bl	8001234 <LCD_IO_WriteCmd8>
 8000cc0:	2028      	movs	r0, #40	; 0x28
 8000cc2:	f000 fb61 	bl	8001388 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	240000a0 	.word	0x240000a0
 8000cd4:	2400009e 	.word	0x2400009e

08000cd8 <ili9486_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9486_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4623      	mov	r3, r4
 8000ce8:	80fb      	strh	r3, [r7, #6]
 8000cea:	4603      	mov	r3, r0
 8000cec:	80bb      	strh	r3, [r7, #4]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	807b      	strh	r3, [r7, #2]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	803b      	strh	r3, [r7, #0]
  ili9486_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000cf6:	883b      	ldrh	r3, [r7, #0]
 8000cf8:	887a      	ldrh	r2, [r7, #2]
 8000cfa:	88b9      	ldrh	r1, [r7, #4]
 8000cfc:	88f8      	ldrh	r0, [r7, #6]
 8000cfe:	f7ff fe13 	bl	8000928 <ili9486_SetDisplayWindow>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9486_RAMWR, pData, Xsize * Ysize);
 8000d02:	887b      	ldrh	r3, [r7, #2]
 8000d04:	883a      	ldrh	r2, [r7, #0]
 8000d06:	fb02 f303 	mul.w	r3, r2, r3
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	69b9      	ldr	r1, [r7, #24]
 8000d0e:	202c      	movs	r0, #44	; 0x2c
 8000d10:	f001 f80e 	bl	8001d30 <LCD_IO_WriteCmd8MultipleData16>
  ILI9486_LCDMUTEX_POP();
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd90      	pop	{r4, r7, pc}

08000d1c <ili9486_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9486_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4604      	mov	r4, r0
 8000d24:	4608      	mov	r0, r1
 8000d26:	4611      	mov	r1, r2
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4623      	mov	r3, r4
 8000d2c:	80fb      	strh	r3, [r7, #6]
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80bb      	strh	r3, [r7, #4]
 8000d32:	460b      	mov	r3, r1
 8000d34:	807b      	strh	r3, [r7, #2]
 8000d36:	4613      	mov	r3, r2
 8000d38:	803b      	strh	r3, [r7, #0]
  ili9486_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000d3a:	883b      	ldrh	r3, [r7, #0]
 8000d3c:	887a      	ldrh	r2, [r7, #2]
 8000d3e:	88b9      	ldrh	r1, [r7, #4]
 8000d40:	88f8      	ldrh	r0, [r7, #6]
 8000d42:	f7ff fdf1 	bl	8000928 <ili9486_SetDisplayWindow>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8000d46:	2201      	movs	r2, #1
 8000d48:	490b      	ldr	r1, [pc, #44]	; (8000d78 <ili9486_ReadRGBImage+0x5c>)
 8000d4a:	203a      	movs	r0, #58	; 0x3a
 8000d4c:	f000 feb6 	bl	8001abc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9486_RAMRD, pData, Xsize * Ysize, 1);
 8000d50:	887b      	ldrh	r3, [r7, #2]
 8000d52:	883a      	ldrh	r2, [r7, #0]
 8000d54:	fb02 f303 	mul.w	r3, r2, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	69b9      	ldr	r1, [r7, #24]
 8000d5e:	202e      	movs	r0, #46	; 0x2e
 8000d60:	f001 fb56 	bl	8002410 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 8000d64:	2201      	movs	r2, #1
 8000d66:	4905      	ldr	r1, [pc, #20]	; (8000d7c <ili9486_ReadRGBImage+0x60>)
 8000d68:	203a      	movs	r0, #58	; 0x3a
 8000d6a:	f000 fea7 	bl	8001abc <LCD_IO_WriteCmd8MultipleData8>
  ILI9486_LCDMUTEX_POP();
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	bf00      	nop
 8000d78:	08008054 	.word	0x08008054
 8000d7c:	08008024 	.word	0x08008024

08000d80 <ili9486_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9486_WriteChar(uint16_t Xpo, uint16_t Ypo, char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8000d80:	b082      	sub	sp, #8
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b08a      	sub	sp, #40	; 0x28
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	603a      	str	r2, [r7, #0]
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	80fb      	strh	r3, [r7, #6]
 8000d90:	460b      	mov	r3, r1
 8000d92:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8000d9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000d9e:	ee07 3a90 	vmov	s15, r3
 8000da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000da6:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000daa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000dae:	eeb0 0a47 	vmov.f32	s0, s14
 8000db2:	f007 f8e7 	bl	8007f84 <ceilf>
 8000db6:	eef0 7a40 	vmov.f32	s15, s0
 8000dba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dbe:	ee17 3a90 	vmov	r3, s15
 8000dc2:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	2280      	movs	r2, #128	; 0x80
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
 8000dd6:	e060      	b.n	8000e9a <ili9486_WriteChar+0x11a>

		hop32 = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
 8000de0:	e024      	b.n	8000e2c <ili9486_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8000de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	7812      	ldrb	r2, [r2, #0]
 8000de8:	3a20      	subs	r2, #32
 8000dea:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8000dec:	fb01 f202 	mul.w	r2, r1, r2
 8000df0:	6979      	ldr	r1, [r7, #20]
 8000df2:	fb02 f101 	mul.w	r1, r2, r1
 8000df6:	6a3a      	ldr	r2, [r7, #32]
 8000df8:	6978      	ldr	r0, [r7, #20]
 8000dfa:	fb00 f202 	mul.w	r2, r0, r2
 8000dfe:	4411      	add	r1, r2
 8000e00:	69fa      	ldr	r2, [r7, #28]
 8000e02:	440a      	add	r2, r1
 8000e04:	4413      	add	r3, r2
 8000e06:	7819      	ldrb	r1, [r3, #0]
 8000e08:	f107 020c 	add.w	r2, r7, #12
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	4413      	add	r3, r2
 8000e10:	460a      	mov	r2, r1
 8000e12:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	021b      	lsls	r3, r3, #8
 8000e18:	f107 010c 	add.w	r1, r7, #12
 8000e1c:	69fa      	ldr	r2, [r7, #28]
 8000e1e:	440a      	add	r2, r1
 8000e20:	7812      	ldrb	r2, [r2, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	61fb      	str	r3, [r7, #28]
 8000e2c:	69fa      	ldr	r2, [r7, #28]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	dbd6      	blt.n	8000de2 <ili9486_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8000e34:	2300      	movs	r3, #0
 8000e36:	61bb      	str	r3, [r7, #24]
 8000e38:	e027      	b.n	8000e8a <ili9486_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8000e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d00e      	beq.n	8000e66 <ili9486_WriteChar+0xe6>
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	88fb      	ldrh	r3, [r7, #6]
 8000e4e:	4413      	add	r3, r2
 8000e50:	b298      	uxth	r0, r3
 8000e52:	6a3b      	ldr	r3, [r7, #32]
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	88bb      	ldrh	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f7ff fcc0 	bl	80007e4 <ili9486_WritePixel>
 8000e64:	e00e      	b.n	8000e84 <ili9486_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b298      	uxth	r0, r3
 8000e70:	6a3b      	ldr	r3, [r7, #32]
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	88bb      	ldrh	r3, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f7ff fcb0 	bl	80007e4 <ili9486_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	3301      	adds	r3, #1
 8000e88:	61bb      	str	r3, [r7, #24]
 8000e8a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	4293      	cmp	r3, r2
 8000e92:	dbd2      	blt.n	8000e3a <ili9486_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8000e94:	6a3b      	ldr	r3, [r7, #32]
 8000e96:	3301      	adds	r3, #1
 8000e98:	623b      	str	r3, [r7, #32]
 8000e9a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	6a3b      	ldr	r3, [r7, #32]
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	db99      	blt.n	8000dd8 <ili9486_WriteChar+0x58>
			}

		}
	}
}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	; 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000eb0:	b002      	add	sp, #8
 8000eb2:	4770      	bx	lr

08000eb4 <ili9486_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9486_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b088      	sub	sp, #32
 8000eba:	af04      	add	r7, sp, #16
 8000ebc:	603a      	str	r2, [r7, #0]
 8000ebe:	61fb      	str	r3, [r7, #28]
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	80fb      	strh	r3, [r7, #6]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9486_GetLcdPixelHeight();
 8000ec8:	f7ff fbaf 	bl	800062a <ili9486_GetLcdPixelHeight>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9486_GetLcdPixelWidth();
 8000ed0:	f7ff fba2 	bl	8000618 <ili9486_GetLcdPixelWidth>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8000ed8:	e02c      	b.n	8000f34 <ili9486_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	8c3a      	ldrh	r2, [r7, #32]
 8000ede:	441a      	add	r2, r3
 8000ee0:	89bb      	ldrh	r3, [r7, #12]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	db13      	blt.n	8000f0e <ili9486_WriteString+0x5a>
			Xpo = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8000eea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000eec:	88bb      	ldrh	r3, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8000ef2:	88bb      	ldrh	r3, [r7, #4]
 8000ef4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000ef6:	441a      	add	r2, r3
 8000ef8:	89fb      	ldrh	r3, [r7, #14]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	da1f      	bge.n	8000f3e <ili9486_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b20      	cmp	r3, #32
 8000f04:	d103      	bne.n	8000f0e <ili9486_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	603b      	str	r3, [r7, #0]
				continue;
 8000f0c:	e012      	b.n	8000f34 <ili9486_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9486_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8000f0e:	88b9      	ldrh	r1, [r7, #4]
 8000f10:	88f8      	ldrh	r0, [r7, #6]
 8000f12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f14:	9302      	str	r3, [sp, #8]
 8000f16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	6a3b      	ldr	r3, [r7, #32]
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	f7ff ff2d 	bl	8000d80 <ili9486_WriteChar>
		Xpo += fonto.Width;
 8000f26:	8c3a      	ldrh	r2, [r7, #32]
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	80fb      	strh	r3, [r7, #6]
		strr++;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	3301      	adds	r3, #1
 8000f32:	603b      	str	r3, [r7, #0]
	while(*strr){
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1ce      	bne.n	8000eda <ili9486_WriteString+0x26>
	}
}
 8000f3c:	e000      	b.n	8000f40 <ili9486_WriteString+0x8c>
				break;
 8000f3e:	bf00      	nop
}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f4a:	b002      	add	sp, #8
 8000f4c:	4770      	bx	lr
	...

08000f50 <ili9486_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9486_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	80bb      	strh	r3, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9486_ORIENTATION == 1)
  if((TopFix != scrparam[1]) || (BottonFix != scrparam[3]))
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <ili9486_Scroll+0xb8>)
 8000f64:	885b      	ldrh	r3, [r3, #2]
 8000f66:	88ba      	ldrh	r2, [r7, #4]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d104      	bne.n	8000f76 <ili9486_Scroll+0x26>
 8000f6c:	4b26      	ldr	r3, [pc, #152]	; (8001008 <ili9486_Scroll+0xb8>)
 8000f6e:	88db      	ldrh	r3, [r3, #6]
 8000f70:	887a      	ldrh	r2, [r7, #2]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d013      	beq.n	8000f9e <ili9486_Scroll+0x4e>
  {
    scrparam[1] = TopFix;
 8000f76:	4a24      	ldr	r2, [pc, #144]	; (8001008 <ili9486_Scroll+0xb8>)
 8000f78:	88bb      	ldrh	r3, [r7, #4]
 8000f7a:	8053      	strh	r3, [r2, #2]
    scrparam[3] = BottonFix;
 8000f7c:	4a22      	ldr	r2, [pc, #136]	; (8001008 <ili9486_Scroll+0xb8>)
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	80d3      	strh	r3, [r2, #6]
    scrparam[2] = ILI9486_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 8000f82:	88ba      	ldrh	r2, [r7, #4]
 8000f84:	887b      	ldrh	r3, [r7, #2]
 8000f86:	4413      	add	r3, r2
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <ili9486_Scroll+0xb8>)
 8000f92:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9486_VSCRDEF, &scrparam[1], 3);
 8000f94:	2203      	movs	r2, #3
 8000f96:	491d      	ldr	r1, [pc, #116]	; (800100c <ili9486_Scroll+0xbc>)
 8000f98:	2033      	movs	r0, #51	; 0x33
 8000f9a:	f000 fec9 	bl	8001d30 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll = (0 - Scroll) % scrparam[2];
 8000f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa2:	425b      	negs	r3, r3
 8000fa4:	4a18      	ldr	r2, [pc, #96]	; (8001008 <ili9486_Scroll+0xb8>)
 8000fa6:	8892      	ldrh	r2, [r2, #4]
 8000fa8:	fb93 f1f2 	sdiv	r1, r3, r2
 8000fac:	fb01 f202 	mul.w	r2, r1, r2
 8000fb0:	1a9b      	subs	r3, r3, r2
 8000fb2:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8000fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	da0a      	bge.n	8000fd2 <ili9486_Scroll+0x82>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <ili9486_Scroll+0xb8>)
 8000fbe:	889a      	ldrh	r2, [r3, #4]
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <ili9486_Scroll+0xb8>)
 8000fc8:	885b      	ldrh	r3, [r3, #2]
 8000fca:	4413      	add	r3, r2
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	80fb      	strh	r3, [r7, #6]
 8000fd0:	e005      	b.n	8000fde <ili9486_Scroll+0x8e>
  else
    Scroll = Scroll + scrparam[1];
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <ili9486_Scroll+0xb8>)
 8000fd4:	885a      	ldrh	r2, [r3, #2]
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	4413      	add	r3, r2
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #endif
  if(Scroll != scrparam[0])
 8000fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe2:	4a09      	ldr	r2, [pc, #36]	; (8001008 <ili9486_Scroll+0xb8>)
 8000fe4:	8812      	ldrh	r2, [r2, #0]
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d009      	beq.n	8000ffe <ili9486_Scroll+0xae>
  {
    scrparam[0] = Scroll;
 8000fea:	88fa      	ldrh	r2, [r7, #6]
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <ili9486_Scroll+0xb8>)
 8000fee:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9486_VSCRSADD, scrparam[0], 1);
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <ili9486_Scroll+0xb8>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	2037      	movs	r0, #55	; 0x37
 8000ffa:	f000 fb91 	bl	8001720 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9486_LCDMUTEX_POP();
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	240000a4 	.word	0x240000a4
 800100c:	240000a6 	.word	0x240000a6

08001010 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  while(c--);
 8001018:	bf00      	nop
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	1e5a      	subs	r2, r3, #1
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1fa      	bne.n	800101a <LCD_IO_Delay+0xa>
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LCD_Delay>:
#pragma pop
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f002 fd62 	bl	8003b04 <HAL_Delay>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
    GPIOX_CLR(LCD_BL);
  else
    GPIOX_SET(LCD_BL);
  #endif
  #endif
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  #define GPIOX_CLOCK_LCD_RD    GPIOX_CLOCK(LCD_RD)
  #else
  #define GPIOX_CLOCK_LCD_RD    0
  #endif

  RCC->AHB4ENR |= (GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_WR) |
 8001064:	4b6c      	ldr	r3, [pc, #432]	; (8001218 <LCD_IO_Init+0x1b8>)
 8001066:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800106a:	4a6b      	ldr	r2, [pc, #428]	; (8001218 <LCD_IO_Init+0x1b8>)
 800106c:	f043 035f 	orr.w	r3, r3, #95	; 0x5f
 8001070:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
                   GPIOX_CLOCK(LCD_D0) | GPIOX_CLOCK(LCD_D1) | GPIOX_CLOCK(LCD_D2) | GPIOX_CLOCK(LCD_D3) |
                   GPIOX_CLOCK(LCD_D4) | GPIOX_CLOCK(LCD_D5) | GPIOX_CLOCK(LCD_D6) | GPIOX_CLOCK(LCD_D7) |
                   GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_RD);

  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_RST_OFF;                          /* RST = 1 */
 8001074:	4b69      	ldr	r3, [pc, #420]	; (800121c <LCD_IO_Init+0x1bc>)
 8001076:	2204      	movs	r2, #4
 8001078:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_RST);
 800107a:	4b68      	ldr	r3, [pc, #416]	; (800121c <LCD_IO_Init+0x1bc>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001082:	4a66      	ldr	r2, [pc, #408]	; (800121c <LCD_IO_Init+0x1bc>)
 8001084:	f043 0310 	orr.w	r3, r3, #16
 8001088:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_BL) = LCD_BLON;
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  GPIOX_SET(LCD_CS);                    /* CS = 1 */
 800108a:	4b65      	ldr	r3, [pc, #404]	; (8001220 <LCD_IO_Init+0x1c0>)
 800108c:	2202      	movs	r2, #2
 800108e:	619a      	str	r2, [r3, #24]
  LCD_RS_DATA;                          /* RS = 1 */
 8001090:	4b62      	ldr	r3, [pc, #392]	; (800121c <LCD_IO_Init+0x1bc>)
 8001092:	2208      	movs	r2, #8
 8001094:	619a      	str	r2, [r3, #24]
  GPIOX_SET(LCD_WR);                    /* WR = 1 */
 8001096:	4b61      	ldr	r3, [pc, #388]	; (800121c <LCD_IO_Init+0x1bc>)
 8001098:	2201      	movs	r2, #1
 800109a:	619a      	str	r2, [r3, #24]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_SET(LCD_RD);                    /* RD = 1 */
 800109c:	4b61      	ldr	r3, [pc, #388]	; (8001224 <LCD_IO_Init+0x1c4>)
 800109e:	2208      	movs	r2, #8
 80010a0:	619a      	str	r2, [r3, #24]
  #endif

  GPIOX_MODER(MODE_OUT, LCD_CS);
 80010a2:	4b5f      	ldr	r3, [pc, #380]	; (8001220 <LCD_IO_Init+0x1c0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f023 030c 	bic.w	r3, r3, #12
 80010aa:	4a5d      	ldr	r2, [pc, #372]	; (8001220 <LCD_IO_Init+0x1c0>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 80010b2:	4b5a      	ldr	r3, [pc, #360]	; (800121c <LCD_IO_Init+0x1bc>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80010ba:	4a58      	ldr	r2, [pc, #352]	; (800121c <LCD_IO_Init+0x1bc>)
 80010bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c0:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_WR);
 80010c2:	4b56      	ldr	r3, [pc, #344]	; (800121c <LCD_IO_Init+0x1bc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f023 0303 	bic.w	r3, r3, #3
 80010ca:	4a54      	ldr	r2, [pc, #336]	; (800121c <LCD_IO_Init+0x1bc>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RD);
 80010d2:	4b54      	ldr	r3, [pc, #336]	; (8001224 <LCD_IO_Init+0x1c4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80010da:	4a52      	ldr	r2, [pc, #328]	; (8001224 <LCD_IO_Init+0x1c4>)
 80010dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010e0:	6013      	str	r3, [r2, #0]
  #endif

  LCD_DIRWRITE;                         /* data pins set the output direction */
 80010e2:	4b51      	ldr	r3, [pc, #324]	; (8001228 <LCD_IO_Init+0x1c8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80010ea:	4a4f      	ldr	r2, [pc, #316]	; (8001228 <LCD_IO_Init+0x1c8>)
 80010ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	4b4e      	ldr	r3, [pc, #312]	; (800122c <LCD_IO_Init+0x1cc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80010fa:	4a4c      	ldr	r2, [pc, #304]	; (800122c <LCD_IO_Init+0x1cc>)
 80010fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	4b49      	ldr	r3, [pc, #292]	; (8001228 <LCD_IO_Init+0x1c8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800110a:	4a47      	ldr	r2, [pc, #284]	; (8001228 <LCD_IO_Init+0x1c8>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b47      	ldr	r3, [pc, #284]	; (8001230 <LCD_IO_Init+0x1d0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800111a:	4a45      	ldr	r2, [pc, #276]	; (8001230 <LCD_IO_Init+0x1d0>)
 800111c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b43      	ldr	r3, [pc, #268]	; (8001230 <LCD_IO_Init+0x1d0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800112a:	4a41      	ldr	r2, [pc, #260]	; (8001230 <LCD_IO_Init+0x1d0>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b3f      	ldr	r3, [pc, #252]	; (8001230 <LCD_IO_Init+0x1d0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800113a:	4a3d      	ldr	r2, [pc, #244]	; (8001230 <LCD_IO_Init+0x1d0>)
 800113c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	4b38      	ldr	r3, [pc, #224]	; (8001224 <LCD_IO_Init+0x1c4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800114a:	4a36      	ldr	r2, [pc, #216]	; (8001224 <LCD_IO_Init+0x1c4>)
 800114c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	4b35      	ldr	r3, [pc, #212]	; (8001228 <LCD_IO_Init+0x1c8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800115a:	4a33      	ldr	r2, [pc, #204]	; (8001228 <LCD_IO_Init+0x1c8>)
 800115c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001160:	6013      	str	r3, [r2, #0]

  /* GPIO speed */
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8001162:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <LCD_IO_Init+0x1c0>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	4a2e      	ldr	r2, [pc, #184]	; (8001220 <LCD_IO_Init+0x1c0>)
 8001168:	f043 030c 	orr.w	r3, r3, #12
 800116c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 800116e:	4b2b      	ldr	r3, [pc, #172]	; (800121c <LCD_IO_Init+0x1bc>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	4a2a      	ldr	r2, [pc, #168]	; (800121c <LCD_IO_Init+0x1bc>)
 8001174:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001178:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_WR);
 800117a:	4b28      	ldr	r3, [pc, #160]	; (800121c <LCD_IO_Init+0x1bc>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	4a27      	ldr	r2, [pc, #156]	; (800121c <LCD_IO_Init+0x1bc>)
 8001180:	f043 0303 	orr.w	r3, r3, #3
 8001184:	6093      	str	r3, [r2, #8]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RD);
 8001186:	4b27      	ldr	r3, [pc, #156]	; (8001224 <LCD_IO_Init+0x1c4>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	4a26      	ldr	r2, [pc, #152]	; (8001224 <LCD_IO_Init+0x1c4>)
 800118c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001190:	6093      	str	r3, [r2, #8]
  #endif
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D0);
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <LCD_IO_Init+0x1c8>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	4a24      	ldr	r2, [pc, #144]	; (8001228 <LCD_IO_Init+0x1c8>)
 8001198:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800119c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D1);
 800119e:	4b23      	ldr	r3, [pc, #140]	; (800122c <LCD_IO_Init+0x1cc>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	4a22      	ldr	r2, [pc, #136]	; (800122c <LCD_IO_Init+0x1cc>)
 80011a4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80011a8:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D2);
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <LCD_IO_Init+0x1c8>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	4a1e      	ldr	r2, [pc, #120]	; (8001228 <LCD_IO_Init+0x1c8>)
 80011b0:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80011b4:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D3);
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <LCD_IO_Init+0x1d0>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <LCD_IO_Init+0x1d0>)
 80011bc:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80011c0:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D4);
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <LCD_IO_Init+0x1d0>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	4a1a      	ldr	r2, [pc, #104]	; (8001230 <LCD_IO_Init+0x1d0>)
 80011c8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80011cc:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D5);
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <LCD_IO_Init+0x1d0>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	4a17      	ldr	r2, [pc, #92]	; (8001230 <LCD_IO_Init+0x1d0>)
 80011d4:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80011d8:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D6);
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <LCD_IO_Init+0x1c4>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	4a11      	ldr	r2, [pc, #68]	; (8001224 <LCD_IO_Init+0x1c4>)
 80011e0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80011e4:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D7);
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <LCD_IO_Init+0x1c8>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <LCD_IO_Init+0x1c8>)
 80011ec:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80011f0:	6093      	str	r3, [r2, #8]

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f7ff ff1d 	bl	8001032 <LCD_Delay>
  LCD_RST_ON;                           /* RST = 0 */
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <LCD_IO_Init+0x1bc>)
 80011fa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011fe:	619a      	str	r2, [r3, #24]
  LCD_Delay(1);
 8001200:	2001      	movs	r0, #1
 8001202:	f7ff ff16 	bl	8001032 <LCD_Delay>
  LCD_RST_OFF;                          /* RST = 1 */
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <LCD_IO_Init+0x1bc>)
 8001208:	2204      	movs	r2, #4
 800120a:	619a      	str	r2, [r3, #24]
  #endif
  LCD_Delay(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f7ff ff10 	bl	8001032 <LCD_Delay>
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	58024400 	.word	0x58024400
 800121c:	58020800 	.word	0x58020800
 8001220:	58020400 	.word	0x58020400
 8001224:	58020000 	.word	0x58020000
 8001228:	58021800 	.word	0x58021800
 800122c:	58020c00 	.word	0x58020c00
 8001230:	58021000 	.word	0x58021000

08001234 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 800123e:	4b4b      	ldr	r3, [pc, #300]	; (800136c <LCD_IO_WriteCmd8+0x138>)
 8001240:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001244:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8001246:	4b4a      	ldr	r3, [pc, #296]	; (8001370 <LCD_IO_WriteCmd8+0x13c>)
 8001248:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800124c:	619a      	str	r2, [r3, #24]
 800124e:	4a49      	ldr	r2, [pc, #292]	; (8001374 <LCD_IO_WriteCmd8+0x140>)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	7013      	strb	r3, [r2, #0]
 8001254:	4b47      	ldr	r3, [pc, #284]	; (8001374 <LCD_IO_WriteCmd8+0x140>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <LCD_IO_WriteCmd8+0x36>
 8001260:	4b45      	ldr	r3, [pc, #276]	; (8001378 <LCD_IO_WriteCmd8+0x144>)
 8001262:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001266:	619a      	str	r2, [r3, #24]
 8001268:	e003      	b.n	8001272 <LCD_IO_WriteCmd8+0x3e>
 800126a:	4b43      	ldr	r3, [pc, #268]	; (8001378 <LCD_IO_WriteCmd8+0x144>)
 800126c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001270:	619a      	str	r2, [r3, #24]
 8001272:	4b40      	ldr	r3, [pc, #256]	; (8001374 <LCD_IO_WriteCmd8+0x140>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d004      	beq.n	8001288 <LCD_IO_WriteCmd8+0x54>
 800127e:	4b3f      	ldr	r3, [pc, #252]	; (800137c <LCD_IO_WriteCmd8+0x148>)
 8001280:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001284:	619a      	str	r2, [r3, #24]
 8001286:	e003      	b.n	8001290 <LCD_IO_WriteCmd8+0x5c>
 8001288:	4b3c      	ldr	r3, [pc, #240]	; (800137c <LCD_IO_WriteCmd8+0x148>)
 800128a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800128e:	619a      	str	r2, [r3, #24]
 8001290:	4b38      	ldr	r3, [pc, #224]	; (8001374 <LCD_IO_WriteCmd8+0x140>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b00      	cmp	r3, #0
 800129a:	d004      	beq.n	80012a6 <LCD_IO_WriteCmd8+0x72>
 800129c:	4b36      	ldr	r3, [pc, #216]	; (8001378 <LCD_IO_WriteCmd8+0x144>)
 800129e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012a2:	619a      	str	r2, [r3, #24]
 80012a4:	e003      	b.n	80012ae <LCD_IO_WriteCmd8+0x7a>
 80012a6:	4b34      	ldr	r3, [pc, #208]	; (8001378 <LCD_IO_WriteCmd8+0x144>)
 80012a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ac:	619a      	str	r2, [r3, #24]
 80012ae:	4b31      	ldr	r3, [pc, #196]	; (8001374 <LCD_IO_WriteCmd8+0x140>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d004      	beq.n	80012c4 <LCD_IO_WriteCmd8+0x90>
 80012ba:	4b31      	ldr	r3, [pc, #196]	; (8001380 <LCD_IO_WriteCmd8+0x14c>)
 80012bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c0:	619a      	str	r2, [r3, #24]
 80012c2:	e003      	b.n	80012cc <LCD_IO_WriteCmd8+0x98>
 80012c4:	4b2e      	ldr	r3, [pc, #184]	; (8001380 <LCD_IO_WriteCmd8+0x14c>)
 80012c6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80012ca:	619a      	str	r2, [r3, #24]
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <LCD_IO_WriteCmd8+0x140>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <LCD_IO_WriteCmd8+0xae>
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <LCD_IO_WriteCmd8+0x14c>)
 80012da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012de:	619a      	str	r2, [r3, #24]
 80012e0:	e003      	b.n	80012ea <LCD_IO_WriteCmd8+0xb6>
 80012e2:	4b27      	ldr	r3, [pc, #156]	; (8001380 <LCD_IO_WriteCmd8+0x14c>)
 80012e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e8:	619a      	str	r2, [r3, #24]
 80012ea:	4b22      	ldr	r3, [pc, #136]	; (8001374 <LCD_IO_WriteCmd8+0x140>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	f003 0320 	and.w	r3, r3, #32
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d004      	beq.n	8001300 <LCD_IO_WriteCmd8+0xcc>
 80012f6:	4b22      	ldr	r3, [pc, #136]	; (8001380 <LCD_IO_WriteCmd8+0x14c>)
 80012f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012fc:	619a      	str	r2, [r3, #24]
 80012fe:	e003      	b.n	8001308 <LCD_IO_WriteCmd8+0xd4>
 8001300:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <LCD_IO_WriteCmd8+0x14c>)
 8001302:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001306:	619a      	str	r2, [r3, #24]
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <LCD_IO_WriteCmd8+0x140>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001310:	2b00      	cmp	r3, #0
 8001312:	d004      	beq.n	800131e <LCD_IO_WriteCmd8+0xea>
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <LCD_IO_WriteCmd8+0x150>)
 8001316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800131a:	619a      	str	r2, [r3, #24]
 800131c:	e003      	b.n	8001326 <LCD_IO_WriteCmd8+0xf2>
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <LCD_IO_WriteCmd8+0x150>)
 8001320:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001324:	619a      	str	r2, [r3, #24]
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <LCD_IO_WriteCmd8+0x140>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b25b      	sxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	da04      	bge.n	800133a <LCD_IO_WriteCmd8+0x106>
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <LCD_IO_WriteCmd8+0x144>)
 8001332:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001336:	619a      	str	r2, [r3, #24]
 8001338:	e003      	b.n	8001342 <LCD_IO_WriteCmd8+0x10e>
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <LCD_IO_WriteCmd8+0x144>)
 800133c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001340:	619a      	str	r2, [r3, #24]
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <LCD_IO_WriteCmd8+0x13c>)
 8001344:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001348:	619a      	str	r2, [r3, #24]
 800134a:	2008      	movs	r0, #8
 800134c:	f7ff fe60 	bl	8001010 <LCD_IO_Delay>
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <LCD_IO_WriteCmd8+0x13c>)
 8001352:	2201      	movs	r2, #1
 8001354:	619a      	str	r2, [r3, #24]
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <LCD_IO_WriteCmd8+0x13c>)
 8001358:	2208      	movs	r2, #8
 800135a:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <LCD_IO_WriteCmd8+0x138>)
 800135e:	2202      	movs	r2, #2
 8001360:	619a      	str	r2, [r3, #24]
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	58020400 	.word	0x58020400
 8001370:	58020800 	.word	0x58020800
 8001374:	240000ac 	.word	0x240000ac
 8001378:	58021800 	.word	0x58021800
 800137c:	58020c00 	.word	0x58020c00
 8001380:	58021000 	.word	0x58021000
 8001384:	58020000 	.word	0x58020000

08001388 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8001392:	4b47      	ldr	r3, [pc, #284]	; (80014b0 <LCD_IO_WriteData8+0x128>)
 8001394:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001398:	619a      	str	r2, [r3, #24]
  LCD_DATA8_WRITE(Data);
 800139a:	4a46      	ldr	r2, [pc, #280]	; (80014b4 <LCD_IO_WriteData8+0x12c>)
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	7013      	strb	r3, [r2, #0]
 80013a0:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <LCD_IO_WriteData8+0x12c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d004      	beq.n	80013b6 <LCD_IO_WriteData8+0x2e>
 80013ac:	4b42      	ldr	r3, [pc, #264]	; (80014b8 <LCD_IO_WriteData8+0x130>)
 80013ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b2:	619a      	str	r2, [r3, #24]
 80013b4:	e003      	b.n	80013be <LCD_IO_WriteData8+0x36>
 80013b6:	4b40      	ldr	r3, [pc, #256]	; (80014b8 <LCD_IO_WriteData8+0x130>)
 80013b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013bc:	619a      	str	r2, [r3, #24]
 80013be:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <LCD_IO_WriteData8+0x12c>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d004      	beq.n	80013d4 <LCD_IO_WriteData8+0x4c>
 80013ca:	4b3c      	ldr	r3, [pc, #240]	; (80014bc <LCD_IO_WriteData8+0x134>)
 80013cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013d0:	619a      	str	r2, [r3, #24]
 80013d2:	e003      	b.n	80013dc <LCD_IO_WriteData8+0x54>
 80013d4:	4b39      	ldr	r3, [pc, #228]	; (80014bc <LCD_IO_WriteData8+0x134>)
 80013d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013da:	619a      	str	r2, [r3, #24]
 80013dc:	4b35      	ldr	r3, [pc, #212]	; (80014b4 <LCD_IO_WriteData8+0x12c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d004      	beq.n	80013f2 <LCD_IO_WriteData8+0x6a>
 80013e8:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <LCD_IO_WriteData8+0x130>)
 80013ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ee:	619a      	str	r2, [r3, #24]
 80013f0:	e003      	b.n	80013fa <LCD_IO_WriteData8+0x72>
 80013f2:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <LCD_IO_WriteData8+0x130>)
 80013f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013f8:	619a      	str	r2, [r3, #24]
 80013fa:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <LCD_IO_WriteData8+0x12c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	d004      	beq.n	8001410 <LCD_IO_WriteData8+0x88>
 8001406:	4b2e      	ldr	r3, [pc, #184]	; (80014c0 <LCD_IO_WriteData8+0x138>)
 8001408:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800140c:	619a      	str	r2, [r3, #24]
 800140e:	e003      	b.n	8001418 <LCD_IO_WriteData8+0x90>
 8001410:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <LCD_IO_WriteData8+0x138>)
 8001412:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001416:	619a      	str	r2, [r3, #24]
 8001418:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <LCD_IO_WriteData8+0x12c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	2b00      	cmp	r3, #0
 8001422:	d004      	beq.n	800142e <LCD_IO_WriteData8+0xa6>
 8001424:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <LCD_IO_WriteData8+0x138>)
 8001426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800142a:	619a      	str	r2, [r3, #24]
 800142c:	e003      	b.n	8001436 <LCD_IO_WriteData8+0xae>
 800142e:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <LCD_IO_WriteData8+0x138>)
 8001430:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001434:	619a      	str	r2, [r3, #24]
 8001436:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <LCD_IO_WriteData8+0x12c>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	f003 0320 	and.w	r3, r3, #32
 800143e:	2b00      	cmp	r3, #0
 8001440:	d004      	beq.n	800144c <LCD_IO_WriteData8+0xc4>
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <LCD_IO_WriteData8+0x138>)
 8001444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001448:	619a      	str	r2, [r3, #24]
 800144a:	e003      	b.n	8001454 <LCD_IO_WriteData8+0xcc>
 800144c:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <LCD_IO_WriteData8+0x138>)
 800144e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001452:	619a      	str	r2, [r3, #24]
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <LCD_IO_WriteData8+0x12c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145c:	2b00      	cmp	r3, #0
 800145e:	d004      	beq.n	800146a <LCD_IO_WriteData8+0xe2>
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <LCD_IO_WriteData8+0x13c>)
 8001462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001466:	619a      	str	r2, [r3, #24]
 8001468:	e003      	b.n	8001472 <LCD_IO_WriteData8+0xea>
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <LCD_IO_WriteData8+0x13c>)
 800146c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001470:	619a      	str	r2, [r3, #24]
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <LCD_IO_WriteData8+0x12c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b25b      	sxtb	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	da04      	bge.n	8001486 <LCD_IO_WriteData8+0xfe>
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <LCD_IO_WriteData8+0x130>)
 800147e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001482:	619a      	str	r2, [r3, #24]
 8001484:	e003      	b.n	800148e <LCD_IO_WriteData8+0x106>
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <LCD_IO_WriteData8+0x130>)
 8001488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800148c:	619a      	str	r2, [r3, #24]
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <LCD_IO_WriteData8+0x140>)
 8001490:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001494:	619a      	str	r2, [r3, #24]
 8001496:	2008      	movs	r0, #8
 8001498:	f7ff fdba 	bl	8001010 <LCD_IO_Delay>
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <LCD_IO_WriteData8+0x140>)
 800149e:	2201      	movs	r2, #1
 80014a0:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 80014a2:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <LCD_IO_WriteData8+0x128>)
 80014a4:	2202      	movs	r2, #2
 80014a6:	619a      	str	r2, [r3, #24]
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	58020400 	.word	0x58020400
 80014b4:	240000ac 	.word	0x240000ac
 80014b8:	58021800 	.word	0x58021800
 80014bc:	58020c00 	.word	0x58020c00
 80014c0:	58021000 	.word	0x58021000
 80014c4:	58020000 	.word	0x58020000
 80014c8:	58020800 	.word	0x58020800

080014cc <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	80fb      	strh	r3, [r7, #6]
  LCD_CS_ON;
 80014d6:	4b8b      	ldr	r3, [pc, #556]	; (8001704 <LCD_IO_WriteData16+0x238>)
 80014d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014dc:	619a      	str	r2, [r3, #24]
  LCD_DATA16_WRITE(Data);
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4b88      	ldr	r3, [pc, #544]	; (8001708 <LCD_IO_WriteData16+0x23c>)
 80014e8:	701a      	strb	r2, [r3, #0]
 80014ea:	4b87      	ldr	r3, [pc, #540]	; (8001708 <LCD_IO_WriteData16+0x23c>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d004      	beq.n	8001500 <LCD_IO_WriteData16+0x34>
 80014f6:	4b85      	ldr	r3, [pc, #532]	; (800170c <LCD_IO_WriteData16+0x240>)
 80014f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fc:	619a      	str	r2, [r3, #24]
 80014fe:	e003      	b.n	8001508 <LCD_IO_WriteData16+0x3c>
 8001500:	4b82      	ldr	r3, [pc, #520]	; (800170c <LCD_IO_WriteData16+0x240>)
 8001502:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001506:	619a      	str	r2, [r3, #24]
 8001508:	4b7f      	ldr	r3, [pc, #508]	; (8001708 <LCD_IO_WriteData16+0x23c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d004      	beq.n	800151e <LCD_IO_WriteData16+0x52>
 8001514:	4b7e      	ldr	r3, [pc, #504]	; (8001710 <LCD_IO_WriteData16+0x244>)
 8001516:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800151a:	619a      	str	r2, [r3, #24]
 800151c:	e003      	b.n	8001526 <LCD_IO_WriteData16+0x5a>
 800151e:	4b7c      	ldr	r3, [pc, #496]	; (8001710 <LCD_IO_WriteData16+0x244>)
 8001520:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001524:	619a      	str	r2, [r3, #24]
 8001526:	4b78      	ldr	r3, [pc, #480]	; (8001708 <LCD_IO_WriteData16+0x23c>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	2b00      	cmp	r3, #0
 8001530:	d004      	beq.n	800153c <LCD_IO_WriteData16+0x70>
 8001532:	4b76      	ldr	r3, [pc, #472]	; (800170c <LCD_IO_WriteData16+0x240>)
 8001534:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001538:	619a      	str	r2, [r3, #24]
 800153a:	e003      	b.n	8001544 <LCD_IO_WriteData16+0x78>
 800153c:	4b73      	ldr	r3, [pc, #460]	; (800170c <LCD_IO_WriteData16+0x240>)
 800153e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001542:	619a      	str	r2, [r3, #24]
 8001544:	4b70      	ldr	r3, [pc, #448]	; (8001708 <LCD_IO_WriteData16+0x23c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	2b00      	cmp	r3, #0
 800154e:	d004      	beq.n	800155a <LCD_IO_WriteData16+0x8e>
 8001550:	4b70      	ldr	r3, [pc, #448]	; (8001714 <LCD_IO_WriteData16+0x248>)
 8001552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001556:	619a      	str	r2, [r3, #24]
 8001558:	e003      	b.n	8001562 <LCD_IO_WriteData16+0x96>
 800155a:	4b6e      	ldr	r3, [pc, #440]	; (8001714 <LCD_IO_WriteData16+0x248>)
 800155c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001560:	619a      	str	r2, [r3, #24]
 8001562:	4b69      	ldr	r3, [pc, #420]	; (8001708 <LCD_IO_WriteData16+0x23c>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	2b00      	cmp	r3, #0
 800156c:	d004      	beq.n	8001578 <LCD_IO_WriteData16+0xac>
 800156e:	4b69      	ldr	r3, [pc, #420]	; (8001714 <LCD_IO_WriteData16+0x248>)
 8001570:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001574:	619a      	str	r2, [r3, #24]
 8001576:	e003      	b.n	8001580 <LCD_IO_WriteData16+0xb4>
 8001578:	4b66      	ldr	r3, [pc, #408]	; (8001714 <LCD_IO_WriteData16+0x248>)
 800157a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800157e:	619a      	str	r2, [r3, #24]
 8001580:	4b61      	ldr	r3, [pc, #388]	; (8001708 <LCD_IO_WriteData16+0x23c>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	f003 0320 	and.w	r3, r3, #32
 8001588:	2b00      	cmp	r3, #0
 800158a:	d004      	beq.n	8001596 <LCD_IO_WriteData16+0xca>
 800158c:	4b61      	ldr	r3, [pc, #388]	; (8001714 <LCD_IO_WriteData16+0x248>)
 800158e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001592:	619a      	str	r2, [r3, #24]
 8001594:	e003      	b.n	800159e <LCD_IO_WriteData16+0xd2>
 8001596:	4b5f      	ldr	r3, [pc, #380]	; (8001714 <LCD_IO_WriteData16+0x248>)
 8001598:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800159c:	619a      	str	r2, [r3, #24]
 800159e:	4b5a      	ldr	r3, [pc, #360]	; (8001708 <LCD_IO_WriteData16+0x23c>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d004      	beq.n	80015b4 <LCD_IO_WriteData16+0xe8>
 80015aa:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <LCD_IO_WriteData16+0x24c>)
 80015ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b0:	619a      	str	r2, [r3, #24]
 80015b2:	e003      	b.n	80015bc <LCD_IO_WriteData16+0xf0>
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <LCD_IO_WriteData16+0x24c>)
 80015b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015ba:	619a      	str	r2, [r3, #24]
 80015bc:	4b52      	ldr	r3, [pc, #328]	; (8001708 <LCD_IO_WriteData16+0x23c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	da04      	bge.n	80015d0 <LCD_IO_WriteData16+0x104>
 80015c6:	4b51      	ldr	r3, [pc, #324]	; (800170c <LCD_IO_WriteData16+0x240>)
 80015c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015cc:	619a      	str	r2, [r3, #24]
 80015ce:	e003      	b.n	80015d8 <LCD_IO_WriteData16+0x10c>
 80015d0:	4b4e      	ldr	r3, [pc, #312]	; (800170c <LCD_IO_WriteData16+0x240>)
 80015d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015d6:	619a      	str	r2, [r3, #24]
 80015d8:	4b50      	ldr	r3, [pc, #320]	; (800171c <LCD_IO_WriteData16+0x250>)
 80015da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015de:	619a      	str	r2, [r3, #24]
 80015e0:	2008      	movs	r0, #8
 80015e2:	f7ff fd15 	bl	8001010 <LCD_IO_Delay>
 80015e6:	4b4d      	ldr	r3, [pc, #308]	; (800171c <LCD_IO_WriteData16+0x250>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	619a      	str	r2, [r3, #24]
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b45      	ldr	r3, [pc, #276]	; (8001708 <LCD_IO_WriteData16+0x23c>)
 80015f2:	701a      	strb	r2, [r3, #0]
 80015f4:	4b44      	ldr	r3, [pc, #272]	; (8001708 <LCD_IO_WriteData16+0x23c>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d004      	beq.n	800160a <LCD_IO_WriteData16+0x13e>
 8001600:	4b42      	ldr	r3, [pc, #264]	; (800170c <LCD_IO_WriteData16+0x240>)
 8001602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001606:	619a      	str	r2, [r3, #24]
 8001608:	e003      	b.n	8001612 <LCD_IO_WriteData16+0x146>
 800160a:	4b40      	ldr	r3, [pc, #256]	; (800170c <LCD_IO_WriteData16+0x240>)
 800160c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001610:	619a      	str	r2, [r3, #24]
 8001612:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <LCD_IO_WriteData16+0x23c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d004      	beq.n	8001628 <LCD_IO_WriteData16+0x15c>
 800161e:	4b3c      	ldr	r3, [pc, #240]	; (8001710 <LCD_IO_WriteData16+0x244>)
 8001620:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001624:	619a      	str	r2, [r3, #24]
 8001626:	e003      	b.n	8001630 <LCD_IO_WriteData16+0x164>
 8001628:	4b39      	ldr	r3, [pc, #228]	; (8001710 <LCD_IO_WriteData16+0x244>)
 800162a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800162e:	619a      	str	r2, [r3, #24]
 8001630:	4b35      	ldr	r3, [pc, #212]	; (8001708 <LCD_IO_WriteData16+0x23c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d004      	beq.n	8001646 <LCD_IO_WriteData16+0x17a>
 800163c:	4b33      	ldr	r3, [pc, #204]	; (800170c <LCD_IO_WriteData16+0x240>)
 800163e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001642:	619a      	str	r2, [r3, #24]
 8001644:	e003      	b.n	800164e <LCD_IO_WriteData16+0x182>
 8001646:	4b31      	ldr	r3, [pc, #196]	; (800170c <LCD_IO_WriteData16+0x240>)
 8001648:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800164c:	619a      	str	r2, [r3, #24]
 800164e:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <LCD_IO_WriteData16+0x23c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d004      	beq.n	8001664 <LCD_IO_WriteData16+0x198>
 800165a:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <LCD_IO_WriteData16+0x248>)
 800165c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001660:	619a      	str	r2, [r3, #24]
 8001662:	e003      	b.n	800166c <LCD_IO_WriteData16+0x1a0>
 8001664:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <LCD_IO_WriteData16+0x248>)
 8001666:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800166a:	619a      	str	r2, [r3, #24]
 800166c:	4b26      	ldr	r3, [pc, #152]	; (8001708 <LCD_IO_WriteData16+0x23c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	2b00      	cmp	r3, #0
 8001676:	d004      	beq.n	8001682 <LCD_IO_WriteData16+0x1b6>
 8001678:	4b26      	ldr	r3, [pc, #152]	; (8001714 <LCD_IO_WriteData16+0x248>)
 800167a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800167e:	619a      	str	r2, [r3, #24]
 8001680:	e003      	b.n	800168a <LCD_IO_WriteData16+0x1be>
 8001682:	4b24      	ldr	r3, [pc, #144]	; (8001714 <LCD_IO_WriteData16+0x248>)
 8001684:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001688:	619a      	str	r2, [r3, #24]
 800168a:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <LCD_IO_WriteData16+0x23c>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	f003 0320 	and.w	r3, r3, #32
 8001692:	2b00      	cmp	r3, #0
 8001694:	d004      	beq.n	80016a0 <LCD_IO_WriteData16+0x1d4>
 8001696:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <LCD_IO_WriteData16+0x248>)
 8001698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800169c:	619a      	str	r2, [r3, #24]
 800169e:	e003      	b.n	80016a8 <LCD_IO_WriteData16+0x1dc>
 80016a0:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <LCD_IO_WriteData16+0x248>)
 80016a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016a6:	619a      	str	r2, [r3, #24]
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <LCD_IO_WriteData16+0x23c>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d004      	beq.n	80016be <LCD_IO_WriteData16+0x1f2>
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <LCD_IO_WriteData16+0x24c>)
 80016b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ba:	619a      	str	r2, [r3, #24]
 80016bc:	e003      	b.n	80016c6 <LCD_IO_WriteData16+0x1fa>
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <LCD_IO_WriteData16+0x24c>)
 80016c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016c4:	619a      	str	r2, [r3, #24]
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <LCD_IO_WriteData16+0x23c>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	da04      	bge.n	80016da <LCD_IO_WriteData16+0x20e>
 80016d0:	4b0e      	ldr	r3, [pc, #56]	; (800170c <LCD_IO_WriteData16+0x240>)
 80016d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016d6:	619a      	str	r2, [r3, #24]
 80016d8:	e003      	b.n	80016e2 <LCD_IO_WriteData16+0x216>
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <LCD_IO_WriteData16+0x240>)
 80016dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016e0:	619a      	str	r2, [r3, #24]
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <LCD_IO_WriteData16+0x250>)
 80016e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016e8:	619a      	str	r2, [r3, #24]
 80016ea:	2008      	movs	r0, #8
 80016ec:	f7ff fc90 	bl	8001010 <LCD_IO_Delay>
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <LCD_IO_WriteData16+0x250>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 80016f6:	4b03      	ldr	r3, [pc, #12]	; (8001704 <LCD_IO_WriteData16+0x238>)
 80016f8:	2202      	movs	r2, #2
 80016fa:	619a      	str	r2, [r3, #24]
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	58020400 	.word	0x58020400
 8001708:	240000ac 	.word	0x240000ac
 800170c:	58021800 	.word	0x58021800
 8001710:	58020c00 	.word	0x58020c00
 8001714:	58021000 	.word	0x58021000
 8001718:	58020000 	.word	0x58020000
 800171c:	58020800 	.word	0x58020800

08001720 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	603a      	str	r2, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
 800172c:	460b      	mov	r3, r1
 800172e:	80bb      	strh	r3, [r7, #4]
  LCD_CS_ON;
 8001730:	4b9a      	ldr	r3, [pc, #616]	; (800199c <LCD_IO_WriteCmd8DataFill16+0x27c>)
 8001732:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001736:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8001738:	4b99      	ldr	r3, [pc, #612]	; (80019a0 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800173a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800173e:	619a      	str	r2, [r3, #24]
 8001740:	4a98      	ldr	r2, [pc, #608]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	7013      	strb	r3, [r2, #0]
 8001746:	4b97      	ldr	r3, [pc, #604]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d004      	beq.n	800175c <LCD_IO_WriteCmd8DataFill16+0x3c>
 8001752:	4b95      	ldr	r3, [pc, #596]	; (80019a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001758:	619a      	str	r2, [r3, #24]
 800175a:	e003      	b.n	8001764 <LCD_IO_WriteCmd8DataFill16+0x44>
 800175c:	4b92      	ldr	r3, [pc, #584]	; (80019a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800175e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001762:	619a      	str	r2, [r3, #24]
 8001764:	4b8f      	ldr	r3, [pc, #572]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <LCD_IO_WriteCmd8DataFill16+0x5a>
 8001770:	4b8e      	ldr	r3, [pc, #568]	; (80019ac <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001772:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001776:	619a      	str	r2, [r3, #24]
 8001778:	e003      	b.n	8001782 <LCD_IO_WriteCmd8DataFill16+0x62>
 800177a:	4b8c      	ldr	r3, [pc, #560]	; (80019ac <LCD_IO_WriteCmd8DataFill16+0x28c>)
 800177c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001780:	619a      	str	r2, [r3, #24]
 8001782:	4b88      	ldr	r3, [pc, #544]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	2b00      	cmp	r3, #0
 800178c:	d004      	beq.n	8001798 <LCD_IO_WriteCmd8DataFill16+0x78>
 800178e:	4b86      	ldr	r3, [pc, #536]	; (80019a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001790:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001794:	619a      	str	r2, [r3, #24]
 8001796:	e003      	b.n	80017a0 <LCD_IO_WriteCmd8DataFill16+0x80>
 8001798:	4b83      	ldr	r3, [pc, #524]	; (80019a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800179a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800179e:	619a      	str	r2, [r3, #24]
 80017a0:	4b80      	ldr	r3, [pc, #512]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d004      	beq.n	80017b6 <LCD_IO_WriteCmd8DataFill16+0x96>
 80017ac:	4b80      	ldr	r3, [pc, #512]	; (80019b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80017ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b2:	619a      	str	r2, [r3, #24]
 80017b4:	e003      	b.n	80017be <LCD_IO_WriteCmd8DataFill16+0x9e>
 80017b6:	4b7e      	ldr	r3, [pc, #504]	; (80019b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80017b8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80017bc:	619a      	str	r2, [r3, #24]
 80017be:	4b79      	ldr	r3, [pc, #484]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d004      	beq.n	80017d4 <LCD_IO_WriteCmd8DataFill16+0xb4>
 80017ca:	4b79      	ldr	r3, [pc, #484]	; (80019b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80017cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017d0:	619a      	str	r2, [r3, #24]
 80017d2:	e003      	b.n	80017dc <LCD_IO_WriteCmd8DataFill16+0xbc>
 80017d4:	4b76      	ldr	r3, [pc, #472]	; (80019b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80017d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017da:	619a      	str	r2, [r3, #24]
 80017dc:	4b71      	ldr	r3, [pc, #452]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	f003 0320 	and.w	r3, r3, #32
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d004      	beq.n	80017f2 <LCD_IO_WriteCmd8DataFill16+0xd2>
 80017e8:	4b71      	ldr	r3, [pc, #452]	; (80019b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80017ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017ee:	619a      	str	r2, [r3, #24]
 80017f0:	e003      	b.n	80017fa <LCD_IO_WriteCmd8DataFill16+0xda>
 80017f2:	4b6f      	ldr	r3, [pc, #444]	; (80019b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80017f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017f8:	619a      	str	r2, [r3, #24]
 80017fa:	4b6a      	ldr	r3, [pc, #424]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001802:	2b00      	cmp	r3, #0
 8001804:	d004      	beq.n	8001810 <LCD_IO_WriteCmd8DataFill16+0xf0>
 8001806:	4b6b      	ldr	r3, [pc, #428]	; (80019b4 <LCD_IO_WriteCmd8DataFill16+0x294>)
 8001808:	f44f 7280 	mov.w	r2, #256	; 0x100
 800180c:	619a      	str	r2, [r3, #24]
 800180e:	e003      	b.n	8001818 <LCD_IO_WriteCmd8DataFill16+0xf8>
 8001810:	4b68      	ldr	r3, [pc, #416]	; (80019b4 <LCD_IO_WriteCmd8DataFill16+0x294>)
 8001812:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001816:	619a      	str	r2, [r3, #24]
 8001818:	4b62      	ldr	r3, [pc, #392]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b25b      	sxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	da04      	bge.n	800182c <LCD_IO_WriteCmd8DataFill16+0x10c>
 8001822:	4b61      	ldr	r3, [pc, #388]	; (80019a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001824:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001828:	619a      	str	r2, [r3, #24]
 800182a:	e003      	b.n	8001834 <LCD_IO_WriteCmd8DataFill16+0x114>
 800182c:	4b5e      	ldr	r3, [pc, #376]	; (80019a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800182e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001832:	619a      	str	r2, [r3, #24]
 8001834:	4b5a      	ldr	r3, [pc, #360]	; (80019a0 <LCD_IO_WriteCmd8DataFill16+0x280>)
 8001836:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800183a:	619a      	str	r2, [r3, #24]
 800183c:	2008      	movs	r0, #8
 800183e:	f7ff fbe7 	bl	8001010 <LCD_IO_Delay>
 8001842:	4b57      	ldr	r3, [pc, #348]	; (80019a0 <LCD_IO_WriteCmd8DataFill16+0x280>)
 8001844:	2201      	movs	r2, #1
 8001846:	619a      	str	r2, [r3, #24]
 8001848:	4b55      	ldr	r3, [pc, #340]	; (80019a0 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800184a:	2208      	movs	r2, #8
 800184c:	619a      	str	r2, [r3, #24]
  while(Size--)
 800184e:	e11a      	b.n	8001a86 <LCD_IO_WriteCmd8DataFill16+0x366>
  {
    LCD_DATA16_WRITE(Data);
 8001850:	88bb      	ldrh	r3, [r7, #4]
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	b29b      	uxth	r3, r3
 8001856:	b2da      	uxtb	r2, r3
 8001858:	4b52      	ldr	r3, [pc, #328]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800185a:	701a      	strb	r2, [r3, #0]
 800185c:	4b51      	ldr	r3, [pc, #324]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d004      	beq.n	8001872 <LCD_IO_WriteCmd8DataFill16+0x152>
 8001868:	4b4f      	ldr	r3, [pc, #316]	; (80019a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800186a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800186e:	619a      	str	r2, [r3, #24]
 8001870:	e003      	b.n	800187a <LCD_IO_WriteCmd8DataFill16+0x15a>
 8001872:	4b4d      	ldr	r3, [pc, #308]	; (80019a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001874:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001878:	619a      	str	r2, [r3, #24]
 800187a:	4b4a      	ldr	r3, [pc, #296]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d004      	beq.n	8001890 <LCD_IO_WriteCmd8DataFill16+0x170>
 8001886:	4b49      	ldr	r3, [pc, #292]	; (80019ac <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001888:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800188c:	619a      	str	r2, [r3, #24]
 800188e:	e003      	b.n	8001898 <LCD_IO_WriteCmd8DataFill16+0x178>
 8001890:	4b46      	ldr	r3, [pc, #280]	; (80019ac <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001892:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001896:	619a      	str	r2, [r3, #24]
 8001898:	4b42      	ldr	r3, [pc, #264]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <LCD_IO_WriteCmd8DataFill16+0x18e>
 80018a4:	4b40      	ldr	r3, [pc, #256]	; (80019a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80018a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018aa:	619a      	str	r2, [r3, #24]
 80018ac:	e003      	b.n	80018b6 <LCD_IO_WriteCmd8DataFill16+0x196>
 80018ae:	4b3e      	ldr	r3, [pc, #248]	; (80019a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80018b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018b4:	619a      	str	r2, [r3, #24]
 80018b6:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d004      	beq.n	80018cc <LCD_IO_WriteCmd8DataFill16+0x1ac>
 80018c2:	4b3b      	ldr	r3, [pc, #236]	; (80019b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80018c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018c8:	619a      	str	r2, [r3, #24]
 80018ca:	e003      	b.n	80018d4 <LCD_IO_WriteCmd8DataFill16+0x1b4>
 80018cc:	4b38      	ldr	r3, [pc, #224]	; (80019b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80018ce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80018d2:	619a      	str	r2, [r3, #24]
 80018d4:	4b33      	ldr	r3, [pc, #204]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d004      	beq.n	80018ea <LCD_IO_WriteCmd8DataFill16+0x1ca>
 80018e0:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80018e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018e6:	619a      	str	r2, [r3, #24]
 80018e8:	e003      	b.n	80018f2 <LCD_IO_WriteCmd8DataFill16+0x1d2>
 80018ea:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80018ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018f0:	619a      	str	r2, [r3, #24]
 80018f2:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	f003 0320 	and.w	r3, r3, #32
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d004      	beq.n	8001908 <LCD_IO_WriteCmd8DataFill16+0x1e8>
 80018fe:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001900:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001904:	619a      	str	r2, [r3, #24]
 8001906:	e003      	b.n	8001910 <LCD_IO_WriteCmd8DataFill16+0x1f0>
 8001908:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800190a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800190e:	619a      	str	r2, [r3, #24]
 8001910:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001918:	2b00      	cmp	r3, #0
 800191a:	d004      	beq.n	8001926 <LCD_IO_WriteCmd8DataFill16+0x206>
 800191c:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <LCD_IO_WriteCmd8DataFill16+0x294>)
 800191e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001922:	619a      	str	r2, [r3, #24]
 8001924:	e003      	b.n	800192e <LCD_IO_WriteCmd8DataFill16+0x20e>
 8001926:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <LCD_IO_WriteCmd8DataFill16+0x294>)
 8001928:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800192c:	619a      	str	r2, [r3, #24]
 800192e:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	b25b      	sxtb	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	da04      	bge.n	8001942 <LCD_IO_WriteCmd8DataFill16+0x222>
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800193a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800193e:	619a      	str	r2, [r3, #24]
 8001940:	e003      	b.n	800194a <LCD_IO_WriteCmd8DataFill16+0x22a>
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001948:	619a      	str	r2, [r3, #24]
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800194c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001950:	619a      	str	r2, [r3, #24]
 8001952:	2008      	movs	r0, #8
 8001954:	f7ff fb5c 	bl	8001010 <LCD_IO_Delay>
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800195a:	2201      	movs	r2, #1
 800195c:	619a      	str	r2, [r3, #24]
 800195e:	88bb      	ldrh	r3, [r7, #4]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001964:	701a      	strb	r2, [r3, #0]
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d004      	beq.n	800197c <LCD_IO_WriteCmd8DataFill16+0x25c>
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001978:	619a      	str	r2, [r3, #24]
 800197a:	e003      	b.n	8001984 <LCD_IO_WriteCmd8DataFill16+0x264>
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800197e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001982:	619a      	str	r2, [r3, #24]
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d013      	beq.n	80019b8 <LCD_IO_WriteCmd8DataFill16+0x298>
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001992:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001996:	619a      	str	r2, [r3, #24]
 8001998:	e012      	b.n	80019c0 <LCD_IO_WriteCmd8DataFill16+0x2a0>
 800199a:	bf00      	nop
 800199c:	58020400 	.word	0x58020400
 80019a0:	58020800 	.word	0x58020800
 80019a4:	240000ac 	.word	0x240000ac
 80019a8:	58021800 	.word	0x58021800
 80019ac:	58020c00 	.word	0x58020c00
 80019b0:	58021000 	.word	0x58021000
 80019b4:	58020000 	.word	0x58020000
 80019b8:	4b39      	ldr	r3, [pc, #228]	; (8001aa0 <LCD_IO_WriteCmd8DataFill16+0x380>)
 80019ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019be:	619a      	str	r2, [r3, #24]
 80019c0:	4b38      	ldr	r3, [pc, #224]	; (8001aa4 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d004      	beq.n	80019d6 <LCD_IO_WriteCmd8DataFill16+0x2b6>
 80019cc:	4b36      	ldr	r3, [pc, #216]	; (8001aa8 <LCD_IO_WriteCmd8DataFill16+0x388>)
 80019ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019d2:	619a      	str	r2, [r3, #24]
 80019d4:	e003      	b.n	80019de <LCD_IO_WriteCmd8DataFill16+0x2be>
 80019d6:	4b34      	ldr	r3, [pc, #208]	; (8001aa8 <LCD_IO_WriteCmd8DataFill16+0x388>)
 80019d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019dc:	619a      	str	r2, [r3, #24]
 80019de:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d004      	beq.n	80019f4 <LCD_IO_WriteCmd8DataFill16+0x2d4>
 80019ea:	4b30      	ldr	r3, [pc, #192]	; (8001aac <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80019ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019f0:	619a      	str	r2, [r3, #24]
 80019f2:	e003      	b.n	80019fc <LCD_IO_WriteCmd8DataFill16+0x2dc>
 80019f4:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80019f6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019fa:	619a      	str	r2, [r3, #24]
 80019fc:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d004      	beq.n	8001a12 <LCD_IO_WriteCmd8DataFill16+0x2f2>
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001a0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a0e:	619a      	str	r2, [r3, #24]
 8001a10:	e003      	b.n	8001a1a <LCD_IO_WriteCmd8DataFill16+0x2fa>
 8001a12:	4b26      	ldr	r3, [pc, #152]	; (8001aac <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001a14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a18:	619a      	str	r2, [r3, #24]
 8001a1a:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <LCD_IO_WriteCmd8DataFill16+0x384>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	f003 0320 	and.w	r3, r3, #32
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d004      	beq.n	8001a30 <LCD_IO_WriteCmd8DataFill16+0x310>
 8001a26:	4b21      	ldr	r3, [pc, #132]	; (8001aac <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a2c:	619a      	str	r2, [r3, #24]
 8001a2e:	e003      	b.n	8001a38 <LCD_IO_WriteCmd8DataFill16+0x318>
 8001a30:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001a32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a36:	619a      	str	r2, [r3, #24]
 8001a38:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <LCD_IO_WriteCmd8DataFill16+0x384>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d004      	beq.n	8001a4e <LCD_IO_WriteCmd8DataFill16+0x32e>
 8001a44:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <LCD_IO_WriteCmd8DataFill16+0x390>)
 8001a46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a4a:	619a      	str	r2, [r3, #24]
 8001a4c:	e003      	b.n	8001a56 <LCD_IO_WriteCmd8DataFill16+0x336>
 8001a4e:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <LCD_IO_WriteCmd8DataFill16+0x390>)
 8001a50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a54:	619a      	str	r2, [r3, #24]
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <LCD_IO_WriteCmd8DataFill16+0x384>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b25b      	sxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	da04      	bge.n	8001a6a <LCD_IO_WriteCmd8DataFill16+0x34a>
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001a62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a66:	619a      	str	r2, [r3, #24]
 8001a68:	e003      	b.n	8001a72 <LCD_IO_WriteCmd8DataFill16+0x352>
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a70:	619a      	str	r2, [r3, #24]
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <LCD_IO_WriteCmd8DataFill16+0x394>)
 8001a74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a78:	619a      	str	r2, [r3, #24]
 8001a7a:	2008      	movs	r0, #8
 8001a7c:	f7ff fac8 	bl	8001010 <LCD_IO_Delay>
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <LCD_IO_WriteCmd8DataFill16+0x394>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	619a      	str	r2, [r3, #24]
  while(Size--)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	1e5a      	subs	r2, r3, #1
 8001a8a:	603a      	str	r2, [r7, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f47f aedf 	bne.w	8001850 <LCD_IO_WriteCmd8DataFill16+0x130>
  }
  LCD_CS_OFF;
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <LCD_IO_WriteCmd8DataFill16+0x398>)
 8001a94:	2202      	movs	r2, #2
 8001a96:	619a      	str	r2, [r3, #24]
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	58020c00 	.word	0x58020c00
 8001aa4:	240000ac 	.word	0x240000ac
 8001aa8:	58021800 	.word	0x58021800
 8001aac:	58021000 	.word	0x58021000
 8001ab0:	58020000 	.word	0x58020000
 8001ab4:	58020800 	.word	0x58020800
 8001ab8:	58020400 	.word	0x58020400

08001abc <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
 8001ac8:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 8001aca:	4b92      	ldr	r3, [pc, #584]	; (8001d14 <LCD_IO_WriteCmd8MultipleData8+0x258>)
 8001acc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ad0:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8001ad2:	4b91      	ldr	r3, [pc, #580]	; (8001d18 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001ad4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ad8:	619a      	str	r2, [r3, #24]
 8001ada:	4a90      	ldr	r2, [pc, #576]	; (8001d1c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	7013      	strb	r3, [r2, #0]
 8001ae0:	4b8e      	ldr	r3, [pc, #568]	; (8001d1c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d004      	beq.n	8001af6 <LCD_IO_WriteCmd8MultipleData8+0x3a>
 8001aec:	4b8c      	ldr	r3, [pc, #560]	; (8001d20 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af2:	619a      	str	r2, [r3, #24]
 8001af4:	e003      	b.n	8001afe <LCD_IO_WriteCmd8MultipleData8+0x42>
 8001af6:	4b8a      	ldr	r3, [pc, #552]	; (8001d20 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001af8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001afc:	619a      	str	r2, [r3, #24]
 8001afe:	4b87      	ldr	r3, [pc, #540]	; (8001d1c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d004      	beq.n	8001b14 <LCD_IO_WriteCmd8MultipleData8+0x58>
 8001b0a:	4b86      	ldr	r3, [pc, #536]	; (8001d24 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8001b0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b10:	619a      	str	r2, [r3, #24]
 8001b12:	e003      	b.n	8001b1c <LCD_IO_WriteCmd8MultipleData8+0x60>
 8001b14:	4b83      	ldr	r3, [pc, #524]	; (8001d24 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8001b16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b1a:	619a      	str	r2, [r3, #24]
 8001b1c:	4b7f      	ldr	r3, [pc, #508]	; (8001d1c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <LCD_IO_WriteCmd8MultipleData8+0x76>
 8001b28:	4b7d      	ldr	r3, [pc, #500]	; (8001d20 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001b2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b2e:	619a      	str	r2, [r3, #24]
 8001b30:	e003      	b.n	8001b3a <LCD_IO_WriteCmd8MultipleData8+0x7e>
 8001b32:	4b7b      	ldr	r3, [pc, #492]	; (8001d20 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001b34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b38:	619a      	str	r2, [r3, #24]
 8001b3a:	4b78      	ldr	r3, [pc, #480]	; (8001d1c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d004      	beq.n	8001b50 <LCD_IO_WriteCmd8MultipleData8+0x94>
 8001b46:	4b78      	ldr	r3, [pc, #480]	; (8001d28 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b4c:	619a      	str	r2, [r3, #24]
 8001b4e:	e003      	b.n	8001b58 <LCD_IO_WriteCmd8MultipleData8+0x9c>
 8001b50:	4b75      	ldr	r3, [pc, #468]	; (8001d28 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b52:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b56:	619a      	str	r2, [r3, #24]
 8001b58:	4b70      	ldr	r3, [pc, #448]	; (8001d1c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d004      	beq.n	8001b6e <LCD_IO_WriteCmd8MultipleData8+0xb2>
 8001b64:	4b70      	ldr	r3, [pc, #448]	; (8001d28 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b6a:	619a      	str	r2, [r3, #24]
 8001b6c:	e003      	b.n	8001b76 <LCD_IO_WriteCmd8MultipleData8+0xba>
 8001b6e:	4b6e      	ldr	r3, [pc, #440]	; (8001d28 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b74:	619a      	str	r2, [r3, #24]
 8001b76:	4b69      	ldr	r3, [pc, #420]	; (8001d1c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	f003 0320 	and.w	r3, r3, #32
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d004      	beq.n	8001b8c <LCD_IO_WriteCmd8MultipleData8+0xd0>
 8001b82:	4b69      	ldr	r3, [pc, #420]	; (8001d28 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b88:	619a      	str	r2, [r3, #24]
 8001b8a:	e003      	b.n	8001b94 <LCD_IO_WriteCmd8MultipleData8+0xd8>
 8001b8c:	4b66      	ldr	r3, [pc, #408]	; (8001d28 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b92:	619a      	str	r2, [r3, #24]
 8001b94:	4b61      	ldr	r3, [pc, #388]	; (8001d1c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d004      	beq.n	8001baa <LCD_IO_WriteCmd8MultipleData8+0xee>
 8001ba0:	4b62      	ldr	r3, [pc, #392]	; (8001d2c <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ba6:	619a      	str	r2, [r3, #24]
 8001ba8:	e003      	b.n	8001bb2 <LCD_IO_WriteCmd8MultipleData8+0xf6>
 8001baa:	4b60      	ldr	r3, [pc, #384]	; (8001d2c <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001bac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bb0:	619a      	str	r2, [r3, #24]
 8001bb2:	4b5a      	ldr	r3, [pc, #360]	; (8001d1c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b25b      	sxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	da04      	bge.n	8001bc6 <LCD_IO_WriteCmd8MultipleData8+0x10a>
 8001bbc:	4b58      	ldr	r3, [pc, #352]	; (8001d20 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001bbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bc2:	619a      	str	r2, [r3, #24]
 8001bc4:	e003      	b.n	8001bce <LCD_IO_WriteCmd8MultipleData8+0x112>
 8001bc6:	4b56      	ldr	r3, [pc, #344]	; (8001d20 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bcc:	619a      	str	r2, [r3, #24]
 8001bce:	4b52      	ldr	r3, [pc, #328]	; (8001d18 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001bd0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bd4:	619a      	str	r2, [r3, #24]
 8001bd6:	2008      	movs	r0, #8
 8001bd8:	f7ff fa1a 	bl	8001010 <LCD_IO_Delay>
 8001bdc:	4b4e      	ldr	r3, [pc, #312]	; (8001d18 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	619a      	str	r2, [r3, #24]
 8001be2:	4b4d      	ldr	r3, [pc, #308]	; (8001d18 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001be4:	2208      	movs	r2, #8
 8001be6:	619a      	str	r2, [r3, #24]

  while(Size--)
 8001be8:	e087      	b.n	8001cfa <LCD_IO_WriteCmd8MultipleData8+0x23e>
  {
    LCD_DATA8_WRITE(*pData);
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	4b4b      	ldr	r3, [pc, #300]	; (8001d1c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	4b4a      	ldr	r3, [pc, #296]	; (8001d1c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d004      	beq.n	8001c08 <LCD_IO_WriteCmd8MultipleData8+0x14c>
 8001bfe:	4b48      	ldr	r3, [pc, #288]	; (8001d20 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c04:	619a      	str	r2, [r3, #24]
 8001c06:	e003      	b.n	8001c10 <LCD_IO_WriteCmd8MultipleData8+0x154>
 8001c08:	4b45      	ldr	r3, [pc, #276]	; (8001d20 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001c0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c0e:	619a      	str	r2, [r3, #24]
 8001c10:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d004      	beq.n	8001c26 <LCD_IO_WriteCmd8MultipleData8+0x16a>
 8001c1c:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8001c1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c22:	619a      	str	r2, [r3, #24]
 8001c24:	e003      	b.n	8001c2e <LCD_IO_WriteCmd8MultipleData8+0x172>
 8001c26:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8001c28:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c2c:	619a      	str	r2, [r3, #24]
 8001c2e:	4b3b      	ldr	r3, [pc, #236]	; (8001d1c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d004      	beq.n	8001c44 <LCD_IO_WriteCmd8MultipleData8+0x188>
 8001c3a:	4b39      	ldr	r3, [pc, #228]	; (8001d20 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001c3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c40:	619a      	str	r2, [r3, #24]
 8001c42:	e003      	b.n	8001c4c <LCD_IO_WriteCmd8MultipleData8+0x190>
 8001c44:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001c46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c4a:	619a      	str	r2, [r3, #24]
 8001c4c:	4b33      	ldr	r3, [pc, #204]	; (8001d1c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d004      	beq.n	8001c62 <LCD_IO_WriteCmd8MultipleData8+0x1a6>
 8001c58:	4b33      	ldr	r3, [pc, #204]	; (8001d28 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001c5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c5e:	619a      	str	r2, [r3, #24]
 8001c60:	e003      	b.n	8001c6a <LCD_IO_WriteCmd8MultipleData8+0x1ae>
 8001c62:	4b31      	ldr	r3, [pc, #196]	; (8001d28 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001c64:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c68:	619a      	str	r2, [r3, #24]
 8001c6a:	4b2c      	ldr	r3, [pc, #176]	; (8001d1c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d004      	beq.n	8001c80 <LCD_IO_WriteCmd8MultipleData8+0x1c4>
 8001c76:	4b2c      	ldr	r3, [pc, #176]	; (8001d28 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001c78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c7c:	619a      	str	r2, [r3, #24]
 8001c7e:	e003      	b.n	8001c88 <LCD_IO_WriteCmd8MultipleData8+0x1cc>
 8001c80:	4b29      	ldr	r3, [pc, #164]	; (8001d28 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001c82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c86:	619a      	str	r2, [r3, #24]
 8001c88:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	f003 0320 	and.w	r3, r3, #32
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <LCD_IO_WriteCmd8MultipleData8+0x1e2>
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001c96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c9a:	619a      	str	r2, [r3, #24]
 8001c9c:	e003      	b.n	8001ca6 <LCD_IO_WriteCmd8MultipleData8+0x1ea>
 8001c9e:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001ca0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ca4:	619a      	str	r2, [r3, #24]
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d004      	beq.n	8001cbc <LCD_IO_WriteCmd8MultipleData8+0x200>
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001cb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cb8:	619a      	str	r2, [r3, #24]
 8001cba:	e003      	b.n	8001cc4 <LCD_IO_WriteCmd8MultipleData8+0x208>
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001cbe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cc2:	619a      	str	r2, [r3, #24]
 8001cc4:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	b25b      	sxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	da04      	bge.n	8001cd8 <LCD_IO_WriteCmd8MultipleData8+0x21c>
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001cd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cd4:	619a      	str	r2, [r3, #24]
 8001cd6:	e003      	b.n	8001ce0 <LCD_IO_WriteCmd8MultipleData8+0x224>
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cde:	619a      	str	r2, [r3, #24]
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001ce2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ce6:	619a      	str	r2, [r3, #24]
 8001ce8:	2008      	movs	r0, #8
 8001cea:	f7ff f991 	bl	8001010 <LCD_IO_Delay>
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	619a      	str	r2, [r3, #24]
    pData ++;
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	1e5a      	subs	r2, r3, #1
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f47f af72 	bne.w	8001bea <LCD_IO_WriteCmd8MultipleData8+0x12e>
  }
  LCD_CS_OFF;
 8001d06:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <LCD_IO_WriteCmd8MultipleData8+0x258>)
 8001d08:	2202      	movs	r2, #2
 8001d0a:	619a      	str	r2, [r3, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	58020400 	.word	0x58020400
 8001d18:	58020800 	.word	0x58020800
 8001d1c:	240000ac 	.word	0x240000ac
 8001d20:	58021800 	.word	0x58021800
 8001d24:	58020c00 	.word	0x58020c00
 8001d28:	58021000 	.word	0x58021000
 8001d2c:	58020000 	.word	0x58020000

08001d30 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 8001d3e:	4b9b      	ldr	r3, [pc, #620]	; (8001fac <LCD_IO_WriteCmd8MultipleData16+0x27c>)
 8001d40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d44:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8001d46:	4b9a      	ldr	r3, [pc, #616]	; (8001fb0 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001d48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d4c:	619a      	str	r2, [r3, #24]
 8001d4e:	4a99      	ldr	r2, [pc, #612]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	7013      	strb	r3, [r2, #0]
 8001d54:	4b97      	ldr	r3, [pc, #604]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d004      	beq.n	8001d6a <LCD_IO_WriteCmd8MultipleData16+0x3a>
 8001d60:	4b95      	ldr	r3, [pc, #596]	; (8001fb8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d66:	619a      	str	r2, [r3, #24]
 8001d68:	e003      	b.n	8001d72 <LCD_IO_WriteCmd8MultipleData16+0x42>
 8001d6a:	4b93      	ldr	r3, [pc, #588]	; (8001fb8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001d6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d70:	619a      	str	r2, [r3, #24]
 8001d72:	4b90      	ldr	r3, [pc, #576]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d004      	beq.n	8001d88 <LCD_IO_WriteCmd8MultipleData16+0x58>
 8001d7e:	4b8f      	ldr	r3, [pc, #572]	; (8001fbc <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001d80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d84:	619a      	str	r2, [r3, #24]
 8001d86:	e003      	b.n	8001d90 <LCD_IO_WriteCmd8MultipleData16+0x60>
 8001d88:	4b8c      	ldr	r3, [pc, #560]	; (8001fbc <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001d8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d8e:	619a      	str	r2, [r3, #24]
 8001d90:	4b88      	ldr	r3, [pc, #544]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d004      	beq.n	8001da6 <LCD_IO_WriteCmd8MultipleData16+0x76>
 8001d9c:	4b86      	ldr	r3, [pc, #536]	; (8001fb8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001d9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001da2:	619a      	str	r2, [r3, #24]
 8001da4:	e003      	b.n	8001dae <LCD_IO_WriteCmd8MultipleData16+0x7e>
 8001da6:	4b84      	ldr	r3, [pc, #528]	; (8001fb8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001da8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dac:	619a      	str	r2, [r3, #24]
 8001dae:	4b81      	ldr	r3, [pc, #516]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <LCD_IO_WriteCmd8MultipleData16+0x94>
 8001dba:	4b81      	ldr	r3, [pc, #516]	; (8001fc0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001dbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dc0:	619a      	str	r2, [r3, #24]
 8001dc2:	e003      	b.n	8001dcc <LCD_IO_WriteCmd8MultipleData16+0x9c>
 8001dc4:	4b7e      	ldr	r3, [pc, #504]	; (8001fc0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001dc6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001dca:	619a      	str	r2, [r3, #24]
 8001dcc:	4b79      	ldr	r3, [pc, #484]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d004      	beq.n	8001de2 <LCD_IO_WriteCmd8MultipleData16+0xb2>
 8001dd8:	4b79      	ldr	r3, [pc, #484]	; (8001fc0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001dda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dde:	619a      	str	r2, [r3, #24]
 8001de0:	e003      	b.n	8001dea <LCD_IO_WriteCmd8MultipleData16+0xba>
 8001de2:	4b77      	ldr	r3, [pc, #476]	; (8001fc0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001de4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001de8:	619a      	str	r2, [r3, #24]
 8001dea:	4b72      	ldr	r3, [pc, #456]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d004      	beq.n	8001e00 <LCD_IO_WriteCmd8MultipleData16+0xd0>
 8001df6:	4b72      	ldr	r3, [pc, #456]	; (8001fc0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dfc:	619a      	str	r2, [r3, #24]
 8001dfe:	e003      	b.n	8001e08 <LCD_IO_WriteCmd8MultipleData16+0xd8>
 8001e00:	4b6f      	ldr	r3, [pc, #444]	; (8001fc0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001e02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e06:	619a      	str	r2, [r3, #24]
 8001e08:	4b6a      	ldr	r3, [pc, #424]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d004      	beq.n	8001e1e <LCD_IO_WriteCmd8MultipleData16+0xee>
 8001e14:	4b6b      	ldr	r3, [pc, #428]	; (8001fc4 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001e16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e1a:	619a      	str	r2, [r3, #24]
 8001e1c:	e003      	b.n	8001e26 <LCD_IO_WriteCmd8MultipleData16+0xf6>
 8001e1e:	4b69      	ldr	r3, [pc, #420]	; (8001fc4 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001e20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e24:	619a      	str	r2, [r3, #24]
 8001e26:	4b63      	ldr	r3, [pc, #396]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	b25b      	sxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	da04      	bge.n	8001e3a <LCD_IO_WriteCmd8MultipleData16+0x10a>
 8001e30:	4b61      	ldr	r3, [pc, #388]	; (8001fb8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001e32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e36:	619a      	str	r2, [r3, #24]
 8001e38:	e003      	b.n	8001e42 <LCD_IO_WriteCmd8MultipleData16+0x112>
 8001e3a:	4b5f      	ldr	r3, [pc, #380]	; (8001fb8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e40:	619a      	str	r2, [r3, #24]
 8001e42:	4b5b      	ldr	r3, [pc, #364]	; (8001fb0 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001e44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e48:	619a      	str	r2, [r3, #24]
 8001e4a:	2008      	movs	r0, #8
 8001e4c:	f7ff f8e0 	bl	8001010 <LCD_IO_Delay>
 8001e50:	4b57      	ldr	r3, [pc, #348]	; (8001fb0 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	619a      	str	r2, [r3, #24]
 8001e56:	4b56      	ldr	r3, [pc, #344]	; (8001fb0 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001e58:	2208      	movs	r2, #8
 8001e5a:	619a      	str	r2, [r3, #24]
  while(Size--)
 8001e5c:	e11e      	b.n	800209c <LCD_IO_WriteCmd8MultipleData16+0x36c>
  {
    LCD_DATA16_WRITE(*pData);
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	0a1b      	lsrs	r3, r3, #8
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	4b52      	ldr	r3, [pc, #328]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	4b51      	ldr	r3, [pc, #324]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d004      	beq.n	8001e82 <LCD_IO_WriteCmd8MultipleData16+0x152>
 8001e78:	4b4f      	ldr	r3, [pc, #316]	; (8001fb8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e7e:	619a      	str	r2, [r3, #24]
 8001e80:	e003      	b.n	8001e8a <LCD_IO_WriteCmd8MultipleData16+0x15a>
 8001e82:	4b4d      	ldr	r3, [pc, #308]	; (8001fb8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001e84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e88:	619a      	str	r2, [r3, #24]
 8001e8a:	4b4a      	ldr	r3, [pc, #296]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d004      	beq.n	8001ea0 <LCD_IO_WriteCmd8MultipleData16+0x170>
 8001e96:	4b49      	ldr	r3, [pc, #292]	; (8001fbc <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001e98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e9c:	619a      	str	r2, [r3, #24]
 8001e9e:	e003      	b.n	8001ea8 <LCD_IO_WriteCmd8MultipleData16+0x178>
 8001ea0:	4b46      	ldr	r3, [pc, #280]	; (8001fbc <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001ea2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ea6:	619a      	str	r2, [r3, #24]
 8001ea8:	4b42      	ldr	r3, [pc, #264]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d004      	beq.n	8001ebe <LCD_IO_WriteCmd8MultipleData16+0x18e>
 8001eb4:	4b40      	ldr	r3, [pc, #256]	; (8001fb8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001eb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001eba:	619a      	str	r2, [r3, #24]
 8001ebc:	e003      	b.n	8001ec6 <LCD_IO_WriteCmd8MultipleData16+0x196>
 8001ebe:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001ec0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ec4:	619a      	str	r2, [r3, #24]
 8001ec6:	4b3b      	ldr	r3, [pc, #236]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d004      	beq.n	8001edc <LCD_IO_WriteCmd8MultipleData16+0x1ac>
 8001ed2:	4b3b      	ldr	r3, [pc, #236]	; (8001fc0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001ed4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ed8:	619a      	str	r2, [r3, #24]
 8001eda:	e003      	b.n	8001ee4 <LCD_IO_WriteCmd8MultipleData16+0x1b4>
 8001edc:	4b38      	ldr	r3, [pc, #224]	; (8001fc0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001ede:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ee2:	619a      	str	r2, [r3, #24]
 8001ee4:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d004      	beq.n	8001efa <LCD_IO_WriteCmd8MultipleData16+0x1ca>
 8001ef0:	4b33      	ldr	r3, [pc, #204]	; (8001fc0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001ef2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ef6:	619a      	str	r2, [r3, #24]
 8001ef8:	e003      	b.n	8001f02 <LCD_IO_WriteCmd8MultipleData16+0x1d2>
 8001efa:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001efc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f00:	619a      	str	r2, [r3, #24]
 8001f02:	4b2c      	ldr	r3, [pc, #176]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d004      	beq.n	8001f18 <LCD_IO_WriteCmd8MultipleData16+0x1e8>
 8001f0e:	4b2c      	ldr	r3, [pc, #176]	; (8001fc0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f14:	619a      	str	r2, [r3, #24]
 8001f16:	e003      	b.n	8001f20 <LCD_IO_WriteCmd8MultipleData16+0x1f0>
 8001f18:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001f1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f1e:	619a      	str	r2, [r3, #24]
 8001f20:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d004      	beq.n	8001f36 <LCD_IO_WriteCmd8MultipleData16+0x206>
 8001f2c:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001f2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f32:	619a      	str	r2, [r3, #24]
 8001f34:	e003      	b.n	8001f3e <LCD_IO_WriteCmd8MultipleData16+0x20e>
 8001f36:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001f38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f3c:	619a      	str	r2, [r3, #24]
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	b25b      	sxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	da04      	bge.n	8001f52 <LCD_IO_WriteCmd8MultipleData16+0x222>
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001f4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f4e:	619a      	str	r2, [r3, #24]
 8001f50:	e003      	b.n	8001f5a <LCD_IO_WriteCmd8MultipleData16+0x22a>
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f58:	619a      	str	r2, [r3, #24]
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001f5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f60:	619a      	str	r2, [r3, #24]
 8001f62:	2008      	movs	r0, #8
 8001f64:	f7ff f854 	bl	8001010 <LCD_IO_Delay>
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	619a      	str	r2, [r3, #24]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001f76:	701a      	strb	r2, [r3, #0]
 8001f78:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <LCD_IO_WriteCmd8MultipleData16+0x25e>
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f8a:	619a      	str	r2, [r3, #24]
 8001f8c:	e003      	b.n	8001f96 <LCD_IO_WriteCmd8MultipleData16+0x266>
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001f90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f94:	619a      	str	r2, [r3, #24]
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d012      	beq.n	8001fc8 <LCD_IO_WriteCmd8MultipleData16+0x298>
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001fa4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fa8:	619a      	str	r2, [r3, #24]
 8001faa:	e011      	b.n	8001fd0 <LCD_IO_WriteCmd8MultipleData16+0x2a0>
 8001fac:	58020400 	.word	0x58020400
 8001fb0:	58020800 	.word	0x58020800
 8001fb4:	240000ac 	.word	0x240000ac
 8001fb8:	58021800 	.word	0x58021800
 8001fbc:	58020c00 	.word	0x58020c00
 8001fc0:	58021000 	.word	0x58021000
 8001fc4:	58020000 	.word	0x58020000
 8001fc8:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <LCD_IO_WriteCmd8MultipleData16+0x388>)
 8001fca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001fce:	619a      	str	r2, [r3, #24]
 8001fd0:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <LCD_IO_WriteCmd8MultipleData16+0x2b6>
 8001fdc:	4b38      	ldr	r3, [pc, #224]	; (80020c0 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001fde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fe2:	619a      	str	r2, [r3, #24]
 8001fe4:	e003      	b.n	8001fee <LCD_IO_WriteCmd8MultipleData16+0x2be>
 8001fe6:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001fe8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fec:	619a      	str	r2, [r3, #24]
 8001fee:	4b33      	ldr	r3, [pc, #204]	; (80020bc <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d004      	beq.n	8002004 <LCD_IO_WriteCmd8MultipleData16+0x2d4>
 8001ffa:	4b32      	ldr	r3, [pc, #200]	; (80020c4 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001ffc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002000:	619a      	str	r2, [r3, #24]
 8002002:	e003      	b.n	800200c <LCD_IO_WriteCmd8MultipleData16+0x2dc>
 8002004:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8002006:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800200a:	619a      	str	r2, [r3, #24]
 800200c:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	2b00      	cmp	r3, #0
 8002016:	d004      	beq.n	8002022 <LCD_IO_WriteCmd8MultipleData16+0x2f2>
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 800201a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800201e:	619a      	str	r2, [r3, #24]
 8002020:	e003      	b.n	800202a <LCD_IO_WriteCmd8MultipleData16+0x2fa>
 8002022:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8002024:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002028:	619a      	str	r2, [r3, #24]
 800202a:	4b24      	ldr	r3, [pc, #144]	; (80020bc <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	2b00      	cmp	r3, #0
 8002034:	d004      	beq.n	8002040 <LCD_IO_WriteCmd8MultipleData16+0x310>
 8002036:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8002038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800203c:	619a      	str	r2, [r3, #24]
 800203e:	e003      	b.n	8002048 <LCD_IO_WriteCmd8MultipleData16+0x318>
 8002040:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8002042:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002046:	619a      	str	r2, [r3, #24]
 8002048:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002050:	2b00      	cmp	r3, #0
 8002052:	d004      	beq.n	800205e <LCD_IO_WriteCmd8MultipleData16+0x32e>
 8002054:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <LCD_IO_WriteCmd8MultipleData16+0x398>)
 8002056:	f44f 7280 	mov.w	r2, #256	; 0x100
 800205a:	619a      	str	r2, [r3, #24]
 800205c:	e003      	b.n	8002066 <LCD_IO_WriteCmd8MultipleData16+0x336>
 800205e:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <LCD_IO_WriteCmd8MultipleData16+0x398>)
 8002060:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002064:	619a      	str	r2, [r3, #24]
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	b25b      	sxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	da04      	bge.n	800207a <LCD_IO_WriteCmd8MultipleData16+0x34a>
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8002072:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002076:	619a      	str	r2, [r3, #24]
 8002078:	e003      	b.n	8002082 <LCD_IO_WriteCmd8MultipleData16+0x352>
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 800207c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002080:	619a      	str	r2, [r3, #24]
 8002082:	4b12      	ldr	r3, [pc, #72]	; (80020cc <LCD_IO_WriteCmd8MultipleData16+0x39c>)
 8002084:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002088:	619a      	str	r2, [r3, #24]
 800208a:	2008      	movs	r0, #8
 800208c:	f7fe ffc0 	bl	8001010 <LCD_IO_Delay>
 8002090:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <LCD_IO_WriteCmd8MultipleData16+0x39c>)
 8002092:	2201      	movs	r2, #1
 8002094:	619a      	str	r2, [r3, #24]
    pData ++;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	3302      	adds	r3, #2
 800209a:	60bb      	str	r3, [r7, #8]
  while(Size--)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	1e5a      	subs	r2, r3, #1
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f47f aedb 	bne.w	8001e5e <LCD_IO_WriteCmd8MultipleData16+0x12e>
  }
  LCD_CS_OFF;
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <LCD_IO_WriteCmd8MultipleData16+0x3a0>)
 80020aa:	2202      	movs	r2, #2
 80020ac:	619a      	str	r2, [r3, #24]
}
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	58020c00 	.word	0x58020c00
 80020bc:	240000ac 	.word	0x240000ac
 80020c0:	58021800 	.word	0x58021800
 80020c4:	58021000 	.word	0x58021000
 80020c8:	58020000 	.word	0x58020000
 80020cc:	58020800 	.word	0x58020800
 80020d0:	58020400 	.word	0x58020400

080020d4 <LCD_IO_ReadCmd8MultipleData8>:
}

//-----------------------------------------------------------------------------
#if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	4603      	mov	r3, r0
 80020e2:	73fb      	strb	r3, [r7, #15]
  uint8_t  d;
  LCD_CS_ON;
 80020e4:	4b6f      	ldr	r3, [pc, #444]	; (80022a4 <LCD_IO_ReadCmd8MultipleData8+0x1d0>)
 80020e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020ea:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 80020ec:	4b6e      	ldr	r3, [pc, #440]	; (80022a8 <LCD_IO_ReadCmd8MultipleData8+0x1d4>)
 80020ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80020f2:	619a      	str	r2, [r3, #24]
 80020f4:	4a6d      	ldr	r2, [pc, #436]	; (80022ac <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	7013      	strb	r3, [r2, #0]
 80020fa:	4b6c      	ldr	r3, [pc, #432]	; (80022ac <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d004      	beq.n	8002110 <LCD_IO_ReadCmd8MultipleData8+0x3c>
 8002106:	4b6a      	ldr	r3, [pc, #424]	; (80022b0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800210c:	619a      	str	r2, [r3, #24]
 800210e:	e003      	b.n	8002118 <LCD_IO_ReadCmd8MultipleData8+0x44>
 8002110:	4b67      	ldr	r3, [pc, #412]	; (80022b0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002112:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002116:	619a      	str	r2, [r3, #24]
 8002118:	4b64      	ldr	r3, [pc, #400]	; (80022ac <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d004      	beq.n	800212e <LCD_IO_ReadCmd8MultipleData8+0x5a>
 8002124:	4b63      	ldr	r3, [pc, #396]	; (80022b4 <LCD_IO_ReadCmd8MultipleData8+0x1e0>)
 8002126:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800212a:	619a      	str	r2, [r3, #24]
 800212c:	e003      	b.n	8002136 <LCD_IO_ReadCmd8MultipleData8+0x62>
 800212e:	4b61      	ldr	r3, [pc, #388]	; (80022b4 <LCD_IO_ReadCmd8MultipleData8+0x1e0>)
 8002130:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002134:	619a      	str	r2, [r3, #24]
 8002136:	4b5d      	ldr	r3, [pc, #372]	; (80022ac <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d004      	beq.n	800214c <LCD_IO_ReadCmd8MultipleData8+0x78>
 8002142:	4b5b      	ldr	r3, [pc, #364]	; (80022b0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002144:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002148:	619a      	str	r2, [r3, #24]
 800214a:	e003      	b.n	8002154 <LCD_IO_ReadCmd8MultipleData8+0x80>
 800214c:	4b58      	ldr	r3, [pc, #352]	; (80022b0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 800214e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002152:	619a      	str	r2, [r3, #24]
 8002154:	4b55      	ldr	r3, [pc, #340]	; (80022ac <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d004      	beq.n	800216a <LCD_IO_ReadCmd8MultipleData8+0x96>
 8002160:	4b55      	ldr	r3, [pc, #340]	; (80022b8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002162:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002166:	619a      	str	r2, [r3, #24]
 8002168:	e003      	b.n	8002172 <LCD_IO_ReadCmd8MultipleData8+0x9e>
 800216a:	4b53      	ldr	r3, [pc, #332]	; (80022b8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 800216c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002170:	619a      	str	r2, [r3, #24]
 8002172:	4b4e      	ldr	r3, [pc, #312]	; (80022ac <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	2b00      	cmp	r3, #0
 800217c:	d004      	beq.n	8002188 <LCD_IO_ReadCmd8MultipleData8+0xb4>
 800217e:	4b4e      	ldr	r3, [pc, #312]	; (80022b8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002180:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002184:	619a      	str	r2, [r3, #24]
 8002186:	e003      	b.n	8002190 <LCD_IO_ReadCmd8MultipleData8+0xbc>
 8002188:	4b4b      	ldr	r3, [pc, #300]	; (80022b8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 800218a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800218e:	619a      	str	r2, [r3, #24]
 8002190:	4b46      	ldr	r3, [pc, #280]	; (80022ac <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	2b00      	cmp	r3, #0
 800219a:	d004      	beq.n	80021a6 <LCD_IO_ReadCmd8MultipleData8+0xd2>
 800219c:	4b46      	ldr	r3, [pc, #280]	; (80022b8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 800219e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021a2:	619a      	str	r2, [r3, #24]
 80021a4:	e003      	b.n	80021ae <LCD_IO_ReadCmd8MultipleData8+0xda>
 80021a6:	4b44      	ldr	r3, [pc, #272]	; (80022b8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 80021a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021ac:	619a      	str	r2, [r3, #24]
 80021ae:	4b3f      	ldr	r3, [pc, #252]	; (80022ac <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d004      	beq.n	80021c4 <LCD_IO_ReadCmd8MultipleData8+0xf0>
 80021ba:	4b40      	ldr	r3, [pc, #256]	; (80022bc <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 80021bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021c0:	619a      	str	r2, [r3, #24]
 80021c2:	e003      	b.n	80021cc <LCD_IO_ReadCmd8MultipleData8+0xf8>
 80021c4:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 80021c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021ca:	619a      	str	r2, [r3, #24]
 80021cc:	4b37      	ldr	r3, [pc, #220]	; (80022ac <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	b25b      	sxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	da04      	bge.n	80021e0 <LCD_IO_ReadCmd8MultipleData8+0x10c>
 80021d6:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 80021d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021dc:	619a      	str	r2, [r3, #24]
 80021de:	e003      	b.n	80021e8 <LCD_IO_ReadCmd8MultipleData8+0x114>
 80021e0:	4b33      	ldr	r3, [pc, #204]	; (80022b0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 80021e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021e6:	619a      	str	r2, [r3, #24]
 80021e8:	4b2f      	ldr	r3, [pc, #188]	; (80022a8 <LCD_IO_ReadCmd8MultipleData8+0x1d4>)
 80021ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021ee:	619a      	str	r2, [r3, #24]
 80021f0:	2008      	movs	r0, #8
 80021f2:	f7fe ff0d 	bl	8001010 <LCD_IO_Delay>
 80021f6:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <LCD_IO_ReadCmd8MultipleData8+0x1d4>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	619a      	str	r2, [r3, #24]
 80021fc:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <LCD_IO_ReadCmd8MultipleData8+0x1d4>)
 80021fe:	2208      	movs	r2, #8
 8002200:	619a      	str	r2, [r3, #24]
  LCD_DIRREAD;
 8002202:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a2a      	ldr	r2, [pc, #168]	; (80022b0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002208:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <LCD_IO_ReadCmd8MultipleData8+0x1e0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a28      	ldr	r2, [pc, #160]	; (80022b4 <LCD_IO_ReadCmd8MultipleData8+0x1e0>)
 8002214:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b25      	ldr	r3, [pc, #148]	; (80022b0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a24      	ldr	r2, [pc, #144]	; (80022b0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002220:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a23      	ldr	r2, [pc, #140]	; (80022b8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 800222c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a20      	ldr	r2, [pc, #128]	; (80022b8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002238:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1d      	ldr	r2, [pc, #116]	; (80022b8 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002244:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b1c      	ldr	r3, [pc, #112]	; (80022bc <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8002250:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a15      	ldr	r2, [pc, #84]	; (80022b0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 800225c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002260:	6013      	str	r3, [r2, #0]
  while(DummySize--)
 8002262:	e009      	b.n	8002278 <LCD_IO_ReadCmd8MultipleData8+0x1a4>
    LCD_DUMMY_READ;
 8002264:	4b15      	ldr	r3, [pc, #84]	; (80022bc <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8002266:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800226a:	619a      	str	r2, [r3, #24]
 800226c:	2012      	movs	r0, #18
 800226e:	f7fe fecf 	bl	8001010 <LCD_IO_Delay>
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8002274:	2208      	movs	r2, #8
 8002276:	619a      	str	r2, [r3, #24]
  while(DummySize--)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	1e5a      	subs	r2, r3, #1
 800227c:	603a      	str	r2, [r7, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <LCD_IO_ReadCmd8MultipleData8+0x190>
  while(Size--)
 8002282:	e06e      	b.n	8002362 <LCD_IO_ReadCmd8MultipleData8+0x28e>
  {
    LCD_DATA8_READ(d);
 8002284:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8002286:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800228a:	619a      	str	r2, [r3, #24]
 800228c:	2012      	movs	r0, #18
 800228e:	f7fe febf 	bl	8001010 <LCD_IO_Delay>
 8002292:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800229a:	2b00      	cmp	r3, #0
 800229c:	d010      	beq.n	80022c0 <LCD_IO_ReadCmd8MultipleData8+0x1ec>
 800229e:	2301      	movs	r3, #1
 80022a0:	75fb      	strb	r3, [r7, #23]
 80022a2:	e00f      	b.n	80022c4 <LCD_IO_ReadCmd8MultipleData8+0x1f0>
 80022a4:	58020400 	.word	0x58020400
 80022a8:	58020800 	.word	0x58020800
 80022ac:	240000ac 	.word	0x240000ac
 80022b0:	58021800 	.word	0x58021800
 80022b4:	58020c00 	.word	0x58020c00
 80022b8:	58021000 	.word	0x58021000
 80022bc:	58020000 	.word	0x58020000
 80022c0:	2300      	movs	r3, #0
 80022c2:	75fb      	strb	r3, [r7, #23]
 80022c4:	4b4d      	ldr	r3, [pc, #308]	; (80023fc <LCD_IO_ReadCmd8MultipleData8+0x328>)
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <LCD_IO_ReadCmd8MultipleData8+0x204>
 80022d0:	7dfb      	ldrb	r3, [r7, #23]
 80022d2:	f043 0302 	orr.w	r3, r3, #2
 80022d6:	75fb      	strb	r3, [r7, #23]
 80022d8:	4b49      	ldr	r3, [pc, #292]	; (8002400 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <LCD_IO_ReadCmd8MultipleData8+0x218>
 80022e4:	7dfb      	ldrb	r3, [r7, #23]
 80022e6:	f043 0304 	orr.w	r3, r3, #4
 80022ea:	75fb      	strb	r3, [r7, #23]
 80022ec:	4b45      	ldr	r3, [pc, #276]	; (8002404 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <LCD_IO_ReadCmd8MultipleData8+0x22c>
 80022f8:	7dfb      	ldrb	r3, [r7, #23]
 80022fa:	f043 0308 	orr.w	r3, r3, #8
 80022fe:	75fb      	strb	r3, [r7, #23]
 8002300:	4b40      	ldr	r3, [pc, #256]	; (8002404 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <LCD_IO_ReadCmd8MultipleData8+0x240>
 800230c:	7dfb      	ldrb	r3, [r7, #23]
 800230e:	f043 0310 	orr.w	r3, r3, #16
 8002312:	75fb      	strb	r3, [r7, #23]
 8002314:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <LCD_IO_ReadCmd8MultipleData8+0x254>
 8002320:	7dfb      	ldrb	r3, [r7, #23]
 8002322:	f043 0320 	orr.w	r3, r3, #32
 8002326:	75fb      	strb	r3, [r7, #23]
 8002328:	4b37      	ldr	r3, [pc, #220]	; (8002408 <LCD_IO_ReadCmd8MultipleData8+0x334>)
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <LCD_IO_ReadCmd8MultipleData8+0x268>
 8002334:	7dfb      	ldrb	r3, [r7, #23]
 8002336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800233a:	75fb      	strb	r3, [r7, #23]
 800233c:	4b30      	ldr	r3, [pc, #192]	; (8002400 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <LCD_IO_ReadCmd8MultipleData8+0x27c>
 8002348:	7dfb      	ldrb	r3, [r7, #23]
 800234a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800234e:	75fb      	strb	r3, [r7, #23]
 8002350:	4b2d      	ldr	r3, [pc, #180]	; (8002408 <LCD_IO_ReadCmd8MultipleData8+0x334>)
 8002352:	2208      	movs	r2, #8
 8002354:	619a      	str	r2, [r3, #24]
    *pData = d;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	7dfa      	ldrb	r2, [r7, #23]
 800235a:	701a      	strb	r2, [r3, #0]
    pData++;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	3301      	adds	r3, #1
 8002360:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	1e5a      	subs	r2, r3, #1
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d18b      	bne.n	8002284 <LCD_IO_ReadCmd8MultipleData8+0x1b0>
  }
  LCD_CS_OFF;
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <LCD_IO_ReadCmd8MultipleData8+0x338>)
 800236e:	2202      	movs	r2, #2
 8002370:	619a      	str	r2, [r3, #24]
  LCD_DIRWRITE;
 8002372:	4b23      	ldr	r3, [pc, #140]	; (8002400 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800237a:	4a21      	ldr	r2, [pc, #132]	; (8002400 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 800237c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <LCD_IO_ReadCmd8MultipleData8+0x328>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800238a:	4a1c      	ldr	r2, [pc, #112]	; (80023fc <LCD_IO_ReadCmd8MultipleData8+0x328>)
 800238c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800239a:	4a19      	ldr	r2, [pc, #100]	; (8002400 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 800239c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b18      	ldr	r3, [pc, #96]	; (8002404 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80023aa:	4a16      	ldr	r2, [pc, #88]	; (8002404 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 80023ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b14      	ldr	r3, [pc, #80]	; (8002404 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80023ba:	4a12      	ldr	r2, [pc, #72]	; (8002404 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80023ca:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <LCD_IO_ReadCmd8MultipleData8+0x330>)
 80023cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <LCD_IO_ReadCmd8MultipleData8+0x334>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80023da:	4a0b      	ldr	r2, [pc, #44]	; (8002408 <LCD_IO_ReadCmd8MultipleData8+0x334>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80023ea:	4a05      	ldr	r2, [pc, #20]	; (8002400 <LCD_IO_ReadCmd8MultipleData8+0x32c>)
 80023ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023f0:	6013      	str	r3, [r2, #0]
}
 80023f2:	bf00      	nop
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	58020c00 	.word	0x58020c00
 8002400:	58021800 	.word	0x58021800
 8002404:	58021000 	.word	0x58021000
 8002408:	58020000 	.word	0x58020000
 800240c:	58020400 	.word	0x58020400

08002410 <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_DIRWRITE;
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	4603      	mov	r3, r0
 800241e:	73fb      	strb	r3, [r7, #15]
  uint8_t  rgb888[3];
  LCD_CS_ON;
 8002420:	4ba0      	ldr	r3, [pc, #640]	; (80026a4 <LCD_IO_ReadCmd8MultipleData24to16+0x294>)
 8002422:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002426:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8002428:	4b9f      	ldr	r3, [pc, #636]	; (80026a8 <LCD_IO_ReadCmd8MultipleData24to16+0x298>)
 800242a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800242e:	619a      	str	r2, [r3, #24]
 8002430:	4a9e      	ldr	r2, [pc, #632]	; (80026ac <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	7013      	strb	r3, [r2, #0]
 8002436:	4b9d      	ldr	r3, [pc, #628]	; (80026ac <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d004      	beq.n	800244c <LCD_IO_ReadCmd8MultipleData24to16+0x3c>
 8002442:	4b9b      	ldr	r3, [pc, #620]	; (80026b0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002448:	619a      	str	r2, [r3, #24]
 800244a:	e003      	b.n	8002454 <LCD_IO_ReadCmd8MultipleData24to16+0x44>
 800244c:	4b98      	ldr	r3, [pc, #608]	; (80026b0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 800244e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002452:	619a      	str	r2, [r3, #24]
 8002454:	4b95      	ldr	r3, [pc, #596]	; (80026ac <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d004      	beq.n	800246a <LCD_IO_ReadCmd8MultipleData24to16+0x5a>
 8002460:	4b94      	ldr	r3, [pc, #592]	; (80026b4 <LCD_IO_ReadCmd8MultipleData24to16+0x2a4>)
 8002462:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002466:	619a      	str	r2, [r3, #24]
 8002468:	e003      	b.n	8002472 <LCD_IO_ReadCmd8MultipleData24to16+0x62>
 800246a:	4b92      	ldr	r3, [pc, #584]	; (80026b4 <LCD_IO_ReadCmd8MultipleData24to16+0x2a4>)
 800246c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002470:	619a      	str	r2, [r3, #24]
 8002472:	4b8e      	ldr	r3, [pc, #568]	; (80026ac <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b00      	cmp	r3, #0
 800247c:	d004      	beq.n	8002488 <LCD_IO_ReadCmd8MultipleData24to16+0x78>
 800247e:	4b8c      	ldr	r3, [pc, #560]	; (80026b0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002480:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002484:	619a      	str	r2, [r3, #24]
 8002486:	e003      	b.n	8002490 <LCD_IO_ReadCmd8MultipleData24to16+0x80>
 8002488:	4b89      	ldr	r3, [pc, #548]	; (80026b0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 800248a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800248e:	619a      	str	r2, [r3, #24]
 8002490:	4b86      	ldr	r3, [pc, #536]	; (80026ac <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <LCD_IO_ReadCmd8MultipleData24to16+0x96>
 800249c:	4b86      	ldr	r3, [pc, #536]	; (80026b8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 800249e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024a2:	619a      	str	r2, [r3, #24]
 80024a4:	e003      	b.n	80024ae <LCD_IO_ReadCmd8MultipleData24to16+0x9e>
 80024a6:	4b84      	ldr	r3, [pc, #528]	; (80026b8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 80024a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80024ac:	619a      	str	r2, [r3, #24]
 80024ae:	4b7f      	ldr	r3, [pc, #508]	; (80026ac <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d004      	beq.n	80024c4 <LCD_IO_ReadCmd8MultipleData24to16+0xb4>
 80024ba:	4b7f      	ldr	r3, [pc, #508]	; (80026b8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 80024bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024c0:	619a      	str	r2, [r3, #24]
 80024c2:	e003      	b.n	80024cc <LCD_IO_ReadCmd8MultipleData24to16+0xbc>
 80024c4:	4b7c      	ldr	r3, [pc, #496]	; (80026b8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 80024c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024ca:	619a      	str	r2, [r3, #24]
 80024cc:	4b77      	ldr	r3, [pc, #476]	; (80026ac <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d004      	beq.n	80024e2 <LCD_IO_ReadCmd8MultipleData24to16+0xd2>
 80024d8:	4b77      	ldr	r3, [pc, #476]	; (80026b8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 80024da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024de:	619a      	str	r2, [r3, #24]
 80024e0:	e003      	b.n	80024ea <LCD_IO_ReadCmd8MultipleData24to16+0xda>
 80024e2:	4b75      	ldr	r3, [pc, #468]	; (80026b8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 80024e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024e8:	619a      	str	r2, [r3, #24]
 80024ea:	4b70      	ldr	r3, [pc, #448]	; (80026ac <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d004      	beq.n	8002500 <LCD_IO_ReadCmd8MultipleData24to16+0xf0>
 80024f6:	4b71      	ldr	r3, [pc, #452]	; (80026bc <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 80024f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024fc:	619a      	str	r2, [r3, #24]
 80024fe:	e003      	b.n	8002508 <LCD_IO_ReadCmd8MultipleData24to16+0xf8>
 8002500:	4b6e      	ldr	r3, [pc, #440]	; (80026bc <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 8002502:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002506:	619a      	str	r2, [r3, #24]
 8002508:	4b68      	ldr	r3, [pc, #416]	; (80026ac <LCD_IO_ReadCmd8MultipleData24to16+0x29c>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	b25b      	sxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	da04      	bge.n	800251c <LCD_IO_ReadCmd8MultipleData24to16+0x10c>
 8002512:	4b67      	ldr	r3, [pc, #412]	; (80026b0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002514:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002518:	619a      	str	r2, [r3, #24]
 800251a:	e003      	b.n	8002524 <LCD_IO_ReadCmd8MultipleData24to16+0x114>
 800251c:	4b64      	ldr	r3, [pc, #400]	; (80026b0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 800251e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002522:	619a      	str	r2, [r3, #24]
 8002524:	4b60      	ldr	r3, [pc, #384]	; (80026a8 <LCD_IO_ReadCmd8MultipleData24to16+0x298>)
 8002526:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800252a:	619a      	str	r2, [r3, #24]
 800252c:	2008      	movs	r0, #8
 800252e:	f7fe fd6f 	bl	8001010 <LCD_IO_Delay>
 8002532:	4b5d      	ldr	r3, [pc, #372]	; (80026a8 <LCD_IO_ReadCmd8MultipleData24to16+0x298>)
 8002534:	2201      	movs	r2, #1
 8002536:	619a      	str	r2, [r3, #24]
 8002538:	4b5b      	ldr	r3, [pc, #364]	; (80026a8 <LCD_IO_ReadCmd8MultipleData24to16+0x298>)
 800253a:	2208      	movs	r2, #8
 800253c:	619a      	str	r2, [r3, #24]
  LCD_DIRREAD;
 800253e:	4b5c      	ldr	r3, [pc, #368]	; (80026b0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a5b      	ldr	r2, [pc, #364]	; (80026b0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002544:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	4b5a      	ldr	r3, [pc, #360]	; (80026b4 <LCD_IO_ReadCmd8MultipleData24to16+0x2a4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a59      	ldr	r2, [pc, #356]	; (80026b4 <LCD_IO_ReadCmd8MultipleData24to16+0x2a4>)
 8002550:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	4b56      	ldr	r3, [pc, #344]	; (80026b0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a55      	ldr	r2, [pc, #340]	; (80026b0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 800255c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	4b55      	ldr	r3, [pc, #340]	; (80026b8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a54      	ldr	r2, [pc, #336]	; (80026b8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002568:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b52      	ldr	r3, [pc, #328]	; (80026b8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a51      	ldr	r2, [pc, #324]	; (80026b8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002574:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b4f      	ldr	r3, [pc, #316]	; (80026b8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a4e      	ldr	r2, [pc, #312]	; (80026b8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002580:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b4d      	ldr	r3, [pc, #308]	; (80026bc <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a4c      	ldr	r2, [pc, #304]	; (80026bc <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 800258c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	4b47      	ldr	r3, [pc, #284]	; (80026b0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a46      	ldr	r2, [pc, #280]	; (80026b0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002598:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800259c:	6013      	str	r3, [r2, #0]
  while(DummySize--)
 800259e:	e009      	b.n	80025b4 <LCD_IO_ReadCmd8MultipleData24to16+0x1a4>
    LCD_DUMMY_READ;
 80025a0:	4b46      	ldr	r3, [pc, #280]	; (80026bc <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 80025a2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80025a6:	619a      	str	r2, [r3, #24]
 80025a8:	2012      	movs	r0, #18
 80025aa:	f7fe fd31 	bl	8001010 <LCD_IO_Delay>
 80025ae:	4b43      	ldr	r3, [pc, #268]	; (80026bc <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 80025b0:	2208      	movs	r2, #8
 80025b2:	619a      	str	r2, [r3, #24]
  while(DummySize--)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	1e5a      	subs	r2, r3, #1
 80025b8:	603a      	str	r2, [r7, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <LCD_IO_ReadCmd8MultipleData24to16+0x190>
  while(Size--)
 80025be:	e14d      	b.n	800285c <LCD_IO_ReadCmd8MultipleData24to16+0x44c>
  {
    LCD_DATA8_READ(rgb888[0]);
 80025c0:	4b3e      	ldr	r3, [pc, #248]	; (80026bc <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 80025c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80025c6:	619a      	str	r2, [r3, #24]
 80025c8:	2012      	movs	r0, #18
 80025ca:	f7fe fd21 	bl	8001010 <LCD_IO_Delay>
 80025ce:	4b38      	ldr	r3, [pc, #224]	; (80026b0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <LCD_IO_ReadCmd8MultipleData24to16+0x1d0>
 80025da:	2301      	movs	r3, #1
 80025dc:	753b      	strb	r3, [r7, #20]
 80025de:	e001      	b.n	80025e4 <LCD_IO_ReadCmd8MultipleData24to16+0x1d4>
 80025e0:	2300      	movs	r3, #0
 80025e2:	753b      	strb	r3, [r7, #20]
 80025e4:	4b33      	ldr	r3, [pc, #204]	; (80026b4 <LCD_IO_ReadCmd8MultipleData24to16+0x2a4>)
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d004      	beq.n	80025fa <LCD_IO_ReadCmd8MultipleData24to16+0x1ea>
 80025f0:	7d3b      	ldrb	r3, [r7, #20]
 80025f2:	f043 0302 	orr.w	r3, r3, #2
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	753b      	strb	r3, [r7, #20]
 80025fa:	4b2d      	ldr	r3, [pc, #180]	; (80026b0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <LCD_IO_ReadCmd8MultipleData24to16+0x200>
 8002606:	7d3b      	ldrb	r3, [r7, #20]
 8002608:	f043 0304 	orr.w	r3, r3, #4
 800260c:	b2db      	uxtb	r3, r3
 800260e:	753b      	strb	r3, [r7, #20]
 8002610:	4b29      	ldr	r3, [pc, #164]	; (80026b8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d004      	beq.n	8002626 <LCD_IO_ReadCmd8MultipleData24to16+0x216>
 800261c:	7d3b      	ldrb	r3, [r7, #20]
 800261e:	f043 0308 	orr.w	r3, r3, #8
 8002622:	b2db      	uxtb	r3, r3
 8002624:	753b      	strb	r3, [r7, #20]
 8002626:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d004      	beq.n	800263c <LCD_IO_ReadCmd8MultipleData24to16+0x22c>
 8002632:	7d3b      	ldrb	r3, [r7, #20]
 8002634:	f043 0310 	orr.w	r3, r3, #16
 8002638:	b2db      	uxtb	r3, r3
 800263a:	753b      	strb	r3, [r7, #20]
 800263c:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <LCD_IO_ReadCmd8MultipleData24to16+0x2a8>)
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <LCD_IO_ReadCmd8MultipleData24to16+0x242>
 8002648:	7d3b      	ldrb	r3, [r7, #20]
 800264a:	f043 0320 	orr.w	r3, r3, #32
 800264e:	b2db      	uxtb	r3, r3
 8002650:	753b      	strb	r3, [r7, #20]
 8002652:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d004      	beq.n	8002668 <LCD_IO_ReadCmd8MultipleData24to16+0x258>
 800265e:	7d3b      	ldrb	r3, [r7, #20]
 8002660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002664:	b2db      	uxtb	r3, r3
 8002666:	753b      	strb	r3, [r7, #20]
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <LCD_IO_ReadCmd8MultipleData24to16+0x26e>
 8002674:	7d3b      	ldrb	r3, [r7, #20]
 8002676:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800267a:	b2db      	uxtb	r3, r3
 800267c:	753b      	strb	r3, [r7, #20]
 800267e:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 8002680:	2208      	movs	r2, #8
 8002682:	619a      	str	r2, [r3, #24]
    LCD_DATA8_READ(rgb888[1]);
 8002684:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <LCD_IO_ReadCmd8MultipleData24to16+0x2ac>)
 8002686:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800268a:	619a      	str	r2, [r3, #24]
 800268c:	2012      	movs	r0, #18
 800268e:	f7fe fcbf 	bl	8001010 <LCD_IO_Delay>
 8002692:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <LCD_IO_ReadCmd8MultipleData24to16+0x2a0>)
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269a:	2b00      	cmp	r3, #0
 800269c:	d010      	beq.n	80026c0 <LCD_IO_ReadCmd8MultipleData24to16+0x2b0>
 800269e:	2301      	movs	r3, #1
 80026a0:	757b      	strb	r3, [r7, #21]
 80026a2:	e00f      	b.n	80026c4 <LCD_IO_ReadCmd8MultipleData24to16+0x2b4>
 80026a4:	58020400 	.word	0x58020400
 80026a8:	58020800 	.word	0x58020800
 80026ac:	240000ac 	.word	0x240000ac
 80026b0:	58021800 	.word	0x58021800
 80026b4:	58020c00 	.word	0x58020c00
 80026b8:	58021000 	.word	0x58021000
 80026bc:	58020000 	.word	0x58020000
 80026c0:	2300      	movs	r3, #0
 80026c2:	757b      	strb	r3, [r7, #21]
 80026c4:	4b8c      	ldr	r3, [pc, #560]	; (80028f8 <LCD_IO_ReadCmd8MultipleData24to16+0x4e8>)
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d004      	beq.n	80026da <LCD_IO_ReadCmd8MultipleData24to16+0x2ca>
 80026d0:	7d7b      	ldrb	r3, [r7, #21]
 80026d2:	f043 0302 	orr.w	r3, r3, #2
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	757b      	strb	r3, [r7, #21]
 80026da:	4b88      	ldr	r3, [pc, #544]	; (80028fc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d004      	beq.n	80026f0 <LCD_IO_ReadCmd8MultipleData24to16+0x2e0>
 80026e6:	7d7b      	ldrb	r3, [r7, #21]
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	757b      	strb	r3, [r7, #21]
 80026f0:	4b83      	ldr	r3, [pc, #524]	; (8002900 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d004      	beq.n	8002706 <LCD_IO_ReadCmd8MultipleData24to16+0x2f6>
 80026fc:	7d7b      	ldrb	r3, [r7, #21]
 80026fe:	f043 0308 	orr.w	r3, r3, #8
 8002702:	b2db      	uxtb	r3, r3
 8002704:	757b      	strb	r3, [r7, #21]
 8002706:	4b7e      	ldr	r3, [pc, #504]	; (8002900 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d004      	beq.n	800271c <LCD_IO_ReadCmd8MultipleData24to16+0x30c>
 8002712:	7d7b      	ldrb	r3, [r7, #21]
 8002714:	f043 0310 	orr.w	r3, r3, #16
 8002718:	b2db      	uxtb	r3, r3
 800271a:	757b      	strb	r3, [r7, #21]
 800271c:	4b78      	ldr	r3, [pc, #480]	; (8002900 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002724:	2b00      	cmp	r3, #0
 8002726:	d004      	beq.n	8002732 <LCD_IO_ReadCmd8MultipleData24to16+0x322>
 8002728:	7d7b      	ldrb	r3, [r7, #21]
 800272a:	f043 0320 	orr.w	r3, r3, #32
 800272e:	b2db      	uxtb	r3, r3
 8002730:	757b      	strb	r3, [r7, #21]
 8002732:	4b74      	ldr	r3, [pc, #464]	; (8002904 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d004      	beq.n	8002748 <LCD_IO_ReadCmd8MultipleData24to16+0x338>
 800273e:	7d7b      	ldrb	r3, [r7, #21]
 8002740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002744:	b2db      	uxtb	r3, r3
 8002746:	757b      	strb	r3, [r7, #21]
 8002748:	4b6c      	ldr	r3, [pc, #432]	; (80028fc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d004      	beq.n	800275e <LCD_IO_ReadCmd8MultipleData24to16+0x34e>
 8002754:	7d7b      	ldrb	r3, [r7, #21]
 8002756:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800275a:	b2db      	uxtb	r3, r3
 800275c:	757b      	strb	r3, [r7, #21]
 800275e:	4b69      	ldr	r3, [pc, #420]	; (8002904 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 8002760:	2208      	movs	r2, #8
 8002762:	619a      	str	r2, [r3, #24]
    LCD_DATA8_READ(rgb888[2]);
 8002764:	4b67      	ldr	r3, [pc, #412]	; (8002904 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 8002766:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800276a:	619a      	str	r2, [r3, #24]
 800276c:	2012      	movs	r0, #18
 800276e:	f7fe fc4f 	bl	8001010 <LCD_IO_Delay>
 8002772:	4b62      	ldr	r3, [pc, #392]	; (80028fc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <LCD_IO_ReadCmd8MultipleData24to16+0x374>
 800277e:	2301      	movs	r3, #1
 8002780:	75bb      	strb	r3, [r7, #22]
 8002782:	e001      	b.n	8002788 <LCD_IO_ReadCmd8MultipleData24to16+0x378>
 8002784:	2300      	movs	r3, #0
 8002786:	75bb      	strb	r3, [r7, #22]
 8002788:	4b5b      	ldr	r3, [pc, #364]	; (80028f8 <LCD_IO_ReadCmd8MultipleData24to16+0x4e8>)
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d004      	beq.n	800279e <LCD_IO_ReadCmd8MultipleData24to16+0x38e>
 8002794:	7dbb      	ldrb	r3, [r7, #22]
 8002796:	f043 0302 	orr.w	r3, r3, #2
 800279a:	b2db      	uxtb	r3, r3
 800279c:	75bb      	strb	r3, [r7, #22]
 800279e:	4b57      	ldr	r3, [pc, #348]	; (80028fc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d004      	beq.n	80027b4 <LCD_IO_ReadCmd8MultipleData24to16+0x3a4>
 80027aa:	7dbb      	ldrb	r3, [r7, #22]
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	75bb      	strb	r3, [r7, #22]
 80027b4:	4b52      	ldr	r3, [pc, #328]	; (8002900 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d004      	beq.n	80027ca <LCD_IO_ReadCmd8MultipleData24to16+0x3ba>
 80027c0:	7dbb      	ldrb	r3, [r7, #22]
 80027c2:	f043 0308 	orr.w	r3, r3, #8
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	75bb      	strb	r3, [r7, #22]
 80027ca:	4b4d      	ldr	r3, [pc, #308]	; (8002900 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d004      	beq.n	80027e0 <LCD_IO_ReadCmd8MultipleData24to16+0x3d0>
 80027d6:	7dbb      	ldrb	r3, [r7, #22]
 80027d8:	f043 0310 	orr.w	r3, r3, #16
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	75bb      	strb	r3, [r7, #22]
 80027e0:	4b47      	ldr	r3, [pc, #284]	; (8002900 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d004      	beq.n	80027f6 <LCD_IO_ReadCmd8MultipleData24to16+0x3e6>
 80027ec:	7dbb      	ldrb	r3, [r7, #22]
 80027ee:	f043 0320 	orr.w	r3, r3, #32
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	75bb      	strb	r3, [r7, #22]
 80027f6:	4b43      	ldr	r3, [pc, #268]	; (8002904 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d004      	beq.n	800280c <LCD_IO_ReadCmd8MultipleData24to16+0x3fc>
 8002802:	7dbb      	ldrb	r3, [r7, #22]
 8002804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002808:	b2db      	uxtb	r3, r3
 800280a:	75bb      	strb	r3, [r7, #22]
 800280c:	4b3b      	ldr	r3, [pc, #236]	; (80028fc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d004      	beq.n	8002822 <LCD_IO_ReadCmd8MultipleData24to16+0x412>
 8002818:	7dbb      	ldrb	r3, [r7, #22]
 800281a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800281e:	b2db      	uxtb	r3, r3
 8002820:	75bb      	strb	r3, [r7, #22]
 8002822:	4b38      	ldr	r3, [pc, #224]	; (8002904 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 8002824:	2208      	movs	r2, #8
 8002826:	619a      	str	r2, [r3, #24]
    #if LCD_REVERSE16 == 0
    *pData = ((rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3);
 8002828:	7d3b      	ldrb	r3, [r7, #20]
 800282a:	021b      	lsls	r3, r3, #8
 800282c:	b21a      	sxth	r2, r3
 800282e:	4b36      	ldr	r3, [pc, #216]	; (8002908 <LCD_IO_ReadCmd8MultipleData24to16+0x4f8>)
 8002830:	4013      	ands	r3, r2
 8002832:	b21a      	sxth	r2, r3
 8002834:	7d7b      	ldrb	r3, [r7, #21]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	b21b      	sxth	r3, r3
 800283a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800283e:	b21b      	sxth	r3, r3
 8002840:	4313      	orrs	r3, r2
 8002842:	b21a      	sxth	r2, r3
 8002844:	7dbb      	ldrb	r3, [r7, #22]
 8002846:	08db      	lsrs	r3, r3, #3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	b21b      	sxth	r3, r3
 800284c:	4313      	orrs	r3, r2
 800284e:	b21b      	sxth	r3, r3
 8002850:	b29a      	uxth	r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	801a      	strh	r2, [r3, #0]
    #else
    *pData = __REVSH((rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3);
    #endif
    pData++;
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	3302      	adds	r3, #2
 800285a:	60bb      	str	r3, [r7, #8]
  while(Size--)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	1e5a      	subs	r2, r3, #1
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	f47f aeac 	bne.w	80025c0 <LCD_IO_ReadCmd8MultipleData24to16+0x1b0>
  }
  LCD_CS_OFF;
 8002868:	4b28      	ldr	r3, [pc, #160]	; (800290c <LCD_IO_ReadCmd8MultipleData24to16+0x4fc>)
 800286a:	2202      	movs	r2, #2
 800286c:	619a      	str	r2, [r3, #24]
  LCD_DIRWRITE;
 800286e:	4b23      	ldr	r3, [pc, #140]	; (80028fc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002876:	4a21      	ldr	r2, [pc, #132]	; (80028fc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 8002878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b1e      	ldr	r3, [pc, #120]	; (80028f8 <LCD_IO_ReadCmd8MultipleData24to16+0x4e8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002886:	4a1c      	ldr	r2, [pc, #112]	; (80028f8 <LCD_IO_ReadCmd8MultipleData24to16+0x4e8>)
 8002888:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002896:	4a19      	ldr	r2, [pc, #100]	; (80028fc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b18      	ldr	r3, [pc, #96]	; (8002900 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80028a6:	4a16      	ldr	r2, [pc, #88]	; (8002900 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80028a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	4b14      	ldr	r3, [pc, #80]	; (8002900 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80028b6:	4a12      	ldr	r2, [pc, #72]	; (8002900 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80028b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80028c6:	4a0e      	ldr	r2, [pc, #56]	; (8002900 <LCD_IO_ReadCmd8MultipleData24to16+0x4f0>)
 80028c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80028d6:	4a0b      	ldr	r2, [pc, #44]	; (8002904 <LCD_IO_ReadCmd8MultipleData24to16+0x4f4>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	4b07      	ldr	r3, [pc, #28]	; (80028fc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80028e6:	4a05      	ldr	r2, [pc, #20]	; (80028fc <LCD_IO_ReadCmd8MultipleData24to16+0x4ec>)
 80028e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ec:	6013      	str	r3, [r2, #0]
}
 80028ee:	bf00      	nop
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	58020c00 	.word	0x58020c00
 80028fc:	58021800 	.word	0x58021800
 8002900:	58021000 	.word	0x58021000
 8002904:	58020000 	.word	0x58020000
 8002908:	fffff800 	.word	0xfffff800
 800290c:	58020400 	.word	0x58020400

08002910 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <BSP_LCD_GetXSize+0x14>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	4798      	blx	r3
 800291c:	4603      	mov	r3, r0
}
 800291e:	4618      	mov	r0, r3
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	2400006c 	.word	0x2400006c

08002928 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <BSP_LCD_GetYSize+0x14>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	4798      	blx	r3
 8002934:	4603      	mov	r3, r0
}
 8002936:	4618      	mov	r0, r3
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	2400006c 	.word	0x2400006c

08002940 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8002940:	b5b0      	push	{r4, r5, r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af02      	add	r7, sp, #8
 8002946:	4603      	mov	r3, r0
 8002948:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 800294a:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <BSP_LCD_Clear+0x38>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002950:	f7ff ffde 	bl	8002910 <BSP_LCD_GetXSize>
 8002954:	4603      	mov	r3, r0
 8002956:	461d      	mov	r5, r3
 8002958:	f7ff ffe6 	bl	8002928 <BSP_LCD_GetYSize>
 800295c:	4603      	mov	r3, r0
 800295e:	461a      	mov	r2, r3
 8002960:	88fb      	ldrh	r3, [r7, #6]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	4613      	mov	r3, r2
 8002966:	462a      	mov	r2, r5
 8002968:	2100      	movs	r1, #0
 800296a:	2000      	movs	r0, #0
 800296c:	47a0      	blx	r4
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bdb0      	pop	{r4, r5, r7, pc}
 8002976:	bf00      	nop
 8002978:	2400006c 	.word	0x2400006c

0800297c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	80fb      	strh	r3, [r7, #6]
 8002986:	460b      	mov	r3, r1
 8002988:	80bb      	strh	r3, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <BSP_LCD_DrawPixel+0x34>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d006      	beq.n	80029a6 <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <BSP_LCD_DrawPixel+0x34>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	887a      	ldrh	r2, [r7, #2]
 80029a0:	88b9      	ldrh	r1, [r7, #4]
 80029a2:	88f8      	ldrh	r0, [r7, #6]
 80029a4:	4798      	blx	r3
  }
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	2400006c 	.word	0x2400006c

080029b4 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	80fb      	strh	r3, [r7, #6]
 80029be:	460b      	mov	r3, r1
 80029c0:	80bb      	strh	r3, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 80029ca:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <BSP_LCD_DrawHLine+0x6c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <BSP_LCD_DrawHLine+0x6c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6a1c      	ldr	r4, [r3, #32]
 80029da:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <BSP_LCD_DrawHLine+0x70>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	b298      	uxth	r0, r3
 80029e0:	887b      	ldrh	r3, [r7, #2]
 80029e2:	88ba      	ldrh	r2, [r7, #4]
 80029e4:	88f9      	ldrh	r1, [r7, #6]
 80029e6:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 80029e8:	e015      	b.n	8002a16 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	e00e      	b.n	8002a0e <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	4413      	add	r3, r2
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <BSP_LCD_DrawHLine+0x70>)
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	b292      	uxth	r2, r2
 8002a00:	88b9      	ldrh	r1, [r7, #4]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff ffba 	bl	800297c <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	887b      	ldrh	r3, [r7, #2]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d3ec      	bcc.n	80029f0 <BSP_LCD_DrawHLine+0x3c>
}
 8002a16:	bf00      	nop
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd90      	pop	{r4, r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	2400006c 	.word	0x2400006c
 8002a24:	240000b0 	.word	0x240000b0

08002a28 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002a28:	b590      	push	{r4, r7, lr}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	80fb      	strh	r3, [r7, #6]
 8002a32:	460b      	mov	r3, r1
 8002a34:	80bb      	strh	r3, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <BSP_LCD_DrawVLine+0x6c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002a48:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <BSP_LCD_DrawVLine+0x6c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <BSP_LCD_DrawVLine+0x70>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	b298      	uxth	r0, r3
 8002a54:	887b      	ldrh	r3, [r7, #2]
 8002a56:	88ba      	ldrh	r2, [r7, #4]
 8002a58:	88f9      	ldrh	r1, [r7, #6]
 8002a5a:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 8002a5c:	e015      	b.n	8002a8a <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	e00e      	b.n	8002a82 <BSP_LCD_DrawVLine+0x5a>
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	88bb      	ldrh	r3, [r7, #4]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	b299      	uxth	r1, r3
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <BSP_LCD_DrawVLine+0x70>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff ff80 	bl	800297c <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	887b      	ldrh	r3, [r7, #2]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d3ec      	bcc.n	8002a64 <BSP_LCD_DrawVLine+0x3c>
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd90      	pop	{r4, r7, pc}
 8002a92:	bf00      	nop
 8002a94:	2400006c 	.word	0x2400006c
 8002a98:	240000b0 	.word	0x240000b0

08002a9c <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	4608      	mov	r0, r1
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4623      	mov	r3, r4
 8002aac:	80fb      	strh	r3, [r7, #6]
 8002aae:	4603      	mov	r3, r0
 8002ab0:	80bb      	strh	r3, [r7, #4]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	807b      	strh	r3, [r7, #2]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	88b9      	ldrh	r1, [r7, #4]
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff77 	bl	80029b4 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos + Height - 1), Width);
 8002ac6:	88ba      	ldrh	r2, [r7, #4]
 8002ac8:	883b      	ldrh	r3, [r7, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b299      	uxth	r1, r3
 8002ad2:	887a      	ldrh	r2, [r7, #2]
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff6c 	bl	80029b4 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8002adc:	883a      	ldrh	r2, [r7, #0]
 8002ade:	88b9      	ldrh	r1, [r7, #4]
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff ffa0 	bl	8002a28 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width - 1), Ypos, Height);
 8002ae8:	88fa      	ldrh	r2, [r7, #6]
 8002aea:	887b      	ldrh	r3, [r7, #2]
 8002aec:	4413      	add	r3, r2
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	883a      	ldrh	r2, [r7, #0]
 8002af6:	88b9      	ldrh	r1, [r7, #4]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff95 	bl	8002a28 <BSP_LCD_DrawVLine>
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd90      	pop	{r4, r7, pc}
	...

08002b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	; 0x28
 8002b0c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b0e:	f000 ff67 	bl	80039e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b12:	f000 fa21 	bl	8002f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b16:	f000 fb11 	bl	800313c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002b1a:	f000 fabb 	bl	8003094 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8002b1e:	f000 fb05 	bl	800312c <MX_USB_OTG_HS_USB_Init>
  MX_TIM17_Init();
 8002b22:	f000 fa8f 	bl	8003044 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim17);
  ili9486_Init();
 8002b26:	f7fd fda3 	bl	8000670 <ili9486_Init>
  ili9486_DisplayOn();
 8002b2a:	f7fd fd61 	bl	80005f0 <ili9486_DisplayOn>

  //BSP_LCD_Init();
  //BSP_LCD_DisplayOn();

  baaa[0] = ili9486_GetLcdPixelWidth();
 8002b2e:	f7fd fd73 	bl	8000618 <ili9486_GetLcdPixelWidth>
 8002b32:	4603      	mov	r3, r0
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	4b39      	ldr	r3, [pc, #228]	; (8002c1c <main+0x114>)
 8002b38:	801a      	strh	r2, [r3, #0]
  baaa[1] = ili9486_GetLcdPixelHeight();
 8002b3a:	f7fd fd76 	bl	800062a <ili9486_GetLcdPixelHeight>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	4b36      	ldr	r3, [pc, #216]	; (8002c1c <main+0x114>)
 8002b44:	805a      	strh	r2, [r3, #2]
  baaa[2] = ili9486_ReadID();
 8002b46:	f7fd fd79 	bl	800063c <ili9486_ReadID>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	4b33      	ldr	r3, [pc, #204]	; (8002c1c <main+0x114>)
 8002b50:	809a      	strh	r2, [r3, #4]
  ili9486_FillRect(0, 0, 480, 320, 0x0000);
 8002b52:	2300      	movs	r3, #0
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b5a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002b5e:	2100      	movs	r1, #0
 8002b60:	2000      	movs	r0, #0
 8002b62:	f7fd fff7 	bl	8000b54 <ili9486_FillRect>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GetTick() - timestamp_one >= 3000){
 8002b66:	f000 ffc1 	bl	8003aec <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	4b2c      	ldr	r3, [pc, #176]	; (8002c20 <main+0x118>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d908      	bls.n	8002b8c <main+0x84>
		  timestamp_one = HAL_GetTick();
 8002b7a:	f000 ffb7 	bl	8003aec <HAL_GetTick>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4a27      	ldr	r2, [pc, #156]	; (8002c20 <main+0x118>)
 8002b82:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002b84:	2102      	movs	r1, #2
 8002b86:	4827      	ldr	r0, [pc, #156]	; (8002c24 <main+0x11c>)
 8002b88:	f001 fab9 	bl	80040fe <HAL_GPIO_TogglePin>
	  }


	  if(HAL_GetTick() - timestamp_two >= 20){
 8002b8c:	f000 ffae 	bl	8003aec <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	4b25      	ldr	r3, [pc, #148]	; (8002c28 <main+0x120>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b13      	cmp	r3, #19
 8002b9a:	d908      	bls.n	8002bae <main+0xa6>
		  timestamp_two = HAL_GetTick();
 8002b9c:	f000 ffa6 	bl	8003aec <HAL_GetTick>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4a21      	ldr	r2, [pc, #132]	; (8002c28 <main+0x120>)
 8002ba4:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	4820      	ldr	r0, [pc, #128]	; (8002c2c <main+0x124>)
 8002baa:	f001 faa8 	bl	80040fe <HAL_GPIO_TogglePin>
	  }

	  if(flag_blue == 4){
 8002bae:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <main+0x128>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d10c      	bne.n	8002bd0 <main+0xc8>
		  BSP_LCD_Clear(0xff00);
 8002bb6:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8002bba:	f7ff fec1 	bl	8002940 <BSP_LCD_Clear>
		  BSP_LCD_DrawRect(50, 50, 50, 50);
 8002bbe:	2332      	movs	r3, #50	; 0x32
 8002bc0:	2232      	movs	r2, #50	; 0x32
 8002bc2:	2132      	movs	r1, #50	; 0x32
 8002bc4:	2032      	movs	r0, #50	; 0x32
 8002bc6:	f7ff ff69 	bl	8002a9c <BSP_LCD_DrawRect>
		  flag_blue = 0;
 8002bca:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <main+0x128>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_blue == 3){
 8002bd0:	4b17      	ldr	r3, [pc, #92]	; (8002c30 <main+0x128>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	f040 8145 	bne.w	8002e64 <main+0x35c>
	  		  ili9486_FillRect(0, 0, 480, 320, 0x0000);
 8002bda:	2300      	movs	r3, #0
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002be2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002be6:	2100      	movs	r1, #0
 8002be8:	2000      	movs	r0, #0
 8002bea:	f7fd ffb3 	bl	8000b54 <ili9486_FillRect>
	  		  ili9486_DrawRGBImage(50, 100, 128, 128, (uint16_t*)image_data_ImageoftestN2);
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <main+0x12c>)
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	2280      	movs	r2, #128	; 0x80
 8002bf6:	2164      	movs	r1, #100	; 0x64
 8002bf8:	2032      	movs	r0, #50	; 0x32
 8002bfa:	f7fe f86d 	bl	8000cd8 <ili9486_DrawRGBImage>
	  		  ili9486_DrawRGBImage(300, 100, 128, 90, (uint16_t*)image_data_owlflood);
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <main+0x130>)
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	235a      	movs	r3, #90	; 0x5a
 8002c04:	2280      	movs	r2, #128	; 0x80
 8002c06:	2164      	movs	r1, #100	; 0x64
 8002c08:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002c0c:	f7fe f864 	bl	8000cd8 <ili9486_DrawRGBImage>


	  		  for(int i = 0; i < 40; i = i + 2){
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	e025      	b.n	8002c62 <main+0x15a>
	  			  for(int j = 0; j < 60; j = j + 4)
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	e01c      	b.n	8002c56 <main+0x14e>
 8002c1c:	24000198 	.word	0x24000198
 8002c20:	240001d0 	.word	0x240001d0
 8002c24:	58021000 	.word	0x58021000
 8002c28:	240001d4 	.word	0x240001d4
 8002c2c:	58020400 	.word	0x58020400
 8002c30:	240001a3 	.word	0x240001a3
 8002c34:	0800be30 	.word	0x0800be30
 8002c38:	08013e30 	.word	0x08013e30
	  			ili9486_WritePixel(210 + i, 80 + j, cl_GREEN);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f103 00d2 	add.w	r0, r3, #210	; 0xd2
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	3350      	adds	r3, #80	; 0x50
 8002c46:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f7fd fdca 	bl	80007e4 <ili9486_WritePixel>
	  			  for(int j = 0; j < 60; j = j + 4)
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	3304      	adds	r3, #4
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	2b3b      	cmp	r3, #59	; 0x3b
 8002c5a:	ddef      	ble.n	8002c3c <main+0x134>
	  		  for(int i = 0; i < 40; i = i + 2){
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	3302      	adds	r3, #2
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b27      	cmp	r3, #39	; 0x27
 8002c66:	ddd6      	ble.n	8002c16 <main+0x10e>
	  		  }

	  		  ili9486_WriteChar(20, 50, "E", Font8, cl_RED, cl_GREEN);
 8002c68:	4bab      	ldr	r3, [pc, #684]	; (8002f18 <main+0x410>)
 8002c6a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002c6e:	9202      	str	r2, [sp, #8]
 8002c70:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002c74:	9201      	str	r2, [sp, #4]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	9200      	str	r2, [sp, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4aa7      	ldr	r2, [pc, #668]	; (8002f1c <main+0x414>)
 8002c7e:	2132      	movs	r1, #50	; 0x32
 8002c80:	2014      	movs	r0, #20
 8002c82:	f7fe f87d 	bl	8000d80 <ili9486_WriteChar>
			  ili9486_WriteChar(50, 50, "E", Font12, cl_WHITE, cl_BLACK);
 8002c86:	4ba6      	ldr	r3, [pc, #664]	; (8002f20 <main+0x418>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	9202      	str	r2, [sp, #8]
 8002c8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c90:	9201      	str	r2, [sp, #4]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	9200      	str	r2, [sp, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4aa0      	ldr	r2, [pc, #640]	; (8002f1c <main+0x414>)
 8002c9a:	2132      	movs	r1, #50	; 0x32
 8002c9c:	2032      	movs	r0, #50	; 0x32
 8002c9e:	f7fe f86f 	bl	8000d80 <ili9486_WriteChar>
			  ili9486_WriteChar(80, 50, "E", Font16, cl_BLUE, cl_CYAN);
 8002ca2:	4ba0      	ldr	r3, [pc, #640]	; (8002f24 <main+0x41c>)
 8002ca4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002ca8:	9202      	str	r2, [sp, #8]
 8002caa:	221f      	movs	r2, #31
 8002cac:	9201      	str	r2, [sp, #4]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	9200      	str	r2, [sp, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a99      	ldr	r2, [pc, #612]	; (8002f1c <main+0x414>)
 8002cb6:	2132      	movs	r1, #50	; 0x32
 8002cb8:	2050      	movs	r0, #80	; 0x50
 8002cba:	f7fe f861 	bl	8000d80 <ili9486_WriteChar>
			  ili9486_WriteChar(110, 50, "E", Font20, cl_WHITE, cl_RED);
 8002cbe:	4b9a      	ldr	r3, [pc, #616]	; (8002f28 <main+0x420>)
 8002cc0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002cc4:	9202      	str	r2, [sp, #8]
 8002cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cca:	9201      	str	r2, [sp, #4]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	9200      	str	r2, [sp, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a92      	ldr	r2, [pc, #584]	; (8002f1c <main+0x414>)
 8002cd4:	2132      	movs	r1, #50	; 0x32
 8002cd6:	206e      	movs	r0, #110	; 0x6e
 8002cd8:	f7fe f852 	bl	8000d80 <ili9486_WriteChar>
			  ili9486_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
 8002cdc:	4b93      	ldr	r3, [pc, #588]	; (8002f2c <main+0x424>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	9202      	str	r2, [sp, #8]
 8002ce2:	f64f 5220 	movw	r2, #64800	; 0xfd20
 8002ce6:	9201      	str	r2, [sp, #4]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	9200      	str	r2, [sp, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a8b      	ldr	r2, [pc, #556]	; (8002f1c <main+0x414>)
 8002cf0:	2132      	movs	r1, #50	; 0x32
 8002cf2:	208c      	movs	r0, #140	; 0x8c
 8002cf4:	f7fe f844 	bl	8000d80 <ili9486_WriteChar>

			  //ili9486_FillRect(198, 30, 2, 30, cl_YELLOW);
			  ili9486_DrawVLine(cl_YELLOW, 200, 40, 24);
 8002cf8:	2318      	movs	r3, #24
 8002cfa:	2228      	movs	r2, #40	; 0x28
 8002cfc:	21c8      	movs	r1, #200	; 0xc8
 8002cfe:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002d02:	f7fd fed0 	bl	8000aa6 <ili9486_DrawVLine>
			  ili9486_DrawVLine(cl_YELLOW, 225, 40, 24);
 8002d06:	2318      	movs	r3, #24
 8002d08:	2228      	movs	r2, #40	; 0x28
 8002d0a:	21e1      	movs	r1, #225	; 0xe1
 8002d0c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002d10:	f7fd fec9 	bl	8000aa6 <ili9486_DrawVLine>
			  //// Font24 @2664 E
			  ili_fonttest(200, 40, "A", Font24, cl_WHITE);
 8002d14:	4b85      	ldr	r3, [pc, #532]	; (8002f2c <main+0x424>)
 8002d16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d1a:	9201      	str	r2, [sp, #4]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	9200      	str	r2, [sp, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a83      	ldr	r2, [pc, #524]	; (8002f30 <main+0x428>)
 8002d24:	2128      	movs	r1, #40	; 0x28
 8002d26:	20c8      	movs	r0, #200	; 0xc8
 8002d28:	f000 fb7c 	bl	8003424 <ili_fonttest>
			  ili_fonttest(225, 40, "B", Font24, cl_WHITE);
 8002d2c:	4b7f      	ldr	r3, [pc, #508]	; (8002f2c <main+0x424>)
 8002d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d32:	9201      	str	r2, [sp, #4]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	9200      	str	r2, [sp, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a7e      	ldr	r2, [pc, #504]	; (8002f34 <main+0x42c>)
 8002d3c:	2128      	movs	r1, #40	; 0x28
 8002d3e:	20e1      	movs	r0, #225	; 0xe1
 8002d40:	f000 fb70 	bl	8003424 <ili_fonttest>
			  ili_fonttest(250, 40, "C", Font24, cl_WHITE);
 8002d44:	4b79      	ldr	r3, [pc, #484]	; (8002f2c <main+0x424>)
 8002d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d4a:	9201      	str	r2, [sp, #4]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	9200      	str	r2, [sp, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a79      	ldr	r2, [pc, #484]	; (8002f38 <main+0x430>)
 8002d54:	2128      	movs	r1, #40	; 0x28
 8002d56:	20fa      	movs	r0, #250	; 0xfa
 8002d58:	f000 fb64 	bl	8003424 <ili_fonttest>
			  ili_fonttest(275, 40, "D", Font24, cl_WHITE);
 8002d5c:	4b73      	ldr	r3, [pc, #460]	; (8002f2c <main+0x424>)
 8002d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d62:	9201      	str	r2, [sp, #4]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	9200      	str	r2, [sp, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a74      	ldr	r2, [pc, #464]	; (8002f3c <main+0x434>)
 8002d6c:	2128      	movs	r1, #40	; 0x28
 8002d6e:	f240 1013 	movw	r0, #275	; 0x113
 8002d72:	f000 fb57 	bl	8003424 <ili_fonttest>

			  ili_fonttest(300, 40, "A", Font8, cl_WHITE);
 8002d76:	4b68      	ldr	r3, [pc, #416]	; (8002f18 <main+0x410>)
 8002d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d7c:	9201      	str	r2, [sp, #4]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	9200      	str	r2, [sp, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a6a      	ldr	r2, [pc, #424]	; (8002f30 <main+0x428>)
 8002d86:	2128      	movs	r1, #40	; 0x28
 8002d88:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002d8c:	f000 fb4a 	bl	8003424 <ili_fonttest>
			  ili_fonttest(325, 40, "B", Font12, cl_WHITE);
 8002d90:	4b63      	ldr	r3, [pc, #396]	; (8002f20 <main+0x418>)
 8002d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d96:	9201      	str	r2, [sp, #4]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	9200      	str	r2, [sp, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a65      	ldr	r2, [pc, #404]	; (8002f34 <main+0x42c>)
 8002da0:	2128      	movs	r1, #40	; 0x28
 8002da2:	f240 1045 	movw	r0, #325	; 0x145
 8002da6:	f000 fb3d 	bl	8003424 <ili_fonttest>
			  ili_fonttest(350, 40, "C", Font16, cl_WHITE);
 8002daa:	4b5e      	ldr	r3, [pc, #376]	; (8002f24 <main+0x41c>)
 8002dac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002db0:	9201      	str	r2, [sp, #4]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	9200      	str	r2, [sp, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a5f      	ldr	r2, [pc, #380]	; (8002f38 <main+0x430>)
 8002dba:	2128      	movs	r1, #40	; 0x28
 8002dbc:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8002dc0:	f000 fb30 	bl	8003424 <ili_fonttest>
			  ili_fonttest(375, 40, "D", Font20, cl_WHITE);
 8002dc4:	4b58      	ldr	r3, [pc, #352]	; (8002f28 <main+0x420>)
 8002dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dca:	9201      	str	r2, [sp, #4]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	9200      	str	r2, [sp, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a5a      	ldr	r2, [pc, #360]	; (8002f3c <main+0x434>)
 8002dd4:	2128      	movs	r1, #40	; 0x28
 8002dd6:	f240 1077 	movw	r0, #375	; 0x177
 8002dda:	f000 fb23 	bl	8003424 <ili_fonttest>

			  ili9486_WriteString(20, 300, "KaleAR Terra", Font20, cl_WHITE, cl_BLACK);
 8002dde:	4b52      	ldr	r3, [pc, #328]	; (8002f28 <main+0x420>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	9202      	str	r2, [sp, #8]
 8002de4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002de8:	9201      	str	r2, [sp, #4]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	9200      	str	r2, [sp, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a53      	ldr	r2, [pc, #332]	; (8002f40 <main+0x438>)
 8002df2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002df6:	2014      	movs	r0, #20
 8002df8:	f7fe f85c 	bl	8000eb4 <ili9486_WriteString>
			  ili_texttest(200, 200, "Helios Terra Renai Kaliber Barx Maxon 129035"
 8002dfc:	4b4a      	ldr	r3, [pc, #296]	; (8002f28 <main+0x420>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	9202      	str	r2, [sp, #8]
 8002e02:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002e06:	9201      	str	r2, [sp, #4]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	9200      	str	r2, [sp, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a4d      	ldr	r2, [pc, #308]	; (8002f44 <main+0x43c>)
 8002e10:	21c8      	movs	r1, #200	; 0xc8
 8002e12:	20c8      	movs	r0, #200	; 0xc8
 8002e14:	f000 fbb6 	bl	8003584 <ili_texttest>
					  " __ --== + &&6.. [ ggg ]??? Rhivalia DIAR Barvarrian"
					  " vicar nexus iICCTVS \ / %%% $ *(!@#$%^&*)_{} "
					  , Font20, cl_GREEN, cl_BLACK);
			  char* aa = "A";
 8002e18:	4b45      	ldr	r3, [pc, #276]	; (8002f30 <main+0x428>)
 8002e1a:	60fb      	str	r3, [r7, #12]
			  txtbuf[14] = *aa;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	781a      	ldrb	r2, [r3, #0]
 8002e20:	4b49      	ldr	r3, [pc, #292]	; (8002f48 <main+0x440>)
 8002e22:	739a      	strb	r2, [r3, #14]

			  ili_fonttest(400, 30, aa, Font24, cl_WHITE); // A  <- output
 8002e24:	4b41      	ldr	r3, [pc, #260]	; (8002f2c <main+0x424>)
 8002e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e2a:	9201      	str	r2, [sp, #4]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	9200      	str	r2, [sp, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	211e      	movs	r1, #30
 8002e36:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002e3a:	f000 faf3 	bl	8003424 <ili_fonttest>
			  ili_fonttest(420, 30, *aa, Font24, cl_WHITE); // N  <- output
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	4619      	mov	r1, r3
 8002e44:	4b39      	ldr	r3, [pc, #228]	; (8002f2c <main+0x424>)
 8002e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e4a:	9201      	str	r2, [sp, #4]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	9200      	str	r2, [sp, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	460a      	mov	r2, r1
 8002e54:	211e      	movs	r1, #30
 8002e56:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8002e5a:	f000 fae3 	bl	8003424 <ili_fonttest>

	  		  flag_blue = 0; // comment this to forever loop
 8002e5e:	4b3b      	ldr	r3, [pc, #236]	; (8002f4c <main+0x444>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	701a      	strb	r2, [r3, #0]
	  	  }

	  if(flag_blue == 1){
 8002e64:	4b39      	ldr	r3, [pc, #228]	; (8002f4c <main+0x444>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d104      	bne.n	8002e76 <main+0x36e>
		  ili_screen_1();
 8002e6c:	f000 fa88 	bl	8003380 <ili_screen_1>
		  flag_blue = 0;
 8002e70:	4b36      	ldr	r3, [pc, #216]	; (8002f4c <main+0x444>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]

	  }

	  if(flag_blue == 2){
 8002e76:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <main+0x444>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	f47f ae73 	bne.w	8002b66 <main+0x5e>
		  //// Running Box ////
		  if(ff == 1){
 8002e80:	4b33      	ldr	r3, [pc, #204]	; (8002f50 <main+0x448>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d10d      	bne.n	8002ea4 <main+0x39c>
			  ili9486_FillRect(0, 0, 480, 320, 0xF792); // screen
 8002e88:	f24f 7392 	movw	r3, #63378	; 0xf792
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002e92:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002e96:	2100      	movs	r1, #0
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f7fd fe5b 	bl	8000b54 <ili9486_FillRect>
			  ff = 0;
 8002e9e:	4b2c      	ldr	r3, [pc, #176]	; (8002f50 <main+0x448>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
		  }
		  int ratte = 1;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	60bb      	str	r3, [r7, #8]
		  int sizo = 30;
 8002ea8:	231e      	movs	r3, #30
 8002eaa:	607b      	str	r3, [r7, #4]
		  int offs = 140;
 8002eac:	238c      	movs	r3, #140	; 0x8c
 8002eae:	603b      	str	r3, [r7, #0]
		  static uint16_t xsh = 0;
		  ili9486_FillRect(xsh, offs, ratte ,sizo, 0xF792);
 8002eb0:	4b28      	ldr	r3, [pc, #160]	; (8002f54 <main+0x44c>)
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f24f 7392 	movw	r3, #63378	; 0xf792
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	6839      	ldr	r1, [r7, #0]
 8002ec2:	f7fd fe47 	bl	8000b54 <ili9486_FillRect>
		  xsh += ratte;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	4b22      	ldr	r3, [pc, #136]	; (8002f54 <main+0x44c>)
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	4413      	add	r3, r2
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <main+0x44c>)
 8002ed4:	801a      	strh	r2, [r3, #0]
		  ili9486_FillRect(xsh, offs, sizo, sizo, 0x0410); //// box
 8002ed6:	4b1f      	ldr	r3, [pc, #124]	; (8002f54 <main+0x44c>)
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6839      	ldr	r1, [r7, #0]
 8002ee8:	f7fd fe34 	bl	8000b54 <ili9486_FillRect>
		  if(xsh >= 480){ // clear
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <main+0x44c>)
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002ef4:	f4ff ae37 	bcc.w	8002b66 <main+0x5e>
			  ili9486_FillRect(xsh, offs, sizo, sizo, 0xF792);
 8002ef8:	4b16      	ldr	r3, [pc, #88]	; (8002f54 <main+0x44c>)
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f24f 7392 	movw	r3, #63378	; 0xf792
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6839      	ldr	r1, [r7, #0]
 8002f0a:	f7fd fe23 	bl	8000b54 <ili9486_FillRect>
			  xsh = 0;
 8002f0e:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <main+0x44c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	801a      	strh	r2, [r3, #0]
	  if(HAL_GetTick() - timestamp_one >= 3000){
 8002f14:	e627      	b.n	8002b66 <main+0x5e>
 8002f16:	bf00      	nop
 8002f18:	24000020 	.word	0x24000020
 8002f1c:	08008058 	.word	0x08008058
 8002f20:	24000000 	.word	0x24000000
 8002f24:	24000008 	.word	0x24000008
 8002f28:	24000010 	.word	0x24000010
 8002f2c:	24000018 	.word	0x24000018
 8002f30:	0800805c 	.word	0x0800805c
 8002f34:	08008060 	.word	0x08008060
 8002f38:	08008064 	.word	0x08008064
 8002f3c:	08008068 	.word	0x08008068
 8002f40:	0800806c 	.word	0x0800806c
 8002f44:	0800807c 	.word	0x0800807c
 8002f48:	240001bc 	.word	0x240001bc
 8002f4c:	240001a3 	.word	0x240001a3
 8002f50:	240001a4 	.word	0x240001a4
 8002f54:	240001e0 	.word	0x240001e0

08002f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b09c      	sub	sp, #112	; 0x70
 8002f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f62:	224c      	movs	r2, #76	; 0x4c
 8002f64:	2100      	movs	r1, #0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f005 f804 	bl	8007f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f6c:	1d3b      	adds	r3, r7, #4
 8002f6e:	2220      	movs	r2, #32
 8002f70:	2100      	movs	r1, #0
 8002f72:	4618      	mov	r0, r3
 8002f74:	f004 fffe 	bl	8007f74 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8002f78:	4b30      	ldr	r3, [pc, #192]	; (800303c <SystemClock_Config+0xe4>)
 8002f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002f82:	2004      	movs	r0, #4
 8002f84:	f001 f8f0 	bl	8004168 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002f88:	2300      	movs	r3, #0
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	4b2c      	ldr	r3, [pc, #176]	; (8003040 <SystemClock_Config+0xe8>)
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	4a2b      	ldr	r2, [pc, #172]	; (8003040 <SystemClock_Config+0xe8>)
 8002f92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f96:	6193      	str	r3, [r2, #24]
 8002f98:	4b29      	ldr	r3, [pc, #164]	; (8003040 <SystemClock_Config+0xe8>)
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fa0:	603b      	str	r3, [r7, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002fa4:	bf00      	nop
 8002fa6:	4b26      	ldr	r3, [pc, #152]	; (8003040 <SystemClock_Config+0xe8>)
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb2:	d1f8      	bne.n	8002fa6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002fb4:	2321      	movs	r3, #33	; 0x21
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002fb8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8002fce:	2346      	movs	r3, #70	; 0x46
 8002fd0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002fd6:	2304      	movs	r3, #4
 8002fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002fde:	230c      	movs	r3, #12
 8002fe0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f001 f914 	bl	800421c <HAL_RCC_OscConfig>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002ffa:	f000 fb65 	bl	80036c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ffe:	233f      	movs	r3, #63	; 0x3f
 8003000:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003002:	2303      	movs	r3, #3
 8003004:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800300e:	2340      	movs	r3, #64	; 0x40
 8003010:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003012:	2340      	movs	r3, #64	; 0x40
 8003014:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800301a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800301c:	2340      	movs	r3, #64	; 0x40
 800301e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003020:	1d3b      	adds	r3, r7, #4
 8003022:	2107      	movs	r1, #7
 8003024:	4618      	mov	r0, r3
 8003026:	f001 fcfd 	bl	8004a24 <HAL_RCC_ClockConfig>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8003030:	f000 fb4a 	bl	80036c8 <Error_Handler>
  }
}
 8003034:	bf00      	nop
 8003036:	3770      	adds	r7, #112	; 0x70
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	58024400 	.word	0x58024400
 8003040:	58024800 	.word	0x58024800

08003044 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003048:	4b10      	ldr	r3, [pc, #64]	; (800308c <MX_TIM17_Init+0x48>)
 800304a:	4a11      	ldr	r2, [pc, #68]	; (8003090 <MX_TIM17_Init+0x4c>)
 800304c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 279;
 800304e:	4b0f      	ldr	r3, [pc, #60]	; (800308c <MX_TIM17_Init+0x48>)
 8003050:	f240 1217 	movw	r2, #279	; 0x117
 8003054:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <MX_TIM17_Init+0x48>)
 8003058:	2200      	movs	r2, #0
 800305a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <MX_TIM17_Init+0x48>)
 800305e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003062:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003064:	4b09      	ldr	r3, [pc, #36]	; (800308c <MX_TIM17_Init+0x48>)
 8003066:	2200      	movs	r2, #0
 8003068:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800306a:	4b08      	ldr	r3, [pc, #32]	; (800308c <MX_TIM17_Init+0x48>)
 800306c:	2200      	movs	r2, #0
 800306e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <MX_TIM17_Init+0x48>)
 8003072:	2200      	movs	r2, #0
 8003074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003076:	4805      	ldr	r0, [pc, #20]	; (800308c <MX_TIM17_Init+0x48>)
 8003078:	f003 fb8e 	bl	8006798 <HAL_TIM_Base_Init>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8003082:	f000 fb21 	bl	80036c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	240000bc 	.word	0x240000bc
 8003090:	40014800 	.word	0x40014800

08003094 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003098:	4b22      	ldr	r3, [pc, #136]	; (8003124 <MX_USART3_UART_Init+0x90>)
 800309a:	4a23      	ldr	r2, [pc, #140]	; (8003128 <MX_USART3_UART_Init+0x94>)
 800309c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800309e:	4b21      	ldr	r3, [pc, #132]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030a6:	4b1f      	ldr	r3, [pc, #124]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030ac:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030b2:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030b8:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030ba:	220c      	movs	r2, #12
 80030bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030be:	4b19      	ldr	r3, [pc, #100]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030c4:	4b17      	ldr	r3, [pc, #92]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030ca:	4b16      	ldr	r3, [pc, #88]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030d0:	4b14      	ldr	r3, [pc, #80]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030d6:	4b13      	ldr	r3, [pc, #76]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030d8:	2200      	movs	r2, #0
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030dc:	4811      	ldr	r0, [pc, #68]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030de:	f003 fdb1 	bl	8006c44 <HAL_UART_Init>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80030e8:	f000 faee 	bl	80036c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030ec:	2100      	movs	r1, #0
 80030ee:	480d      	ldr	r0, [pc, #52]	; (8003124 <MX_USART3_UART_Init+0x90>)
 80030f0:	f004 fe52 	bl	8007d98 <HAL_UARTEx_SetTxFifoThreshold>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80030fa:	f000 fae5 	bl	80036c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030fe:	2100      	movs	r1, #0
 8003100:	4808      	ldr	r0, [pc, #32]	; (8003124 <MX_USART3_UART_Init+0x90>)
 8003102:	f004 fe87 	bl	8007e14 <HAL_UARTEx_SetRxFifoThreshold>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800310c:	f000 fadc 	bl	80036c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003110:	4804      	ldr	r0, [pc, #16]	; (8003124 <MX_USART3_UART_Init+0x90>)
 8003112:	f004 fe08 	bl	8007d26 <HAL_UARTEx_DisableFifoMode>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800311c:	f000 fad4 	bl	80036c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003120:	bf00      	nop
 8003122:	bd80      	pop	{r7, pc}
 8003124:	24000108 	.word	0x24000108
 8003128:	40004800 	.word	0x40004800

0800312c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08e      	sub	sp, #56	; 0x38
 8003140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	609a      	str	r2, [r3, #8]
 800314e:	60da      	str	r2, [r3, #12]
 8003150:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003152:	4b84      	ldr	r3, [pc, #528]	; (8003364 <MX_GPIO_Init+0x228>)
 8003154:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003158:	4a82      	ldr	r2, [pc, #520]	; (8003364 <MX_GPIO_Init+0x228>)
 800315a:	f043 0304 	orr.w	r3, r3, #4
 800315e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003162:	4b80      	ldr	r3, [pc, #512]	; (8003364 <MX_GPIO_Init+0x228>)
 8003164:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	623b      	str	r3, [r7, #32]
 800316e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003170:	4b7c      	ldr	r3, [pc, #496]	; (8003364 <MX_GPIO_Init+0x228>)
 8003172:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003176:	4a7b      	ldr	r2, [pc, #492]	; (8003364 <MX_GPIO_Init+0x228>)
 8003178:	f043 0320 	orr.w	r3, r3, #32
 800317c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003180:	4b78      	ldr	r3, [pc, #480]	; (8003364 <MX_GPIO_Init+0x228>)
 8003182:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800318e:	4b75      	ldr	r3, [pc, #468]	; (8003364 <MX_GPIO_Init+0x228>)
 8003190:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003194:	4a73      	ldr	r2, [pc, #460]	; (8003364 <MX_GPIO_Init+0x228>)
 8003196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800319a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800319e:	4b71      	ldr	r3, [pc, #452]	; (8003364 <MX_GPIO_Init+0x228>)
 80031a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80031a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ac:	4b6d      	ldr	r3, [pc, #436]	; (8003364 <MX_GPIO_Init+0x228>)
 80031ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80031b2:	4a6c      	ldr	r2, [pc, #432]	; (8003364 <MX_GPIO_Init+0x228>)
 80031b4:	f043 0302 	orr.w	r3, r3, #2
 80031b8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80031bc:	4b69      	ldr	r3, [pc, #420]	; (8003364 <MX_GPIO_Init+0x228>)
 80031be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ca:	4b66      	ldr	r3, [pc, #408]	; (8003364 <MX_GPIO_Init+0x228>)
 80031cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80031d0:	4a64      	ldr	r2, [pc, #400]	; (8003364 <MX_GPIO_Init+0x228>)
 80031d2:	f043 0308 	orr.w	r3, r3, #8
 80031d6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80031da:	4b62      	ldr	r3, [pc, #392]	; (8003364 <MX_GPIO_Init+0x228>)
 80031dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031e8:	4b5e      	ldr	r3, [pc, #376]	; (8003364 <MX_GPIO_Init+0x228>)
 80031ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80031ee:	4a5d      	ldr	r2, [pc, #372]	; (8003364 <MX_GPIO_Init+0x228>)
 80031f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031f4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80031f8:	4b5a      	ldr	r3, [pc, #360]	; (8003364 <MX_GPIO_Init+0x228>)
 80031fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80031fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003206:	4b57      	ldr	r3, [pc, #348]	; (8003364 <MX_GPIO_Init+0x228>)
 8003208:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800320c:	4a55      	ldr	r2, [pc, #340]	; (8003364 <MX_GPIO_Init+0x228>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003216:	4b53      	ldr	r3, [pc, #332]	; (8003364 <MX_GPIO_Init+0x228>)
 8003218:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003224:	4b4f      	ldr	r3, [pc, #316]	; (8003364 <MX_GPIO_Init+0x228>)
 8003226:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800322a:	4a4e      	ldr	r2, [pc, #312]	; (8003364 <MX_GPIO_Init+0x228>)
 800322c:	f043 0310 	orr.w	r3, r3, #16
 8003230:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003234:	4b4b      	ldr	r3, [pc, #300]	; (8003364 <MX_GPIO_Init+0x228>)
 8003236:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8003242:	2200      	movs	r2, #0
 8003244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003248:	4847      	ldr	r0, [pc, #284]	; (8003368 <MX_GPIO_Init+0x22c>)
 800324a:	f000 ff3f 	bl	80040cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800324e:	2200      	movs	r2, #0
 8003250:	f244 0101 	movw	r1, #16385	; 0x4001
 8003254:	4845      	ldr	r0, [pc, #276]	; (800336c <MX_GPIO_Init+0x230>)
 8003256:	f000 ff39 	bl	80040cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800325a:	2200      	movs	r2, #0
 800325c:	2102      	movs	r1, #2
 800325e:	4844      	ldr	r0, [pc, #272]	; (8003370 <MX_GPIO_Init+0x234>)
 8003260:	f000 ff34 	bl	80040cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003264:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800326a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003270:	2300      	movs	r3, #0
 8003272:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003278:	4619      	mov	r1, r3
 800327a:	483e      	ldr	r0, [pc, #248]	; (8003374 <MX_GPIO_Init+0x238>)
 800327c:	f000 fd76 	bl	8003d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8003280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003286:	2301      	movs	r3, #1
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328e:	2300      	movs	r3, #0
 8003290:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8003292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003296:	4619      	mov	r1, r3
 8003298:	4833      	ldr	r0, [pc, #204]	; (8003368 <MX_GPIO_Init+0x22c>)
 800329a:	f000 fd67 	bl	8003d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800329e:	f244 0301 	movw	r3, #16385	; 0x4001
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032a4:	2301      	movs	r3, #1
 80032a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ac:	2300      	movs	r3, #0
 80032ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032b4:	4619      	mov	r1, r3
 80032b6:	482d      	ldr	r0, [pc, #180]	; (800336c <MX_GPIO_Init+0x230>)
 80032b8:	f000 fd58 	bl	8003d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80032c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80032ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ce:	4619      	mov	r1, r3
 80032d0:	4829      	ldr	r0, [pc, #164]	; (8003378 <MX_GPIO_Init+0x23c>)
 80032d2:	f000 fd4b 	bl	8003d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80032d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032dc:	2300      	movs	r3, #0
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80032e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e8:	4619      	mov	r1, r3
 80032ea:	4824      	ldr	r0, [pc, #144]	; (800337c <MX_GPIO_Init+0x240>)
 80032ec:	f000 fd3e 	bl	8003d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80032f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f6:	2302      	movs	r3, #2
 80032f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fe:	2300      	movs	r3, #0
 8003300:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8003302:	230a      	movs	r3, #10
 8003304:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8003306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800330a:	4619      	mov	r1, r3
 800330c:	481b      	ldr	r0, [pc, #108]	; (800337c <MX_GPIO_Init+0x240>)
 800330e:	f000 fd2d 	bl	8003d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8003312:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003318:	2302      	movs	r3, #2
 800331a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003320:	2300      	movs	r3, #0
 8003322:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003328:	4619      	mov	r1, r3
 800332a:	4814      	ldr	r0, [pc, #80]	; (800337c <MX_GPIO_Init+0x240>)
 800332c:	f000 fd1e 	bl	8003d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003330:	2302      	movs	r3, #2
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003334:	2301      	movs	r3, #1
 8003336:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003338:	2300      	movs	r3, #0
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333c:	2300      	movs	r3, #0
 800333e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003344:	4619      	mov	r1, r3
 8003346:	480a      	ldr	r0, [pc, #40]	; (8003370 <MX_GPIO_Init+0x234>)
 8003348:	f000 fd10 	bl	8003d6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800334c:	2200      	movs	r2, #0
 800334e:	2100      	movs	r1, #0
 8003350:	2028      	movs	r0, #40	; 0x28
 8003352:	f000 fcd6 	bl	8003d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003356:	2028      	movs	r0, #40	; 0x28
 8003358:	f000 fced 	bl	8003d36 <HAL_NVIC_EnableIRQ>

}
 800335c:	bf00      	nop
 800335e:	3738      	adds	r7, #56	; 0x38
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	58024400 	.word	0x58024400
 8003368:	58021400 	.word	0x58021400
 800336c:	58020400 	.word	0x58020400
 8003370:	58021000 	.word	0x58021000
 8003374:	58020800 	.word	0x58020800
 8003378:	58021800 	.word	0x58021800
 800337c:	58020000 	.word	0x58020000

08003380 <ili_screen_1>:

/* USER CODE BEGIN 4 */
void ili_screen_1(){
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af02      	add	r7, sp, #8
	  ili9486_FillRect(0, 0, 480, 320, 0xffff);  // White BG
 8003386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003390:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003394:	2100      	movs	r1, #0
 8003396:	2000      	movs	r0, #0
 8003398:	f7fd fbdc 	bl	8000b54 <ili9486_FillRect>

	  ili9486_FillRect(30, 30, 100, 100, 0xF8E0); // Red
 800339c:	f64f 03e0 	movw	r3, #63712	; 0xf8e0
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	2364      	movs	r3, #100	; 0x64
 80033a4:	2264      	movs	r2, #100	; 0x64
 80033a6:	211e      	movs	r1, #30
 80033a8:	201e      	movs	r0, #30
 80033aa:	f7fd fbd3 	bl	8000b54 <ili9486_FillRect>
	  ili9486_FillRect(150, 30, 100, 100, 0x07E0); // Green RGB565
 80033ae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	2364      	movs	r3, #100	; 0x64
 80033b6:	2264      	movs	r2, #100	; 0x64
 80033b8:	211e      	movs	r1, #30
 80033ba:	2096      	movs	r0, #150	; 0x96
 80033bc:	f7fd fbca 	bl	8000b54 <ili9486_FillRect>
	  ili9486_FillRect(270, 30, 100, 100, 0x001F); // Blue
 80033c0:	231f      	movs	r3, #31
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	2364      	movs	r3, #100	; 0x64
 80033c6:	2264      	movs	r2, #100	; 0x64
 80033c8:	211e      	movs	r1, #30
 80033ca:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80033ce:	f7fd fbc1 	bl	8000b54 <ili9486_FillRect>

	  ili9486_FillRect(30, 160,  100, 100, cl_CYAN); // C0x07FF
 80033d2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	2364      	movs	r3, #100	; 0x64
 80033da:	2264      	movs	r2, #100	; 0x64
 80033dc:	21a0      	movs	r1, #160	; 0xa0
 80033de:	201e      	movs	r0, #30
 80033e0:	f7fd fbb8 	bl	8000b54 <ili9486_FillRect>
	  ili9486_FillRect(150, 160, 100, 100, cl_MAGENTA); // M 0xF81F
 80033e4:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	2364      	movs	r3, #100	; 0x64
 80033ec:	2264      	movs	r2, #100	; 0x64
 80033ee:	21a0      	movs	r1, #160	; 0xa0
 80033f0:	2096      	movs	r0, #150	; 0x96
 80033f2:	f7fd fbaf 	bl	8000b54 <ili9486_FillRect>
	  ili9486_FillRect(270, 160, 100, 100, cl_YELLOW); // Y0xFFE0
 80033f6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	2364      	movs	r3, #100	; 0x64
 80033fe:	2264      	movs	r2, #100	; 0x64
 8003400:	21a0      	movs	r1, #160	; 0xa0
 8003402:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003406:	f7fd fba5 	bl	8000b54 <ili9486_FillRect>
	  ili9486_FillRect(390, 30, 70, 230, cl_BLACK); // K
 800340a:	2300      	movs	r3, #0
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	23e6      	movs	r3, #230	; 0xe6
 8003410:	2246      	movs	r2, #70	; 0x46
 8003412:	211e      	movs	r1, #30
 8003414:	f44f 70c3 	mov.w	r0, #390	; 0x186
 8003418:	f7fd fb9c 	bl	8000b54 <ili9486_FillRect>
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <ili_fonttest>:

void ili_fonttest(uint16_t Xpo, uint16_t Ypo, char *chr,sFONT fonto, uint16_t RGB_Coder){
 8003424:	b082      	sub	sp, #8
 8003426:	b580      	push	{r7, lr}
 8003428:	b088      	sub	sp, #32
 800342a:	af00      	add	r7, sp, #0
 800342c:	60ba      	str	r2, [r7, #8]
 800342e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003430:	4603      	mov	r3, r0
 8003432:	81fb      	strh	r3, [r7, #14]
 8003434:	460b      	mov	r3, r1
 8003436:	81bb      	strh	r3, [r7, #12]

	rowbox = ceilf((float)(fonto.Width) / 8);
 8003438:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003442:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003446:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800344a:	eeb0 0a47 	vmov.f32	s0, s14
 800344e:	f004 fd99 	bl	8007f84 <ceilf>
 8003452:	eef0 7a40 	vmov.f32	s15, s0
 8003456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800345a:	edc7 7a01 	vstr	s15, [r7, #4]
 800345e:	793b      	ldrb	r3, [r7, #4]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	4b42      	ldr	r3, [pc, #264]	; (800356c <ili_fonttest+0x148>)
 8003464:	701a      	strb	r2, [r3, #0]
	//// choose MSB check pos for each font size
	cliff = 0x80 << (8 * (rowbox - 1));
 8003466:	4b41      	ldr	r3, [pc, #260]	; (800356c <ili_fonttest+0x148>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	3b01      	subs	r3, #1
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	2280      	movs	r2, #128	; 0x80
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	461a      	mov	r2, r3
 8003476:	4b3e      	ldr	r3, [pc, #248]	; (8003570 <ili_fonttest+0x14c>)
 8003478:	601a      	str	r2, [r3, #0]
	//rowbox = (fonto.Width / 8) + 1;

	for(int i = 0; i < fonto.Height; i++){
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	e068      	b.n	8003552 <ili_fonttest+0x12e>
		//b = fonto.table[((chr - 31) * fonto.Height * rowbox)+ (i*rowbox)];
		chpos = (int)(*chr) - 32;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b20      	subs	r3, #32
 8003488:	b29a      	uxth	r2, r3
 800348a:	4b3a      	ldr	r3, [pc, #232]	; (8003574 <ili_fonttest+0x150>)
 800348c:	801a      	strh	r2, [r3, #0]
		bfpos = ((int)(*chr) - 32) * fonto.Height * rowbox;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	3b20      	subs	r3, #32
 8003494:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8003496:	fb02 f303 	mul.w	r3, r2, r3
 800349a:	4a34      	ldr	r2, [pc, #208]	; (800356c <ili_fonttest+0x148>)
 800349c:	7812      	ldrb	r2, [r2, #0]
 800349e:	fb02 f303 	mul.w	r3, r2, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	4b34      	ldr	r3, [pc, #208]	; (8003578 <ili_fonttest+0x154>)
 80034a6:	601a      	str	r2, [r3, #0]

		hop = 0;
 80034a8:	4b34      	ldr	r3, [pc, #208]	; (800357c <ili_fonttest+0x158>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
		for(int k = 0; k < rowbox; k++){
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	e027      	b.n	8003504 <ili_fonttest+0xe0>
			//// Works
			buu32.b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 80034b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	7812      	ldrb	r2, [r2, #0]
 80034ba:	3a20      	subs	r2, #32
 80034bc:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80034be:	fb01 f202 	mul.w	r2, r1, r2
 80034c2:	492a      	ldr	r1, [pc, #168]	; (800356c <ili_fonttest+0x148>)
 80034c4:	7809      	ldrb	r1, [r1, #0]
 80034c6:	fb02 f101 	mul.w	r1, r2, r1
 80034ca:	4a28      	ldr	r2, [pc, #160]	; (800356c <ili_fonttest+0x148>)
 80034cc:	7812      	ldrb	r2, [r2, #0]
 80034ce:	4610      	mov	r0, r2
 80034d0:	69fa      	ldr	r2, [r7, #28]
 80034d2:	fb00 f202 	mul.w	r2, r0, r2
 80034d6:	4411      	add	r1, r2
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	440a      	add	r2, r1
 80034dc:	4413      	add	r3, r2
 80034de:	7819      	ldrb	r1, [r3, #0]
 80034e0:	4a27      	ldr	r2, [pc, #156]	; (8003580 <ili_fonttest+0x15c>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	4413      	add	r3, r2
 80034e6:	460a      	mov	r2, r1
 80034e8:	701a      	strb	r2, [r3, #0]
			hop = (hop << 8) + buu32.b8[k];
 80034ea:	4b24      	ldr	r3, [pc, #144]	; (800357c <ili_fonttest+0x158>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	4923      	ldr	r1, [pc, #140]	; (8003580 <ili_fonttest+0x15c>)
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	440a      	add	r2, r1
 80034f6:	7812      	ldrb	r2, [r2, #0]
 80034f8:	4413      	add	r3, r2
 80034fa:	4a20      	ldr	r2, [pc, #128]	; (800357c <ili_fonttest+0x158>)
 80034fc:	6013      	str	r3, [r2, #0]
		for(int k = 0; k < rowbox; k++){
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	3301      	adds	r3, #1
 8003502:	61bb      	str	r3, [r7, #24]
 8003504:	4b19      	ldr	r3, [pc, #100]	; (800356c <ili_fonttest+0x148>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	4293      	cmp	r3, r2
 800350e:	dbd1      	blt.n	80034b4 <ili_fonttest+0x90>
			//HAL_Delay(30);
			//// how to insert in union
			//buu32.b8[rowbox - k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
		}

		for(int j = 0; j < fonto.Width; j++){
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	e015      	b.n	8003542 <ili_fonttest+0x11e>
			////Works
			if((hop << j) & cliff){ // buu32.b32
 8003516:	4b19      	ldr	r3, [pc, #100]	; (800357c <ili_fonttest+0x158>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	409a      	lsls	r2, r3
 800351e:	4b14      	ldr	r3, [pc, #80]	; (8003570 <ili_fonttest+0x14c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4013      	ands	r3, r2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d009      	beq.n	800353c <ili_fonttest+0x118>

			//if((buu32.b32 << j) & cliff){ //
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8003528:	89fa      	ldrh	r2, [r7, #14]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	18d0      	adds	r0, r2, r3
 800352e:	89ba      	ldrh	r2, [r7, #12]
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	4413      	add	r3, r2
 8003534:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003536:	4619      	mov	r1, r3
 8003538:	f7fd f954 	bl	80007e4 <ili9486_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	3301      	adds	r3, #1
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003544:	461a      	mov	r2, r3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	4293      	cmp	r3, r2
 800354a:	dbe4      	blt.n	8003516 <ili_fonttest+0xf2>
	for(int i = 0; i < fonto.Height; i++){
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	3301      	adds	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003554:	461a      	mov	r2, r3
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	4293      	cmp	r3, r2
 800355a:	db91      	blt.n	8003480 <ili_fonttest+0x5c>
			}

		}
	}
}
 800355c:	bf00      	nop
 800355e:	bf00      	nop
 8003560:	3720      	adds	r7, #32
 8003562:	46bd      	mov	sp, r7
 8003564:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003568:	b002      	add	sp, #8
 800356a:	4770      	bx	lr
 800356c:	240001ac 	.word	0x240001ac
 8003570:	240001b8 	.word	0x240001b8
 8003574:	240001ae 	.word	0x240001ae
 8003578:	240001b0 	.word	0x240001b0
 800357c:	240001b4 	.word	0x240001b4
 8003580:	240001a8 	.word	0x240001a8

08003584 <ili_texttest>:

void ili_texttest(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8003584:	b082      	sub	sp, #8
 8003586:	b580      	push	{r7, lr}
 8003588:	b088      	sub	sp, #32
 800358a:	af04      	add	r7, sp, #16
 800358c:	603a      	str	r2, [r7, #0]
 800358e:	61fb      	str	r3, [r7, #28]
 8003590:	4603      	mov	r3, r0
 8003592:	80fb      	strh	r3, [r7, #6]
 8003594:	460b      	mov	r3, r1
 8003596:	80bb      	strh	r3, [r7, #4]

	uint16_t ili_heigh = ili9486_GetLcdPixelHeight();
 8003598:	f7fd f847 	bl	800062a <ili9486_GetLcdPixelHeight>
 800359c:	4603      	mov	r3, r0
 800359e:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9486_GetLcdPixelWidth();
 80035a0:	f7fd f83a 	bl	8000618 <ili9486_GetLcdPixelWidth>
 80035a4:	4603      	mov	r3, r0
 80035a6:	81bb      	strh	r3, [r7, #12]

	while(*strr){
 80035a8:	e037      	b.n	800361a <ili_texttest+0x96>

	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	8c3a      	ldrh	r2, [r7, #32]
 80035ae:	441a      	add	r2, r3
 80035b0:	89bb      	ldrh	r3, [r7, #12]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	db13      	blt.n	80035de <ili_texttest+0x5a>
			Xpo = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 80035ba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80035bc:	88bb      	ldrh	r3, [r7, #4]
 80035be:	4413      	add	r3, r2
 80035c0:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 80035c2:	88bb      	ldrh	r3, [r7, #4]
 80035c4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80035c6:	441a      	add	r2, r3
 80035c8:	89fb      	ldrh	r3, [r7, #14]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	da2a      	bge.n	8003624 <ili_texttest+0xa0>
				break;
			}

			if(*strr == ' ') {
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	d103      	bne.n	80035de <ili_texttest+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	3301      	adds	r3, #1
 80035da:	603b      	str	r3, [r7, #0]
				continue;
 80035dc:	e01d      	b.n	800361a <ili_texttest+0x96>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		static int nummm = 0;
		txtbuf[nummm] = *strr;
 80035de:	4b15      	ldr	r3, [pc, #84]	; (8003634 <ili_texttest+0xb0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	7811      	ldrb	r1, [r2, #0]
 80035e6:	4a14      	ldr	r2, [pc, #80]	; (8003638 <ili_texttest+0xb4>)
 80035e8:	54d1      	strb	r1, [r2, r3]
		ili9486_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 80035ea:	88f8      	ldrh	r0, [r7, #6]
 80035ec:	88b9      	ldrh	r1, [r7, #4]
 80035ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80035f2:	9202      	str	r2, [sp, #8]
 80035f4:	9301      	str	r3, [sp, #4]
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	f7fd fbbf 	bl	8000d80 <ili9486_WriteChar>
		Xpo += fonto.Width;
 8003602:	8c3a      	ldrh	r2, [r7, #32]
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	4413      	add	r3, r2
 8003608:	80fb      	strh	r3, [r7, #6]
		strr++; nummm++;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <ili_texttest+0xb0>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3301      	adds	r3, #1
 8003616:	4a07      	ldr	r2, [pc, #28]	; (8003634 <ili_texttest+0xb0>)
 8003618:	6013      	str	r3, [r2, #0]
	while(*strr){
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1c3      	bne.n	80035aa <ili_texttest+0x26>
	}
}
 8003622:	e000      	b.n	8003626 <ili_texttest+0xa2>
				break;
 8003624:	bf00      	nop
}
 8003626:	bf00      	nop
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003630:	b002      	add	sp, #8
 8003632:	4770      	bx	lr
 8003634:	240001e4 	.word	0x240001e4
 8003638:	240001bc 	.word	0x240001bc

0800363c <HAL_GPIO_EXTI_Callback>:

uint64_t micros()
{return _micros + htim17.Instance->CNT;}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800364c:	d113      	bne.n	8003676 <HAL_GPIO_EXTI_Callback+0x3a>
		bluecounter++;
 800364e:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <HAL_GPIO_EXTI_Callback+0x48>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	3301      	adds	r3, #1
 8003654:	b2da      	uxtb	r2, r3
 8003656:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_GPIO_EXTI_Callback+0x48>)
 8003658:	701a      	strb	r2, [r3, #0]
		bluecounter%=4;
 800365a:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <HAL_GPIO_EXTI_Callback+0x48>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	b2da      	uxtb	r2, r3
 8003664:	4b07      	ldr	r3, [pc, #28]	; (8003684 <HAL_GPIO_EXTI_Callback+0x48>)
 8003666:	701a      	strb	r2, [r3, #0]
		flag_blue = bluecounter;
 8003668:	4b06      	ldr	r3, [pc, #24]	; (8003684 <HAL_GPIO_EXTI_Callback+0x48>)
 800366a:	781a      	ldrb	r2, [r3, #0]
 800366c:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_GPIO_EXTI_Callback+0x4c>)
 800366e:	701a      	strb	r2, [r3, #0]
		ff = 1;
 8003670:	4b06      	ldr	r3, [pc, #24]	; (800368c <HAL_GPIO_EXTI_Callback+0x50>)
 8003672:	2201      	movs	r2, #1
 8003674:	701a      	strb	r2, [r3, #0]
	}

}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	240001a2 	.word	0x240001a2
 8003688:	240001a3 	.word	0x240001a3
 800368c:	240001a4 	.word	0x240001a4

08003690 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003690:	b4b0      	push	{r4, r5, r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 if(htim == &htim17)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d10a      	bne.n	80036b6 <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 80036a0:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80036a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036aa:	1854      	adds	r4, r2, r1
 80036ac:	f143 0500 	adc.w	r5, r3, #0
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80036b2:	e9c3 4500 	strd	r4, r5, [r3]
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bcb0      	pop	{r4, r5, r7}
 80036be:	4770      	bx	lr
 80036c0:	240000bc 	.word	0x240000bc
 80036c4:	240001d8 	.word	0x240001d8

080036c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036cc:	b672      	cpsid	i
}
 80036ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036d0:	e7fe      	b.n	80036d0 <Error_Handler+0x8>
	...

080036d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <HAL_MspInit+0x30>)
 80036dc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80036e0:	4a08      	ldr	r2, [pc, #32]	; (8003704 <HAL_MspInit+0x30>)
 80036e2:	f043 0302 	orr.w	r3, r3, #2
 80036e6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80036ea:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_MspInit+0x30>)
 80036ec:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	607b      	str	r3, [r7, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	58024400 	.word	0x58024400

08003708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0e      	ldr	r2, [pc, #56]	; (8003750 <HAL_TIM_Base_MspInit+0x48>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d116      	bne.n	8003748 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800371a:	4b0e      	ldr	r3, [pc, #56]	; (8003754 <HAL_TIM_Base_MspInit+0x4c>)
 800371c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003720:	4a0c      	ldr	r2, [pc, #48]	; (8003754 <HAL_TIM_Base_MspInit+0x4c>)
 8003722:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003726:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800372a:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <HAL_TIM_Base_MspInit+0x4c>)
 800372c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003738:	2200      	movs	r2, #0
 800373a:	2100      	movs	r1, #0
 800373c:	2076      	movs	r0, #118	; 0x76
 800373e:	f000 fae0 	bl	8003d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003742:	2076      	movs	r0, #118	; 0x76
 8003744:	f000 faf7 	bl	8003d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40014800 	.word	0x40014800
 8003754:	58024400 	.word	0x58024400

08003758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b0b8      	sub	sp, #224	; 0xe0
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003760:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	60da      	str	r2, [r3, #12]
 800376e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003770:	f107 0314 	add.w	r3, r7, #20
 8003774:	22b8      	movs	r2, #184	; 0xb8
 8003776:	2100      	movs	r1, #0
 8003778:	4618      	mov	r0, r3
 800377a:	f004 fbfb 	bl	8007f74 <memset>
  if(huart->Instance==USART3)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a25      	ldr	r2, [pc, #148]	; (8003818 <HAL_UART_MspInit+0xc0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d142      	bne.n	800380e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003788:	2302      	movs	r3, #2
 800378a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800378c:	2300      	movs	r3, #0
 800378e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003792:	f107 0314 	add.w	r3, r7, #20
 8003796:	4618      	mov	r0, r3
 8003798:	f001 fcd0 	bl	800513c <HAL_RCCEx_PeriphCLKConfig>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80037a2:	f7ff ff91 	bl	80036c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80037a6:	4b1d      	ldr	r3, [pc, #116]	; (800381c <HAL_UART_MspInit+0xc4>)
 80037a8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80037ac:	4a1b      	ldr	r2, [pc, #108]	; (800381c <HAL_UART_MspInit+0xc4>)
 80037ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80037b6:	4b19      	ldr	r3, [pc, #100]	; (800381c <HAL_UART_MspInit+0xc4>)
 80037b8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80037bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037c4:	4b15      	ldr	r3, [pc, #84]	; (800381c <HAL_UART_MspInit+0xc4>)
 80037c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80037ca:	4a14      	ldr	r2, [pc, #80]	; (800381c <HAL_UART_MspInit+0xc4>)
 80037cc:	f043 0308 	orr.w	r3, r3, #8
 80037d0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80037d4:	4b11      	ldr	r3, [pc, #68]	; (800381c <HAL_UART_MspInit+0xc4>)
 80037d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80037e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ea:	2302      	movs	r3, #2
 80037ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f6:	2300      	movs	r3, #0
 80037f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80037fc:	2307      	movs	r3, #7
 80037fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003802:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003806:	4619      	mov	r1, r3
 8003808:	4805      	ldr	r0, [pc, #20]	; (8003820 <HAL_UART_MspInit+0xc8>)
 800380a:	f000 faaf 	bl	8003d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800380e:	bf00      	nop
 8003810:	37e0      	adds	r7, #224	; 0xe0
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40004800 	.word	0x40004800
 800381c:	58024400 	.word	0x58024400
 8003820:	58020c00 	.word	0x58020c00

08003824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003828:	e7fe      	b.n	8003828 <NMI_Handler+0x4>

0800382a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800382a:	b480      	push	{r7}
 800382c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800382e:	e7fe      	b.n	800382e <HardFault_Handler+0x4>

08003830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003834:	e7fe      	b.n	8003834 <MemManage_Handler+0x4>

08003836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003836:	b480      	push	{r7}
 8003838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800383a:	e7fe      	b.n	800383a <BusFault_Handler+0x4>

0800383c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003840:	e7fe      	b.n	8003840 <UsageFault_Handler+0x4>

08003842 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003842:	b480      	push	{r7}
 8003844:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003846:	bf00      	nop
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800385e:	b480      	push	{r7}
 8003860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003870:	f000 f928 	bl	8003ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003874:	bf00      	nop
 8003876:	bd80      	pop	{r7, pc}

08003878 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800387c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003880:	f000 fc57 	bl	8004132 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003884:	bf00      	nop
 8003886:	bd80      	pop	{r7, pc}

08003888 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800388c:	4802      	ldr	r0, [pc, #8]	; (8003898 <TIM17_IRQHandler+0x10>)
 800388e:	f002 ffda 	bl	8006846 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	240000bc 	.word	0x240000bc

0800389c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80038a0:	4b32      	ldr	r3, [pc, #200]	; (800396c <SystemInit+0xd0>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a6:	4a31      	ldr	r2, [pc, #196]	; (800396c <SystemInit+0xd0>)
 80038a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80038b0:	4b2f      	ldr	r3, [pc, #188]	; (8003970 <SystemInit+0xd4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d807      	bhi.n	80038cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80038bc:	4b2c      	ldr	r3, [pc, #176]	; (8003970 <SystemInit+0xd4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f023 030f 	bic.w	r3, r3, #15
 80038c4:	4a2a      	ldr	r2, [pc, #168]	; (8003970 <SystemInit+0xd4>)
 80038c6:	f043 0303 	orr.w	r3, r3, #3
 80038ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80038cc:	4b29      	ldr	r3, [pc, #164]	; (8003974 <SystemInit+0xd8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a28      	ldr	r2, [pc, #160]	; (8003974 <SystemInit+0xd8>)
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80038d8:	4b26      	ldr	r3, [pc, #152]	; (8003974 <SystemInit+0xd8>)
 80038da:	2200      	movs	r2, #0
 80038dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80038de:	4b25      	ldr	r3, [pc, #148]	; (8003974 <SystemInit+0xd8>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	4924      	ldr	r1, [pc, #144]	; (8003974 <SystemInit+0xd8>)
 80038e4:	4b24      	ldr	r3, [pc, #144]	; (8003978 <SystemInit+0xdc>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80038ea:	4b21      	ldr	r3, [pc, #132]	; (8003970 <SystemInit+0xd4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d007      	beq.n	8003906 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80038f6:	4b1e      	ldr	r3, [pc, #120]	; (8003970 <SystemInit+0xd4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f023 030f 	bic.w	r3, r3, #15
 80038fe:	4a1c      	ldr	r2, [pc, #112]	; (8003970 <SystemInit+0xd4>)
 8003900:	f043 0303 	orr.w	r3, r3, #3
 8003904:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003906:	4b1b      	ldr	r3, [pc, #108]	; (8003974 <SystemInit+0xd8>)
 8003908:	2200      	movs	r2, #0
 800390a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800390c:	4b19      	ldr	r3, [pc, #100]	; (8003974 <SystemInit+0xd8>)
 800390e:	2200      	movs	r2, #0
 8003910:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8003912:	4b18      	ldr	r3, [pc, #96]	; (8003974 <SystemInit+0xd8>)
 8003914:	2200      	movs	r2, #0
 8003916:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003918:	4b16      	ldr	r3, [pc, #88]	; (8003974 <SystemInit+0xd8>)
 800391a:	4a18      	ldr	r2, [pc, #96]	; (800397c <SystemInit+0xe0>)
 800391c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800391e:	4b15      	ldr	r3, [pc, #84]	; (8003974 <SystemInit+0xd8>)
 8003920:	4a17      	ldr	r2, [pc, #92]	; (8003980 <SystemInit+0xe4>)
 8003922:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003924:	4b13      	ldr	r3, [pc, #76]	; (8003974 <SystemInit+0xd8>)
 8003926:	4a17      	ldr	r2, [pc, #92]	; (8003984 <SystemInit+0xe8>)
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800392a:	4b12      	ldr	r3, [pc, #72]	; (8003974 <SystemInit+0xd8>)
 800392c:	2200      	movs	r2, #0
 800392e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003930:	4b10      	ldr	r3, [pc, #64]	; (8003974 <SystemInit+0xd8>)
 8003932:	4a14      	ldr	r2, [pc, #80]	; (8003984 <SystemInit+0xe8>)
 8003934:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003936:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <SystemInit+0xd8>)
 8003938:	2200      	movs	r2, #0
 800393a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800393c:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <SystemInit+0xd8>)
 800393e:	4a11      	ldr	r2, [pc, #68]	; (8003984 <SystemInit+0xe8>)
 8003940:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003942:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <SystemInit+0xd8>)
 8003944:	2200      	movs	r2, #0
 8003946:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <SystemInit+0xd8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a09      	ldr	r2, [pc, #36]	; (8003974 <SystemInit+0xd8>)
 800394e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003952:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003954:	4b07      	ldr	r3, [pc, #28]	; (8003974 <SystemInit+0xd8>)
 8003956:	2200      	movs	r2, #0
 8003958:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800395a:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <SystemInit+0xec>)
 800395c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003960:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003962:	bf00      	nop
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	e000ed00 	.word	0xe000ed00
 8003970:	52002000 	.word	0x52002000
 8003974:	58024400 	.word	0x58024400
 8003978:	eaf6ed7f 	.word	0xeaf6ed7f
 800397c:	02020200 	.word	0x02020200
 8003980:	01ff0000 	.word	0x01ff0000
 8003984:	01010280 	.word	0x01010280
 8003988:	52004000 	.word	0x52004000

0800398c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800398c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003990:	f7ff ff84 	bl	800389c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003994:	480c      	ldr	r0, [pc, #48]	; (80039c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003996:	490d      	ldr	r1, [pc, #52]	; (80039cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003998:	4a0d      	ldr	r2, [pc, #52]	; (80039d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800399a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800399c:	e002      	b.n	80039a4 <LoopCopyDataInit>

0800399e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800399e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039a2:	3304      	adds	r3, #4

080039a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80039a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039a8:	d3f9      	bcc.n	800399e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039aa:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039ac:	4c0a      	ldr	r4, [pc, #40]	; (80039d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80039ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039b0:	e001      	b.n	80039b6 <LoopFillZerobss>

080039b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039b4:	3204      	adds	r2, #4

080039b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039b8:	d3fb      	bcc.n	80039b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80039ba:	f004 fab7 	bl	8007f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039be:	f7ff f8a3 	bl	8002b08 <main>
  bx  lr
 80039c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039c4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80039c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80039cc:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 80039d0:	08019878 	.word	0x08019878
  ldr r2, =_sbss
 80039d4:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 80039d8:	240001ec 	.word	0x240001ec

080039dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039dc:	e7fe      	b.n	80039dc <ADC_IRQHandler>
	...

080039e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039e6:	2003      	movs	r0, #3
 80039e8:	f000 f980 	bl	8003cec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80039ec:	f001 f9d0 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 80039f0:	4602      	mov	r2, r0
 80039f2:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <HAL_Init+0x68>)
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	4913      	ldr	r1, [pc, #76]	; (8003a4c <HAL_Init+0x6c>)
 80039fe:	5ccb      	ldrb	r3, [r1, r3]
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
 8003a08:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <HAL_Init+0x68>)
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	4a0e      	ldr	r2, [pc, #56]	; (8003a4c <HAL_Init+0x6c>)
 8003a14:	5cd3      	ldrb	r3, [r2, r3]
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a20:	4a0b      	ldr	r2, [pc, #44]	; (8003a50 <HAL_Init+0x70>)
 8003a22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a24:	4a0b      	ldr	r2, [pc, #44]	; (8003a54 <HAL_Init+0x74>)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	f000 f814 	bl	8003a58 <HAL_InitTick>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e002      	b.n	8003a40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003a3a:	f7ff fe4b 	bl	80036d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	58024400 	.word	0x58024400
 8003a4c:	08019830 	.word	0x08019830
 8003a50:	24000074 	.word	0x24000074
 8003a54:	24000070 	.word	0x24000070

08003a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003a60:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <HAL_InitTick+0x60>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e021      	b.n	8003ab0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003a6c:	4b13      	ldr	r3, [pc, #76]	; (8003abc <HAL_InitTick+0x64>)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <HAL_InitTick+0x60>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	4619      	mov	r1, r3
 8003a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 f965 	bl	8003d52 <HAL_SYSTICK_Config>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e00e      	b.n	8003ab0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b0f      	cmp	r3, #15
 8003a96:	d80a      	bhi.n	8003aae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa0:	f000 f92f 	bl	8003d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003aa4:	4a06      	ldr	r2, [pc, #24]	; (8003ac0 <HAL_InitTick+0x68>)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e000      	b.n	8003ab0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	2400007c 	.word	0x2400007c
 8003abc:	24000070 	.word	0x24000070
 8003ac0:	24000078 	.word	0x24000078

08003ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <HAL_IncTick+0x20>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	461a      	mov	r2, r3
 8003ace:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <HAL_IncTick+0x24>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	4a04      	ldr	r2, [pc, #16]	; (8003ae8 <HAL_IncTick+0x24>)
 8003ad6:	6013      	str	r3, [r2, #0]
}
 8003ad8:	bf00      	nop
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	2400007c 	.word	0x2400007c
 8003ae8:	240001e8 	.word	0x240001e8

08003aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return uwTick;
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <HAL_GetTick+0x14>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	240001e8 	.word	0x240001e8

08003b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b0c:	f7ff ffee 	bl	8003aec <HAL_GetTick>
 8003b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1c:	d005      	beq.n	8003b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <HAL_Delay+0x44>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b2a:	bf00      	nop
 8003b2c:	f7ff ffde 	bl	8003aec <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d8f7      	bhi.n	8003b2c <HAL_Delay+0x28>
  {
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	2400007c 	.word	0x2400007c

08003b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <__NVIC_SetPriorityGrouping+0x40>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b68:	4013      	ands	r3, r2
 8003b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b74:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <__NVIC_SetPriorityGrouping+0x44>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b7a:	4a04      	ldr	r2, [pc, #16]	; (8003b8c <__NVIC_SetPriorityGrouping+0x40>)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	60d3      	str	r3, [r2, #12]
}
 8003b80:	bf00      	nop
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	e000ed00 	.word	0xe000ed00
 8003b90:	05fa0000 	.word	0x05fa0000

08003b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b98:	4b04      	ldr	r3, [pc, #16]	; (8003bac <__NVIC_GetPriorityGrouping+0x18>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	0a1b      	lsrs	r3, r3, #8
 8003b9e:	f003 0307 	and.w	r3, r3, #7
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	e000ed00 	.word	0xe000ed00

08003bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	db0b      	blt.n	8003bda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bc2:	88fb      	ldrh	r3, [r7, #6]
 8003bc4:	f003 021f 	and.w	r2, r3, #31
 8003bc8:	4907      	ldr	r1, [pc, #28]	; (8003be8 <__NVIC_EnableIRQ+0x38>)
 8003bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	2001      	movs	r0, #1
 8003bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8003bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	e000e100 	.word	0xe000e100

08003bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	6039      	str	r1, [r7, #0]
 8003bf6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003bf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	db0a      	blt.n	8003c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	490c      	ldr	r1, [pc, #48]	; (8003c38 <__NVIC_SetPriority+0x4c>)
 8003c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c0a:	0112      	lsls	r2, r2, #4
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	440b      	add	r3, r1
 8003c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c14:	e00a      	b.n	8003c2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	4908      	ldr	r1, [pc, #32]	; (8003c3c <__NVIC_SetPriority+0x50>)
 8003c1c:	88fb      	ldrh	r3, [r7, #6]
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	3b04      	subs	r3, #4
 8003c24:	0112      	lsls	r2, r2, #4
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	440b      	add	r3, r1
 8003c2a:	761a      	strb	r2, [r3, #24]
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	e000e100 	.word	0xe000e100
 8003c3c:	e000ed00 	.word	0xe000ed00

08003c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b089      	sub	sp, #36	; 0x24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f1c3 0307 	rsb	r3, r3, #7
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	bf28      	it	cs
 8003c5e:	2304      	movcs	r3, #4
 8003c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	3304      	adds	r3, #4
 8003c66:	2b06      	cmp	r3, #6
 8003c68:	d902      	bls.n	8003c70 <NVIC_EncodePriority+0x30>
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	3b03      	subs	r3, #3
 8003c6e:	e000      	b.n	8003c72 <NVIC_EncodePriority+0x32>
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c74:	f04f 32ff 	mov.w	r2, #4294967295
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43da      	mvns	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	401a      	ands	r2, r3
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c88:	f04f 31ff 	mov.w	r1, #4294967295
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c92:	43d9      	mvns	r1, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c98:	4313      	orrs	r3, r2
         );
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3724      	adds	r7, #36	; 0x24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
	...

08003ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cb8:	d301      	bcc.n	8003cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e00f      	b.n	8003cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cbe:	4a0a      	ldr	r2, [pc, #40]	; (8003ce8 <SysTick_Config+0x40>)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cc6:	210f      	movs	r1, #15
 8003cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ccc:	f7ff ff8e 	bl	8003bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cd0:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <SysTick_Config+0x40>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cd6:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <SysTick_Config+0x40>)
 8003cd8:	2207      	movs	r2, #7
 8003cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	e000e010 	.word	0xe000e010

08003cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff ff29 	bl	8003b4c <__NVIC_SetPriorityGrouping>
}
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b086      	sub	sp, #24
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	4603      	mov	r3, r0
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d10:	f7ff ff40 	bl	8003b94 <__NVIC_GetPriorityGrouping>
 8003d14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	6978      	ldr	r0, [r7, #20]
 8003d1c:	f7ff ff90 	bl	8003c40 <NVIC_EncodePriority>
 8003d20:	4602      	mov	r2, r0
 8003d22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d26:	4611      	mov	r1, r2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff ff5f 	bl	8003bec <__NVIC_SetPriority>
}
 8003d2e:	bf00      	nop
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff ff33 	bl	8003bb0 <__NVIC_EnableIRQ>
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b082      	sub	sp, #8
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff ffa4 	bl	8003ca8 <SysTick_Config>
 8003d60:	4603      	mov	r3, r0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b089      	sub	sp, #36	; 0x24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003d7a:	4b89      	ldr	r3, [pc, #548]	; (8003fa0 <HAL_GPIO_Init+0x234>)
 8003d7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d7e:	e194      	b.n	80040aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	2101      	movs	r1, #1
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8186 	beq.w	80040a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d005      	beq.n	8003db0 <HAL_GPIO_Init+0x44>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d130      	bne.n	8003e12 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	2203      	movs	r2, #3
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003de6:	2201      	movs	r2, #1
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43db      	mvns	r3, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4013      	ands	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	091b      	lsrs	r3, r3, #4
 8003dfc:	f003 0201 	and.w	r2, r3, #1
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d017      	beq.n	8003e4e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	2203      	movs	r2, #3
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4013      	ands	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d123      	bne.n	8003ea2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	08da      	lsrs	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3208      	adds	r2, #8
 8003e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	220f      	movs	r2, #15
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	691a      	ldr	r2, [r3, #16]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	08da      	lsrs	r2, r3, #3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3208      	adds	r2, #8
 8003e9c:	69b9      	ldr	r1, [r7, #24]
 8003e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	2203      	movs	r2, #3
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f003 0203 	and.w	r2, r3, #3
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 80e0 	beq.w	80040a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee4:	4b2f      	ldr	r3, [pc, #188]	; (8003fa4 <HAL_GPIO_Init+0x238>)
 8003ee6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003eea:	4a2e      	ldr	r2, [pc, #184]	; (8003fa4 <HAL_GPIO_Init+0x238>)
 8003eec:	f043 0302 	orr.w	r3, r3, #2
 8003ef0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003ef4:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_GPIO_Init+0x238>)
 8003ef6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f02:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <HAL_GPIO_Init+0x23c>)
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	089b      	lsrs	r3, r3, #2
 8003f08:	3302      	adds	r3, #2
 8003f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	220f      	movs	r2, #15
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4013      	ands	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a20      	ldr	r2, [pc, #128]	; (8003fac <HAL_GPIO_Init+0x240>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d052      	beq.n	8003fd4 <HAL_GPIO_Init+0x268>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a1f      	ldr	r2, [pc, #124]	; (8003fb0 <HAL_GPIO_Init+0x244>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d031      	beq.n	8003f9a <HAL_GPIO_Init+0x22e>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a1e      	ldr	r2, [pc, #120]	; (8003fb4 <HAL_GPIO_Init+0x248>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d02b      	beq.n	8003f96 <HAL_GPIO_Init+0x22a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a1d      	ldr	r2, [pc, #116]	; (8003fb8 <HAL_GPIO_Init+0x24c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d025      	beq.n	8003f92 <HAL_GPIO_Init+0x226>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a1c      	ldr	r2, [pc, #112]	; (8003fbc <HAL_GPIO_Init+0x250>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d01f      	beq.n	8003f8e <HAL_GPIO_Init+0x222>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a1b      	ldr	r2, [pc, #108]	; (8003fc0 <HAL_GPIO_Init+0x254>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d019      	beq.n	8003f8a <HAL_GPIO_Init+0x21e>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a1a      	ldr	r2, [pc, #104]	; (8003fc4 <HAL_GPIO_Init+0x258>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d013      	beq.n	8003f86 <HAL_GPIO_Init+0x21a>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a19      	ldr	r2, [pc, #100]	; (8003fc8 <HAL_GPIO_Init+0x25c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00d      	beq.n	8003f82 <HAL_GPIO_Init+0x216>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a18      	ldr	r2, [pc, #96]	; (8003fcc <HAL_GPIO_Init+0x260>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d007      	beq.n	8003f7e <HAL_GPIO_Init+0x212>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a17      	ldr	r2, [pc, #92]	; (8003fd0 <HAL_GPIO_Init+0x264>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d101      	bne.n	8003f7a <HAL_GPIO_Init+0x20e>
 8003f76:	2309      	movs	r3, #9
 8003f78:	e02d      	b.n	8003fd6 <HAL_GPIO_Init+0x26a>
 8003f7a:	230a      	movs	r3, #10
 8003f7c:	e02b      	b.n	8003fd6 <HAL_GPIO_Init+0x26a>
 8003f7e:	2308      	movs	r3, #8
 8003f80:	e029      	b.n	8003fd6 <HAL_GPIO_Init+0x26a>
 8003f82:	2307      	movs	r3, #7
 8003f84:	e027      	b.n	8003fd6 <HAL_GPIO_Init+0x26a>
 8003f86:	2306      	movs	r3, #6
 8003f88:	e025      	b.n	8003fd6 <HAL_GPIO_Init+0x26a>
 8003f8a:	2305      	movs	r3, #5
 8003f8c:	e023      	b.n	8003fd6 <HAL_GPIO_Init+0x26a>
 8003f8e:	2304      	movs	r3, #4
 8003f90:	e021      	b.n	8003fd6 <HAL_GPIO_Init+0x26a>
 8003f92:	2303      	movs	r3, #3
 8003f94:	e01f      	b.n	8003fd6 <HAL_GPIO_Init+0x26a>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e01d      	b.n	8003fd6 <HAL_GPIO_Init+0x26a>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e01b      	b.n	8003fd6 <HAL_GPIO_Init+0x26a>
 8003f9e:	bf00      	nop
 8003fa0:	58000080 	.word	0x58000080
 8003fa4:	58024400 	.word	0x58024400
 8003fa8:	58000400 	.word	0x58000400
 8003fac:	58020000 	.word	0x58020000
 8003fb0:	58020400 	.word	0x58020400
 8003fb4:	58020800 	.word	0x58020800
 8003fb8:	58020c00 	.word	0x58020c00
 8003fbc:	58021000 	.word	0x58021000
 8003fc0:	58021400 	.word	0x58021400
 8003fc4:	58021800 	.word	0x58021800
 8003fc8:	58021c00 	.word	0x58021c00
 8003fcc:	58022000 	.word	0x58022000
 8003fd0:	58022400 	.word	0x58022400
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	f002 0203 	and.w	r2, r2, #3
 8003fdc:	0092      	lsls	r2, r2, #2
 8003fde:	4093      	lsls	r3, r2
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fe6:	4938      	ldr	r1, [pc, #224]	; (80040c8 <HAL_GPIO_Init+0x35c>)
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	089b      	lsrs	r3, r3, #2
 8003fec:	3302      	adds	r3, #2
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	43db      	mvns	r3, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4013      	ands	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800401a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	43db      	mvns	r3, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4013      	ands	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	43db      	mvns	r3, r3
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4013      	ands	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	3301      	adds	r3, #1
 80040a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f47f ae63 	bne.w	8003d80 <HAL_GPIO_Init+0x14>
  }
}
 80040ba:	bf00      	nop
 80040bc:	bf00      	nop
 80040be:	3724      	adds	r7, #36	; 0x24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	58000400 	.word	0x58000400

080040cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	807b      	strh	r3, [r7, #2]
 80040d8:	4613      	mov	r3, r2
 80040da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040dc:	787b      	ldrb	r3, [r7, #1]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040e2:	887a      	ldrh	r2, [r7, #2]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80040e8:	e003      	b.n	80040f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80040ea:	887b      	ldrh	r3, [r7, #2]
 80040ec:	041a      	lsls	r2, r3, #16
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	619a      	str	r2, [r3, #24]
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040fe:	b480      	push	{r7}
 8004100:	b085      	sub	sp, #20
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	460b      	mov	r3, r1
 8004108:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004110:	887a      	ldrh	r2, [r7, #2]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4013      	ands	r3, r2
 8004116:	041a      	lsls	r2, r3, #16
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	43d9      	mvns	r1, r3
 800411c:	887b      	ldrh	r3, [r7, #2]
 800411e:	400b      	ands	r3, r1
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	619a      	str	r2, [r3, #24]
}
 8004126:	bf00      	nop
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	4603      	mov	r3, r0
 800413a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800413c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004140:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	4013      	ands	r3, r2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800414c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff fa6f 	bl	800363c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004170:	4b29      	ldr	r3, [pc, #164]	; (8004218 <HAL_PWREx_ConfigSupply+0xb0>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	2b06      	cmp	r3, #6
 800417a:	d00a      	beq.n	8004192 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800417c:	4b26      	ldr	r3, [pc, #152]	; (8004218 <HAL_PWREx_ConfigSupply+0xb0>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	429a      	cmp	r2, r3
 8004188:	d001      	beq.n	800418e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e040      	b.n	8004210 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	e03e      	b.n	8004210 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004192:	4b21      	ldr	r3, [pc, #132]	; (8004218 <HAL_PWREx_ConfigSupply+0xb0>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800419a:	491f      	ldr	r1, [pc, #124]	; (8004218 <HAL_PWREx_ConfigSupply+0xb0>)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4313      	orrs	r3, r2
 80041a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80041a2:	f7ff fca3 	bl	8003aec <HAL_GetTick>
 80041a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80041a8:	e009      	b.n	80041be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80041aa:	f7ff fc9f 	bl	8003aec <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041b8:	d901      	bls.n	80041be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e028      	b.n	8004210 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80041be:	4b16      	ldr	r3, [pc, #88]	; (8004218 <HAL_PWREx_ConfigSupply+0xb0>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ca:	d1ee      	bne.n	80041aa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b1e      	cmp	r3, #30
 80041d0:	d008      	beq.n	80041e4 <HAL_PWREx_ConfigSupply+0x7c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b2e      	cmp	r3, #46	; 0x2e
 80041d6:	d005      	beq.n	80041e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b1d      	cmp	r3, #29
 80041dc:	d002      	beq.n	80041e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b2d      	cmp	r3, #45	; 0x2d
 80041e2:	d114      	bne.n	800420e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80041e4:	f7ff fc82 	bl	8003aec <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80041ea:	e009      	b.n	8004200 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80041ec:	f7ff fc7e 	bl	8003aec <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041fa:	d901      	bls.n	8004200 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e007      	b.n	8004210 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <HAL_PWREx_ConfigSupply+0xb0>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420c:	d1ee      	bne.n	80041ec <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	58024800 	.word	0x58024800

0800421c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08c      	sub	sp, #48	; 0x30
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e3f4      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 80b3 	beq.w	80043a2 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800423c:	4b95      	ldr	r3, [pc, #596]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004246:	4b93      	ldr	r3, [pc, #588]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800424c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424e:	2b10      	cmp	r3, #16
 8004250:	d007      	beq.n	8004262 <HAL_RCC_OscConfig+0x46>
 8004252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004254:	2b18      	cmp	r3, #24
 8004256:	d112      	bne.n	800427e <HAL_RCC_OscConfig+0x62>
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d10d      	bne.n	800427e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004262:	4b8c      	ldr	r3, [pc, #560]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 8098 	beq.w	80043a0 <HAL_RCC_OscConfig+0x184>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f040 8093 	bne.w	80043a0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e3cc      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004286:	d106      	bne.n	8004296 <HAL_RCC_OscConfig+0x7a>
 8004288:	4b82      	ldr	r3, [pc, #520]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a81      	ldr	r2, [pc, #516]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 800428e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	e058      	b.n	8004348 <HAL_RCC_OscConfig+0x12c>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d112      	bne.n	80042c4 <HAL_RCC_OscConfig+0xa8>
 800429e:	4b7d      	ldr	r3, [pc, #500]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a7c      	ldr	r2, [pc, #496]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 80042a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	4b7a      	ldr	r3, [pc, #488]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a79      	ldr	r2, [pc, #484]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 80042b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	4b77      	ldr	r3, [pc, #476]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a76      	ldr	r2, [pc, #472]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 80042bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e041      	b.n	8004348 <HAL_RCC_OscConfig+0x12c>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042cc:	d112      	bne.n	80042f4 <HAL_RCC_OscConfig+0xd8>
 80042ce:	4b71      	ldr	r3, [pc, #452]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a70      	ldr	r2, [pc, #448]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 80042d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	4b6e      	ldr	r3, [pc, #440]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a6d      	ldr	r2, [pc, #436]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 80042e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4b6b      	ldr	r3, [pc, #428]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a6a      	ldr	r2, [pc, #424]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e029      	b.n	8004348 <HAL_RCC_OscConfig+0x12c>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80042fc:	d112      	bne.n	8004324 <HAL_RCC_OscConfig+0x108>
 80042fe:	4b65      	ldr	r3, [pc, #404]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a64      	ldr	r2, [pc, #400]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 8004304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	4b62      	ldr	r3, [pc, #392]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a61      	ldr	r2, [pc, #388]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 8004310:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	4b5f      	ldr	r3, [pc, #380]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a5e      	ldr	r2, [pc, #376]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 800431c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e011      	b.n	8004348 <HAL_RCC_OscConfig+0x12c>
 8004324:	4b5b      	ldr	r3, [pc, #364]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a5a      	ldr	r2, [pc, #360]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 800432a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	4b58      	ldr	r3, [pc, #352]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a57      	ldr	r2, [pc, #348]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 8004336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	4b55      	ldr	r3, [pc, #340]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a54      	ldr	r2, [pc, #336]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 8004342:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d013      	beq.n	8004378 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7ff fbcc 	bl	8003aec <HAL_GetTick>
 8004354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004358:	f7ff fbc8 	bl	8003aec <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e356      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800436a:	4b4a      	ldr	r3, [pc, #296]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x13c>
 8004376:	e014      	b.n	80043a2 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7ff fbb8 	bl	8003aec <HAL_GetTick>
 800437c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004380:	f7ff fbb4 	bl	8003aec <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	; 0x64
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e342      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004392:	4b40      	ldr	r3, [pc, #256]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x164>
 800439e:	e000      	b.n	80043a2 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 808d 	beq.w	80044ca <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043b0:	4b38      	ldr	r3, [pc, #224]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043ba:	4b36      	ldr	r3, [pc, #216]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <HAL_RCC_OscConfig+0x1ba>
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	2b18      	cmp	r3, #24
 80043ca:	d137      	bne.n	800443c <HAL_RCC_OscConfig+0x220>
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d132      	bne.n	800443c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043d6:	4b2f      	ldr	r3, [pc, #188]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0304 	and.w	r3, r3, #4
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d005      	beq.n	80043ee <HAL_RCC_OscConfig+0x1d2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e314      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043ee:	4b29      	ldr	r3, [pc, #164]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f023 0219 	bic.w	r2, r3, #25
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	4926      	ldr	r1, [pc, #152]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004400:	f7ff fb74 	bl	8003aec <HAL_GetTick>
 8004404:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004408:	f7ff fb70 	bl	8003aec <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e2fe      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800441a:	4b1e      	ldr	r3, [pc, #120]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004426:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	061b      	lsls	r3, r3, #24
 8004434:	4917      	ldr	r1, [pc, #92]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800443a:	e046      	b.n	80044ca <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d029      	beq.n	8004498 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004444:	4b13      	ldr	r3, [pc, #76]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f023 0219 	bic.w	r2, r3, #25
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4910      	ldr	r1, [pc, #64]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 8004452:	4313      	orrs	r3, r2
 8004454:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004456:	f7ff fb49 	bl	8003aec <HAL_GetTick>
 800445a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800445e:	f7ff fb45 	bl	8003aec <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e2d3      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004470:	4b08      	ldr	r3, [pc, #32]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	061b      	lsls	r3, r3, #24
 800448a:	4902      	ldr	r1, [pc, #8]	; (8004494 <HAL_RCC_OscConfig+0x278>)
 800448c:	4313      	orrs	r3, r2
 800448e:	604b      	str	r3, [r1, #4]
 8004490:	e01b      	b.n	80044ca <HAL_RCC_OscConfig+0x2ae>
 8004492:	bf00      	nop
 8004494:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004498:	4b97      	ldr	r3, [pc, #604]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a96      	ldr	r2, [pc, #600]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a4:	f7ff fb22 	bl	8003aec <HAL_GetTick>
 80044a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ac:	f7ff fb1e 	bl	8003aec <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e2ac      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044be:	4b8e      	ldr	r3, [pc, #568]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f0      	bne.n	80044ac <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d06a      	beq.n	80045ac <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044d6:	4b88      	ldr	r3, [pc, #544]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044e0:	4b85      	ldr	r3, [pc, #532]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d007      	beq.n	80044fc <HAL_RCC_OscConfig+0x2e0>
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	2b18      	cmp	r3, #24
 80044f0:	d11b      	bne.n	800452a <HAL_RCC_OscConfig+0x30e>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d116      	bne.n	800452a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044fc:	4b7e      	ldr	r3, [pc, #504]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_RCC_OscConfig+0x2f8>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	2b80      	cmp	r3, #128	; 0x80
 800450e:	d001      	beq.n	8004514 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e281      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004514:	4b78      	ldr	r3, [pc, #480]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	061b      	lsls	r3, r3, #24
 8004522:	4975      	ldr	r1, [pc, #468]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 8004524:	4313      	orrs	r3, r2
 8004526:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004528:	e040      	b.n	80045ac <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d023      	beq.n	800457a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004532:	4b71      	ldr	r3, [pc, #452]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a70      	ldr	r2, [pc, #448]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 8004538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453e:	f7ff fad5 	bl	8003aec <HAL_GetTick>
 8004542:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004546:	f7ff fad1 	bl	8003aec <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e25f      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004558:	4b67      	ldr	r3, [pc, #412]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0f0      	beq.n	8004546 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004564:	4b64      	ldr	r3, [pc, #400]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	061b      	lsls	r3, r3, #24
 8004572:	4961      	ldr	r1, [pc, #388]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 8004574:	4313      	orrs	r3, r2
 8004576:	60cb      	str	r3, [r1, #12]
 8004578:	e018      	b.n	80045ac <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800457a:	4b5f      	ldr	r3, [pc, #380]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a5e      	ldr	r2, [pc, #376]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 8004580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004586:	f7ff fab1 	bl	8003aec <HAL_GetTick>
 800458a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800458e:	f7ff faad 	bl	8003aec <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e23b      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045a0:	4b55      	ldr	r3, [pc, #340]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f0      	bne.n	800458e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d036      	beq.n	8004626 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d019      	beq.n	80045f4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045c0:	4b4d      	ldr	r3, [pc, #308]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 80045c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c4:	4a4c      	ldr	r2, [pc, #304]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045cc:	f7ff fa8e 	bl	8003aec <HAL_GetTick>
 80045d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045d4:	f7ff fa8a 	bl	8003aec <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e218      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045e6:	4b44      	ldr	r3, [pc, #272]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 80045e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0x3b8>
 80045f2:	e018      	b.n	8004626 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045f4:	4b40      	ldr	r3, [pc, #256]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 80045f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f8:	4a3f      	ldr	r2, [pc, #252]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 80045fa:	f023 0301 	bic.w	r3, r3, #1
 80045fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004600:	f7ff fa74 	bl	8003aec <HAL_GetTick>
 8004604:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004608:	f7ff fa70 	bl	8003aec <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e1fe      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800461a:	4b37      	ldr	r3, [pc, #220]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 800461c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d036      	beq.n	80046a0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d019      	beq.n	800466e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800463a:	4b2f      	ldr	r3, [pc, #188]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a2e      	ldr	r2, [pc, #184]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 8004640:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004644:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004646:	f7ff fa51 	bl	8003aec <HAL_GetTick>
 800464a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800464e:	f7ff fa4d 	bl	8003aec <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e1db      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004660:	4b25      	ldr	r3, [pc, #148]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x432>
 800466c:	e018      	b.n	80046a0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800466e:	4b22      	ldr	r3, [pc, #136]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a21      	ldr	r2, [pc, #132]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 8004674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004678:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800467a:	f7ff fa37 	bl	8003aec <HAL_GetTick>
 800467e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004682:	f7ff fa33 	bl	8003aec <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e1c1      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004694:	4b18      	ldr	r3, [pc, #96]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1f0      	bne.n	8004682 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80af 	beq.w	800480c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046ae:	4b13      	ldr	r3, [pc, #76]	; (80046fc <HAL_RCC_OscConfig+0x4e0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a12      	ldr	r2, [pc, #72]	; (80046fc <HAL_RCC_OscConfig+0x4e0>)
 80046b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046ba:	f7ff fa17 	bl	8003aec <HAL_GetTick>
 80046be:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046c2:	f7ff fa13 	bl	8003aec <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b64      	cmp	r3, #100	; 0x64
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e1a1      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046d4:	4b09      	ldr	r3, [pc, #36]	; (80046fc <HAL_RCC_OscConfig+0x4e0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d10b      	bne.n	8004700 <HAL_RCC_OscConfig+0x4e4>
 80046e8:	4b03      	ldr	r3, [pc, #12]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ec:	4a02      	ldr	r2, [pc, #8]	; (80046f8 <HAL_RCC_OscConfig+0x4dc>)
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	6713      	str	r3, [r2, #112]	; 0x70
 80046f4:	e05b      	b.n	80047ae <HAL_RCC_OscConfig+0x592>
 80046f6:	bf00      	nop
 80046f8:	58024400 	.word	0x58024400
 80046fc:	58024800 	.word	0x58024800
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d112      	bne.n	800472e <HAL_RCC_OscConfig+0x512>
 8004708:	4b9d      	ldr	r3, [pc, #628]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470c:	4a9c      	ldr	r2, [pc, #624]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 800470e:	f023 0301 	bic.w	r3, r3, #1
 8004712:	6713      	str	r3, [r2, #112]	; 0x70
 8004714:	4b9a      	ldr	r3, [pc, #616]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004718:	4a99      	ldr	r2, [pc, #612]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 800471a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800471e:	6713      	str	r3, [r2, #112]	; 0x70
 8004720:	4b97      	ldr	r3, [pc, #604]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004724:	4a96      	ldr	r2, [pc, #600]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004726:	f023 0304 	bic.w	r3, r3, #4
 800472a:	6713      	str	r3, [r2, #112]	; 0x70
 800472c:	e03f      	b.n	80047ae <HAL_RCC_OscConfig+0x592>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b05      	cmp	r3, #5
 8004734:	d112      	bne.n	800475c <HAL_RCC_OscConfig+0x540>
 8004736:	4b92      	ldr	r3, [pc, #584]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473a:	4a91      	ldr	r2, [pc, #580]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 800473c:	f043 0304 	orr.w	r3, r3, #4
 8004740:	6713      	str	r3, [r2, #112]	; 0x70
 8004742:	4b8f      	ldr	r3, [pc, #572]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	4a8e      	ldr	r2, [pc, #568]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800474c:	6713      	str	r3, [r2, #112]	; 0x70
 800474e:	4b8c      	ldr	r3, [pc, #560]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004752:	4a8b      	ldr	r2, [pc, #556]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	6713      	str	r3, [r2, #112]	; 0x70
 800475a:	e028      	b.n	80047ae <HAL_RCC_OscConfig+0x592>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b85      	cmp	r3, #133	; 0x85
 8004762:	d112      	bne.n	800478a <HAL_RCC_OscConfig+0x56e>
 8004764:	4b86      	ldr	r3, [pc, #536]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004768:	4a85      	ldr	r2, [pc, #532]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 800476a:	f043 0304 	orr.w	r3, r3, #4
 800476e:	6713      	str	r3, [r2, #112]	; 0x70
 8004770:	4b83      	ldr	r3, [pc, #524]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004774:	4a82      	ldr	r2, [pc, #520]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477a:	6713      	str	r3, [r2, #112]	; 0x70
 800477c:	4b80      	ldr	r3, [pc, #512]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 800477e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004780:	4a7f      	ldr	r2, [pc, #508]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	6713      	str	r3, [r2, #112]	; 0x70
 8004788:	e011      	b.n	80047ae <HAL_RCC_OscConfig+0x592>
 800478a:	4b7d      	ldr	r3, [pc, #500]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 800478c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478e:	4a7c      	ldr	r2, [pc, #496]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004790:	f023 0301 	bic.w	r3, r3, #1
 8004794:	6713      	str	r3, [r2, #112]	; 0x70
 8004796:	4b7a      	ldr	r3, [pc, #488]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	4a79      	ldr	r2, [pc, #484]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 800479c:	f023 0304 	bic.w	r3, r3, #4
 80047a0:	6713      	str	r3, [r2, #112]	; 0x70
 80047a2:	4b77      	ldr	r3, [pc, #476]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a6:	4a76      	ldr	r2, [pc, #472]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 80047a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d015      	beq.n	80047e2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b6:	f7ff f999 	bl	8003aec <HAL_GetTick>
 80047ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047bc:	e00a      	b.n	80047d4 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047be:	f7ff f995 	bl	8003aec <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e121      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047d4:	4b6a      	ldr	r3, [pc, #424]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 80047d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0ee      	beq.n	80047be <HAL_RCC_OscConfig+0x5a2>
 80047e0:	e014      	b.n	800480c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e2:	f7ff f983 	bl	8003aec <HAL_GetTick>
 80047e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047e8:	e00a      	b.n	8004800 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ea:	f7ff f97f 	bl	8003aec <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e10b      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004800:	4b5f      	ldr	r3, [pc, #380]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1ee      	bne.n	80047ea <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8100 	beq.w	8004a16 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004816:	4b5a      	ldr	r3, [pc, #360]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800481e:	2b18      	cmp	r3, #24
 8004820:	f000 80bb 	beq.w	800499a <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	2b02      	cmp	r3, #2
 800482a:	f040 8095 	bne.w	8004958 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482e:	4b54      	ldr	r3, [pc, #336]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a53      	ldr	r2, [pc, #332]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004834:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483a:	f7ff f957 	bl	8003aec <HAL_GetTick>
 800483e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004842:	f7ff f953 	bl	8003aec <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e0e1      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004854:	4b4a      	ldr	r3, [pc, #296]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f0      	bne.n	8004842 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004860:	4b47      	ldr	r3, [pc, #284]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004862:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004864:	4b47      	ldr	r3, [pc, #284]	; (8004984 <HAL_RCC_OscConfig+0x768>)
 8004866:	4013      	ands	r3, r2
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004870:	0112      	lsls	r2, r2, #4
 8004872:	430a      	orrs	r2, r1
 8004874:	4942      	ldr	r1, [pc, #264]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004876:	4313      	orrs	r3, r2
 8004878:	628b      	str	r3, [r1, #40]	; 0x28
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	3b01      	subs	r3, #1
 8004880:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004888:	3b01      	subs	r3, #1
 800488a:	025b      	lsls	r3, r3, #9
 800488c:	b29b      	uxth	r3, r3
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	3b01      	subs	r3, #1
 8004896:	041b      	lsls	r3, r3, #16
 8004898:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a2:	3b01      	subs	r3, #1
 80048a4:	061b      	lsls	r3, r3, #24
 80048a6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048aa:	4935      	ldr	r1, [pc, #212]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80048b0:	4b33      	ldr	r3, [pc, #204]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	4a32      	ldr	r2, [pc, #200]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 80048b6:	f023 0301 	bic.w	r3, r3, #1
 80048ba:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80048bc:	4b30      	ldr	r3, [pc, #192]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 80048be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048c0:	4b31      	ldr	r3, [pc, #196]	; (8004988 <HAL_RCC_OscConfig+0x76c>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80048c8:	00d2      	lsls	r2, r2, #3
 80048ca:	492d      	ldr	r1, [pc, #180]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80048d0:	4b2b      	ldr	r3, [pc, #172]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	f023 020c 	bic.w	r2, r3, #12
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	4928      	ldr	r1, [pc, #160]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80048e2:	4b27      	ldr	r3, [pc, #156]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	f023 0202 	bic.w	r2, r3, #2
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	4924      	ldr	r1, [pc, #144]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80048f4:	4b22      	ldr	r3, [pc, #136]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	4a21      	ldr	r2, [pc, #132]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 80048fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004900:	4b1f      	ldr	r3, [pc, #124]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	4a1e      	ldr	r2, [pc, #120]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800490a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800490c:	4b1c      	ldr	r3, [pc, #112]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	4a1b      	ldr	r2, [pc, #108]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004912:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004916:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004918:	4b19      	ldr	r3, [pc, #100]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	4a18      	ldr	r2, [pc, #96]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 800491e:	f043 0301 	orr.w	r3, r3, #1
 8004922:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004924:	4b16      	ldr	r3, [pc, #88]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a15      	ldr	r2, [pc, #84]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 800492a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800492e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004930:	f7ff f8dc 	bl	8003aec <HAL_GetTick>
 8004934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004938:	f7ff f8d8 	bl	8003aec <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e066      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800494a:	4b0d      	ldr	r3, [pc, #52]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f0      	beq.n	8004938 <HAL_RCC_OscConfig+0x71c>
 8004956:	e05e      	b.n	8004a16 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004958:	4b09      	ldr	r3, [pc, #36]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a08      	ldr	r2, [pc, #32]	; (8004980 <HAL_RCC_OscConfig+0x764>)
 800495e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004964:	f7ff f8c2 	bl	8003aec <HAL_GetTick>
 8004968:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800496a:	e00f      	b.n	800498c <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800496c:	f7ff f8be 	bl	8003aec <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d908      	bls.n	800498c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e04c      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
 800497e:	bf00      	nop
 8004980:	58024400 	.word	0x58024400
 8004984:	fffffc0c 	.word	0xfffffc0c
 8004988:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800498c:	4b24      	ldr	r3, [pc, #144]	; (8004a20 <HAL_RCC_OscConfig+0x804>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e9      	bne.n	800496c <HAL_RCC_OscConfig+0x750>
 8004998:	e03d      	b.n	8004a16 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800499a:	4b21      	ldr	r3, [pc, #132]	; (8004a20 <HAL_RCC_OscConfig+0x804>)
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80049a0:	4b1f      	ldr	r3, [pc, #124]	; (8004a20 <HAL_RCC_OscConfig+0x804>)
 80049a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d031      	beq.n	8004a12 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f003 0203 	and.w	r2, r3, #3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d12a      	bne.n	8004a12 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	091b      	lsrs	r3, r3, #4
 80049c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d122      	bne.n	8004a12 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d11a      	bne.n	8004a12 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	0a5b      	lsrs	r3, r3, #9
 80049e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d111      	bne.n	8004a12 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	0c1b      	lsrs	r3, r3, #16
 80049f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d108      	bne.n	8004a12 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	0e1b      	lsrs	r3, r3, #24
 8004a04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d001      	beq.n	8004a16 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3730      	adds	r7, #48	; 0x30
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	58024400 	.word	0x58024400

08004a24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e19c      	b.n	8004d72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a38:	4b8a      	ldr	r3, [pc, #552]	; (8004c64 <HAL_RCC_ClockConfig+0x240>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d910      	bls.n	8004a68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a46:	4b87      	ldr	r3, [pc, #540]	; (8004c64 <HAL_RCC_ClockConfig+0x240>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f023 020f 	bic.w	r2, r3, #15
 8004a4e:	4985      	ldr	r1, [pc, #532]	; (8004c64 <HAL_RCC_ClockConfig+0x240>)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a56:	4b83      	ldr	r3, [pc, #524]	; (8004c64 <HAL_RCC_ClockConfig+0x240>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d001      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e184      	b.n	8004d72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d010      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	4b7b      	ldr	r3, [pc, #492]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d908      	bls.n	8004a96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a84:	4b78      	ldr	r3, [pc, #480]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	4975      	ldr	r1, [pc, #468]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d010      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	695a      	ldr	r2, [r3, #20]
 8004aa6:	4b70      	ldr	r3, [pc, #448]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d908      	bls.n	8004ac4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ab2:	4b6d      	ldr	r3, [pc, #436]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	496a      	ldr	r1, [pc, #424]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d010      	beq.n	8004af2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699a      	ldr	r2, [r3, #24]
 8004ad4:	4b64      	ldr	r3, [pc, #400]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d908      	bls.n	8004af2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ae0:	4b61      	ldr	r3, [pc, #388]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	495e      	ldr	r1, [pc, #376]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d010      	beq.n	8004b20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69da      	ldr	r2, [r3, #28]
 8004b02:	4b59      	ldr	r3, [pc, #356]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d908      	bls.n	8004b20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004b0e:	4b56      	ldr	r3, [pc, #344]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	4953      	ldr	r1, [pc, #332]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d010      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	4b4d      	ldr	r3, [pc, #308]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d908      	bls.n	8004b4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b3c:	4b4a      	ldr	r3, [pc, #296]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	f023 020f 	bic.w	r2, r3, #15
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	4947      	ldr	r1, [pc, #284]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d055      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004b5a:	4b43      	ldr	r3, [pc, #268]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	4940      	ldr	r1, [pc, #256]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d107      	bne.n	8004b84 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b74:	4b3c      	ldr	r3, [pc, #240]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d121      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e0f6      	b.n	8004d72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d107      	bne.n	8004b9c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b8c:	4b36      	ldr	r3, [pc, #216]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d115      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e0ea      	b.n	8004d72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d107      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ba4:	4b30      	ldr	r3, [pc, #192]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d109      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0de      	b.n	8004d72 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bb4:	4b2c      	ldr	r3, [pc, #176]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e0d6      	b.n	8004d72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bc4:	4b28      	ldr	r3, [pc, #160]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	f023 0207 	bic.w	r2, r3, #7
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	4925      	ldr	r1, [pc, #148]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd6:	f7fe ff89 	bl	8003aec <HAL_GetTick>
 8004bda:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bdc:	e00a      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bde:	f7fe ff85 	bl	8003aec <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e0be      	b.n	8004d72 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf4:	4b1c      	ldr	r3, [pc, #112]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d1eb      	bne.n	8004bde <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d010      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	4b14      	ldr	r3, [pc, #80]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d208      	bcs.n	8004c34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c22:	4b11      	ldr	r3, [pc, #68]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	f023 020f 	bic.w	r2, r3, #15
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	490e      	ldr	r1, [pc, #56]	; (8004c68 <HAL_RCC_ClockConfig+0x244>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c34:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <HAL_RCC_ClockConfig+0x240>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 030f 	and.w	r3, r3, #15
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d214      	bcs.n	8004c6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c42:	4b08      	ldr	r3, [pc, #32]	; (8004c64 <HAL_RCC_ClockConfig+0x240>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f023 020f 	bic.w	r2, r3, #15
 8004c4a:	4906      	ldr	r1, [pc, #24]	; (8004c64 <HAL_RCC_ClockConfig+0x240>)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c52:	4b04      	ldr	r3, [pc, #16]	; (8004c64 <HAL_RCC_ClockConfig+0x240>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e086      	b.n	8004d72 <HAL_RCC_ClockConfig+0x34e>
 8004c64:	52002000 	.word	0x52002000
 8004c68:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d010      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	4b3f      	ldr	r3, [pc, #252]	; (8004d7c <HAL_RCC_ClockConfig+0x358>)
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d208      	bcs.n	8004c9a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c88:	4b3c      	ldr	r3, [pc, #240]	; (8004d7c <HAL_RCC_ClockConfig+0x358>)
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	4939      	ldr	r1, [pc, #228]	; (8004d7c <HAL_RCC_ClockConfig+0x358>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d010      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695a      	ldr	r2, [r3, #20]
 8004caa:	4b34      	ldr	r3, [pc, #208]	; (8004d7c <HAL_RCC_ClockConfig+0x358>)
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d208      	bcs.n	8004cc8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cb6:	4b31      	ldr	r3, [pc, #196]	; (8004d7c <HAL_RCC_ClockConfig+0x358>)
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	492e      	ldr	r1, [pc, #184]	; (8004d7c <HAL_RCC_ClockConfig+0x358>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d010      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699a      	ldr	r2, [r3, #24]
 8004cd8:	4b28      	ldr	r3, [pc, #160]	; (8004d7c <HAL_RCC_ClockConfig+0x358>)
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d208      	bcs.n	8004cf6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ce4:	4b25      	ldr	r3, [pc, #148]	; (8004d7c <HAL_RCC_ClockConfig+0x358>)
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	4922      	ldr	r1, [pc, #136]	; (8004d7c <HAL_RCC_ClockConfig+0x358>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d010      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69da      	ldr	r2, [r3, #28]
 8004d06:	4b1d      	ldr	r3, [pc, #116]	; (8004d7c <HAL_RCC_ClockConfig+0x358>)
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d208      	bcs.n	8004d24 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004d12:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <HAL_RCC_ClockConfig+0x358>)
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	4917      	ldr	r1, [pc, #92]	; (8004d7c <HAL_RCC_ClockConfig+0x358>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004d24:	f000 f834 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	4b14      	ldr	r3, [pc, #80]	; (8004d7c <HAL_RCC_ClockConfig+0x358>)
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	0a1b      	lsrs	r3, r3, #8
 8004d30:	f003 030f 	and.w	r3, r3, #15
 8004d34:	4912      	ldr	r1, [pc, #72]	; (8004d80 <HAL_RCC_ClockConfig+0x35c>)
 8004d36:	5ccb      	ldrb	r3, [r1, r3]
 8004d38:	f003 031f 	and.w	r3, r3, #31
 8004d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d40:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004d42:	4b0e      	ldr	r3, [pc, #56]	; (8004d7c <HAL_RCC_ClockConfig+0x358>)
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	4a0d      	ldr	r2, [pc, #52]	; (8004d80 <HAL_RCC_ClockConfig+0x35c>)
 8004d4c:	5cd3      	ldrb	r3, [r2, r3]
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	fa22 f303 	lsr.w	r3, r2, r3
 8004d58:	4a0a      	ldr	r2, [pc, #40]	; (8004d84 <HAL_RCC_ClockConfig+0x360>)
 8004d5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d5c:	4a0a      	ldr	r2, [pc, #40]	; (8004d88 <HAL_RCC_ClockConfig+0x364>)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004d62:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <HAL_RCC_ClockConfig+0x368>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fe fe76 	bl	8003a58 <HAL_InitTick>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3718      	adds	r7, #24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	58024400 	.word	0x58024400
 8004d80:	08019830 	.word	0x08019830
 8004d84:	24000074 	.word	0x24000074
 8004d88:	24000070 	.word	0x24000070
 8004d8c:	24000078 	.word	0x24000078

08004d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b089      	sub	sp, #36	; 0x24
 8004d94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d96:	4bb3      	ldr	r3, [pc, #716]	; (8005064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d9e:	2b18      	cmp	r3, #24
 8004da0:	f200 8155 	bhi.w	800504e <HAL_RCC_GetSysClockFreq+0x2be>
 8004da4:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <HAL_RCC_GetSysClockFreq+0x1c>)
 8004da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08004e11 	.word	0x08004e11
 8004db0:	0800504f 	.word	0x0800504f
 8004db4:	0800504f 	.word	0x0800504f
 8004db8:	0800504f 	.word	0x0800504f
 8004dbc:	0800504f 	.word	0x0800504f
 8004dc0:	0800504f 	.word	0x0800504f
 8004dc4:	0800504f 	.word	0x0800504f
 8004dc8:	0800504f 	.word	0x0800504f
 8004dcc:	08004e37 	.word	0x08004e37
 8004dd0:	0800504f 	.word	0x0800504f
 8004dd4:	0800504f 	.word	0x0800504f
 8004dd8:	0800504f 	.word	0x0800504f
 8004ddc:	0800504f 	.word	0x0800504f
 8004de0:	0800504f 	.word	0x0800504f
 8004de4:	0800504f 	.word	0x0800504f
 8004de8:	0800504f 	.word	0x0800504f
 8004dec:	08004e3d 	.word	0x08004e3d
 8004df0:	0800504f 	.word	0x0800504f
 8004df4:	0800504f 	.word	0x0800504f
 8004df8:	0800504f 	.word	0x0800504f
 8004dfc:	0800504f 	.word	0x0800504f
 8004e00:	0800504f 	.word	0x0800504f
 8004e04:	0800504f 	.word	0x0800504f
 8004e08:	0800504f 	.word	0x0800504f
 8004e0c:	08004e43 	.word	0x08004e43
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e10:	4b94      	ldr	r3, [pc, #592]	; (8005064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d009      	beq.n	8004e30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e1c:	4b91      	ldr	r3, [pc, #580]	; (8005064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	08db      	lsrs	r3, r3, #3
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	4a90      	ldr	r2, [pc, #576]	; (8005068 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004e2e:	e111      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004e30:	4b8d      	ldr	r3, [pc, #564]	; (8005068 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e32:	61bb      	str	r3, [r7, #24]
    break;
 8004e34:	e10e      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004e36:	4b8d      	ldr	r3, [pc, #564]	; (800506c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e38:	61bb      	str	r3, [r7, #24]
    break;
 8004e3a:	e10b      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004e3c:	4b8c      	ldr	r3, [pc, #560]	; (8005070 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004e3e:	61bb      	str	r3, [r7, #24]
    break;
 8004e40:	e108      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e42:	4b88      	ldr	r3, [pc, #544]	; (8005064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004e4c:	4b85      	ldr	r3, [pc, #532]	; (8005064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	091b      	lsrs	r3, r3, #4
 8004e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e56:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004e58:	4b82      	ldr	r3, [pc, #520]	; (8005064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004e62:	4b80      	ldr	r3, [pc, #512]	; (8005064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e66:	08db      	lsrs	r3, r3, #3
 8004e68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	fb02 f303 	mul.w	r3, r2, r3
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80e1 	beq.w	8005048 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	f000 8083 	beq.w	8004f94 <HAL_RCC_GetSysClockFreq+0x204>
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	f200 80a1 	bhi.w	8004fd8 <HAL_RCC_GetSysClockFreq+0x248>
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x114>
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d056      	beq.n	8004f50 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004ea2:	e099      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ea4:	4b6f      	ldr	r3, [pc, #444]	; (8005064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0320 	and.w	r3, r3, #32
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d02d      	beq.n	8004f0c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004eb0:	4b6c      	ldr	r3, [pc, #432]	; (8005064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	08db      	lsrs	r3, r3, #3
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	4a6b      	ldr	r2, [pc, #428]	; (8005068 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	ee07 3a90 	vmov	s15, r3
 8004ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eda:	4b62      	ldr	r3, [pc, #392]	; (8005064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004f0a:	e087      	b.n	800501c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f16:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005078 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f1e:	4b51      	ldr	r3, [pc, #324]	; (8005064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f32:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f4e:	e065      	b.n	800501c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	ee07 3a90 	vmov	s15, r3
 8004f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800507c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f62:	4b40      	ldr	r3, [pc, #256]	; (8005064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f76:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f92:	e043      	b.n	800501c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	ee07 3a90 	vmov	s15, r3
 8004f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005080 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fa6:	4b2f      	ldr	r3, [pc, #188]	; (8005064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fd6:	e021      	b.n	800501c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	ee07 3a90 	vmov	s15, r3
 8004fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800507c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fea:	4b1e      	ldr	r3, [pc, #120]	; (8005064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ffe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800500a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800500e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800501a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800501c:	4b11      	ldr	r3, [pc, #68]	; (8005064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800501e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005020:	0a5b      	lsrs	r3, r3, #9
 8005022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005026:	3301      	adds	r3, #1
 8005028:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	ee07 3a90 	vmov	s15, r3
 8005030:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005034:	edd7 6a07 	vldr	s13, [r7, #28]
 8005038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800503c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005040:	ee17 3a90 	vmov	r3, s15
 8005044:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005046:	e005      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	61bb      	str	r3, [r7, #24]
    break;
 800504c:	e002      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800504e:	4b07      	ldr	r3, [pc, #28]	; (800506c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005050:	61bb      	str	r3, [r7, #24]
    break;
 8005052:	bf00      	nop
  }

  return sysclockfreq;
 8005054:	69bb      	ldr	r3, [r7, #24]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3724      	adds	r7, #36	; 0x24
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	58024400 	.word	0x58024400
 8005068:	03d09000 	.word	0x03d09000
 800506c:	003d0900 	.word	0x003d0900
 8005070:	007a1200 	.word	0x007a1200
 8005074:	46000000 	.word	0x46000000
 8005078:	4c742400 	.word	0x4c742400
 800507c:	4a742400 	.word	0x4a742400
 8005080:	4af42400 	.word	0x4af42400

08005084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800508a:	f7ff fe81 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 800508e:	4602      	mov	r2, r0
 8005090:	4b10      	ldr	r3, [pc, #64]	; (80050d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	0a1b      	lsrs	r3, r3, #8
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	490f      	ldr	r1, [pc, #60]	; (80050d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800509c:	5ccb      	ldrb	r3, [r1, r3]
 800509e:	f003 031f 	and.w	r3, r3, #31
 80050a2:	fa22 f303 	lsr.w	r3, r2, r3
 80050a6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80050a8:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	f003 030f 	and.w	r3, r3, #15
 80050b0:	4a09      	ldr	r2, [pc, #36]	; (80050d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80050b2:	5cd3      	ldrb	r3, [r2, r3]
 80050b4:	f003 031f 	and.w	r3, r3, #31
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	fa22 f303 	lsr.w	r3, r2, r3
 80050be:	4a07      	ldr	r2, [pc, #28]	; (80050dc <HAL_RCC_GetHCLKFreq+0x58>)
 80050c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050c2:	4a07      	ldr	r2, [pc, #28]	; (80050e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80050c8:	4b04      	ldr	r3, [pc, #16]	; (80050dc <HAL_RCC_GetHCLKFreq+0x58>)
 80050ca:	681b      	ldr	r3, [r3, #0]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	58024400 	.word	0x58024400
 80050d8:	08019830 	.word	0x08019830
 80050dc:	24000074 	.word	0x24000074
 80050e0:	24000070 	.word	0x24000070

080050e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80050e8:	f7ff ffcc 	bl	8005084 <HAL_RCC_GetHCLKFreq>
 80050ec:	4602      	mov	r2, r0
 80050ee:	4b06      	ldr	r3, [pc, #24]	; (8005108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	091b      	lsrs	r3, r3, #4
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	4904      	ldr	r1, [pc, #16]	; (800510c <HAL_RCC_GetPCLK1Freq+0x28>)
 80050fa:	5ccb      	ldrb	r3, [r1, r3]
 80050fc:	f003 031f 	and.w	r3, r3, #31
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005104:	4618      	mov	r0, r3
 8005106:	bd80      	pop	{r7, pc}
 8005108:	58024400 	.word	0x58024400
 800510c:	08019830 	.word	0x08019830

08005110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005114:	f7ff ffb6 	bl	8005084 <HAL_RCC_GetHCLKFreq>
 8005118:	4602      	mov	r2, r0
 800511a:	4b06      	ldr	r3, [pc, #24]	; (8005134 <HAL_RCC_GetPCLK2Freq+0x24>)
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	0a1b      	lsrs	r3, r3, #8
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	4904      	ldr	r1, [pc, #16]	; (8005138 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005126:	5ccb      	ldrb	r3, [r1, r3]
 8005128:	f003 031f 	and.w	r3, r3, #31
 800512c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005130:	4618      	mov	r0, r3
 8005132:	bd80      	pop	{r7, pc}
 8005134:	58024400 	.word	0x58024400
 8005138:	08019830 	.word	0x08019830

0800513c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005144:	2300      	movs	r3, #0
 8005146:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005148:	2300      	movs	r3, #0
 800514a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d03f      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800515c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005160:	d02a      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005162:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005166:	d824      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005168:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800516c:	d018      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800516e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005172:	d81e      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800517c:	d007      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800517e:	e018      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005180:	4b9f      	ldr	r3, [pc, #636]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005184:	4a9e      	ldr	r2, [pc, #632]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800518a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800518c:	e015      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3304      	adds	r3, #4
 8005192:	2102      	movs	r1, #2
 8005194:	4618      	mov	r0, r3
 8005196:	f001 f99b 	bl	80064d0 <RCCEx_PLL2_Config>
 800519a:	4603      	mov	r3, r0
 800519c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800519e:	e00c      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3324      	adds	r3, #36	; 0x24
 80051a4:	2102      	movs	r1, #2
 80051a6:	4618      	mov	r0, r3
 80051a8:	f001 fa44 	bl	8006634 <RCCEx_PLL3_Config>
 80051ac:	4603      	mov	r3, r0
 80051ae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80051b0:	e003      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	75fb      	strb	r3, [r7, #23]
      break;
 80051b6:	e000      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80051b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051ba:	7dfb      	ldrb	r3, [r7, #23]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d109      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80051c0:	4b8f      	ldr	r3, [pc, #572]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051cc:	498c      	ldr	r1, [pc, #560]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	650b      	str	r3, [r1, #80]	; 0x50
 80051d2:	e001      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d4:	7dfb      	ldrb	r3, [r7, #23]
 80051d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d03d      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d826      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80051ec:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80051ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f2:	bf00      	nop
 80051f4:	08005209 	.word	0x08005209
 80051f8:	08005217 	.word	0x08005217
 80051fc:	08005229 	.word	0x08005229
 8005200:	08005241 	.word	0x08005241
 8005204:	08005241 	.word	0x08005241
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005208:	4b7d      	ldr	r3, [pc, #500]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	4a7c      	ldr	r2, [pc, #496]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800520e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005212:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005214:	e015      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3304      	adds	r3, #4
 800521a:	2100      	movs	r1, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f001 f957 	bl	80064d0 <RCCEx_PLL2_Config>
 8005222:	4603      	mov	r3, r0
 8005224:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005226:	e00c      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3324      	adds	r3, #36	; 0x24
 800522c:	2100      	movs	r1, #0
 800522e:	4618      	mov	r0, r3
 8005230:	f001 fa00 	bl	8006634 <RCCEx_PLL3_Config>
 8005234:	4603      	mov	r3, r0
 8005236:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005238:	e003      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	75fb      	strb	r3, [r7, #23]
      break;
 800523e:	e000      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005240:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005242:	7dfb      	ldrb	r3, [r7, #23]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d109      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005248:	4b6d      	ldr	r3, [pc, #436]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800524a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800524c:	f023 0207 	bic.w	r2, r3, #7
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005254:	496a      	ldr	r1, [pc, #424]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005256:	4313      	orrs	r3, r2
 8005258:	650b      	str	r3, [r1, #80]	; 0x50
 800525a:	e001      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525c:	7dfb      	ldrb	r3, [r7, #23]
 800525e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005268:	2b00      	cmp	r3, #0
 800526a:	d04a      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005270:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005274:	d031      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005276:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800527a:	d82b      	bhi.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800527c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005280:	d02d      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8005282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005286:	d825      	bhi.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005288:	2bc0      	cmp	r3, #192	; 0xc0
 800528a:	d02a      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800528c:	2bc0      	cmp	r3, #192	; 0xc0
 800528e:	d821      	bhi.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005290:	2b80      	cmp	r3, #128	; 0x80
 8005292:	d016      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005294:	2b80      	cmp	r3, #128	; 0x80
 8005296:	d81d      	bhi.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800529c:	2b40      	cmp	r3, #64	; 0x40
 800529e:	d007      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80052a0:	e018      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052a2:	4b57      	ldr	r3, [pc, #348]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a6:	4a56      	ldr	r2, [pc, #344]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80052ae:	e019      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3304      	adds	r3, #4
 80052b4:	2100      	movs	r1, #0
 80052b6:	4618      	mov	r0, r3
 80052b8:	f001 f90a 	bl	80064d0 <RCCEx_PLL2_Config>
 80052bc:	4603      	mov	r3, r0
 80052be:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80052c0:	e010      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3324      	adds	r3, #36	; 0x24
 80052c6:	2100      	movs	r1, #0
 80052c8:	4618      	mov	r0, r3
 80052ca:	f001 f9b3 	bl	8006634 <RCCEx_PLL3_Config>
 80052ce:	4603      	mov	r3, r0
 80052d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80052d2:	e007      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	75fb      	strb	r3, [r7, #23]
      break;
 80052d8:	e004      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80052da:	bf00      	nop
 80052dc:	e002      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80052de:	bf00      	nop
 80052e0:	e000      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80052e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052e4:	7dfb      	ldrb	r3, [r7, #23]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80052ea:	4b45      	ldr	r3, [pc, #276]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ee:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f6:	4942      	ldr	r1, [pc, #264]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	650b      	str	r3, [r1, #80]	; 0x50
 80052fc:	e001      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fe:	7dfb      	ldrb	r3, [r7, #23]
 8005300:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800530a:	2b00      	cmp	r3, #0
 800530c:	d04f      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005312:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005316:	d036      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005318:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800531c:	d830      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800531e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005322:	d032      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8005324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005328:	d82a      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800532a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800532e:	d02e      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x252>
 8005330:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005334:	d824      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533a:	d018      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x232>
 800533c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005340:	d81e      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8005346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800534a:	d007      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x220>
 800534c:	e018      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800534e:	4b2c      	ldr	r3, [pc, #176]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	4a2b      	ldr	r2, [pc, #172]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005358:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800535a:	e019      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3304      	adds	r3, #4
 8005360:	2100      	movs	r1, #0
 8005362:	4618      	mov	r0, r3
 8005364:	f001 f8b4 	bl	80064d0 <RCCEx_PLL2_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800536c:	e010      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3324      	adds	r3, #36	; 0x24
 8005372:	2100      	movs	r1, #0
 8005374:	4618      	mov	r0, r3
 8005376:	f001 f95d 	bl	8006634 <RCCEx_PLL3_Config>
 800537a:	4603      	mov	r3, r0
 800537c:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800537e:	e007      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	75fb      	strb	r3, [r7, #23]
      break;
 8005384:	e004      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005386:	bf00      	nop
 8005388:	e002      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800538a:	bf00      	nop
 800538c:	e000      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800538e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005390:	7dfb      	ldrb	r3, [r7, #23]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005396:	4b1a      	ldr	r3, [pc, #104]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539a:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a2:	4917      	ldr	r1, [pc, #92]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	650b      	str	r3, [r1, #80]	; 0x50
 80053a8:	e001      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053aa:	7dfb      	ldrb	r3, [r7, #23]
 80053ac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d034      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053be:	2b30      	cmp	r3, #48	; 0x30
 80053c0:	d01c      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80053c2:	2b30      	cmp	r3, #48	; 0x30
 80053c4:	d817      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	d00c      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	d813      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d018      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80053d2:	2b10      	cmp	r3, #16
 80053d4:	d10f      	bne.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053d6:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053da:	4a09      	ldr	r2, [pc, #36]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80053dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80053e2:	e010      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3304      	adds	r3, #4
 80053e8:	2102      	movs	r1, #2
 80053ea:	4618      	mov	r0, r3
 80053ec:	f001 f870 	bl	80064d0 <RCCEx_PLL2_Config>
 80053f0:	4603      	mov	r3, r0
 80053f2:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80053f4:	e007      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	75fb      	strb	r3, [r7, #23]
      break;
 80053fa:	e004      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 80053fc:	bf00      	nop
 80053fe:	e002      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005400:	58024400 	.word	0x58024400
      break;
 8005404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005406:	7dfb      	ldrb	r3, [r7, #23]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d109      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800540c:	4b9b      	ldr	r3, [pc, #620]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800540e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005410:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005418:	4998      	ldr	r1, [pc, #608]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800541a:	4313      	orrs	r3, r2
 800541c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800541e:	e001      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005420:	7dfb      	ldrb	r3, [r7, #23]
 8005422:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d047      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005438:	d030      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800543a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800543e:	d82a      	bhi.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005440:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005444:	d02c      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8005446:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800544a:	d824      	bhi.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800544c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005450:	d018      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005456:	d81e      	bhi.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800545c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005460:	d007      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005462:	e018      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005464:	4b85      	ldr	r3, [pc, #532]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	4a84      	ldr	r2, [pc, #528]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800546a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800546e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005470:	e017      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3304      	adds	r3, #4
 8005476:	2100      	movs	r1, #0
 8005478:	4618      	mov	r0, r3
 800547a:	f001 f829 	bl	80064d0 <RCCEx_PLL2_Config>
 800547e:	4603      	mov	r3, r0
 8005480:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005482:	e00e      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3324      	adds	r3, #36	; 0x24
 8005488:	2100      	movs	r1, #0
 800548a:	4618      	mov	r0, r3
 800548c:	f001 f8d2 	bl	8006634 <RCCEx_PLL3_Config>
 8005490:	4603      	mov	r3, r0
 8005492:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005494:	e005      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	75fb      	strb	r3, [r7, #23]
      break;
 800549a:	e002      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800549c:	bf00      	nop
 800549e:	e000      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80054a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054a2:	7dfb      	ldrb	r3, [r7, #23]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d109      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80054a8:	4b74      	ldr	r3, [pc, #464]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80054aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ac:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b4:	4971      	ldr	r1, [pc, #452]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	650b      	str	r3, [r1, #80]	; 0x50
 80054ba:	e001      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054bc:	7dfb      	ldrb	r3, [r7, #23]
 80054be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d049      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054d4:	d02e      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80054d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054da:	d828      	bhi.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80054dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054e0:	d02a      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80054e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054e6:	d822      	bhi.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80054e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054ec:	d026      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x400>
 80054ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054f2:	d81c      	bhi.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80054f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054f8:	d010      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80054fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054fe:	d816      	bhi.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005500:	2b00      	cmp	r3, #0
 8005502:	d01d      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005508:	d111      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3304      	adds	r3, #4
 800550e:	2101      	movs	r1, #1
 8005510:	4618      	mov	r0, r3
 8005512:	f000 ffdd 	bl	80064d0 <RCCEx_PLL2_Config>
 8005516:	4603      	mov	r3, r0
 8005518:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800551a:	e012      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3324      	adds	r3, #36	; 0x24
 8005520:	2101      	movs	r1, #1
 8005522:	4618      	mov	r0, r3
 8005524:	f001 f886 	bl	8006634 <RCCEx_PLL3_Config>
 8005528:	4603      	mov	r3, r0
 800552a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800552c:	e009      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	75fb      	strb	r3, [r7, #23]
      break;
 8005532:	e006      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005534:	bf00      	nop
 8005536:	e004      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005538:	bf00      	nop
 800553a:	e002      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800553c:	bf00      	nop
 800553e:	e000      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005542:	7dfb      	ldrb	r3, [r7, #23]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d109      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005548:	4b4c      	ldr	r3, [pc, #304]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800554a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800554c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005554:	4949      	ldr	r1, [pc, #292]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005556:	4313      	orrs	r3, r2
 8005558:	650b      	str	r3, [r1, #80]	; 0x50
 800555a:	e001      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555c:	7dfb      	ldrb	r3, [r7, #23]
 800555e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d053      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005572:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005576:	d034      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005578:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800557c:	d82e      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800557e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005582:	d030      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005584:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005588:	d828      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800558a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558e:	d02c      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005594:	d822      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005596:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800559a:	d028      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800559c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055a0:	d81c      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80055a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055a6:	d010      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80055a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ac:	d816      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01f      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80055b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055b6:	d111      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3304      	adds	r3, #4
 80055bc:	2101      	movs	r1, #1
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 ff86 	bl	80064d0 <RCCEx_PLL2_Config>
 80055c4:	4603      	mov	r3, r0
 80055c6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80055c8:	e014      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	3324      	adds	r3, #36	; 0x24
 80055ce:	2101      	movs	r1, #1
 80055d0:	4618      	mov	r0, r3
 80055d2:	f001 f82f 	bl	8006634 <RCCEx_PLL3_Config>
 80055d6:	4603      	mov	r3, r0
 80055d8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80055da:	e00b      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	75fb      	strb	r3, [r7, #23]
      break;
 80055e0:	e008      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80055e2:	bf00      	nop
 80055e4:	e006      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80055e6:	bf00      	nop
 80055e8:	e004      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80055ea:	bf00      	nop
 80055ec:	e002      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80055ee:	bf00      	nop
 80055f0:	e000      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80055f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055f4:	7dfb      	ldrb	r3, [r7, #23]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10a      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80055fa:	4b20      	ldr	r3, [pc, #128]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80055fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005608:	491c      	ldr	r1, [pc, #112]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800560a:	4313      	orrs	r3, r2
 800560c:	658b      	str	r3, [r1, #88]	; 0x58
 800560e:	e001      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005610:	7dfb      	ldrb	r3, [r7, #23]
 8005612:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d031      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005628:	d00e      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800562a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800562e:	d814      	bhi.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005630:	2b00      	cmp	r3, #0
 8005632:	d015      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005634:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005638:	d10f      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800563a:	4b10      	ldr	r3, [pc, #64]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	4a0f      	ldr	r2, [pc, #60]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005644:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005646:	e00c      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	2101      	movs	r1, #1
 800564e:	4618      	mov	r0, r3
 8005650:	f000 ff3e 	bl	80064d0 <RCCEx_PLL2_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005658:	e003      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	75fb      	strb	r3, [r7, #23]
      break;
 800565e:	e000      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8005660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005662:	7dfb      	ldrb	r3, [r7, #23]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10b      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005668:	4b04      	ldr	r3, [pc, #16]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800566a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800566c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005674:	4901      	ldr	r1, [pc, #4]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005676:	4313      	orrs	r3, r2
 8005678:	650b      	str	r3, [r1, #80]	; 0x50
 800567a:	e003      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x548>
 800567c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005680:	7dfb      	ldrb	r3, [r7, #23]
 8005682:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d032      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005694:	2b03      	cmp	r3, #3
 8005696:	d81b      	bhi.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005698:	a201      	add	r2, pc, #4	; (adr r2, 80056a0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800569a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569e:	bf00      	nop
 80056a0:	080056d7 	.word	0x080056d7
 80056a4:	080056b1 	.word	0x080056b1
 80056a8:	080056bf 	.word	0x080056bf
 80056ac:	080056d7 	.word	0x080056d7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056b0:	4bb2      	ldr	r3, [pc, #712]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	4ab1      	ldr	r2, [pc, #708]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80056b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80056bc:	e00c      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	3304      	adds	r3, #4
 80056c2:	2102      	movs	r1, #2
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 ff03 	bl	80064d0 <RCCEx_PLL2_Config>
 80056ca:	4603      	mov	r3, r0
 80056cc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80056ce:	e003      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	75fb      	strb	r3, [r7, #23]
      break;
 80056d4:	e000      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80056d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d109      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80056de:	4ba7      	ldr	r3, [pc, #668]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80056e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e2:	f023 0203 	bic.w	r2, r3, #3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ea:	49a4      	ldr	r1, [pc, #656]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80056f0:	e001      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f2:	7dfb      	ldrb	r3, [r7, #23]
 80056f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 8086 	beq.w	8005810 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005704:	4b9e      	ldr	r3, [pc, #632]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a9d      	ldr	r2, [pc, #628]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800570a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005710:	f7fe f9ec 	bl	8003aec <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005716:	e009      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005718:	f7fe f9e8 	bl	8003aec <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b64      	cmp	r3, #100	; 0x64
 8005724:	d902      	bls.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	75fb      	strb	r3, [r7, #23]
        break;
 800572a:	e005      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800572c:	4b94      	ldr	r3, [pc, #592]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0ef      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8005738:	7dfb      	ldrb	r3, [r7, #23]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d166      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800573e:	4b8f      	ldr	r3, [pc, #572]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005740:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005748:	4053      	eors	r3, r2
 800574a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800574e:	2b00      	cmp	r3, #0
 8005750:	d013      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005752:	4b8a      	ldr	r3, [pc, #552]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800575c:	4b87      	ldr	r3, [pc, #540]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800575e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005760:	4a86      	ldr	r2, [pc, #536]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005766:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005768:	4b84      	ldr	r3, [pc, #528]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800576a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576c:	4a83      	ldr	r2, [pc, #524]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800576e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005772:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005774:	4a81      	ldr	r2, [pc, #516]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005784:	d115      	bne.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005786:	f7fe f9b1 	bl	8003aec <HAL_GetTick>
 800578a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800578c:	e00b      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800578e:	f7fe f9ad 	bl	8003aec <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	f241 3288 	movw	r2, #5000	; 0x1388
 800579c:	4293      	cmp	r3, r2
 800579e:	d902      	bls.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	75fb      	strb	r3, [r7, #23]
            break;
 80057a4:	e005      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057a6:	4b75      	ldr	r3, [pc, #468]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80057a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0ed      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 80057b2:	7dfb      	ldrb	r3, [r7, #23]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d126      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057c6:	d10d      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 80057c8:	4b6c      	ldr	r3, [pc, #432]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057d6:	0919      	lsrs	r1, r3, #4
 80057d8:	4b6a      	ldr	r3, [pc, #424]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80057da:	400b      	ands	r3, r1
 80057dc:	4967      	ldr	r1, [pc, #412]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	610b      	str	r3, [r1, #16]
 80057e2:	e005      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 80057e4:	4b65      	ldr	r3, [pc, #404]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	4a64      	ldr	r2, [pc, #400]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80057ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80057ee:	6113      	str	r3, [r2, #16]
 80057f0:	4b62      	ldr	r3, [pc, #392]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80057f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057fe:	495f      	ldr	r1, [pc, #380]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005800:	4313      	orrs	r3, r2
 8005802:	670b      	str	r3, [r1, #112]	; 0x70
 8005804:	e004      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005806:	7dfb      	ldrb	r3, [r7, #23]
 8005808:	75bb      	strb	r3, [r7, #22]
 800580a:	e001      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580c:	7dfb      	ldrb	r3, [r7, #23]
 800580e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d07f      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005822:	2b28      	cmp	r3, #40	; 0x28
 8005824:	d866      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8005826:	a201      	add	r2, pc, #4	; (adr r2, 800582c <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8005828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582c:	080058fb 	.word	0x080058fb
 8005830:	080058f5 	.word	0x080058f5
 8005834:	080058f5 	.word	0x080058f5
 8005838:	080058f5 	.word	0x080058f5
 800583c:	080058f5 	.word	0x080058f5
 8005840:	080058f5 	.word	0x080058f5
 8005844:	080058f5 	.word	0x080058f5
 8005848:	080058f5 	.word	0x080058f5
 800584c:	080058d1 	.word	0x080058d1
 8005850:	080058f5 	.word	0x080058f5
 8005854:	080058f5 	.word	0x080058f5
 8005858:	080058f5 	.word	0x080058f5
 800585c:	080058f5 	.word	0x080058f5
 8005860:	080058f5 	.word	0x080058f5
 8005864:	080058f5 	.word	0x080058f5
 8005868:	080058f5 	.word	0x080058f5
 800586c:	080058e3 	.word	0x080058e3
 8005870:	080058f5 	.word	0x080058f5
 8005874:	080058f5 	.word	0x080058f5
 8005878:	080058f5 	.word	0x080058f5
 800587c:	080058f5 	.word	0x080058f5
 8005880:	080058f5 	.word	0x080058f5
 8005884:	080058f5 	.word	0x080058f5
 8005888:	080058f5 	.word	0x080058f5
 800588c:	080058fb 	.word	0x080058fb
 8005890:	080058f5 	.word	0x080058f5
 8005894:	080058f5 	.word	0x080058f5
 8005898:	080058f5 	.word	0x080058f5
 800589c:	080058f5 	.word	0x080058f5
 80058a0:	080058f5 	.word	0x080058f5
 80058a4:	080058f5 	.word	0x080058f5
 80058a8:	080058f5 	.word	0x080058f5
 80058ac:	080058fb 	.word	0x080058fb
 80058b0:	080058f5 	.word	0x080058f5
 80058b4:	080058f5 	.word	0x080058f5
 80058b8:	080058f5 	.word	0x080058f5
 80058bc:	080058f5 	.word	0x080058f5
 80058c0:	080058f5 	.word	0x080058f5
 80058c4:	080058f5 	.word	0x080058f5
 80058c8:	080058f5 	.word	0x080058f5
 80058cc:	080058fb 	.word	0x080058fb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3304      	adds	r3, #4
 80058d4:	2101      	movs	r1, #1
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fdfa 	bl	80064d0 <RCCEx_PLL2_Config>
 80058dc:	4603      	mov	r3, r0
 80058de:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80058e0:	e00c      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3324      	adds	r3, #36	; 0x24
 80058e6:	2101      	movs	r1, #1
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fea3 	bl	8006634 <RCCEx_PLL3_Config>
 80058ee:	4603      	mov	r3, r0
 80058f0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80058f2:	e003      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	75fb      	strb	r3, [r7, #23]
      break;
 80058f8:	e000      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 80058fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058fc:	7dfb      	ldrb	r3, [r7, #23]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10a      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005902:	4b1e      	ldr	r3, [pc, #120]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005906:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005910:	491a      	ldr	r1, [pc, #104]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005912:	4313      	orrs	r3, r2
 8005914:	654b      	str	r3, [r1, #84]	; 0x54
 8005916:	e001      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005918:	7dfb      	ldrb	r3, [r7, #23]
 800591a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d03f      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800592c:	2b05      	cmp	r3, #5
 800592e:	d821      	bhi.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8005930:	a201      	add	r2, pc, #4	; (adr r2, 8005938 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8005932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005936:	bf00      	nop
 8005938:	08005989 	.word	0x08005989
 800593c:	08005951 	.word	0x08005951
 8005940:	08005963 	.word	0x08005963
 8005944:	08005989 	.word	0x08005989
 8005948:	08005989 	.word	0x08005989
 800594c:	08005989 	.word	0x08005989
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3304      	adds	r3, #4
 8005954:	2101      	movs	r1, #1
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fdba 	bl	80064d0 <RCCEx_PLL2_Config>
 800595c:	4603      	mov	r3, r0
 800595e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005960:	e013      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3324      	adds	r3, #36	; 0x24
 8005966:	2101      	movs	r1, #1
 8005968:	4618      	mov	r0, r3
 800596a:	f000 fe63 	bl	8006634 <RCCEx_PLL3_Config>
 800596e:	4603      	mov	r3, r0
 8005970:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005972:	e00a      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	75fb      	strb	r3, [r7, #23]
      break;
 8005978:	e007      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800597a:	bf00      	nop
 800597c:	58024400 	.word	0x58024400
 8005980:	58024800 	.word	0x58024800
 8005984:	00ffffcf 	.word	0x00ffffcf
      break;
 8005988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800598a:	7dfb      	ldrb	r3, [r7, #23]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d109      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005990:	4b9f      	ldr	r3, [pc, #636]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005994:	f023 0207 	bic.w	r2, r3, #7
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800599c:	499c      	ldr	r1, [pc, #624]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	654b      	str	r3, [r1, #84]	; 0x54
 80059a2:	e001      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a4:	7dfb      	ldrb	r3, [r7, #23]
 80059a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d039      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059ba:	2b05      	cmp	r3, #5
 80059bc:	d820      	bhi.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80059be:	a201      	add	r2, pc, #4	; (adr r2, 80059c4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80059c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c4:	08005a07 	.word	0x08005a07
 80059c8:	080059dd 	.word	0x080059dd
 80059cc:	080059ef 	.word	0x080059ef
 80059d0:	08005a07 	.word	0x08005a07
 80059d4:	08005a07 	.word	0x08005a07
 80059d8:	08005a07 	.word	0x08005a07
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3304      	adds	r3, #4
 80059e0:	2101      	movs	r1, #1
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 fd74 	bl	80064d0 <RCCEx_PLL2_Config>
 80059e8:	4603      	mov	r3, r0
 80059ea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80059ec:	e00c      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3324      	adds	r3, #36	; 0x24
 80059f2:	2101      	movs	r1, #1
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 fe1d 	bl	8006634 <RCCEx_PLL3_Config>
 80059fa:	4603      	mov	r3, r0
 80059fc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80059fe:	e003      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	75fb      	strb	r3, [r7, #23]
      break;
 8005a04:	e000      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8005a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10a      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a0e:	4b80      	ldr	r3, [pc, #512]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a12:	f023 0207 	bic.w	r2, r3, #7
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a1c:	497c      	ldr	r1, [pc, #496]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	658b      	str	r3, [r1, #88]	; 0x58
 8005a22:	e001      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
 8005a26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0320 	and.w	r3, r3, #32
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d04b      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a3e:	d02e      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x962>
 8005a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a44:	d828      	bhi.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4a:	d02a      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a50:	d822      	bhi.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005a52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a56:	d026      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005a58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a5c:	d81c      	bhi.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a62:	d010      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8005a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a68:	d816      	bhi.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d01d      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a72:	d111      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3304      	adds	r3, #4
 8005a78:	2100      	movs	r1, #0
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fd28 	bl	80064d0 <RCCEx_PLL2_Config>
 8005a80:	4603      	mov	r3, r0
 8005a82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005a84:	e012      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	3324      	adds	r3, #36	; 0x24
 8005a8a:	2102      	movs	r1, #2
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 fdd1 	bl	8006634 <RCCEx_PLL3_Config>
 8005a92:	4603      	mov	r3, r0
 8005a94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005a96:	e009      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a9c:	e006      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005a9e:	bf00      	nop
 8005aa0:	e004      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005aa2:	bf00      	nop
 8005aa4:	e002      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005aa6:	bf00      	nop
 8005aa8:	e000      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aac:	7dfb      	ldrb	r3, [r7, #23]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ab2:	4b57      	ldr	r3, [pc, #348]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ac0:	4953      	ldr	r1, [pc, #332]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	654b      	str	r3, [r1, #84]	; 0x54
 8005ac6:	e001      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac8:	7dfb      	ldrb	r3, [r7, #23]
 8005aca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d04b      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ade:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005ae2:	d02e      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8005ae4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005ae8:	d828      	bhi.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aee:	d02a      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af4:	d822      	bhi.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005af6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005afa:	d026      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005afc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b00:	d81c      	bhi.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b06:	d010      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b0c:	d816      	bhi.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d01d      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b16:	d111      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fcd6 	bl	80064d0 <RCCEx_PLL2_Config>
 8005b24:	4603      	mov	r3, r0
 8005b26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005b28:	e012      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3324      	adds	r3, #36	; 0x24
 8005b2e:	2102      	movs	r1, #2
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fd7f 	bl	8006634 <RCCEx_PLL3_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005b3a:	e009      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b40:	e006      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005b42:	bf00      	nop
 8005b44:	e004      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005b46:	bf00      	nop
 8005b48:	e002      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005b4a:	bf00      	nop
 8005b4c:	e000      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10a      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b56:	4b2e      	ldr	r3, [pc, #184]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b64:	492a      	ldr	r1, [pc, #168]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	658b      	str	r3, [r1, #88]	; 0x58
 8005b6a:	e001      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6c:	7dfb      	ldrb	r3, [r7, #23]
 8005b6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d04d      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b82:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005b86:	d02e      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8005b88:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005b8c:	d828      	bhi.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b92:	d02a      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b98:	d822      	bhi.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005b9a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005b9e:	d026      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005ba0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ba4:	d81c      	bhi.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005ba6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005baa:	d010      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8005bac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bb0:	d816      	bhi.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d01d      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8005bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bba:	d111      	bne.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 fc84 	bl	80064d0 <RCCEx_PLL2_Config>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005bcc:	e012      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3324      	adds	r3, #36	; 0x24
 8005bd2:	2102      	movs	r1, #2
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 fd2d 	bl	8006634 <RCCEx_PLL3_Config>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005bde:	e009      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	75fb      	strb	r3, [r7, #23]
      break;
 8005be4:	e006      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005be6:	bf00      	nop
 8005be8:	e004      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005bea:	bf00      	nop
 8005bec:	e002      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005bee:	bf00      	nop
 8005bf0:	e000      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005bf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bf4:	7dfb      	ldrb	r3, [r7, #23]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10c      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005bfa:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c08:	4901      	ldr	r1, [pc, #4]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	658b      	str	r3, [r1, #88]	; 0x58
 8005c0e:	e003      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005c10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c14:	7dfb      	ldrb	r3, [r7, #23]
 8005c16:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0308 	and.w	r3, r3, #8
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d01a      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2e:	d10a      	bne.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3324      	adds	r3, #36	; 0x24
 8005c34:	2102      	movs	r1, #2
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 fcfc 	bl	8006634 <RCCEx_PLL3_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005c46:	4b8c      	ldr	r3, [pc, #560]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c54:	4988      	ldr	r1, [pc, #544]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0310 	and.w	r3, r3, #16
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d01a      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c70:	d10a      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	3324      	adds	r3, #36	; 0x24
 8005c76:	2102      	movs	r1, #2
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 fcdb 	bl	8006634 <RCCEx_PLL3_Config>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c88:	4b7b      	ldr	r3, [pc, #492]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c96:	4978      	ldr	r1, [pc, #480]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d034      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005cae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cb2:	d01d      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8005cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cb8:	d817      	bhi.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8005cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc2:	d009      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005cc4:	e011      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	2100      	movs	r1, #0
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 fbff 	bl	80064d0 <RCCEx_PLL2_Config>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005cd6:	e00c      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3324      	adds	r3, #36	; 0x24
 8005cdc:	2102      	movs	r1, #2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fca8 	bl	8006634 <RCCEx_PLL3_Config>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005ce8:	e003      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	75fb      	strb	r3, [r7, #23]
      break;
 8005cee:	e000      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8005cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cf2:	7dfb      	ldrb	r3, [r7, #23]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10a      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cf8:	4b5f      	ldr	r3, [pc, #380]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d06:	495c      	ldr	r1, [pc, #368]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	658b      	str	r3, [r1, #88]	; 0x58
 8005d0c:	e001      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0e:	7dfb      	ldrb	r3, [r7, #23]
 8005d10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d033      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d28:	d01c      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005d2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d2e:	d816      	bhi.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005d30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d34:	d003      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8005d36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d3a:	d007      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005d3c:	e00f      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d3e:	4b4e      	ldr	r3, [pc, #312]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d42:	4a4d      	ldr	r2, [pc, #308]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005d4a:	e00c      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	3324      	adds	r3, #36	; 0x24
 8005d50:	2101      	movs	r1, #1
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fc6e 	bl	8006634 <RCCEx_PLL3_Config>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005d5c:	e003      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	75fb      	strb	r3, [r7, #23]
      break;
 8005d62:	e000      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10a      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d6c:	4b42      	ldr	r3, [pc, #264]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d7a:	493f      	ldr	r1, [pc, #252]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	654b      	str	r3, [r1, #84]	; 0x54
 8005d80:	e001      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d82:	7dfb      	ldrb	r3, [r7, #23]
 8005d84:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d029      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8005d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9e:	d007      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005da0:	e00f      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da2:	4b35      	ldr	r3, [pc, #212]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da6:	4a34      	ldr	r2, [pc, #208]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005dae:	e00b      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3304      	adds	r3, #4
 8005db4:	2102      	movs	r1, #2
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fb8a 	bl	80064d0 <RCCEx_PLL2_Config>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005dc0:	e002      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8005dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dc8:	7dfb      	ldrb	r3, [r7, #23]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d109      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005dce:	4b2a      	ldr	r3, [pc, #168]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dda:	4927      	ldr	r1, [pc, #156]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005de0:	e001      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de2:	7dfb      	ldrb	r3, [r7, #23]
 8005de4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3324      	adds	r3, #36	; 0x24
 8005df6:	2102      	movs	r1, #2
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 fc1b 	bl	8006634 <RCCEx_PLL3_Config>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d035      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e1e:	d017      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005e20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e24:	d811      	bhi.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e2a:	d013      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8005e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e30:	d80b      	bhi.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d010      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8005e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e3a:	d106      	bne.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e3c:	4b0e      	ldr	r3, [pc, #56]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	4a0d      	ldr	r2, [pc, #52]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005e48:	e007      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e4e:	e004      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005e50:	bf00      	nop
 8005e52:	e002      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005e54:	bf00      	nop
 8005e56:	e000      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005e58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10d      	bne.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e60:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e6e:	4902      	ldr	r1, [pc, #8]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	654b      	str	r3, [r1, #84]	; 0x54
 8005e74:	e004      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005e76:	bf00      	nop
 8005e78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e7c:	7dfb      	ldrb	r3, [r7, #23]
 8005e7e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d008      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e8c:	4b30      	ldr	r3, [pc, #192]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e98:	492d      	ldr	r1, [pc, #180]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d008      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005eaa:	4b29      	ldr	r3, [pc, #164]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eb6:	4926      	ldr	r1, [pc, #152]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d008      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005ec8:	4b21      	ldr	r3, [pc, #132]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ecc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed4:	491e      	ldr	r1, [pc, #120]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00d      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ee6:	4b1a      	ldr	r3, [pc, #104]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	4a19      	ldr	r2, [pc, #100]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005eec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ef0:	6113      	str	r3, [r2, #16]
 8005ef2:	4b17      	ldr	r3, [pc, #92]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005ef4:	691a      	ldr	r2, [r3, #16]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005efc:	4914      	ldr	r1, [pc, #80]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	da08      	bge.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005f0a:	4b11      	ldr	r3, [pc, #68]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f16:	490e      	ldr	r1, [pc, #56]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d009      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f28:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f36:	4906      	ldr	r1, [pc, #24]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005f3c:	7dbb      	ldrb	r3, [r7, #22]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	e000      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3718      	adds	r7, #24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	58024400 	.word	0x58024400

08005f54 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005f58:	f7ff f894 	bl	8005084 <HAL_RCC_GetHCLKFreq>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	091b      	lsrs	r3, r3, #4
 8005f64:	f003 0307 	and.w	r3, r3, #7
 8005f68:	4904      	ldr	r1, [pc, #16]	; (8005f7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005f6a:	5ccb      	ldrb	r3, [r1, r3]
 8005f6c:	f003 031f 	and.w	r3, r3, #31
 8005f70:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	58024400 	.word	0x58024400
 8005f7c:	08019830 	.word	0x08019830

08005f80 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b089      	sub	sp, #36	; 0x24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f88:	4ba1      	ldr	r3, [pc, #644]	; (8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8c:	f003 0303 	and.w	r3, r3, #3
 8005f90:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005f92:	4b9f      	ldr	r3, [pc, #636]	; (8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f96:	0b1b      	lsrs	r3, r3, #12
 8005f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f9c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005f9e:	4b9c      	ldr	r3, [pc, #624]	; (8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa2:	091b      	lsrs	r3, r3, #4
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005faa:	4b99      	ldr	r3, [pc, #612]	; (8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fae:	08db      	lsrs	r3, r3, #3
 8005fb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	fb02 f303 	mul.w	r3, r2, r3
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 8111 	beq.w	80061f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	f000 8083 	beq.w	80060dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	f200 80a1 	bhi.w	8006120 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d056      	beq.n	8006098 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005fea:	e099      	b.n	8006120 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fec:	4b88      	ldr	r3, [pc, #544]	; (8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0320 	and.w	r3, r3, #32
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d02d      	beq.n	8006054 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ff8:	4b85      	ldr	r3, [pc, #532]	; (8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	08db      	lsrs	r3, r3, #3
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	4a84      	ldr	r2, [pc, #528]	; (8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006004:	fa22 f303 	lsr.w	r3, r2, r3
 8006008:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	ee07 3a90 	vmov	s15, r3
 8006010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006022:	4b7b      	ldr	r3, [pc, #492]	; (8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006032:	ed97 6a03 	vldr	s12, [r7, #12]
 8006036:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006218 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800603a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800603e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800604e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006052:	e087      	b.n	8006164 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800621c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006066:	4b6a      	ldr	r3, [pc, #424]	; (8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006076:	ed97 6a03 	vldr	s12, [r7, #12]
 800607a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006218 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800607e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800608a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800608e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006092:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006096:	e065      	b.n	8006164 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	ee07 3a90 	vmov	s15, r3
 800609e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80060a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060aa:	4b59      	ldr	r3, [pc, #356]	; (8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80060be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006218 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060da:	e043      	b.n	8006164 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006224 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80060ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ee:	4b48      	ldr	r3, [pc, #288]	; (8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006102:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006218 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800610a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800610e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800611a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800611e:	e021      	b.n	8006164 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	ee07 3a90 	vmov	s15, r3
 8006126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800612a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800612e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006132:	4b37      	ldr	r3, [pc, #220]	; (8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006142:	ed97 6a03 	vldr	s12, [r7, #12]
 8006146:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006218 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800614a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800614e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800615a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800615e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006162:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006164:	4b2a      	ldr	r3, [pc, #168]	; (8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	0a5b      	lsrs	r3, r3, #9
 800616a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800616e:	ee07 3a90 	vmov	s15, r3
 8006172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006176:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800617a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800617e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800618a:	ee17 2a90 	vmov	r2, s15
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006192:	4b1f      	ldr	r3, [pc, #124]	; (8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006196:	0c1b      	lsrs	r3, r3, #16
 8006198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800619c:	ee07 3a90 	vmov	s15, r3
 80061a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80061b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061b8:	ee17 2a90 	vmov	r2, s15
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80061c0:	4b13      	ldr	r3, [pc, #76]	; (8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c4:	0e1b      	lsrs	r3, r3, #24
 80061c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061da:	edd7 6a07 	vldr	s13, [r7, #28]
 80061de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061e6:	ee17 2a90 	vmov	r2, s15
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80061ee:	e008      	b.n	8006202 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	609a      	str	r2, [r3, #8]
}
 8006202:	bf00      	nop
 8006204:	3724      	adds	r7, #36	; 0x24
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	58024400 	.word	0x58024400
 8006214:	03d09000 	.word	0x03d09000
 8006218:	46000000 	.word	0x46000000
 800621c:	4c742400 	.word	0x4c742400
 8006220:	4a742400 	.word	0x4a742400
 8006224:	4af42400 	.word	0x4af42400

08006228 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006228:	b480      	push	{r7}
 800622a:	b089      	sub	sp, #36	; 0x24
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006230:	4ba1      	ldr	r3, [pc, #644]	; (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006234:	f003 0303 	and.w	r3, r3, #3
 8006238:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800623a:	4b9f      	ldr	r3, [pc, #636]	; (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800623c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623e:	0d1b      	lsrs	r3, r3, #20
 8006240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006244:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006246:	4b9c      	ldr	r3, [pc, #624]	; (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624a:	0a1b      	lsrs	r3, r3, #8
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006252:	4b99      	ldr	r3, [pc, #612]	; (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006256:	08db      	lsrs	r3, r3, #3
 8006258:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	fb02 f303 	mul.w	r3, r2, r3
 8006262:	ee07 3a90 	vmov	s15, r3
 8006266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 8111 	beq.w	8006498 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	2b02      	cmp	r3, #2
 800627a:	f000 8083 	beq.w	8006384 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	2b02      	cmp	r3, #2
 8006282:	f200 80a1 	bhi.w	80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d056      	beq.n	8006340 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006292:	e099      	b.n	80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006294:	4b88      	ldr	r3, [pc, #544]	; (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0320 	and.w	r3, r3, #32
 800629c:	2b00      	cmp	r3, #0
 800629e:	d02d      	beq.n	80062fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80062a0:	4b85      	ldr	r3, [pc, #532]	; (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	08db      	lsrs	r3, r3, #3
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	4a84      	ldr	r2, [pc, #528]	; (80064bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80062ac:	fa22 f303 	lsr.w	r3, r2, r3
 80062b0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	ee07 3a90 	vmov	s15, r3
 80062b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	ee07 3a90 	vmov	s15, r3
 80062c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ca:	4b7b      	ldr	r3, [pc, #492]	; (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d2:	ee07 3a90 	vmov	s15, r3
 80062d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062da:	ed97 6a03 	vldr	s12, [r7, #12]
 80062de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80064c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80062fa:	e087      	b.n	800640c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006306:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800630a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800630e:	4b6a      	ldr	r3, [pc, #424]	; (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006316:	ee07 3a90 	vmov	s15, r3
 800631a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800631e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006322:	eddf 5a67 	vldr	s11, [pc, #412]	; 80064c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800632a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800632e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800633e:	e065      	b.n	800640c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800634a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80064c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800634e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006352:	4b59      	ldr	r3, [pc, #356]	; (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006362:	ed97 6a03 	vldr	s12, [r7, #12]
 8006366:	eddf 5a56 	vldr	s11, [pc, #344]	; 80064c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800636a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800636e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800637a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800637e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006382:	e043      	b.n	800640c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	ee07 3a90 	vmov	s15, r3
 800638a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80064cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006396:	4b48      	ldr	r3, [pc, #288]	; (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639e:	ee07 3a90 	vmov	s15, r3
 80063a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80063aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80064c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063c6:	e021      	b.n	800640c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80064c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80063d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063da:	4b37      	ldr	r3, [pc, #220]	; (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e2:	ee07 3a90 	vmov	s15, r3
 80063e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80064c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006406:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800640a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800640c:	4b2a      	ldr	r3, [pc, #168]	; (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800640e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006410:	0a5b      	lsrs	r3, r3, #9
 8006412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006416:	ee07 3a90 	vmov	s15, r3
 800641a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800641e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006422:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006426:	edd7 6a07 	vldr	s13, [r7, #28]
 800642a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800642e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006432:	ee17 2a90 	vmov	r2, s15
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800643a:	4b1f      	ldr	r3, [pc, #124]	; (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	0c1b      	lsrs	r3, r3, #16
 8006440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006444:	ee07 3a90 	vmov	s15, r3
 8006448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006450:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006454:	edd7 6a07 	vldr	s13, [r7, #28]
 8006458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800645c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006460:	ee17 2a90 	vmov	r2, s15
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006468:	4b13      	ldr	r3, [pc, #76]	; (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800646a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646c:	0e1b      	lsrs	r3, r3, #24
 800646e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006472:	ee07 3a90 	vmov	s15, r3
 8006476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800647e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006482:	edd7 6a07 	vldr	s13, [r7, #28]
 8006486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800648a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800648e:	ee17 2a90 	vmov	r2, s15
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006496:	e008      	b.n	80064aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	609a      	str	r2, [r3, #8]
}
 80064aa:	bf00      	nop
 80064ac:	3724      	adds	r7, #36	; 0x24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	58024400 	.word	0x58024400
 80064bc:	03d09000 	.word	0x03d09000
 80064c0:	46000000 	.word	0x46000000
 80064c4:	4c742400 	.word	0x4c742400
 80064c8:	4a742400 	.word	0x4a742400
 80064cc:	4af42400 	.word	0x4af42400

080064d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064da:	2300      	movs	r3, #0
 80064dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064de:	4b53      	ldr	r3, [pc, #332]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80064e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d101      	bne.n	80064ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e099      	b.n	8006622 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80064ee:	4b4f      	ldr	r3, [pc, #316]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a4e      	ldr	r2, [pc, #312]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80064f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064fa:	f7fd faf7 	bl	8003aec <HAL_GetTick>
 80064fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006500:	e008      	b.n	8006514 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006502:	f7fd faf3 	bl	8003aec <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d901      	bls.n	8006514 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e086      	b.n	8006622 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006514:	4b45      	ldr	r3, [pc, #276]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1f0      	bne.n	8006502 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006520:	4b42      	ldr	r3, [pc, #264]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 8006522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006524:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	031b      	lsls	r3, r3, #12
 800652e:	493f      	ldr	r1, [pc, #252]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 8006530:	4313      	orrs	r3, r2
 8006532:	628b      	str	r3, [r1, #40]	; 0x28
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	3b01      	subs	r3, #1
 800653a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	3b01      	subs	r3, #1
 8006544:	025b      	lsls	r3, r3, #9
 8006546:	b29b      	uxth	r3, r3
 8006548:	431a      	orrs	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	3b01      	subs	r3, #1
 8006550:	041b      	lsls	r3, r3, #16
 8006552:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	3b01      	subs	r3, #1
 800655e:	061b      	lsls	r3, r3, #24
 8006560:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006564:	4931      	ldr	r1, [pc, #196]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 8006566:	4313      	orrs	r3, r2
 8006568:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800656a:	4b30      	ldr	r3, [pc, #192]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 800656c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	492d      	ldr	r1, [pc, #180]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 8006578:	4313      	orrs	r3, r2
 800657a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800657c:	4b2b      	ldr	r3, [pc, #172]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	f023 0220 	bic.w	r2, r3, #32
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	4928      	ldr	r1, [pc, #160]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 800658a:	4313      	orrs	r3, r2
 800658c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800658e:	4b27      	ldr	r3, [pc, #156]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 8006590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006592:	4a26      	ldr	r2, [pc, #152]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 8006594:	f023 0310 	bic.w	r3, r3, #16
 8006598:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800659a:	4b24      	ldr	r3, [pc, #144]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 800659c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800659e:	4b24      	ldr	r3, [pc, #144]	; (8006630 <RCCEx_PLL2_Config+0x160>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	69d2      	ldr	r2, [r2, #28]
 80065a6:	00d2      	lsls	r2, r2, #3
 80065a8:	4920      	ldr	r1, [pc, #128]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80065ae:	4b1f      	ldr	r3, [pc, #124]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b2:	4a1e      	ldr	r2, [pc, #120]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065b4:	f043 0310 	orr.w	r3, r3, #16
 80065b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d106      	bne.n	80065ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80065c0:	4b1a      	ldr	r3, [pc, #104]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	4a19      	ldr	r2, [pc, #100]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065cc:	e00f      	b.n	80065ee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d106      	bne.n	80065e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80065d4:	4b15      	ldr	r3, [pc, #84]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	4a14      	ldr	r2, [pc, #80]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065e0:	e005      	b.n	80065ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80065e2:	4b12      	ldr	r3, [pc, #72]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e6:	4a11      	ldr	r2, [pc, #68]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80065ee:	4b0f      	ldr	r3, [pc, #60]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a0e      	ldr	r2, [pc, #56]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 80065f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065fa:	f7fd fa77 	bl	8003aec <HAL_GetTick>
 80065fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006600:	e008      	b.n	8006614 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006602:	f7fd fa73 	bl	8003aec <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2b02      	cmp	r3, #2
 800660e:	d901      	bls.n	8006614 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e006      	b.n	8006622 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006614:	4b05      	ldr	r3, [pc, #20]	; (800662c <RCCEx_PLL2_Config+0x15c>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0f0      	beq.n	8006602 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006620:	7bfb      	ldrb	r3, [r7, #15]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	58024400 	.word	0x58024400
 8006630:	ffff0007 	.word	0xffff0007

08006634 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006642:	4b53      	ldr	r3, [pc, #332]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006646:	f003 0303 	and.w	r3, r3, #3
 800664a:	2b03      	cmp	r3, #3
 800664c:	d101      	bne.n	8006652 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e099      	b.n	8006786 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006652:	4b4f      	ldr	r3, [pc, #316]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a4e      	ldr	r2, [pc, #312]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800665c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800665e:	f7fd fa45 	bl	8003aec <HAL_GetTick>
 8006662:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006664:	e008      	b.n	8006678 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006666:	f7fd fa41 	bl	8003aec <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	2b02      	cmp	r3, #2
 8006672:	d901      	bls.n	8006678 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e086      	b.n	8006786 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006678:	4b45      	ldr	r3, [pc, #276]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1f0      	bne.n	8006666 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006684:	4b42      	ldr	r3, [pc, #264]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006688:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	051b      	lsls	r3, r3, #20
 8006692:	493f      	ldr	r1, [pc, #252]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006694:	4313      	orrs	r3, r2
 8006696:	628b      	str	r3, [r1, #40]	; 0x28
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	3b01      	subs	r3, #1
 800669e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	025b      	lsls	r3, r3, #9
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	041b      	lsls	r3, r3, #16
 80066b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066ba:	431a      	orrs	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	061b      	lsls	r3, r3, #24
 80066c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066c8:	4931      	ldr	r1, [pc, #196]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80066ce:	4b30      	ldr	r3, [pc, #192]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 80066d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	492d      	ldr	r1, [pc, #180]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80066e0:	4b2b      	ldr	r3, [pc, #172]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	4928      	ldr	r1, [pc, #160]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80066f2:	4b27      	ldr	r3, [pc, #156]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 80066f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f6:	4a26      	ldr	r2, [pc, #152]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 80066f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80066fe:	4b24      	ldr	r3, [pc, #144]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006702:	4b24      	ldr	r3, [pc, #144]	; (8006794 <RCCEx_PLL3_Config+0x160>)
 8006704:	4013      	ands	r3, r2
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	69d2      	ldr	r2, [r2, #28]
 800670a:	00d2      	lsls	r2, r2, #3
 800670c:	4920      	ldr	r1, [pc, #128]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 800670e:	4313      	orrs	r3, r2
 8006710:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006712:	4b1f      	ldr	r3, [pc, #124]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006716:	4a1e      	ldr	r2, [pc, #120]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800671c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d106      	bne.n	8006732 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006724:	4b1a      	ldr	r3, [pc, #104]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	4a19      	ldr	r2, [pc, #100]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 800672a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800672e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006730:	e00f      	b.n	8006752 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d106      	bne.n	8006746 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006738:	4b15      	ldr	r3, [pc, #84]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 800673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673c:	4a14      	ldr	r2, [pc, #80]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 800673e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006742:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006744:	e005      	b.n	8006752 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006746:	4b12      	ldr	r3, [pc, #72]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674a:	4a11      	ldr	r2, [pc, #68]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 800674c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006750:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006752:	4b0f      	ldr	r3, [pc, #60]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a0e      	ldr	r2, [pc, #56]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 8006758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800675c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800675e:	f7fd f9c5 	bl	8003aec <HAL_GetTick>
 8006762:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006764:	e008      	b.n	8006778 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006766:	f7fd f9c1 	bl	8003aec <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	d901      	bls.n	8006778 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e006      	b.n	8006786 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006778:	4b05      	ldr	r3, [pc, #20]	; (8006790 <RCCEx_PLL3_Config+0x15c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0f0      	beq.n	8006766 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006784:	7bfb      	ldrb	r3, [r7, #15]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	58024400 	.word	0x58024400
 8006794:	ffff0007 	.word	0xffff0007

08006798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e049      	b.n	800683e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d106      	bne.n	80067c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7fc ffa2 	bl	8003708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	3304      	adds	r3, #4
 80067d4:	4619      	mov	r1, r3
 80067d6:	4610      	mov	r0, r2
 80067d8:	f000 f97c 	bl	8006ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b082      	sub	sp, #8
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b02      	cmp	r3, #2
 800685a:	d122      	bne.n	80068a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b02      	cmp	r3, #2
 8006868:	d11b      	bne.n	80068a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f06f 0202 	mvn.w	r2, #2
 8006872:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	f003 0303 	and.w	r3, r3, #3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d003      	beq.n	8006890 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f905 	bl	8006a98 <HAL_TIM_IC_CaptureCallback>
 800688e:	e005      	b.n	800689c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f8f7 	bl	8006a84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f908 	bl	8006aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	f003 0304 	and.w	r3, r3, #4
 80068ac:	2b04      	cmp	r3, #4
 80068ae:	d122      	bne.n	80068f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f003 0304 	and.w	r3, r3, #4
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d11b      	bne.n	80068f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f06f 0204 	mvn.w	r2, #4
 80068c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f8db 	bl	8006a98 <HAL_TIM_IC_CaptureCallback>
 80068e2:	e005      	b.n	80068f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f8cd 	bl	8006a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f8de 	bl	8006aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f003 0308 	and.w	r3, r3, #8
 8006900:	2b08      	cmp	r3, #8
 8006902:	d122      	bne.n	800694a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	f003 0308 	and.w	r3, r3, #8
 800690e:	2b08      	cmp	r3, #8
 8006910:	d11b      	bne.n	800694a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f06f 0208 	mvn.w	r2, #8
 800691a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2204      	movs	r2, #4
 8006920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	f003 0303 	and.w	r3, r3, #3
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f8b1 	bl	8006a98 <HAL_TIM_IC_CaptureCallback>
 8006936:	e005      	b.n	8006944 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f8a3 	bl	8006a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f8b4 	bl	8006aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	f003 0310 	and.w	r3, r3, #16
 8006954:	2b10      	cmp	r3, #16
 8006956:	d122      	bne.n	800699e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f003 0310 	and.w	r3, r3, #16
 8006962:	2b10      	cmp	r3, #16
 8006964:	d11b      	bne.n	800699e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f06f 0210 	mvn.w	r2, #16
 800696e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2208      	movs	r2, #8
 8006974:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f887 	bl	8006a98 <HAL_TIM_IC_CaptureCallback>
 800698a:	e005      	b.n	8006998 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f879 	bl	8006a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f88a 	bl	8006aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d10e      	bne.n	80069ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d107      	bne.n	80069ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f06f 0201 	mvn.w	r2, #1
 80069c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7fc fe63 	bl	8003690 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d4:	2b80      	cmp	r3, #128	; 0x80
 80069d6:	d10e      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e2:	2b80      	cmp	r3, #128	; 0x80
 80069e4:	d107      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f913 	bl	8006c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a04:	d10e      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a10:	2b80      	cmp	r3, #128	; 0x80
 8006a12:	d107      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f906 	bl	8006c30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2e:	2b40      	cmp	r3, #64	; 0x40
 8006a30:	d10e      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3c:	2b40      	cmp	r3, #64	; 0x40
 8006a3e:	d107      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f838 	bl	8006ac0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	f003 0320 	and.w	r3, r3, #32
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	d10e      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f003 0320 	and.w	r3, r3, #32
 8006a68:	2b20      	cmp	r3, #32
 8006a6a:	d107      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f06f 0220 	mvn.w	r2, #32
 8006a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f8c6 	bl	8006c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a7c:	bf00      	nop
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a40      	ldr	r2, [pc, #256]	; (8006be8 <TIM_Base_SetConfig+0x114>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d013      	beq.n	8006b14 <TIM_Base_SetConfig+0x40>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af2:	d00f      	beq.n	8006b14 <TIM_Base_SetConfig+0x40>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a3d      	ldr	r2, [pc, #244]	; (8006bec <TIM_Base_SetConfig+0x118>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d00b      	beq.n	8006b14 <TIM_Base_SetConfig+0x40>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a3c      	ldr	r2, [pc, #240]	; (8006bf0 <TIM_Base_SetConfig+0x11c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d007      	beq.n	8006b14 <TIM_Base_SetConfig+0x40>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a3b      	ldr	r2, [pc, #236]	; (8006bf4 <TIM_Base_SetConfig+0x120>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d003      	beq.n	8006b14 <TIM_Base_SetConfig+0x40>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a3a      	ldr	r2, [pc, #232]	; (8006bf8 <TIM_Base_SetConfig+0x124>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d108      	bne.n	8006b26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a2f      	ldr	r2, [pc, #188]	; (8006be8 <TIM_Base_SetConfig+0x114>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d01f      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b34:	d01b      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a2c      	ldr	r2, [pc, #176]	; (8006bec <TIM_Base_SetConfig+0x118>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d017      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a2b      	ldr	r2, [pc, #172]	; (8006bf0 <TIM_Base_SetConfig+0x11c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d013      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a2a      	ldr	r2, [pc, #168]	; (8006bf4 <TIM_Base_SetConfig+0x120>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d00f      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a29      	ldr	r2, [pc, #164]	; (8006bf8 <TIM_Base_SetConfig+0x124>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00b      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a28      	ldr	r2, [pc, #160]	; (8006bfc <TIM_Base_SetConfig+0x128>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d007      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a27      	ldr	r2, [pc, #156]	; (8006c00 <TIM_Base_SetConfig+0x12c>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d003      	beq.n	8006b6e <TIM_Base_SetConfig+0x9a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a26      	ldr	r2, [pc, #152]	; (8006c04 <TIM_Base_SetConfig+0x130>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d108      	bne.n	8006b80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a10      	ldr	r2, [pc, #64]	; (8006be8 <TIM_Base_SetConfig+0x114>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d00f      	beq.n	8006bcc <TIM_Base_SetConfig+0xf8>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a12      	ldr	r2, [pc, #72]	; (8006bf8 <TIM_Base_SetConfig+0x124>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d00b      	beq.n	8006bcc <TIM_Base_SetConfig+0xf8>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a11      	ldr	r2, [pc, #68]	; (8006bfc <TIM_Base_SetConfig+0x128>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d007      	beq.n	8006bcc <TIM_Base_SetConfig+0xf8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a10      	ldr	r2, [pc, #64]	; (8006c00 <TIM_Base_SetConfig+0x12c>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d003      	beq.n	8006bcc <TIM_Base_SetConfig+0xf8>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a0f      	ldr	r2, [pc, #60]	; (8006c04 <TIM_Base_SetConfig+0x130>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d103      	bne.n	8006bd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	691a      	ldr	r2, [r3, #16]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	615a      	str	r2, [r3, #20]
}
 8006bda:	bf00      	nop
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	40010000 	.word	0x40010000
 8006bec:	40000400 	.word	0x40000400
 8006bf0:	40000800 	.word	0x40000800
 8006bf4:	40000c00 	.word	0x40000c00
 8006bf8:	40010400 	.word	0x40010400
 8006bfc:	40014000 	.word	0x40014000
 8006c00:	40014400 	.word	0x40014400
 8006c04:	40014800 	.word	0x40014800

08006c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e042      	b.n	8006cdc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d106      	bne.n	8006c6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7fc fd75 	bl	8003758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2224      	movs	r2, #36	; 0x24
 8006c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 0201 	bic.w	r2, r2, #1
 8006c84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f82c 	bl	8006ce4 <UART_SetConfig>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d101      	bne.n	8006c96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e022      	b.n	8006cdc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fe8c 	bl	80079bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689a      	ldr	r2, [r3, #8]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0201 	orr.w	r2, r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 ff13 	bl	8007b00 <UART_CheckIdleState>
 8006cda:	4603      	mov	r3, r0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ce8:	b092      	sub	sp, #72	; 0x48
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	689a      	ldr	r2, [r3, #8]
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	431a      	orrs	r2, r3
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	4bbe      	ldr	r3, [pc, #760]	; (800700c <UART_SetConfig+0x328>)
 8006d14:	4013      	ands	r3, r2
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	6812      	ldr	r2, [r2, #0]
 8006d1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	68da      	ldr	r2, [r3, #12]
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4ab3      	ldr	r2, [pc, #716]	; (8007010 <UART_SetConfig+0x32c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d004      	beq.n	8006d50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689a      	ldr	r2, [r3, #8]
 8006d56:	4baf      	ldr	r3, [pc, #700]	; (8007014 <UART_SetConfig+0x330>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	6812      	ldr	r2, [r2, #0]
 8006d5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d60:	430b      	orrs	r3, r1
 8006d62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	f023 010f 	bic.w	r1, r3, #15
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4aa6      	ldr	r2, [pc, #664]	; (8007018 <UART_SetConfig+0x334>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d177      	bne.n	8006e74 <UART_SetConfig+0x190>
 8006d84:	4ba5      	ldr	r3, [pc, #660]	; (800701c <UART_SetConfig+0x338>)
 8006d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d8c:	2b28      	cmp	r3, #40	; 0x28
 8006d8e:	d86d      	bhi.n	8006e6c <UART_SetConfig+0x188>
 8006d90:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <UART_SetConfig+0xb4>)
 8006d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d96:	bf00      	nop
 8006d98:	08006e3d 	.word	0x08006e3d
 8006d9c:	08006e6d 	.word	0x08006e6d
 8006da0:	08006e6d 	.word	0x08006e6d
 8006da4:	08006e6d 	.word	0x08006e6d
 8006da8:	08006e6d 	.word	0x08006e6d
 8006dac:	08006e6d 	.word	0x08006e6d
 8006db0:	08006e6d 	.word	0x08006e6d
 8006db4:	08006e6d 	.word	0x08006e6d
 8006db8:	08006e45 	.word	0x08006e45
 8006dbc:	08006e6d 	.word	0x08006e6d
 8006dc0:	08006e6d 	.word	0x08006e6d
 8006dc4:	08006e6d 	.word	0x08006e6d
 8006dc8:	08006e6d 	.word	0x08006e6d
 8006dcc:	08006e6d 	.word	0x08006e6d
 8006dd0:	08006e6d 	.word	0x08006e6d
 8006dd4:	08006e6d 	.word	0x08006e6d
 8006dd8:	08006e4d 	.word	0x08006e4d
 8006ddc:	08006e6d 	.word	0x08006e6d
 8006de0:	08006e6d 	.word	0x08006e6d
 8006de4:	08006e6d 	.word	0x08006e6d
 8006de8:	08006e6d 	.word	0x08006e6d
 8006dec:	08006e6d 	.word	0x08006e6d
 8006df0:	08006e6d 	.word	0x08006e6d
 8006df4:	08006e6d 	.word	0x08006e6d
 8006df8:	08006e55 	.word	0x08006e55
 8006dfc:	08006e6d 	.word	0x08006e6d
 8006e00:	08006e6d 	.word	0x08006e6d
 8006e04:	08006e6d 	.word	0x08006e6d
 8006e08:	08006e6d 	.word	0x08006e6d
 8006e0c:	08006e6d 	.word	0x08006e6d
 8006e10:	08006e6d 	.word	0x08006e6d
 8006e14:	08006e6d 	.word	0x08006e6d
 8006e18:	08006e5d 	.word	0x08006e5d
 8006e1c:	08006e6d 	.word	0x08006e6d
 8006e20:	08006e6d 	.word	0x08006e6d
 8006e24:	08006e6d 	.word	0x08006e6d
 8006e28:	08006e6d 	.word	0x08006e6d
 8006e2c:	08006e6d 	.word	0x08006e6d
 8006e30:	08006e6d 	.word	0x08006e6d
 8006e34:	08006e6d 	.word	0x08006e6d
 8006e38:	08006e65 	.word	0x08006e65
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e42:	e326      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006e44:	2304      	movs	r3, #4
 8006e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4a:	e322      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006e4c:	2308      	movs	r3, #8
 8006e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e52:	e31e      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006e54:	2310      	movs	r3, #16
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e5a:	e31a      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006e5c:	2320      	movs	r3, #32
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e62:	e316      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006e64:	2340      	movs	r3, #64	; 0x40
 8006e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e6a:	e312      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006e6c:	2380      	movs	r3, #128	; 0x80
 8006e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e72:	e30e      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a69      	ldr	r2, [pc, #420]	; (8007020 <UART_SetConfig+0x33c>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d130      	bne.n	8006ee0 <UART_SetConfig+0x1fc>
 8006e7e:	4b67      	ldr	r3, [pc, #412]	; (800701c <UART_SetConfig+0x338>)
 8006e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e82:	f003 0307 	and.w	r3, r3, #7
 8006e86:	2b05      	cmp	r3, #5
 8006e88:	d826      	bhi.n	8006ed8 <UART_SetConfig+0x1f4>
 8006e8a:	a201      	add	r2, pc, #4	; (adr r2, 8006e90 <UART_SetConfig+0x1ac>)
 8006e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e90:	08006ea9 	.word	0x08006ea9
 8006e94:	08006eb1 	.word	0x08006eb1
 8006e98:	08006eb9 	.word	0x08006eb9
 8006e9c:	08006ec1 	.word	0x08006ec1
 8006ea0:	08006ec9 	.word	0x08006ec9
 8006ea4:	08006ed1 	.word	0x08006ed1
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eae:	e2f0      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006eb0:	2304      	movs	r3, #4
 8006eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eb6:	e2ec      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006eb8:	2308      	movs	r3, #8
 8006eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ebe:	e2e8      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006ec0:	2310      	movs	r3, #16
 8006ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ec6:	e2e4      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006ec8:	2320      	movs	r3, #32
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ece:	e2e0      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006ed0:	2340      	movs	r3, #64	; 0x40
 8006ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ed6:	e2dc      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006ed8:	2380      	movs	r3, #128	; 0x80
 8006eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ede:	e2d8      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a4f      	ldr	r2, [pc, #316]	; (8007024 <UART_SetConfig+0x340>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d130      	bne.n	8006f4c <UART_SetConfig+0x268>
 8006eea:	4b4c      	ldr	r3, [pc, #304]	; (800701c <UART_SetConfig+0x338>)
 8006eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	2b05      	cmp	r3, #5
 8006ef4:	d826      	bhi.n	8006f44 <UART_SetConfig+0x260>
 8006ef6:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <UART_SetConfig+0x218>)
 8006ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efc:	08006f15 	.word	0x08006f15
 8006f00:	08006f1d 	.word	0x08006f1d
 8006f04:	08006f25 	.word	0x08006f25
 8006f08:	08006f2d 	.word	0x08006f2d
 8006f0c:	08006f35 	.word	0x08006f35
 8006f10:	08006f3d 	.word	0x08006f3d
 8006f14:	2300      	movs	r3, #0
 8006f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f1a:	e2ba      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006f1c:	2304      	movs	r3, #4
 8006f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f22:	e2b6      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006f24:	2308      	movs	r3, #8
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f2a:	e2b2      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006f2c:	2310      	movs	r3, #16
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f32:	e2ae      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006f34:	2320      	movs	r3, #32
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3a:	e2aa      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006f3c:	2340      	movs	r3, #64	; 0x40
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f42:	e2a6      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006f44:	2380      	movs	r3, #128	; 0x80
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4a:	e2a2      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a35      	ldr	r2, [pc, #212]	; (8007028 <UART_SetConfig+0x344>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d130      	bne.n	8006fb8 <UART_SetConfig+0x2d4>
 8006f56:	4b31      	ldr	r3, [pc, #196]	; (800701c <UART_SetConfig+0x338>)
 8006f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5a:	f003 0307 	and.w	r3, r3, #7
 8006f5e:	2b05      	cmp	r3, #5
 8006f60:	d826      	bhi.n	8006fb0 <UART_SetConfig+0x2cc>
 8006f62:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <UART_SetConfig+0x284>)
 8006f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f68:	08006f81 	.word	0x08006f81
 8006f6c:	08006f89 	.word	0x08006f89
 8006f70:	08006f91 	.word	0x08006f91
 8006f74:	08006f99 	.word	0x08006f99
 8006f78:	08006fa1 	.word	0x08006fa1
 8006f7c:	08006fa9 	.word	0x08006fa9
 8006f80:	2300      	movs	r3, #0
 8006f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f86:	e284      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006f88:	2304      	movs	r3, #4
 8006f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8e:	e280      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006f90:	2308      	movs	r3, #8
 8006f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f96:	e27c      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006f98:	2310      	movs	r3, #16
 8006f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f9e:	e278      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006fa0:	2320      	movs	r3, #32
 8006fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fa6:	e274      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006fa8:	2340      	movs	r3, #64	; 0x40
 8006faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fae:	e270      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006fb0:	2380      	movs	r3, #128	; 0x80
 8006fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fb6:	e26c      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a1b      	ldr	r2, [pc, #108]	; (800702c <UART_SetConfig+0x348>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d142      	bne.n	8007048 <UART_SetConfig+0x364>
 8006fc2:	4b16      	ldr	r3, [pc, #88]	; (800701c <UART_SetConfig+0x338>)
 8006fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc6:	f003 0307 	and.w	r3, r3, #7
 8006fca:	2b05      	cmp	r3, #5
 8006fcc:	d838      	bhi.n	8007040 <UART_SetConfig+0x35c>
 8006fce:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <UART_SetConfig+0x2f0>)
 8006fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd4:	08006fed 	.word	0x08006fed
 8006fd8:	08006ff5 	.word	0x08006ff5
 8006fdc:	08006ffd 	.word	0x08006ffd
 8006fe0:	08007005 	.word	0x08007005
 8006fe4:	08007031 	.word	0x08007031
 8006fe8:	08007039 	.word	0x08007039
 8006fec:	2300      	movs	r3, #0
 8006fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ff2:	e24e      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006ff4:	2304      	movs	r3, #4
 8006ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ffa:	e24a      	b.n	8007492 <UART_SetConfig+0x7ae>
 8006ffc:	2308      	movs	r3, #8
 8006ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007002:	e246      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007004:	2310      	movs	r3, #16
 8007006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800700a:	e242      	b.n	8007492 <UART_SetConfig+0x7ae>
 800700c:	cfff69f3 	.word	0xcfff69f3
 8007010:	58000c00 	.word	0x58000c00
 8007014:	11fff4ff 	.word	0x11fff4ff
 8007018:	40011000 	.word	0x40011000
 800701c:	58024400 	.word	0x58024400
 8007020:	40004400 	.word	0x40004400
 8007024:	40004800 	.word	0x40004800
 8007028:	40004c00 	.word	0x40004c00
 800702c:	40005000 	.word	0x40005000
 8007030:	2320      	movs	r3, #32
 8007032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007036:	e22c      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007038:	2340      	movs	r3, #64	; 0x40
 800703a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703e:	e228      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007040:	2380      	movs	r3, #128	; 0x80
 8007042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007046:	e224      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4ab1      	ldr	r2, [pc, #708]	; (8007314 <UART_SetConfig+0x630>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d176      	bne.n	8007140 <UART_SetConfig+0x45c>
 8007052:	4bb1      	ldr	r3, [pc, #708]	; (8007318 <UART_SetConfig+0x634>)
 8007054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007056:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800705a:	2b28      	cmp	r3, #40	; 0x28
 800705c:	d86c      	bhi.n	8007138 <UART_SetConfig+0x454>
 800705e:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <UART_SetConfig+0x380>)
 8007060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007064:	08007109 	.word	0x08007109
 8007068:	08007139 	.word	0x08007139
 800706c:	08007139 	.word	0x08007139
 8007070:	08007139 	.word	0x08007139
 8007074:	08007139 	.word	0x08007139
 8007078:	08007139 	.word	0x08007139
 800707c:	08007139 	.word	0x08007139
 8007080:	08007139 	.word	0x08007139
 8007084:	08007111 	.word	0x08007111
 8007088:	08007139 	.word	0x08007139
 800708c:	08007139 	.word	0x08007139
 8007090:	08007139 	.word	0x08007139
 8007094:	08007139 	.word	0x08007139
 8007098:	08007139 	.word	0x08007139
 800709c:	08007139 	.word	0x08007139
 80070a0:	08007139 	.word	0x08007139
 80070a4:	08007119 	.word	0x08007119
 80070a8:	08007139 	.word	0x08007139
 80070ac:	08007139 	.word	0x08007139
 80070b0:	08007139 	.word	0x08007139
 80070b4:	08007139 	.word	0x08007139
 80070b8:	08007139 	.word	0x08007139
 80070bc:	08007139 	.word	0x08007139
 80070c0:	08007139 	.word	0x08007139
 80070c4:	08007121 	.word	0x08007121
 80070c8:	08007139 	.word	0x08007139
 80070cc:	08007139 	.word	0x08007139
 80070d0:	08007139 	.word	0x08007139
 80070d4:	08007139 	.word	0x08007139
 80070d8:	08007139 	.word	0x08007139
 80070dc:	08007139 	.word	0x08007139
 80070e0:	08007139 	.word	0x08007139
 80070e4:	08007129 	.word	0x08007129
 80070e8:	08007139 	.word	0x08007139
 80070ec:	08007139 	.word	0x08007139
 80070f0:	08007139 	.word	0x08007139
 80070f4:	08007139 	.word	0x08007139
 80070f8:	08007139 	.word	0x08007139
 80070fc:	08007139 	.word	0x08007139
 8007100:	08007139 	.word	0x08007139
 8007104:	08007131 	.word	0x08007131
 8007108:	2301      	movs	r3, #1
 800710a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800710e:	e1c0      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007110:	2304      	movs	r3, #4
 8007112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007116:	e1bc      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007118:	2308      	movs	r3, #8
 800711a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800711e:	e1b8      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007120:	2310      	movs	r3, #16
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007126:	e1b4      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007128:	2320      	movs	r3, #32
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800712e:	e1b0      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007130:	2340      	movs	r3, #64	; 0x40
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007136:	e1ac      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007138:	2380      	movs	r3, #128	; 0x80
 800713a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713e:	e1a8      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a75      	ldr	r2, [pc, #468]	; (800731c <UART_SetConfig+0x638>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d130      	bne.n	80071ac <UART_SetConfig+0x4c8>
 800714a:	4b73      	ldr	r3, [pc, #460]	; (8007318 <UART_SetConfig+0x634>)
 800714c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714e:	f003 0307 	and.w	r3, r3, #7
 8007152:	2b05      	cmp	r3, #5
 8007154:	d826      	bhi.n	80071a4 <UART_SetConfig+0x4c0>
 8007156:	a201      	add	r2, pc, #4	; (adr r2, 800715c <UART_SetConfig+0x478>)
 8007158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715c:	08007175 	.word	0x08007175
 8007160:	0800717d 	.word	0x0800717d
 8007164:	08007185 	.word	0x08007185
 8007168:	0800718d 	.word	0x0800718d
 800716c:	08007195 	.word	0x08007195
 8007170:	0800719d 	.word	0x0800719d
 8007174:	2300      	movs	r3, #0
 8007176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800717a:	e18a      	b.n	8007492 <UART_SetConfig+0x7ae>
 800717c:	2304      	movs	r3, #4
 800717e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007182:	e186      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007184:	2308      	movs	r3, #8
 8007186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800718a:	e182      	b.n	8007492 <UART_SetConfig+0x7ae>
 800718c:	2310      	movs	r3, #16
 800718e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007192:	e17e      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007194:	2320      	movs	r3, #32
 8007196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800719a:	e17a      	b.n	8007492 <UART_SetConfig+0x7ae>
 800719c:	2340      	movs	r3, #64	; 0x40
 800719e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071a2:	e176      	b.n	8007492 <UART_SetConfig+0x7ae>
 80071a4:	2380      	movs	r3, #128	; 0x80
 80071a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071aa:	e172      	b.n	8007492 <UART_SetConfig+0x7ae>
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a5b      	ldr	r2, [pc, #364]	; (8007320 <UART_SetConfig+0x63c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d130      	bne.n	8007218 <UART_SetConfig+0x534>
 80071b6:	4b58      	ldr	r3, [pc, #352]	; (8007318 <UART_SetConfig+0x634>)
 80071b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ba:	f003 0307 	and.w	r3, r3, #7
 80071be:	2b05      	cmp	r3, #5
 80071c0:	d826      	bhi.n	8007210 <UART_SetConfig+0x52c>
 80071c2:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <UART_SetConfig+0x4e4>)
 80071c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c8:	080071e1 	.word	0x080071e1
 80071cc:	080071e9 	.word	0x080071e9
 80071d0:	080071f1 	.word	0x080071f1
 80071d4:	080071f9 	.word	0x080071f9
 80071d8:	08007201 	.word	0x08007201
 80071dc:	08007209 	.word	0x08007209
 80071e0:	2300      	movs	r3, #0
 80071e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071e6:	e154      	b.n	8007492 <UART_SetConfig+0x7ae>
 80071e8:	2304      	movs	r3, #4
 80071ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ee:	e150      	b.n	8007492 <UART_SetConfig+0x7ae>
 80071f0:	2308      	movs	r3, #8
 80071f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071f6:	e14c      	b.n	8007492 <UART_SetConfig+0x7ae>
 80071f8:	2310      	movs	r3, #16
 80071fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071fe:	e148      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007200:	2320      	movs	r3, #32
 8007202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007206:	e144      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007208:	2340      	movs	r3, #64	; 0x40
 800720a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800720e:	e140      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007210:	2380      	movs	r3, #128	; 0x80
 8007212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007216:	e13c      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a41      	ldr	r2, [pc, #260]	; (8007324 <UART_SetConfig+0x640>)
 800721e:	4293      	cmp	r3, r2
 8007220:	f040 8082 	bne.w	8007328 <UART_SetConfig+0x644>
 8007224:	4b3c      	ldr	r3, [pc, #240]	; (8007318 <UART_SetConfig+0x634>)
 8007226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007228:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800722c:	2b28      	cmp	r3, #40	; 0x28
 800722e:	d86d      	bhi.n	800730c <UART_SetConfig+0x628>
 8007230:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <UART_SetConfig+0x554>)
 8007232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007236:	bf00      	nop
 8007238:	080072dd 	.word	0x080072dd
 800723c:	0800730d 	.word	0x0800730d
 8007240:	0800730d 	.word	0x0800730d
 8007244:	0800730d 	.word	0x0800730d
 8007248:	0800730d 	.word	0x0800730d
 800724c:	0800730d 	.word	0x0800730d
 8007250:	0800730d 	.word	0x0800730d
 8007254:	0800730d 	.word	0x0800730d
 8007258:	080072e5 	.word	0x080072e5
 800725c:	0800730d 	.word	0x0800730d
 8007260:	0800730d 	.word	0x0800730d
 8007264:	0800730d 	.word	0x0800730d
 8007268:	0800730d 	.word	0x0800730d
 800726c:	0800730d 	.word	0x0800730d
 8007270:	0800730d 	.word	0x0800730d
 8007274:	0800730d 	.word	0x0800730d
 8007278:	080072ed 	.word	0x080072ed
 800727c:	0800730d 	.word	0x0800730d
 8007280:	0800730d 	.word	0x0800730d
 8007284:	0800730d 	.word	0x0800730d
 8007288:	0800730d 	.word	0x0800730d
 800728c:	0800730d 	.word	0x0800730d
 8007290:	0800730d 	.word	0x0800730d
 8007294:	0800730d 	.word	0x0800730d
 8007298:	080072f5 	.word	0x080072f5
 800729c:	0800730d 	.word	0x0800730d
 80072a0:	0800730d 	.word	0x0800730d
 80072a4:	0800730d 	.word	0x0800730d
 80072a8:	0800730d 	.word	0x0800730d
 80072ac:	0800730d 	.word	0x0800730d
 80072b0:	0800730d 	.word	0x0800730d
 80072b4:	0800730d 	.word	0x0800730d
 80072b8:	080072fd 	.word	0x080072fd
 80072bc:	0800730d 	.word	0x0800730d
 80072c0:	0800730d 	.word	0x0800730d
 80072c4:	0800730d 	.word	0x0800730d
 80072c8:	0800730d 	.word	0x0800730d
 80072cc:	0800730d 	.word	0x0800730d
 80072d0:	0800730d 	.word	0x0800730d
 80072d4:	0800730d 	.word	0x0800730d
 80072d8:	08007305 	.word	0x08007305
 80072dc:	2301      	movs	r3, #1
 80072de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072e2:	e0d6      	b.n	8007492 <UART_SetConfig+0x7ae>
 80072e4:	2304      	movs	r3, #4
 80072e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ea:	e0d2      	b.n	8007492 <UART_SetConfig+0x7ae>
 80072ec:	2308      	movs	r3, #8
 80072ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072f2:	e0ce      	b.n	8007492 <UART_SetConfig+0x7ae>
 80072f4:	2310      	movs	r3, #16
 80072f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072fa:	e0ca      	b.n	8007492 <UART_SetConfig+0x7ae>
 80072fc:	2320      	movs	r3, #32
 80072fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007302:	e0c6      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007304:	2340      	movs	r3, #64	; 0x40
 8007306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800730a:	e0c2      	b.n	8007492 <UART_SetConfig+0x7ae>
 800730c:	2380      	movs	r3, #128	; 0x80
 800730e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007312:	e0be      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007314:	40011400 	.word	0x40011400
 8007318:	58024400 	.word	0x58024400
 800731c:	40007800 	.word	0x40007800
 8007320:	40007c00 	.word	0x40007c00
 8007324:	40011800 	.word	0x40011800
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4aad      	ldr	r2, [pc, #692]	; (80075e4 <UART_SetConfig+0x900>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d176      	bne.n	8007420 <UART_SetConfig+0x73c>
 8007332:	4bad      	ldr	r3, [pc, #692]	; (80075e8 <UART_SetConfig+0x904>)
 8007334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800733a:	2b28      	cmp	r3, #40	; 0x28
 800733c:	d86c      	bhi.n	8007418 <UART_SetConfig+0x734>
 800733e:	a201      	add	r2, pc, #4	; (adr r2, 8007344 <UART_SetConfig+0x660>)
 8007340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007344:	080073e9 	.word	0x080073e9
 8007348:	08007419 	.word	0x08007419
 800734c:	08007419 	.word	0x08007419
 8007350:	08007419 	.word	0x08007419
 8007354:	08007419 	.word	0x08007419
 8007358:	08007419 	.word	0x08007419
 800735c:	08007419 	.word	0x08007419
 8007360:	08007419 	.word	0x08007419
 8007364:	080073f1 	.word	0x080073f1
 8007368:	08007419 	.word	0x08007419
 800736c:	08007419 	.word	0x08007419
 8007370:	08007419 	.word	0x08007419
 8007374:	08007419 	.word	0x08007419
 8007378:	08007419 	.word	0x08007419
 800737c:	08007419 	.word	0x08007419
 8007380:	08007419 	.word	0x08007419
 8007384:	080073f9 	.word	0x080073f9
 8007388:	08007419 	.word	0x08007419
 800738c:	08007419 	.word	0x08007419
 8007390:	08007419 	.word	0x08007419
 8007394:	08007419 	.word	0x08007419
 8007398:	08007419 	.word	0x08007419
 800739c:	08007419 	.word	0x08007419
 80073a0:	08007419 	.word	0x08007419
 80073a4:	08007401 	.word	0x08007401
 80073a8:	08007419 	.word	0x08007419
 80073ac:	08007419 	.word	0x08007419
 80073b0:	08007419 	.word	0x08007419
 80073b4:	08007419 	.word	0x08007419
 80073b8:	08007419 	.word	0x08007419
 80073bc:	08007419 	.word	0x08007419
 80073c0:	08007419 	.word	0x08007419
 80073c4:	08007409 	.word	0x08007409
 80073c8:	08007419 	.word	0x08007419
 80073cc:	08007419 	.word	0x08007419
 80073d0:	08007419 	.word	0x08007419
 80073d4:	08007419 	.word	0x08007419
 80073d8:	08007419 	.word	0x08007419
 80073dc:	08007419 	.word	0x08007419
 80073e0:	08007419 	.word	0x08007419
 80073e4:	08007411 	.word	0x08007411
 80073e8:	2301      	movs	r3, #1
 80073ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ee:	e050      	b.n	8007492 <UART_SetConfig+0x7ae>
 80073f0:	2304      	movs	r3, #4
 80073f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073f6:	e04c      	b.n	8007492 <UART_SetConfig+0x7ae>
 80073f8:	2308      	movs	r3, #8
 80073fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073fe:	e048      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007400:	2310      	movs	r3, #16
 8007402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007406:	e044      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007408:	2320      	movs	r3, #32
 800740a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800740e:	e040      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007410:	2340      	movs	r3, #64	; 0x40
 8007412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007416:	e03c      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007418:	2380      	movs	r3, #128	; 0x80
 800741a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800741e:	e038      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a71      	ldr	r2, [pc, #452]	; (80075ec <UART_SetConfig+0x908>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d130      	bne.n	800748c <UART_SetConfig+0x7a8>
 800742a:	4b6f      	ldr	r3, [pc, #444]	; (80075e8 <UART_SetConfig+0x904>)
 800742c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800742e:	f003 0307 	and.w	r3, r3, #7
 8007432:	2b05      	cmp	r3, #5
 8007434:	d826      	bhi.n	8007484 <UART_SetConfig+0x7a0>
 8007436:	a201      	add	r2, pc, #4	; (adr r2, 800743c <UART_SetConfig+0x758>)
 8007438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743c:	08007455 	.word	0x08007455
 8007440:	0800745d 	.word	0x0800745d
 8007444:	08007465 	.word	0x08007465
 8007448:	0800746d 	.word	0x0800746d
 800744c:	08007475 	.word	0x08007475
 8007450:	0800747d 	.word	0x0800747d
 8007454:	2302      	movs	r3, #2
 8007456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800745a:	e01a      	b.n	8007492 <UART_SetConfig+0x7ae>
 800745c:	2304      	movs	r3, #4
 800745e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007462:	e016      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007464:	2308      	movs	r3, #8
 8007466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800746a:	e012      	b.n	8007492 <UART_SetConfig+0x7ae>
 800746c:	2310      	movs	r3, #16
 800746e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007472:	e00e      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007474:	2320      	movs	r3, #32
 8007476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800747a:	e00a      	b.n	8007492 <UART_SetConfig+0x7ae>
 800747c:	2340      	movs	r3, #64	; 0x40
 800747e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007482:	e006      	b.n	8007492 <UART_SetConfig+0x7ae>
 8007484:	2380      	movs	r3, #128	; 0x80
 8007486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800748a:	e002      	b.n	8007492 <UART_SetConfig+0x7ae>
 800748c:	2380      	movs	r3, #128	; 0x80
 800748e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a55      	ldr	r2, [pc, #340]	; (80075ec <UART_SetConfig+0x908>)
 8007498:	4293      	cmp	r3, r2
 800749a:	f040 80f8 	bne.w	800768e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800749e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80074a2:	2b20      	cmp	r3, #32
 80074a4:	dc46      	bgt.n	8007534 <UART_SetConfig+0x850>
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	db75      	blt.n	8007596 <UART_SetConfig+0x8b2>
 80074aa:	3b02      	subs	r3, #2
 80074ac:	2b1e      	cmp	r3, #30
 80074ae:	d872      	bhi.n	8007596 <UART_SetConfig+0x8b2>
 80074b0:	a201      	add	r2, pc, #4	; (adr r2, 80074b8 <UART_SetConfig+0x7d4>)
 80074b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b6:	bf00      	nop
 80074b8:	0800753b 	.word	0x0800753b
 80074bc:	08007597 	.word	0x08007597
 80074c0:	08007543 	.word	0x08007543
 80074c4:	08007597 	.word	0x08007597
 80074c8:	08007597 	.word	0x08007597
 80074cc:	08007597 	.word	0x08007597
 80074d0:	08007553 	.word	0x08007553
 80074d4:	08007597 	.word	0x08007597
 80074d8:	08007597 	.word	0x08007597
 80074dc:	08007597 	.word	0x08007597
 80074e0:	08007597 	.word	0x08007597
 80074e4:	08007597 	.word	0x08007597
 80074e8:	08007597 	.word	0x08007597
 80074ec:	08007597 	.word	0x08007597
 80074f0:	08007563 	.word	0x08007563
 80074f4:	08007597 	.word	0x08007597
 80074f8:	08007597 	.word	0x08007597
 80074fc:	08007597 	.word	0x08007597
 8007500:	08007597 	.word	0x08007597
 8007504:	08007597 	.word	0x08007597
 8007508:	08007597 	.word	0x08007597
 800750c:	08007597 	.word	0x08007597
 8007510:	08007597 	.word	0x08007597
 8007514:	08007597 	.word	0x08007597
 8007518:	08007597 	.word	0x08007597
 800751c:	08007597 	.word	0x08007597
 8007520:	08007597 	.word	0x08007597
 8007524:	08007597 	.word	0x08007597
 8007528:	08007597 	.word	0x08007597
 800752c:	08007597 	.word	0x08007597
 8007530:	08007589 	.word	0x08007589
 8007534:	2b40      	cmp	r3, #64	; 0x40
 8007536:	d02a      	beq.n	800758e <UART_SetConfig+0x8aa>
 8007538:	e02d      	b.n	8007596 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800753a:	f7fe fd0b 	bl	8005f54 <HAL_RCCEx_GetD3PCLK1Freq>
 800753e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007540:	e02f      	b.n	80075a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007546:	4618      	mov	r0, r3
 8007548:	f7fe fd1a 	bl	8005f80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800754c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007550:	e027      	b.n	80075a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007552:	f107 0318 	add.w	r3, r7, #24
 8007556:	4618      	mov	r0, r3
 8007558:	f7fe fe66 	bl	8006228 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007560:	e01f      	b.n	80075a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007562:	4b21      	ldr	r3, [pc, #132]	; (80075e8 <UART_SetConfig+0x904>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0320 	and.w	r3, r3, #32
 800756a:	2b00      	cmp	r3, #0
 800756c:	d009      	beq.n	8007582 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800756e:	4b1e      	ldr	r3, [pc, #120]	; (80075e8 <UART_SetConfig+0x904>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	08db      	lsrs	r3, r3, #3
 8007574:	f003 0303 	and.w	r3, r3, #3
 8007578:	4a1d      	ldr	r2, [pc, #116]	; (80075f0 <UART_SetConfig+0x90c>)
 800757a:	fa22 f303 	lsr.w	r3, r2, r3
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007580:	e00f      	b.n	80075a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007582:	4b1b      	ldr	r3, [pc, #108]	; (80075f0 <UART_SetConfig+0x90c>)
 8007584:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007586:	e00c      	b.n	80075a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007588:	4b1a      	ldr	r3, [pc, #104]	; (80075f4 <UART_SetConfig+0x910>)
 800758a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800758c:	e009      	b.n	80075a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800758e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007594:	e005      	b.n	80075a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007596:	2300      	movs	r3, #0
 8007598:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80075a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 81ee 	beq.w	8007986 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	4a12      	ldr	r2, [pc, #72]	; (80075f8 <UART_SetConfig+0x914>)
 80075b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075b4:	461a      	mov	r2, r3
 80075b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80075bc:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	4613      	mov	r3, r2
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	4413      	add	r3, r2
 80075c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d305      	bcc.n	80075da <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d910      	bls.n	80075fc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80075e0:	e1d1      	b.n	8007986 <UART_SetConfig+0xca2>
 80075e2:	bf00      	nop
 80075e4:	40011c00 	.word	0x40011c00
 80075e8:	58024400 	.word	0x58024400
 80075ec:	58000c00 	.word	0x58000c00
 80075f0:	03d09000 	.word	0x03d09000
 80075f4:	003d0900 	.word	0x003d0900
 80075f8:	08019840 	.word	0x08019840
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075fe:	2200      	movs	r2, #0
 8007600:	60bb      	str	r3, [r7, #8]
 8007602:	60fa      	str	r2, [r7, #12]
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	4ac0      	ldr	r2, [pc, #768]	; (800790c <UART_SetConfig+0xc28>)
 800760a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800760e:	b29b      	uxth	r3, r3
 8007610:	2200      	movs	r2, #0
 8007612:	603b      	str	r3, [r7, #0]
 8007614:	607a      	str	r2, [r7, #4]
 8007616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800761a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800761e:	f7f8 fe65 	bl	80002ec <__aeabi_uldivmod>
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	4610      	mov	r0, r2
 8007628:	4619      	mov	r1, r3
 800762a:	f04f 0200 	mov.w	r2, #0
 800762e:	f04f 0300 	mov.w	r3, #0
 8007632:	020b      	lsls	r3, r1, #8
 8007634:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007638:	0202      	lsls	r2, r0, #8
 800763a:	6979      	ldr	r1, [r7, #20]
 800763c:	6849      	ldr	r1, [r1, #4]
 800763e:	0849      	lsrs	r1, r1, #1
 8007640:	2000      	movs	r0, #0
 8007642:	460c      	mov	r4, r1
 8007644:	4605      	mov	r5, r0
 8007646:	eb12 0804 	adds.w	r8, r2, r4
 800764a:	eb43 0905 	adc.w	r9, r3, r5
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	469a      	mov	sl, r3
 8007656:	4693      	mov	fp, r2
 8007658:	4652      	mov	r2, sl
 800765a:	465b      	mov	r3, fp
 800765c:	4640      	mov	r0, r8
 800765e:	4649      	mov	r1, r9
 8007660:	f7f8 fe44 	bl	80002ec <__aeabi_uldivmod>
 8007664:	4602      	mov	r2, r0
 8007666:	460b      	mov	r3, r1
 8007668:	4613      	mov	r3, r2
 800766a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800766c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007672:	d308      	bcc.n	8007686 <UART_SetConfig+0x9a2>
 8007674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800767a:	d204      	bcs.n	8007686 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007682:	60da      	str	r2, [r3, #12]
 8007684:	e17f      	b.n	8007986 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800768c:	e17b      	b.n	8007986 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007696:	f040 80bd 	bne.w	8007814 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800769a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800769e:	2b20      	cmp	r3, #32
 80076a0:	dc48      	bgt.n	8007734 <UART_SetConfig+0xa50>
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	db7b      	blt.n	800779e <UART_SetConfig+0xaba>
 80076a6:	2b20      	cmp	r3, #32
 80076a8:	d879      	bhi.n	800779e <UART_SetConfig+0xaba>
 80076aa:	a201      	add	r2, pc, #4	; (adr r2, 80076b0 <UART_SetConfig+0x9cc>)
 80076ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b0:	0800773b 	.word	0x0800773b
 80076b4:	08007743 	.word	0x08007743
 80076b8:	0800779f 	.word	0x0800779f
 80076bc:	0800779f 	.word	0x0800779f
 80076c0:	0800774b 	.word	0x0800774b
 80076c4:	0800779f 	.word	0x0800779f
 80076c8:	0800779f 	.word	0x0800779f
 80076cc:	0800779f 	.word	0x0800779f
 80076d0:	0800775b 	.word	0x0800775b
 80076d4:	0800779f 	.word	0x0800779f
 80076d8:	0800779f 	.word	0x0800779f
 80076dc:	0800779f 	.word	0x0800779f
 80076e0:	0800779f 	.word	0x0800779f
 80076e4:	0800779f 	.word	0x0800779f
 80076e8:	0800779f 	.word	0x0800779f
 80076ec:	0800779f 	.word	0x0800779f
 80076f0:	0800776b 	.word	0x0800776b
 80076f4:	0800779f 	.word	0x0800779f
 80076f8:	0800779f 	.word	0x0800779f
 80076fc:	0800779f 	.word	0x0800779f
 8007700:	0800779f 	.word	0x0800779f
 8007704:	0800779f 	.word	0x0800779f
 8007708:	0800779f 	.word	0x0800779f
 800770c:	0800779f 	.word	0x0800779f
 8007710:	0800779f 	.word	0x0800779f
 8007714:	0800779f 	.word	0x0800779f
 8007718:	0800779f 	.word	0x0800779f
 800771c:	0800779f 	.word	0x0800779f
 8007720:	0800779f 	.word	0x0800779f
 8007724:	0800779f 	.word	0x0800779f
 8007728:	0800779f 	.word	0x0800779f
 800772c:	0800779f 	.word	0x0800779f
 8007730:	08007791 	.word	0x08007791
 8007734:	2b40      	cmp	r3, #64	; 0x40
 8007736:	d02e      	beq.n	8007796 <UART_SetConfig+0xab2>
 8007738:	e031      	b.n	800779e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800773a:	f7fd fcd3 	bl	80050e4 <HAL_RCC_GetPCLK1Freq>
 800773e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007740:	e033      	b.n	80077aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007742:	f7fd fce5 	bl	8005110 <HAL_RCC_GetPCLK2Freq>
 8007746:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007748:	e02f      	b.n	80077aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800774a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800774e:	4618      	mov	r0, r3
 8007750:	f7fe fc16 	bl	8005f80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007758:	e027      	b.n	80077aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800775a:	f107 0318 	add.w	r3, r7, #24
 800775e:	4618      	mov	r0, r3
 8007760:	f7fe fd62 	bl	8006228 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007768:	e01f      	b.n	80077aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800776a:	4b69      	ldr	r3, [pc, #420]	; (8007910 <UART_SetConfig+0xc2c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0320 	and.w	r3, r3, #32
 8007772:	2b00      	cmp	r3, #0
 8007774:	d009      	beq.n	800778a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007776:	4b66      	ldr	r3, [pc, #408]	; (8007910 <UART_SetConfig+0xc2c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	08db      	lsrs	r3, r3, #3
 800777c:	f003 0303 	and.w	r3, r3, #3
 8007780:	4a64      	ldr	r2, [pc, #400]	; (8007914 <UART_SetConfig+0xc30>)
 8007782:	fa22 f303 	lsr.w	r3, r2, r3
 8007786:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007788:	e00f      	b.n	80077aa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800778a:	4b62      	ldr	r3, [pc, #392]	; (8007914 <UART_SetConfig+0xc30>)
 800778c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800778e:	e00c      	b.n	80077aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007790:	4b61      	ldr	r3, [pc, #388]	; (8007918 <UART_SetConfig+0xc34>)
 8007792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007794:	e009      	b.n	80077aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800779a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800779c:	e005      	b.n	80077aa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80077a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 80ea 	beq.w	8007986 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	4a55      	ldr	r2, [pc, #340]	; (800790c <UART_SetConfig+0xc28>)
 80077b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077bc:	461a      	mov	r2, r3
 80077be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80077c4:	005a      	lsls	r2, r3, #1
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	085b      	lsrs	r3, r3, #1
 80077cc:	441a      	add	r2, r3
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077da:	2b0f      	cmp	r3, #15
 80077dc:	d916      	bls.n	800780c <UART_SetConfig+0xb28>
 80077de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077e4:	d212      	bcs.n	800780c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	f023 030f 	bic.w	r3, r3, #15
 80077ee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f2:	085b      	lsrs	r3, r3, #1
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	f003 0307 	and.w	r3, r3, #7
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80077fe:	4313      	orrs	r3, r2
 8007800:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007808:	60da      	str	r2, [r3, #12]
 800780a:	e0bc      	b.n	8007986 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007812:	e0b8      	b.n	8007986 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007814:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007818:	2b20      	cmp	r3, #32
 800781a:	dc4b      	bgt.n	80078b4 <UART_SetConfig+0xbd0>
 800781c:	2b00      	cmp	r3, #0
 800781e:	f2c0 8087 	blt.w	8007930 <UART_SetConfig+0xc4c>
 8007822:	2b20      	cmp	r3, #32
 8007824:	f200 8084 	bhi.w	8007930 <UART_SetConfig+0xc4c>
 8007828:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <UART_SetConfig+0xb4c>)
 800782a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782e:	bf00      	nop
 8007830:	080078bb 	.word	0x080078bb
 8007834:	080078c3 	.word	0x080078c3
 8007838:	08007931 	.word	0x08007931
 800783c:	08007931 	.word	0x08007931
 8007840:	080078cb 	.word	0x080078cb
 8007844:	08007931 	.word	0x08007931
 8007848:	08007931 	.word	0x08007931
 800784c:	08007931 	.word	0x08007931
 8007850:	080078db 	.word	0x080078db
 8007854:	08007931 	.word	0x08007931
 8007858:	08007931 	.word	0x08007931
 800785c:	08007931 	.word	0x08007931
 8007860:	08007931 	.word	0x08007931
 8007864:	08007931 	.word	0x08007931
 8007868:	08007931 	.word	0x08007931
 800786c:	08007931 	.word	0x08007931
 8007870:	080078eb 	.word	0x080078eb
 8007874:	08007931 	.word	0x08007931
 8007878:	08007931 	.word	0x08007931
 800787c:	08007931 	.word	0x08007931
 8007880:	08007931 	.word	0x08007931
 8007884:	08007931 	.word	0x08007931
 8007888:	08007931 	.word	0x08007931
 800788c:	08007931 	.word	0x08007931
 8007890:	08007931 	.word	0x08007931
 8007894:	08007931 	.word	0x08007931
 8007898:	08007931 	.word	0x08007931
 800789c:	08007931 	.word	0x08007931
 80078a0:	08007931 	.word	0x08007931
 80078a4:	08007931 	.word	0x08007931
 80078a8:	08007931 	.word	0x08007931
 80078ac:	08007931 	.word	0x08007931
 80078b0:	08007923 	.word	0x08007923
 80078b4:	2b40      	cmp	r3, #64	; 0x40
 80078b6:	d037      	beq.n	8007928 <UART_SetConfig+0xc44>
 80078b8:	e03a      	b.n	8007930 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078ba:	f7fd fc13 	bl	80050e4 <HAL_RCC_GetPCLK1Freq>
 80078be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80078c0:	e03c      	b.n	800793c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078c2:	f7fd fc25 	bl	8005110 <HAL_RCC_GetPCLK2Freq>
 80078c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80078c8:	e038      	b.n	800793c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7fe fb56 	bl	8005f80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078d8:	e030      	b.n	800793c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078da:	f107 0318 	add.w	r3, r7, #24
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fe fca2 	bl	8006228 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078e8:	e028      	b.n	800793c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078ea:	4b09      	ldr	r3, [pc, #36]	; (8007910 <UART_SetConfig+0xc2c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0320 	and.w	r3, r3, #32
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d012      	beq.n	800791c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80078f6:	4b06      	ldr	r3, [pc, #24]	; (8007910 <UART_SetConfig+0xc2c>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	08db      	lsrs	r3, r3, #3
 80078fc:	f003 0303 	and.w	r3, r3, #3
 8007900:	4a04      	ldr	r2, [pc, #16]	; (8007914 <UART_SetConfig+0xc30>)
 8007902:	fa22 f303 	lsr.w	r3, r2, r3
 8007906:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007908:	e018      	b.n	800793c <UART_SetConfig+0xc58>
 800790a:	bf00      	nop
 800790c:	08019840 	.word	0x08019840
 8007910:	58024400 	.word	0x58024400
 8007914:	03d09000 	.word	0x03d09000
 8007918:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800791c:	4b24      	ldr	r3, [pc, #144]	; (80079b0 <UART_SetConfig+0xccc>)
 800791e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007920:	e00c      	b.n	800793c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007922:	4b24      	ldr	r3, [pc, #144]	; (80079b4 <UART_SetConfig+0xcd0>)
 8007924:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007926:	e009      	b.n	800793c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007928:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800792c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800792e:	e005      	b.n	800793c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007930:	2300      	movs	r3, #0
 8007932:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800793a:	bf00      	nop
    }

    if (pclk != 0U)
 800793c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800793e:	2b00      	cmp	r3, #0
 8007940:	d021      	beq.n	8007986 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007946:	4a1c      	ldr	r2, [pc, #112]	; (80079b8 <UART_SetConfig+0xcd4>)
 8007948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800794c:	461a      	mov	r2, r3
 800794e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007950:	fbb3 f2f2 	udiv	r2, r3, r2
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	085b      	lsrs	r3, r3, #1
 800795a:	441a      	add	r2, r3
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	fbb2 f3f3 	udiv	r3, r2, r3
 8007964:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007968:	2b0f      	cmp	r3, #15
 800796a:	d909      	bls.n	8007980 <UART_SetConfig+0xc9c>
 800796c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007972:	d205      	bcs.n	8007980 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007976:	b29a      	uxth	r2, r3
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	60da      	str	r2, [r3, #12]
 800797e:	e002      	b.n	8007986 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2201      	movs	r2, #1
 800798a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2201      	movs	r2, #1
 8007992:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	2200      	movs	r2, #0
 800799a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	2200      	movs	r2, #0
 80079a0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80079a2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3748      	adds	r7, #72	; 0x48
 80079aa:	46bd      	mov	sp, r7
 80079ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079b0:	03d09000 	.word	0x03d09000
 80079b4:	003d0900 	.word	0x003d0900
 80079b8:	08019840 	.word	0x08019840

080079bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00a      	beq.n	80079e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00a      	beq.n	8007a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0c:	f003 0304 	and.w	r3, r3, #4
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00a      	beq.n	8007a2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2e:	f003 0308 	and.w	r3, r3, #8
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00a      	beq.n	8007a4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a50:	f003 0310 	and.w	r3, r3, #16
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00a      	beq.n	8007a6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00a      	beq.n	8007a90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d01a      	beq.n	8007ad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aba:	d10a      	bne.n	8007ad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	430a      	orrs	r2, r1
 8007af2:	605a      	str	r2, [r3, #4]
  }
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af02      	add	r7, sp, #8
 8007b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b10:	f7fb ffec 	bl	8003aec <HAL_GetTick>
 8007b14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0308 	and.w	r3, r3, #8
 8007b20:	2b08      	cmp	r3, #8
 8007b22:	d10e      	bne.n	8007b42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f82f 	bl	8007b96 <UART_WaitOnFlagUntilTimeout>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e025      	b.n	8007b8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d10e      	bne.n	8007b6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f819 	bl	8007b96 <UART_WaitOnFlagUntilTimeout>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e00f      	b.n	8007b8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b09c      	sub	sp, #112	; 0x70
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	60f8      	str	r0, [r7, #12]
 8007b9e:	60b9      	str	r1, [r7, #8]
 8007ba0:	603b      	str	r3, [r7, #0]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ba6:	e0a9      	b.n	8007cfc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bae:	f000 80a5 	beq.w	8007cfc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bb2:	f7fb ff9b 	bl	8003aec <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d302      	bcc.n	8007bc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8007bc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d140      	bne.n	8007c4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bd0:	e853 3f00 	ldrex	r3, [r3]
 8007bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bdc:	667b      	str	r3, [r7, #100]	; 0x64
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007be6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007be8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007bee:	e841 2300 	strex	r3, r2, [r1]
 8007bf2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1e6      	bne.n	8007bc8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	3308      	adds	r3, #8
 8007c00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c04:	e853 3f00 	ldrex	r3, [r3]
 8007c08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0c:	f023 0301 	bic.w	r3, r3, #1
 8007c10:	663b      	str	r3, [r7, #96]	; 0x60
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3308      	adds	r3, #8
 8007c18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c22:	e841 2300 	strex	r3, r2, [r1]
 8007c26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1e5      	bne.n	8007bfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2220      	movs	r2, #32
 8007c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e069      	b.n	8007d1e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d051      	beq.n	8007cfc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c66:	d149      	bne.n	8007cfc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	e853 3f00 	ldrex	r3, [r3]
 8007c7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c90:	637b      	str	r3, [r7, #52]	; 0x34
 8007c92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c98:	e841 2300 	strex	r3, r2, [r1]
 8007c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1e6      	bne.n	8007c72 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3308      	adds	r3, #8
 8007caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	e853 3f00 	ldrex	r3, [r3]
 8007cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	f023 0301 	bic.w	r3, r3, #1
 8007cba:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3308      	adds	r3, #8
 8007cc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007cc4:	623a      	str	r2, [r7, #32]
 8007cc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc8:	69f9      	ldr	r1, [r7, #28]
 8007cca:	6a3a      	ldr	r2, [r7, #32]
 8007ccc:	e841 2300 	strex	r3, r2, [r1]
 8007cd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e5      	bne.n	8007ca4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2220      	movs	r2, #32
 8007cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2220      	movs	r2, #32
 8007ce4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2220      	movs	r2, #32
 8007cec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e010      	b.n	8007d1e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	69da      	ldr	r2, [r3, #28]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	4013      	ands	r3, r2
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	bf0c      	ite	eq
 8007d0c:	2301      	moveq	r3, #1
 8007d0e:	2300      	movne	r3, #0
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	461a      	mov	r2, r3
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	f43f af46 	beq.w	8007ba8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3770      	adds	r7, #112	; 0x70
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d101      	bne.n	8007d3c <HAL_UARTEx_DisableFifoMode+0x16>
 8007d38:	2302      	movs	r3, #2
 8007d3a:	e027      	b.n	8007d8c <HAL_UARTEx_DisableFifoMode+0x66>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2224      	movs	r2, #36	; 0x24
 8007d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f022 0201 	bic.w	r2, r2, #1
 8007d62:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d6a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2220      	movs	r2, #32
 8007d7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d101      	bne.n	8007db0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007dac:	2302      	movs	r3, #2
 8007dae:	e02d      	b.n	8007e0c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2224      	movs	r2, #36	; 0x24
 8007dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f022 0201 	bic.w	r2, r2, #1
 8007dd6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f84f 	bl	8007e90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2220      	movs	r2, #32
 8007dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d101      	bne.n	8007e2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e28:	2302      	movs	r3, #2
 8007e2a:	e02d      	b.n	8007e88 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2224      	movs	r2, #36	; 0x24
 8007e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f022 0201 	bic.w	r2, r2, #1
 8007e52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f811 	bl	8007e90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d108      	bne.n	8007eb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007eb0:	e031      	b.n	8007f16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007eb2:	2310      	movs	r3, #16
 8007eb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007eb6:	2310      	movs	r3, #16
 8007eb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	0e5b      	lsrs	r3, r3, #25
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	f003 0307 	and.w	r3, r3, #7
 8007ec8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	0f5b      	lsrs	r3, r3, #29
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	f003 0307 	and.w	r3, r3, #7
 8007ed8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007eda:	7bbb      	ldrb	r3, [r7, #14]
 8007edc:	7b3a      	ldrb	r2, [r7, #12]
 8007ede:	4911      	ldr	r1, [pc, #68]	; (8007f24 <UARTEx_SetNbDataToProcess+0x94>)
 8007ee0:	5c8a      	ldrb	r2, [r1, r2]
 8007ee2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ee6:	7b3a      	ldrb	r2, [r7, #12]
 8007ee8:	490f      	ldr	r1, [pc, #60]	; (8007f28 <UARTEx_SetNbDataToProcess+0x98>)
 8007eea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007eec:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
 8007efa:	7b7a      	ldrb	r2, [r7, #13]
 8007efc:	4909      	ldr	r1, [pc, #36]	; (8007f24 <UARTEx_SetNbDataToProcess+0x94>)
 8007efe:	5c8a      	ldrb	r2, [r1, r2]
 8007f00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f04:	7b7a      	ldrb	r2, [r7, #13]
 8007f06:	4908      	ldr	r1, [pc, #32]	; (8007f28 <UARTEx_SetNbDataToProcess+0x98>)
 8007f08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007f16:	bf00      	nop
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	08019858 	.word	0x08019858
 8007f28:	08019860 	.word	0x08019860

08007f2c <__libc_init_array>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	4d0d      	ldr	r5, [pc, #52]	; (8007f64 <__libc_init_array+0x38>)
 8007f30:	4c0d      	ldr	r4, [pc, #52]	; (8007f68 <__libc_init_array+0x3c>)
 8007f32:	1b64      	subs	r4, r4, r5
 8007f34:	10a4      	asrs	r4, r4, #2
 8007f36:	2600      	movs	r6, #0
 8007f38:	42a6      	cmp	r6, r4
 8007f3a:	d109      	bne.n	8007f50 <__libc_init_array+0x24>
 8007f3c:	4d0b      	ldr	r5, [pc, #44]	; (8007f6c <__libc_init_array+0x40>)
 8007f3e:	4c0c      	ldr	r4, [pc, #48]	; (8007f70 <__libc_init_array+0x44>)
 8007f40:	f000 f862 	bl	8008008 <_init>
 8007f44:	1b64      	subs	r4, r4, r5
 8007f46:	10a4      	asrs	r4, r4, #2
 8007f48:	2600      	movs	r6, #0
 8007f4a:	42a6      	cmp	r6, r4
 8007f4c:	d105      	bne.n	8007f5a <__libc_init_array+0x2e>
 8007f4e:	bd70      	pop	{r4, r5, r6, pc}
 8007f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f54:	4798      	blx	r3
 8007f56:	3601      	adds	r6, #1
 8007f58:	e7ee      	b.n	8007f38 <__libc_init_array+0xc>
 8007f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f5e:	4798      	blx	r3
 8007f60:	3601      	adds	r6, #1
 8007f62:	e7f2      	b.n	8007f4a <__libc_init_array+0x1e>
 8007f64:	08019870 	.word	0x08019870
 8007f68:	08019870 	.word	0x08019870
 8007f6c:	08019870 	.word	0x08019870
 8007f70:	08019874 	.word	0x08019874

08007f74 <memset>:
 8007f74:	4402      	add	r2, r0
 8007f76:	4603      	mov	r3, r0
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d100      	bne.n	8007f7e <memset+0xa>
 8007f7c:	4770      	bx	lr
 8007f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f82:	e7f9      	b.n	8007f78 <memset+0x4>

08007f84 <ceilf>:
 8007f84:	ee10 3a10 	vmov	r3, s0
 8007f88:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007f8c:	3a7f      	subs	r2, #127	; 0x7f
 8007f8e:	2a16      	cmp	r2, #22
 8007f90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f94:	dc2a      	bgt.n	8007fec <ceilf+0x68>
 8007f96:	2a00      	cmp	r2, #0
 8007f98:	da11      	bge.n	8007fbe <ceilf+0x3a>
 8007f9a:	eddf 7a19 	vldr	s15, [pc, #100]	; 8008000 <ceilf+0x7c>
 8007f9e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007fa2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007faa:	dd05      	ble.n	8007fb8 <ceilf+0x34>
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	db23      	blt.n	8007ff8 <ceilf+0x74>
 8007fb0:	2900      	cmp	r1, #0
 8007fb2:	bf18      	it	ne
 8007fb4:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8007fb8:	ee00 3a10 	vmov	s0, r3
 8007fbc:	4770      	bx	lr
 8007fbe:	4911      	ldr	r1, [pc, #68]	; (8008004 <ceilf+0x80>)
 8007fc0:	4111      	asrs	r1, r2
 8007fc2:	420b      	tst	r3, r1
 8007fc4:	d0fa      	beq.n	8007fbc <ceilf+0x38>
 8007fc6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8008000 <ceilf+0x7c>
 8007fca:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007fce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fd6:	ddef      	ble.n	8007fb8 <ceilf+0x34>
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	bfc2      	ittt	gt
 8007fdc:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8007fe0:	fa40 f202 	asrgt.w	r2, r0, r2
 8007fe4:	189b      	addgt	r3, r3, r2
 8007fe6:	ea23 0301 	bic.w	r3, r3, r1
 8007fea:	e7e5      	b.n	8007fb8 <ceilf+0x34>
 8007fec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007ff0:	d3e4      	bcc.n	8007fbc <ceilf+0x38>
 8007ff2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007ff6:	4770      	bx	lr
 8007ff8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ffc:	e7dc      	b.n	8007fb8 <ceilf+0x34>
 8007ffe:	bf00      	nop
 8008000:	7149f2ca 	.word	0x7149f2ca
 8008004:	007fffff 	.word	0x007fffff

08008008 <_init>:
 8008008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800a:	bf00      	nop
 800800c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800e:	bc08      	pop	{r3}
 8008010:	469e      	mov	lr, r3
 8008012:	4770      	bx	lr

08008014 <_fini>:
 8008014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008016:	bf00      	nop
 8008018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800801a:	bc08      	pop	{r3}
 800801c:	469e      	mov	lr, r3
 800801e:	4770      	bx	lr
