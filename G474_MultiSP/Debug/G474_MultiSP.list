
G474_MultiSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005854  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005a2c  08005a2c  00015a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a6c  08005a6c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005a6c  08005a6c  00015a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a74  08005a74  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a74  08005a74  00015a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a78  08005a78  00015a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000010  08005a8c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08005a8c  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001688e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002723  00000000  00000000  000368ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  00038ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  0003a308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026bb0  00000000  00000000  0003b530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017382  00000000  00000000  000620e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe4da  00000000  00000000  00079462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017793c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000536c  00000000  00000000  0017798c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005a14 	.word	0x08005a14

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08005a14 	.word	0x08005a14

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b974 	b.w	8000d94 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	4604      	mov	r4, r0
 8000acc:	468e      	mov	lr, r1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d14d      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad2:	428a      	cmp	r2, r1
 8000ad4:	4694      	mov	ip, r2
 8000ad6:	d969      	bls.n	8000bac <__udivmoddi4+0xe8>
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	b152      	cbz	r2, 8000af4 <__udivmoddi4+0x30>
 8000ade:	fa01 f302 	lsl.w	r3, r1, r2
 8000ae2:	f1c2 0120 	rsb	r1, r2, #32
 8000ae6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aee:	ea41 0e03 	orr.w	lr, r1, r3
 8000af2:	4094      	lsls	r4, r2
 8000af4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af8:	0c21      	lsrs	r1, r4, #16
 8000afa:	fbbe f6f8 	udiv	r6, lr, r8
 8000afe:	fa1f f78c 	uxth.w	r7, ip
 8000b02:	fb08 e316 	mls	r3, r8, r6, lr
 8000b06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b0a:	fb06 f107 	mul.w	r1, r6, r7
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b1a:	f080 811f 	bcs.w	8000d5c <__udivmoddi4+0x298>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 811c 	bls.w	8000d5c <__udivmoddi4+0x298>
 8000b24:	3e02      	subs	r6, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a5b      	subs	r3, r3, r1
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b30:	fb08 3310 	mls	r3, r8, r0, r3
 8000b34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b38:	fb00 f707 	mul.w	r7, r0, r7
 8000b3c:	42a7      	cmp	r7, r4
 8000b3e:	d90a      	bls.n	8000b56 <__udivmoddi4+0x92>
 8000b40:	eb1c 0404 	adds.w	r4, ip, r4
 8000b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b48:	f080 810a 	bcs.w	8000d60 <__udivmoddi4+0x29c>
 8000b4c:	42a7      	cmp	r7, r4
 8000b4e:	f240 8107 	bls.w	8000d60 <__udivmoddi4+0x29c>
 8000b52:	4464      	add	r4, ip
 8000b54:	3802      	subs	r0, #2
 8000b56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b5a:	1be4      	subs	r4, r4, r7
 8000b5c:	2600      	movs	r6, #0
 8000b5e:	b11d      	cbz	r5, 8000b68 <__udivmoddi4+0xa4>
 8000b60:	40d4      	lsrs	r4, r2
 8000b62:	2300      	movs	r3, #0
 8000b64:	e9c5 4300 	strd	r4, r3, [r5]
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d909      	bls.n	8000b86 <__udivmoddi4+0xc2>
 8000b72:	2d00      	cmp	r5, #0
 8000b74:	f000 80ef 	beq.w	8000d56 <__udivmoddi4+0x292>
 8000b78:	2600      	movs	r6, #0
 8000b7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b7e:	4630      	mov	r0, r6
 8000b80:	4631      	mov	r1, r6
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	fab3 f683 	clz	r6, r3
 8000b8a:	2e00      	cmp	r6, #0
 8000b8c:	d14a      	bne.n	8000c24 <__udivmoddi4+0x160>
 8000b8e:	428b      	cmp	r3, r1
 8000b90:	d302      	bcc.n	8000b98 <__udivmoddi4+0xd4>
 8000b92:	4282      	cmp	r2, r0
 8000b94:	f200 80f9 	bhi.w	8000d8a <__udivmoddi4+0x2c6>
 8000b98:	1a84      	subs	r4, r0, r2
 8000b9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	469e      	mov	lr, r3
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	d0e0      	beq.n	8000b68 <__udivmoddi4+0xa4>
 8000ba6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000baa:	e7dd      	b.n	8000b68 <__udivmoddi4+0xa4>
 8000bac:	b902      	cbnz	r2, 8000bb0 <__udivmoddi4+0xec>
 8000bae:	deff      	udf	#255	; 0xff
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	2a00      	cmp	r2, #0
 8000bb6:	f040 8092 	bne.w	8000cde <__udivmoddi4+0x21a>
 8000bba:	eba1 010c 	sub.w	r1, r1, ip
 8000bbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc2:	fa1f fe8c 	uxth.w	lr, ip
 8000bc6:	2601      	movs	r6, #1
 8000bc8:	0c20      	lsrs	r0, r4, #16
 8000bca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bce:	fb07 1113 	mls	r1, r7, r3, r1
 8000bd2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd6:	fb0e f003 	mul.w	r0, lr, r3
 8000bda:	4288      	cmp	r0, r1
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x12c>
 8000bde:	eb1c 0101 	adds.w	r1, ip, r1
 8000be2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x12a>
 8000be8:	4288      	cmp	r0, r1
 8000bea:	f200 80cb 	bhi.w	8000d84 <__udivmoddi4+0x2c0>
 8000bee:	4643      	mov	r3, r8
 8000bf0:	1a09      	subs	r1, r1, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c00:	fb0e fe00 	mul.w	lr, lr, r0
 8000c04:	45a6      	cmp	lr, r4
 8000c06:	d908      	bls.n	8000c1a <__udivmoddi4+0x156>
 8000c08:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c10:	d202      	bcs.n	8000c18 <__udivmoddi4+0x154>
 8000c12:	45a6      	cmp	lr, r4
 8000c14:	f200 80bb 	bhi.w	8000d8e <__udivmoddi4+0x2ca>
 8000c18:	4608      	mov	r0, r1
 8000c1a:	eba4 040e 	sub.w	r4, r4, lr
 8000c1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c22:	e79c      	b.n	8000b5e <__udivmoddi4+0x9a>
 8000c24:	f1c6 0720 	rsb	r7, r6, #32
 8000c28:	40b3      	lsls	r3, r6
 8000c2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c32:	fa20 f407 	lsr.w	r4, r0, r7
 8000c36:	fa01 f306 	lsl.w	r3, r1, r6
 8000c3a:	431c      	orrs	r4, r3
 8000c3c:	40f9      	lsrs	r1, r7
 8000c3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c42:	fa00 f306 	lsl.w	r3, r0, r6
 8000c46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c4a:	0c20      	lsrs	r0, r4, #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fb09 1118 	mls	r1, r9, r8, r1
 8000c54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c58:	fb08 f00e 	mul.w	r0, r8, lr
 8000c5c:	4288      	cmp	r0, r1
 8000c5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b8>
 8000c64:	eb1c 0101 	adds.w	r1, ip, r1
 8000c68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c6c:	f080 8088 	bcs.w	8000d80 <__udivmoddi4+0x2bc>
 8000c70:	4288      	cmp	r0, r1
 8000c72:	f240 8085 	bls.w	8000d80 <__udivmoddi4+0x2bc>
 8000c76:	f1a8 0802 	sub.w	r8, r8, #2
 8000c7a:	4461      	add	r1, ip
 8000c7c:	1a09      	subs	r1, r1, r0
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c84:	fb09 1110 	mls	r1, r9, r0, r1
 8000c88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c90:	458e      	cmp	lr, r1
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1e2>
 8000c94:	eb1c 0101 	adds.w	r1, ip, r1
 8000c98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c9c:	d26c      	bcs.n	8000d78 <__udivmoddi4+0x2b4>
 8000c9e:	458e      	cmp	lr, r1
 8000ca0:	d96a      	bls.n	8000d78 <__udivmoddi4+0x2b4>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	4461      	add	r1, ip
 8000ca6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000caa:	fba0 9402 	umull	r9, r4, r0, r2
 8000cae:	eba1 010e 	sub.w	r1, r1, lr
 8000cb2:	42a1      	cmp	r1, r4
 8000cb4:	46c8      	mov	r8, r9
 8000cb6:	46a6      	mov	lr, r4
 8000cb8:	d356      	bcc.n	8000d68 <__udivmoddi4+0x2a4>
 8000cba:	d053      	beq.n	8000d64 <__udivmoddi4+0x2a0>
 8000cbc:	b15d      	cbz	r5, 8000cd6 <__udivmoddi4+0x212>
 8000cbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000cc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000cc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cca:	fa22 f306 	lsr.w	r3, r2, r6
 8000cce:	40f1      	lsrs	r1, r6
 8000cd0:	431f      	orrs	r7, r3
 8000cd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000cd6:	2600      	movs	r6, #0
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	f1c2 0320 	rsb	r3, r2, #32
 8000ce2:	40d8      	lsrs	r0, r3
 8000ce4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4301      	orrs	r1, r0
 8000cf0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf4:	fa1f fe8c 	uxth.w	lr, ip
 8000cf8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cfc:	fb07 3610 	mls	r6, r7, r0, r3
 8000d00:	0c0b      	lsrs	r3, r1, #16
 8000d02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d06:	fb00 f60e 	mul.w	r6, r0, lr
 8000d0a:	429e      	cmp	r6, r3
 8000d0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x260>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d1a:	d22f      	bcs.n	8000d7c <__udivmoddi4+0x2b8>
 8000d1c:	429e      	cmp	r6, r3
 8000d1e:	d92d      	bls.n	8000d7c <__udivmoddi4+0x2b8>
 8000d20:	3802      	subs	r0, #2
 8000d22:	4463      	add	r3, ip
 8000d24:	1b9b      	subs	r3, r3, r6
 8000d26:	b289      	uxth	r1, r1
 8000d28:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d2c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb06 f30e 	mul.w	r3, r6, lr
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x28a>
 8000d3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d40:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d44:	d216      	bcs.n	8000d74 <__udivmoddi4+0x2b0>
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d914      	bls.n	8000d74 <__udivmoddi4+0x2b0>
 8000d4a:	3e02      	subs	r6, #2
 8000d4c:	4461      	add	r1, ip
 8000d4e:	1ac9      	subs	r1, r1, r3
 8000d50:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d54:	e738      	b.n	8000bc8 <__udivmoddi4+0x104>
 8000d56:	462e      	mov	r6, r5
 8000d58:	4628      	mov	r0, r5
 8000d5a:	e705      	b.n	8000b68 <__udivmoddi4+0xa4>
 8000d5c:	4606      	mov	r6, r0
 8000d5e:	e6e3      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d60:	4618      	mov	r0, r3
 8000d62:	e6f8      	b.n	8000b56 <__udivmoddi4+0x92>
 8000d64:	454b      	cmp	r3, r9
 8000d66:	d2a9      	bcs.n	8000cbc <__udivmoddi4+0x1f8>
 8000d68:	ebb9 0802 	subs.w	r8, r9, r2
 8000d6c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d70:	3801      	subs	r0, #1
 8000d72:	e7a3      	b.n	8000cbc <__udivmoddi4+0x1f8>
 8000d74:	4646      	mov	r6, r8
 8000d76:	e7ea      	b.n	8000d4e <__udivmoddi4+0x28a>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	e794      	b.n	8000ca6 <__udivmoddi4+0x1e2>
 8000d7c:	4640      	mov	r0, r8
 8000d7e:	e7d1      	b.n	8000d24 <__udivmoddi4+0x260>
 8000d80:	46d0      	mov	r8, sl
 8000d82:	e77b      	b.n	8000c7c <__udivmoddi4+0x1b8>
 8000d84:	3b02      	subs	r3, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	e732      	b.n	8000bf0 <__udivmoddi4+0x12c>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e709      	b.n	8000ba2 <__udivmoddi4+0xde>
 8000d8e:	4464      	add	r4, ip
 8000d90:	3802      	subs	r0, #2
 8000d92:	e742      	b.n	8000c1a <__udivmoddi4+0x156>

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <INA219_INIT>:

	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);

}

void INA219_INIT(I2C_HandleTypeDef *hi2c,uint8_t dv_addr, INA219_Conf_Strc cfgra){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af04      	add	r7, sp, #16
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	803a      	strh	r2, [r7, #0]
 8000da4:	70fb      	strb	r3, [r7, #3]
		cofgra.INA219CF.Mode = INAM_ShuntBusV_Continuous;

  	  	INA219_INIT(&hi2c1, INA219_ADDR_1, cofgra);
	 * */

	uint8_t confictor_si2c[2] = {cfgra.D8[1], cfgra.D8[0]};
 8000da6:	787b      	ldrb	r3, [r7, #1]
 8000da8:	733b      	strb	r3, [r7, #12]
 8000daa:	783b      	ldrb	r3, [r7, #0]
 8000dac:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &confictor_si2c[0], 2, 10);
 8000dae:	78fb      	ldrb	r3, [r7, #3]
 8000db0:	b299      	uxth	r1, r3
 8000db2:	230a      	movs	r3, #10
 8000db4:	9302      	str	r3, [sp, #8]
 8000db6:	2302      	movs	r3, #2
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	f107 030c 	add.w	r3, r7, #12
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f001 fa19 	bl	80021fc <HAL_I2C_Mem_Write>

}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	0000      	movs	r0, r0
 8000dd4:	0000      	movs	r0, r0
	...

08000dd8 <INA219_Calibrate>:

void INA219_Calibrate(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af04      	add	r7, sp, #16
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	70fb      	strb	r3, [r7, #3]
		uint8_t  U8[2];
		uint16_t U16;
	}calibrator;


	calibrator.U16 = trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val));
 8000de4:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <INA219_Calibrate+0xf0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fb79 	bl	80004e0 <__aeabi_f2d>
 8000dee:	a32e      	add	r3, pc, #184	; (adr r3, 8000ea8 <INA219_Calibrate+0xd0>)
 8000df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df4:	f7ff fbcc 	bl	8000590 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	a12c      	add	r1, pc, #176	; (adr r1, 8000eb0 <INA219_Calibrate+0xd8>)
 8000dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e02:	f7ff fcef 	bl	80007e4 <__aeabi_ddiv>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	ec43 2b17 	vmov	d7, r2, r3
 8000e0e:	eeb0 0a47 	vmov.f32	s0, s14
 8000e12:	eef0 0a67 	vmov.f32	s1, s15
 8000e16:	f004 fdcb 	bl	80059b0 <trunc>
 8000e1a:	ec53 2b10 	vmov	r2, r3, d0
 8000e1e:	4610      	mov	r0, r2
 8000e20:	4619      	mov	r1, r3
 8000e22:	f7ff fdc7 	bl	80009b4 <__aeabi_d2uiz>
 8000e26:	4603      	mov	r3, r0
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	81bb      	strh	r3, [r7, #12]
#ifdef calibrate_EQ6
	calibrator.U16 = trunc((calibrator.U16 * MeaShuntCurrent_ExtMeter) / INA219_Current_Raw);
 8000e2c:	89bb      	ldrh	r3, [r7, #12]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fb44 	bl	80004bc <__aeabi_i2d>
 8000e34:	a320      	add	r3, pc, #128	; (adr r3, 8000eb8 <INA219_Calibrate+0xe0>)
 8000e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3a:	f7ff fba9 	bl	8000590 <__aeabi_dmul>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	4610      	mov	r0, r2
 8000e44:	4619      	mov	r1, r3
 8000e46:	a31e      	add	r3, pc, #120	; (adr r3, 8000ec0 <INA219_Calibrate+0xe8>)
 8000e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4c:	f7ff fcca 	bl	80007e4 <__aeabi_ddiv>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	ec43 2b17 	vmov	d7, r2, r3
 8000e58:	eeb0 0a47 	vmov.f32	s0, s14
 8000e5c:	eef0 0a67 	vmov.f32	s1, s15
 8000e60:	f004 fda6 	bl	80059b0 <trunc>
 8000e64:	ec53 2b10 	vmov	r2, r3, d0
 8000e68:	4610      	mov	r0, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f7ff fda2 	bl	80009b4 <__aeabi_d2uiz>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	81bb      	strh	r3, [r7, #12]
#endif
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
 8000e76:	7b7b      	ldrb	r3, [r7, #13]
 8000e78:	723b      	strb	r3, [r7, #8]
 8000e7a:	7b3b      	ldrb	r3, [r7, #12]
 8000e7c:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);
 8000e7e:	78fb      	ldrb	r3, [r7, #3]
 8000e80:	b299      	uxth	r1, r3
 8000e82:	230a      	movs	r3, #10
 8000e84:	9302      	str	r3, [sp, #8]
 8000e86:	2302      	movs	r3, #2
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	f107 0308 	add.w	r3, r7, #8
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2301      	movs	r3, #1
 8000e92:	2205      	movs	r2, #5
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f001 f9b1 	bl	80021fc <HAL_I2C_Mem_Write>

}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	f3af 8000 	nop.w
 8000ea8:	9999999a 	.word	0x9999999a
 8000eac:	3fb99999 	.word	0x3fb99999
 8000eb0:	88e368f1 	.word	0x88e368f1
 8000eb4:	3fa4f8b5 	.word	0x3fa4f8b5
 8000eb8:	9999999a 	.word	0x9999999a
 8000ebc:	3fe99999 	.word	0x3fe99999
 8000ec0:	9999999a 	.word	0x9999999a
 8000ec4:	40059999 	.word	0x40059999
 8000ec8:	20000000 	.word	0x20000000

08000ecc <INA219Read_BusV>:

uint16_t INA219Read_BusV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af04      	add	r7, sp, #16
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
	//	if(INACBffr[2] & 0x01){ // still unsure how to deal with CNVR / OVF
//
//	}


	INACBffr.D32 = 0; //// buffer clear
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <INA219Read_BusV+0x48>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_BusV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8000ede:	78fb      	ldrb	r3, [r7, #3]
 8000ee0:	b299      	uxth	r1, r3
 8000ee2:	230a      	movs	r3, #10
 8000ee4:	9302      	str	r3, [sp, #8]
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	9301      	str	r3, [sp, #4]
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <INA219Read_BusV+0x4c>)
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2301      	movs	r3, #1
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f001 fa96 	bl	8002424 <HAL_I2C_Mem_Read>

	return ((INACBffr.D16[1] | INACBffr.D16[0]) >> 3) * 4;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <INA219Read_BusV+0x48>)
 8000efa:	885a      	ldrh	r2, [r3, #2]
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <INA219Read_BusV+0x48>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	08db      	lsrs	r3, r3, #3
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	b29b      	uxth	r3, r3
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000002c 	.word	0x2000002c
 8000f18:	2000002d 	.word	0x2000002d

08000f1c <INA219Read_Current>:

int16_t INA219Read_Current(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af04      	add	r7, sp, #16
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: current in mA
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <INA219Read_Current+0x44>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_Current, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8000f2e:	78fb      	ldrb	r3, [r7, #3]
 8000f30:	b299      	uxth	r1, r3
 8000f32:	230a      	movs	r3, #10
 8000f34:	9302      	str	r3, [sp, #8]
 8000f36:	2302      	movs	r3, #2
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <INA219Read_Current+0x48>)
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2301      	movs	r3, #1
 8000f40:	2204      	movs	r2, #4
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f001 fa6e 	bl	8002424 <HAL_I2C_Mem_Read>

	return INACBffr.D16[1] | INACBffr.D16[0];
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <INA219Read_Current+0x44>)
 8000f4a:	885a      	ldrh	r2, [r3, #2]
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <INA219Read_Current+0x44>)
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	b21b      	sxth	r3, r3
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2000002c 	.word	0x2000002c
 8000f64:	2000002d 	.word	0x2000002d

08000f68 <INA219Read_ShuntV>:

float INA219Read_ShuntV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af04      	add	r7, sp, #16
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: shunt voltage in mV (.2f)
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <INA219Read_ShuntV+0x6c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_ShuntV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8000f7a:	78fb      	ldrb	r3, [r7, #3]
 8000f7c:	b299      	uxth	r1, r3
 8000f7e:	230a      	movs	r3, #10
 8000f80:	9302      	str	r3, [sp, #8]
 8000f82:	2302      	movs	r3, #2
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <INA219Read_ShuntV+0x70>)
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f001 fa48 	bl	8002424 <HAL_I2C_Mem_Read>

	//// Convert rawdata To V shunt from Table 7.Shunt Voltage Register Format

    int16_t rawshunt = INACBffr.D16[1] | INACBffr.D16[0];
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <INA219Read_ShuntV+0x6c>)
 8000f96:	885a      	ldrh	r2, [r3, #2]
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <INA219Read_ShuntV+0x6c>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	81fb      	strh	r3, [r7, #14]
    return rawshunt / 100.0;
 8000fa2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fa88 	bl	80004bc <__aeabi_i2d>
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <INA219Read_ShuntV+0x74>)
 8000fb2:	f7ff fc17 	bl	80007e4 <__aeabi_ddiv>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fd19 	bl	80009f4 <__aeabi_d2f>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	ee07 3a90 	vmov	s15, r3
//    	return rawshunt / 100.0;
//    }else{
//    	// if 2's complements
//    	return (~rawshunt + 1) / 100.0;
//    }
}
 8000fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000002c 	.word	0x2000002c
 8000fd8:	2000002d 	.word	0x2000002d
 8000fdc:	40590000 	.word	0x40590000

08000fe0 <INA219Read_Power>:

float INA219Read_Power(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af04      	add	r7, sp, #16
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: Power in mW
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 8000fec:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <INA219Read_Power+0x88>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_PoWer, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8000ff2:	78fb      	ldrb	r3, [r7, #3]
 8000ff4:	b299      	uxth	r1, r3
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	9302      	str	r3, [sp, #8]
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	; (800106c <INA219Read_Power+0x8c>)
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2301      	movs	r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f001 fa0c 	bl	8002424 <HAL_I2C_Mem_Read>
	////  * 20, power_LSB = 20 x current_LSB & x 1000 make unit in mW
	return ((INACBffr.D16[1] | INACBffr.D16[0])* (20000.0 * current_LSB)); //* (20000.0 * current_LSB)
 800100c:	4b16      	ldr	r3, [pc, #88]	; (8001068 <INA219Read_Power+0x88>)
 800100e:	885a      	ldrh	r2, [r3, #2]
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <INA219Read_Power+0x88>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	4313      	orrs	r3, r2
 8001016:	b29b      	uxth	r3, r3
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fa4f 	bl	80004bc <__aeabi_i2d>
 800101e:	4604      	mov	r4, r0
 8001020:	460d      	mov	r5, r1
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <INA219Read_Power+0x90>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fa5a 	bl	80004e0 <__aeabi_f2d>
 800102c:	a30c      	add	r3, pc, #48	; (adr r3, 8001060 <INA219Read_Power+0x80>)
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	f7ff faad 	bl	8000590 <__aeabi_dmul>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4620      	mov	r0, r4
 800103c:	4629      	mov	r1, r5
 800103e:	f7ff faa7 	bl	8000590 <__aeabi_dmul>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	f7ff fcd3 	bl	80009f4 <__aeabi_d2f>
 800104e:	4603      	mov	r3, r0
 8001050:	ee07 3a90 	vmov	s15, r3
}
 8001054:	eeb0 0a67 	vmov.f32	s0, s15
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bdb0      	pop	{r4, r5, r7, pc}
 800105e:	bf00      	nop
 8001060:	00000000 	.word	0x00000000
 8001064:	40d38800 	.word	0x40d38800
 8001068:	2000002c 	.word	0x2000002c
 800106c:	2000002d 	.word	0x2000002d
 8001070:	20000000 	.word	0x20000000

08001074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001078:	f000 fccd 	bl	8001a16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107c:	f000 f8dc 	bl	8001238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001080:	f000 fa70 	bl	8001564 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001084:	f000 f964 	bl	8001350 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8001088:	f000 f9b4 	bl	80013f4 <MX_TIM3_Init>
  MX_UART5_Init();
 800108c:	f000 f9aa 	bl	80013e4 <MX_UART5_Init>
  MX_TIM4_Init();
 8001090:	f000 fa0c 	bl	80014ac <MX_TIM4_Init>
  MX_I2C1_Init();
 8001094:	f000 f91c 	bl	80012d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8001098:	485d      	ldr	r0, [pc, #372]	; (8001210 <main+0x19c>)
 800109a:	f002 fe67 	bl	8003d6c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800109e:	2100      	movs	r1, #0
 80010a0:	485b      	ldr	r0, [pc, #364]	; (8001210 <main+0x19c>)
 80010a2:	f002 ff2b 	bl	8003efc <HAL_TIM_PWM_Start>
  //// MI PWM exam dummy
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80010a6:	2100      	movs	r1, #0
 80010a8:	485a      	ldr	r0, [pc, #360]	; (8001214 <main+0x1a0>)
 80010aa:	f002 ff27 	bl	8003efc <HAL_TIM_PWM_Start>
  TIM4->CCR1 = 3749;
 80010ae:	4b5a      	ldr	r3, [pc, #360]	; (8001218 <main+0x1a4>)
 80010b0:	f640 62a5 	movw	r2, #3749	; 0xea5
 80010b4:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->ARR = 8999;
 80010b6:	4b58      	ldr	r3, [pc, #352]	; (8001218 <main+0x1a4>)
 80010b8:	f242 3227 	movw	r2, #8999	; 0x2327
 80010bc:	62da      	str	r2, [r3, #44]	; 0x2c

  svo.gain = 20;
 80010be:	4b57      	ldr	r3, [pc, #348]	; (800121c <main+0x1a8>)
 80010c0:	2214      	movs	r2, #20
 80010c2:	709a      	strb	r2, [r3, #2]

#ifdef INA_wrk
  //INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_1); // custom set replace, Rshunt change
  //INA219_INIT_Calibrate_CC(&hi2c1, INA219_ADDR_1, 0.1, 10); // 0.01, 10
   cofgra.INA219CF.reset = 0;
 80010c4:	4a56      	ldr	r2, [pc, #344]	; (8001220 <main+0x1ac>)
 80010c6:	7853      	ldrb	r3, [r2, #1]
 80010c8:	f36f 13c7 	bfc	r3, #7, #1
 80010cc:	7053      	strb	r3, [r2, #1]
   cofgra.INA219CF.BRNG = BRNG_FSR_16V;
 80010ce:	4a54      	ldr	r2, [pc, #336]	; (8001220 <main+0x1ac>)
 80010d0:	7853      	ldrb	r3, [r2, #1]
 80010d2:	f36f 1345 	bfc	r3, #5, #1
 80010d6:	7053      	strb	r3, [r2, #1]
   cofgra.INA219CF.PGA = PGA_GainD8_320mv;
 80010d8:	4a51      	ldr	r2, [pc, #324]	; (8001220 <main+0x1ac>)
 80010da:	7853      	ldrb	r3, [r2, #1]
 80010dc:	f043 0318 	orr.w	r3, r3, #24
 80010e0:	7053      	strb	r3, [r2, #1]
   cofgra.INA219CF.BADC = ADCI_12bit_532uS;
 80010e2:	4a4f      	ldr	r2, [pc, #316]	; (8001220 <main+0x1ac>)
 80010e4:	8813      	ldrh	r3, [r2, #0]
 80010e6:	2103      	movs	r1, #3
 80010e8:	f361 13ca 	bfi	r3, r1, #7, #4
 80010ec:	8013      	strh	r3, [r2, #0]
   cofgra.INA219CF.SADC = ADCI_12bit_532uS;
 80010ee:	4a4c      	ldr	r2, [pc, #304]	; (8001220 <main+0x1ac>)
 80010f0:	7813      	ldrb	r3, [r2, #0]
 80010f2:	2103      	movs	r1, #3
 80010f4:	f361 03c6 	bfi	r3, r1, #3, #4
 80010f8:	7013      	strb	r3, [r2, #0]
   cofgra.INA219CF.Mode = INAM_ShuntBusV_Continuous;
 80010fa:	4a49      	ldr	r2, [pc, #292]	; (8001220 <main+0x1ac>)
 80010fc:	7813      	ldrb	r3, [r2, #0]
 80010fe:	f043 0307 	orr.w	r3, r3, #7
 8001102:	7013      	strb	r3, [r2, #0]

   INA219_INIT(&hi2c1, INA219_ADDR_1, cofgra);
 8001104:	4b46      	ldr	r3, [pc, #280]	; (8001220 <main+0x1ac>)
 8001106:	881a      	ldrh	r2, [r3, #0]
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	4846      	ldr	r0, [pc, #280]	; (8001224 <main+0x1b0>)
 800110c:	f7ff fe44 	bl	8000d98 <INA219_INIT>
   INA219_Calibrate(&hi2c1, INA219_ADDR_1);
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	4844      	ldr	r0, [pc, #272]	; (8001224 <main+0x1b0>)
 8001114:	f7ff fe60 	bl	8000dd8 <INA219_Calibrate>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GetTick() >= timestamp.one){
 8001118:	f000 fce2 	bl	8001ae0 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	4b42      	ldr	r3, [pc, #264]	; (8001228 <main+0x1b4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	d344      	bcc.n	80011b0 <main+0x13c>
		  timestamp.one = HAL_GetTick() + 50;
 8001126:	f000 fcdb 	bl	8001ae0 <HAL_GetTick>
 800112a:	4603      	mov	r3, r0
 800112c:	3332      	adds	r3, #50	; 0x32
 800112e:	4a3e      	ldr	r2, [pc, #248]	; (8001228 <main+0x1b4>)
 8001130:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8001132:	2120      	movs	r1, #32
 8001134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001138:	f000 ff88 	bl	800204c <HAL_GPIO_TogglePin>

#ifdef wrk_tim3
	  	 //// slope runner
			switch(slopstate){
 800113c:	4b3b      	ldr	r3, [pc, #236]	; (800122c <main+0x1b8>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d009      	beq.n	8001158 <main+0xe4>
 8001144:	2b02      	cmp	r3, #2
 8001146:	d01a      	beq.n	800117e <main+0x10a>

			default:
			case s_def:
				svo.pulso = 500;
 8001148:	4b34      	ldr	r3, [pc, #208]	; (800121c <main+0x1a8>)
 800114a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800114e:	801a      	strh	r2, [r3, #0]
				// set_mot.cnt_slope++;
				slopstate = s_up;
 8001150:	4b36      	ldr	r3, [pc, #216]	; (800122c <main+0x1b8>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
				break;
 8001156:	e027      	b.n	80011a8 <main+0x134>

			case s_up:

				//set_mot.slope++;
				svo.pulso += svo.gain;
 8001158:	4b30      	ldr	r3, [pc, #192]	; (800121c <main+0x1a8>)
 800115a:	881a      	ldrh	r2, [r3, #0]
 800115c:	4b2f      	ldr	r3, [pc, #188]	; (800121c <main+0x1a8>)
 800115e:	789b      	ldrb	r3, [r3, #2]
 8001160:	b29b      	uxth	r3, r3
 8001162:	4413      	add	r3, r2
 8001164:	b29a      	uxth	r2, r3
 8001166:	4b2d      	ldr	r3, [pc, #180]	; (800121c <main+0x1a8>)
 8001168:	801a      	strh	r2, [r3, #0]
				if(svo.pulso >= 2500){slopstate = s_dn;}
 800116a:	4b2c      	ldr	r3, [pc, #176]	; (800121c <main+0x1a8>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001172:	4293      	cmp	r3, r2
 8001174:	d915      	bls.n	80011a2 <main+0x12e>
 8001176:	4b2d      	ldr	r3, [pc, #180]	; (800122c <main+0x1b8>)
 8001178:	2202      	movs	r2, #2
 800117a:	701a      	strb	r2, [r3, #0]
				break;
 800117c:	e011      	b.n	80011a2 <main+0x12e>
			case s_dn:

				//set_mot.slope--;
				svo.pulso -= svo.gain;
 800117e:	4b27      	ldr	r3, [pc, #156]	; (800121c <main+0x1a8>)
 8001180:	881a      	ldrh	r2, [r3, #0]
 8001182:	4b26      	ldr	r3, [pc, #152]	; (800121c <main+0x1a8>)
 8001184:	789b      	ldrb	r3, [r3, #2]
 8001186:	b29b      	uxth	r3, r3
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	b29a      	uxth	r2, r3
 800118c:	4b23      	ldr	r3, [pc, #140]	; (800121c <main+0x1a8>)
 800118e:	801a      	strh	r2, [r3, #0]
				if(svo.pulso <= 500){slopstate = s_def;}
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <main+0x1a8>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001198:	d805      	bhi.n	80011a6 <main+0x132>
 800119a:	4b24      	ldr	r3, [pc, #144]	; (800122c <main+0x1b8>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
				 break;
 80011a0:	e001      	b.n	80011a6 <main+0x132>
				break;
 80011a2:	bf00      	nop
 80011a4:	e000      	b.n	80011a8 <main+0x134>
				 break;
 80011a6:	bf00      	nop
			}//// slope runner

	  //svo.pulso = TIM3->CNT;
			TIM3->CCR1 = svo.pulso;
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <main+0x1a8>)
 80011aa:	881a      	ldrh	r2, [r3, #0]
 80011ac:	4b20      	ldr	r3, [pc, #128]	; (8001230 <main+0x1bc>)
 80011ae:	635a      	str	r2, [r3, #52]	; 0x34

#endif
	  } //// stamp wrk

	  if(HAL_GetTick() >= timestamp.ina){
 80011b0:	f000 fc96 	bl	8001ae0 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <main+0x1b4>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d3ac      	bcc.n	8001118 <main+0xa4>
		  timestamp.ina = HAL_GetTick() + 5;
 80011be:	f000 fc8f 	bl	8001ae0 <HAL_GetTick>
 80011c2:	4603      	mov	r3, r0
 80011c4:	3305      	adds	r3, #5
 80011c6:	4a18      	ldr	r2, [pc, #96]	; (8001228 <main+0x1b4>)
 80011c8:	6053      	str	r3, [r2, #4]
#ifdef INA_wrk
		  inata.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_1);
 80011ca:	2180      	movs	r1, #128	; 0x80
 80011cc:	4815      	ldr	r0, [pc, #84]	; (8001224 <main+0x1b0>)
 80011ce:	f7ff fe7d 	bl	8000ecc <INA219Read_BusV>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <main+0x1c0>)
 80011d8:	821a      	strh	r2, [r3, #16]
		  inata.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_1);
 80011da:	2180      	movs	r1, #128	; 0x80
 80011dc:	4811      	ldr	r0, [pc, #68]	; (8001224 <main+0x1b0>)
 80011de:	f7ff fe9d 	bl	8000f1c <INA219Read_Current>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <main+0x1c0>)
 80011e8:	811a      	strh	r2, [r3, #8]
		  inata.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_1);
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	480d      	ldr	r0, [pc, #52]	; (8001224 <main+0x1b0>)
 80011ee:	f7ff fef7 	bl	8000fe0 <INA219Read_Power>
 80011f2:	eef0 7a40 	vmov.f32	s15, s0
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <main+0x1c0>)
 80011f8:	edc3 7a03 	vstr	s15, [r3, #12]
		  inata.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_1);
 80011fc:	2180      	movs	r1, #128	; 0x80
 80011fe:	4809      	ldr	r0, [pc, #36]	; (8001224 <main+0x1b0>)
 8001200:	f7ff feb2 	bl	8000f68 <INA219Read_ShuntV>
 8001204:	eef0 7a40 	vmov.f32	s15, s0
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <main+0x1c0>)
 800120a:	edc3 7a01 	vstr	s15, [r3, #4]
	  if(HAL_GetTick() >= timestamp.one){
 800120e:	e783      	b.n	8001118 <main+0xa4>
 8001210:	20000118 	.word	0x20000118
 8001214:	20000164 	.word	0x20000164
 8001218:	40000800 	.word	0x40000800
 800121c:	200001b8 	.word	0x200001b8
 8001220:	200001c0 	.word	0x200001c0
 8001224:	20000030 	.word	0x20000030
 8001228:	200001b0 	.word	0x200001b0
 800122c:	200001bc 	.word	0x200001bc
 8001230:	40000400 	.word	0x40000400
 8001234:	200001c4 	.word	0x200001c4

08001238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b094      	sub	sp, #80	; 0x50
 800123c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 0318 	add.w	r3, r7, #24
 8001242:	2238      	movs	r2, #56	; 0x38
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f004 fbaa 	bl	80059a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800125a:	2000      	movs	r0, #0
 800125c:	f001 fd56 	bl	8002d0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001260:	2302      	movs	r3, #2
 8001262:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001264:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126a:	2340      	movs	r3, #64	; 0x40
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126e:	2302      	movs	r3, #2
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001272:	2302      	movs	r3, #2
 8001274:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001276:	2304      	movs	r3, #4
 8001278:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800127a:	2355      	movs	r3, #85	; 0x55
 800127c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800127e:	2302      	movs	r3, #2
 8001280:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001282:	2302      	movs	r3, #2
 8001284:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001286:	2302      	movs	r3, #2
 8001288:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128a:	f107 0318 	add.w	r3, r7, #24
 800128e:	4618      	mov	r0, r3
 8001290:	f001 fdf0 	bl	8002e74 <HAL_RCC_OscConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800129a:	f000 f9e3 	bl	8001664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129e:	230f      	movs	r3, #15
 80012a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a2:	2303      	movs	r3, #3
 80012a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2104      	movs	r1, #4
 80012b6:	4618      	mov	r0, r3
 80012b8:	f002 f8ee 	bl	8003498 <HAL_RCC_ClockConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80012c2:	f000 f9cf 	bl	8001664 <Error_Handler>
  }
}
 80012c6:	bf00      	nop
 80012c8:	3750      	adds	r7, #80	; 0x50
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <MX_I2C1_Init+0x74>)
 80012d6:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <MX_I2C1_Init+0x78>)
 80012d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_I2C1_Init+0x74>)
 80012dc:	4a1b      	ldr	r2, [pc, #108]	; (800134c <MX_I2C1_Init+0x7c>)
 80012de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_I2C1_Init+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <MX_I2C1_Init+0x74>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ec:	4b15      	ldr	r3, [pc, #84]	; (8001344 <MX_I2C1_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <MX_I2C1_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_I2C1_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_I2C1_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_I2C1_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800130a:	480e      	ldr	r0, [pc, #56]	; (8001344 <MX_I2C1_Init+0x74>)
 800130c:	f000 fedb 	bl	80020c6 <HAL_I2C_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001316:	f000 f9a5 	bl	8001664 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800131a:	2100      	movs	r1, #0
 800131c:	4809      	ldr	r0, [pc, #36]	; (8001344 <MX_I2C1_Init+0x74>)
 800131e:	f001 fc5d 	bl	8002bdc <HAL_I2CEx_ConfigAnalogFilter>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001328:	f000 f99c 	bl	8001664 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800132c:	2100      	movs	r1, #0
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_I2C1_Init+0x74>)
 8001330:	f001 fc9f 	bl	8002c72 <HAL_I2CEx_ConfigDigitalFilter>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800133a:	f000 f993 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000030 	.word	0x20000030
 8001348:	40005400 	.word	0x40005400
 800134c:	10802d9b 	.word	0x10802d9b

08001350 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001354:	4b21      	ldr	r3, [pc, #132]	; (80013dc <MX_LPUART1_UART_Init+0x8c>)
 8001356:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <MX_LPUART1_UART_Init+0x90>)
 8001358:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <MX_LPUART1_UART_Init+0x8c>)
 800135c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001360:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001362:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <MX_LPUART1_UART_Init+0x8c>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <MX_LPUART1_UART_Init+0x8c>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <MX_LPUART1_UART_Init+0x8c>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <MX_LPUART1_UART_Init+0x8c>)
 8001376:	220c      	movs	r2, #12
 8001378:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <MX_LPUART1_UART_Init+0x8c>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_LPUART1_UART_Init+0x8c>)
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <MX_LPUART1_UART_Init+0x8c>)
 8001388:	2200      	movs	r2, #0
 800138a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <MX_LPUART1_UART_Init+0x8c>)
 800138e:	2200      	movs	r2, #0
 8001390:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001392:	4812      	ldr	r0, [pc, #72]	; (80013dc <MX_LPUART1_UART_Init+0x8c>)
 8001394:	f003 fc72 	bl	8004c7c <HAL_UART_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800139e:	f000 f961 	bl	8001664 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a2:	2100      	movs	r1, #0
 80013a4:	480d      	ldr	r0, [pc, #52]	; (80013dc <MX_LPUART1_UART_Init+0x8c>)
 80013a6:	f004 fa0d 	bl	80057c4 <HAL_UARTEx_SetTxFifoThreshold>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80013b0:	f000 f958 	bl	8001664 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b4:	2100      	movs	r1, #0
 80013b6:	4809      	ldr	r0, [pc, #36]	; (80013dc <MX_LPUART1_UART_Init+0x8c>)
 80013b8:	f004 fa42 	bl	8005840 <HAL_UARTEx_SetRxFifoThreshold>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80013c2:	f000 f94f 	bl	8001664 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_LPUART1_UART_Init+0x8c>)
 80013c8:	f004 f9c3 	bl	8005752 <HAL_UARTEx_DisableFifoMode>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80013d2:	f000 f947 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000084 	.word	0x20000084
 80013e0:	40008000 	.word	0x40008000

080013e4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 1 */
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001406:	463b      	mov	r3, r7
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
 8001414:	615a      	str	r2, [r3, #20]
 8001416:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <MX_TIM3_Init+0xb0>)
 800141a:	4a23      	ldr	r2, [pc, #140]	; (80014a8 <MX_TIM3_Init+0xb4>)
 800141c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <MX_TIM3_Init+0xb0>)
 8001420:	22a9      	movs	r2, #169	; 0xa9
 8001422:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <MX_TIM3_Init+0xb0>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <MX_TIM3_Init+0xb0>)
 800142c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001430:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <MX_TIM3_Init+0xb0>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_TIM3_Init+0xb0>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800143e:	4819      	ldr	r0, [pc, #100]	; (80014a4 <MX_TIM3_Init+0xb0>)
 8001440:	f002 fd04 	bl	8003e4c <HAL_TIM_PWM_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800144a:	f000 f90b 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	4619      	mov	r1, r3
 800145c:	4811      	ldr	r0, [pc, #68]	; (80014a4 <MX_TIM3_Init+0xb0>)
 800145e:	f003 fb77 	bl	8004b50 <HAL_TIMEx_MasterConfigSynchronization>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001468:	f000 f8fc 	bl	8001664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146c:	2360      	movs	r3, #96	; 0x60
 800146e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8001470:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001474:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147e:	463b      	mov	r3, r7
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	4807      	ldr	r0, [pc, #28]	; (80014a4 <MX_TIM3_Init+0xb0>)
 8001486:	f002 fe4b 	bl	8004120 <HAL_TIM_PWM_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001490:	f000 f8e8 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001494:	4803      	ldr	r0, [pc, #12]	; (80014a4 <MX_TIM3_Init+0xb0>)
 8001496:	f000 f9f5 	bl	8001884 <HAL_TIM_MspPostInit>

}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	; 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000118 	.word	0x20000118
 80014a8:	40000400 	.word	0x40000400

080014ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014be:	463b      	mov	r3, r7
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
 80014cc:	615a      	str	r2, [r3, #20]
 80014ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <MX_TIM4_Init+0xb0>)
 80014d2:	4a23      	ldr	r2, [pc, #140]	; (8001560 <MX_TIM4_Init+0xb4>)
 80014d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16999;
 80014d6:	4b21      	ldr	r3, [pc, #132]	; (800155c <MX_TIM4_Init+0xb0>)
 80014d8:	f244 2267 	movw	r2, #16999	; 0x4267
 80014dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014de:	4b1f      	ldr	r3, [pc, #124]	; (800155c <MX_TIM4_Init+0xb0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9000;
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <MX_TIM4_Init+0xb0>)
 80014e6:	f242 3228 	movw	r2, #9000	; 0x2328
 80014ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <MX_TIM4_Init+0xb0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_TIM4_Init+0xb0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014f8:	4818      	ldr	r0, [pc, #96]	; (800155c <MX_TIM4_Init+0xb0>)
 80014fa:	f002 fca7 	bl	8003e4c <HAL_TIM_PWM_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8001504:	f000 f8ae 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4619      	mov	r1, r3
 8001516:	4811      	ldr	r0, [pc, #68]	; (800155c <MX_TIM4_Init+0xb0>)
 8001518:	f003 fb1a 	bl	8004b50 <HAL_TIMEx_MasterConfigSynchronization>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8001522:	f000 f89f 	bl	8001664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001526:	2360      	movs	r3, #96	; 0x60
 8001528:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3750;
 800152a:	f640 63a6 	movw	r3, #3750	; 0xea6
 800152e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001538:	463b      	mov	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	4619      	mov	r1, r3
 800153e:	4807      	ldr	r0, [pc, #28]	; (800155c <MX_TIM4_Init+0xb0>)
 8001540:	f002 fdee 	bl	8004120 <HAL_TIM_PWM_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 800154a:	f000 f88b 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800154e:	4803      	ldr	r0, [pc, #12]	; (800155c <MX_TIM4_Init+0xb0>)
 8001550:	f000 f998 	bl	8001884 <HAL_TIM_MspPostInit>

}
 8001554:	bf00      	nop
 8001556:	3728      	adds	r7, #40	; 0x28
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000164 	.word	0x20000164
 8001560:	40000800 	.word	0x40000800

08001564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	4b38      	ldr	r3, [pc, #224]	; (800165c <MX_GPIO_Init+0xf8>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	4a37      	ldr	r2, [pc, #220]	; (800165c <MX_GPIO_Init+0xf8>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001586:	4b35      	ldr	r3, [pc, #212]	; (800165c <MX_GPIO_Init+0xf8>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001592:	4b32      	ldr	r3, [pc, #200]	; (800165c <MX_GPIO_Init+0xf8>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	4a31      	ldr	r2, [pc, #196]	; (800165c <MX_GPIO_Init+0xf8>)
 8001598:	f043 0320 	orr.w	r3, r3, #32
 800159c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159e:	4b2f      	ldr	r3, [pc, #188]	; (800165c <MX_GPIO_Init+0xf8>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	f003 0320 	and.w	r3, r3, #32
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	4b2c      	ldr	r3, [pc, #176]	; (800165c <MX_GPIO_Init+0xf8>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	4a2b      	ldr	r2, [pc, #172]	; (800165c <MX_GPIO_Init+0xf8>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b6:	4b29      	ldr	r3, [pc, #164]	; (800165c <MX_GPIO_Init+0xf8>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	4b26      	ldr	r3, [pc, #152]	; (800165c <MX_GPIO_Init+0xf8>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	4a25      	ldr	r2, [pc, #148]	; (800165c <MX_GPIO_Init+0xf8>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ce:	4b23      	ldr	r3, [pc, #140]	; (800165c <MX_GPIO_Init+0xf8>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	2120      	movs	r1, #32
 80015de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e2:	f000 fd1b 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4818      	ldr	r0, [pc, #96]	; (8001660 <MX_GPIO_Init+0xfc>)
 80015fe:	f000 fb8b 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001602:	2320      	movs	r3, #32
 8001604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161c:	f000 fb7c 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001632:	2305      	movs	r3, #5
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	4808      	ldr	r0, [pc, #32]	; (8001660 <MX_GPIO_Init+0xfc>)
 800163e:	f000 fb6b 	bl	8001d18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2028      	movs	r0, #40	; 0x28
 8001648:	f000 fb31 	bl	8001cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800164c:	2028      	movs	r0, #40	; 0x28
 800164e:	f000 fb48 	bl	8001ce2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	; 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	48000800 	.word	0x48000800

08001664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001668:	b672      	cpsid	i
}
 800166a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800166c:	e7fe      	b.n	800166c <Error_Handler+0x8>
	...

08001670 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_MspInit+0x44>)
 8001678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167a:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <HAL_MspInit+0x44>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6613      	str	r3, [r2, #96]	; 0x60
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <HAL_MspInit+0x44>)
 8001684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <HAL_MspInit+0x44>)
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <HAL_MspInit+0x44>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	6593      	str	r3, [r2, #88]	; 0x58
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_MspInit+0x44>)
 800169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016a6:	f001 fbd5 	bl	8002e54 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000

080016b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b09e      	sub	sp, #120	; 0x78
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	2254      	movs	r2, #84	; 0x54
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f004 f961 	bl	80059a0 <memset>
  if(hi2c->Instance==I2C1)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <HAL_I2C_MspInit+0xa8>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d136      	bne.n	8001756 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016e8:	2340      	movs	r3, #64	; 0x40
 80016ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	4618      	mov	r0, r3
 80016f6:	f002 f8eb 	bl	80038d0 <HAL_RCCEx_PeriphCLKConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001700:	f7ff ffb0 	bl	8001664 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_I2C_MspInit+0xac>)
 8001706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001708:	4a16      	ldr	r2, [pc, #88]	; (8001764 <HAL_I2C_MspInit+0xac>)
 800170a:	f043 0302 	orr.w	r3, r3, #2
 800170e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <HAL_I2C_MspInit+0xac>)
 8001712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800171c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001720:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001722:	2312      	movs	r3, #18
 8001724:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800172e:	2304      	movs	r3, #4
 8001730:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001736:	4619      	mov	r1, r3
 8001738:	480b      	ldr	r0, [pc, #44]	; (8001768 <HAL_I2C_MspInit+0xb0>)
 800173a:	f000 faed 	bl	8001d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_I2C_MspInit+0xac>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	4a08      	ldr	r2, [pc, #32]	; (8001764 <HAL_I2C_MspInit+0xac>)
 8001744:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001748:	6593      	str	r3, [r2, #88]	; 0x58
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_I2C_MspInit+0xac>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001756:	bf00      	nop
 8001758:	3778      	adds	r7, #120	; 0x78
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40005400 	.word	0x40005400
 8001764:	40021000 	.word	0x40021000
 8001768:	48000400 	.word	0x48000400

0800176c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b09e      	sub	sp, #120	; 0x78
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	2254      	movs	r2, #84	; 0x54
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f004 f907 	bl	80059a0 <memset>
  if(huart->Instance==LPUART1)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <HAL_UART_MspInit+0xa8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d136      	bne.n	800180a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800179c:	2320      	movs	r3, #32
 800179e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4618      	mov	r0, r3
 80017aa:	f002 f891 	bl	80038d0 <HAL_RCCEx_PeriphCLKConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017b4:	f7ff ff56 	bl	8001664 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <HAL_UART_MspInit+0xac>)
 80017ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017bc:	4a16      	ldr	r2, [pc, #88]	; (8001818 <HAL_UART_MspInit+0xac>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <HAL_UART_MspInit+0xac>)
 80017c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_UART_MspInit+0xac>)
 80017d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d4:	4a10      	ldr	r2, [pc, #64]	; (8001818 <HAL_UART_MspInit+0xac>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <HAL_UART_MspInit+0xac>)
 80017de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80017e8:	230c      	movs	r3, #12
 80017ea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80017f8:	230c      	movs	r3, #12
 80017fa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001800:	4619      	mov	r1, r3
 8001802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001806:	f000 fa87 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	3778      	adds	r7, #120	; 0x78
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40008000 	.word	0x40008000
 8001818:	40021000 	.word	0x40021000

0800181c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a13      	ldr	r2, [pc, #76]	; (8001878 <HAL_TIM_PWM_MspInit+0x5c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d10c      	bne.n	8001848 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <HAL_TIM_PWM_MspInit+0x60>)
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	4a12      	ldr	r2, [pc, #72]	; (800187c <HAL_TIM_PWM_MspInit+0x60>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6593      	str	r3, [r2, #88]	; 0x58
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_TIM_PWM_MspInit+0x60>)
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001846:	e010      	b.n	800186a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0c      	ldr	r2, [pc, #48]	; (8001880 <HAL_TIM_PWM_MspInit+0x64>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d10b      	bne.n	800186a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_TIM_PWM_MspInit+0x60>)
 8001854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001856:	4a09      	ldr	r2, [pc, #36]	; (800187c <HAL_TIM_PWM_MspInit+0x60>)
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	6593      	str	r3, [r2, #88]	; 0x58
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <HAL_TIM_PWM_MspInit+0x60>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40000400 	.word	0x40000400
 800187c:	40021000 	.word	0x40021000
 8001880:	40000800 	.word	0x40000800

08001884 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a23      	ldr	r2, [pc, #140]	; (8001930 <HAL_TIM_MspPostInit+0xac>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d11d      	bne.n	80018e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	4b23      	ldr	r3, [pc, #140]	; (8001934 <HAL_TIM_MspPostInit+0xb0>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	4a22      	ldr	r2, [pc, #136]	; (8001934 <HAL_TIM_MspPostInit+0xb0>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <HAL_TIM_MspPostInit+0xb0>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018be:	2340      	movs	r3, #64	; 0x40
 80018c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018ce:	2302      	movs	r3, #2
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018dc:	f000 fa1c 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80018e0:	e022      	b.n	8001928 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM4)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a14      	ldr	r2, [pc, #80]	; (8001938 <HAL_TIM_MspPostInit+0xb4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d11d      	bne.n	8001928 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_TIM_MspPostInit+0xb0>)
 80018ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f0:	4a10      	ldr	r2, [pc, #64]	; (8001934 <HAL_TIM_MspPostInit+0xb0>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_TIM_MspPostInit+0xb0>)
 80018fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001904:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001916:	230a      	movs	r3, #10
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001924:	f000 f9f8 	bl	8001d18 <HAL_GPIO_Init>
}
 8001928:	bf00      	nop
 800192a:	3728      	adds	r7, #40	; 0x28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40000400 	.word	0x40000400
 8001934:	40021000 	.word	0x40021000
 8001938:	40000800 	.word	0x40000800

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <NMI_Handler+0x4>

08001942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <MemManage_Handler+0x4>

0800194e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <UsageFault_Handler+0x4>

0800195a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001988:	f000 f898 	bl	8001abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}

08001990 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001994:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001998:	f000 fb72 	bl	8002080 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <SystemInit+0x20>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <SystemInit+0x20>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019c4:	480d      	ldr	r0, [pc, #52]	; (80019fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019c8:	f7ff ffea 	bl	80019a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019cc:	480c      	ldr	r0, [pc, #48]	; (8001a00 <LoopForever+0x6>)
  ldr r1, =_edata
 80019ce:	490d      	ldr	r1, [pc, #52]	; (8001a04 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019d0:	4a0d      	ldr	r2, [pc, #52]	; (8001a08 <LoopForever+0xe>)
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019d4:	e002      	b.n	80019dc <LoopCopyDataInit>

080019d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019da:	3304      	adds	r3, #4

080019dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e0:	d3f9      	bcc.n	80019d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <LoopForever+0x12>)
  ldr r4, =_ebss
 80019e4:	4c0a      	ldr	r4, [pc, #40]	; (8001a10 <LoopForever+0x16>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e8:	e001      	b.n	80019ee <LoopFillZerobss>

080019ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ec:	3204      	adds	r2, #4

080019ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f0:	d3fb      	bcc.n	80019ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019f2:	f003 ffb1 	bl	8005958 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019f6:	f7ff fb3d 	bl	8001074 <main>

080019fa <LoopForever>:

LoopForever:
    b LoopForever
 80019fa:	e7fe      	b.n	80019fa <LoopForever>
  ldr   r0, =_estack
 80019fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a04:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001a08:	08005a7c 	.word	0x08005a7c
  ldr r2, =_sbss
 8001a0c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001a10:	200001e0 	.word	0x200001e0

08001a14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a14:	e7fe      	b.n	8001a14 <ADC1_2_IRQHandler>

08001a16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a20:	2003      	movs	r0, #3
 8001a22:	f000 f939 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a26:	2000      	movs	r0, #0
 8001a28:	f000 f80e 	bl	8001a48 <HAL_InitTick>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	71fb      	strb	r3, [r7, #7]
 8001a36:	e001      	b.n	8001a3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a38:	f7ff fe1a 	bl	8001670 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a3c:	79fb      	ldrb	r3, [r7, #7]

}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a54:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_InitTick+0x68>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d022      	beq.n	8001aa2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a5c:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <HAL_InitTick+0x6c>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <HAL_InitTick+0x68>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 f944 	bl	8001cfe <HAL_SYSTICK_Config>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10f      	bne.n	8001a9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b0f      	cmp	r3, #15
 8001a80:	d809      	bhi.n	8001a96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a82:	2200      	movs	r2, #0
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8a:	f000 f910 	bl	8001cae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <HAL_InitTick+0x70>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	e007      	b.n	8001aa6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
 8001a9a:	e004      	b.n	8001aa6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	e001      	b.n	8001aa6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	2000000c 	.word	0x2000000c
 8001ab4:	20000004 	.word	0x20000004
 8001ab8:	20000008 	.word	0x20000008

08001abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_IncTick+0x1c>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_IncTick+0x20>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4413      	add	r3, r2
 8001aca:	4a03      	ldr	r2, [pc, #12]	; (8001ad8 <HAL_IncTick+0x1c>)
 8001acc:	6013      	str	r3, [r2, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	200001dc 	.word	0x200001dc
 8001adc:	2000000c 	.word	0x2000000c

08001ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <HAL_GetTick+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	200001dc 	.word	0x200001dc

08001af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b14:	4013      	ands	r3, r2
 8001b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2a:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	60d3      	str	r3, [r2, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <__NVIC_GetPriorityGrouping+0x18>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 0307 	and.w	r3, r3, #7
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	db0b      	blt.n	8001b86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	4907      	ldr	r1, [pc, #28]	; (8001b94 <__NVIC_EnableIRQ+0x38>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	; (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	; (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	; 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
         );
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f7ff ff8e 	bl	8001b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff29 	bl	8001af8 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbc:	f7ff ff40 	bl	8001b40 <__NVIC_GetPriorityGrouping>
 8001cc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	6978      	ldr	r0, [r7, #20]
 8001cc8:	f7ff ff90 	bl	8001bec <NVIC_EncodePriority>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff5f 	bl	8001b98 <__NVIC_SetPriority>
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff33 	bl	8001b5c <__NVIC_EnableIRQ>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ffa4 	bl	8001c54 <SysTick_Config>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d26:	e15a      	b.n	8001fde <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	4013      	ands	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 814c 	beq.w	8001fd8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d005      	beq.n	8001d58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d130      	bne.n	8001dba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d8e:	2201      	movs	r2, #1
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	f003 0201 	and.w	r2, r3, #1
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d017      	beq.n	8001df6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d123      	bne.n	8001e4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	220f      	movs	r2, #15
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	691a      	ldr	r2, [r3, #16]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	08da      	lsrs	r2, r3, #3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3208      	adds	r2, #8
 8001e44:	6939      	ldr	r1, [r7, #16]
 8001e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	2203      	movs	r2, #3
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0203 	and.w	r2, r3, #3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80a6 	beq.w	8001fd8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8c:	4b5b      	ldr	r3, [pc, #364]	; (8001ffc <HAL_GPIO_Init+0x2e4>)
 8001e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e90:	4a5a      	ldr	r2, [pc, #360]	; (8001ffc <HAL_GPIO_Init+0x2e4>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6613      	str	r3, [r2, #96]	; 0x60
 8001e98:	4b58      	ldr	r3, [pc, #352]	; (8001ffc <HAL_GPIO_Init+0x2e4>)
 8001e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ea4:	4a56      	ldr	r2, [pc, #344]	; (8002000 <HAL_GPIO_Init+0x2e8>)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	220f      	movs	r2, #15
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ece:	d01f      	beq.n	8001f10 <HAL_GPIO_Init+0x1f8>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a4c      	ldr	r2, [pc, #304]	; (8002004 <HAL_GPIO_Init+0x2ec>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d019      	beq.n	8001f0c <HAL_GPIO_Init+0x1f4>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a4b      	ldr	r2, [pc, #300]	; (8002008 <HAL_GPIO_Init+0x2f0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d013      	beq.n	8001f08 <HAL_GPIO_Init+0x1f0>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a4a      	ldr	r2, [pc, #296]	; (800200c <HAL_GPIO_Init+0x2f4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d00d      	beq.n	8001f04 <HAL_GPIO_Init+0x1ec>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a49      	ldr	r2, [pc, #292]	; (8002010 <HAL_GPIO_Init+0x2f8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d007      	beq.n	8001f00 <HAL_GPIO_Init+0x1e8>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a48      	ldr	r2, [pc, #288]	; (8002014 <HAL_GPIO_Init+0x2fc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d101      	bne.n	8001efc <HAL_GPIO_Init+0x1e4>
 8001ef8:	2305      	movs	r3, #5
 8001efa:	e00a      	b.n	8001f12 <HAL_GPIO_Init+0x1fa>
 8001efc:	2306      	movs	r3, #6
 8001efe:	e008      	b.n	8001f12 <HAL_GPIO_Init+0x1fa>
 8001f00:	2304      	movs	r3, #4
 8001f02:	e006      	b.n	8001f12 <HAL_GPIO_Init+0x1fa>
 8001f04:	2303      	movs	r3, #3
 8001f06:	e004      	b.n	8001f12 <HAL_GPIO_Init+0x1fa>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e002      	b.n	8001f12 <HAL_GPIO_Init+0x1fa>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_GPIO_Init+0x1fa>
 8001f10:	2300      	movs	r3, #0
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	f002 0203 	and.w	r2, r2, #3
 8001f18:	0092      	lsls	r2, r2, #2
 8001f1a:	4093      	lsls	r3, r2
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f22:	4937      	ldr	r1, [pc, #220]	; (8002000 <HAL_GPIO_Init+0x2e8>)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	3302      	adds	r3, #2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f30:	4b39      	ldr	r3, [pc, #228]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f54:	4a30      	ldr	r2, [pc, #192]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f5a:	4b2f      	ldr	r3, [pc, #188]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f7e:	4a26      	ldr	r2, [pc, #152]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001f84:	4b24      	ldr	r3, [pc, #144]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fa8:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fae:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fd2:	4a11      	ldr	r2, [pc, #68]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f47f ae9d 	bne.w	8001d28 <HAL_GPIO_Init+0x10>
  }
}
 8001fee:	bf00      	nop
 8001ff0:	bf00      	nop
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40010000 	.word	0x40010000
 8002004:	48000400 	.word	0x48000400
 8002008:	48000800 	.word	0x48000800
 800200c:	48000c00 	.word	0x48000c00
 8002010:	48001000 	.word	0x48001000
 8002014:	48001400 	.word	0x48001400
 8002018:	40010400 	.word	0x40010400

0800201c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	807b      	strh	r3, [r7, #2]
 8002028:	4613      	mov	r3, r2
 800202a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800202c:	787b      	ldrb	r3, [r7, #1]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002032:	887a      	ldrh	r2, [r7, #2]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002038:	e002      	b.n	8002040 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800203a:	887a      	ldrh	r2, [r7, #2]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800205e:	887a      	ldrh	r2, [r7, #2]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4013      	ands	r3, r2
 8002064:	041a      	lsls	r2, r3, #16
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	43d9      	mvns	r1, r3
 800206a:	887b      	ldrh	r3, [r7, #2]
 800206c:	400b      	ands	r3, r1
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	619a      	str	r2, [r3, #24]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800208a:	4b08      	ldr	r3, [pc, #32]	; (80020ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	4013      	ands	r3, r2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d006      	beq.n	80020a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002096:	4a05      	ldr	r2, [pc, #20]	; (80020ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f806 	bl	80020b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40010400 	.word	0x40010400

080020b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e08d      	b.n	80021f4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d106      	bne.n	80020f2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff fae3 	bl	80016b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2224      	movs	r2, #36	; 0x24
 80020f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0201 	bic.w	r2, r2, #1
 8002108:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002116:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002126:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d107      	bne.n	8002140 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	e006      	b.n	800214e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800214c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d108      	bne.n	8002168 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	e007      	b.n	8002178 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002176:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800218a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800219a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69d9      	ldr	r1, [r3, #28]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1a      	ldr	r2, [r3, #32]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 0201 	orr.w	r2, r2, #1
 80021d4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af02      	add	r7, sp, #8
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	4608      	mov	r0, r1
 8002206:	4611      	mov	r1, r2
 8002208:	461a      	mov	r2, r3
 800220a:	4603      	mov	r3, r0
 800220c:	817b      	strh	r3, [r7, #10]
 800220e:	460b      	mov	r3, r1
 8002210:	813b      	strh	r3, [r7, #8]
 8002212:	4613      	mov	r3, r2
 8002214:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b20      	cmp	r3, #32
 8002220:	f040 80f9 	bne.w	8002416 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <HAL_I2C_Mem_Write+0x34>
 800222a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800222c:	2b00      	cmp	r3, #0
 800222e:	d105      	bne.n	800223c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002236:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0ed      	b.n	8002418 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_I2C_Mem_Write+0x4e>
 8002246:	2302      	movs	r3, #2
 8002248:	e0e6      	b.n	8002418 <HAL_I2C_Mem_Write+0x21c>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002252:	f7ff fc45 	bl	8001ae0 <HAL_GetTick>
 8002256:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	2319      	movs	r3, #25
 800225e:	2201      	movs	r2, #1
 8002260:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 fac3 	bl	80027f0 <I2C_WaitOnFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0d1      	b.n	8002418 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2221      	movs	r2, #33	; 0x21
 8002278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2240      	movs	r2, #64	; 0x40
 8002280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a3a      	ldr	r2, [r7, #32]
 800228e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002294:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800229c:	88f8      	ldrh	r0, [r7, #6]
 800229e:	893a      	ldrh	r2, [r7, #8]
 80022a0:	8979      	ldrh	r1, [r7, #10]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	4603      	mov	r3, r0
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 f9d3 	bl	8002658 <I2C_RequestMemoryWrite>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0a9      	b.n	8002418 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2bff      	cmp	r3, #255	; 0xff
 80022cc:	d90e      	bls.n	80022ec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	22ff      	movs	r2, #255	; 0xff
 80022d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	8979      	ldrh	r1, [r7, #10]
 80022dc:	2300      	movs	r3, #0
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 fc47 	bl	8002b78 <I2C_TransferConfig>
 80022ea:	e00f      	b.n	800230c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	8979      	ldrh	r1, [r7, #10]
 80022fe:	2300      	movs	r3, #0
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 fc36 	bl	8002b78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 fac6 	bl	80028a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e07b      	b.n	8002418 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	781a      	ldrb	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d034      	beq.n	80023c4 <HAL_I2C_Mem_Write+0x1c8>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235e:	2b00      	cmp	r3, #0
 8002360:	d130      	bne.n	80023c4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002368:	2200      	movs	r2, #0
 800236a:	2180      	movs	r1, #128	; 0x80
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 fa3f 	bl	80027f0 <I2C_WaitOnFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e04d      	b.n	8002418 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002380:	b29b      	uxth	r3, r3
 8002382:	2bff      	cmp	r3, #255	; 0xff
 8002384:	d90e      	bls.n	80023a4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	22ff      	movs	r2, #255	; 0xff
 800238a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002390:	b2da      	uxtb	r2, r3
 8002392:	8979      	ldrh	r1, [r7, #10]
 8002394:	2300      	movs	r3, #0
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fbeb 	bl	8002b78 <I2C_TransferConfig>
 80023a2:	e00f      	b.n	80023c4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	8979      	ldrh	r1, [r7, #10]
 80023b6:	2300      	movs	r3, #0
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 fbda 	bl	8002b78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d19e      	bne.n	800230c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 faac 	bl	8002930 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e01a      	b.n	8002418 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2220      	movs	r2, #32
 80023e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6859      	ldr	r1, [r3, #4]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <HAL_I2C_Mem_Write+0x224>)
 80023f6:	400b      	ands	r3, r1
 80023f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	e000      	b.n	8002418 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002416:	2302      	movs	r3, #2
  }
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	fe00e800 	.word	0xfe00e800

08002424 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af02      	add	r7, sp, #8
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	4608      	mov	r0, r1
 800242e:	4611      	mov	r1, r2
 8002430:	461a      	mov	r2, r3
 8002432:	4603      	mov	r3, r0
 8002434:	817b      	strh	r3, [r7, #10]
 8002436:	460b      	mov	r3, r1
 8002438:	813b      	strh	r3, [r7, #8]
 800243a:	4613      	mov	r3, r2
 800243c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b20      	cmp	r3, #32
 8002448:	f040 80fd 	bne.w	8002646 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <HAL_I2C_Mem_Read+0x34>
 8002452:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002454:	2b00      	cmp	r3, #0
 8002456:	d105      	bne.n	8002464 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800245e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0f1      	b.n	8002648 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_I2C_Mem_Read+0x4e>
 800246e:	2302      	movs	r3, #2
 8002470:	e0ea      	b.n	8002648 <HAL_I2C_Mem_Read+0x224>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800247a:	f7ff fb31 	bl	8001ae0 <HAL_GetTick>
 800247e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2319      	movs	r3, #25
 8002486:	2201      	movs	r2, #1
 8002488:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f9af 	bl	80027f0 <I2C_WaitOnFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0d5      	b.n	8002648 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2222      	movs	r2, #34	; 0x22
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2240      	movs	r2, #64	; 0x40
 80024a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a3a      	ldr	r2, [r7, #32]
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024c4:	88f8      	ldrh	r0, [r7, #6]
 80024c6:	893a      	ldrh	r2, [r7, #8]
 80024c8:	8979      	ldrh	r1, [r7, #10]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	9301      	str	r3, [sp, #4]
 80024ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	4603      	mov	r3, r0
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f913 	bl	8002700 <I2C_RequestMemoryRead>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0ad      	b.n	8002648 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2bff      	cmp	r3, #255	; 0xff
 80024f4:	d90e      	bls.n	8002514 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	22ff      	movs	r2, #255	; 0xff
 80024fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002500:	b2da      	uxtb	r2, r3
 8002502:	8979      	ldrh	r1, [r7, #10]
 8002504:	4b52      	ldr	r3, [pc, #328]	; (8002650 <HAL_I2C_Mem_Read+0x22c>)
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 fb33 	bl	8002b78 <I2C_TransferConfig>
 8002512:	e00f      	b.n	8002534 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	b2da      	uxtb	r2, r3
 8002524:	8979      	ldrh	r1, [r7, #10]
 8002526:	4b4a      	ldr	r3, [pc, #296]	; (8002650 <HAL_I2C_Mem_Read+0x22c>)
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fb22 	bl	8002b78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253a:	2200      	movs	r2, #0
 800253c:	2104      	movs	r1, #4
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f956 	bl	80027f0 <I2C_WaitOnFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e07c      	b.n	8002648 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002576:	b29b      	uxth	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d034      	beq.n	80025f4 <HAL_I2C_Mem_Read+0x1d0>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258e:	2b00      	cmp	r3, #0
 8002590:	d130      	bne.n	80025f4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002598:	2200      	movs	r2, #0
 800259a:	2180      	movs	r1, #128	; 0x80
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f927 	bl	80027f0 <I2C_WaitOnFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e04d      	b.n	8002648 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2bff      	cmp	r3, #255	; 0xff
 80025b4:	d90e      	bls.n	80025d4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	22ff      	movs	r2, #255	; 0xff
 80025ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	8979      	ldrh	r1, [r7, #10]
 80025c4:	2300      	movs	r3, #0
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fad3 	bl	8002b78 <I2C_TransferConfig>
 80025d2:	e00f      	b.n	80025f4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	8979      	ldrh	r1, [r7, #10]
 80025e6:	2300      	movs	r3, #0
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fac2 	bl	8002b78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d19a      	bne.n	8002534 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f994 	bl	8002930 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e01a      	b.n	8002648 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2220      	movs	r2, #32
 8002618:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6859      	ldr	r1, [r3, #4]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <HAL_I2C_Mem_Read+0x230>)
 8002626:	400b      	ands	r3, r1
 8002628:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2220      	movs	r2, #32
 800262e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	e000      	b.n	8002648 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002646:	2302      	movs	r3, #2
  }
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	80002400 	.word	0x80002400
 8002654:	fe00e800 	.word	0xfe00e800

08002658 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	4608      	mov	r0, r1
 8002662:	4611      	mov	r1, r2
 8002664:	461a      	mov	r2, r3
 8002666:	4603      	mov	r3, r0
 8002668:	817b      	strh	r3, [r7, #10]
 800266a:	460b      	mov	r3, r1
 800266c:	813b      	strh	r3, [r7, #8]
 800266e:	4613      	mov	r3, r2
 8002670:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	8979      	ldrh	r1, [r7, #10]
 8002678:	4b20      	ldr	r3, [pc, #128]	; (80026fc <I2C_RequestMemoryWrite+0xa4>)
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 fa79 	bl	8002b78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	69b9      	ldr	r1, [r7, #24]
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f909 	bl	80028a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e02c      	b.n	80026f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d105      	bne.n	80026ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026a0:	893b      	ldrh	r3, [r7, #8]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	629a      	str	r2, [r3, #40]	; 0x28
 80026aa:	e015      	b.n	80026d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80026ac:	893b      	ldrh	r3, [r7, #8]
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	69b9      	ldr	r1, [r7, #24]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f8ef 	bl	80028a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e012      	b.n	80026f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026ce:	893b      	ldrh	r3, [r7, #8]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2200      	movs	r2, #0
 80026e0:	2180      	movs	r1, #128	; 0x80
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f884 	bl	80027f0 <I2C_WaitOnFlagUntilTimeout>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	80002000 	.word	0x80002000

08002700 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af02      	add	r7, sp, #8
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	4608      	mov	r0, r1
 800270a:	4611      	mov	r1, r2
 800270c:	461a      	mov	r2, r3
 800270e:	4603      	mov	r3, r0
 8002710:	817b      	strh	r3, [r7, #10]
 8002712:	460b      	mov	r3, r1
 8002714:	813b      	strh	r3, [r7, #8]
 8002716:	4613      	mov	r3, r2
 8002718:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	b2da      	uxtb	r2, r3
 800271e:	8979      	ldrh	r1, [r7, #10]
 8002720:	4b20      	ldr	r3, [pc, #128]	; (80027a4 <I2C_RequestMemoryRead+0xa4>)
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2300      	movs	r3, #0
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fa26 	bl	8002b78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	69b9      	ldr	r1, [r7, #24]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f8b6 	bl	80028a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e02c      	b.n	800279a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d105      	bne.n	8002752 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002746:	893b      	ldrh	r3, [r7, #8]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
 8002750:	e015      	b.n	800277e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002752:	893b      	ldrh	r3, [r7, #8]
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	b29b      	uxth	r3, r3
 8002758:	b2da      	uxtb	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	69b9      	ldr	r1, [r7, #24]
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 f89c 	bl	80028a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e012      	b.n	800279a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002774:	893b      	ldrh	r3, [r7, #8]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	2200      	movs	r2, #0
 8002786:	2140      	movs	r1, #64	; 0x40
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f831 	bl	80027f0 <I2C_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	80002000 	.word	0x80002000

080027a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d103      	bne.n	80027c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2200      	movs	r2, #0
 80027c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d007      	beq.n	80027e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699a      	ldr	r2, [r3, #24]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	619a      	str	r2, [r3, #24]
  }
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	4613      	mov	r3, r2
 80027fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002800:	e03b      	b.n	800287a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	6839      	ldr	r1, [r7, #0]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f8d6 	bl	80029b8 <I2C_IsErrorOccurred>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e041      	b.n	800289a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d02d      	beq.n	800287a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281e:	f7ff f95f 	bl	8001ae0 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d302      	bcc.n	8002834 <I2C_WaitOnFlagUntilTimeout+0x44>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d122      	bne.n	800287a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	4013      	ands	r3, r2
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	429a      	cmp	r2, r3
 8002842:	bf0c      	ite	eq
 8002844:	2301      	moveq	r3, #1
 8002846:	2300      	movne	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	461a      	mov	r2, r3
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	429a      	cmp	r2, r3
 8002850:	d113      	bne.n	800287a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f043 0220 	orr.w	r2, r3, #32
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e00f      	b.n	800289a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699a      	ldr	r2, [r3, #24]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4013      	ands	r3, r2
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	429a      	cmp	r2, r3
 8002888:	bf0c      	ite	eq
 800288a:	2301      	moveq	r3, #1
 800288c:	2300      	movne	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	429a      	cmp	r2, r3
 8002896:	d0b4      	beq.n	8002802 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028ae:	e033      	b.n	8002918 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	68b9      	ldr	r1, [r7, #8]
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f87f 	bl	80029b8 <I2C_IsErrorOccurred>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e031      	b.n	8002928 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ca:	d025      	beq.n	8002918 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028cc:	f7ff f908 	bl	8001ae0 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d302      	bcc.n	80028e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d11a      	bne.n	8002918 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d013      	beq.n	8002918 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f4:	f043 0220 	orr.w	r2, r3, #32
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e007      	b.n	8002928 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b02      	cmp	r3, #2
 8002924:	d1c4      	bne.n	80028b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800293c:	e02f      	b.n	800299e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f838 	bl	80029b8 <I2C_IsErrorOccurred>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e02d      	b.n	80029ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002952:	f7ff f8c5 	bl	8001ae0 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	429a      	cmp	r2, r3
 8002960:	d302      	bcc.n	8002968 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d11a      	bne.n	800299e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f003 0320 	and.w	r3, r3, #32
 8002972:	2b20      	cmp	r3, #32
 8002974:	d013      	beq.n	800299e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	f043 0220 	orr.w	r2, r3, #32
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e007      	b.n	80029ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d1c8      	bne.n	800293e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d068      	beq.n	8002ab6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2210      	movs	r2, #16
 80029ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029ec:	e049      	b.n	8002a82 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f4:	d045      	beq.n	8002a82 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029f6:	f7ff f873 	bl	8001ae0 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d302      	bcc.n	8002a0c <I2C_IsErrorOccurred+0x54>
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d13a      	bne.n	8002a82 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a2e:	d121      	bne.n	8002a74 <I2C_IsErrorOccurred+0xbc>
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a36:	d01d      	beq.n	8002a74 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002a38:	7cfb      	ldrb	r3, [r7, #19]
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	d01a      	beq.n	8002a74 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a4c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a4e:	f7ff f847 	bl	8001ae0 <HAL_GetTick>
 8002a52:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a54:	e00e      	b.n	8002a74 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a56:	f7ff f843 	bl	8001ae0 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b19      	cmp	r3, #25
 8002a62:	d907      	bls.n	8002a74 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	f043 0320 	orr.w	r3, r3, #32
 8002a6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002a72:	e006      	b.n	8002a82 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	d1e9      	bne.n	8002a56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d003      	beq.n	8002a98 <I2C_IsErrorOccurred+0xe0>
 8002a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0aa      	beq.n	80029ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d103      	bne.n	8002aa8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	f043 0304 	orr.w	r3, r3, #4
 8002aae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00b      	beq.n	8002ae0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ad8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	f043 0308 	orr.w	r3, r3, #8
 8002af0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002afa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00b      	beq.n	8002b24 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	f043 0302 	orr.w	r3, r3, #2
 8002b12:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d01c      	beq.n	8002b66 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f7ff fe3b 	bl	80027a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6859      	ldr	r1, [r3, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <I2C_IsErrorOccurred+0x1bc>)
 8002b3e:	400b      	ands	r3, r1
 8002b40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002b66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3728      	adds	r7, #40	; 0x28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	fe00e800 	.word	0xfe00e800

08002b78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	460b      	mov	r3, r1
 8002b84:	817b      	strh	r3, [r7, #10]
 8002b86:	4613      	mov	r3, r2
 8002b88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b8a:	897b      	ldrh	r3, [r7, #10]
 8002b8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b90:	7a7b      	ldrb	r3, [r7, #9]
 8002b92:	041b      	lsls	r3, r3, #16
 8002b94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b98:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ba6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	0d5b      	lsrs	r3, r3, #21
 8002bb2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002bb6:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <I2C_TransferConfig+0x60>)
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	ea02 0103 	and.w	r1, r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002bca:	bf00      	nop
 8002bcc:	371c      	adds	r7, #28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	03ff63ff 	.word	0x03ff63ff

08002bdc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	d138      	bne.n	8002c64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e032      	b.n	8002c66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2224      	movs	r2, #36	; 0x24
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0201 	bic.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6819      	ldr	r1, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	e000      	b.n	8002c66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c64:	2302      	movs	r3, #2
  }
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b085      	sub	sp, #20
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	d139      	bne.n	8002cfc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e033      	b.n	8002cfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2224      	movs	r2, #36	; 0x24
 8002ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0201 	bic.w	r2, r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cc4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e000      	b.n	8002cfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cfc:	2302      	movs	r3, #2
  }
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d141      	bne.n	8002d9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d1a:	4b4b      	ldr	r3, [pc, #300]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d26:	d131      	bne.n	8002d8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d28:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d2e:	4a46      	ldr	r2, [pc, #280]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d38:	4b43      	ldr	r3, [pc, #268]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d40:	4a41      	ldr	r2, [pc, #260]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d48:	4b40      	ldr	r3, [pc, #256]	; (8002e4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2232      	movs	r2, #50	; 0x32
 8002d4e:	fb02 f303 	mul.w	r3, r2, r3
 8002d52:	4a3f      	ldr	r2, [pc, #252]	; (8002e50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d54:	fba2 2303 	umull	r2, r3, r2, r3
 8002d58:	0c9b      	lsrs	r3, r3, #18
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d5e:	e002      	b.n	8002d66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d66:	4b38      	ldr	r3, [pc, #224]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d72:	d102      	bne.n	8002d7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f2      	bne.n	8002d60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d7a:	4b33      	ldr	r3, [pc, #204]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d86:	d158      	bne.n	8002e3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e057      	b.n	8002e3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d8c:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d92:	4a2d      	ldr	r2, [pc, #180]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d9c:	e04d      	b.n	8002e3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da4:	d141      	bne.n	8002e2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002da6:	4b28      	ldr	r3, [pc, #160]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db2:	d131      	bne.n	8002e18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002db4:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dba:	4a23      	ldr	r2, [pc, #140]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dc4:	4b20      	ldr	r3, [pc, #128]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dcc:	4a1e      	ldr	r2, [pc, #120]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002dd4:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2232      	movs	r2, #50	; 0x32
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	4a1c      	ldr	r2, [pc, #112]	; (8002e50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	0c9b      	lsrs	r3, r3, #18
 8002de6:	3301      	adds	r3, #1
 8002de8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dea:	e002      	b.n	8002df2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002df2:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfe:	d102      	bne.n	8002e06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f2      	bne.n	8002dec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e06:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e12:	d112      	bne.n	8002e3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e011      	b.n	8002e3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e28:	e007      	b.n	8002e3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e2a:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e32:	4a05      	ldr	r2, [pc, #20]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e38:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	40007000 	.word	0x40007000
 8002e4c:	20000004 	.word	0x20000004
 8002e50:	431bde83 	.word	0x431bde83

08002e54 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e62:	6093      	str	r3, [r2, #8]
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40007000 	.word	0x40007000

08002e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e2fe      	b.n	8003484 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d075      	beq.n	8002f7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e92:	4b97      	ldr	r3, [pc, #604]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e9c:	4b94      	ldr	r3, [pc, #592]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b0c      	cmp	r3, #12
 8002eaa:	d102      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x3e>
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d002      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x44>
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d10b      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb8:	4b8d      	ldr	r3, [pc, #564]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d05b      	beq.n	8002f7c <HAL_RCC_OscConfig+0x108>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d157      	bne.n	8002f7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e2d9      	b.n	8003484 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed8:	d106      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x74>
 8002eda:	4b85      	ldr	r3, [pc, #532]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a84      	ldr	r2, [pc, #528]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e01d      	b.n	8002f24 <HAL_RCC_OscConfig+0xb0>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x98>
 8002ef2:	4b7f      	ldr	r3, [pc, #508]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a7e      	ldr	r2, [pc, #504]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	4b7c      	ldr	r3, [pc, #496]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a7b      	ldr	r2, [pc, #492]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e00b      	b.n	8002f24 <HAL_RCC_OscConfig+0xb0>
 8002f0c:	4b78      	ldr	r3, [pc, #480]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a77      	ldr	r2, [pc, #476]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	4b75      	ldr	r3, [pc, #468]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a74      	ldr	r2, [pc, #464]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d013      	beq.n	8002f54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2c:	f7fe fdd8 	bl	8001ae0 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f34:	f7fe fdd4 	bl	8001ae0 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	; 0x64
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e29e      	b.n	8003484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f46:	4b6a      	ldr	r3, [pc, #424]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0xc0>
 8002f52:	e014      	b.n	8002f7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f54:	f7fe fdc4 	bl	8001ae0 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f5c:	f7fe fdc0 	bl	8001ae0 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b64      	cmp	r3, #100	; 0x64
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e28a      	b.n	8003484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f6e:	4b60      	ldr	r3, [pc, #384]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0xe8>
 8002f7a:	e000      	b.n	8002f7e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d075      	beq.n	8003076 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f8a:	4b59      	ldr	r3, [pc, #356]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f94:	4b56      	ldr	r3, [pc, #344]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	2b0c      	cmp	r3, #12
 8002fa2:	d102      	bne.n	8002faa <HAL_RCC_OscConfig+0x136>
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d002      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x13c>
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d11f      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb0:	4b4f      	ldr	r3, [pc, #316]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x154>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e25d      	b.n	8003484 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc8:	4b49      	ldr	r3, [pc, #292]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	4946      	ldr	r1, [pc, #280]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002fdc:	4b45      	ldr	r3, [pc, #276]	; (80030f4 <HAL_RCC_OscConfig+0x280>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fe fd31 	bl	8001a48 <HAL_InitTick>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d043      	beq.n	8003074 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e249      	b.n	8003484 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d023      	beq.n	8003040 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff8:	4b3d      	ldr	r3, [pc, #244]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a3c      	ldr	r2, [pc, #240]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8002ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fe fd6c 	bl	8001ae0 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800300c:	f7fe fd68 	bl	8001ae0 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e232      	b.n	8003484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800301e:	4b34      	ldr	r3, [pc, #208]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302a:	4b31      	ldr	r3, [pc, #196]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	061b      	lsls	r3, r3, #24
 8003038:	492d      	ldr	r1, [pc, #180]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]
 800303e:	e01a      	b.n	8003076 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003040:	4b2b      	ldr	r3, [pc, #172]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a2a      	ldr	r2, [pc, #168]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8003046:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800304a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fe fd48 	bl	8001ae0 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003054:	f7fe fd44 	bl	8001ae0 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e20e      	b.n	8003484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003066:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x1e0>
 8003072:	e000      	b.n	8003076 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003074:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d041      	beq.n	8003106 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d01c      	beq.n	80030c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308a:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 800308c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003090:	4a17      	ldr	r2, [pc, #92]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309a:	f7fe fd21 	bl	8001ae0 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a2:	f7fe fd1d 	bl	8001ae0 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e1e7      	b.n	8003484 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030b4:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 80030b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0ef      	beq.n	80030a2 <HAL_RCC_OscConfig+0x22e>
 80030c2:	e020      	b.n	8003106 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c4:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 80030c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ca:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <HAL_RCC_OscConfig+0x27c>)
 80030cc:	f023 0301 	bic.w	r3, r3, #1
 80030d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d4:	f7fe fd04 	bl	8001ae0 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030da:	e00d      	b.n	80030f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030dc:	f7fe fd00 	bl	8001ae0 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d906      	bls.n	80030f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e1ca      	b.n	8003484 <HAL_RCC_OscConfig+0x610>
 80030ee:	bf00      	nop
 80030f0:	40021000 	.word	0x40021000
 80030f4:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030f8:	4b8c      	ldr	r3, [pc, #560]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 80030fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1ea      	bne.n	80030dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 80a6 	beq.w	8003260 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003114:	2300      	movs	r3, #0
 8003116:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003118:	4b84      	ldr	r3, [pc, #528]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 800311a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_RCC_OscConfig+0x2b4>
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <HAL_RCC_OscConfig+0x2b6>
 8003128:	2300      	movs	r3, #0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00d      	beq.n	800314a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312e:	4b7f      	ldr	r3, [pc, #508]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 8003130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003132:	4a7e      	ldr	r2, [pc, #504]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 8003134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003138:	6593      	str	r3, [r2, #88]	; 0x58
 800313a:	4b7c      	ldr	r3, [pc, #496]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003146:	2301      	movs	r3, #1
 8003148:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314a:	4b79      	ldr	r3, [pc, #484]	; (8003330 <HAL_RCC_OscConfig+0x4bc>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d118      	bne.n	8003188 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003156:	4b76      	ldr	r3, [pc, #472]	; (8003330 <HAL_RCC_OscConfig+0x4bc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a75      	ldr	r2, [pc, #468]	; (8003330 <HAL_RCC_OscConfig+0x4bc>)
 800315c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003162:	f7fe fcbd 	bl	8001ae0 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316a:	f7fe fcb9 	bl	8001ae0 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e183      	b.n	8003484 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800317c:	4b6c      	ldr	r3, [pc, #432]	; (8003330 <HAL_RCC_OscConfig+0x4bc>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d108      	bne.n	80031a2 <HAL_RCC_OscConfig+0x32e>
 8003190:	4b66      	ldr	r3, [pc, #408]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003196:	4a65      	ldr	r2, [pc, #404]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031a0:	e024      	b.n	80031ec <HAL_RCC_OscConfig+0x378>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b05      	cmp	r3, #5
 80031a8:	d110      	bne.n	80031cc <HAL_RCC_OscConfig+0x358>
 80031aa:	4b60      	ldr	r3, [pc, #384]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 80031ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b0:	4a5e      	ldr	r2, [pc, #376]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 80031b2:	f043 0304 	orr.w	r3, r3, #4
 80031b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ba:	4b5c      	ldr	r3, [pc, #368]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c0:	4a5a      	ldr	r2, [pc, #360]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ca:	e00f      	b.n	80031ec <HAL_RCC_OscConfig+0x378>
 80031cc:	4b57      	ldr	r3, [pc, #348]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d2:	4a56      	ldr	r2, [pc, #344]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031dc:	4b53      	ldr	r3, [pc, #332]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e2:	4a52      	ldr	r2, [pc, #328]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 80031e4:	f023 0304 	bic.w	r3, r3, #4
 80031e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d016      	beq.n	8003222 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f4:	f7fe fc74 	bl	8001ae0 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fc:	f7fe fc70 	bl	8001ae0 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e138      	b.n	8003484 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003212:	4b46      	ldr	r3, [pc, #280]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0ed      	beq.n	80031fc <HAL_RCC_OscConfig+0x388>
 8003220:	e015      	b.n	800324e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003222:	f7fe fc5d 	bl	8001ae0 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003228:	e00a      	b.n	8003240 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322a:	f7fe fc59 	bl	8001ae0 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	f241 3288 	movw	r2, #5000	; 0x1388
 8003238:	4293      	cmp	r3, r2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e121      	b.n	8003484 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003240:	4b3a      	ldr	r3, [pc, #232]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1ed      	bne.n	800322a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800324e:	7ffb      	ldrb	r3, [r7, #31]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d105      	bne.n	8003260 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003254:	4b35      	ldr	r3, [pc, #212]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 8003256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003258:	4a34      	ldr	r2, [pc, #208]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 800325a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800325e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0320 	and.w	r3, r3, #32
 8003268:	2b00      	cmp	r3, #0
 800326a:	d03c      	beq.n	80032e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01c      	beq.n	80032ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003274:	4b2d      	ldr	r3, [pc, #180]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 8003276:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800327a:	4a2c      	ldr	r2, [pc, #176]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003284:	f7fe fc2c 	bl	8001ae0 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800328c:	f7fe fc28 	bl	8001ae0 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e0f2      	b.n	8003484 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800329e:	4b23      	ldr	r3, [pc, #140]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 80032a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ef      	beq.n	800328c <HAL_RCC_OscConfig+0x418>
 80032ac:	e01b      	b.n	80032e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032ae:	4b1f      	ldr	r3, [pc, #124]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 80032b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032b4:	4a1d      	ldr	r2, [pc, #116]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032be:	f7fe fc0f 	bl	8001ae0 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032c6:	f7fe fc0b 	bl	8001ae0 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e0d5      	b.n	8003484 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 80032da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1ef      	bne.n	80032c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 80c9 	beq.w	8003482 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032f0:	4b0e      	ldr	r3, [pc, #56]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b0c      	cmp	r3, #12
 80032fa:	f000 8083 	beq.w	8003404 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d15e      	bne.n	80033c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003306:	4b09      	ldr	r3, [pc, #36]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a08      	ldr	r2, [pc, #32]	; (800332c <HAL_RCC_OscConfig+0x4b8>)
 800330c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003312:	f7fe fbe5 	bl	8001ae0 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003318:	e00c      	b.n	8003334 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331a:	f7fe fbe1 	bl	8001ae0 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d905      	bls.n	8003334 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e0ab      	b.n	8003484 <HAL_RCC_OscConfig+0x610>
 800332c:	40021000 	.word	0x40021000
 8003330:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003334:	4b55      	ldr	r3, [pc, #340]	; (800348c <HAL_RCC_OscConfig+0x618>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1ec      	bne.n	800331a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003340:	4b52      	ldr	r3, [pc, #328]	; (800348c <HAL_RCC_OscConfig+0x618>)
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	4b52      	ldr	r3, [pc, #328]	; (8003490 <HAL_RCC_OscConfig+0x61c>)
 8003346:	4013      	ands	r3, r2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6a11      	ldr	r1, [r2, #32]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003350:	3a01      	subs	r2, #1
 8003352:	0112      	lsls	r2, r2, #4
 8003354:	4311      	orrs	r1, r2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800335a:	0212      	lsls	r2, r2, #8
 800335c:	4311      	orrs	r1, r2
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003362:	0852      	lsrs	r2, r2, #1
 8003364:	3a01      	subs	r2, #1
 8003366:	0552      	lsls	r2, r2, #21
 8003368:	4311      	orrs	r1, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800336e:	0852      	lsrs	r2, r2, #1
 8003370:	3a01      	subs	r2, #1
 8003372:	0652      	lsls	r2, r2, #25
 8003374:	4311      	orrs	r1, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800337a:	06d2      	lsls	r2, r2, #27
 800337c:	430a      	orrs	r2, r1
 800337e:	4943      	ldr	r1, [pc, #268]	; (800348c <HAL_RCC_OscConfig+0x618>)
 8003380:	4313      	orrs	r3, r2
 8003382:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003384:	4b41      	ldr	r3, [pc, #260]	; (800348c <HAL_RCC_OscConfig+0x618>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a40      	ldr	r2, [pc, #256]	; (800348c <HAL_RCC_OscConfig+0x618>)
 800338a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800338e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003390:	4b3e      	ldr	r3, [pc, #248]	; (800348c <HAL_RCC_OscConfig+0x618>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4a3d      	ldr	r2, [pc, #244]	; (800348c <HAL_RCC_OscConfig+0x618>)
 8003396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800339a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fe fba0 	bl	8001ae0 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a4:	f7fe fb9c 	bl	8001ae0 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e066      	b.n	8003484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b6:	4b35      	ldr	r3, [pc, #212]	; (800348c <HAL_RCC_OscConfig+0x618>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0x530>
 80033c2:	e05e      	b.n	8003482 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c4:	4b31      	ldr	r3, [pc, #196]	; (800348c <HAL_RCC_OscConfig+0x618>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a30      	ldr	r2, [pc, #192]	; (800348c <HAL_RCC_OscConfig+0x618>)
 80033ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fe fb86 	bl	8001ae0 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fe fb82 	bl	8001ae0 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e04c      	b.n	8003484 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ea:	4b28      	ldr	r3, [pc, #160]	; (800348c <HAL_RCC_OscConfig+0x618>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80033f6:	4b25      	ldr	r3, [pc, #148]	; (800348c <HAL_RCC_OscConfig+0x618>)
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	4924      	ldr	r1, [pc, #144]	; (800348c <HAL_RCC_OscConfig+0x618>)
 80033fc:	4b25      	ldr	r3, [pc, #148]	; (8003494 <HAL_RCC_OscConfig+0x620>)
 80033fe:	4013      	ands	r3, r2
 8003400:	60cb      	str	r3, [r1, #12]
 8003402:	e03e      	b.n	8003482 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e039      	b.n	8003484 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003410:	4b1e      	ldr	r3, [pc, #120]	; (800348c <HAL_RCC_OscConfig+0x618>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f003 0203 	and.w	r2, r3, #3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	429a      	cmp	r2, r3
 8003422:	d12c      	bne.n	800347e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	3b01      	subs	r3, #1
 8003430:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003432:	429a      	cmp	r2, r3
 8003434:	d123      	bne.n	800347e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003442:	429a      	cmp	r2, r3
 8003444:	d11b      	bne.n	800347e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003452:	429a      	cmp	r2, r3
 8003454:	d113      	bne.n	800347e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	085b      	lsrs	r3, r3, #1
 8003462:	3b01      	subs	r3, #1
 8003464:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003466:	429a      	cmp	r2, r3
 8003468:	d109      	bne.n	800347e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003474:	085b      	lsrs	r3, r3, #1
 8003476:	3b01      	subs	r3, #1
 8003478:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800347a:	429a      	cmp	r2, r3
 800347c:	d001      	beq.n	8003482 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3720      	adds	r7, #32
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40021000 	.word	0x40021000
 8003490:	019f800c 	.word	0x019f800c
 8003494:	feeefffc 	.word	0xfeeefffc

08003498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e11e      	b.n	80036ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034b0:	4b91      	ldr	r3, [pc, #580]	; (80036f8 <HAL_RCC_ClockConfig+0x260>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d910      	bls.n	80034e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b8e      	ldr	r3, [pc, #568]	; (80036f8 <HAL_RCC_ClockConfig+0x260>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 020f 	bic.w	r2, r3, #15
 80034c6:	498c      	ldr	r1, [pc, #560]	; (80036f8 <HAL_RCC_ClockConfig+0x260>)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b8a      	ldr	r3, [pc, #552]	; (80036f8 <HAL_RCC_ClockConfig+0x260>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e106      	b.n	80036ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d073      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d129      	bne.n	8003548 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f4:	4b81      	ldr	r3, [pc, #516]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0f4      	b.n	80036ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003504:	f000 f99e 	bl	8003844 <RCC_GetSysClockFreqFromPLLSource>
 8003508:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4a7c      	ldr	r2, [pc, #496]	; (8003700 <HAL_RCC_ClockConfig+0x268>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d93f      	bls.n	8003592 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003512:	4b7a      	ldr	r3, [pc, #488]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003526:	2b00      	cmp	r3, #0
 8003528:	d033      	beq.n	8003592 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800352e:	2b00      	cmp	r3, #0
 8003530:	d12f      	bne.n	8003592 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003532:	4b72      	ldr	r3, [pc, #456]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800353a:	4a70      	ldr	r2, [pc, #448]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 800353c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003540:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	e024      	b.n	8003592 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b02      	cmp	r3, #2
 800354e:	d107      	bne.n	8003560 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003550:	4b6a      	ldr	r3, [pc, #424]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e0c6      	b.n	80036ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003560:	4b66      	ldr	r3, [pc, #408]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0be      	b.n	80036ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003570:	f000 f8ce 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8003574:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4a61      	ldr	r2, [pc, #388]	; (8003700 <HAL_RCC_ClockConfig+0x268>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d909      	bls.n	8003592 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800357e:	4b5f      	ldr	r3, [pc, #380]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003586:	4a5d      	ldr	r2, [pc, #372]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 8003588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800358c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800358e:	2380      	movs	r3, #128	; 0x80
 8003590:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003592:	4b5a      	ldr	r3, [pc, #360]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f023 0203 	bic.w	r2, r3, #3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	4957      	ldr	r1, [pc, #348]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a4:	f7fe fa9c 	bl	8001ae0 <HAL_GetTick>
 80035a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035aa:	e00a      	b.n	80035c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ac:	f7fe fa98 	bl	8001ae0 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e095      	b.n	80036ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c2:	4b4e      	ldr	r3, [pc, #312]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 020c 	and.w	r2, r3, #12
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d1eb      	bne.n	80035ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d023      	beq.n	8003628 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035ec:	4b43      	ldr	r3, [pc, #268]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4a42      	ldr	r2, [pc, #264]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 80035f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003604:	4b3d      	ldr	r3, [pc, #244]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800360c:	4a3b      	ldr	r2, [pc, #236]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 800360e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003612:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003614:	4b39      	ldr	r3, [pc, #228]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4936      	ldr	r1, [pc, #216]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]
 8003626:	e008      	b.n	800363a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2b80      	cmp	r3, #128	; 0x80
 800362c:	d105      	bne.n	800363a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800362e:	4b33      	ldr	r3, [pc, #204]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	4a32      	ldr	r2, [pc, #200]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 8003634:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003638:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800363a:	4b2f      	ldr	r3, [pc, #188]	; (80036f8 <HAL_RCC_ClockConfig+0x260>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d21d      	bcs.n	8003684 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003648:	4b2b      	ldr	r3, [pc, #172]	; (80036f8 <HAL_RCC_ClockConfig+0x260>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f023 020f 	bic.w	r2, r3, #15
 8003650:	4929      	ldr	r1, [pc, #164]	; (80036f8 <HAL_RCC_ClockConfig+0x260>)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003658:	f7fe fa42 	bl	8001ae0 <HAL_GetTick>
 800365c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	e00a      	b.n	8003676 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003660:	f7fe fa3e 	bl	8001ae0 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	; 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e03b      	b.n	80036ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <HAL_RCC_ClockConfig+0x260>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d1ed      	bne.n	8003660 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003690:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4917      	ldr	r1, [pc, #92]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d009      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ae:	4b13      	ldr	r3, [pc, #76]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	490f      	ldr	r1, [pc, #60]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036c2:	f000 f825 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 80036c6:	4602      	mov	r2, r0
 80036c8:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <HAL_RCC_ClockConfig+0x264>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	091b      	lsrs	r3, r3, #4
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	490c      	ldr	r1, [pc, #48]	; (8003704 <HAL_RCC_ClockConfig+0x26c>)
 80036d4:	5ccb      	ldrb	r3, [r1, r3]
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	fa22 f303 	lsr.w	r3, r2, r3
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <HAL_RCC_ClockConfig+0x270>)
 80036e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80036e2:	4b0a      	ldr	r3, [pc, #40]	; (800370c <HAL_RCC_ClockConfig+0x274>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe f9ae 	bl	8001a48 <HAL_InitTick>
 80036ec:	4603      	mov	r3, r0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40022000 	.word	0x40022000
 80036fc:	40021000 	.word	0x40021000
 8003700:	04c4b400 	.word	0x04c4b400
 8003704:	08005a2c 	.word	0x08005a2c
 8003708:	20000004 	.word	0x20000004
 800370c:	20000008 	.word	0x20000008

08003710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003716:	4b2c      	ldr	r3, [pc, #176]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	2b04      	cmp	r3, #4
 8003720:	d102      	bne.n	8003728 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003722:	4b2a      	ldr	r3, [pc, #168]	; (80037cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	e047      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003728:	4b27      	ldr	r3, [pc, #156]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 030c 	and.w	r3, r3, #12
 8003730:	2b08      	cmp	r3, #8
 8003732:	d102      	bne.n	800373a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003734:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	e03e      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800373a:	4b23      	ldr	r3, [pc, #140]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d136      	bne.n	80037b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003746:	4b20      	ldr	r3, [pc, #128]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003750:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	3301      	adds	r3, #1
 800375c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b03      	cmp	r3, #3
 8003762:	d10c      	bne.n	800377e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003764:	4a1a      	ldr	r2, [pc, #104]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	fbb2 f3f3 	udiv	r3, r2, r3
 800376c:	4a16      	ldr	r2, [pc, #88]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800376e:	68d2      	ldr	r2, [r2, #12]
 8003770:	0a12      	lsrs	r2, r2, #8
 8003772:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003776:	fb02 f303 	mul.w	r3, r2, r3
 800377a:	617b      	str	r3, [r7, #20]
      break;
 800377c:	e00c      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800377e:	4a13      	ldr	r2, [pc, #76]	; (80037cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	fbb2 f3f3 	udiv	r3, r2, r3
 8003786:	4a10      	ldr	r2, [pc, #64]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003788:	68d2      	ldr	r2, [r2, #12]
 800378a:	0a12      	lsrs	r2, r2, #8
 800378c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003790:	fb02 f303 	mul.w	r3, r2, r3
 8003794:	617b      	str	r3, [r7, #20]
      break;
 8003796:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	0e5b      	lsrs	r3, r3, #25
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	3301      	adds	r3, #1
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b0:	613b      	str	r3, [r7, #16]
 80037b2:	e001      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80037b8:	693b      	ldr	r3, [r7, #16]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	371c      	adds	r7, #28
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40021000 	.word	0x40021000
 80037cc:	00f42400 	.word	0x00f42400
 80037d0:	016e3600 	.word	0x016e3600

080037d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d8:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037da:	681b      	ldr	r3, [r3, #0]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	20000004 	.word	0x20000004

080037ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037f0:	f7ff fff0 	bl	80037d4 <HAL_RCC_GetHCLKFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	4904      	ldr	r1, [pc, #16]	; (8003814 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800380c:	4618      	mov	r0, r3
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40021000 	.word	0x40021000
 8003814:	08005a3c 	.word	0x08005a3c

08003818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800381c:	f7ff ffda 	bl	80037d4 <HAL_RCC_GetHCLKFreq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	0adb      	lsrs	r3, r3, #11
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	4904      	ldr	r1, [pc, #16]	; (8003840 <HAL_RCC_GetPCLK2Freq+0x28>)
 800382e:	5ccb      	ldrb	r3, [r1, r3]
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000
 8003840:	08005a3c 	.word	0x08005a3c

08003844 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800384a:	4b1e      	ldr	r3, [pc, #120]	; (80038c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003854:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	3301      	adds	r3, #1
 8003860:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2b03      	cmp	r3, #3
 8003866:	d10c      	bne.n	8003882 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003868:	4a17      	ldr	r2, [pc, #92]	; (80038c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003870:	4a14      	ldr	r2, [pc, #80]	; (80038c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003872:	68d2      	ldr	r2, [r2, #12]
 8003874:	0a12      	lsrs	r2, r2, #8
 8003876:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800387a:	fb02 f303 	mul.w	r3, r2, r3
 800387e:	617b      	str	r3, [r7, #20]
    break;
 8003880:	e00c      	b.n	800389c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003882:	4a12      	ldr	r2, [pc, #72]	; (80038cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	fbb2 f3f3 	udiv	r3, r2, r3
 800388a:	4a0e      	ldr	r2, [pc, #56]	; (80038c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800388c:	68d2      	ldr	r2, [r2, #12]
 800388e:	0a12      	lsrs	r2, r2, #8
 8003890:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003894:	fb02 f303 	mul.w	r3, r2, r3
 8003898:	617b      	str	r3, [r7, #20]
    break;
 800389a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800389c:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	0e5b      	lsrs	r3, r3, #25
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	3301      	adds	r3, #1
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80038b6:	687b      	ldr	r3, [r7, #4]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	40021000 	.word	0x40021000
 80038c8:	016e3600 	.word	0x016e3600
 80038cc:	00f42400 	.word	0x00f42400

080038d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038d8:	2300      	movs	r3, #0
 80038da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038dc:	2300      	movs	r3, #0
 80038de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8098 	beq.w	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ee:	2300      	movs	r3, #0
 80038f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038f2:	4b43      	ldr	r3, [pc, #268]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10d      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038fe:	4b40      	ldr	r3, [pc, #256]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003902:	4a3f      	ldr	r2, [pc, #252]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003908:	6593      	str	r3, [r2, #88]	; 0x58
 800390a:	4b3d      	ldr	r3, [pc, #244]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800390c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003912:	60bb      	str	r3, [r7, #8]
 8003914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003916:	2301      	movs	r3, #1
 8003918:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800391a:	4b3a      	ldr	r3, [pc, #232]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a39      	ldr	r2, [pc, #228]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003924:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003926:	f7fe f8db 	bl	8001ae0 <HAL_GetTick>
 800392a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800392c:	e009      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800392e:	f7fe f8d7 	bl	8001ae0 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d902      	bls.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	74fb      	strb	r3, [r7, #19]
        break;
 8003940:	e005      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003942:	4b30      	ldr	r3, [pc, #192]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0ef      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800394e:	7cfb      	ldrb	r3, [r7, #19]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d159      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003954:	4b2a      	ldr	r3, [pc, #168]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d01e      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	429a      	cmp	r2, r3
 800396e:	d019      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003970:	4b23      	ldr	r3, [pc, #140]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800397c:	4b20      	ldr	r3, [pc, #128]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003982:	4a1f      	ldr	r2, [pc, #124]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800398c:	4b1c      	ldr	r3, [pc, #112]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003992:	4a1b      	ldr	r2, [pc, #108]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800399c:	4a18      	ldr	r2, [pc, #96]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d016      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ae:	f7fe f897 	bl	8001ae0 <HAL_GetTick>
 80039b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b4:	e00b      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7fe f893 	bl	8001ae0 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d902      	bls.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	74fb      	strb	r3, [r7, #19]
            break;
 80039cc:	e006      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ce:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0ec      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80039dc:	7cfb      	ldrb	r3, [r7, #19]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10b      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039e2:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f0:	4903      	ldr	r1, [pc, #12]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039f8:	e008      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039fa:	7cfb      	ldrb	r3, [r7, #19]
 80039fc:	74bb      	strb	r3, [r7, #18]
 80039fe:	e005      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a08:	7cfb      	ldrb	r3, [r7, #19]
 8003a0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a0c:	7c7b      	ldrb	r3, [r7, #17]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d105      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a12:	4ba7      	ldr	r3, [pc, #668]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a16:	4aa6      	ldr	r2, [pc, #664]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a2a:	4ba1      	ldr	r3, [pc, #644]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a30:	f023 0203 	bic.w	r2, r3, #3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	499d      	ldr	r1, [pc, #628]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a4c:	4b98      	ldr	r3, [pc, #608]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a52:	f023 020c 	bic.w	r2, r3, #12
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	4995      	ldr	r1, [pc, #596]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a6e:	4b90      	ldr	r3, [pc, #576]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	498c      	ldr	r1, [pc, #560]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a90:	4b87      	ldr	r3, [pc, #540]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	4984      	ldr	r1, [pc, #528]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ab2:	4b7f      	ldr	r3, [pc, #508]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	497b      	ldr	r1, [pc, #492]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0320 	and.w	r3, r3, #32
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ad4:	4b76      	ldr	r3, [pc, #472]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ada:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	4973      	ldr	r1, [pc, #460]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003af6:	4b6e      	ldr	r3, [pc, #440]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	496a      	ldr	r1, [pc, #424]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b18:	4b65      	ldr	r3, [pc, #404]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	4962      	ldr	r1, [pc, #392]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b3a:	4b5d      	ldr	r3, [pc, #372]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	4959      	ldr	r1, [pc, #356]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b5c:	4b54      	ldr	r3, [pc, #336]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b62:	f023 0203 	bic.w	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6a:	4951      	ldr	r1, [pc, #324]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b7e:	4b4c      	ldr	r3, [pc, #304]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	4948      	ldr	r1, [pc, #288]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d015      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ba0:	4b43      	ldr	r3, [pc, #268]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	4940      	ldr	r1, [pc, #256]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bbe:	d105      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bc0:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4a3a      	ldr	r2, [pc, #232]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d015      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bd8:	4b35      	ldr	r3, [pc, #212]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be6:	4932      	ldr	r1, [pc, #200]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf6:	d105      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bf8:	4b2d      	ldr	r3, [pc, #180]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	4a2c      	ldr	r2, [pc, #176]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c02:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d015      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c10:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	4924      	ldr	r1, [pc, #144]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c2e:	d105      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c30:	4b1f      	ldr	r3, [pc, #124]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	4a1e      	ldr	r2, [pc, #120]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c3a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d015      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c48:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c56:	4916      	ldr	r1, [pc, #88]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c66:	d105      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c68:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4a10      	ldr	r2, [pc, #64]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c72:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d019      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	4908      	ldr	r1, [pc, #32]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c9e:	d109      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ca0:	4b03      	ldr	r3, [pc, #12]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	4a02      	ldr	r2, [pc, #8]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003caa:	60d3      	str	r3, [r2, #12]
 8003cac:	e002      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003cae:	bf00      	nop
 8003cb0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d015      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003cc0:	4b29      	ldr	r3, [pc, #164]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	4926      	ldr	r1, [pc, #152]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cde:	d105      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ce0:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4a20      	ldr	r2, [pc, #128]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d015      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003cf8:	4b1b      	ldr	r3, [pc, #108]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d06:	4918      	ldr	r1, [pc, #96]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d16:	d105      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d18:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4a12      	ldr	r2, [pc, #72]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d22:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d015      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d30:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3e:	490a      	ldr	r1, [pc, #40]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d4e:	d105      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d50:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4a04      	ldr	r2, [pc, #16]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003d5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000

08003d6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d001      	beq.n	8003d84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e04c      	b.n	8003e1e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a26      	ldr	r2, [pc, #152]	; (8003e2c <HAL_TIM_Base_Start+0xc0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d022      	beq.n	8003ddc <HAL_TIM_Base_Start+0x70>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9e:	d01d      	beq.n	8003ddc <HAL_TIM_Base_Start+0x70>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a22      	ldr	r2, [pc, #136]	; (8003e30 <HAL_TIM_Base_Start+0xc4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d018      	beq.n	8003ddc <HAL_TIM_Base_Start+0x70>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a21      	ldr	r2, [pc, #132]	; (8003e34 <HAL_TIM_Base_Start+0xc8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d013      	beq.n	8003ddc <HAL_TIM_Base_Start+0x70>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1f      	ldr	r2, [pc, #124]	; (8003e38 <HAL_TIM_Base_Start+0xcc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00e      	beq.n	8003ddc <HAL_TIM_Base_Start+0x70>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1e      	ldr	r2, [pc, #120]	; (8003e3c <HAL_TIM_Base_Start+0xd0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d009      	beq.n	8003ddc <HAL_TIM_Base_Start+0x70>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1c      	ldr	r2, [pc, #112]	; (8003e40 <HAL_TIM_Base_Start+0xd4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d004      	beq.n	8003ddc <HAL_TIM_Base_Start+0x70>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a1b      	ldr	r2, [pc, #108]	; (8003e44 <HAL_TIM_Base_Start+0xd8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d115      	bne.n	8003e08 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <HAL_TIM_Base_Start+0xdc>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b06      	cmp	r3, #6
 8003dec:	d015      	beq.n	8003e1a <HAL_TIM_Base_Start+0xae>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df4:	d011      	beq.n	8003e1a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0201 	orr.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e06:	e008      	b.n	8003e1a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	e000      	b.n	8003e1c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40012c00 	.word	0x40012c00
 8003e30:	40000400 	.word	0x40000400
 8003e34:	40000800 	.word	0x40000800
 8003e38:	40000c00 	.word	0x40000c00
 8003e3c:	40013400 	.word	0x40013400
 8003e40:	40014000 	.word	0x40014000
 8003e44:	40015000 	.word	0x40015000
 8003e48:	00010007 	.word	0x00010007

08003e4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e049      	b.n	8003ef2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fd fcd2 	bl	800181c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3304      	adds	r3, #4
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	f000 fa5c 	bl	8004348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d109      	bne.n	8003f20 <HAL_TIM_PWM_Start+0x24>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	bf14      	ite	ne
 8003f18:	2301      	movne	r3, #1
 8003f1a:	2300      	moveq	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	e03c      	b.n	8003f9a <HAL_TIM_PWM_Start+0x9e>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d109      	bne.n	8003f3a <HAL_TIM_PWM_Start+0x3e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	bf14      	ite	ne
 8003f32:	2301      	movne	r3, #1
 8003f34:	2300      	moveq	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	e02f      	b.n	8003f9a <HAL_TIM_PWM_Start+0x9e>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d109      	bne.n	8003f54 <HAL_TIM_PWM_Start+0x58>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	bf14      	ite	ne
 8003f4c:	2301      	movne	r3, #1
 8003f4e:	2300      	moveq	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	e022      	b.n	8003f9a <HAL_TIM_PWM_Start+0x9e>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2b0c      	cmp	r3, #12
 8003f58:	d109      	bne.n	8003f6e <HAL_TIM_PWM_Start+0x72>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	bf14      	ite	ne
 8003f66:	2301      	movne	r3, #1
 8003f68:	2300      	moveq	r3, #0
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	e015      	b.n	8003f9a <HAL_TIM_PWM_Start+0x9e>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b10      	cmp	r3, #16
 8003f72:	d109      	bne.n	8003f88 <HAL_TIM_PWM_Start+0x8c>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	bf14      	ite	ne
 8003f80:	2301      	movne	r3, #1
 8003f82:	2300      	moveq	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	e008      	b.n	8003f9a <HAL_TIM_PWM_Start+0x9e>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	bf14      	ite	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	2300      	moveq	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e0a6      	b.n	80040f0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d104      	bne.n	8003fb2 <HAL_TIM_PWM_Start+0xb6>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb0:	e023      	b.n	8003ffa <HAL_TIM_PWM_Start+0xfe>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d104      	bne.n	8003fc2 <HAL_TIM_PWM_Start+0xc6>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fc0:	e01b      	b.n	8003ffa <HAL_TIM_PWM_Start+0xfe>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d104      	bne.n	8003fd2 <HAL_TIM_PWM_Start+0xd6>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fd0:	e013      	b.n	8003ffa <HAL_TIM_PWM_Start+0xfe>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b0c      	cmp	r3, #12
 8003fd6:	d104      	bne.n	8003fe2 <HAL_TIM_PWM_Start+0xe6>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fe0:	e00b      	b.n	8003ffa <HAL_TIM_PWM_Start+0xfe>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b10      	cmp	r3, #16
 8003fe6:	d104      	bne.n	8003ff2 <HAL_TIM_PWM_Start+0xf6>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff0:	e003      	b.n	8003ffa <HAL_TIM_PWM_Start+0xfe>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2201      	movs	r2, #1
 8004000:	6839      	ldr	r1, [r7, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fd7e 	bl	8004b04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a3a      	ldr	r2, [pc, #232]	; (80040f8 <HAL_TIM_PWM_Start+0x1fc>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d018      	beq.n	8004044 <HAL_TIM_PWM_Start+0x148>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a39      	ldr	r2, [pc, #228]	; (80040fc <HAL_TIM_PWM_Start+0x200>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d013      	beq.n	8004044 <HAL_TIM_PWM_Start+0x148>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a37      	ldr	r2, [pc, #220]	; (8004100 <HAL_TIM_PWM_Start+0x204>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00e      	beq.n	8004044 <HAL_TIM_PWM_Start+0x148>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a36      	ldr	r2, [pc, #216]	; (8004104 <HAL_TIM_PWM_Start+0x208>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d009      	beq.n	8004044 <HAL_TIM_PWM_Start+0x148>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a34      	ldr	r2, [pc, #208]	; (8004108 <HAL_TIM_PWM_Start+0x20c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d004      	beq.n	8004044 <HAL_TIM_PWM_Start+0x148>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a33      	ldr	r2, [pc, #204]	; (800410c <HAL_TIM_PWM_Start+0x210>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d101      	bne.n	8004048 <HAL_TIM_PWM_Start+0x14c>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_TIM_PWM_Start+0x14e>
 8004048:	2300      	movs	r3, #0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800405c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a25      	ldr	r2, [pc, #148]	; (80040f8 <HAL_TIM_PWM_Start+0x1fc>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d022      	beq.n	80040ae <HAL_TIM_PWM_Start+0x1b2>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004070:	d01d      	beq.n	80040ae <HAL_TIM_PWM_Start+0x1b2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a26      	ldr	r2, [pc, #152]	; (8004110 <HAL_TIM_PWM_Start+0x214>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d018      	beq.n	80040ae <HAL_TIM_PWM_Start+0x1b2>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a24      	ldr	r2, [pc, #144]	; (8004114 <HAL_TIM_PWM_Start+0x218>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d013      	beq.n	80040ae <HAL_TIM_PWM_Start+0x1b2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a23      	ldr	r2, [pc, #140]	; (8004118 <HAL_TIM_PWM_Start+0x21c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00e      	beq.n	80040ae <HAL_TIM_PWM_Start+0x1b2>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a19      	ldr	r2, [pc, #100]	; (80040fc <HAL_TIM_PWM_Start+0x200>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d009      	beq.n	80040ae <HAL_TIM_PWM_Start+0x1b2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a18      	ldr	r2, [pc, #96]	; (8004100 <HAL_TIM_PWM_Start+0x204>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d004      	beq.n	80040ae <HAL_TIM_PWM_Start+0x1b2>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a18      	ldr	r2, [pc, #96]	; (800410c <HAL_TIM_PWM_Start+0x210>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d115      	bne.n	80040da <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	4b19      	ldr	r3, [pc, #100]	; (800411c <HAL_TIM_PWM_Start+0x220>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b06      	cmp	r3, #6
 80040be:	d015      	beq.n	80040ec <HAL_TIM_PWM_Start+0x1f0>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c6:	d011      	beq.n	80040ec <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d8:	e008      	b.n	80040ec <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0201 	orr.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	e000      	b.n	80040ee <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40012c00 	.word	0x40012c00
 80040fc:	40013400 	.word	0x40013400
 8004100:	40014000 	.word	0x40014000
 8004104:	40014400 	.word	0x40014400
 8004108:	40014800 	.word	0x40014800
 800410c:	40015000 	.word	0x40015000
 8004110:	40000400 	.word	0x40000400
 8004114:	40000800 	.word	0x40000800
 8004118:	40000c00 	.word	0x40000c00
 800411c:	00010007 	.word	0x00010007

08004120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800412c:	2300      	movs	r3, #0
 800412e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800413a:	2302      	movs	r3, #2
 800413c:	e0ff      	b.n	800433e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b14      	cmp	r3, #20
 800414a:	f200 80f0 	bhi.w	800432e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800414e:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004154:	080041a9 	.word	0x080041a9
 8004158:	0800432f 	.word	0x0800432f
 800415c:	0800432f 	.word	0x0800432f
 8004160:	0800432f 	.word	0x0800432f
 8004164:	080041e9 	.word	0x080041e9
 8004168:	0800432f 	.word	0x0800432f
 800416c:	0800432f 	.word	0x0800432f
 8004170:	0800432f 	.word	0x0800432f
 8004174:	0800422b 	.word	0x0800422b
 8004178:	0800432f 	.word	0x0800432f
 800417c:	0800432f 	.word	0x0800432f
 8004180:	0800432f 	.word	0x0800432f
 8004184:	0800426b 	.word	0x0800426b
 8004188:	0800432f 	.word	0x0800432f
 800418c:	0800432f 	.word	0x0800432f
 8004190:	0800432f 	.word	0x0800432f
 8004194:	080042ad 	.word	0x080042ad
 8004198:	0800432f 	.word	0x0800432f
 800419c:	0800432f 	.word	0x0800432f
 80041a0:	0800432f 	.word	0x0800432f
 80041a4:	080042ed 	.word	0x080042ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 f97e 	bl	80044b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0208 	orr.w	r2, r2, #8
 80041c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0204 	bic.w	r2, r2, #4
 80041d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6999      	ldr	r1, [r3, #24]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	619a      	str	r2, [r3, #24]
      break;
 80041e6:	e0a5      	b.n	8004334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 f9f8 	bl	80045e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6999      	ldr	r1, [r3, #24]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	021a      	lsls	r2, r3, #8
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	619a      	str	r2, [r3, #24]
      break;
 8004228:	e084      	b.n	8004334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68b9      	ldr	r1, [r7, #8]
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fa6b 	bl	800470c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69da      	ldr	r2, [r3, #28]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f042 0208 	orr.w	r2, r2, #8
 8004244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0204 	bic.w	r2, r2, #4
 8004254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69d9      	ldr	r1, [r3, #28]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	61da      	str	r2, [r3, #28]
      break;
 8004268:	e064      	b.n	8004334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68b9      	ldr	r1, [r7, #8]
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fadd 	bl	8004830 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69da      	ldr	r2, [r3, #28]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69da      	ldr	r2, [r3, #28]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69d9      	ldr	r1, [r3, #28]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	021a      	lsls	r2, r3, #8
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	61da      	str	r2, [r3, #28]
      break;
 80042aa:	e043      	b.n	8004334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fb50 	bl	8004958 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0208 	orr.w	r2, r2, #8
 80042c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0204 	bic.w	r2, r2, #4
 80042d6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	691a      	ldr	r2, [r3, #16]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80042ea:	e023      	b.n	8004334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68b9      	ldr	r1, [r7, #8]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fb9a 	bl	8004a2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004306:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004316:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	021a      	lsls	r2, r3, #8
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800432c:	e002      	b.n	8004334 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	75fb      	strb	r3, [r7, #23]
      break;
 8004332:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800433c:	7dfb      	ldrb	r3, [r7, #23]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop

08004348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a4c      	ldr	r2, [pc, #304]	; (800448c <TIM_Base_SetConfig+0x144>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d017      	beq.n	8004390 <TIM_Base_SetConfig+0x48>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004366:	d013      	beq.n	8004390 <TIM_Base_SetConfig+0x48>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a49      	ldr	r2, [pc, #292]	; (8004490 <TIM_Base_SetConfig+0x148>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00f      	beq.n	8004390 <TIM_Base_SetConfig+0x48>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a48      	ldr	r2, [pc, #288]	; (8004494 <TIM_Base_SetConfig+0x14c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00b      	beq.n	8004390 <TIM_Base_SetConfig+0x48>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a47      	ldr	r2, [pc, #284]	; (8004498 <TIM_Base_SetConfig+0x150>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d007      	beq.n	8004390 <TIM_Base_SetConfig+0x48>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a46      	ldr	r2, [pc, #280]	; (800449c <TIM_Base_SetConfig+0x154>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d003      	beq.n	8004390 <TIM_Base_SetConfig+0x48>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a45      	ldr	r2, [pc, #276]	; (80044a0 <TIM_Base_SetConfig+0x158>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d108      	bne.n	80043a2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004396:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a39      	ldr	r2, [pc, #228]	; (800448c <TIM_Base_SetConfig+0x144>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d023      	beq.n	80043f2 <TIM_Base_SetConfig+0xaa>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b0:	d01f      	beq.n	80043f2 <TIM_Base_SetConfig+0xaa>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a36      	ldr	r2, [pc, #216]	; (8004490 <TIM_Base_SetConfig+0x148>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d01b      	beq.n	80043f2 <TIM_Base_SetConfig+0xaa>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a35      	ldr	r2, [pc, #212]	; (8004494 <TIM_Base_SetConfig+0x14c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d017      	beq.n	80043f2 <TIM_Base_SetConfig+0xaa>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a34      	ldr	r2, [pc, #208]	; (8004498 <TIM_Base_SetConfig+0x150>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <TIM_Base_SetConfig+0xaa>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a33      	ldr	r2, [pc, #204]	; (800449c <TIM_Base_SetConfig+0x154>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00f      	beq.n	80043f2 <TIM_Base_SetConfig+0xaa>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a33      	ldr	r2, [pc, #204]	; (80044a4 <TIM_Base_SetConfig+0x15c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00b      	beq.n	80043f2 <TIM_Base_SetConfig+0xaa>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a32      	ldr	r2, [pc, #200]	; (80044a8 <TIM_Base_SetConfig+0x160>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d007      	beq.n	80043f2 <TIM_Base_SetConfig+0xaa>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a31      	ldr	r2, [pc, #196]	; (80044ac <TIM_Base_SetConfig+0x164>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d003      	beq.n	80043f2 <TIM_Base_SetConfig+0xaa>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a2c      	ldr	r2, [pc, #176]	; (80044a0 <TIM_Base_SetConfig+0x158>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d108      	bne.n	8004404 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a18      	ldr	r2, [pc, #96]	; (800448c <TIM_Base_SetConfig+0x144>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d013      	beq.n	8004458 <TIM_Base_SetConfig+0x110>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a1a      	ldr	r2, [pc, #104]	; (800449c <TIM_Base_SetConfig+0x154>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d00f      	beq.n	8004458 <TIM_Base_SetConfig+0x110>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a1a      	ldr	r2, [pc, #104]	; (80044a4 <TIM_Base_SetConfig+0x15c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00b      	beq.n	8004458 <TIM_Base_SetConfig+0x110>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a19      	ldr	r2, [pc, #100]	; (80044a8 <TIM_Base_SetConfig+0x160>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d007      	beq.n	8004458 <TIM_Base_SetConfig+0x110>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a18      	ldr	r2, [pc, #96]	; (80044ac <TIM_Base_SetConfig+0x164>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d003      	beq.n	8004458 <TIM_Base_SetConfig+0x110>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a13      	ldr	r2, [pc, #76]	; (80044a0 <TIM_Base_SetConfig+0x158>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d103      	bne.n	8004460 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b01      	cmp	r3, #1
 8004470:	d105      	bne.n	800447e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f023 0201 	bic.w	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	611a      	str	r2, [r3, #16]
  }
}
 800447e:	bf00      	nop
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40012c00 	.word	0x40012c00
 8004490:	40000400 	.word	0x40000400
 8004494:	40000800 	.word	0x40000800
 8004498:	40000c00 	.word	0x40000c00
 800449c:	40013400 	.word	0x40013400
 80044a0:	40015000 	.word	0x40015000
 80044a4:	40014000 	.word	0x40014000
 80044a8:	40014400 	.word	0x40014400
 80044ac:	40014800 	.word	0x40014800

080044b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	f023 0201 	bic.w	r2, r3, #1
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0303 	bic.w	r3, r3, #3
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f023 0302 	bic.w	r3, r3, #2
 80044fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a30      	ldr	r2, [pc, #192]	; (80045cc <TIM_OC1_SetConfig+0x11c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d013      	beq.n	8004538 <TIM_OC1_SetConfig+0x88>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a2f      	ldr	r2, [pc, #188]	; (80045d0 <TIM_OC1_SetConfig+0x120>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d00f      	beq.n	8004538 <TIM_OC1_SetConfig+0x88>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a2e      	ldr	r2, [pc, #184]	; (80045d4 <TIM_OC1_SetConfig+0x124>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00b      	beq.n	8004538 <TIM_OC1_SetConfig+0x88>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a2d      	ldr	r2, [pc, #180]	; (80045d8 <TIM_OC1_SetConfig+0x128>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d007      	beq.n	8004538 <TIM_OC1_SetConfig+0x88>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a2c      	ldr	r2, [pc, #176]	; (80045dc <TIM_OC1_SetConfig+0x12c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d003      	beq.n	8004538 <TIM_OC1_SetConfig+0x88>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a2b      	ldr	r2, [pc, #172]	; (80045e0 <TIM_OC1_SetConfig+0x130>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d10c      	bne.n	8004552 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f023 0308 	bic.w	r3, r3, #8
 800453e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	4313      	orrs	r3, r2
 8004548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f023 0304 	bic.w	r3, r3, #4
 8004550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a1d      	ldr	r2, [pc, #116]	; (80045cc <TIM_OC1_SetConfig+0x11c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d013      	beq.n	8004582 <TIM_OC1_SetConfig+0xd2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a1c      	ldr	r2, [pc, #112]	; (80045d0 <TIM_OC1_SetConfig+0x120>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00f      	beq.n	8004582 <TIM_OC1_SetConfig+0xd2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a1b      	ldr	r2, [pc, #108]	; (80045d4 <TIM_OC1_SetConfig+0x124>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00b      	beq.n	8004582 <TIM_OC1_SetConfig+0xd2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a1a      	ldr	r2, [pc, #104]	; (80045d8 <TIM_OC1_SetConfig+0x128>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d007      	beq.n	8004582 <TIM_OC1_SetConfig+0xd2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a19      	ldr	r2, [pc, #100]	; (80045dc <TIM_OC1_SetConfig+0x12c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d003      	beq.n	8004582 <TIM_OC1_SetConfig+0xd2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a18      	ldr	r2, [pc, #96]	; (80045e0 <TIM_OC1_SetConfig+0x130>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d111      	bne.n	80045a6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	621a      	str	r2, [r3, #32]
}
 80045c0:	bf00      	nop
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	40012c00 	.word	0x40012c00
 80045d0:	40013400 	.word	0x40013400
 80045d4:	40014000 	.word	0x40014000
 80045d8:	40014400 	.word	0x40014400
 80045dc:	40014800 	.word	0x40014800
 80045e0:	40015000 	.word	0x40015000

080045e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	f023 0210 	bic.w	r2, r3, #16
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	021b      	lsls	r3, r3, #8
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f023 0320 	bic.w	r3, r3, #32
 8004632:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a2c      	ldr	r2, [pc, #176]	; (80046f4 <TIM_OC2_SetConfig+0x110>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d007      	beq.n	8004658 <TIM_OC2_SetConfig+0x74>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a2b      	ldr	r2, [pc, #172]	; (80046f8 <TIM_OC2_SetConfig+0x114>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d003      	beq.n	8004658 <TIM_OC2_SetConfig+0x74>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a2a      	ldr	r2, [pc, #168]	; (80046fc <TIM_OC2_SetConfig+0x118>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d10d      	bne.n	8004674 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800465e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004672:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <TIM_OC2_SetConfig+0x110>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d013      	beq.n	80046a4 <TIM_OC2_SetConfig+0xc0>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a1e      	ldr	r2, [pc, #120]	; (80046f8 <TIM_OC2_SetConfig+0x114>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00f      	beq.n	80046a4 <TIM_OC2_SetConfig+0xc0>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a1e      	ldr	r2, [pc, #120]	; (8004700 <TIM_OC2_SetConfig+0x11c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00b      	beq.n	80046a4 <TIM_OC2_SetConfig+0xc0>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a1d      	ldr	r2, [pc, #116]	; (8004704 <TIM_OC2_SetConfig+0x120>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d007      	beq.n	80046a4 <TIM_OC2_SetConfig+0xc0>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a1c      	ldr	r2, [pc, #112]	; (8004708 <TIM_OC2_SetConfig+0x124>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d003      	beq.n	80046a4 <TIM_OC2_SetConfig+0xc0>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a17      	ldr	r2, [pc, #92]	; (80046fc <TIM_OC2_SetConfig+0x118>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d113      	bne.n	80046cc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	621a      	str	r2, [r3, #32]
}
 80046e6:	bf00      	nop
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40012c00 	.word	0x40012c00
 80046f8:	40013400 	.word	0x40013400
 80046fc:	40015000 	.word	0x40015000
 8004700:	40014000 	.word	0x40014000
 8004704:	40014400 	.word	0x40014400
 8004708:	40014800 	.word	0x40014800

0800470c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800473a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0303 	bic.w	r3, r3, #3
 8004746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a2b      	ldr	r2, [pc, #172]	; (8004818 <TIM_OC3_SetConfig+0x10c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d007      	beq.n	800477e <TIM_OC3_SetConfig+0x72>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a2a      	ldr	r2, [pc, #168]	; (800481c <TIM_OC3_SetConfig+0x110>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d003      	beq.n	800477e <TIM_OC3_SetConfig+0x72>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a29      	ldr	r2, [pc, #164]	; (8004820 <TIM_OC3_SetConfig+0x114>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d10d      	bne.n	800479a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	021b      	lsls	r3, r3, #8
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a1e      	ldr	r2, [pc, #120]	; (8004818 <TIM_OC3_SetConfig+0x10c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d013      	beq.n	80047ca <TIM_OC3_SetConfig+0xbe>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a1d      	ldr	r2, [pc, #116]	; (800481c <TIM_OC3_SetConfig+0x110>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00f      	beq.n	80047ca <TIM_OC3_SetConfig+0xbe>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <TIM_OC3_SetConfig+0x118>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00b      	beq.n	80047ca <TIM_OC3_SetConfig+0xbe>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a1c      	ldr	r2, [pc, #112]	; (8004828 <TIM_OC3_SetConfig+0x11c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d007      	beq.n	80047ca <TIM_OC3_SetConfig+0xbe>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a1b      	ldr	r2, [pc, #108]	; (800482c <TIM_OC3_SetConfig+0x120>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d003      	beq.n	80047ca <TIM_OC3_SetConfig+0xbe>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a16      	ldr	r2, [pc, #88]	; (8004820 <TIM_OC3_SetConfig+0x114>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d113      	bne.n	80047f2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	621a      	str	r2, [r3, #32]
}
 800480c:	bf00      	nop
 800480e:	371c      	adds	r7, #28
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	40012c00 	.word	0x40012c00
 800481c:	40013400 	.word	0x40013400
 8004820:	40015000 	.word	0x40015000
 8004824:	40014000 	.word	0x40014000
 8004828:	40014400 	.word	0x40014400
 800482c:	40014800 	.word	0x40014800

08004830 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800485e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800487e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	031b      	lsls	r3, r3, #12
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a2c      	ldr	r2, [pc, #176]	; (8004940 <TIM_OC4_SetConfig+0x110>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d007      	beq.n	80048a4 <TIM_OC4_SetConfig+0x74>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a2b      	ldr	r2, [pc, #172]	; (8004944 <TIM_OC4_SetConfig+0x114>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d003      	beq.n	80048a4 <TIM_OC4_SetConfig+0x74>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a2a      	ldr	r2, [pc, #168]	; (8004948 <TIM_OC4_SetConfig+0x118>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d10d      	bne.n	80048c0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	031b      	lsls	r3, r3, #12
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a1f      	ldr	r2, [pc, #124]	; (8004940 <TIM_OC4_SetConfig+0x110>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d013      	beq.n	80048f0 <TIM_OC4_SetConfig+0xc0>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a1e      	ldr	r2, [pc, #120]	; (8004944 <TIM_OC4_SetConfig+0x114>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d00f      	beq.n	80048f0 <TIM_OC4_SetConfig+0xc0>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a1e      	ldr	r2, [pc, #120]	; (800494c <TIM_OC4_SetConfig+0x11c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00b      	beq.n	80048f0 <TIM_OC4_SetConfig+0xc0>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a1d      	ldr	r2, [pc, #116]	; (8004950 <TIM_OC4_SetConfig+0x120>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d007      	beq.n	80048f0 <TIM_OC4_SetConfig+0xc0>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a1c      	ldr	r2, [pc, #112]	; (8004954 <TIM_OC4_SetConfig+0x124>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <TIM_OC4_SetConfig+0xc0>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a17      	ldr	r2, [pc, #92]	; (8004948 <TIM_OC4_SetConfig+0x118>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d113      	bne.n	8004918 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048f6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048fe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	019b      	lsls	r3, r3, #6
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	019b      	lsls	r3, r3, #6
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	40012c00 	.word	0x40012c00
 8004944:	40013400 	.word	0x40013400
 8004948:	40015000 	.word	0x40015000
 800494c:	40014000 	.word	0x40014000
 8004950:	40014400 	.word	0x40014400
 8004954:	40014800 	.word	0x40014800

08004958 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800497e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800499c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	041b      	lsls	r3, r3, #16
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a19      	ldr	r2, [pc, #100]	; (8004a14 <TIM_OC5_SetConfig+0xbc>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <TIM_OC5_SetConfig+0x82>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a18      	ldr	r2, [pc, #96]	; (8004a18 <TIM_OC5_SetConfig+0xc0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00f      	beq.n	80049da <TIM_OC5_SetConfig+0x82>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a17      	ldr	r2, [pc, #92]	; (8004a1c <TIM_OC5_SetConfig+0xc4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00b      	beq.n	80049da <TIM_OC5_SetConfig+0x82>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a16      	ldr	r2, [pc, #88]	; (8004a20 <TIM_OC5_SetConfig+0xc8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d007      	beq.n	80049da <TIM_OC5_SetConfig+0x82>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a15      	ldr	r2, [pc, #84]	; (8004a24 <TIM_OC5_SetConfig+0xcc>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d003      	beq.n	80049da <TIM_OC5_SetConfig+0x82>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a14      	ldr	r2, [pc, #80]	; (8004a28 <TIM_OC5_SetConfig+0xd0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d109      	bne.n	80049ee <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	621a      	str	r2, [r3, #32]
}
 8004a08:	bf00      	nop
 8004a0a:	371c      	adds	r7, #28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	40012c00 	.word	0x40012c00
 8004a18:	40013400 	.word	0x40013400
 8004a1c:	40014000 	.word	0x40014000
 8004a20:	40014400 	.word	0x40014400
 8004a24:	40014800 	.word	0x40014800
 8004a28:	40015000 	.word	0x40015000

08004a2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	021b      	lsls	r3, r3, #8
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	051b      	lsls	r3, r3, #20
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a1a      	ldr	r2, [pc, #104]	; (8004aec <TIM_OC6_SetConfig+0xc0>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d013      	beq.n	8004ab0 <TIM_OC6_SetConfig+0x84>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a19      	ldr	r2, [pc, #100]	; (8004af0 <TIM_OC6_SetConfig+0xc4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00f      	beq.n	8004ab0 <TIM_OC6_SetConfig+0x84>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <TIM_OC6_SetConfig+0xc8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00b      	beq.n	8004ab0 <TIM_OC6_SetConfig+0x84>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a17      	ldr	r2, [pc, #92]	; (8004af8 <TIM_OC6_SetConfig+0xcc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d007      	beq.n	8004ab0 <TIM_OC6_SetConfig+0x84>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a16      	ldr	r2, [pc, #88]	; (8004afc <TIM_OC6_SetConfig+0xd0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d003      	beq.n	8004ab0 <TIM_OC6_SetConfig+0x84>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a15      	ldr	r2, [pc, #84]	; (8004b00 <TIM_OC6_SetConfig+0xd4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d109      	bne.n	8004ac4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	029b      	lsls	r3, r3, #10
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	621a      	str	r2, [r3, #32]
}
 8004ade:	bf00      	nop
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40012c00 	.word	0x40012c00
 8004af0:	40013400 	.word	0x40013400
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40014400 	.word	0x40014400
 8004afc:	40014800 	.word	0x40014800
 8004b00:	40015000 	.word	0x40015000

08004b04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	2201      	movs	r2, #1
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a1a      	ldr	r2, [r3, #32]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	401a      	ands	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a1a      	ldr	r2, [r3, #32]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f003 031f 	and.w	r3, r3, #31
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e074      	b.n	8004c52 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a34      	ldr	r2, [pc, #208]	; (8004c60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d009      	beq.n	8004ba6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a33      	ldr	r2, [pc, #204]	; (8004c64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d004      	beq.n	8004ba6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a31      	ldr	r2, [pc, #196]	; (8004c68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d108      	bne.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004bac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a21      	ldr	r2, [pc, #132]	; (8004c60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d022      	beq.n	8004c26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be8:	d01d      	beq.n	8004c26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a1f      	ldr	r2, [pc, #124]	; (8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d018      	beq.n	8004c26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1d      	ldr	r2, [pc, #116]	; (8004c70 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d013      	beq.n	8004c26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1c      	ldr	r2, [pc, #112]	; (8004c74 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00e      	beq.n	8004c26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a15      	ldr	r2, [pc, #84]	; (8004c64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d009      	beq.n	8004c26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a18      	ldr	r2, [pc, #96]	; (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d004      	beq.n	8004c26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a11      	ldr	r2, [pc, #68]	; (8004c68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d10c      	bne.n	8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40012c00 	.word	0x40012c00
 8004c64:	40013400 	.word	0x40013400
 8004c68:	40015000 	.word	0x40015000
 8004c6c:	40000400 	.word	0x40000400
 8004c70:	40000800 	.word	0x40000800
 8004c74:	40000c00 	.word	0x40000c00
 8004c78:	40014000 	.word	0x40014000

08004c7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e042      	b.n	8004d14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d106      	bne.n	8004ca6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7fc fd63 	bl	800176c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2224      	movs	r2, #36	; 0x24
 8004caa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0201 	bic.w	r2, r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fb24 	bl	8005314 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f825 	bl	8004d1c <UART_SetConfig>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e01b      	b.n	8004d14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0201 	orr.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fba3 	bl	8005458 <UART_CheckIdleState>
 8004d12:	4603      	mov	r3, r0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d20:	b08c      	sub	sp, #48	; 0x30
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	431a      	orrs	r2, r3
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4baa      	ldr	r3, [pc, #680]	; (8004ff4 <UART_SetConfig+0x2d8>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	6812      	ldr	r2, [r2, #0]
 8004d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d54:	430b      	orrs	r3, r1
 8004d56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a9f      	ldr	r2, [pc, #636]	; (8004ff8 <UART_SetConfig+0x2dc>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d004      	beq.n	8004d88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d84:	4313      	orrs	r3, r2
 8004d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004d92:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	6812      	ldr	r2, [r2, #0]
 8004d9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	f023 010f 	bic.w	r1, r3, #15
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a90      	ldr	r2, [pc, #576]	; (8004ffc <UART_SetConfig+0x2e0>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d125      	bne.n	8004e0c <UART_SetConfig+0xf0>
 8004dc0:	4b8f      	ldr	r3, [pc, #572]	; (8005000 <UART_SetConfig+0x2e4>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d81a      	bhi.n	8004e04 <UART_SetConfig+0xe8>
 8004dce:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <UART_SetConfig+0xb8>)
 8004dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd4:	08004de5 	.word	0x08004de5
 8004dd8:	08004df5 	.word	0x08004df5
 8004ddc:	08004ded 	.word	0x08004ded
 8004de0:	08004dfd 	.word	0x08004dfd
 8004de4:	2301      	movs	r3, #1
 8004de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dea:	e116      	b.n	800501a <UART_SetConfig+0x2fe>
 8004dec:	2302      	movs	r3, #2
 8004dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004df2:	e112      	b.n	800501a <UART_SetConfig+0x2fe>
 8004df4:	2304      	movs	r3, #4
 8004df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dfa:	e10e      	b.n	800501a <UART_SetConfig+0x2fe>
 8004dfc:	2308      	movs	r3, #8
 8004dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e02:	e10a      	b.n	800501a <UART_SetConfig+0x2fe>
 8004e04:	2310      	movs	r3, #16
 8004e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e0a:	e106      	b.n	800501a <UART_SetConfig+0x2fe>
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a7c      	ldr	r2, [pc, #496]	; (8005004 <UART_SetConfig+0x2e8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d138      	bne.n	8004e88 <UART_SetConfig+0x16c>
 8004e16:	4b7a      	ldr	r3, [pc, #488]	; (8005000 <UART_SetConfig+0x2e4>)
 8004e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1c:	f003 030c 	and.w	r3, r3, #12
 8004e20:	2b0c      	cmp	r3, #12
 8004e22:	d82d      	bhi.n	8004e80 <UART_SetConfig+0x164>
 8004e24:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <UART_SetConfig+0x110>)
 8004e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2a:	bf00      	nop
 8004e2c:	08004e61 	.word	0x08004e61
 8004e30:	08004e81 	.word	0x08004e81
 8004e34:	08004e81 	.word	0x08004e81
 8004e38:	08004e81 	.word	0x08004e81
 8004e3c:	08004e71 	.word	0x08004e71
 8004e40:	08004e81 	.word	0x08004e81
 8004e44:	08004e81 	.word	0x08004e81
 8004e48:	08004e81 	.word	0x08004e81
 8004e4c:	08004e69 	.word	0x08004e69
 8004e50:	08004e81 	.word	0x08004e81
 8004e54:	08004e81 	.word	0x08004e81
 8004e58:	08004e81 	.word	0x08004e81
 8004e5c:	08004e79 	.word	0x08004e79
 8004e60:	2300      	movs	r3, #0
 8004e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e66:	e0d8      	b.n	800501a <UART_SetConfig+0x2fe>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e6e:	e0d4      	b.n	800501a <UART_SetConfig+0x2fe>
 8004e70:	2304      	movs	r3, #4
 8004e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e76:	e0d0      	b.n	800501a <UART_SetConfig+0x2fe>
 8004e78:	2308      	movs	r3, #8
 8004e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e7e:	e0cc      	b.n	800501a <UART_SetConfig+0x2fe>
 8004e80:	2310      	movs	r3, #16
 8004e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e86:	e0c8      	b.n	800501a <UART_SetConfig+0x2fe>
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a5e      	ldr	r2, [pc, #376]	; (8005008 <UART_SetConfig+0x2ec>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d125      	bne.n	8004ede <UART_SetConfig+0x1c2>
 8004e92:	4b5b      	ldr	r3, [pc, #364]	; (8005000 <UART_SetConfig+0x2e4>)
 8004e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e9c:	2b30      	cmp	r3, #48	; 0x30
 8004e9e:	d016      	beq.n	8004ece <UART_SetConfig+0x1b2>
 8004ea0:	2b30      	cmp	r3, #48	; 0x30
 8004ea2:	d818      	bhi.n	8004ed6 <UART_SetConfig+0x1ba>
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	d00a      	beq.n	8004ebe <UART_SetConfig+0x1a2>
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	d814      	bhi.n	8004ed6 <UART_SetConfig+0x1ba>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <UART_SetConfig+0x19a>
 8004eb0:	2b10      	cmp	r3, #16
 8004eb2:	d008      	beq.n	8004ec6 <UART_SetConfig+0x1aa>
 8004eb4:	e00f      	b.n	8004ed6 <UART_SetConfig+0x1ba>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ebc:	e0ad      	b.n	800501a <UART_SetConfig+0x2fe>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ec4:	e0a9      	b.n	800501a <UART_SetConfig+0x2fe>
 8004ec6:	2304      	movs	r3, #4
 8004ec8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ecc:	e0a5      	b.n	800501a <UART_SetConfig+0x2fe>
 8004ece:	2308      	movs	r3, #8
 8004ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ed4:	e0a1      	b.n	800501a <UART_SetConfig+0x2fe>
 8004ed6:	2310      	movs	r3, #16
 8004ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004edc:	e09d      	b.n	800501a <UART_SetConfig+0x2fe>
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a4a      	ldr	r2, [pc, #296]	; (800500c <UART_SetConfig+0x2f0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d125      	bne.n	8004f34 <UART_SetConfig+0x218>
 8004ee8:	4b45      	ldr	r3, [pc, #276]	; (8005000 <UART_SetConfig+0x2e4>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ef2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ef4:	d016      	beq.n	8004f24 <UART_SetConfig+0x208>
 8004ef6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ef8:	d818      	bhi.n	8004f2c <UART_SetConfig+0x210>
 8004efa:	2b80      	cmp	r3, #128	; 0x80
 8004efc:	d00a      	beq.n	8004f14 <UART_SetConfig+0x1f8>
 8004efe:	2b80      	cmp	r3, #128	; 0x80
 8004f00:	d814      	bhi.n	8004f2c <UART_SetConfig+0x210>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <UART_SetConfig+0x1f0>
 8004f06:	2b40      	cmp	r3, #64	; 0x40
 8004f08:	d008      	beq.n	8004f1c <UART_SetConfig+0x200>
 8004f0a:	e00f      	b.n	8004f2c <UART_SetConfig+0x210>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f12:	e082      	b.n	800501a <UART_SetConfig+0x2fe>
 8004f14:	2302      	movs	r3, #2
 8004f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f1a:	e07e      	b.n	800501a <UART_SetConfig+0x2fe>
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f22:	e07a      	b.n	800501a <UART_SetConfig+0x2fe>
 8004f24:	2308      	movs	r3, #8
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f2a:	e076      	b.n	800501a <UART_SetConfig+0x2fe>
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f32:	e072      	b.n	800501a <UART_SetConfig+0x2fe>
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a35      	ldr	r2, [pc, #212]	; (8005010 <UART_SetConfig+0x2f4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d12a      	bne.n	8004f94 <UART_SetConfig+0x278>
 8004f3e:	4b30      	ldr	r3, [pc, #192]	; (8005000 <UART_SetConfig+0x2e4>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f4c:	d01a      	beq.n	8004f84 <UART_SetConfig+0x268>
 8004f4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f52:	d81b      	bhi.n	8004f8c <UART_SetConfig+0x270>
 8004f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f58:	d00c      	beq.n	8004f74 <UART_SetConfig+0x258>
 8004f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f5e:	d815      	bhi.n	8004f8c <UART_SetConfig+0x270>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <UART_SetConfig+0x250>
 8004f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f68:	d008      	beq.n	8004f7c <UART_SetConfig+0x260>
 8004f6a:	e00f      	b.n	8004f8c <UART_SetConfig+0x270>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f72:	e052      	b.n	800501a <UART_SetConfig+0x2fe>
 8004f74:	2302      	movs	r3, #2
 8004f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f7a:	e04e      	b.n	800501a <UART_SetConfig+0x2fe>
 8004f7c:	2304      	movs	r3, #4
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f82:	e04a      	b.n	800501a <UART_SetConfig+0x2fe>
 8004f84:	2308      	movs	r3, #8
 8004f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f8a:	e046      	b.n	800501a <UART_SetConfig+0x2fe>
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f92:	e042      	b.n	800501a <UART_SetConfig+0x2fe>
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a17      	ldr	r2, [pc, #92]	; (8004ff8 <UART_SetConfig+0x2dc>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d13a      	bne.n	8005014 <UART_SetConfig+0x2f8>
 8004f9e:	4b18      	ldr	r3, [pc, #96]	; (8005000 <UART_SetConfig+0x2e4>)
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fac:	d01a      	beq.n	8004fe4 <UART_SetConfig+0x2c8>
 8004fae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fb2:	d81b      	bhi.n	8004fec <UART_SetConfig+0x2d0>
 8004fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fb8:	d00c      	beq.n	8004fd4 <UART_SetConfig+0x2b8>
 8004fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fbe:	d815      	bhi.n	8004fec <UART_SetConfig+0x2d0>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <UART_SetConfig+0x2b0>
 8004fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc8:	d008      	beq.n	8004fdc <UART_SetConfig+0x2c0>
 8004fca:	e00f      	b.n	8004fec <UART_SetConfig+0x2d0>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fd2:	e022      	b.n	800501a <UART_SetConfig+0x2fe>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fda:	e01e      	b.n	800501a <UART_SetConfig+0x2fe>
 8004fdc:	2304      	movs	r3, #4
 8004fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fe2:	e01a      	b.n	800501a <UART_SetConfig+0x2fe>
 8004fe4:	2308      	movs	r3, #8
 8004fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fea:	e016      	b.n	800501a <UART_SetConfig+0x2fe>
 8004fec:	2310      	movs	r3, #16
 8004fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ff2:	e012      	b.n	800501a <UART_SetConfig+0x2fe>
 8004ff4:	cfff69f3 	.word	0xcfff69f3
 8004ff8:	40008000 	.word	0x40008000
 8004ffc:	40013800 	.word	0x40013800
 8005000:	40021000 	.word	0x40021000
 8005004:	40004400 	.word	0x40004400
 8005008:	40004800 	.word	0x40004800
 800500c:	40004c00 	.word	0x40004c00
 8005010:	40005000 	.word	0x40005000
 8005014:	2310      	movs	r3, #16
 8005016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4aae      	ldr	r2, [pc, #696]	; (80052d8 <UART_SetConfig+0x5bc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	f040 8097 	bne.w	8005154 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005026:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800502a:	2b08      	cmp	r3, #8
 800502c:	d823      	bhi.n	8005076 <UART_SetConfig+0x35a>
 800502e:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <UART_SetConfig+0x318>)
 8005030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005034:	08005059 	.word	0x08005059
 8005038:	08005077 	.word	0x08005077
 800503c:	08005061 	.word	0x08005061
 8005040:	08005077 	.word	0x08005077
 8005044:	08005067 	.word	0x08005067
 8005048:	08005077 	.word	0x08005077
 800504c:	08005077 	.word	0x08005077
 8005050:	08005077 	.word	0x08005077
 8005054:	0800506f 	.word	0x0800506f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005058:	f7fe fbc8 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 800505c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800505e:	e010      	b.n	8005082 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005060:	4b9e      	ldr	r3, [pc, #632]	; (80052dc <UART_SetConfig+0x5c0>)
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005064:	e00d      	b.n	8005082 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005066:	f7fe fb53 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 800506a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800506c:	e009      	b.n	8005082 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800506e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005074:	e005      	b.n	8005082 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005080:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 8130 	beq.w	80052ea <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	4a94      	ldr	r2, [pc, #592]	; (80052e0 <UART_SetConfig+0x5c4>)
 8005090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005094:	461a      	mov	r2, r3
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	fbb3 f3f2 	udiv	r3, r3, r2
 800509c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	4413      	add	r3, r2
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d305      	bcc.n	80050ba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d903      	bls.n	80050c2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80050c0:	e113      	b.n	80052ea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	2200      	movs	r2, #0
 80050c6:	60bb      	str	r3, [r7, #8]
 80050c8:	60fa      	str	r2, [r7, #12]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	4a84      	ldr	r2, [pc, #528]	; (80052e0 <UART_SetConfig+0x5c4>)
 80050d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2200      	movs	r2, #0
 80050d8:	603b      	str	r3, [r7, #0]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050e4:	f7fb fcd6 	bl	8000a94 <__aeabi_uldivmod>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	4610      	mov	r0, r2
 80050ee:	4619      	mov	r1, r3
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	f04f 0300 	mov.w	r3, #0
 80050f8:	020b      	lsls	r3, r1, #8
 80050fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80050fe:	0202      	lsls	r2, r0, #8
 8005100:	6979      	ldr	r1, [r7, #20]
 8005102:	6849      	ldr	r1, [r1, #4]
 8005104:	0849      	lsrs	r1, r1, #1
 8005106:	2000      	movs	r0, #0
 8005108:	460c      	mov	r4, r1
 800510a:	4605      	mov	r5, r0
 800510c:	eb12 0804 	adds.w	r8, r2, r4
 8005110:	eb43 0905 	adc.w	r9, r3, r5
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	469a      	mov	sl, r3
 800511c:	4693      	mov	fp, r2
 800511e:	4652      	mov	r2, sl
 8005120:	465b      	mov	r3, fp
 8005122:	4640      	mov	r0, r8
 8005124:	4649      	mov	r1, r9
 8005126:	f7fb fcb5 	bl	8000a94 <__aeabi_uldivmod>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4613      	mov	r3, r2
 8005130:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005138:	d308      	bcc.n	800514c <UART_SetConfig+0x430>
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005140:	d204      	bcs.n	800514c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6a3a      	ldr	r2, [r7, #32]
 8005148:	60da      	str	r2, [r3, #12]
 800514a:	e0ce      	b.n	80052ea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005152:	e0ca      	b.n	80052ea <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	69db      	ldr	r3, [r3, #28]
 8005158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800515c:	d166      	bne.n	800522c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800515e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005162:	2b08      	cmp	r3, #8
 8005164:	d827      	bhi.n	80051b6 <UART_SetConfig+0x49a>
 8005166:	a201      	add	r2, pc, #4	; (adr r2, 800516c <UART_SetConfig+0x450>)
 8005168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516c:	08005191 	.word	0x08005191
 8005170:	08005199 	.word	0x08005199
 8005174:	080051a1 	.word	0x080051a1
 8005178:	080051b7 	.word	0x080051b7
 800517c:	080051a7 	.word	0x080051a7
 8005180:	080051b7 	.word	0x080051b7
 8005184:	080051b7 	.word	0x080051b7
 8005188:	080051b7 	.word	0x080051b7
 800518c:	080051af 	.word	0x080051af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005190:	f7fe fb2c 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 8005194:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005196:	e014      	b.n	80051c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005198:	f7fe fb3e 	bl	8003818 <HAL_RCC_GetPCLK2Freq>
 800519c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800519e:	e010      	b.n	80051c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051a0:	4b4e      	ldr	r3, [pc, #312]	; (80052dc <UART_SetConfig+0x5c0>)
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051a4:	e00d      	b.n	80051c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051a6:	f7fe fab3 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 80051aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051ac:	e009      	b.n	80051c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051b4:	e005      	b.n	80051c2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80051c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 8090 	beq.w	80052ea <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	4a44      	ldr	r2, [pc, #272]	; (80052e0 <UART_SetConfig+0x5c4>)
 80051d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051d4:	461a      	mov	r2, r3
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80051dc:	005a      	lsls	r2, r3, #1
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	085b      	lsrs	r3, r3, #1
 80051e4:	441a      	add	r2, r3
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	2b0f      	cmp	r3, #15
 80051f4:	d916      	bls.n	8005224 <UART_SetConfig+0x508>
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fc:	d212      	bcs.n	8005224 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	b29b      	uxth	r3, r3
 8005202:	f023 030f 	bic.w	r3, r3, #15
 8005206:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	085b      	lsrs	r3, r3, #1
 800520c:	b29b      	uxth	r3, r3
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	b29a      	uxth	r2, r3
 8005214:	8bfb      	ldrh	r3, [r7, #30]
 8005216:	4313      	orrs	r3, r2
 8005218:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	8bfa      	ldrh	r2, [r7, #30]
 8005220:	60da      	str	r2, [r3, #12]
 8005222:	e062      	b.n	80052ea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800522a:	e05e      	b.n	80052ea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800522c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005230:	2b08      	cmp	r3, #8
 8005232:	d828      	bhi.n	8005286 <UART_SetConfig+0x56a>
 8005234:	a201      	add	r2, pc, #4	; (adr r2, 800523c <UART_SetConfig+0x520>)
 8005236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523a:	bf00      	nop
 800523c:	08005261 	.word	0x08005261
 8005240:	08005269 	.word	0x08005269
 8005244:	08005271 	.word	0x08005271
 8005248:	08005287 	.word	0x08005287
 800524c:	08005277 	.word	0x08005277
 8005250:	08005287 	.word	0x08005287
 8005254:	08005287 	.word	0x08005287
 8005258:	08005287 	.word	0x08005287
 800525c:	0800527f 	.word	0x0800527f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005260:	f7fe fac4 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 8005264:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005266:	e014      	b.n	8005292 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005268:	f7fe fad6 	bl	8003818 <HAL_RCC_GetPCLK2Freq>
 800526c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800526e:	e010      	b.n	8005292 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005270:	4b1a      	ldr	r3, [pc, #104]	; (80052dc <UART_SetConfig+0x5c0>)
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005274:	e00d      	b.n	8005292 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005276:	f7fe fa4b 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 800527a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800527c:	e009      	b.n	8005292 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800527e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005284:	e005      	b.n	8005292 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005290:	bf00      	nop
    }

    if (pclk != 0U)
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	2b00      	cmp	r3, #0
 8005296:	d028      	beq.n	80052ea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	4a10      	ldr	r2, [pc, #64]	; (80052e0 <UART_SetConfig+0x5c4>)
 800529e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052a2:	461a      	mov	r2, r3
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	085b      	lsrs	r3, r3, #1
 80052b0:	441a      	add	r2, r3
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	2b0f      	cmp	r3, #15
 80052c0:	d910      	bls.n	80052e4 <UART_SetConfig+0x5c8>
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c8:	d20c      	bcs.n	80052e4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60da      	str	r2, [r3, #12]
 80052d4:	e009      	b.n	80052ea <UART_SetConfig+0x5ce>
 80052d6:	bf00      	nop
 80052d8:	40008000 	.word	0x40008000
 80052dc:	00f42400 	.word	0x00f42400
 80052e0:	08005a44 	.word	0x08005a44
      }
      else
      {
        ret = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2200      	movs	r2, #0
 80052fe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2200      	movs	r2, #0
 8005304:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005306:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800530a:	4618      	mov	r0, r3
 800530c:	3730      	adds	r7, #48	; 0x30
 800530e:	46bd      	mov	sp, r7
 8005310:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005314 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a8:	f003 0310 	and.w	r3, r3, #16
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00a      	beq.n	80053c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01a      	beq.n	800542a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005412:	d10a      	bne.n	800542a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	605a      	str	r2, [r3, #4]
  }
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b098      	sub	sp, #96	; 0x60
 800545c:	af02      	add	r7, sp, #8
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005468:	f7fc fb3a 	bl	8001ae0 <HAL_GetTick>
 800546c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b08      	cmp	r3, #8
 800547a:	d12f      	bne.n	80054dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800547c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005484:	2200      	movs	r2, #0
 8005486:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f88e 	bl	80055ac <UART_WaitOnFlagUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d022      	beq.n	80054dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054aa:	653b      	str	r3, [r7, #80]	; 0x50
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	461a      	mov	r2, r3
 80054b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b4:	647b      	str	r3, [r7, #68]	; 0x44
 80054b6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e6      	bne.n	8005496 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e063      	b.n	80055a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d149      	bne.n	800557e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054f2:	2200      	movs	r2, #0
 80054f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f857 	bl	80055ac <UART_WaitOnFlagUntilTimeout>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d03c      	beq.n	800557e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	e853 3f00 	ldrex	r3, [r3]
 8005510:	623b      	str	r3, [r7, #32]
   return(result);
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005518:	64fb      	str	r3, [r7, #76]	; 0x4c
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005522:	633b      	str	r3, [r7, #48]	; 0x30
 8005524:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005526:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e6      	bne.n	8005504 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3308      	adds	r3, #8
 800553c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	60fb      	str	r3, [r7, #12]
   return(result);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f023 0301 	bic.w	r3, r3, #1
 800554c:	64bb      	str	r3, [r7, #72]	; 0x48
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3308      	adds	r3, #8
 8005554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005556:	61fa      	str	r2, [r7, #28]
 8005558:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	69b9      	ldr	r1, [r7, #24]
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	617b      	str	r3, [r7, #20]
   return(result);
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1e5      	bne.n	8005536 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2220      	movs	r2, #32
 800556e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e012      	b.n	80055a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2220      	movs	r2, #32
 8005582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2220      	movs	r2, #32
 800558a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3758      	adds	r7, #88	; 0x58
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	4613      	mov	r3, r2
 80055ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055bc:	e04f      	b.n	800565e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c4:	d04b      	beq.n	800565e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c6:	f7fc fa8b 	bl	8001ae0 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d302      	bcc.n	80055dc <UART_WaitOnFlagUntilTimeout+0x30>
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e04e      	b.n	800567e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0304 	and.w	r3, r3, #4
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d037      	beq.n	800565e <UART_WaitOnFlagUntilTimeout+0xb2>
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2b80      	cmp	r3, #128	; 0x80
 80055f2:	d034      	beq.n	800565e <UART_WaitOnFlagUntilTimeout+0xb2>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b40      	cmp	r3, #64	; 0x40
 80055f8:	d031      	beq.n	800565e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	f003 0308 	and.w	r3, r3, #8
 8005604:	2b08      	cmp	r3, #8
 8005606:	d110      	bne.n	800562a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2208      	movs	r2, #8
 800560e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f838 	bl	8005686 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2208      	movs	r2, #8
 800561a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e029      	b.n	800567e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005638:	d111      	bne.n	800565e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f81e 	bl	8005686 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2220      	movs	r2, #32
 800564e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e00f      	b.n	800567e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69da      	ldr	r2, [r3, #28]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4013      	ands	r3, r2
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	429a      	cmp	r2, r3
 800566c:	bf0c      	ite	eq
 800566e:	2301      	moveq	r3, #1
 8005670:	2300      	movne	r3, #0
 8005672:	b2db      	uxtb	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	429a      	cmp	r2, r3
 800567a:	d0a0      	beq.n	80055be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005686:	b480      	push	{r7}
 8005688:	b095      	sub	sp, #84	; 0x54
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005696:	e853 3f00 	ldrex	r3, [r3]
 800569a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	461a      	mov	r2, r3
 80056aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ac:	643b      	str	r3, [r7, #64]	; 0x40
 80056ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056b4:	e841 2300 	strex	r3, r2, [r1]
 80056b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e6      	bne.n	800568e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3308      	adds	r3, #8
 80056c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	e853 3f00 	ldrex	r3, [r3]
 80056ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d6:	f023 0301 	bic.w	r3, r3, #1
 80056da:	64bb      	str	r3, [r7, #72]	; 0x48
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3308      	adds	r3, #8
 80056e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e3      	bne.n	80056c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d118      	bne.n	8005732 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	e853 3f00 	ldrex	r3, [r3]
 800570c:	60bb      	str	r3, [r7, #8]
   return(result);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f023 0310 	bic.w	r3, r3, #16
 8005714:	647b      	str	r3, [r7, #68]	; 0x44
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800571e:	61bb      	str	r3, [r7, #24]
 8005720:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005722:	6979      	ldr	r1, [r7, #20]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	613b      	str	r3, [r7, #16]
   return(result);
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1e6      	bne.n	8005700 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005746:	bf00      	nop
 8005748:	3754      	adds	r7, #84	; 0x54
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005752:	b480      	push	{r7}
 8005754:	b085      	sub	sp, #20
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005760:	2b01      	cmp	r3, #1
 8005762:	d101      	bne.n	8005768 <HAL_UARTEx_DisableFifoMode+0x16>
 8005764:	2302      	movs	r3, #2
 8005766:	e027      	b.n	80057b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2224      	movs	r2, #36	; 0x24
 8005774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0201 	bic.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005796:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057d8:	2302      	movs	r3, #2
 80057da:	e02d      	b.n	8005838 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2224      	movs	r2, #36	; 0x24
 80057e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0201 	bic.w	r2, r2, #1
 8005802:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f84f 	bl	80058bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2220      	movs	r2, #32
 800582a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005854:	2302      	movs	r3, #2
 8005856:	e02d      	b.n	80058b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2224      	movs	r2, #36	; 0x24
 8005864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0201 	bic.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f811 	bl	80058bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d108      	bne.n	80058de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058dc:	e031      	b.n	8005942 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058de:	2308      	movs	r3, #8
 80058e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058e2:	2308      	movs	r3, #8
 80058e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	0e5b      	lsrs	r3, r3, #25
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	0f5b      	lsrs	r3, r3, #29
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005906:	7bbb      	ldrb	r3, [r7, #14]
 8005908:	7b3a      	ldrb	r2, [r7, #12]
 800590a:	4911      	ldr	r1, [pc, #68]	; (8005950 <UARTEx_SetNbDataToProcess+0x94>)
 800590c:	5c8a      	ldrb	r2, [r1, r2]
 800590e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005912:	7b3a      	ldrb	r2, [r7, #12]
 8005914:	490f      	ldr	r1, [pc, #60]	; (8005954 <UARTEx_SetNbDataToProcess+0x98>)
 8005916:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005918:	fb93 f3f2 	sdiv	r3, r3, r2
 800591c:	b29a      	uxth	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	7b7a      	ldrb	r2, [r7, #13]
 8005928:	4909      	ldr	r1, [pc, #36]	; (8005950 <UARTEx_SetNbDataToProcess+0x94>)
 800592a:	5c8a      	ldrb	r2, [r1, r2]
 800592c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005930:	7b7a      	ldrb	r2, [r7, #13]
 8005932:	4908      	ldr	r1, [pc, #32]	; (8005954 <UARTEx_SetNbDataToProcess+0x98>)
 8005934:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005936:	fb93 f3f2 	sdiv	r3, r3, r2
 800593a:	b29a      	uxth	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005942:	bf00      	nop
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	08005a5c 	.word	0x08005a5c
 8005954:	08005a64 	.word	0x08005a64

08005958 <__libc_init_array>:
 8005958:	b570      	push	{r4, r5, r6, lr}
 800595a:	4d0d      	ldr	r5, [pc, #52]	; (8005990 <__libc_init_array+0x38>)
 800595c:	4c0d      	ldr	r4, [pc, #52]	; (8005994 <__libc_init_array+0x3c>)
 800595e:	1b64      	subs	r4, r4, r5
 8005960:	10a4      	asrs	r4, r4, #2
 8005962:	2600      	movs	r6, #0
 8005964:	42a6      	cmp	r6, r4
 8005966:	d109      	bne.n	800597c <__libc_init_array+0x24>
 8005968:	4d0b      	ldr	r5, [pc, #44]	; (8005998 <__libc_init_array+0x40>)
 800596a:	4c0c      	ldr	r4, [pc, #48]	; (800599c <__libc_init_array+0x44>)
 800596c:	f000 f852 	bl	8005a14 <_init>
 8005970:	1b64      	subs	r4, r4, r5
 8005972:	10a4      	asrs	r4, r4, #2
 8005974:	2600      	movs	r6, #0
 8005976:	42a6      	cmp	r6, r4
 8005978:	d105      	bne.n	8005986 <__libc_init_array+0x2e>
 800597a:	bd70      	pop	{r4, r5, r6, pc}
 800597c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005980:	4798      	blx	r3
 8005982:	3601      	adds	r6, #1
 8005984:	e7ee      	b.n	8005964 <__libc_init_array+0xc>
 8005986:	f855 3b04 	ldr.w	r3, [r5], #4
 800598a:	4798      	blx	r3
 800598c:	3601      	adds	r6, #1
 800598e:	e7f2      	b.n	8005976 <__libc_init_array+0x1e>
 8005990:	08005a74 	.word	0x08005a74
 8005994:	08005a74 	.word	0x08005a74
 8005998:	08005a74 	.word	0x08005a74
 800599c:	08005a78 	.word	0x08005a78

080059a0 <memset>:
 80059a0:	4402      	add	r2, r0
 80059a2:	4603      	mov	r3, r0
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d100      	bne.n	80059aa <memset+0xa>
 80059a8:	4770      	bx	lr
 80059aa:	f803 1b01 	strb.w	r1, [r3], #1
 80059ae:	e7f9      	b.n	80059a4 <memset+0x4>

080059b0 <trunc>:
 80059b0:	ec51 0b10 	vmov	r0, r1, d0
 80059b4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80059b8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80059bc:	2b13      	cmp	r3, #19
 80059be:	b5d0      	push	{r4, r6, r7, lr}
 80059c0:	460c      	mov	r4, r1
 80059c2:	dc10      	bgt.n	80059e6 <trunc+0x36>
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	bfa5      	ittet	ge
 80059c8:	4a11      	ldrge	r2, [pc, #68]	; (8005a10 <trunc+0x60>)
 80059ca:	fa42 f303 	asrge.w	r3, r2, r3
 80059ce:	2100      	movlt	r1, #0
 80059d0:	2100      	movge	r1, #0
 80059d2:	bfb9      	ittee	lt
 80059d4:	2000      	movlt	r0, #0
 80059d6:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 80059da:	2000      	movge	r0, #0
 80059dc:	ea24 0103 	bicge.w	r1, r4, r3
 80059e0:	ec41 0b10 	vmov	d0, r0, r1
 80059e4:	bdd0      	pop	{r4, r6, r7, pc}
 80059e6:	2b33      	cmp	r3, #51	; 0x33
 80059e8:	dd08      	ble.n	80059fc <trunc+0x4c>
 80059ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ee:	d1f7      	bne.n	80059e0 <trunc+0x30>
 80059f0:	ee10 2a10 	vmov	r2, s0
 80059f4:	460b      	mov	r3, r1
 80059f6:	f7fa fc15 	bl	8000224 <__adddf3>
 80059fa:	e7f1      	b.n	80059e0 <trunc+0x30>
 80059fc:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8005a00:	f04f 33ff 	mov.w	r3, #4294967295
 8005a04:	fa23 f202 	lsr.w	r2, r3, r2
 8005a08:	ea20 0602 	bic.w	r6, r0, r2
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	e7e7      	b.n	80059e0 <trunc+0x30>
 8005a10:	000fffff 	.word	0x000fffff

08005a14 <_init>:
 8005a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a16:	bf00      	nop
 8005a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a1a:	bc08      	pop	{r3}
 8005a1c:	469e      	mov	lr, r3
 8005a1e:	4770      	bx	lr

08005a20 <_fini>:
 8005a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a22:	bf00      	nop
 8005a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a26:	bc08      	pop	{r3}
 8005a28:	469e      	mov	lr, r3
 8005a2a:	4770      	bx	lr
