
H745_ExamGame_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007018  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  081072b8  081072b8  000172b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08107538  08107538  00017538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08107540  08107540  00017540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08107544  08107544  00017544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  10000000  08107548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002d4  10000078  081075c0  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  1000034c  081075c0  0002034c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018f41  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a7f  00000000  00000000  00038fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fe0  00000000  00000000  0003ba68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ed8  00000000  00000000  0003ca48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b2d5  00000000  00000000  0003d920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017b27  00000000  00000000  00078bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018631b  00000000  00000000  0009071c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00216a37  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000045f0  00000000  00000000  00216a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000078 	.word	0x10000078
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081072a0 	.word	0x081072a0

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000007c 	.word	0x1000007c
 81002dc:	081072a0 	.word	0x081072a0

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_uldivmod>:
 8100390:	b953      	cbnz	r3, 81003a8 <__aeabi_uldivmod+0x18>
 8100392:	b94a      	cbnz	r2, 81003a8 <__aeabi_uldivmod+0x18>
 8100394:	2900      	cmp	r1, #0
 8100396:	bf08      	it	eq
 8100398:	2800      	cmpeq	r0, #0
 810039a:	bf1c      	itt	ne
 810039c:	f04f 31ff 	movne.w	r1, #4294967295
 81003a0:	f04f 30ff 	movne.w	r0, #4294967295
 81003a4:	f000 b974 	b.w	8100690 <__aeabi_idiv0>
 81003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 81003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003b0:	f000 f806 	bl	81003c0 <__udivmoddi4>
 81003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003bc:	b004      	add	sp, #16
 81003be:	4770      	bx	lr

081003c0 <__udivmoddi4>:
 81003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003c4:	9d08      	ldr	r5, [sp, #32]
 81003c6:	4604      	mov	r4, r0
 81003c8:	468e      	mov	lr, r1
 81003ca:	2b00      	cmp	r3, #0
 81003cc:	d14d      	bne.n	810046a <__udivmoddi4+0xaa>
 81003ce:	428a      	cmp	r2, r1
 81003d0:	4694      	mov	ip, r2
 81003d2:	d969      	bls.n	81004a8 <__udivmoddi4+0xe8>
 81003d4:	fab2 f282 	clz	r2, r2
 81003d8:	b152      	cbz	r2, 81003f0 <__udivmoddi4+0x30>
 81003da:	fa01 f302 	lsl.w	r3, r1, r2
 81003de:	f1c2 0120 	rsb	r1, r2, #32
 81003e2:	fa20 f101 	lsr.w	r1, r0, r1
 81003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 81003ea:	ea41 0e03 	orr.w	lr, r1, r3
 81003ee:	4094      	lsls	r4, r2
 81003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81003f4:	0c21      	lsrs	r1, r4, #16
 81003f6:	fbbe f6f8 	udiv	r6, lr, r8
 81003fa:	fa1f f78c 	uxth.w	r7, ip
 81003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8100402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100406:	fb06 f107 	mul.w	r1, r6, r7
 810040a:	4299      	cmp	r1, r3
 810040c:	d90a      	bls.n	8100424 <__udivmoddi4+0x64>
 810040e:	eb1c 0303 	adds.w	r3, ip, r3
 8100412:	f106 30ff 	add.w	r0, r6, #4294967295
 8100416:	f080 811f 	bcs.w	8100658 <__udivmoddi4+0x298>
 810041a:	4299      	cmp	r1, r3
 810041c:	f240 811c 	bls.w	8100658 <__udivmoddi4+0x298>
 8100420:	3e02      	subs	r6, #2
 8100422:	4463      	add	r3, ip
 8100424:	1a5b      	subs	r3, r3, r1
 8100426:	b2a4      	uxth	r4, r4
 8100428:	fbb3 f0f8 	udiv	r0, r3, r8
 810042c:	fb08 3310 	mls	r3, r8, r0, r3
 8100430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100434:	fb00 f707 	mul.w	r7, r0, r7
 8100438:	42a7      	cmp	r7, r4
 810043a:	d90a      	bls.n	8100452 <__udivmoddi4+0x92>
 810043c:	eb1c 0404 	adds.w	r4, ip, r4
 8100440:	f100 33ff 	add.w	r3, r0, #4294967295
 8100444:	f080 810a 	bcs.w	810065c <__udivmoddi4+0x29c>
 8100448:	42a7      	cmp	r7, r4
 810044a:	f240 8107 	bls.w	810065c <__udivmoddi4+0x29c>
 810044e:	4464      	add	r4, ip
 8100450:	3802      	subs	r0, #2
 8100452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100456:	1be4      	subs	r4, r4, r7
 8100458:	2600      	movs	r6, #0
 810045a:	b11d      	cbz	r5, 8100464 <__udivmoddi4+0xa4>
 810045c:	40d4      	lsrs	r4, r2
 810045e:	2300      	movs	r3, #0
 8100460:	e9c5 4300 	strd	r4, r3, [r5]
 8100464:	4631      	mov	r1, r6
 8100466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810046a:	428b      	cmp	r3, r1
 810046c:	d909      	bls.n	8100482 <__udivmoddi4+0xc2>
 810046e:	2d00      	cmp	r5, #0
 8100470:	f000 80ef 	beq.w	8100652 <__udivmoddi4+0x292>
 8100474:	2600      	movs	r6, #0
 8100476:	e9c5 0100 	strd	r0, r1, [r5]
 810047a:	4630      	mov	r0, r6
 810047c:	4631      	mov	r1, r6
 810047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100482:	fab3 f683 	clz	r6, r3
 8100486:	2e00      	cmp	r6, #0
 8100488:	d14a      	bne.n	8100520 <__udivmoddi4+0x160>
 810048a:	428b      	cmp	r3, r1
 810048c:	d302      	bcc.n	8100494 <__udivmoddi4+0xd4>
 810048e:	4282      	cmp	r2, r0
 8100490:	f200 80f9 	bhi.w	8100686 <__udivmoddi4+0x2c6>
 8100494:	1a84      	subs	r4, r0, r2
 8100496:	eb61 0303 	sbc.w	r3, r1, r3
 810049a:	2001      	movs	r0, #1
 810049c:	469e      	mov	lr, r3
 810049e:	2d00      	cmp	r5, #0
 81004a0:	d0e0      	beq.n	8100464 <__udivmoddi4+0xa4>
 81004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 81004a6:	e7dd      	b.n	8100464 <__udivmoddi4+0xa4>
 81004a8:	b902      	cbnz	r2, 81004ac <__udivmoddi4+0xec>
 81004aa:	deff      	udf	#255	; 0xff
 81004ac:	fab2 f282 	clz	r2, r2
 81004b0:	2a00      	cmp	r2, #0
 81004b2:	f040 8092 	bne.w	81005da <__udivmoddi4+0x21a>
 81004b6:	eba1 010c 	sub.w	r1, r1, ip
 81004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 81004be:	fa1f fe8c 	uxth.w	lr, ip
 81004c2:	2601      	movs	r6, #1
 81004c4:	0c20      	lsrs	r0, r4, #16
 81004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 81004ca:	fb07 1113 	mls	r1, r7, r3, r1
 81004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 81004d2:	fb0e f003 	mul.w	r0, lr, r3
 81004d6:	4288      	cmp	r0, r1
 81004d8:	d908      	bls.n	81004ec <__udivmoddi4+0x12c>
 81004da:	eb1c 0101 	adds.w	r1, ip, r1
 81004de:	f103 38ff 	add.w	r8, r3, #4294967295
 81004e2:	d202      	bcs.n	81004ea <__udivmoddi4+0x12a>
 81004e4:	4288      	cmp	r0, r1
 81004e6:	f200 80cb 	bhi.w	8100680 <__udivmoddi4+0x2c0>
 81004ea:	4643      	mov	r3, r8
 81004ec:	1a09      	subs	r1, r1, r0
 81004ee:	b2a4      	uxth	r4, r4
 81004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 81004f4:	fb07 1110 	mls	r1, r7, r0, r1
 81004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 81004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8100500:	45a6      	cmp	lr, r4
 8100502:	d908      	bls.n	8100516 <__udivmoddi4+0x156>
 8100504:	eb1c 0404 	adds.w	r4, ip, r4
 8100508:	f100 31ff 	add.w	r1, r0, #4294967295
 810050c:	d202      	bcs.n	8100514 <__udivmoddi4+0x154>
 810050e:	45a6      	cmp	lr, r4
 8100510:	f200 80bb 	bhi.w	810068a <__udivmoddi4+0x2ca>
 8100514:	4608      	mov	r0, r1
 8100516:	eba4 040e 	sub.w	r4, r4, lr
 810051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 810051e:	e79c      	b.n	810045a <__udivmoddi4+0x9a>
 8100520:	f1c6 0720 	rsb	r7, r6, #32
 8100524:	40b3      	lsls	r3, r6
 8100526:	fa22 fc07 	lsr.w	ip, r2, r7
 810052a:	ea4c 0c03 	orr.w	ip, ip, r3
 810052e:	fa20 f407 	lsr.w	r4, r0, r7
 8100532:	fa01 f306 	lsl.w	r3, r1, r6
 8100536:	431c      	orrs	r4, r3
 8100538:	40f9      	lsrs	r1, r7
 810053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 810053e:	fa00 f306 	lsl.w	r3, r0, r6
 8100542:	fbb1 f8f9 	udiv	r8, r1, r9
 8100546:	0c20      	lsrs	r0, r4, #16
 8100548:	fa1f fe8c 	uxth.w	lr, ip
 810054c:	fb09 1118 	mls	r1, r9, r8, r1
 8100550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100554:	fb08 f00e 	mul.w	r0, r8, lr
 8100558:	4288      	cmp	r0, r1
 810055a:	fa02 f206 	lsl.w	r2, r2, r6
 810055e:	d90b      	bls.n	8100578 <__udivmoddi4+0x1b8>
 8100560:	eb1c 0101 	adds.w	r1, ip, r1
 8100564:	f108 3aff 	add.w	sl, r8, #4294967295
 8100568:	f080 8088 	bcs.w	810067c <__udivmoddi4+0x2bc>
 810056c:	4288      	cmp	r0, r1
 810056e:	f240 8085 	bls.w	810067c <__udivmoddi4+0x2bc>
 8100572:	f1a8 0802 	sub.w	r8, r8, #2
 8100576:	4461      	add	r1, ip
 8100578:	1a09      	subs	r1, r1, r0
 810057a:	b2a4      	uxth	r4, r4
 810057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8100580:	fb09 1110 	mls	r1, r9, r0, r1
 8100584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100588:	fb00 fe0e 	mul.w	lr, r0, lr
 810058c:	458e      	cmp	lr, r1
 810058e:	d908      	bls.n	81005a2 <__udivmoddi4+0x1e2>
 8100590:	eb1c 0101 	adds.w	r1, ip, r1
 8100594:	f100 34ff 	add.w	r4, r0, #4294967295
 8100598:	d26c      	bcs.n	8100674 <__udivmoddi4+0x2b4>
 810059a:	458e      	cmp	lr, r1
 810059c:	d96a      	bls.n	8100674 <__udivmoddi4+0x2b4>
 810059e:	3802      	subs	r0, #2
 81005a0:	4461      	add	r1, ip
 81005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 81005a6:	fba0 9402 	umull	r9, r4, r0, r2
 81005aa:	eba1 010e 	sub.w	r1, r1, lr
 81005ae:	42a1      	cmp	r1, r4
 81005b0:	46c8      	mov	r8, r9
 81005b2:	46a6      	mov	lr, r4
 81005b4:	d356      	bcc.n	8100664 <__udivmoddi4+0x2a4>
 81005b6:	d053      	beq.n	8100660 <__udivmoddi4+0x2a0>
 81005b8:	b15d      	cbz	r5, 81005d2 <__udivmoddi4+0x212>
 81005ba:	ebb3 0208 	subs.w	r2, r3, r8
 81005be:	eb61 010e 	sbc.w	r1, r1, lr
 81005c2:	fa01 f707 	lsl.w	r7, r1, r7
 81005c6:	fa22 f306 	lsr.w	r3, r2, r6
 81005ca:	40f1      	lsrs	r1, r6
 81005cc:	431f      	orrs	r7, r3
 81005ce:	e9c5 7100 	strd	r7, r1, [r5]
 81005d2:	2600      	movs	r6, #0
 81005d4:	4631      	mov	r1, r6
 81005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81005da:	f1c2 0320 	rsb	r3, r2, #32
 81005de:	40d8      	lsrs	r0, r3
 81005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 81005e4:	fa21 f303 	lsr.w	r3, r1, r3
 81005e8:	4091      	lsls	r1, r2
 81005ea:	4301      	orrs	r1, r0
 81005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 81005f0:	fa1f fe8c 	uxth.w	lr, ip
 81005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 81005f8:	fb07 3610 	mls	r6, r7, r0, r3
 81005fc:	0c0b      	lsrs	r3, r1, #16
 81005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8100602:	fb00 f60e 	mul.w	r6, r0, lr
 8100606:	429e      	cmp	r6, r3
 8100608:	fa04 f402 	lsl.w	r4, r4, r2
 810060c:	d908      	bls.n	8100620 <__udivmoddi4+0x260>
 810060e:	eb1c 0303 	adds.w	r3, ip, r3
 8100612:	f100 38ff 	add.w	r8, r0, #4294967295
 8100616:	d22f      	bcs.n	8100678 <__udivmoddi4+0x2b8>
 8100618:	429e      	cmp	r6, r3
 810061a:	d92d      	bls.n	8100678 <__udivmoddi4+0x2b8>
 810061c:	3802      	subs	r0, #2
 810061e:	4463      	add	r3, ip
 8100620:	1b9b      	subs	r3, r3, r6
 8100622:	b289      	uxth	r1, r1
 8100624:	fbb3 f6f7 	udiv	r6, r3, r7
 8100628:	fb07 3316 	mls	r3, r7, r6, r3
 810062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100630:	fb06 f30e 	mul.w	r3, r6, lr
 8100634:	428b      	cmp	r3, r1
 8100636:	d908      	bls.n	810064a <__udivmoddi4+0x28a>
 8100638:	eb1c 0101 	adds.w	r1, ip, r1
 810063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8100640:	d216      	bcs.n	8100670 <__udivmoddi4+0x2b0>
 8100642:	428b      	cmp	r3, r1
 8100644:	d914      	bls.n	8100670 <__udivmoddi4+0x2b0>
 8100646:	3e02      	subs	r6, #2
 8100648:	4461      	add	r1, ip
 810064a:	1ac9      	subs	r1, r1, r3
 810064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8100650:	e738      	b.n	81004c4 <__udivmoddi4+0x104>
 8100652:	462e      	mov	r6, r5
 8100654:	4628      	mov	r0, r5
 8100656:	e705      	b.n	8100464 <__udivmoddi4+0xa4>
 8100658:	4606      	mov	r6, r0
 810065a:	e6e3      	b.n	8100424 <__udivmoddi4+0x64>
 810065c:	4618      	mov	r0, r3
 810065e:	e6f8      	b.n	8100452 <__udivmoddi4+0x92>
 8100660:	454b      	cmp	r3, r9
 8100662:	d2a9      	bcs.n	81005b8 <__udivmoddi4+0x1f8>
 8100664:	ebb9 0802 	subs.w	r8, r9, r2
 8100668:	eb64 0e0c 	sbc.w	lr, r4, ip
 810066c:	3801      	subs	r0, #1
 810066e:	e7a3      	b.n	81005b8 <__udivmoddi4+0x1f8>
 8100670:	4646      	mov	r6, r8
 8100672:	e7ea      	b.n	810064a <__udivmoddi4+0x28a>
 8100674:	4620      	mov	r0, r4
 8100676:	e794      	b.n	81005a2 <__udivmoddi4+0x1e2>
 8100678:	4640      	mov	r0, r8
 810067a:	e7d1      	b.n	8100620 <__udivmoddi4+0x260>
 810067c:	46d0      	mov	r8, sl
 810067e:	e77b      	b.n	8100578 <__udivmoddi4+0x1b8>
 8100680:	3b02      	subs	r3, #2
 8100682:	4461      	add	r1, ip
 8100684:	e732      	b.n	81004ec <__udivmoddi4+0x12c>
 8100686:	4630      	mov	r0, r6
 8100688:	e709      	b.n	810049e <__udivmoddi4+0xde>
 810068a:	4464      	add	r4, ip
 810068c:	3802      	subs	r0, #2
 810068e:	e742      	b.n	8100516 <__udivmoddi4+0x156>

08100690 <__aeabi_idiv0>:
 8100690:	4770      	bx	lr
 8100692:	bf00      	nop

08100694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100694:	b480      	push	{r7}
 8100696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100698:	4b09      	ldr	r3, [pc, #36]	; (81006c0 <SystemInit+0x2c>)
 810069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810069e:	4a08      	ldr	r2, [pc, #32]	; (81006c0 <SystemInit+0x2c>)
 81006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81006a8:	4b05      	ldr	r3, [pc, #20]	; (81006c0 <SystemInit+0x2c>)
 81006aa:	691b      	ldr	r3, [r3, #16]
 81006ac:	4a04      	ldr	r2, [pc, #16]	; (81006c0 <SystemInit+0x2c>)
 81006ae:	f043 0310 	orr.w	r3, r3, #16
 81006b2:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81006b4:	bf00      	nop
 81006b6:	46bd      	mov	sp, r7
 81006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006bc:	4770      	bx	lr
 81006be:	bf00      	nop
 81006c0:	e000ed00 	.word	0xe000ed00

081006c4 <DS3231_Read>:
#ifdef ExRTC_IS_DS3231

DS3231_RG_Strc ERTC_lg;


void DS3231_Read(I2C_HandleTypeDef *hi2c){
 81006c4:	b580      	push	{r7, lr}
 81006c6:	b086      	sub	sp, #24
 81006c8:	af04      	add	r7, sp, #16
 81006ca:	6078      	str	r0, [r7, #4]
	/* Check by use "ERTC_lg" in live expression
	 * ex. S3231_Read(&hi2c2);
	 * */
	if(hi2c->State == HAL_I2C_STATE_READY){
 81006cc:	687b      	ldr	r3, [r7, #4]
 81006ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81006d2:	b2db      	uxtb	r3, r3
 81006d4:	2b20      	cmp	r3, #32
 81006d6:	d10b      	bne.n	81006f0 <DS3231_Read+0x2c>
		HAL_I2C_Mem_Read(hi2c, DS_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT,
 81006d8:	2364      	movs	r3, #100	; 0x64
 81006da:	9302      	str	r3, [sp, #8]
 81006dc:	2313      	movs	r3, #19
 81006de:	9301      	str	r3, [sp, #4]
 81006e0:	4b05      	ldr	r3, [pc, #20]	; (81006f8 <DS3231_Read+0x34>)
 81006e2:	9300      	str	r3, [sp, #0]
 81006e4:	2301      	movs	r3, #1
 81006e6:	2200      	movs	r2, #0
 81006e8:	21d0      	movs	r1, #208	; 0xd0
 81006ea:	6878      	ldr	r0, [r7, #4]
 81006ec:	f002 fb50 	bl	8102d90 <HAL_I2C_Mem_Read>
				&ERTC_lg.D8[0], 19, 100);
	}

}
 81006f0:	bf00      	nop
 81006f2:	3708      	adds	r7, #8
 81006f4:	46bd      	mov	sp, r7
 81006f6:	bd80      	pop	{r7, pc}
 81006f8:	10000094 	.word	0x10000094

081006fc <EXIN_RTC_SYNC>:


//// Sync timevalue when boot(in case Vbat is not powered)
void EXIN_RTC_SYNC(I2C_HandleTypeDef *hi2c, RTC_HandleTypeDef *hrtc){
 81006fc:	b580      	push	{r7, lr}
 81006fe:	b088      	sub	sp, #32
 8100700:	af00      	add	r7, sp, #0
 8100702:	6078      	str	r0, [r7, #4]
 8100704:	6039      	str	r1, [r7, #0]
	DS3231_Read(hi2c);
 8100706:	6878      	ldr	r0, [r7, #4]
 8100708:	f7ff ffdc 	bl	81006c4 <DS3231_Read>

	RTC_TimeTypeDef sTime={0};
 810070c:	f107 030c 	add.w	r3, r7, #12
 8100710:	2200      	movs	r2, #0
 8100712:	601a      	str	r2, [r3, #0]
 8100714:	605a      	str	r2, [r3, #4]
 8100716:	609a      	str	r2, [r3, #8]
 8100718:	60da      	str	r2, [r3, #12]
 810071a:	611a      	str	r2, [r3, #16]
	sTime.Hours = ERTC_lg.DS3231RG.hour; //
 810071c:	4b18      	ldr	r3, [pc, #96]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 810071e:	789b      	ldrb	r3, [r3, #2]
 8100720:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8100724:	b2db      	uxtb	r3, r3
 8100726:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ERTC_lg.DS3231RG.min;
 8100728:	4b15      	ldr	r3, [pc, #84]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 810072a:	785b      	ldrb	r3, [r3, #1]
 810072c:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ERTC_lg.DS3231RG.sec;
 810072e:	4b14      	ldr	r3, [pc, #80]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 8100730:	781b      	ldrb	r3, [r3, #0]
 8100732:	73bb      	strb	r3, [r7, #14]

	HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BCD);
 8100734:	f107 030c 	add.w	r3, r7, #12
 8100738:	2201      	movs	r2, #1
 810073a:	4619      	mov	r1, r3
 810073c:	6838      	ldr	r0, [r7, #0]
 810073e:	f004 fd6b 	bl	8105218 <HAL_RTC_SetTime>

	RTC_DateTypeDef sDate ={0};
 8100742:	2300      	movs	r3, #0
 8100744:	60bb      	str	r3, [r7, #8]
	sDate.Date = ERTC_lg.DS3231RG.date;
 8100746:	4b0e      	ldr	r3, [pc, #56]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 8100748:	791b      	ldrb	r3, [r3, #4]
 810074a:	72bb      	strb	r3, [r7, #10]
	sDate.Month = ERTC_lg.DS3231RG.month;
 810074c:	4b0c      	ldr	r3, [pc, #48]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 810074e:	795b      	ldrb	r3, [r3, #5]
 8100750:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8100754:	b2db      	uxtb	r3, r3
 8100756:	727b      	strb	r3, [r7, #9]
	sDate.WeekDay = ERTC_lg.DS3231RG.wkday;
 8100758:	4b09      	ldr	r3, [pc, #36]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 810075a:	78db      	ldrb	r3, [r3, #3]
 810075c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8100760:	b2db      	uxtb	r3, r3
 8100762:	723b      	strb	r3, [r7, #8]
	sDate.Year = ERTC_lg.DS3231RG.year;
 8100764:	4b06      	ldr	r3, [pc, #24]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 8100766:	799b      	ldrb	r3, [r3, #6]
 8100768:	72fb      	strb	r3, [r7, #11]

	HAL_RTC_SetDate(hrtc, &sDate, RTC_FORMAT_BCD);
 810076a:	f107 0308 	add.w	r3, r7, #8
 810076e:	2201      	movs	r2, #1
 8100770:	4619      	mov	r1, r3
 8100772:	6838      	ldr	r0, [r7, #0]
 8100774:	f004 fe49 	bl	810540a <HAL_RTC_SetDate>
}
 8100778:	bf00      	nop
 810077a:	3720      	adds	r7, #32
 810077c:	46bd      	mov	sp, r7
 810077e:	bd80      	pop	{r7, pc}
 8100780:	10000094 	.word	0x10000094

08100784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100784:	b580      	push	{r7, lr}
 8100786:	b09e      	sub	sp, #120	; 0x78
 8100788:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810078a:	4baf      	ldr	r3, [pc, #700]	; (8100a48 <main+0x2c4>)
 810078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100790:	4aad      	ldr	r2, [pc, #692]	; (8100a48 <main+0x2c4>)
 8100792:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100796:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810079a:	4bab      	ldr	r3, [pc, #684]	; (8100a48 <main+0x2c4>)
 810079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81007a4:	603b      	str	r3, [r7, #0]
 81007a6:	683b      	ldr	r3, [r7, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81007a8:	2001      	movs	r0, #1
 81007aa:	f002 fa4f 	bl	8102c4c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81007ae:	f002 ff6d 	bl	810368c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81007b2:	2201      	movs	r2, #1
 81007b4:	2102      	movs	r1, #2
 81007b6:	2000      	movs	r0, #0
 81007b8:	f002 feee 	bl	8103598 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81007bc:	4ba3      	ldr	r3, [pc, #652]	; (8100a4c <main+0x2c8>)
 81007be:	681b      	ldr	r3, [r3, #0]
 81007c0:	091b      	lsrs	r3, r3, #4
 81007c2:	f003 030f 	and.w	r3, r3, #15
 81007c6:	2b07      	cmp	r3, #7
 81007c8:	d108      	bne.n	81007dc <main+0x58>
 81007ca:	4ba1      	ldr	r3, [pc, #644]	; (8100a50 <main+0x2cc>)
 81007cc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81007d0:	4a9f      	ldr	r2, [pc, #636]	; (8100a50 <main+0x2cc>)
 81007d2:	f043 0301 	orr.w	r3, r3, #1
 81007d6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81007da:	e007      	b.n	81007ec <main+0x68>
 81007dc:	4b9c      	ldr	r3, [pc, #624]	; (8100a50 <main+0x2cc>)
 81007de:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81007e2:	4a9b      	ldr	r2, [pc, #620]	; (8100a50 <main+0x2cc>)
 81007e4:	f043 0301 	orr.w	r3, r3, #1
 81007e8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81007ec:	f001 f89e 	bl	810192c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81007f0:	f000 fcb6 	bl	8101160 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 81007f4:	f000 fc4e 	bl	8101094 <MX_USART3_UART_Init>
  MX_RTC_Init();
 81007f8:	f000 fbf0 	bl	8100fdc <MX_RTC_Init>
  MX_DMA_Init();
 81007fc:	f000 fc96 	bl	810112c <MX_DMA_Init>
  MX_I2C2_Init();
 8100800:	f000 fbac 	bl	8100f5c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  DS3231_Read(&hi2c2);
 8100804:	4893      	ldr	r0, [pc, #588]	; (8100a54 <main+0x2d0>)
 8100806:	f7ff ff5d 	bl	81006c4 <DS3231_Read>
  EXIN_RTC_SYNC(&hi2c2,&hrtc);
 810080a:	4993      	ldr	r1, [pc, #588]	; (8100a58 <main+0x2d4>)
 810080c:	4891      	ldr	r0, [pc, #580]	; (8100a54 <main+0x2d0>)
 810080e:	f7ff ff75 	bl	81006fc <EXIN_RTC_SYNC>

  SRAM4->flag_blue_btn = 0;
 8100812:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8100816:	2200      	movs	r2, #0
 8100818:	701a      	strb	r2, [r3, #0]

  char temp[]="--------------------H745_ExamGame_CM4----------------------"
 810081a:	4a90      	ldr	r2, [pc, #576]	; (8100a5c <main+0x2d8>)
 810081c:	1d3b      	adds	r3, r7, #4
 810081e:	4611      	mov	r1, r2
 8100820:	2274      	movs	r2, #116	; 0x74
 8100822:	4618      	mov	r0, r3
 8100824:	f006 f8c6 	bl	81069b4 <memcpy>
		  "\r\n Welcome to UART Port 115200 8 bit/stop1 none parity\r\n";
  HAL_UART_Transmit(&huart3, (uint8_t*)temp, strlen(temp),30); // strlen = length of str -> config length of data
 8100828:	1d3b      	adds	r3, r7, #4
 810082a:	4618      	mov	r0, r3
 810082c:	f7ff fd58 	bl	81002e0 <strlen>
 8100830:	4603      	mov	r3, r0
 8100832:	b29a      	uxth	r2, r3
 8100834:	1d39      	adds	r1, r7, #4
 8100836:	231e      	movs	r3, #30
 8100838:	4889      	ldr	r0, [pc, #548]	; (8100a60 <main+0x2dc>)
 810083a:	f004 ffdb 	bl	81057f4 <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(HAL_GetTick() - timestamp_one[1] >= timetrig_one){
 810083e:	f001 f91d 	bl	8101a7c <HAL_GetTick>
 8100842:	4602      	mov	r2, r0
 8100844:	4b87      	ldr	r3, [pc, #540]	; (8100a64 <main+0x2e0>)
 8100846:	685b      	ldr	r3, [r3, #4]
 8100848:	1ad3      	subs	r3, r2, r3
 810084a:	4a87      	ldr	r2, [pc, #540]	; (8100a68 <main+0x2e4>)
 810084c:	8812      	ldrh	r2, [r2, #0]
 810084e:	4293      	cmp	r3, r2
 8100850:	f0c0 82df 	bcc.w	8100e12 <main+0x68e>
			  timestamp_one[1] = HAL_GetTick();
 8100854:	f001 f912 	bl	8101a7c <HAL_GetTick>
 8100858:	4603      	mov	r3, r0
 810085a:	4a82      	ldr	r2, [pc, #520]	; (8100a64 <main+0x2e0>)
 810085c:	6053      	str	r3, [r2, #4]
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 810085e:	2102      	movs	r1, #2
 8100860:	4882      	ldr	r0, [pc, #520]	; (8100a6c <main+0x2e8>)
 8100862:	f002 f9be 	bl	8102be2 <HAL_GPIO_TogglePin>

			  switch(gameState){
 8100866:	4b82      	ldr	r3, [pc, #520]	; (8100a70 <main+0x2ec>)
 8100868:	781b      	ldrb	r3, [r3, #0]
 810086a:	2b04      	cmp	r3, #4
 810086c:	d83a      	bhi.n	81008e4 <main+0x160>
 810086e:	a201      	add	r2, pc, #4	; (adr r2, 8100874 <main+0xf0>)
 8100870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100874:	08100889 	.word	0x08100889
 8100878:	081008e5 	.word	0x081008e5
 810087c:	08100aad 	.word	0x08100aad
 8100880:	08100b1d 	.word	0x08100b1d
 8100884:	08100d89 	.word	0x08100d89
			  case start:
				  sprintf(txtUARTBF, " - - - - Whack a Moles - - - - \r\n");
 8100888:	497a      	ldr	r1, [pc, #488]	; (8100a74 <main+0x2f0>)
 810088a:	487b      	ldr	r0, [pc, #492]	; (8100a78 <main+0x2f4>)
 810088c:	f006 f8a8 	bl	81069e0 <siprintf>
				  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),30);
 8100890:	4879      	ldr	r0, [pc, #484]	; (8100a78 <main+0x2f4>)
 8100892:	f7ff fd25 	bl	81002e0 <strlen>
 8100896:	4603      	mov	r3, r0
 8100898:	b29a      	uxth	r2, r3
 810089a:	231e      	movs	r3, #30
 810089c:	4976      	ldr	r1, [pc, #472]	; (8100a78 <main+0x2f4>)
 810089e:	4870      	ldr	r0, [pc, #448]	; (8100a60 <main+0x2dc>)
 81008a0:	f004 ffa8 	bl	81057f4 <HAL_UART_Transmit>
				  sprintf(txtUARTBF, " Press -Blue Button- to start:\r\n");
 81008a4:	4975      	ldr	r1, [pc, #468]	; (8100a7c <main+0x2f8>)
 81008a6:	4874      	ldr	r0, [pc, #464]	; (8100a78 <main+0x2f4>)
 81008a8:	f006 f89a 	bl	81069e0 <siprintf>
				  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),30);
 81008ac:	4872      	ldr	r0, [pc, #456]	; (8100a78 <main+0x2f4>)
 81008ae:	f7ff fd17 	bl	81002e0 <strlen>
 81008b2:	4603      	mov	r3, r0
 81008b4:	b29a      	uxth	r2, r3
 81008b6:	231e      	movs	r3, #30
 81008b8:	496f      	ldr	r1, [pc, #444]	; (8100a78 <main+0x2f4>)
 81008ba:	4869      	ldr	r0, [pc, #420]	; (8100a60 <main+0x2dc>)
 81008bc:	f004 ff9a 	bl	81057f4 <HAL_UART_Transmit>

				  sprintf(txtUARTBF, "Select mode by red btn: Easy | Hard | Cursed | Racknarock (Default: Easy)\r\n");
 81008c0:	496f      	ldr	r1, [pc, #444]	; (8100a80 <main+0x2fc>)
 81008c2:	486d      	ldr	r0, [pc, #436]	; (8100a78 <main+0x2f4>)
 81008c4:	f006 f88c 	bl	81069e0 <siprintf>
				  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),30);
 81008c8:	486b      	ldr	r0, [pc, #428]	; (8100a78 <main+0x2f4>)
 81008ca:	f7ff fd09 	bl	81002e0 <strlen>
 81008ce:	4603      	mov	r3, r0
 81008d0:	b29a      	uxth	r2, r3
 81008d2:	231e      	movs	r3, #30
 81008d4:	4968      	ldr	r1, [pc, #416]	; (8100a78 <main+0x2f4>)
 81008d6:	4862      	ldr	r0, [pc, #392]	; (8100a60 <main+0x2dc>)
 81008d8:	f004 ff8c 	bl	81057f4 <HAL_UART_Transmit>
				  gameState = ready;
 81008dc:	4b64      	ldr	r3, [pc, #400]	; (8100a70 <main+0x2ec>)
 81008de:	2201      	movs	r2, #1
 81008e0:	701a      	strb	r2, [r3, #0]
				  break;
 81008e2:	e29d      	b.n	8100e20 <main+0x69c>

			  default:
			  case ready:
				  //// select speed mode
				  switch(flag_btns){
 81008e4:	4b67      	ldr	r3, [pc, #412]	; (8100a84 <main+0x300>)
 81008e6:	781b      	ldrb	r3, [r3, #0]
 81008e8:	3b01      	subs	r3, #1
 81008ea:	2b03      	cmp	r3, #3
 81008ec:	d860      	bhi.n	81009b0 <main+0x22c>
 81008ee:	a201      	add	r2, pc, #4	; (adr r2, 81008f4 <main+0x170>)
 81008f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81008f4:	08100905 	.word	0x08100905
 81008f8:	08100931 	.word	0x08100931
 81008fc:	0810095d 	.word	0x0810095d
 8100900:	08100987 	.word	0x08100987
					  default:
						  break;
					  case 1:
						  timetrig_two = 1000;
 8100904:	4b60      	ldr	r3, [pc, #384]	; (8100a88 <main+0x304>)
 8100906:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 810090a:	801a      	strh	r2, [r3, #0]
						  sprintf(txtUARTBF, "Mode: Easy\r\n");
 810090c:	495f      	ldr	r1, [pc, #380]	; (8100a8c <main+0x308>)
 810090e:	485a      	ldr	r0, [pc, #360]	; (8100a78 <main+0x2f4>)
 8100910:	f006 f866 	bl	81069e0 <siprintf>
						  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),10);
 8100914:	4858      	ldr	r0, [pc, #352]	; (8100a78 <main+0x2f4>)
 8100916:	f7ff fce3 	bl	81002e0 <strlen>
 810091a:	4603      	mov	r3, r0
 810091c:	b29a      	uxth	r2, r3
 810091e:	230a      	movs	r3, #10
 8100920:	4955      	ldr	r1, [pc, #340]	; (8100a78 <main+0x2f4>)
 8100922:	484f      	ldr	r0, [pc, #316]	; (8100a60 <main+0x2dc>)
 8100924:	f004 ff66 	bl	81057f4 <HAL_UART_Transmit>
						  flag_btns = 0;
 8100928:	4b56      	ldr	r3, [pc, #344]	; (8100a84 <main+0x300>)
 810092a:	2200      	movs	r2, #0
 810092c:	701a      	strb	r2, [r3, #0]
						  break;
 810092e:	e040      	b.n	81009b2 <main+0x22e>
					  case 2:
						  timetrig_two = 500;
 8100930:	4b55      	ldr	r3, [pc, #340]	; (8100a88 <main+0x304>)
 8100932:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8100936:	801a      	strh	r2, [r3, #0]
						  sprintf(txtUARTBF, "Mode: Hard\r\n");
 8100938:	4955      	ldr	r1, [pc, #340]	; (8100a90 <main+0x30c>)
 810093a:	484f      	ldr	r0, [pc, #316]	; (8100a78 <main+0x2f4>)
 810093c:	f006 f850 	bl	81069e0 <siprintf>
						  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),10);
 8100940:	484d      	ldr	r0, [pc, #308]	; (8100a78 <main+0x2f4>)
 8100942:	f7ff fccd 	bl	81002e0 <strlen>
 8100946:	4603      	mov	r3, r0
 8100948:	b29a      	uxth	r2, r3
 810094a:	230a      	movs	r3, #10
 810094c:	494a      	ldr	r1, [pc, #296]	; (8100a78 <main+0x2f4>)
 810094e:	4844      	ldr	r0, [pc, #272]	; (8100a60 <main+0x2dc>)
 8100950:	f004 ff50 	bl	81057f4 <HAL_UART_Transmit>
						  flag_btns = 0;
 8100954:	4b4b      	ldr	r3, [pc, #300]	; (8100a84 <main+0x300>)
 8100956:	2200      	movs	r2, #0
 8100958:	701a      	strb	r2, [r3, #0]
						  break;
 810095a:	e02a      	b.n	81009b2 <main+0x22e>
					  case 3:
						  timetrig_two = 250;
 810095c:	4b4a      	ldr	r3, [pc, #296]	; (8100a88 <main+0x304>)
 810095e:	22fa      	movs	r2, #250	; 0xfa
 8100960:	801a      	strh	r2, [r3, #0]
						  sprintf(txtUARTBF, "Mode: Cursed\r\n");
 8100962:	494c      	ldr	r1, [pc, #304]	; (8100a94 <main+0x310>)
 8100964:	4844      	ldr	r0, [pc, #272]	; (8100a78 <main+0x2f4>)
 8100966:	f006 f83b 	bl	81069e0 <siprintf>
						  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),10);
 810096a:	4843      	ldr	r0, [pc, #268]	; (8100a78 <main+0x2f4>)
 810096c:	f7ff fcb8 	bl	81002e0 <strlen>
 8100970:	4603      	mov	r3, r0
 8100972:	b29a      	uxth	r2, r3
 8100974:	230a      	movs	r3, #10
 8100976:	4940      	ldr	r1, [pc, #256]	; (8100a78 <main+0x2f4>)
 8100978:	4839      	ldr	r0, [pc, #228]	; (8100a60 <main+0x2dc>)
 810097a:	f004 ff3b 	bl	81057f4 <HAL_UART_Transmit>
						  flag_btns = 0;
 810097e:	4b41      	ldr	r3, [pc, #260]	; (8100a84 <main+0x300>)
 8100980:	2200      	movs	r2, #0
 8100982:	701a      	strb	r2, [r3, #0]
						  break;
 8100984:	e015      	b.n	81009b2 <main+0x22e>
					  case 4:
						  timetrig_two = 100;
 8100986:	4b40      	ldr	r3, [pc, #256]	; (8100a88 <main+0x304>)
 8100988:	2264      	movs	r2, #100	; 0x64
 810098a:	801a      	strh	r2, [r3, #0]
						  sprintf(txtUARTBF, "Mode: Racknarock\r\n");
 810098c:	4942      	ldr	r1, [pc, #264]	; (8100a98 <main+0x314>)
 810098e:	483a      	ldr	r0, [pc, #232]	; (8100a78 <main+0x2f4>)
 8100990:	f006 f826 	bl	81069e0 <siprintf>
						  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),10);
 8100994:	4838      	ldr	r0, [pc, #224]	; (8100a78 <main+0x2f4>)
 8100996:	f7ff fca3 	bl	81002e0 <strlen>
 810099a:	4603      	mov	r3, r0
 810099c:	b29a      	uxth	r2, r3
 810099e:	230a      	movs	r3, #10
 81009a0:	4935      	ldr	r1, [pc, #212]	; (8100a78 <main+0x2f4>)
 81009a2:	482f      	ldr	r0, [pc, #188]	; (8100a60 <main+0x2dc>)
 81009a4:	f004 ff26 	bl	81057f4 <HAL_UART_Transmit>
						  flag_btns = 0;
 81009a8:	4b36      	ldr	r3, [pc, #216]	; (8100a84 <main+0x300>)
 81009aa:	2200      	movs	r2, #0
 81009ac:	701a      	strb	r2, [r3, #0]
						  break;
 81009ae:	e000      	b.n	81009b2 <main+0x22e>
						  break;
 81009b0:	bf00      	nop
					  }

				  if(SRAM4->flag_blue_btn == 1){
 81009b2:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 81009b6:	781b      	ldrb	r3, [r3, #0]
 81009b8:	2b01      	cmp	r3, #1
 81009ba:	f040 822c 	bne.w	8100e16 <main+0x692>
					  SRAM4->flag_blue_btn = 0;
 81009be:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 81009c2:	2200      	movs	r2, #0
 81009c4:	701a      	strb	r2, [r3, #0]
					  score = Score_start;
 81009c6:	4b35      	ldr	r3, [pc, #212]	; (8100a9c <main+0x318>)
 81009c8:	2203      	movs	r2, #3
 81009ca:	601a      	str	r2, [r3, #0]

					  sprintf(txtUARTBF, " - Ready - \r\n");
 81009cc:	4934      	ldr	r1, [pc, #208]	; (8100aa0 <main+0x31c>)
 81009ce:	482a      	ldr	r0, [pc, #168]	; (8100a78 <main+0x2f4>)
 81009d0:	f006 f806 	bl	81069e0 <siprintf>
					  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),30);
 81009d4:	4828      	ldr	r0, [pc, #160]	; (8100a78 <main+0x2f4>)
 81009d6:	f7ff fc83 	bl	81002e0 <strlen>
 81009da:	4603      	mov	r3, r0
 81009dc:	b29a      	uxth	r2, r3
 81009de:	231e      	movs	r3, #30
 81009e0:	4925      	ldr	r1, [pc, #148]	; (8100a78 <main+0x2f4>)
 81009e2:	481f      	ldr	r0, [pc, #124]	; (8100a60 <main+0x2dc>)
 81009e4:	f004 ff06 	bl	81057f4 <HAL_UART_Transmit>
					  HAL_Delay(1000);
 81009e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 81009ec:	f001 f852 	bl	8101a94 <HAL_Delay>

					  sprintf(txtUARTBF, " - Set - \r\n");
 81009f0:	492c      	ldr	r1, [pc, #176]	; (8100aa4 <main+0x320>)
 81009f2:	4821      	ldr	r0, [pc, #132]	; (8100a78 <main+0x2f4>)
 81009f4:	f005 fff4 	bl	81069e0 <siprintf>
					  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),30);
 81009f8:	481f      	ldr	r0, [pc, #124]	; (8100a78 <main+0x2f4>)
 81009fa:	f7ff fc71 	bl	81002e0 <strlen>
 81009fe:	4603      	mov	r3, r0
 8100a00:	b29a      	uxth	r2, r3
 8100a02:	231e      	movs	r3, #30
 8100a04:	491c      	ldr	r1, [pc, #112]	; (8100a78 <main+0x2f4>)
 8100a06:	4816      	ldr	r0, [pc, #88]	; (8100a60 <main+0x2dc>)
 8100a08:	f004 fef4 	bl	81057f4 <HAL_UART_Transmit>
					  HAL_Delay(1000);
 8100a0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100a10:	f001 f840 	bl	8101a94 <HAL_Delay>

					  sprintf(txtUARTBF, " - Go! - \r\nscore = %d \r\n",score);
 8100a14:	4b21      	ldr	r3, [pc, #132]	; (8100a9c <main+0x318>)
 8100a16:	681b      	ldr	r3, [r3, #0]
 8100a18:	461a      	mov	r2, r3
 8100a1a:	4923      	ldr	r1, [pc, #140]	; (8100aa8 <main+0x324>)
 8100a1c:	4816      	ldr	r0, [pc, #88]	; (8100a78 <main+0x2f4>)
 8100a1e:	f005 ffdf 	bl	81069e0 <siprintf>
					  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),30);
 8100a22:	4815      	ldr	r0, [pc, #84]	; (8100a78 <main+0x2f4>)
 8100a24:	f7ff fc5c 	bl	81002e0 <strlen>
 8100a28:	4603      	mov	r3, r0
 8100a2a:	b29a      	uxth	r2, r3
 8100a2c:	231e      	movs	r3, #30
 8100a2e:	4912      	ldr	r1, [pc, #72]	; (8100a78 <main+0x2f4>)
 8100a30:	480b      	ldr	r0, [pc, #44]	; (8100a60 <main+0x2dc>)
 8100a32:	f004 fedf 	bl	81057f4 <HAL_UART_Transmit>
					  HAL_Delay(1000);
 8100a36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100a3a:	f001 f82b 	bl	8101a94 <HAL_Delay>


					  gameState = playing;
 8100a3e:	4b0c      	ldr	r3, [pc, #48]	; (8100a70 <main+0x2ec>)
 8100a40:	2202      	movs	r2, #2
 8100a42:	701a      	strb	r2, [r3, #0]

				  }
				  break;
 8100a44:	e1e7      	b.n	8100e16 <main+0x692>
 8100a46:	bf00      	nop
 8100a48:	58024400 	.word	0x58024400
 8100a4c:	e000ed00 	.word	0xe000ed00
 8100a50:	58026400 	.word	0x58026400
 8100a54:	100000a8 	.word	0x100000a8
 8100a58:	100000f4 	.word	0x100000f4
 8100a5c:	08107450 	.word	0x08107450
 8100a60:	10000118 	.word	0x10000118
 8100a64:	10000324 	.word	0x10000324
 8100a68:	10000008 	.word	0x10000008
 8100a6c:	58021000 	.word	0x58021000
 8100a70:	100002a5 	.word	0x100002a5
 8100a74:	081072b8 	.word	0x081072b8
 8100a78:	100002c0 	.word	0x100002c0
 8100a7c:	081072dc 	.word	0x081072dc
 8100a80:	08107300 	.word	0x08107300
 8100a84:	1000029d 	.word	0x1000029d
 8100a88:	1000000a 	.word	0x1000000a
 8100a8c:	0810734c 	.word	0x0810734c
 8100a90:	0810735c 	.word	0x0810735c
 8100a94:	0810736c 	.word	0x0810736c
 8100a98:	0810737c 	.word	0x0810737c
 8100a9c:	100002a0 	.word	0x100002a0
 8100aa0:	08107390 	.word	0x08107390
 8100aa4:	081073a0 	.word	0x081073a0
 8100aa8:	081073ac 	.word	0x081073ac

			  case playing:
				  //// mole generator
				  mole_generator();
 8100aac:	f000 fc8e 	bl	81013cc <mole_generator>

				  //// use interrupt to go to action
				  if(flag_btns != 0){gameState = action;}
 8100ab0:	4ba6      	ldr	r3, [pc, #664]	; (8100d4c <main+0x5c8>)
 8100ab2:	781b      	ldrb	r3, [r3, #0]
 8100ab4:	2b00      	cmp	r3, #0
 8100ab6:	d002      	beq.n	8100abe <main+0x33a>
 8100ab8:	4ba5      	ldr	r3, [pc, #660]	; (8100d50 <main+0x5cc>)
 8100aba:	2203      	movs	r2, #3
 8100abc:	701a      	strb	r2, [r3, #0]


				  if (score >= Score_WIN){
 8100abe:	4ba5      	ldr	r3, [pc, #660]	; (8100d54 <main+0x5d0>)
 8100ac0:	681b      	ldr	r3, [r3, #0]
 8100ac2:	2b09      	cmp	r3, #9
 8100ac4:	dd13      	ble.n	8100aee <main+0x36a>
					  gameState = end;
 8100ac6:	4ba2      	ldr	r3, [pc, #648]	; (8100d50 <main+0x5cc>)
 8100ac8:	2204      	movs	r2, #4
 8100aca:	701a      	strb	r2, [r3, #0]
					  sprintf(txtUARTBF, "--- You Win!!! --- \r\n  Press -Blue Button- to home:\r\n");
 8100acc:	49a2      	ldr	r1, [pc, #648]	; (8100d58 <main+0x5d4>)
 8100ace:	48a3      	ldr	r0, [pc, #652]	; (8100d5c <main+0x5d8>)
 8100ad0:	f005 ff86 	bl	81069e0 <siprintf>
					  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),30);
 8100ad4:	48a1      	ldr	r0, [pc, #644]	; (8100d5c <main+0x5d8>)
 8100ad6:	f7ff fc03 	bl	81002e0 <strlen>
 8100ada:	4603      	mov	r3, r0
 8100adc:	b29a      	uxth	r2, r3
 8100ade:	231e      	movs	r3, #30
 8100ae0:	499e      	ldr	r1, [pc, #632]	; (8100d5c <main+0x5d8>)
 8100ae2:	489f      	ldr	r0, [pc, #636]	; (8100d60 <main+0x5dc>)
 8100ae4:	f004 fe86 	bl	81057f4 <HAL_UART_Transmit>

					  timetrig_one = 100; // change state's speed for LED running
 8100ae8:	4b9e      	ldr	r3, [pc, #632]	; (8100d64 <main+0x5e0>)
 8100aea:	2264      	movs	r2, #100	; 0x64
 8100aec:	801a      	strh	r2, [r3, #0]
				  }

				  if (score <= 0){
 8100aee:	4b99      	ldr	r3, [pc, #612]	; (8100d54 <main+0x5d0>)
 8100af0:	681b      	ldr	r3, [r3, #0]
 8100af2:	2b00      	cmp	r3, #0
 8100af4:	f300 8191 	bgt.w	8100e1a <main+0x696>
					  gameState = end;
 8100af8:	4b95      	ldr	r3, [pc, #596]	; (8100d50 <main+0x5cc>)
 8100afa:	2204      	movs	r2, #4
 8100afc:	701a      	strb	r2, [r3, #0]
					  sprintf(txtUARTBF, "--- You Lose - TT TT TT TT \r\n  Press -Blue Button- to home:\r\n");
 8100afe:	499a      	ldr	r1, [pc, #616]	; (8100d68 <main+0x5e4>)
 8100b00:	4896      	ldr	r0, [pc, #600]	; (8100d5c <main+0x5d8>)
 8100b02:	f005 ff6d 	bl	81069e0 <siprintf>
					  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),30);
 8100b06:	4895      	ldr	r0, [pc, #596]	; (8100d5c <main+0x5d8>)
 8100b08:	f7ff fbea 	bl	81002e0 <strlen>
 8100b0c:	4603      	mov	r3, r0
 8100b0e:	b29a      	uxth	r2, r3
 8100b10:	231e      	movs	r3, #30
 8100b12:	4992      	ldr	r1, [pc, #584]	; (8100d5c <main+0x5d8>)
 8100b14:	4892      	ldr	r0, [pc, #584]	; (8100d60 <main+0x5dc>)
 8100b16:	f004 fe6d 	bl	81057f4 <HAL_UART_Transmit>
				  }
				  break;
 8100b1a:	e17e      	b.n	8100e1a <main+0x696>

			  case action: //// score process and print UART

				  switch(flag_btns){
 8100b1c:	4b8b      	ldr	r3, [pc, #556]	; (8100d4c <main+0x5c8>)
 8100b1e:	781b      	ldrb	r3, [r3, #0]
 8100b20:	3b01      	subs	r3, #1
 8100b22:	2b03      	cmp	r3, #3
 8100b24:	f200 80f6 	bhi.w	8100d14 <main+0x590>
 8100b28:	a201      	add	r2, pc, #4	; (adr r2, 8100b30 <main+0x3ac>)
 8100b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100b2e:	bf00      	nop
 8100b30:	08100b41 	.word	0x08100b41
 8100b34:	08100bb3 	.word	0x08100bb3
 8100b38:	08100c2b 	.word	0x08100c2b
 8100b3c:	08100c9f 	.word	0x08100c9f
				  default:
					  break;
				  case 1:
					  chk = rnx.u1.r0 + rnx.u1.r1;
 8100b40:	4b8a      	ldr	r3, [pc, #552]	; (8100d6c <main+0x5e8>)
 8100b42:	781b      	ldrb	r3, [r3, #0]
 8100b44:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8100b48:	b2db      	uxtb	r3, r3
 8100b4a:	461a      	mov	r2, r3
 8100b4c:	4b87      	ldr	r3, [pc, #540]	; (8100d6c <main+0x5e8>)
 8100b4e:	781b      	ldrb	r3, [r3, #0]
 8100b50:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8100b54:	b2db      	uxtb	r3, r3
 8100b56:	4413      	add	r3, r2
 8100b58:	b2da      	uxtb	r2, r3
 8100b5a:	4b85      	ldr	r3, [pc, #532]	; (8100d70 <main+0x5ec>)
 8100b5c:	701a      	strb	r2, [r3, #0]
					  score_counter();
 8100b5e:	f000 fc11 	bl	8101384 <score_counter>
					  rnx.u1.r0 = 0; rnx.u1.r1 = 0;
 8100b62:	4a82      	ldr	r2, [pc, #520]	; (8100d6c <main+0x5e8>)
 8100b64:	7813      	ldrb	r3, [r2, #0]
 8100b66:	f36f 13c7 	bfc	r3, #7, #1
 8100b6a:	7013      	strb	r3, [r2, #0]
 8100b6c:	4a7f      	ldr	r2, [pc, #508]	; (8100d6c <main+0x5e8>)
 8100b6e:	7813      	ldrb	r3, [r2, #0]
 8100b70:	f36f 1386 	bfc	r3, #6, #1
 8100b74:	7013      	strb	r3, [r2, #0]
					  HAL_GPIO_WritePin(LED_D7_GPIO_Port, LED_D7_Pin, !(rnx.u1.r0));
 8100b76:	4b7d      	ldr	r3, [pc, #500]	; (8100d6c <main+0x5e8>)
 8100b78:	781b      	ldrb	r3, [r3, #0]
 8100b7a:	b25b      	sxtb	r3, r3
 8100b7c:	43db      	mvns	r3, r3
 8100b7e:	b2db      	uxtb	r3, r3
 8100b80:	09db      	lsrs	r3, r3, #7
 8100b82:	b2db      	uxtb	r3, r3
 8100b84:	461a      	mov	r2, r3
 8100b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8100b8a:	487a      	ldr	r0, [pc, #488]	; (8100d74 <main+0x5f0>)
 8100b8c:	f002 f810 	bl	8102bb0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_D8_GPIO_Port, LED_D8_Pin, !(rnx.u1.r1));
 8100b90:	4b76      	ldr	r3, [pc, #472]	; (8100d6c <main+0x5e8>)
 8100b92:	781b      	ldrb	r3, [r3, #0]
 8100b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100b98:	b2db      	uxtb	r3, r3
 8100b9a:	2b00      	cmp	r3, #0
 8100b9c:	bf0c      	ite	eq
 8100b9e:	2301      	moveq	r3, #1
 8100ba0:	2300      	movne	r3, #0
 8100ba2:	b2db      	uxtb	r3, r3
 8100ba4:	461a      	mov	r2, r3
 8100ba6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8100baa:	4872      	ldr	r0, [pc, #456]	; (8100d74 <main+0x5f0>)
 8100bac:	f002 f800 	bl	8102bb0 <HAL_GPIO_WritePin>
					  break;
 8100bb0:	e0b1      	b.n	8100d16 <main+0x592>
				  case 2:
					  chk = rnx.u1.r2 + rnx.u1.r3;
 8100bb2:	4b6e      	ldr	r3, [pc, #440]	; (8100d6c <main+0x5e8>)
 8100bb4:	781b      	ldrb	r3, [r3, #0]
 8100bb6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8100bba:	b2db      	uxtb	r3, r3
 8100bbc:	461a      	mov	r2, r3
 8100bbe:	4b6b      	ldr	r3, [pc, #428]	; (8100d6c <main+0x5e8>)
 8100bc0:	781b      	ldrb	r3, [r3, #0]
 8100bc2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8100bc6:	b2db      	uxtb	r3, r3
 8100bc8:	4413      	add	r3, r2
 8100bca:	b2da      	uxtb	r2, r3
 8100bcc:	4b68      	ldr	r3, [pc, #416]	; (8100d70 <main+0x5ec>)
 8100bce:	701a      	strb	r2, [r3, #0]
					  score_counter();
 8100bd0:	f000 fbd8 	bl	8101384 <score_counter>
					  rnx.u1.r2 = 0; rnx.u1.r3 = 0;
 8100bd4:	4a65      	ldr	r2, [pc, #404]	; (8100d6c <main+0x5e8>)
 8100bd6:	7813      	ldrb	r3, [r2, #0]
 8100bd8:	f36f 1345 	bfc	r3, #5, #1
 8100bdc:	7013      	strb	r3, [r2, #0]
 8100bde:	4a63      	ldr	r2, [pc, #396]	; (8100d6c <main+0x5e8>)
 8100be0:	7813      	ldrb	r3, [r2, #0]
 8100be2:	f36f 1304 	bfc	r3, #4, #1
 8100be6:	7013      	strb	r3, [r2, #0]
					  HAL_GPIO_WritePin(LED_D9_GPIO_Port, LED_D9_Pin, !(rnx.u1.r2));
 8100be8:	4b60      	ldr	r3, [pc, #384]	; (8100d6c <main+0x5e8>)
 8100bea:	781b      	ldrb	r3, [r3, #0]
 8100bec:	f003 0320 	and.w	r3, r3, #32
 8100bf0:	b2db      	uxtb	r3, r3
 8100bf2:	2b00      	cmp	r3, #0
 8100bf4:	bf0c      	ite	eq
 8100bf6:	2301      	moveq	r3, #1
 8100bf8:	2300      	movne	r3, #0
 8100bfa:	b2db      	uxtb	r3, r3
 8100bfc:	461a      	mov	r2, r3
 8100bfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8100c02:	485d      	ldr	r0, [pc, #372]	; (8100d78 <main+0x5f4>)
 8100c04:	f001 ffd4 	bl	8102bb0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_D10_GPIO_Port, LED_D10_Pin, !(rnx.u1.r3));
 8100c08:	4b58      	ldr	r3, [pc, #352]	; (8100d6c <main+0x5e8>)
 8100c0a:	781b      	ldrb	r3, [r3, #0]
 8100c0c:	f003 0310 	and.w	r3, r3, #16
 8100c10:	b2db      	uxtb	r3, r3
 8100c12:	2b00      	cmp	r3, #0
 8100c14:	bf0c      	ite	eq
 8100c16:	2301      	moveq	r3, #1
 8100c18:	2300      	movne	r3, #0
 8100c1a:	b2db      	uxtb	r3, r3
 8100c1c:	461a      	mov	r2, r3
 8100c1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8100c22:	4855      	ldr	r0, [pc, #340]	; (8100d78 <main+0x5f4>)
 8100c24:	f001 ffc4 	bl	8102bb0 <HAL_GPIO_WritePin>
					  break;
 8100c28:	e075      	b.n	8100d16 <main+0x592>
				  case 3:
					  chk = rnx.u1.r4 + rnx.u1.r5;
 8100c2a:	4b50      	ldr	r3, [pc, #320]	; (8100d6c <main+0x5e8>)
 8100c2c:	781b      	ldrb	r3, [r3, #0]
 8100c2e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8100c32:	b2db      	uxtb	r3, r3
 8100c34:	461a      	mov	r2, r3
 8100c36:	4b4d      	ldr	r3, [pc, #308]	; (8100d6c <main+0x5e8>)
 8100c38:	781b      	ldrb	r3, [r3, #0]
 8100c3a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8100c3e:	b2db      	uxtb	r3, r3
 8100c40:	4413      	add	r3, r2
 8100c42:	b2da      	uxtb	r2, r3
 8100c44:	4b4a      	ldr	r3, [pc, #296]	; (8100d70 <main+0x5ec>)
 8100c46:	701a      	strb	r2, [r3, #0]
					  score_counter();
 8100c48:	f000 fb9c 	bl	8101384 <score_counter>
					  rnx.u1.r4 = 0; rnx.u1.r5 = 0;
 8100c4c:	4a47      	ldr	r2, [pc, #284]	; (8100d6c <main+0x5e8>)
 8100c4e:	7813      	ldrb	r3, [r2, #0]
 8100c50:	f36f 03c3 	bfc	r3, #3, #1
 8100c54:	7013      	strb	r3, [r2, #0]
 8100c56:	4a45      	ldr	r2, [pc, #276]	; (8100d6c <main+0x5e8>)
 8100c58:	7813      	ldrb	r3, [r2, #0]
 8100c5a:	f36f 0382 	bfc	r3, #2, #1
 8100c5e:	7013      	strb	r3, [r2, #0]
					  HAL_GPIO_WritePin(LED_D11_GPIO_Port, LED_D11_Pin, !(rnx.u1.r4));
 8100c60:	4b42      	ldr	r3, [pc, #264]	; (8100d6c <main+0x5e8>)
 8100c62:	781b      	ldrb	r3, [r3, #0]
 8100c64:	f003 0308 	and.w	r3, r3, #8
 8100c68:	b2db      	uxtb	r3, r3
 8100c6a:	2b00      	cmp	r3, #0
 8100c6c:	bf0c      	ite	eq
 8100c6e:	2301      	moveq	r3, #1
 8100c70:	2300      	movne	r3, #0
 8100c72:	b2db      	uxtb	r3, r3
 8100c74:	461a      	mov	r2, r3
 8100c76:	2120      	movs	r1, #32
 8100c78:	4840      	ldr	r0, [pc, #256]	; (8100d7c <main+0x5f8>)
 8100c7a:	f001 ff99 	bl	8102bb0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_D12_GPIO_Port, LED_D12_Pin, !(rnx.u1.r5));
 8100c7e:	4b3b      	ldr	r3, [pc, #236]	; (8100d6c <main+0x5e8>)
 8100c80:	781b      	ldrb	r3, [r3, #0]
 8100c82:	f003 0304 	and.w	r3, r3, #4
 8100c86:	b2db      	uxtb	r3, r3
 8100c88:	2b00      	cmp	r3, #0
 8100c8a:	bf0c      	ite	eq
 8100c8c:	2301      	moveq	r3, #1
 8100c8e:	2300      	movne	r3, #0
 8100c90:	b2db      	uxtb	r3, r3
 8100c92:	461a      	mov	r2, r3
 8100c94:	2140      	movs	r1, #64	; 0x40
 8100c96:	483a      	ldr	r0, [pc, #232]	; (8100d80 <main+0x5fc>)
 8100c98:	f001 ff8a 	bl	8102bb0 <HAL_GPIO_WritePin>
				  	  break;
 8100c9c:	e03b      	b.n	8100d16 <main+0x592>
				  case 4:
					  chk = rnx.u1.r6 + rnx.u1.r7;
 8100c9e:	4b33      	ldr	r3, [pc, #204]	; (8100d6c <main+0x5e8>)
 8100ca0:	781b      	ldrb	r3, [r3, #0]
 8100ca2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8100ca6:	b2db      	uxtb	r3, r3
 8100ca8:	461a      	mov	r2, r3
 8100caa:	4b30      	ldr	r3, [pc, #192]	; (8100d6c <main+0x5e8>)
 8100cac:	781b      	ldrb	r3, [r3, #0]
 8100cae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8100cb2:	b2db      	uxtb	r3, r3
 8100cb4:	4413      	add	r3, r2
 8100cb6:	b2da      	uxtb	r2, r3
 8100cb8:	4b2d      	ldr	r3, [pc, #180]	; (8100d70 <main+0x5ec>)
 8100cba:	701a      	strb	r2, [r3, #0]
					  score_counter();
 8100cbc:	f000 fb62 	bl	8101384 <score_counter>
					  rnx.u1.r6 = 0; rnx.u1.r7 = 0;
 8100cc0:	4a2a      	ldr	r2, [pc, #168]	; (8100d6c <main+0x5e8>)
 8100cc2:	7813      	ldrb	r3, [r2, #0]
 8100cc4:	f36f 0341 	bfc	r3, #1, #1
 8100cc8:	7013      	strb	r3, [r2, #0]
 8100cca:	4a28      	ldr	r2, [pc, #160]	; (8100d6c <main+0x5e8>)
 8100ccc:	7813      	ldrb	r3, [r2, #0]
 8100cce:	f36f 0300 	bfc	r3, #0, #1
 8100cd2:	7013      	strb	r3, [r2, #0]
					  HAL_GPIO_WritePin(LED_D13_GPIO_Port, LED_D13_Pin, !(rnx.u1.r6));
 8100cd4:	4b25      	ldr	r3, [pc, #148]	; (8100d6c <main+0x5e8>)
 8100cd6:	781b      	ldrb	r3, [r3, #0]
 8100cd8:	f003 0302 	and.w	r3, r3, #2
 8100cdc:	b2db      	uxtb	r3, r3
 8100cde:	2b00      	cmp	r3, #0
 8100ce0:	bf0c      	ite	eq
 8100ce2:	2301      	moveq	r3, #1
 8100ce4:	2300      	movne	r3, #0
 8100ce6:	b2db      	uxtb	r3, r3
 8100ce8:	461a      	mov	r2, r3
 8100cea:	2120      	movs	r1, #32
 8100cec:	4824      	ldr	r0, [pc, #144]	; (8100d80 <main+0x5fc>)
 8100cee:	f001 ff5f 	bl	8102bb0 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED_D14_GPIO_Port, LED_D14_Pin, !(rnx.u1.r7));
 8100cf2:	4b1e      	ldr	r3, [pc, #120]	; (8100d6c <main+0x5e8>)
 8100cf4:	781b      	ldrb	r3, [r3, #0]
 8100cf6:	f003 0301 	and.w	r3, r3, #1
 8100cfa:	b2db      	uxtb	r3, r3
 8100cfc:	2b00      	cmp	r3, #0
 8100cfe:	bf0c      	ite	eq
 8100d00:	2301      	moveq	r3, #1
 8100d02:	2300      	movne	r3, #0
 8100d04:	b2db      	uxtb	r3, r3
 8100d06:	461a      	mov	r2, r3
 8100d08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8100d0c:	481b      	ldr	r0, [pc, #108]	; (8100d7c <main+0x5f8>)
 8100d0e:	f001 ff4f 	bl	8102bb0 <HAL_GPIO_WritePin>
				  	  break;
 8100d12:	e000      	b.n	8100d16 <main+0x592>
					  break;
 8100d14:	bf00      	nop
				  }

				 sprintf(txtUARTBF, "score = %d \r\n",score);
 8100d16:	4b0f      	ldr	r3, [pc, #60]	; (8100d54 <main+0x5d0>)
 8100d18:	681b      	ldr	r3, [r3, #0]
 8100d1a:	461a      	mov	r2, r3
 8100d1c:	4919      	ldr	r1, [pc, #100]	; (8100d84 <main+0x600>)
 8100d1e:	480f      	ldr	r0, [pc, #60]	; (8100d5c <main+0x5d8>)
 8100d20:	f005 fe5e 	bl	81069e0 <siprintf>
				 HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),30);
 8100d24:	480d      	ldr	r0, [pc, #52]	; (8100d5c <main+0x5d8>)
 8100d26:	f7ff fadb 	bl	81002e0 <strlen>
 8100d2a:	4603      	mov	r3, r0
 8100d2c:	b29a      	uxth	r2, r3
 8100d2e:	231e      	movs	r3, #30
 8100d30:	490a      	ldr	r1, [pc, #40]	; (8100d5c <main+0x5d8>)
 8100d32:	480b      	ldr	r0, [pc, #44]	; (8100d60 <main+0x5dc>)
 8100d34:	f004 fd5e 	bl	81057f4 <HAL_UART_Transmit>
				 HAL_Delay(100);
 8100d38:	2064      	movs	r0, #100	; 0x64
 8100d3a:	f000 feab 	bl	8101a94 <HAL_Delay>

				  flag_btns = 0;
 8100d3e:	4b03      	ldr	r3, [pc, #12]	; (8100d4c <main+0x5c8>)
 8100d40:	2200      	movs	r2, #0
 8100d42:	701a      	strb	r2, [r3, #0]
				  gameState = playing;
 8100d44:	4b02      	ldr	r3, [pc, #8]	; (8100d50 <main+0x5cc>)
 8100d46:	2202      	movs	r2, #2
 8100d48:	701a      	strb	r2, [r3, #0]
				  break;
 8100d4a:	e069      	b.n	8100e20 <main+0x69c>
 8100d4c:	1000029d 	.word	0x1000029d
 8100d50:	100002a5 	.word	0x100002a5
 8100d54:	100002a0 	.word	0x100002a0
 8100d58:	081073c8 	.word	0x081073c8
 8100d5c:	100002c0 	.word	0x100002c0
 8100d60:	10000118 	.word	0x10000118
 8100d64:	10000008 	.word	0x10000008
 8100d68:	08107400 	.word	0x08107400
 8100d6c:	1000029c 	.word	0x1000029c
 8100d70:	1000029e 	.word	0x1000029e
 8100d74:	58021800 	.word	0x58021800
 8100d78:	58020c00 	.word	0x58020c00
 8100d7c:	58020400 	.word	0x58020400
 8100d80:	58020000 	.word	0x58020000
 8100d84:	08107440 	.word	0x08107440

			  case end:

				  if (score >= Score_WIN){
 8100d88:	4b6a      	ldr	r3, [pc, #424]	; (8100f34 <main+0x7b0>)
 8100d8a:	681b      	ldr	r3, [r3, #0]
 8100d8c:	2b09      	cmp	r3, #9
 8100d8e:	dd16      	ble.n	8100dbe <main+0x63a>

				  	 runo++;
 8100d90:	4b69      	ldr	r3, [pc, #420]	; (8100f38 <main+0x7b4>)
 8100d92:	781b      	ldrb	r3, [r3, #0]
 8100d94:	3301      	adds	r3, #1
 8100d96:	b2da      	uxtb	r2, r3
 8100d98:	4b67      	ldr	r3, [pc, #412]	; (8100f38 <main+0x7b4>)
 8100d9a:	701a      	strb	r2, [r3, #0]
				  	 runo%=8;
 8100d9c:	4b66      	ldr	r3, [pc, #408]	; (8100f38 <main+0x7b4>)
 8100d9e:	781b      	ldrb	r3, [r3, #0]
 8100da0:	f003 0307 	and.w	r3, r3, #7
 8100da4:	b2da      	uxtb	r2, r3
 8100da6:	4b64      	ldr	r3, [pc, #400]	; (8100f38 <main+0x7b4>)
 8100da8:	701a      	strb	r2, [r3, #0]
				  	 rnx.u8 = (uint8_t)(0xff - (1 << runo));
 8100daa:	4b63      	ldr	r3, [pc, #396]	; (8100f38 <main+0x7b4>)
 8100dac:	781b      	ldrb	r3, [r3, #0]
 8100dae:	461a      	mov	r2, r3
 8100db0:	2301      	movs	r3, #1
 8100db2:	4093      	lsls	r3, r2
 8100db4:	b2db      	uxtb	r3, r3
 8100db6:	43db      	mvns	r3, r3
 8100db8:	b2da      	uxtb	r2, r3
 8100dba:	4b60      	ldr	r3, [pc, #384]	; (8100f3c <main+0x7b8>)
 8100dbc:	701a      	strb	r2, [r3, #0]
				  }

				  if (score <= 0){
 8100dbe:	4b5d      	ldr	r3, [pc, #372]	; (8100f34 <main+0x7b0>)
 8100dc0:	681b      	ldr	r3, [r3, #0]
 8100dc2:	2b00      	cmp	r3, #0
 8100dc4:	dc15      	bgt.n	8100df2 <main+0x66e>
					  runo++;
 8100dc6:	4b5c      	ldr	r3, [pc, #368]	; (8100f38 <main+0x7b4>)
 8100dc8:	781b      	ldrb	r3, [r3, #0]
 8100dca:	3301      	adds	r3, #1
 8100dcc:	b2da      	uxtb	r2, r3
 8100dce:	4b5a      	ldr	r3, [pc, #360]	; (8100f38 <main+0x7b4>)
 8100dd0:	701a      	strb	r2, [r3, #0]
					  runo%=2;
 8100dd2:	4b59      	ldr	r3, [pc, #356]	; (8100f38 <main+0x7b4>)
 8100dd4:	781b      	ldrb	r3, [r3, #0]
 8100dd6:	f003 0301 	and.w	r3, r3, #1
 8100dda:	b2da      	uxtb	r2, r3
 8100ddc:	4b56      	ldr	r3, [pc, #344]	; (8100f38 <main+0x7b4>)
 8100dde:	701a      	strb	r2, [r3, #0]
					  rnx.u8 = (runo>0)? 0xff:0x00;
 8100de0:	4b55      	ldr	r3, [pc, #340]	; (8100f38 <main+0x7b4>)
 8100de2:	781b      	ldrb	r3, [r3, #0]
 8100de4:	2b00      	cmp	r3, #0
 8100de6:	d001      	beq.n	8100dec <main+0x668>
 8100de8:	22ff      	movs	r2, #255	; 0xff
 8100dea:	e000      	b.n	8100dee <main+0x66a>
 8100dec:	2200      	movs	r2, #0
 8100dee:	4b53      	ldr	r3, [pc, #332]	; (8100f3c <main+0x7b8>)
 8100df0:	701a      	strb	r2, [r3, #0]
				  }


				  if(SRAM4->flag_blue_btn == 1){
 8100df2:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8100df6:	781b      	ldrb	r3, [r3, #0]
 8100df8:	2b01      	cmp	r3, #1
 8100dfa:	d110      	bne.n	8100e1e <main+0x69a>

					  timetrig_one = 200; // change state's speed for LED running back
 8100dfc:	4b50      	ldr	r3, [pc, #320]	; (8100f40 <main+0x7bc>)
 8100dfe:	22c8      	movs	r2, #200	; 0xc8
 8100e00:	801a      	strh	r2, [r3, #0]
					  SRAM4->flag_blue_btn = 0;
 8100e02:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8100e06:	2200      	movs	r2, #0
 8100e08:	701a      	strb	r2, [r3, #0]
					  gameState = start;
 8100e0a:	4b4e      	ldr	r3, [pc, #312]	; (8100f44 <main+0x7c0>)
 8100e0c:	2200      	movs	r2, #0
 8100e0e:	701a      	strb	r2, [r3, #0]
				  	}
				  break;
 8100e10:	e005      	b.n	8100e1e <main+0x69a>
			  }


		  }
 8100e12:	bf00      	nop
 8100e14:	e004      	b.n	8100e20 <main+0x69c>
				  break;
 8100e16:	bf00      	nop
 8100e18:	e002      	b.n	8100e20 <main+0x69c>
				  break;
 8100e1a:	bf00      	nop
 8100e1c:	e000      	b.n	8100e20 <main+0x69c>
				  break;
 8100e1e:	bf00      	nop

	  //// LED Moles writer
	  if(HAL_GetTick() - timestamp_one[2] >= 100){
 8100e20:	f000 fe2c 	bl	8101a7c <HAL_GetTick>
 8100e24:	4602      	mov	r2, r0
 8100e26:	4b48      	ldr	r3, [pc, #288]	; (8100f48 <main+0x7c4>)
 8100e28:	689b      	ldr	r3, [r3, #8]
 8100e2a:	1ad3      	subs	r3, r2, r3
 8100e2c:	2b63      	cmp	r3, #99	; 0x63
 8100e2e:	f67f ad06 	bls.w	810083e <main+0xba>
		  timestamp_one[2] = HAL_GetTick();
 8100e32:	f000 fe23 	bl	8101a7c <HAL_GetTick>
 8100e36:	4603      	mov	r3, r0
 8100e38:	4a43      	ldr	r2, [pc, #268]	; (8100f48 <main+0x7c4>)
 8100e3a:	6093      	str	r3, [r2, #8]


		  HAL_GPIO_WritePin(LED_D7_GPIO_Port, LED_D7_Pin, !(rnx.u1.r0));
 8100e3c:	4b3f      	ldr	r3, [pc, #252]	; (8100f3c <main+0x7b8>)
 8100e3e:	781b      	ldrb	r3, [r3, #0]
 8100e40:	b25b      	sxtb	r3, r3
 8100e42:	43db      	mvns	r3, r3
 8100e44:	b2db      	uxtb	r3, r3
 8100e46:	09db      	lsrs	r3, r3, #7
 8100e48:	b2db      	uxtb	r3, r3
 8100e4a:	461a      	mov	r2, r3
 8100e4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8100e50:	483e      	ldr	r0, [pc, #248]	; (8100f4c <main+0x7c8>)
 8100e52:	f001 fead 	bl	8102bb0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_D8_GPIO_Port, LED_D8_Pin, !(rnx.u1.r1));
 8100e56:	4b39      	ldr	r3, [pc, #228]	; (8100f3c <main+0x7b8>)
 8100e58:	781b      	ldrb	r3, [r3, #0]
 8100e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100e5e:	b2db      	uxtb	r3, r3
 8100e60:	2b00      	cmp	r3, #0
 8100e62:	bf0c      	ite	eq
 8100e64:	2301      	moveq	r3, #1
 8100e66:	2300      	movne	r3, #0
 8100e68:	b2db      	uxtb	r3, r3
 8100e6a:	461a      	mov	r2, r3
 8100e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8100e70:	4836      	ldr	r0, [pc, #216]	; (8100f4c <main+0x7c8>)
 8100e72:	f001 fe9d 	bl	8102bb0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_D9_GPIO_Port, LED_D9_Pin, !(rnx.u1.r2));
 8100e76:	4b31      	ldr	r3, [pc, #196]	; (8100f3c <main+0x7b8>)
 8100e78:	781b      	ldrb	r3, [r3, #0]
 8100e7a:	f003 0320 	and.w	r3, r3, #32
 8100e7e:	b2db      	uxtb	r3, r3
 8100e80:	2b00      	cmp	r3, #0
 8100e82:	bf0c      	ite	eq
 8100e84:	2301      	moveq	r3, #1
 8100e86:	2300      	movne	r3, #0
 8100e88:	b2db      	uxtb	r3, r3
 8100e8a:	461a      	mov	r2, r3
 8100e8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8100e90:	482f      	ldr	r0, [pc, #188]	; (8100f50 <main+0x7cc>)
 8100e92:	f001 fe8d 	bl	8102bb0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_D10_GPIO_Port, LED_D10_Pin, !(rnx.u1.r3));
 8100e96:	4b29      	ldr	r3, [pc, #164]	; (8100f3c <main+0x7b8>)
 8100e98:	781b      	ldrb	r3, [r3, #0]
 8100e9a:	f003 0310 	and.w	r3, r3, #16
 8100e9e:	b2db      	uxtb	r3, r3
 8100ea0:	2b00      	cmp	r3, #0
 8100ea2:	bf0c      	ite	eq
 8100ea4:	2301      	moveq	r3, #1
 8100ea6:	2300      	movne	r3, #0
 8100ea8:	b2db      	uxtb	r3, r3
 8100eaa:	461a      	mov	r2, r3
 8100eac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8100eb0:	4827      	ldr	r0, [pc, #156]	; (8100f50 <main+0x7cc>)
 8100eb2:	f001 fe7d 	bl	8102bb0 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(LED_D11_GPIO_Port, LED_D11_Pin, !(rnx.u1.r4));
 8100eb6:	4b21      	ldr	r3, [pc, #132]	; (8100f3c <main+0x7b8>)
 8100eb8:	781b      	ldrb	r3, [r3, #0]
 8100eba:	f003 0308 	and.w	r3, r3, #8
 8100ebe:	b2db      	uxtb	r3, r3
 8100ec0:	2b00      	cmp	r3, #0
 8100ec2:	bf0c      	ite	eq
 8100ec4:	2301      	moveq	r3, #1
 8100ec6:	2300      	movne	r3, #0
 8100ec8:	b2db      	uxtb	r3, r3
 8100eca:	461a      	mov	r2, r3
 8100ecc:	2120      	movs	r1, #32
 8100ece:	4821      	ldr	r0, [pc, #132]	; (8100f54 <main+0x7d0>)
 8100ed0:	f001 fe6e 	bl	8102bb0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_D12_GPIO_Port, LED_D12_Pin, !(rnx.u1.r5));
 8100ed4:	4b19      	ldr	r3, [pc, #100]	; (8100f3c <main+0x7b8>)
 8100ed6:	781b      	ldrb	r3, [r3, #0]
 8100ed8:	f003 0304 	and.w	r3, r3, #4
 8100edc:	b2db      	uxtb	r3, r3
 8100ede:	2b00      	cmp	r3, #0
 8100ee0:	bf0c      	ite	eq
 8100ee2:	2301      	moveq	r3, #1
 8100ee4:	2300      	movne	r3, #0
 8100ee6:	b2db      	uxtb	r3, r3
 8100ee8:	461a      	mov	r2, r3
 8100eea:	2140      	movs	r1, #64	; 0x40
 8100eec:	481a      	ldr	r0, [pc, #104]	; (8100f58 <main+0x7d4>)
 8100eee:	f001 fe5f 	bl	8102bb0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_D13_GPIO_Port, LED_D13_Pin, !(rnx.u1.r6));
 8100ef2:	4b12      	ldr	r3, [pc, #72]	; (8100f3c <main+0x7b8>)
 8100ef4:	781b      	ldrb	r3, [r3, #0]
 8100ef6:	f003 0302 	and.w	r3, r3, #2
 8100efa:	b2db      	uxtb	r3, r3
 8100efc:	2b00      	cmp	r3, #0
 8100efe:	bf0c      	ite	eq
 8100f00:	2301      	moveq	r3, #1
 8100f02:	2300      	movne	r3, #0
 8100f04:	b2db      	uxtb	r3, r3
 8100f06:	461a      	mov	r2, r3
 8100f08:	2120      	movs	r1, #32
 8100f0a:	4813      	ldr	r0, [pc, #76]	; (8100f58 <main+0x7d4>)
 8100f0c:	f001 fe50 	bl	8102bb0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_D14_GPIO_Port, LED_D14_Pin, !(rnx.u1.r7));
 8100f10:	4b0a      	ldr	r3, [pc, #40]	; (8100f3c <main+0x7b8>)
 8100f12:	781b      	ldrb	r3, [r3, #0]
 8100f14:	f003 0301 	and.w	r3, r3, #1
 8100f18:	b2db      	uxtb	r3, r3
 8100f1a:	2b00      	cmp	r3, #0
 8100f1c:	bf0c      	ite	eq
 8100f1e:	2301      	moveq	r3, #1
 8100f20:	2300      	movne	r3, #0
 8100f22:	b2db      	uxtb	r3, r3
 8100f24:	461a      	mov	r2, r3
 8100f26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8100f2a:	480a      	ldr	r0, [pc, #40]	; (8100f54 <main+0x7d0>)
 8100f2c:	f001 fe40 	bl	8102bb0 <HAL_GPIO_WritePin>
	  if(HAL_GetTick() - timestamp_one[1] >= timetrig_one){
 8100f30:	e485      	b.n	810083e <main+0xba>
 8100f32:	bf00      	nop
 8100f34:	100002a0 	.word	0x100002a0
 8100f38:	100002a4 	.word	0x100002a4
 8100f3c:	1000029c 	.word	0x1000029c
 8100f40:	10000008 	.word	0x10000008
 8100f44:	100002a5 	.word	0x100002a5
 8100f48:	10000324 	.word	0x10000324
 8100f4c:	58021800 	.word	0x58021800
 8100f50:	58020c00 	.word	0x58020c00
 8100f54:	58020400 	.word	0x58020400
 8100f58:	58020000 	.word	0x58020000

08100f5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8100f5c:	b580      	push	{r7, lr}
 8100f5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8100f60:	4b1b      	ldr	r3, [pc, #108]	; (8100fd0 <MX_I2C2_Init+0x74>)
 8100f62:	4a1c      	ldr	r2, [pc, #112]	; (8100fd4 <MX_I2C2_Init+0x78>)
 8100f64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8100f66:	4b1a      	ldr	r3, [pc, #104]	; (8100fd0 <MX_I2C2_Init+0x74>)
 8100f68:	4a1b      	ldr	r2, [pc, #108]	; (8100fd8 <MX_I2C2_Init+0x7c>)
 8100f6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8100f6c:	4b18      	ldr	r3, [pc, #96]	; (8100fd0 <MX_I2C2_Init+0x74>)
 8100f6e:	2200      	movs	r2, #0
 8100f70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100f72:	4b17      	ldr	r3, [pc, #92]	; (8100fd0 <MX_I2C2_Init+0x74>)
 8100f74:	2201      	movs	r2, #1
 8100f76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100f78:	4b15      	ldr	r3, [pc, #84]	; (8100fd0 <MX_I2C2_Init+0x74>)
 8100f7a:	2200      	movs	r2, #0
 8100f7c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8100f7e:	4b14      	ldr	r3, [pc, #80]	; (8100fd0 <MX_I2C2_Init+0x74>)
 8100f80:	2200      	movs	r2, #0
 8100f82:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100f84:	4b12      	ldr	r3, [pc, #72]	; (8100fd0 <MX_I2C2_Init+0x74>)
 8100f86:	2200      	movs	r2, #0
 8100f88:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100f8a:	4b11      	ldr	r3, [pc, #68]	; (8100fd0 <MX_I2C2_Init+0x74>)
 8100f8c:	2200      	movs	r2, #0
 8100f8e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100f90:	4b0f      	ldr	r3, [pc, #60]	; (8100fd0 <MX_I2C2_Init+0x74>)
 8100f92:	2200      	movs	r2, #0
 8100f94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8100f96:	480e      	ldr	r0, [pc, #56]	; (8100fd0 <MX_I2C2_Init+0x74>)
 8100f98:	f001 fe6a 	bl	8102c70 <HAL_I2C_Init>
 8100f9c:	4603      	mov	r3, r0
 8100f9e:	2b00      	cmp	r3, #0
 8100fa0:	d001      	beq.n	8100fa6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8100fa2:	f000 fad3 	bl	810154c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100fa6:	2100      	movs	r1, #0
 8100fa8:	4809      	ldr	r0, [pc, #36]	; (8100fd0 <MX_I2C2_Init+0x74>)
 8100faa:	f002 fa5d 	bl	8103468 <HAL_I2CEx_ConfigAnalogFilter>
 8100fae:	4603      	mov	r3, r0
 8100fb0:	2b00      	cmp	r3, #0
 8100fb2:	d001      	beq.n	8100fb8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8100fb4:	f000 faca 	bl	810154c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8100fb8:	2100      	movs	r1, #0
 8100fba:	4805      	ldr	r0, [pc, #20]	; (8100fd0 <MX_I2C2_Init+0x74>)
 8100fbc:	f002 fa9f 	bl	81034fe <HAL_I2CEx_ConfigDigitalFilter>
 8100fc0:	4603      	mov	r3, r0
 8100fc2:	2b00      	cmp	r3, #0
 8100fc4:	d001      	beq.n	8100fca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8100fc6:	f000 fac1 	bl	810154c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8100fca:	bf00      	nop
 8100fcc:	bd80      	pop	{r7, pc}
 8100fce:	bf00      	nop
 8100fd0:	100000a8 	.word	0x100000a8
 8100fd4:	40005800 	.word	0x40005800
 8100fd8:	00b03fdb 	.word	0x00b03fdb

08100fdc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100fdc:	b580      	push	{r7, lr}
 8100fde:	b086      	sub	sp, #24
 8100fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8100fe2:	1d3b      	adds	r3, r7, #4
 8100fe4:	2200      	movs	r2, #0
 8100fe6:	601a      	str	r2, [r3, #0]
 8100fe8:	605a      	str	r2, [r3, #4]
 8100fea:	609a      	str	r2, [r3, #8]
 8100fec:	60da      	str	r2, [r3, #12]
 8100fee:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8100ff0:	2300      	movs	r3, #0
 8100ff2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100ff4:	4b25      	ldr	r3, [pc, #148]	; (810108c <MX_RTC_Init+0xb0>)
 8100ff6:	4a26      	ldr	r2, [pc, #152]	; (8101090 <MX_RTC_Init+0xb4>)
 8100ff8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100ffa:	4b24      	ldr	r3, [pc, #144]	; (810108c <MX_RTC_Init+0xb0>)
 8100ffc:	2200      	movs	r2, #0
 8100ffe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8101000:	4b22      	ldr	r3, [pc, #136]	; (810108c <MX_RTC_Init+0xb0>)
 8101002:	227f      	movs	r2, #127	; 0x7f
 8101004:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8101006:	4b21      	ldr	r3, [pc, #132]	; (810108c <MX_RTC_Init+0xb0>)
 8101008:	22ff      	movs	r2, #255	; 0xff
 810100a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 810100c:	4b1f      	ldr	r3, [pc, #124]	; (810108c <MX_RTC_Init+0xb0>)
 810100e:	2200      	movs	r2, #0
 8101010:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8101012:	4b1e      	ldr	r3, [pc, #120]	; (810108c <MX_RTC_Init+0xb0>)
 8101014:	2200      	movs	r2, #0
 8101016:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8101018:	4b1c      	ldr	r3, [pc, #112]	; (810108c <MX_RTC_Init+0xb0>)
 810101a:	2200      	movs	r2, #0
 810101c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 810101e:	4b1b      	ldr	r3, [pc, #108]	; (810108c <MX_RTC_Init+0xb0>)
 8101020:	2200      	movs	r2, #0
 8101022:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8101024:	4819      	ldr	r0, [pc, #100]	; (810108c <MX_RTC_Init+0xb0>)
 8101026:	f004 f87f 	bl	8105128 <HAL_RTC_Init>
 810102a:	4603      	mov	r3, r0
 810102c:	2b00      	cmp	r3, #0
 810102e:	d001      	beq.n	8101034 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8101030:	f000 fa8c 	bl	810154c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8101034:	2300      	movs	r3, #0
 8101036:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8101038:	2300      	movs	r3, #0
 810103a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 810103c:	2300      	movs	r3, #0
 810103e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8101040:	2300      	movs	r3, #0
 8101042:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8101044:	2300      	movs	r3, #0
 8101046:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8101048:	1d3b      	adds	r3, r7, #4
 810104a:	2201      	movs	r2, #1
 810104c:	4619      	mov	r1, r3
 810104e:	480f      	ldr	r0, [pc, #60]	; (810108c <MX_RTC_Init+0xb0>)
 8101050:	f004 f8e2 	bl	8105218 <HAL_RTC_SetTime>
 8101054:	4603      	mov	r3, r0
 8101056:	2b00      	cmp	r3, #0
 8101058:	d001      	beq.n	810105e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 810105a:	f000 fa77 	bl	810154c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 810105e:	2301      	movs	r3, #1
 8101060:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8101062:	2301      	movs	r3, #1
 8101064:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8101066:	2301      	movs	r3, #1
 8101068:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 810106a:	2300      	movs	r3, #0
 810106c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 810106e:	463b      	mov	r3, r7
 8101070:	2201      	movs	r2, #1
 8101072:	4619      	mov	r1, r3
 8101074:	4805      	ldr	r0, [pc, #20]	; (810108c <MX_RTC_Init+0xb0>)
 8101076:	f004 f9c8 	bl	810540a <HAL_RTC_SetDate>
 810107a:	4603      	mov	r3, r0
 810107c:	2b00      	cmp	r3, #0
 810107e:	d001      	beq.n	8101084 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8101080:	f000 fa64 	bl	810154c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8101084:	bf00      	nop
 8101086:	3718      	adds	r7, #24
 8101088:	46bd      	mov	sp, r7
 810108a:	bd80      	pop	{r7, pc}
 810108c:	100000f4 	.word	0x100000f4
 8101090:	58004000 	.word	0x58004000

08101094 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8101094:	b580      	push	{r7, lr}
 8101096:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101098:	4b22      	ldr	r3, [pc, #136]	; (8101124 <MX_USART3_UART_Init+0x90>)
 810109a:	4a23      	ldr	r2, [pc, #140]	; (8101128 <MX_USART3_UART_Init+0x94>)
 810109c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 810109e:	4b21      	ldr	r3, [pc, #132]	; (8101124 <MX_USART3_UART_Init+0x90>)
 81010a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 81010a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81010a6:	4b1f      	ldr	r3, [pc, #124]	; (8101124 <MX_USART3_UART_Init+0x90>)
 81010a8:	2200      	movs	r2, #0
 81010aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 81010ac:	4b1d      	ldr	r3, [pc, #116]	; (8101124 <MX_USART3_UART_Init+0x90>)
 81010ae:	2200      	movs	r2, #0
 81010b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 81010b2:	4b1c      	ldr	r3, [pc, #112]	; (8101124 <MX_USART3_UART_Init+0x90>)
 81010b4:	2200      	movs	r2, #0
 81010b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 81010b8:	4b1a      	ldr	r3, [pc, #104]	; (8101124 <MX_USART3_UART_Init+0x90>)
 81010ba:	220c      	movs	r2, #12
 81010bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81010be:	4b19      	ldr	r3, [pc, #100]	; (8101124 <MX_USART3_UART_Init+0x90>)
 81010c0:	2200      	movs	r2, #0
 81010c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81010c4:	4b17      	ldr	r3, [pc, #92]	; (8101124 <MX_USART3_UART_Init+0x90>)
 81010c6:	2200      	movs	r2, #0
 81010c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81010ca:	4b16      	ldr	r3, [pc, #88]	; (8101124 <MX_USART3_UART_Init+0x90>)
 81010cc:	2200      	movs	r2, #0
 81010ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81010d0:	4b14      	ldr	r3, [pc, #80]	; (8101124 <MX_USART3_UART_Init+0x90>)
 81010d2:	2200      	movs	r2, #0
 81010d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81010d6:	4b13      	ldr	r3, [pc, #76]	; (8101124 <MX_USART3_UART_Init+0x90>)
 81010d8:	2200      	movs	r2, #0
 81010da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81010dc:	4811      	ldr	r0, [pc, #68]	; (8101124 <MX_USART3_UART_Init+0x90>)
 81010de:	f004 fb39 	bl	8105754 <HAL_UART_Init>
 81010e2:	4603      	mov	r3, r0
 81010e4:	2b00      	cmp	r3, #0
 81010e6:	d001      	beq.n	81010ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81010e8:	f000 fa30 	bl	810154c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81010ec:	2100      	movs	r1, #0
 81010ee:	480d      	ldr	r0, [pc, #52]	; (8101124 <MX_USART3_UART_Init+0x90>)
 81010f0:	f005 fb6c 	bl	81067cc <HAL_UARTEx_SetTxFifoThreshold>
 81010f4:	4603      	mov	r3, r0
 81010f6:	2b00      	cmp	r3, #0
 81010f8:	d001      	beq.n	81010fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81010fa:	f000 fa27 	bl	810154c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81010fe:	2100      	movs	r1, #0
 8101100:	4808      	ldr	r0, [pc, #32]	; (8101124 <MX_USART3_UART_Init+0x90>)
 8101102:	f005 fba1 	bl	8106848 <HAL_UARTEx_SetRxFifoThreshold>
 8101106:	4603      	mov	r3, r0
 8101108:	2b00      	cmp	r3, #0
 810110a:	d001      	beq.n	8101110 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 810110c:	f000 fa1e 	bl	810154c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101110:	4804      	ldr	r0, [pc, #16]	; (8101124 <MX_USART3_UART_Init+0x90>)
 8101112:	f005 fb22 	bl	810675a <HAL_UARTEx_DisableFifoMode>
 8101116:	4603      	mov	r3, r0
 8101118:	2b00      	cmp	r3, #0
 810111a:	d001      	beq.n	8101120 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 810111c:	f000 fa16 	bl	810154c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8101120:	bf00      	nop
 8101122:	bd80      	pop	{r7, pc}
 8101124:	10000118 	.word	0x10000118
 8101128:	40004800 	.word	0x40004800

0810112c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 810112c:	b480      	push	{r7}
 810112e:	b083      	sub	sp, #12
 8101130:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101132:	4b0a      	ldr	r3, [pc, #40]	; (810115c <MX_DMA_Init+0x30>)
 8101134:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101138:	4a08      	ldr	r2, [pc, #32]	; (810115c <MX_DMA_Init+0x30>)
 810113a:	f043 0301 	orr.w	r3, r3, #1
 810113e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101142:	4b06      	ldr	r3, [pc, #24]	; (810115c <MX_DMA_Init+0x30>)
 8101144:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101148:	f003 0301 	and.w	r3, r3, #1
 810114c:	607b      	str	r3, [r7, #4]
 810114e:	687b      	ldr	r3, [r7, #4]

}
 8101150:	bf00      	nop
 8101152:	370c      	adds	r7, #12
 8101154:	46bd      	mov	sp, r7
 8101156:	f85d 7b04 	ldr.w	r7, [sp], #4
 810115a:	4770      	bx	lr
 810115c:	58024400 	.word	0x58024400

08101160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8101160:	b580      	push	{r7, lr}
 8101162:	b08a      	sub	sp, #40	; 0x28
 8101164:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101166:	f107 0314 	add.w	r3, r7, #20
 810116a:	2200      	movs	r2, #0
 810116c:	601a      	str	r2, [r3, #0]
 810116e:	605a      	str	r2, [r3, #4]
 8101170:	609a      	str	r2, [r3, #8]
 8101172:	60da      	str	r2, [r3, #12]
 8101174:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101176:	4b7d      	ldr	r3, [pc, #500]	; (810136c <MX_GPIO_Init+0x20c>)
 8101178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810117c:	4a7b      	ldr	r2, [pc, #492]	; (810136c <MX_GPIO_Init+0x20c>)
 810117e:	f043 0301 	orr.w	r3, r3, #1
 8101182:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101186:	4b79      	ldr	r3, [pc, #484]	; (810136c <MX_GPIO_Init+0x20c>)
 8101188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810118c:	f003 0301 	and.w	r3, r3, #1
 8101190:	613b      	str	r3, [r7, #16]
 8101192:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101194:	4b75      	ldr	r3, [pc, #468]	; (810136c <MX_GPIO_Init+0x20c>)
 8101196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810119a:	4a74      	ldr	r2, [pc, #464]	; (810136c <MX_GPIO_Init+0x20c>)
 810119c:	f043 0302 	orr.w	r3, r3, #2
 81011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011a4:	4b71      	ldr	r3, [pc, #452]	; (810136c <MX_GPIO_Init+0x20c>)
 81011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011aa:	f003 0302 	and.w	r3, r3, #2
 81011ae:	60fb      	str	r3, [r7, #12]
 81011b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81011b2:	4b6e      	ldr	r3, [pc, #440]	; (810136c <MX_GPIO_Init+0x20c>)
 81011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011b8:	4a6c      	ldr	r2, [pc, #432]	; (810136c <MX_GPIO_Init+0x20c>)
 81011ba:	f043 0310 	orr.w	r3, r3, #16
 81011be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011c2:	4b6a      	ldr	r3, [pc, #424]	; (810136c <MX_GPIO_Init+0x20c>)
 81011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011c8:	f003 0310 	and.w	r3, r3, #16
 81011cc:	60bb      	str	r3, [r7, #8]
 81011ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81011d0:	4b66      	ldr	r3, [pc, #408]	; (810136c <MX_GPIO_Init+0x20c>)
 81011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011d6:	4a65      	ldr	r2, [pc, #404]	; (810136c <MX_GPIO_Init+0x20c>)
 81011d8:	f043 0308 	orr.w	r3, r3, #8
 81011dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011e0:	4b62      	ldr	r3, [pc, #392]	; (810136c <MX_GPIO_Init+0x20c>)
 81011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011e6:	f003 0308 	and.w	r3, r3, #8
 81011ea:	607b      	str	r3, [r7, #4]
 81011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 81011ee:	4b5f      	ldr	r3, [pc, #380]	; (810136c <MX_GPIO_Init+0x20c>)
 81011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011f4:	4a5d      	ldr	r2, [pc, #372]	; (810136c <MX_GPIO_Init+0x20c>)
 81011f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81011fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011fe:	4b5b      	ldr	r3, [pc, #364]	; (810136c <MX_GPIO_Init+0x20c>)
 8101200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101208:	603b      	str	r3, [r7, #0]
 810120a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D13_Pin|LED_D12_Pin, GPIO_PIN_RESET);
 810120c:	2200      	movs	r2, #0
 810120e:	2160      	movs	r1, #96	; 0x60
 8101210:	4857      	ldr	r0, [pc, #348]	; (8101370 <MX_GPIO_Init+0x210>)
 8101212:	f001 fccd 	bl	8102bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LED_D11_Pin|LED_D14_Pin, GPIO_PIN_RESET);
 8101216:	2200      	movs	r2, #0
 8101218:	f240 2121 	movw	r1, #545	; 0x221
 810121c:	4855      	ldr	r0, [pc, #340]	; (8101374 <MX_GPIO_Init+0x214>)
 810121e:	f001 fcc7 	bl	8102bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_D10_Pin|LED_D9_Pin, GPIO_PIN_SET);
 8101222:	2201      	movs	r2, #1
 8101224:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8101228:	4853      	ldr	r0, [pc, #332]	; (8101378 <MX_GPIO_Init+0x218>)
 810122a:	f001 fcc1 	bl	8102bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_D8_Pin|LED_D7_Pin, GPIO_PIN_SET);
 810122e:	2201      	movs	r2, #1
 8101230:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8101234:	4851      	ldr	r0, [pc, #324]	; (810137c <MX_GPIO_Init+0x21c>)
 8101236:	f001 fcbb 	bl	8102bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 810123a:	2200      	movs	r2, #0
 810123c:	2102      	movs	r1, #2
 810123e:	4850      	ldr	r0, [pc, #320]	; (8101380 <MX_GPIO_Init+0x220>)
 8101240:	f001 fcb6 	bl	8102bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_D13_Pin LED_D12_Pin */
  GPIO_InitStruct.Pin = LED_D13_Pin|LED_D12_Pin;
 8101244:	2360      	movs	r3, #96	; 0x60
 8101246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8101248:	2311      	movs	r3, #17
 810124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810124c:	2300      	movs	r3, #0
 810124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101250:	2300      	movs	r3, #0
 8101252:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101254:	f107 0314 	add.w	r3, r7, #20
 8101258:	4619      	mov	r1, r3
 810125a:	4845      	ldr	r0, [pc, #276]	; (8101370 <MX_GPIO_Init+0x210>)
 810125c:	f001 faf8 	bl	8102850 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8101260:	2301      	movs	r3, #1
 8101262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101264:	2301      	movs	r3, #1
 8101266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101268:	2300      	movs	r3, #0
 810126a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810126c:	2300      	movs	r3, #0
 810126e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8101270:	f107 0314 	add.w	r3, r7, #20
 8101274:	4619      	mov	r1, r3
 8101276:	483f      	ldr	r0, [pc, #252]	; (8101374 <MX_GPIO_Init+0x214>)
 8101278:	f001 faea 	bl	8102850 <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn_D5_Pin Btn_D4_Pin */
  GPIO_InitStruct.Pin = Btn_D5_Pin|Btn_D4_Pin;
 810127c:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8101280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8101282:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8101286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101288:	2300      	movs	r3, #0
 810128a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810128c:	f107 0314 	add.w	r3, r7, #20
 8101290:	4619      	mov	r1, r3
 8101292:	483b      	ldr	r0, [pc, #236]	; (8101380 <MX_GPIO_Init+0x220>)
 8101294:	f001 fadc 	bl	8102850 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D10_Pin LED_D9_Pin */
  GPIO_InitStruct.Pin = LED_D10_Pin|LED_D9_Pin;
 8101298:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 810129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 810129e:	2311      	movs	r3, #17
 81012a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012a2:	2300      	movs	r3, #0
 81012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012a6:	2300      	movs	r3, #0
 81012a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81012aa:	f107 0314 	add.w	r3, r7, #20
 81012ae:	4619      	mov	r1, r3
 81012b0:	4831      	ldr	r0, [pc, #196]	; (8101378 <MX_GPIO_Init+0x218>)
 81012b2:	f001 facd 	bl	8102850 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_D3_Pin */
  GPIO_InitStruct.Pin = Btn_D3_Pin;
 81012b6:	2340      	movs	r3, #64	; 0x40
 81012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 81012ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 81012be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012c0:	2300      	movs	r3, #0
 81012c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn_D3_GPIO_Port, &GPIO_InitStruct);
 81012c4:	f107 0314 	add.w	r3, r7, #20
 81012c8:	4619      	mov	r1, r3
 81012ca:	482c      	ldr	r0, [pc, #176]	; (810137c <MX_GPIO_Init+0x21c>)
 81012cc:	f001 fac0 	bl	8102850 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_D6_Pin */
  GPIO_InitStruct.Pin = Btn_D6_Pin;
 81012d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 81012d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 81012d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 81012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012dc:	2300      	movs	r3, #0
 81012de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn_D6_GPIO_Port, &GPIO_InitStruct);
 81012e0:	f107 0314 	add.w	r3, r7, #20
 81012e4:	4619      	mov	r1, r3
 81012e6:	4822      	ldr	r0, [pc, #136]	; (8101370 <MX_GPIO_Init+0x210>)
 81012e8:	f001 fab2 	bl	8102850 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D8_Pin LED_D7_Pin */
  GPIO_InitStruct.Pin = LED_D8_Pin|LED_D7_Pin;
 81012ec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 81012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 81012f2:	2311      	movs	r3, #17
 81012f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012f6:	2300      	movs	r3, #0
 81012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012fa:	2300      	movs	r3, #0
 81012fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81012fe:	f107 0314 	add.w	r3, r7, #20
 8101302:	4619      	mov	r1, r3
 8101304:	481d      	ldr	r0, [pc, #116]	; (810137c <MX_GPIO_Init+0x21c>)
 8101306:	f001 faa3 	bl	8102850 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D11_Pin LED_D14_Pin */
  GPIO_InitStruct.Pin = LED_D11_Pin|LED_D14_Pin;
 810130a:	f44f 7308 	mov.w	r3, #544	; 0x220
 810130e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8101310:	2311      	movs	r3, #17
 8101312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101314:	2300      	movs	r3, #0
 8101316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101318:	2300      	movs	r3, #0
 810131a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810131c:	f107 0314 	add.w	r3, r7, #20
 8101320:	4619      	mov	r1, r3
 8101322:	4814      	ldr	r0, [pc, #80]	; (8101374 <MX_GPIO_Init+0x214>)
 8101324:	f001 fa94 	bl	8102850 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8101328:	2302      	movs	r3, #2
 810132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810132c:	2301      	movs	r3, #1
 810132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101330:	2300      	movs	r3, #0
 8101332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101334:	2300      	movs	r3, #0
 8101336:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8101338:	f107 0314 	add.w	r3, r7, #20
 810133c:	4619      	mov	r1, r3
 810133e:	4810      	ldr	r0, [pc, #64]	; (8101380 <MX_GPIO_Init+0x220>)
 8101340:	f001 fa86 	bl	8102850 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8101344:	2200      	movs	r2, #0
 8101346:	2101      	movs	r1, #1
 8101348:	2017      	movs	r0, #23
 810134a:	f000 fca2 	bl	8101c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 810134e:	2017      	movs	r0, #23
 8101350:	f000 fcb9 	bl	8101cc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8101354:	2200      	movs	r2, #0
 8101356:	2101      	movs	r1, #1
 8101358:	2028      	movs	r0, #40	; 0x28
 810135a:	f000 fc9a 	bl	8101c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 810135e:	2028      	movs	r0, #40	; 0x28
 8101360:	f000 fcb1 	bl	8101cc6 <HAL_NVIC_EnableIRQ>

}
 8101364:	bf00      	nop
 8101366:	3728      	adds	r7, #40	; 0x28
 8101368:	46bd      	mov	sp, r7
 810136a:	bd80      	pop	{r7, pc}
 810136c:	58024400 	.word	0x58024400
 8101370:	58020000 	.word	0x58020000
 8101374:	58020400 	.word	0x58020400
 8101378:	58020c00 	.word	0x58020c00
 810137c:	58021800 	.word	0x58021800
 8101380:	58021000 	.word	0x58021000

08101384 <score_counter>:

/* USER CODE BEGIN 4 */
void score_counter(){
 8101384:	b480      	push	{r7}
 8101386:	af00      	add	r7, sp, #0
	if(chk == 2){score++;}
 8101388:	4b0e      	ldr	r3, [pc, #56]	; (81013c4 <score_counter+0x40>)
 810138a:	781b      	ldrb	r3, [r3, #0]
 810138c:	2b02      	cmp	r3, #2
 810138e:	d105      	bne.n	810139c <score_counter+0x18>
 8101390:	4b0d      	ldr	r3, [pc, #52]	; (81013c8 <score_counter+0x44>)
 8101392:	681b      	ldr	r3, [r3, #0]
 8101394:	3301      	adds	r3, #1
 8101396:	4a0c      	ldr	r2, [pc, #48]	; (81013c8 <score_counter+0x44>)
 8101398:	6013      	str	r3, [r2, #0]
	else if(chk == 1){score--;}
	else{score = score;}
}
 810139a:	e00d      	b.n	81013b8 <score_counter+0x34>
	else if(chk == 1){score--;}
 810139c:	4b09      	ldr	r3, [pc, #36]	; (81013c4 <score_counter+0x40>)
 810139e:	781b      	ldrb	r3, [r3, #0]
 81013a0:	2b01      	cmp	r3, #1
 81013a2:	d105      	bne.n	81013b0 <score_counter+0x2c>
 81013a4:	4b08      	ldr	r3, [pc, #32]	; (81013c8 <score_counter+0x44>)
 81013a6:	681b      	ldr	r3, [r3, #0]
 81013a8:	3b01      	subs	r3, #1
 81013aa:	4a07      	ldr	r2, [pc, #28]	; (81013c8 <score_counter+0x44>)
 81013ac:	6013      	str	r3, [r2, #0]
}
 81013ae:	e003      	b.n	81013b8 <score_counter+0x34>
	else{score = score;}
 81013b0:	4b05      	ldr	r3, [pc, #20]	; (81013c8 <score_counter+0x44>)
 81013b2:	681b      	ldr	r3, [r3, #0]
 81013b4:	4a04      	ldr	r2, [pc, #16]	; (81013c8 <score_counter+0x44>)
 81013b6:	6013      	str	r3, [r2, #0]
}
 81013b8:	bf00      	nop
 81013ba:	46bd      	mov	sp, r7
 81013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013c0:	4770      	bx	lr
 81013c2:	bf00      	nop
 81013c4:	1000029e 	.word	0x1000029e
 81013c8:	100002a0 	.word	0x100002a0

081013cc <mole_generator>:

void mole_generator(){
 81013cc:	b580      	push	{r7, lr}
 81013ce:	af00      	add	r7, sp, #0
	 if(HAL_GetTick() - timestamp_one[0] >= timetrig_two){
 81013d0:	f000 fb54 	bl	8101a7c <HAL_GetTick>
 81013d4:	4602      	mov	r2, r0
 81013d6:	4b24      	ldr	r3, [pc, #144]	; (8101468 <mole_generator+0x9c>)
 81013d8:	681b      	ldr	r3, [r3, #0]
 81013da:	1ad3      	subs	r3, r2, r3
 81013dc:	4a23      	ldr	r2, [pc, #140]	; (810146c <mole_generator+0xa0>)
 81013de:	8812      	ldrh	r2, [r2, #0]
 81013e0:	4293      	cmp	r3, r2
 81013e2:	d33f      	bcc.n	8101464 <mole_generator+0x98>
		  timestamp_one[0] = HAL_GetTick();
 81013e4:	f000 fb4a 	bl	8101a7c <HAL_GetTick>
 81013e8:	4603      	mov	r3, r0
 81013ea:	4a1f      	ldr	r2, [pc, #124]	; (8101468 <mole_generator+0x9c>)
 81013ec:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 81013ee:	2101      	movs	r1, #1
 81013f0:	481f      	ldr	r0, [pc, #124]	; (8101470 <mole_generator+0xa4>)
 81013f2:	f001 fbf6 	bl	8102be2 <HAL_GPIO_TogglePin>

		 //// RTC Runner
		  HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 81013f6:	2201      	movs	r2, #1
 81013f8:	491e      	ldr	r1, [pc, #120]	; (8101474 <mole_generator+0xa8>)
 81013fa:	481f      	ldr	r0, [pc, #124]	; (8101478 <mole_generator+0xac>)
 81013fc:	f003 ffa9 	bl	8105352 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 8101400:	2201      	movs	r2, #1
 8101402:	491e      	ldr	r1, [pc, #120]	; (810147c <mole_generator+0xb0>)
 8101404:	481c      	ldr	r0, [pc, #112]	; (8101478 <mole_generator+0xac>)
 8101406:	f004 f887 	bl	8105518 <HAL_RTC_GetDate>

		 ///// generate mole's random sequence
		  runner++;
 810140a:	4b1d      	ldr	r3, [pc, #116]	; (8101480 <mole_generator+0xb4>)
 810140c:	781b      	ldrb	r3, [r3, #0]
 810140e:	3301      	adds	r3, #1
 8101410:	b2da      	uxtb	r2, r3
 8101412:	4b1b      	ldr	r3, [pc, #108]	; (8101480 <mole_generator+0xb4>)
 8101414:	701a      	strb	r2, [r3, #0]
		  runner %= 16;
 8101416:	4b1a      	ldr	r3, [pc, #104]	; (8101480 <mole_generator+0xb4>)
 8101418:	781b      	ldrb	r3, [r3, #0]
 810141a:	f003 030f 	and.w	r3, r3, #15
 810141e:	b2da      	uxtb	r2, r3
 8101420:	4b17      	ldr	r3, [pc, #92]	; (8101480 <mole_generator+0xb4>)
 8101422:	701a      	strb	r2, [r3, #0]
		  runner = randomrun_gen_RTC(runner);
 8101424:	4b16      	ldr	r3, [pc, #88]	; (8101480 <mole_generator+0xb4>)
 8101426:	781b      	ldrb	r3, [r3, #0]
 8101428:	4618      	mov	r0, r3
 810142a:	f000 f855 	bl	81014d8 <randomrun_gen_RTC>
 810142e:	4603      	mov	r3, r0
 8101430:	461a      	mov	r2, r3
 8101432:	4b13      	ldr	r3, [pc, #76]	; (8101480 <mole_generator+0xb4>)
 8101434:	701a      	strb	r2, [r3, #0]

		  rnx.u8++;
 8101436:	4b13      	ldr	r3, [pc, #76]	; (8101484 <mole_generator+0xb8>)
 8101438:	781b      	ldrb	r3, [r3, #0]
 810143a:	3301      	adds	r3, #1
 810143c:	b2da      	uxtb	r2, r3
 810143e:	4b11      	ldr	r3, [pc, #68]	; (8101484 <mole_generator+0xb8>)
 8101440:	701a      	strb	r2, [r3, #0]
		  rnx.u8 %= 16;
 8101442:	4b10      	ldr	r3, [pc, #64]	; (8101484 <mole_generator+0xb8>)
 8101444:	781b      	ldrb	r3, [r3, #0]
 8101446:	f003 030f 	and.w	r3, r3, #15
 810144a:	b2da      	uxtb	r2, r3
 810144c:	4b0d      	ldr	r3, [pc, #52]	; (8101484 <mole_generator+0xb8>)
 810144e:	701a      	strb	r2, [r3, #0]
		  rnx.u8 =  (runner << 4) + rnx.u8 ;
 8101450:	4b0b      	ldr	r3, [pc, #44]	; (8101480 <mole_generator+0xb4>)
 8101452:	781b      	ldrb	r3, [r3, #0]
 8101454:	011b      	lsls	r3, r3, #4
 8101456:	b2da      	uxtb	r2, r3
 8101458:	4b0a      	ldr	r3, [pc, #40]	; (8101484 <mole_generator+0xb8>)
 810145a:	781b      	ldrb	r3, [r3, #0]
 810145c:	4413      	add	r3, r2
 810145e:	b2da      	uxtb	r2, r3
 8101460:	4b08      	ldr	r3, [pc, #32]	; (8101484 <mole_generator+0xb8>)
 8101462:	701a      	strb	r2, [r3, #0]
//
//			  sprintf(txtUARTBF, "runner = %d \r\n",runner);
//			  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),30);

			  }
}
 8101464:	bf00      	nop
 8101466:	bd80      	pop	{r7, pc}
 8101468:	10000324 	.word	0x10000324
 810146c:	1000000a 	.word	0x1000000a
 8101470:	58020400 	.word	0x58020400
 8101474:	100002a8 	.word	0x100002a8
 8101478:	100000f4 	.word	0x100000f4
 810147c:	100002bc 	.word	0x100002bc
 8101480:	10000298 	.word	0x10000298
 8101484:	1000029c 	.word	0x1000029c

08101488 <HAL_GPIO_EXTI_Callback>:
//	static uint8_t runo = 0;
//	 runo++;
//	 runo%=8;
//	 rnx.u8 = !(1 << runo);
//}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8101488:	b480      	push	{r7}
 810148a:	b083      	sub	sp, #12
 810148c:	af00      	add	r7, sp, #0
 810148e:	4603      	mov	r3, r0
 8101490:	80fb      	strh	r3, [r7, #6]
//		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
//		SRAM4->flag_blue_btn = 1;
//
//		}

	if(GPIO_Pin == GPIO_PIN_6){ // D3
 8101492:	88fb      	ldrh	r3, [r7, #6]
 8101494:	2b40      	cmp	r3, #64	; 0x40
 8101496:	d102      	bne.n	810149e <HAL_GPIO_EXTI_Callback+0x16>
//				while(HAL_GPIO_ReadPin(Btn_D3_GPIO_Port,Btn_D3_Pin) == GPIO_PINh_RESET){
//						HAL_GPIO_TogglePin(LED_D7_GPIO_Port, LED_D7_Pin);            // While state loop
//						HAL_Delay(100);
//					}
//				HAL_GPIO_WritePin(LED_D7_GPIO_Port, LED_D7_Pin, GPIO_PIN_SET);
			flag_btns = 1;
 8101498:	4b0e      	ldr	r3, [pc, #56]	; (81014d4 <HAL_GPIO_EXTI_Callback+0x4c>)
 810149a:	2201      	movs	r2, #1
 810149c:	701a      	strb	r2, [r3, #0]


}


	if(GPIO_Pin == GPIO_PIN_14){ // D4
 810149e:	88fb      	ldrh	r3, [r7, #6]
 81014a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81014a4:	d102      	bne.n	81014ac <HAL_GPIO_EXTI_Callback+0x24>
//				HAL_GPIO_TogglePin(LED_D8_GPIO_Port, LED_D8_Pin);            // While state loop
//				HAL_Delay(100);
//			}
//		HAL_GPIO_WritePin(LED_D8_GPIO_Port, LED_D8_Pin, GPIO_PIN_SET);

		flag_btns = 2;
 81014a6:	4b0b      	ldr	r3, [pc, #44]	; (81014d4 <HAL_GPIO_EXTI_Callback+0x4c>)
 81014a8:	2202      	movs	r2, #2
 81014aa:	701a      	strb	r2, [r3, #0]
		//gameState = action;

		}

	if(GPIO_Pin == GPIO_PIN_11){ // D5
 81014ac:	88fb      	ldrh	r3, [r7, #6]
 81014ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81014b2:	d102      	bne.n	81014ba <HAL_GPIO_EXTI_Callback+0x32>
//					HAL_GPIO_TogglePin(LED_D9_GPIO_Port, LED_D9_Pin);            // While state loop
//					HAL_Delay(100);
//				}
//			HAL_GPIO_WritePin(LED_D9_GPIO_Port, LED_D9_Pin, GPIO_PIN_SET);

		flag_btns = 3;
 81014b4:	4b07      	ldr	r3, [pc, #28]	; (81014d4 <HAL_GPIO_EXTI_Callback+0x4c>)
 81014b6:	2203      	movs	r2, #3
 81014b8:	701a      	strb	r2, [r3, #0]
		//gameState = action;

			}

	if(GPIO_Pin == GPIO_PIN_8){ // D6
 81014ba:	88fb      	ldrh	r3, [r7, #6]
 81014bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81014c0:	d102      	bne.n	81014c8 <HAL_GPIO_EXTI_Callback+0x40>
//				HAL_GPIO_TogglePin(LED_D10_GPIO_Port, LED_D10_Pin);            // While state loop
//				HAL_Delay(100);
//			}
//		HAL_GPIO_WritePin(LED_D10_GPIO_Port, LED_D10_Pin, GPIO_PIN_SET);

		flag_btns = 4;
 81014c2:	4b04      	ldr	r3, [pc, #16]	; (81014d4 <HAL_GPIO_EXTI_Callback+0x4c>)
 81014c4:	2204      	movs	r2, #4
 81014c6:	701a      	strb	r2, [r3, #0]
		//gameState = action;

		}

}
 81014c8:	bf00      	nop
 81014ca:	370c      	adds	r7, #12
 81014cc:	46bd      	mov	sp, r7
 81014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014d2:	4770      	bx	lr
 81014d4:	1000029d 	.word	0x1000029d

081014d8 <randomrun_gen_RTC>:

uint8_t randomrun_gen_RTC(uint8_t var){
 81014d8:	b480      	push	{r7}
 81014da:	b085      	sub	sp, #20
 81014dc:	af00      	add	r7, sp, #0
 81014de:	4603      	mov	r3, r0
 81014e0:	71fb      	strb	r3, [r7, #7]

	//// Generate cat cat random from RTC
	static uint8_t cg = 0;
	static uint8_t ci = 0;
	cg++;
 81014e2:	4b17      	ldr	r3, [pc, #92]	; (8101540 <randomrun_gen_RTC+0x68>)
 81014e4:	781b      	ldrb	r3, [r3, #0]
 81014e6:	3301      	adds	r3, #1
 81014e8:	b2da      	uxtb	r2, r3
 81014ea:	4b15      	ldr	r3, [pc, #84]	; (8101540 <randomrun_gen_RTC+0x68>)
 81014ec:	701a      	strb	r2, [r3, #0]
	ci+=cg;
 81014ee:	4b15      	ldr	r3, [pc, #84]	; (8101544 <randomrun_gen_RTC+0x6c>)
 81014f0:	781a      	ldrb	r2, [r3, #0]
 81014f2:	4b13      	ldr	r3, [pc, #76]	; (8101540 <randomrun_gen_RTC+0x68>)
 81014f4:	781b      	ldrb	r3, [r3, #0]
 81014f6:	4413      	add	r3, r2
 81014f8:	b2da      	uxtb	r2, r3
 81014fa:	4b12      	ldr	r3, [pc, #72]	; (8101544 <randomrun_gen_RTC+0x6c>)
 81014fc:	701a      	strb	r2, [r3, #0]
	uint8_t varx = (var + NowTime.Seconds + (NowTime.Minutes << 4) + (NowTime.Hours << 2) + cg + ci);
 81014fe:	4b12      	ldr	r3, [pc, #72]	; (8101548 <randomrun_gen_RTC+0x70>)
 8101500:	789a      	ldrb	r2, [r3, #2]
 8101502:	79fb      	ldrb	r3, [r7, #7]
 8101504:	4413      	add	r3, r2
 8101506:	b2da      	uxtb	r2, r3
 8101508:	4b0f      	ldr	r3, [pc, #60]	; (8101548 <randomrun_gen_RTC+0x70>)
 810150a:	785b      	ldrb	r3, [r3, #1]
 810150c:	011b      	lsls	r3, r3, #4
 810150e:	b2db      	uxtb	r3, r3
 8101510:	4413      	add	r3, r2
 8101512:	b2da      	uxtb	r2, r3
 8101514:	4b0c      	ldr	r3, [pc, #48]	; (8101548 <randomrun_gen_RTC+0x70>)
 8101516:	781b      	ldrb	r3, [r3, #0]
 8101518:	009b      	lsls	r3, r3, #2
 810151a:	b2db      	uxtb	r3, r3
 810151c:	4413      	add	r3, r2
 810151e:	b2da      	uxtb	r2, r3
 8101520:	4b07      	ldr	r3, [pc, #28]	; (8101540 <randomrun_gen_RTC+0x68>)
 8101522:	781b      	ldrb	r3, [r3, #0]
 8101524:	4413      	add	r3, r2
 8101526:	b2da      	uxtb	r2, r3
 8101528:	4b06      	ldr	r3, [pc, #24]	; (8101544 <randomrun_gen_RTC+0x6c>)
 810152a:	781b      	ldrb	r3, [r3, #0]
 810152c:	4413      	add	r3, r2
 810152e:	73fb      	strb	r3, [r7, #15]
	return varx % 256;
 8101530:	7bfb      	ldrb	r3, [r7, #15]
}
 8101532:	4618      	mov	r0, r3
 8101534:	3714      	adds	r7, #20
 8101536:	46bd      	mov	sp, r7
 8101538:	f85d 7b04 	ldr.w	r7, [sp], #4
 810153c:	4770      	bx	lr
 810153e:	bf00      	nop
 8101540:	10000330 	.word	0x10000330
 8101544:	10000331 	.word	0x10000331
 8101548:	100002a8 	.word	0x100002a8

0810154c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810154c:	b480      	push	{r7}
 810154e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101550:	b672      	cpsid	i
}
 8101552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101554:	e7fe      	b.n	8101554 <Error_Handler+0x8>
	...

08101558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101558:	b480      	push	{r7}
 810155a:	b083      	sub	sp, #12
 810155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810155e:	4b0a      	ldr	r3, [pc, #40]	; (8101588 <HAL_MspInit+0x30>)
 8101560:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101564:	4a08      	ldr	r2, [pc, #32]	; (8101588 <HAL_MspInit+0x30>)
 8101566:	f043 0302 	orr.w	r3, r3, #2
 810156a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810156e:	4b06      	ldr	r3, [pc, #24]	; (8101588 <HAL_MspInit+0x30>)
 8101570:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101574:	f003 0302 	and.w	r3, r3, #2
 8101578:	607b      	str	r3, [r7, #4]
 810157a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810157c:	bf00      	nop
 810157e:	370c      	adds	r7, #12
 8101580:	46bd      	mov	sp, r7
 8101582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101586:	4770      	bx	lr
 8101588:	58024400 	.word	0x58024400

0810158c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 810158c:	b580      	push	{r7, lr}
 810158e:	b0b8      	sub	sp, #224	; 0xe0
 8101590:	af00      	add	r7, sp, #0
 8101592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101594:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101598:	2200      	movs	r2, #0
 810159a:	601a      	str	r2, [r3, #0]
 810159c:	605a      	str	r2, [r3, #4]
 810159e:	609a      	str	r2, [r3, #8]
 81015a0:	60da      	str	r2, [r3, #12]
 81015a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81015a4:	f107 0310 	add.w	r3, r7, #16
 81015a8:	22bc      	movs	r2, #188	; 0xbc
 81015aa:	2100      	movs	r1, #0
 81015ac:	4618      	mov	r0, r3
 81015ae:	f005 fa0f 	bl	81069d0 <memset>
  if(hi2c->Instance==I2C2)
 81015b2:	687b      	ldr	r3, [r7, #4]
 81015b4:	681b      	ldr	r3, [r3, #0]
 81015b6:	4a25      	ldr	r2, [pc, #148]	; (810164c <HAL_I2C_MspInit+0xc0>)
 81015b8:	4293      	cmp	r3, r2
 81015ba:	d142      	bne.n	8101642 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 81015bc:	2308      	movs	r3, #8
 81015be:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 81015c0:	2300      	movs	r3, #0
 81015c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81015c6:	f107 0310 	add.w	r3, r7, #16
 81015ca:	4618      	mov	r0, r3
 81015cc:	f002 fa44 	bl	8103a58 <HAL_RCCEx_PeriphCLKConfig>
 81015d0:	4603      	mov	r3, r0
 81015d2:	2b00      	cmp	r3, #0
 81015d4:	d001      	beq.n	81015da <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 81015d6:	f7ff ffb9 	bl	810154c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81015da:	4b1d      	ldr	r3, [pc, #116]	; (8101650 <HAL_I2C_MspInit+0xc4>)
 81015dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015e0:	4a1b      	ldr	r2, [pc, #108]	; (8101650 <HAL_I2C_MspInit+0xc4>)
 81015e2:	f043 0302 	orr.w	r3, r3, #2
 81015e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015ea:	4b19      	ldr	r3, [pc, #100]	; (8101650 <HAL_I2C_MspInit+0xc4>)
 81015ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015f0:	f003 0302 	and.w	r3, r3, #2
 81015f4:	60fb      	str	r3, [r7, #12]
 81015f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 81015f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81015fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101600:	2312      	movs	r3, #18
 8101602:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101606:	2300      	movs	r3, #0
 8101608:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810160c:	2300      	movs	r3, #0
 810160e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8101612:	2304      	movs	r3, #4
 8101614:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101618:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810161c:	4619      	mov	r1, r3
 810161e:	480d      	ldr	r0, [pc, #52]	; (8101654 <HAL_I2C_MspInit+0xc8>)
 8101620:	f001 f916 	bl	8102850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8101624:	4b0a      	ldr	r3, [pc, #40]	; (8101650 <HAL_I2C_MspInit+0xc4>)
 8101626:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810162a:	4a09      	ldr	r2, [pc, #36]	; (8101650 <HAL_I2C_MspInit+0xc4>)
 810162c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8101630:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101634:	4b06      	ldr	r3, [pc, #24]	; (8101650 <HAL_I2C_MspInit+0xc4>)
 8101636:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810163a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810163e:	60bb      	str	r3, [r7, #8]
 8101640:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8101642:	bf00      	nop
 8101644:	37e0      	adds	r7, #224	; 0xe0
 8101646:	46bd      	mov	sp, r7
 8101648:	bd80      	pop	{r7, pc}
 810164a:	bf00      	nop
 810164c:	40005800 	.word	0x40005800
 8101650:	58024400 	.word	0x58024400
 8101654:	58020400 	.word	0x58020400

08101658 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8101658:	b580      	push	{r7, lr}
 810165a:	b0b2      	sub	sp, #200	; 0xc8
 810165c:	af00      	add	r7, sp, #0
 810165e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101660:	f107 030c 	add.w	r3, r7, #12
 8101664:	22bc      	movs	r2, #188	; 0xbc
 8101666:	2100      	movs	r1, #0
 8101668:	4618      	mov	r0, r3
 810166a:	f005 f9b1 	bl	81069d0 <memset>
  if(hrtc->Instance==RTC)
 810166e:	687b      	ldr	r3, [r7, #4]
 8101670:	681b      	ldr	r3, [r3, #0]
 8101672:	4a0f      	ldr	r2, [pc, #60]	; (81016b0 <HAL_RTC_MspInit+0x58>)
 8101674:	4293      	cmp	r3, r2
 8101676:	d116      	bne.n	81016a6 <HAL_RTC_MspInit+0x4e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8101678:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 810167c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 810167e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8101682:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101686:	f107 030c 	add.w	r3, r7, #12
 810168a:	4618      	mov	r0, r3
 810168c:	f002 f9e4 	bl	8103a58 <HAL_RCCEx_PeriphCLKConfig>
 8101690:	4603      	mov	r3, r0
 8101692:	2b00      	cmp	r3, #0
 8101694:	d001      	beq.n	810169a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8101696:	f7ff ff59 	bl	810154c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 810169a:	4b06      	ldr	r3, [pc, #24]	; (81016b4 <HAL_RTC_MspInit+0x5c>)
 810169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810169e:	4a05      	ldr	r2, [pc, #20]	; (81016b4 <HAL_RTC_MspInit+0x5c>)
 81016a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81016a4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 81016a6:	bf00      	nop
 81016a8:	37c8      	adds	r7, #200	; 0xc8
 81016aa:	46bd      	mov	sp, r7
 81016ac:	bd80      	pop	{r7, pc}
 81016ae:	bf00      	nop
 81016b0:	58004000 	.word	0x58004000
 81016b4:	58024400 	.word	0x58024400

081016b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81016b8:	b580      	push	{r7, lr}
 81016ba:	b0b2      	sub	sp, #200	; 0xc8
 81016bc:	af00      	add	r7, sp, #0
 81016be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81016c0:	f107 030c 	add.w	r3, r7, #12
 81016c4:	22bc      	movs	r2, #188	; 0xbc
 81016c6:	2100      	movs	r1, #0
 81016c8:	4618      	mov	r0, r3
 81016ca:	f005 f981 	bl	81069d0 <memset>
  if(huart->Instance==USART3)
 81016ce:	687b      	ldr	r3, [r7, #4]
 81016d0:	681b      	ldr	r3, [r3, #0]
 81016d2:	4a3f      	ldr	r2, [pc, #252]	; (81017d0 <HAL_UART_MspInit+0x118>)
 81016d4:	4293      	cmp	r3, r2
 81016d6:	d177      	bne.n	81017c8 <HAL_UART_MspInit+0x110>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81016d8:	2302      	movs	r3, #2
 81016da:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81016dc:	2300      	movs	r3, #0
 81016de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81016e2:	f107 030c 	add.w	r3, r7, #12
 81016e6:	4618      	mov	r0, r3
 81016e8:	f002 f9b6 	bl	8103a58 <HAL_RCCEx_PeriphCLKConfig>
 81016ec:	4603      	mov	r3, r0
 81016ee:	2b00      	cmp	r3, #0
 81016f0:	d001      	beq.n	81016f6 <HAL_UART_MspInit+0x3e>
    {
      Error_Handler();
 81016f2:	f7ff ff2b 	bl	810154c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 81016f6:	4b37      	ldr	r3, [pc, #220]	; (81017d4 <HAL_UART_MspInit+0x11c>)
 81016f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81016fc:	4a35      	ldr	r2, [pc, #212]	; (81017d4 <HAL_UART_MspInit+0x11c>)
 81016fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101702:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101706:	4b33      	ldr	r3, [pc, #204]	; (81017d4 <HAL_UART_MspInit+0x11c>)
 8101708:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810170c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101710:	60bb      	str	r3, [r7, #8]
 8101712:	68bb      	ldr	r3, [r7, #8]

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8101714:	4b30      	ldr	r3, [pc, #192]	; (81017d8 <HAL_UART_MspInit+0x120>)
 8101716:	4a31      	ldr	r2, [pc, #196]	; (81017dc <HAL_UART_MspInit+0x124>)
 8101718:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 810171a:	4b2f      	ldr	r3, [pc, #188]	; (81017d8 <HAL_UART_MspInit+0x120>)
 810171c:	222d      	movs	r2, #45	; 0x2d
 810171e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101720:	4b2d      	ldr	r3, [pc, #180]	; (81017d8 <HAL_UART_MspInit+0x120>)
 8101722:	2200      	movs	r2, #0
 8101724:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101726:	4b2c      	ldr	r3, [pc, #176]	; (81017d8 <HAL_UART_MspInit+0x120>)
 8101728:	2200      	movs	r2, #0
 810172a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 810172c:	4b2a      	ldr	r3, [pc, #168]	; (81017d8 <HAL_UART_MspInit+0x120>)
 810172e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101732:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101734:	4b28      	ldr	r3, [pc, #160]	; (81017d8 <HAL_UART_MspInit+0x120>)
 8101736:	2200      	movs	r2, #0
 8101738:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 810173a:	4b27      	ldr	r3, [pc, #156]	; (81017d8 <HAL_UART_MspInit+0x120>)
 810173c:	2200      	movs	r2, #0
 810173e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8101740:	4b25      	ldr	r3, [pc, #148]	; (81017d8 <HAL_UART_MspInit+0x120>)
 8101742:	2200      	movs	r2, #0
 8101744:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8101746:	4b24      	ldr	r3, [pc, #144]	; (81017d8 <HAL_UART_MspInit+0x120>)
 8101748:	2200      	movs	r2, #0
 810174a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810174c:	4b22      	ldr	r3, [pc, #136]	; (81017d8 <HAL_UART_MspInit+0x120>)
 810174e:	2200      	movs	r2, #0
 8101750:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8101752:	4821      	ldr	r0, [pc, #132]	; (81017d8 <HAL_UART_MspInit+0x120>)
 8101754:	f000 fae6 	bl	8101d24 <HAL_DMA_Init>
 8101758:	4603      	mov	r3, r0
 810175a:	2b00      	cmp	r3, #0
 810175c:	d001      	beq.n	8101762 <HAL_UART_MspInit+0xaa>
    {
      Error_Handler();
 810175e:	f7ff fef5 	bl	810154c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8101762:	687b      	ldr	r3, [r7, #4]
 8101764:	4a1c      	ldr	r2, [pc, #112]	; (81017d8 <HAL_UART_MspInit+0x120>)
 8101766:	67da      	str	r2, [r3, #124]	; 0x7c
 8101768:	4a1b      	ldr	r2, [pc, #108]	; (81017d8 <HAL_UART_MspInit+0x120>)
 810176a:	687b      	ldr	r3, [r7, #4]
 810176c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 810176e:	4b1c      	ldr	r3, [pc, #112]	; (81017e0 <HAL_UART_MspInit+0x128>)
 8101770:	4a1c      	ldr	r2, [pc, #112]	; (81017e4 <HAL_UART_MspInit+0x12c>)
 8101772:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8101774:	4b1a      	ldr	r3, [pc, #104]	; (81017e0 <HAL_UART_MspInit+0x128>)
 8101776:	222e      	movs	r2, #46	; 0x2e
 8101778:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 810177a:	4b19      	ldr	r3, [pc, #100]	; (81017e0 <HAL_UART_MspInit+0x128>)
 810177c:	2240      	movs	r2, #64	; 0x40
 810177e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101780:	4b17      	ldr	r3, [pc, #92]	; (81017e0 <HAL_UART_MspInit+0x128>)
 8101782:	2200      	movs	r2, #0
 8101784:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101786:	4b16      	ldr	r3, [pc, #88]	; (81017e0 <HAL_UART_MspInit+0x128>)
 8101788:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810178c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810178e:	4b14      	ldr	r3, [pc, #80]	; (81017e0 <HAL_UART_MspInit+0x128>)
 8101790:	2200      	movs	r2, #0
 8101792:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101794:	4b12      	ldr	r3, [pc, #72]	; (81017e0 <HAL_UART_MspInit+0x128>)
 8101796:	2200      	movs	r2, #0
 8101798:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 810179a:	4b11      	ldr	r3, [pc, #68]	; (81017e0 <HAL_UART_MspInit+0x128>)
 810179c:	2200      	movs	r2, #0
 810179e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 81017a0:	4b0f      	ldr	r3, [pc, #60]	; (81017e0 <HAL_UART_MspInit+0x128>)
 81017a2:	2200      	movs	r2, #0
 81017a4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81017a6:	4b0e      	ldr	r3, [pc, #56]	; (81017e0 <HAL_UART_MspInit+0x128>)
 81017a8:	2200      	movs	r2, #0
 81017aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 81017ac:	480c      	ldr	r0, [pc, #48]	; (81017e0 <HAL_UART_MspInit+0x128>)
 81017ae:	f000 fab9 	bl	8101d24 <HAL_DMA_Init>
 81017b2:	4603      	mov	r3, r0
 81017b4:	2b00      	cmp	r3, #0
 81017b6:	d001      	beq.n	81017bc <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 81017b8:	f7ff fec8 	bl	810154c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 81017bc:	687b      	ldr	r3, [r7, #4]
 81017be:	4a08      	ldr	r2, [pc, #32]	; (81017e0 <HAL_UART_MspInit+0x128>)
 81017c0:	679a      	str	r2, [r3, #120]	; 0x78
 81017c2:	4a07      	ldr	r2, [pc, #28]	; (81017e0 <HAL_UART_MspInit+0x128>)
 81017c4:	687b      	ldr	r3, [r7, #4]
 81017c6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 81017c8:	bf00      	nop
 81017ca:	37c8      	adds	r7, #200	; 0xc8
 81017cc:	46bd      	mov	sp, r7
 81017ce:	bd80      	pop	{r7, pc}
 81017d0:	40004800 	.word	0x40004800
 81017d4:	58024400 	.word	0x58024400
 81017d8:	100001a8 	.word	0x100001a8
 81017dc:	40020010 	.word	0x40020010
 81017e0:	10000220 	.word	0x10000220
 81017e4:	40020028 	.word	0x40020028

081017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81017e8:	b480      	push	{r7}
 81017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81017ec:	e7fe      	b.n	81017ec <NMI_Handler+0x4>

081017ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81017ee:	b480      	push	{r7}
 81017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81017f2:	e7fe      	b.n	81017f2 <HardFault_Handler+0x4>

081017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81017f4:	b480      	push	{r7}
 81017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81017f8:	e7fe      	b.n	81017f8 <MemManage_Handler+0x4>

081017fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81017fa:	b480      	push	{r7}
 81017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81017fe:	e7fe      	b.n	81017fe <BusFault_Handler+0x4>

08101800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101800:	b480      	push	{r7}
 8101802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101804:	e7fe      	b.n	8101804 <UsageFault_Handler+0x4>

08101806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101806:	b480      	push	{r7}
 8101808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810180a:	bf00      	nop
 810180c:	46bd      	mov	sp, r7
 810180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101812:	4770      	bx	lr

08101814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101814:	b480      	push	{r7}
 8101816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101818:	bf00      	nop
 810181a:	46bd      	mov	sp, r7
 810181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101820:	4770      	bx	lr

08101822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101822:	b480      	push	{r7}
 8101824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101826:	bf00      	nop
 8101828:	46bd      	mov	sp, r7
 810182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810182e:	4770      	bx	lr

08101830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101830:	b580      	push	{r7, lr}
 8101832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101834:	f000 f90e 	bl	8101a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101838:	bf00      	nop
 810183a:	bd80      	pop	{r7, pc}

0810183c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 810183c:	b580      	push	{r7, lr}
 810183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8101840:	2040      	movs	r0, #64	; 0x40
 8101842:	f001 f9e8 	bl	8102c16 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8101846:	f44f 7080 	mov.w	r0, #256	; 0x100
 810184a:	f001 f9e4 	bl	8102c16 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 810184e:	bf00      	nop
 8101850:	bd80      	pop	{r7, pc}

08101852 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8101852:	b580      	push	{r7, lr}
 8101854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_D5_Pin);
 8101856:	f44f 6000 	mov.w	r0, #2048	; 0x800
 810185a:	f001 f9dc 	bl	8102c16 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Btn_D4_Pin);
 810185e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8101862:	f001 f9d8 	bl	8102c16 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8101866:	bf00      	nop
 8101868:	bd80      	pop	{r7, pc}
	...

0810186c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 810186c:	b580      	push	{r7, lr}
 810186e:	b086      	sub	sp, #24
 8101870:	af00      	add	r7, sp, #0
 8101872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101874:	4a14      	ldr	r2, [pc, #80]	; (81018c8 <_sbrk+0x5c>)
 8101876:	4b15      	ldr	r3, [pc, #84]	; (81018cc <_sbrk+0x60>)
 8101878:	1ad3      	subs	r3, r2, r3
 810187a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 810187c:	697b      	ldr	r3, [r7, #20]
 810187e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101880:	4b13      	ldr	r3, [pc, #76]	; (81018d0 <_sbrk+0x64>)
 8101882:	681b      	ldr	r3, [r3, #0]
 8101884:	2b00      	cmp	r3, #0
 8101886:	d102      	bne.n	810188e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101888:	4b11      	ldr	r3, [pc, #68]	; (81018d0 <_sbrk+0x64>)
 810188a:	4a12      	ldr	r2, [pc, #72]	; (81018d4 <_sbrk+0x68>)
 810188c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810188e:	4b10      	ldr	r3, [pc, #64]	; (81018d0 <_sbrk+0x64>)
 8101890:	681a      	ldr	r2, [r3, #0]
 8101892:	687b      	ldr	r3, [r7, #4]
 8101894:	4413      	add	r3, r2
 8101896:	693a      	ldr	r2, [r7, #16]
 8101898:	429a      	cmp	r2, r3
 810189a:	d207      	bcs.n	81018ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 810189c:	f005 f860 	bl	8106960 <__errno>
 81018a0:	4603      	mov	r3, r0
 81018a2:	220c      	movs	r2, #12
 81018a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81018a6:	f04f 33ff 	mov.w	r3, #4294967295
 81018aa:	e009      	b.n	81018c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81018ac:	4b08      	ldr	r3, [pc, #32]	; (81018d0 <_sbrk+0x64>)
 81018ae:	681b      	ldr	r3, [r3, #0]
 81018b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81018b2:	4b07      	ldr	r3, [pc, #28]	; (81018d0 <_sbrk+0x64>)
 81018b4:	681a      	ldr	r2, [r3, #0]
 81018b6:	687b      	ldr	r3, [r7, #4]
 81018b8:	4413      	add	r3, r2
 81018ba:	4a05      	ldr	r2, [pc, #20]	; (81018d0 <_sbrk+0x64>)
 81018bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81018be:	68fb      	ldr	r3, [r7, #12]
}
 81018c0:	4618      	mov	r0, r3
 81018c2:	3718      	adds	r7, #24
 81018c4:	46bd      	mov	sp, r7
 81018c6:	bd80      	pop	{r7, pc}
 81018c8:	10048000 	.word	0x10048000
 81018cc:	00000400 	.word	0x00000400
 81018d0:	10000334 	.word	0x10000334
 81018d4:	10000350 	.word	0x10000350

081018d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81018d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101910 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81018dc:	f7fe feda 	bl	8100694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81018e0:	480c      	ldr	r0, [pc, #48]	; (8101914 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81018e2:	490d      	ldr	r1, [pc, #52]	; (8101918 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81018e4:	4a0d      	ldr	r2, [pc, #52]	; (810191c <LoopFillZerobss+0x1a>)
  movs r3, #0
 81018e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81018e8:	e002      	b.n	81018f0 <LoopCopyDataInit>

081018ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81018ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81018ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81018ee:	3304      	adds	r3, #4

081018f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81018f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81018f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81018f4:	d3f9      	bcc.n	81018ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81018f6:	4a0a      	ldr	r2, [pc, #40]	; (8101920 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81018f8:	4c0a      	ldr	r4, [pc, #40]	; (8101924 <LoopFillZerobss+0x22>)
  movs r3, #0
 81018fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 81018fc:	e001      	b.n	8101902 <LoopFillZerobss>

081018fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81018fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101900:	3204      	adds	r2, #4

08101902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101904:	d3fb      	bcc.n	81018fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101906:	f005 f831 	bl	810696c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810190a:	f7fe ff3b 	bl	8100784 <main>
  bx  lr
 810190e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101910:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101914:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101918:	10000078 	.word	0x10000078
  ldr r2, =_sidata
 810191c:	08107548 	.word	0x08107548
  ldr r2, =_sbss
 8101920:	10000078 	.word	0x10000078
  ldr r4, =_ebss
 8101924:	1000034c 	.word	0x1000034c

08101928 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101928:	e7fe      	b.n	8101928 <ADC3_IRQHandler>
	...

0810192c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810192c:	b580      	push	{r7, lr}
 810192e:	b082      	sub	sp, #8
 8101930:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101932:	4b28      	ldr	r3, [pc, #160]	; (81019d4 <HAL_Init+0xa8>)
 8101934:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101938:	4a26      	ldr	r2, [pc, #152]	; (81019d4 <HAL_Init+0xa8>)
 810193a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810193e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101942:	4b24      	ldr	r3, [pc, #144]	; (81019d4 <HAL_Init+0xa8>)
 8101944:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810194c:	603b      	str	r3, [r7, #0]
 810194e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101950:	4b21      	ldr	r3, [pc, #132]	; (81019d8 <HAL_Init+0xac>)
 8101952:	681b      	ldr	r3, [r3, #0]
 8101954:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101958:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810195c:	4a1e      	ldr	r2, [pc, #120]	; (81019d8 <HAL_Init+0xac>)
 810195e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101962:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101964:	4b1c      	ldr	r3, [pc, #112]	; (81019d8 <HAL_Init+0xac>)
 8101966:	681b      	ldr	r3, [r3, #0]
 8101968:	4a1b      	ldr	r2, [pc, #108]	; (81019d8 <HAL_Init+0xac>)
 810196a:	f043 0301 	orr.w	r3, r3, #1
 810196e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101970:	2003      	movs	r0, #3
 8101972:	f000 f983 	bl	8101c7c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101976:	f001 fe97 	bl	81036a8 <HAL_RCC_GetSysClockFreq>
 810197a:	4602      	mov	r2, r0
 810197c:	4b15      	ldr	r3, [pc, #84]	; (81019d4 <HAL_Init+0xa8>)
 810197e:	699b      	ldr	r3, [r3, #24]
 8101980:	0a1b      	lsrs	r3, r3, #8
 8101982:	f003 030f 	and.w	r3, r3, #15
 8101986:	4915      	ldr	r1, [pc, #84]	; (81019dc <HAL_Init+0xb0>)
 8101988:	5ccb      	ldrb	r3, [r1, r3]
 810198a:	f003 031f 	and.w	r3, r3, #31
 810198e:	fa22 f303 	lsr.w	r3, r2, r3
 8101992:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101994:	4b0f      	ldr	r3, [pc, #60]	; (81019d4 <HAL_Init+0xa8>)
 8101996:	699b      	ldr	r3, [r3, #24]
 8101998:	f003 030f 	and.w	r3, r3, #15
 810199c:	4a0f      	ldr	r2, [pc, #60]	; (81019dc <HAL_Init+0xb0>)
 810199e:	5cd3      	ldrb	r3, [r2, r3]
 81019a0:	f003 031f 	and.w	r3, r3, #31
 81019a4:	687a      	ldr	r2, [r7, #4]
 81019a6:	fa22 f303 	lsr.w	r3, r2, r3
 81019aa:	4a0d      	ldr	r2, [pc, #52]	; (81019e0 <HAL_Init+0xb4>)
 81019ac:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81019ae:	4b0c      	ldr	r3, [pc, #48]	; (81019e0 <HAL_Init+0xb4>)
 81019b0:	681b      	ldr	r3, [r3, #0]
 81019b2:	4a0c      	ldr	r2, [pc, #48]	; (81019e4 <HAL_Init+0xb8>)
 81019b4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81019b6:	2000      	movs	r0, #0
 81019b8:	f000 f816 	bl	81019e8 <HAL_InitTick>
 81019bc:	4603      	mov	r3, r0
 81019be:	2b00      	cmp	r3, #0
 81019c0:	d001      	beq.n	81019c6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81019c2:	2301      	movs	r3, #1
 81019c4:	e002      	b.n	81019cc <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81019c6:	f7ff fdc7 	bl	8101558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81019ca:	2300      	movs	r3, #0
}
 81019cc:	4618      	mov	r0, r3
 81019ce:	3708      	adds	r7, #8
 81019d0:	46bd      	mov	sp, r7
 81019d2:	bd80      	pop	{r7, pc}
 81019d4:	58024400 	.word	0x58024400
 81019d8:	40024400 	.word	0x40024400
 81019dc:	081074c4 	.word	0x081074c4
 81019e0:	10000004 	.word	0x10000004
 81019e4:	10000000 	.word	0x10000000

081019e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81019e8:	b580      	push	{r7, lr}
 81019ea:	b082      	sub	sp, #8
 81019ec:	af00      	add	r7, sp, #0
 81019ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81019f0:	4b15      	ldr	r3, [pc, #84]	; (8101a48 <HAL_InitTick+0x60>)
 81019f2:	781b      	ldrb	r3, [r3, #0]
 81019f4:	2b00      	cmp	r3, #0
 81019f6:	d101      	bne.n	81019fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81019f8:	2301      	movs	r3, #1
 81019fa:	e021      	b.n	8101a40 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81019fc:	4b13      	ldr	r3, [pc, #76]	; (8101a4c <HAL_InitTick+0x64>)
 81019fe:	681a      	ldr	r2, [r3, #0]
 8101a00:	4b11      	ldr	r3, [pc, #68]	; (8101a48 <HAL_InitTick+0x60>)
 8101a02:	781b      	ldrb	r3, [r3, #0]
 8101a04:	4619      	mov	r1, r3
 8101a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8101a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8101a12:	4618      	mov	r0, r3
 8101a14:	f000 f965 	bl	8101ce2 <HAL_SYSTICK_Config>
 8101a18:	4603      	mov	r3, r0
 8101a1a:	2b00      	cmp	r3, #0
 8101a1c:	d001      	beq.n	8101a22 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101a1e:	2301      	movs	r3, #1
 8101a20:	e00e      	b.n	8101a40 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101a22:	687b      	ldr	r3, [r7, #4]
 8101a24:	2b0f      	cmp	r3, #15
 8101a26:	d80a      	bhi.n	8101a3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101a28:	2200      	movs	r2, #0
 8101a2a:	6879      	ldr	r1, [r7, #4]
 8101a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8101a30:	f000 f92f 	bl	8101c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101a34:	4a06      	ldr	r2, [pc, #24]	; (8101a50 <HAL_InitTick+0x68>)
 8101a36:	687b      	ldr	r3, [r7, #4]
 8101a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101a3a:	2300      	movs	r3, #0
 8101a3c:	e000      	b.n	8101a40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101a3e:	2301      	movs	r3, #1
}
 8101a40:	4618      	mov	r0, r3
 8101a42:	3708      	adds	r7, #8
 8101a44:	46bd      	mov	sp, r7
 8101a46:	bd80      	pop	{r7, pc}
 8101a48:	10000010 	.word	0x10000010
 8101a4c:	10000000 	.word	0x10000000
 8101a50:	1000000c 	.word	0x1000000c

08101a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101a54:	b480      	push	{r7}
 8101a56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101a58:	4b06      	ldr	r3, [pc, #24]	; (8101a74 <HAL_IncTick+0x20>)
 8101a5a:	781b      	ldrb	r3, [r3, #0]
 8101a5c:	461a      	mov	r2, r3
 8101a5e:	4b06      	ldr	r3, [pc, #24]	; (8101a78 <HAL_IncTick+0x24>)
 8101a60:	681b      	ldr	r3, [r3, #0]
 8101a62:	4413      	add	r3, r2
 8101a64:	4a04      	ldr	r2, [pc, #16]	; (8101a78 <HAL_IncTick+0x24>)
 8101a66:	6013      	str	r3, [r2, #0]
}
 8101a68:	bf00      	nop
 8101a6a:	46bd      	mov	sp, r7
 8101a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a70:	4770      	bx	lr
 8101a72:	bf00      	nop
 8101a74:	10000010 	.word	0x10000010
 8101a78:	10000338 	.word	0x10000338

08101a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101a7c:	b480      	push	{r7}
 8101a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8101a80:	4b03      	ldr	r3, [pc, #12]	; (8101a90 <HAL_GetTick+0x14>)
 8101a82:	681b      	ldr	r3, [r3, #0]
}
 8101a84:	4618      	mov	r0, r3
 8101a86:	46bd      	mov	sp, r7
 8101a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a8c:	4770      	bx	lr
 8101a8e:	bf00      	nop
 8101a90:	10000338 	.word	0x10000338

08101a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101a94:	b580      	push	{r7, lr}
 8101a96:	b084      	sub	sp, #16
 8101a98:	af00      	add	r7, sp, #0
 8101a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101a9c:	f7ff ffee 	bl	8101a7c <HAL_GetTick>
 8101aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101aa2:	687b      	ldr	r3, [r7, #4]
 8101aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101aa6:	68fb      	ldr	r3, [r7, #12]
 8101aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101aac:	d005      	beq.n	8101aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101aae:	4b0a      	ldr	r3, [pc, #40]	; (8101ad8 <HAL_Delay+0x44>)
 8101ab0:	781b      	ldrb	r3, [r3, #0]
 8101ab2:	461a      	mov	r2, r3
 8101ab4:	68fb      	ldr	r3, [r7, #12]
 8101ab6:	4413      	add	r3, r2
 8101ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101aba:	bf00      	nop
 8101abc:	f7ff ffde 	bl	8101a7c <HAL_GetTick>
 8101ac0:	4602      	mov	r2, r0
 8101ac2:	68bb      	ldr	r3, [r7, #8]
 8101ac4:	1ad3      	subs	r3, r2, r3
 8101ac6:	68fa      	ldr	r2, [r7, #12]
 8101ac8:	429a      	cmp	r2, r3
 8101aca:	d8f7      	bhi.n	8101abc <HAL_Delay+0x28>
  {
  }
}
 8101acc:	bf00      	nop
 8101ace:	bf00      	nop
 8101ad0:	3710      	adds	r7, #16
 8101ad2:	46bd      	mov	sp, r7
 8101ad4:	bd80      	pop	{r7, pc}
 8101ad6:	bf00      	nop
 8101ad8:	10000010 	.word	0x10000010

08101adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101adc:	b480      	push	{r7}
 8101ade:	b085      	sub	sp, #20
 8101ae0:	af00      	add	r7, sp, #0
 8101ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101ae4:	687b      	ldr	r3, [r7, #4]
 8101ae6:	f003 0307 	and.w	r3, r3, #7
 8101aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101aec:	4b0c      	ldr	r3, [pc, #48]	; (8101b20 <__NVIC_SetPriorityGrouping+0x44>)
 8101aee:	68db      	ldr	r3, [r3, #12]
 8101af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101af2:	68ba      	ldr	r2, [r7, #8]
 8101af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101af8:	4013      	ands	r3, r2
 8101afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101afc:	68fb      	ldr	r3, [r7, #12]
 8101afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101b00:	68bb      	ldr	r3, [r7, #8]
 8101b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101b0e:	4a04      	ldr	r2, [pc, #16]	; (8101b20 <__NVIC_SetPriorityGrouping+0x44>)
 8101b10:	68bb      	ldr	r3, [r7, #8]
 8101b12:	60d3      	str	r3, [r2, #12]
}
 8101b14:	bf00      	nop
 8101b16:	3714      	adds	r7, #20
 8101b18:	46bd      	mov	sp, r7
 8101b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b1e:	4770      	bx	lr
 8101b20:	e000ed00 	.word	0xe000ed00

08101b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101b24:	b480      	push	{r7}
 8101b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101b28:	4b04      	ldr	r3, [pc, #16]	; (8101b3c <__NVIC_GetPriorityGrouping+0x18>)
 8101b2a:	68db      	ldr	r3, [r3, #12]
 8101b2c:	0a1b      	lsrs	r3, r3, #8
 8101b2e:	f003 0307 	and.w	r3, r3, #7
}
 8101b32:	4618      	mov	r0, r3
 8101b34:	46bd      	mov	sp, r7
 8101b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b3a:	4770      	bx	lr
 8101b3c:	e000ed00 	.word	0xe000ed00

08101b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101b40:	b480      	push	{r7}
 8101b42:	b083      	sub	sp, #12
 8101b44:	af00      	add	r7, sp, #0
 8101b46:	4603      	mov	r3, r0
 8101b48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101b4e:	2b00      	cmp	r3, #0
 8101b50:	db0b      	blt.n	8101b6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101b52:	88fb      	ldrh	r3, [r7, #6]
 8101b54:	f003 021f 	and.w	r2, r3, #31
 8101b58:	4907      	ldr	r1, [pc, #28]	; (8101b78 <__NVIC_EnableIRQ+0x38>)
 8101b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101b5e:	095b      	lsrs	r3, r3, #5
 8101b60:	2001      	movs	r0, #1
 8101b62:	fa00 f202 	lsl.w	r2, r0, r2
 8101b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101b6a:	bf00      	nop
 8101b6c:	370c      	adds	r7, #12
 8101b6e:	46bd      	mov	sp, r7
 8101b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b74:	4770      	bx	lr
 8101b76:	bf00      	nop
 8101b78:	e000e100 	.word	0xe000e100

08101b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101b7c:	b480      	push	{r7}
 8101b7e:	b083      	sub	sp, #12
 8101b80:	af00      	add	r7, sp, #0
 8101b82:	4603      	mov	r3, r0
 8101b84:	6039      	str	r1, [r7, #0]
 8101b86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101b88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101b8c:	2b00      	cmp	r3, #0
 8101b8e:	db0a      	blt.n	8101ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101b90:	683b      	ldr	r3, [r7, #0]
 8101b92:	b2da      	uxtb	r2, r3
 8101b94:	490c      	ldr	r1, [pc, #48]	; (8101bc8 <__NVIC_SetPriority+0x4c>)
 8101b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101b9a:	0112      	lsls	r2, r2, #4
 8101b9c:	b2d2      	uxtb	r2, r2
 8101b9e:	440b      	add	r3, r1
 8101ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101ba4:	e00a      	b.n	8101bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101ba6:	683b      	ldr	r3, [r7, #0]
 8101ba8:	b2da      	uxtb	r2, r3
 8101baa:	4908      	ldr	r1, [pc, #32]	; (8101bcc <__NVIC_SetPriority+0x50>)
 8101bac:	88fb      	ldrh	r3, [r7, #6]
 8101bae:	f003 030f 	and.w	r3, r3, #15
 8101bb2:	3b04      	subs	r3, #4
 8101bb4:	0112      	lsls	r2, r2, #4
 8101bb6:	b2d2      	uxtb	r2, r2
 8101bb8:	440b      	add	r3, r1
 8101bba:	761a      	strb	r2, [r3, #24]
}
 8101bbc:	bf00      	nop
 8101bbe:	370c      	adds	r7, #12
 8101bc0:	46bd      	mov	sp, r7
 8101bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bc6:	4770      	bx	lr
 8101bc8:	e000e100 	.word	0xe000e100
 8101bcc:	e000ed00 	.word	0xe000ed00

08101bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101bd0:	b480      	push	{r7}
 8101bd2:	b089      	sub	sp, #36	; 0x24
 8101bd4:	af00      	add	r7, sp, #0
 8101bd6:	60f8      	str	r0, [r7, #12]
 8101bd8:	60b9      	str	r1, [r7, #8]
 8101bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101bdc:	68fb      	ldr	r3, [r7, #12]
 8101bde:	f003 0307 	and.w	r3, r3, #7
 8101be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101be4:	69fb      	ldr	r3, [r7, #28]
 8101be6:	f1c3 0307 	rsb	r3, r3, #7
 8101bea:	2b04      	cmp	r3, #4
 8101bec:	bf28      	it	cs
 8101bee:	2304      	movcs	r3, #4
 8101bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101bf2:	69fb      	ldr	r3, [r7, #28]
 8101bf4:	3304      	adds	r3, #4
 8101bf6:	2b06      	cmp	r3, #6
 8101bf8:	d902      	bls.n	8101c00 <NVIC_EncodePriority+0x30>
 8101bfa:	69fb      	ldr	r3, [r7, #28]
 8101bfc:	3b03      	subs	r3, #3
 8101bfe:	e000      	b.n	8101c02 <NVIC_EncodePriority+0x32>
 8101c00:	2300      	movs	r3, #0
 8101c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101c04:	f04f 32ff 	mov.w	r2, #4294967295
 8101c08:	69bb      	ldr	r3, [r7, #24]
 8101c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8101c0e:	43da      	mvns	r2, r3
 8101c10:	68bb      	ldr	r3, [r7, #8]
 8101c12:	401a      	ands	r2, r3
 8101c14:	697b      	ldr	r3, [r7, #20]
 8101c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101c18:	f04f 31ff 	mov.w	r1, #4294967295
 8101c1c:	697b      	ldr	r3, [r7, #20]
 8101c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8101c22:	43d9      	mvns	r1, r3
 8101c24:	687b      	ldr	r3, [r7, #4]
 8101c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101c28:	4313      	orrs	r3, r2
         );
}
 8101c2a:	4618      	mov	r0, r3
 8101c2c:	3724      	adds	r7, #36	; 0x24
 8101c2e:	46bd      	mov	sp, r7
 8101c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c34:	4770      	bx	lr
	...

08101c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101c38:	b580      	push	{r7, lr}
 8101c3a:	b082      	sub	sp, #8
 8101c3c:	af00      	add	r7, sp, #0
 8101c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101c40:	687b      	ldr	r3, [r7, #4]
 8101c42:	3b01      	subs	r3, #1
 8101c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101c48:	d301      	bcc.n	8101c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101c4a:	2301      	movs	r3, #1
 8101c4c:	e00f      	b.n	8101c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101c4e:	4a0a      	ldr	r2, [pc, #40]	; (8101c78 <SysTick_Config+0x40>)
 8101c50:	687b      	ldr	r3, [r7, #4]
 8101c52:	3b01      	subs	r3, #1
 8101c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101c56:	210f      	movs	r1, #15
 8101c58:	f04f 30ff 	mov.w	r0, #4294967295
 8101c5c:	f7ff ff8e 	bl	8101b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101c60:	4b05      	ldr	r3, [pc, #20]	; (8101c78 <SysTick_Config+0x40>)
 8101c62:	2200      	movs	r2, #0
 8101c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101c66:	4b04      	ldr	r3, [pc, #16]	; (8101c78 <SysTick_Config+0x40>)
 8101c68:	2207      	movs	r2, #7
 8101c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101c6c:	2300      	movs	r3, #0
}
 8101c6e:	4618      	mov	r0, r3
 8101c70:	3708      	adds	r7, #8
 8101c72:	46bd      	mov	sp, r7
 8101c74:	bd80      	pop	{r7, pc}
 8101c76:	bf00      	nop
 8101c78:	e000e010 	.word	0xe000e010

08101c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101c7c:	b580      	push	{r7, lr}
 8101c7e:	b082      	sub	sp, #8
 8101c80:	af00      	add	r7, sp, #0
 8101c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101c84:	6878      	ldr	r0, [r7, #4]
 8101c86:	f7ff ff29 	bl	8101adc <__NVIC_SetPriorityGrouping>
}
 8101c8a:	bf00      	nop
 8101c8c:	3708      	adds	r7, #8
 8101c8e:	46bd      	mov	sp, r7
 8101c90:	bd80      	pop	{r7, pc}

08101c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101c92:	b580      	push	{r7, lr}
 8101c94:	b086      	sub	sp, #24
 8101c96:	af00      	add	r7, sp, #0
 8101c98:	4603      	mov	r3, r0
 8101c9a:	60b9      	str	r1, [r7, #8]
 8101c9c:	607a      	str	r2, [r7, #4]
 8101c9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101ca0:	f7ff ff40 	bl	8101b24 <__NVIC_GetPriorityGrouping>
 8101ca4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101ca6:	687a      	ldr	r2, [r7, #4]
 8101ca8:	68b9      	ldr	r1, [r7, #8]
 8101caa:	6978      	ldr	r0, [r7, #20]
 8101cac:	f7ff ff90 	bl	8101bd0 <NVIC_EncodePriority>
 8101cb0:	4602      	mov	r2, r0
 8101cb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101cb6:	4611      	mov	r1, r2
 8101cb8:	4618      	mov	r0, r3
 8101cba:	f7ff ff5f 	bl	8101b7c <__NVIC_SetPriority>
}
 8101cbe:	bf00      	nop
 8101cc0:	3718      	adds	r7, #24
 8101cc2:	46bd      	mov	sp, r7
 8101cc4:	bd80      	pop	{r7, pc}

08101cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101cc6:	b580      	push	{r7, lr}
 8101cc8:	b082      	sub	sp, #8
 8101cca:	af00      	add	r7, sp, #0
 8101ccc:	4603      	mov	r3, r0
 8101cce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101cd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101cd4:	4618      	mov	r0, r3
 8101cd6:	f7ff ff33 	bl	8101b40 <__NVIC_EnableIRQ>
}
 8101cda:	bf00      	nop
 8101cdc:	3708      	adds	r7, #8
 8101cde:	46bd      	mov	sp, r7
 8101ce0:	bd80      	pop	{r7, pc}

08101ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101ce2:	b580      	push	{r7, lr}
 8101ce4:	b082      	sub	sp, #8
 8101ce6:	af00      	add	r7, sp, #0
 8101ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101cea:	6878      	ldr	r0, [r7, #4]
 8101cec:	f7ff ffa4 	bl	8101c38 <SysTick_Config>
 8101cf0:	4603      	mov	r3, r0
}
 8101cf2:	4618      	mov	r0, r3
 8101cf4:	3708      	adds	r7, #8
 8101cf6:	46bd      	mov	sp, r7
 8101cf8:	bd80      	pop	{r7, pc}
	...

08101cfc <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101cfc:	b480      	push	{r7}
 8101cfe:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101d00:	4b07      	ldr	r3, [pc, #28]	; (8101d20 <HAL_GetCurrentCPUID+0x24>)
 8101d02:	681b      	ldr	r3, [r3, #0]
 8101d04:	091b      	lsrs	r3, r3, #4
 8101d06:	f003 030f 	and.w	r3, r3, #15
 8101d0a:	2b07      	cmp	r3, #7
 8101d0c:	d101      	bne.n	8101d12 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101d0e:	2303      	movs	r3, #3
 8101d10:	e000      	b.n	8101d14 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101d12:	2301      	movs	r3, #1
  }
}
 8101d14:	4618      	mov	r0, r3
 8101d16:	46bd      	mov	sp, r7
 8101d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d1c:	4770      	bx	lr
 8101d1e:	bf00      	nop
 8101d20:	e000ed00 	.word	0xe000ed00

08101d24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8101d24:	b580      	push	{r7, lr}
 8101d26:	b086      	sub	sp, #24
 8101d28:	af00      	add	r7, sp, #0
 8101d2a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8101d2c:	f7ff fea6 	bl	8101a7c <HAL_GetTick>
 8101d30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8101d32:	687b      	ldr	r3, [r7, #4]
 8101d34:	2b00      	cmp	r3, #0
 8101d36:	d101      	bne.n	8101d3c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8101d38:	2301      	movs	r3, #1
 8101d3a:	e314      	b.n	8102366 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101d3c:	687b      	ldr	r3, [r7, #4]
 8101d3e:	681b      	ldr	r3, [r3, #0]
 8101d40:	4a66      	ldr	r2, [pc, #408]	; (8101edc <HAL_DMA_Init+0x1b8>)
 8101d42:	4293      	cmp	r3, r2
 8101d44:	d04a      	beq.n	8101ddc <HAL_DMA_Init+0xb8>
 8101d46:	687b      	ldr	r3, [r7, #4]
 8101d48:	681b      	ldr	r3, [r3, #0]
 8101d4a:	4a65      	ldr	r2, [pc, #404]	; (8101ee0 <HAL_DMA_Init+0x1bc>)
 8101d4c:	4293      	cmp	r3, r2
 8101d4e:	d045      	beq.n	8101ddc <HAL_DMA_Init+0xb8>
 8101d50:	687b      	ldr	r3, [r7, #4]
 8101d52:	681b      	ldr	r3, [r3, #0]
 8101d54:	4a63      	ldr	r2, [pc, #396]	; (8101ee4 <HAL_DMA_Init+0x1c0>)
 8101d56:	4293      	cmp	r3, r2
 8101d58:	d040      	beq.n	8101ddc <HAL_DMA_Init+0xb8>
 8101d5a:	687b      	ldr	r3, [r7, #4]
 8101d5c:	681b      	ldr	r3, [r3, #0]
 8101d5e:	4a62      	ldr	r2, [pc, #392]	; (8101ee8 <HAL_DMA_Init+0x1c4>)
 8101d60:	4293      	cmp	r3, r2
 8101d62:	d03b      	beq.n	8101ddc <HAL_DMA_Init+0xb8>
 8101d64:	687b      	ldr	r3, [r7, #4]
 8101d66:	681b      	ldr	r3, [r3, #0]
 8101d68:	4a60      	ldr	r2, [pc, #384]	; (8101eec <HAL_DMA_Init+0x1c8>)
 8101d6a:	4293      	cmp	r3, r2
 8101d6c:	d036      	beq.n	8101ddc <HAL_DMA_Init+0xb8>
 8101d6e:	687b      	ldr	r3, [r7, #4]
 8101d70:	681b      	ldr	r3, [r3, #0]
 8101d72:	4a5f      	ldr	r2, [pc, #380]	; (8101ef0 <HAL_DMA_Init+0x1cc>)
 8101d74:	4293      	cmp	r3, r2
 8101d76:	d031      	beq.n	8101ddc <HAL_DMA_Init+0xb8>
 8101d78:	687b      	ldr	r3, [r7, #4]
 8101d7a:	681b      	ldr	r3, [r3, #0]
 8101d7c:	4a5d      	ldr	r2, [pc, #372]	; (8101ef4 <HAL_DMA_Init+0x1d0>)
 8101d7e:	4293      	cmp	r3, r2
 8101d80:	d02c      	beq.n	8101ddc <HAL_DMA_Init+0xb8>
 8101d82:	687b      	ldr	r3, [r7, #4]
 8101d84:	681b      	ldr	r3, [r3, #0]
 8101d86:	4a5c      	ldr	r2, [pc, #368]	; (8101ef8 <HAL_DMA_Init+0x1d4>)
 8101d88:	4293      	cmp	r3, r2
 8101d8a:	d027      	beq.n	8101ddc <HAL_DMA_Init+0xb8>
 8101d8c:	687b      	ldr	r3, [r7, #4]
 8101d8e:	681b      	ldr	r3, [r3, #0]
 8101d90:	4a5a      	ldr	r2, [pc, #360]	; (8101efc <HAL_DMA_Init+0x1d8>)
 8101d92:	4293      	cmp	r3, r2
 8101d94:	d022      	beq.n	8101ddc <HAL_DMA_Init+0xb8>
 8101d96:	687b      	ldr	r3, [r7, #4]
 8101d98:	681b      	ldr	r3, [r3, #0]
 8101d9a:	4a59      	ldr	r2, [pc, #356]	; (8101f00 <HAL_DMA_Init+0x1dc>)
 8101d9c:	4293      	cmp	r3, r2
 8101d9e:	d01d      	beq.n	8101ddc <HAL_DMA_Init+0xb8>
 8101da0:	687b      	ldr	r3, [r7, #4]
 8101da2:	681b      	ldr	r3, [r3, #0]
 8101da4:	4a57      	ldr	r2, [pc, #348]	; (8101f04 <HAL_DMA_Init+0x1e0>)
 8101da6:	4293      	cmp	r3, r2
 8101da8:	d018      	beq.n	8101ddc <HAL_DMA_Init+0xb8>
 8101daa:	687b      	ldr	r3, [r7, #4]
 8101dac:	681b      	ldr	r3, [r3, #0]
 8101dae:	4a56      	ldr	r2, [pc, #344]	; (8101f08 <HAL_DMA_Init+0x1e4>)
 8101db0:	4293      	cmp	r3, r2
 8101db2:	d013      	beq.n	8101ddc <HAL_DMA_Init+0xb8>
 8101db4:	687b      	ldr	r3, [r7, #4]
 8101db6:	681b      	ldr	r3, [r3, #0]
 8101db8:	4a54      	ldr	r2, [pc, #336]	; (8101f0c <HAL_DMA_Init+0x1e8>)
 8101dba:	4293      	cmp	r3, r2
 8101dbc:	d00e      	beq.n	8101ddc <HAL_DMA_Init+0xb8>
 8101dbe:	687b      	ldr	r3, [r7, #4]
 8101dc0:	681b      	ldr	r3, [r3, #0]
 8101dc2:	4a53      	ldr	r2, [pc, #332]	; (8101f10 <HAL_DMA_Init+0x1ec>)
 8101dc4:	4293      	cmp	r3, r2
 8101dc6:	d009      	beq.n	8101ddc <HAL_DMA_Init+0xb8>
 8101dc8:	687b      	ldr	r3, [r7, #4]
 8101dca:	681b      	ldr	r3, [r3, #0]
 8101dcc:	4a51      	ldr	r2, [pc, #324]	; (8101f14 <HAL_DMA_Init+0x1f0>)
 8101dce:	4293      	cmp	r3, r2
 8101dd0:	d004      	beq.n	8101ddc <HAL_DMA_Init+0xb8>
 8101dd2:	687b      	ldr	r3, [r7, #4]
 8101dd4:	681b      	ldr	r3, [r3, #0]
 8101dd6:	4a50      	ldr	r2, [pc, #320]	; (8101f18 <HAL_DMA_Init+0x1f4>)
 8101dd8:	4293      	cmp	r3, r2
 8101dda:	d101      	bne.n	8101de0 <HAL_DMA_Init+0xbc>
 8101ddc:	2301      	movs	r3, #1
 8101dde:	e000      	b.n	8101de2 <HAL_DMA_Init+0xbe>
 8101de0:	2300      	movs	r3, #0
 8101de2:	2b00      	cmp	r3, #0
 8101de4:	f000 813b 	beq.w	810205e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8101de8:	687b      	ldr	r3, [r7, #4]
 8101dea:	2202      	movs	r2, #2
 8101dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8101df0:	687b      	ldr	r3, [r7, #4]
 8101df2:	2200      	movs	r2, #0
 8101df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8101df8:	687b      	ldr	r3, [r7, #4]
 8101dfa:	681b      	ldr	r3, [r3, #0]
 8101dfc:	4a37      	ldr	r2, [pc, #220]	; (8101edc <HAL_DMA_Init+0x1b8>)
 8101dfe:	4293      	cmp	r3, r2
 8101e00:	d04a      	beq.n	8101e98 <HAL_DMA_Init+0x174>
 8101e02:	687b      	ldr	r3, [r7, #4]
 8101e04:	681b      	ldr	r3, [r3, #0]
 8101e06:	4a36      	ldr	r2, [pc, #216]	; (8101ee0 <HAL_DMA_Init+0x1bc>)
 8101e08:	4293      	cmp	r3, r2
 8101e0a:	d045      	beq.n	8101e98 <HAL_DMA_Init+0x174>
 8101e0c:	687b      	ldr	r3, [r7, #4]
 8101e0e:	681b      	ldr	r3, [r3, #0]
 8101e10:	4a34      	ldr	r2, [pc, #208]	; (8101ee4 <HAL_DMA_Init+0x1c0>)
 8101e12:	4293      	cmp	r3, r2
 8101e14:	d040      	beq.n	8101e98 <HAL_DMA_Init+0x174>
 8101e16:	687b      	ldr	r3, [r7, #4]
 8101e18:	681b      	ldr	r3, [r3, #0]
 8101e1a:	4a33      	ldr	r2, [pc, #204]	; (8101ee8 <HAL_DMA_Init+0x1c4>)
 8101e1c:	4293      	cmp	r3, r2
 8101e1e:	d03b      	beq.n	8101e98 <HAL_DMA_Init+0x174>
 8101e20:	687b      	ldr	r3, [r7, #4]
 8101e22:	681b      	ldr	r3, [r3, #0]
 8101e24:	4a31      	ldr	r2, [pc, #196]	; (8101eec <HAL_DMA_Init+0x1c8>)
 8101e26:	4293      	cmp	r3, r2
 8101e28:	d036      	beq.n	8101e98 <HAL_DMA_Init+0x174>
 8101e2a:	687b      	ldr	r3, [r7, #4]
 8101e2c:	681b      	ldr	r3, [r3, #0]
 8101e2e:	4a30      	ldr	r2, [pc, #192]	; (8101ef0 <HAL_DMA_Init+0x1cc>)
 8101e30:	4293      	cmp	r3, r2
 8101e32:	d031      	beq.n	8101e98 <HAL_DMA_Init+0x174>
 8101e34:	687b      	ldr	r3, [r7, #4]
 8101e36:	681b      	ldr	r3, [r3, #0]
 8101e38:	4a2e      	ldr	r2, [pc, #184]	; (8101ef4 <HAL_DMA_Init+0x1d0>)
 8101e3a:	4293      	cmp	r3, r2
 8101e3c:	d02c      	beq.n	8101e98 <HAL_DMA_Init+0x174>
 8101e3e:	687b      	ldr	r3, [r7, #4]
 8101e40:	681b      	ldr	r3, [r3, #0]
 8101e42:	4a2d      	ldr	r2, [pc, #180]	; (8101ef8 <HAL_DMA_Init+0x1d4>)
 8101e44:	4293      	cmp	r3, r2
 8101e46:	d027      	beq.n	8101e98 <HAL_DMA_Init+0x174>
 8101e48:	687b      	ldr	r3, [r7, #4]
 8101e4a:	681b      	ldr	r3, [r3, #0]
 8101e4c:	4a2b      	ldr	r2, [pc, #172]	; (8101efc <HAL_DMA_Init+0x1d8>)
 8101e4e:	4293      	cmp	r3, r2
 8101e50:	d022      	beq.n	8101e98 <HAL_DMA_Init+0x174>
 8101e52:	687b      	ldr	r3, [r7, #4]
 8101e54:	681b      	ldr	r3, [r3, #0]
 8101e56:	4a2a      	ldr	r2, [pc, #168]	; (8101f00 <HAL_DMA_Init+0x1dc>)
 8101e58:	4293      	cmp	r3, r2
 8101e5a:	d01d      	beq.n	8101e98 <HAL_DMA_Init+0x174>
 8101e5c:	687b      	ldr	r3, [r7, #4]
 8101e5e:	681b      	ldr	r3, [r3, #0]
 8101e60:	4a28      	ldr	r2, [pc, #160]	; (8101f04 <HAL_DMA_Init+0x1e0>)
 8101e62:	4293      	cmp	r3, r2
 8101e64:	d018      	beq.n	8101e98 <HAL_DMA_Init+0x174>
 8101e66:	687b      	ldr	r3, [r7, #4]
 8101e68:	681b      	ldr	r3, [r3, #0]
 8101e6a:	4a27      	ldr	r2, [pc, #156]	; (8101f08 <HAL_DMA_Init+0x1e4>)
 8101e6c:	4293      	cmp	r3, r2
 8101e6e:	d013      	beq.n	8101e98 <HAL_DMA_Init+0x174>
 8101e70:	687b      	ldr	r3, [r7, #4]
 8101e72:	681b      	ldr	r3, [r3, #0]
 8101e74:	4a25      	ldr	r2, [pc, #148]	; (8101f0c <HAL_DMA_Init+0x1e8>)
 8101e76:	4293      	cmp	r3, r2
 8101e78:	d00e      	beq.n	8101e98 <HAL_DMA_Init+0x174>
 8101e7a:	687b      	ldr	r3, [r7, #4]
 8101e7c:	681b      	ldr	r3, [r3, #0]
 8101e7e:	4a24      	ldr	r2, [pc, #144]	; (8101f10 <HAL_DMA_Init+0x1ec>)
 8101e80:	4293      	cmp	r3, r2
 8101e82:	d009      	beq.n	8101e98 <HAL_DMA_Init+0x174>
 8101e84:	687b      	ldr	r3, [r7, #4]
 8101e86:	681b      	ldr	r3, [r3, #0]
 8101e88:	4a22      	ldr	r2, [pc, #136]	; (8101f14 <HAL_DMA_Init+0x1f0>)
 8101e8a:	4293      	cmp	r3, r2
 8101e8c:	d004      	beq.n	8101e98 <HAL_DMA_Init+0x174>
 8101e8e:	687b      	ldr	r3, [r7, #4]
 8101e90:	681b      	ldr	r3, [r3, #0]
 8101e92:	4a21      	ldr	r2, [pc, #132]	; (8101f18 <HAL_DMA_Init+0x1f4>)
 8101e94:	4293      	cmp	r3, r2
 8101e96:	d108      	bne.n	8101eaa <HAL_DMA_Init+0x186>
 8101e98:	687b      	ldr	r3, [r7, #4]
 8101e9a:	681b      	ldr	r3, [r3, #0]
 8101e9c:	681a      	ldr	r2, [r3, #0]
 8101e9e:	687b      	ldr	r3, [r7, #4]
 8101ea0:	681b      	ldr	r3, [r3, #0]
 8101ea2:	f022 0201 	bic.w	r2, r2, #1
 8101ea6:	601a      	str	r2, [r3, #0]
 8101ea8:	e007      	b.n	8101eba <HAL_DMA_Init+0x196>
 8101eaa:	687b      	ldr	r3, [r7, #4]
 8101eac:	681b      	ldr	r3, [r3, #0]
 8101eae:	681a      	ldr	r2, [r3, #0]
 8101eb0:	687b      	ldr	r3, [r7, #4]
 8101eb2:	681b      	ldr	r3, [r3, #0]
 8101eb4:	f022 0201 	bic.w	r2, r2, #1
 8101eb8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8101eba:	e02f      	b.n	8101f1c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8101ebc:	f7ff fdde 	bl	8101a7c <HAL_GetTick>
 8101ec0:	4602      	mov	r2, r0
 8101ec2:	693b      	ldr	r3, [r7, #16]
 8101ec4:	1ad3      	subs	r3, r2, r3
 8101ec6:	2b05      	cmp	r3, #5
 8101ec8:	d928      	bls.n	8101f1c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8101eca:	687b      	ldr	r3, [r7, #4]
 8101ecc:	2220      	movs	r2, #32
 8101ece:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8101ed0:	687b      	ldr	r3, [r7, #4]
 8101ed2:	2203      	movs	r2, #3
 8101ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8101ed8:	2301      	movs	r3, #1
 8101eda:	e244      	b.n	8102366 <HAL_DMA_Init+0x642>
 8101edc:	40020010 	.word	0x40020010
 8101ee0:	40020028 	.word	0x40020028
 8101ee4:	40020040 	.word	0x40020040
 8101ee8:	40020058 	.word	0x40020058
 8101eec:	40020070 	.word	0x40020070
 8101ef0:	40020088 	.word	0x40020088
 8101ef4:	400200a0 	.word	0x400200a0
 8101ef8:	400200b8 	.word	0x400200b8
 8101efc:	40020410 	.word	0x40020410
 8101f00:	40020428 	.word	0x40020428
 8101f04:	40020440 	.word	0x40020440
 8101f08:	40020458 	.word	0x40020458
 8101f0c:	40020470 	.word	0x40020470
 8101f10:	40020488 	.word	0x40020488
 8101f14:	400204a0 	.word	0x400204a0
 8101f18:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8101f1c:	687b      	ldr	r3, [r7, #4]
 8101f1e:	681b      	ldr	r3, [r3, #0]
 8101f20:	681b      	ldr	r3, [r3, #0]
 8101f22:	f003 0301 	and.w	r3, r3, #1
 8101f26:	2b00      	cmp	r3, #0
 8101f28:	d1c8      	bne.n	8101ebc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8101f2a:	687b      	ldr	r3, [r7, #4]
 8101f2c:	681b      	ldr	r3, [r3, #0]
 8101f2e:	681b      	ldr	r3, [r3, #0]
 8101f30:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8101f32:	697a      	ldr	r2, [r7, #20]
 8101f34:	4b84      	ldr	r3, [pc, #528]	; (8102148 <HAL_DMA_Init+0x424>)
 8101f36:	4013      	ands	r3, r2
 8101f38:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8101f3a:	687b      	ldr	r3, [r7, #4]
 8101f3c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8101f3e:	687b      	ldr	r3, [r7, #4]
 8101f40:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8101f42:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8101f44:	687b      	ldr	r3, [r7, #4]
 8101f46:	691b      	ldr	r3, [r3, #16]
 8101f48:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8101f4a:	687b      	ldr	r3, [r7, #4]
 8101f4c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8101f4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8101f50:	687b      	ldr	r3, [r7, #4]
 8101f52:	699b      	ldr	r3, [r3, #24]
 8101f54:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8101f56:	687b      	ldr	r3, [r7, #4]
 8101f58:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8101f5a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8101f5c:	687b      	ldr	r3, [r7, #4]
 8101f5e:	6a1b      	ldr	r3, [r3, #32]
 8101f60:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8101f62:	697a      	ldr	r2, [r7, #20]
 8101f64:	4313      	orrs	r3, r2
 8101f66:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8101f68:	687b      	ldr	r3, [r7, #4]
 8101f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101f6c:	2b04      	cmp	r3, #4
 8101f6e:	d107      	bne.n	8101f80 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8101f70:	687b      	ldr	r3, [r7, #4]
 8101f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8101f74:	687b      	ldr	r3, [r7, #4]
 8101f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101f78:	4313      	orrs	r3, r2
 8101f7a:	697a      	ldr	r2, [r7, #20]
 8101f7c:	4313      	orrs	r3, r2
 8101f7e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8101f80:	4b72      	ldr	r3, [pc, #456]	; (810214c <HAL_DMA_Init+0x428>)
 8101f82:	681b      	ldr	r3, [r3, #0]
 8101f84:	0c1b      	lsrs	r3, r3, #16
 8101f86:	041b      	lsls	r3, r3, #16
 8101f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101f8c:	d328      	bcc.n	8101fe0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8101f8e:	687b      	ldr	r3, [r7, #4]
 8101f90:	685b      	ldr	r3, [r3, #4]
 8101f92:	2b28      	cmp	r3, #40	; 0x28
 8101f94:	d903      	bls.n	8101f9e <HAL_DMA_Init+0x27a>
 8101f96:	687b      	ldr	r3, [r7, #4]
 8101f98:	685b      	ldr	r3, [r3, #4]
 8101f9a:	2b2e      	cmp	r3, #46	; 0x2e
 8101f9c:	d917      	bls.n	8101fce <HAL_DMA_Init+0x2aa>
 8101f9e:	687b      	ldr	r3, [r7, #4]
 8101fa0:	685b      	ldr	r3, [r3, #4]
 8101fa2:	2b3e      	cmp	r3, #62	; 0x3e
 8101fa4:	d903      	bls.n	8101fae <HAL_DMA_Init+0x28a>
 8101fa6:	687b      	ldr	r3, [r7, #4]
 8101fa8:	685b      	ldr	r3, [r3, #4]
 8101faa:	2b42      	cmp	r3, #66	; 0x42
 8101fac:	d90f      	bls.n	8101fce <HAL_DMA_Init+0x2aa>
 8101fae:	687b      	ldr	r3, [r7, #4]
 8101fb0:	685b      	ldr	r3, [r3, #4]
 8101fb2:	2b46      	cmp	r3, #70	; 0x46
 8101fb4:	d903      	bls.n	8101fbe <HAL_DMA_Init+0x29a>
 8101fb6:	687b      	ldr	r3, [r7, #4]
 8101fb8:	685b      	ldr	r3, [r3, #4]
 8101fba:	2b48      	cmp	r3, #72	; 0x48
 8101fbc:	d907      	bls.n	8101fce <HAL_DMA_Init+0x2aa>
 8101fbe:	687b      	ldr	r3, [r7, #4]
 8101fc0:	685b      	ldr	r3, [r3, #4]
 8101fc2:	2b4e      	cmp	r3, #78	; 0x4e
 8101fc4:	d905      	bls.n	8101fd2 <HAL_DMA_Init+0x2ae>
 8101fc6:	687b      	ldr	r3, [r7, #4]
 8101fc8:	685b      	ldr	r3, [r3, #4]
 8101fca:	2b52      	cmp	r3, #82	; 0x52
 8101fcc:	d801      	bhi.n	8101fd2 <HAL_DMA_Init+0x2ae>
 8101fce:	2301      	movs	r3, #1
 8101fd0:	e000      	b.n	8101fd4 <HAL_DMA_Init+0x2b0>
 8101fd2:	2300      	movs	r3, #0
 8101fd4:	2b00      	cmp	r3, #0
 8101fd6:	d003      	beq.n	8101fe0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8101fd8:	697b      	ldr	r3, [r7, #20]
 8101fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8101fde:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8101fe0:	687b      	ldr	r3, [r7, #4]
 8101fe2:	681b      	ldr	r3, [r3, #0]
 8101fe4:	697a      	ldr	r2, [r7, #20]
 8101fe6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8101fe8:	687b      	ldr	r3, [r7, #4]
 8101fea:	681b      	ldr	r3, [r3, #0]
 8101fec:	695b      	ldr	r3, [r3, #20]
 8101fee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8101ff0:	697b      	ldr	r3, [r7, #20]
 8101ff2:	f023 0307 	bic.w	r3, r3, #7
 8101ff6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8101ff8:	687b      	ldr	r3, [r7, #4]
 8101ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101ffc:	697a      	ldr	r2, [r7, #20]
 8101ffe:	4313      	orrs	r3, r2
 8102000:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102002:	687b      	ldr	r3, [r7, #4]
 8102004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102006:	2b04      	cmp	r3, #4
 8102008:	d117      	bne.n	810203a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 810200a:	687b      	ldr	r3, [r7, #4]
 810200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810200e:	697a      	ldr	r2, [r7, #20]
 8102010:	4313      	orrs	r3, r2
 8102012:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8102014:	687b      	ldr	r3, [r7, #4]
 8102016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102018:	2b00      	cmp	r3, #0
 810201a:	d00e      	beq.n	810203a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 810201c:	6878      	ldr	r0, [r7, #4]
 810201e:	f000 fa8d 	bl	810253c <DMA_CheckFifoParam>
 8102022:	4603      	mov	r3, r0
 8102024:	2b00      	cmp	r3, #0
 8102026:	d008      	beq.n	810203a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102028:	687b      	ldr	r3, [r7, #4]
 810202a:	2240      	movs	r2, #64	; 0x40
 810202c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810202e:	687b      	ldr	r3, [r7, #4]
 8102030:	2201      	movs	r2, #1
 8102032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8102036:	2301      	movs	r3, #1
 8102038:	e195      	b.n	8102366 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 810203a:	687b      	ldr	r3, [r7, #4]
 810203c:	681b      	ldr	r3, [r3, #0]
 810203e:	697a      	ldr	r2, [r7, #20]
 8102040:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102042:	6878      	ldr	r0, [r7, #4]
 8102044:	f000 f9c8 	bl	81023d8 <DMA_CalcBaseAndBitshift>
 8102048:	4603      	mov	r3, r0
 810204a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810204c:	687b      	ldr	r3, [r7, #4]
 810204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102050:	f003 031f 	and.w	r3, r3, #31
 8102054:	223f      	movs	r2, #63	; 0x3f
 8102056:	409a      	lsls	r2, r3
 8102058:	68bb      	ldr	r3, [r7, #8]
 810205a:	609a      	str	r2, [r3, #8]
 810205c:	e0cb      	b.n	81021f6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 810205e:	687b      	ldr	r3, [r7, #4]
 8102060:	681b      	ldr	r3, [r3, #0]
 8102062:	4a3b      	ldr	r2, [pc, #236]	; (8102150 <HAL_DMA_Init+0x42c>)
 8102064:	4293      	cmp	r3, r2
 8102066:	d022      	beq.n	81020ae <HAL_DMA_Init+0x38a>
 8102068:	687b      	ldr	r3, [r7, #4]
 810206a:	681b      	ldr	r3, [r3, #0]
 810206c:	4a39      	ldr	r2, [pc, #228]	; (8102154 <HAL_DMA_Init+0x430>)
 810206e:	4293      	cmp	r3, r2
 8102070:	d01d      	beq.n	81020ae <HAL_DMA_Init+0x38a>
 8102072:	687b      	ldr	r3, [r7, #4]
 8102074:	681b      	ldr	r3, [r3, #0]
 8102076:	4a38      	ldr	r2, [pc, #224]	; (8102158 <HAL_DMA_Init+0x434>)
 8102078:	4293      	cmp	r3, r2
 810207a:	d018      	beq.n	81020ae <HAL_DMA_Init+0x38a>
 810207c:	687b      	ldr	r3, [r7, #4]
 810207e:	681b      	ldr	r3, [r3, #0]
 8102080:	4a36      	ldr	r2, [pc, #216]	; (810215c <HAL_DMA_Init+0x438>)
 8102082:	4293      	cmp	r3, r2
 8102084:	d013      	beq.n	81020ae <HAL_DMA_Init+0x38a>
 8102086:	687b      	ldr	r3, [r7, #4]
 8102088:	681b      	ldr	r3, [r3, #0]
 810208a:	4a35      	ldr	r2, [pc, #212]	; (8102160 <HAL_DMA_Init+0x43c>)
 810208c:	4293      	cmp	r3, r2
 810208e:	d00e      	beq.n	81020ae <HAL_DMA_Init+0x38a>
 8102090:	687b      	ldr	r3, [r7, #4]
 8102092:	681b      	ldr	r3, [r3, #0]
 8102094:	4a33      	ldr	r2, [pc, #204]	; (8102164 <HAL_DMA_Init+0x440>)
 8102096:	4293      	cmp	r3, r2
 8102098:	d009      	beq.n	81020ae <HAL_DMA_Init+0x38a>
 810209a:	687b      	ldr	r3, [r7, #4]
 810209c:	681b      	ldr	r3, [r3, #0]
 810209e:	4a32      	ldr	r2, [pc, #200]	; (8102168 <HAL_DMA_Init+0x444>)
 81020a0:	4293      	cmp	r3, r2
 81020a2:	d004      	beq.n	81020ae <HAL_DMA_Init+0x38a>
 81020a4:	687b      	ldr	r3, [r7, #4]
 81020a6:	681b      	ldr	r3, [r3, #0]
 81020a8:	4a30      	ldr	r2, [pc, #192]	; (810216c <HAL_DMA_Init+0x448>)
 81020aa:	4293      	cmp	r3, r2
 81020ac:	d101      	bne.n	81020b2 <HAL_DMA_Init+0x38e>
 81020ae:	2301      	movs	r3, #1
 81020b0:	e000      	b.n	81020b4 <HAL_DMA_Init+0x390>
 81020b2:	2300      	movs	r3, #0
 81020b4:	2b00      	cmp	r3, #0
 81020b6:	f000 8095 	beq.w	81021e4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81020ba:	687b      	ldr	r3, [r7, #4]
 81020bc:	681b      	ldr	r3, [r3, #0]
 81020be:	4a24      	ldr	r2, [pc, #144]	; (8102150 <HAL_DMA_Init+0x42c>)
 81020c0:	4293      	cmp	r3, r2
 81020c2:	d021      	beq.n	8102108 <HAL_DMA_Init+0x3e4>
 81020c4:	687b      	ldr	r3, [r7, #4]
 81020c6:	681b      	ldr	r3, [r3, #0]
 81020c8:	4a22      	ldr	r2, [pc, #136]	; (8102154 <HAL_DMA_Init+0x430>)
 81020ca:	4293      	cmp	r3, r2
 81020cc:	d01c      	beq.n	8102108 <HAL_DMA_Init+0x3e4>
 81020ce:	687b      	ldr	r3, [r7, #4]
 81020d0:	681b      	ldr	r3, [r3, #0]
 81020d2:	4a21      	ldr	r2, [pc, #132]	; (8102158 <HAL_DMA_Init+0x434>)
 81020d4:	4293      	cmp	r3, r2
 81020d6:	d017      	beq.n	8102108 <HAL_DMA_Init+0x3e4>
 81020d8:	687b      	ldr	r3, [r7, #4]
 81020da:	681b      	ldr	r3, [r3, #0]
 81020dc:	4a1f      	ldr	r2, [pc, #124]	; (810215c <HAL_DMA_Init+0x438>)
 81020de:	4293      	cmp	r3, r2
 81020e0:	d012      	beq.n	8102108 <HAL_DMA_Init+0x3e4>
 81020e2:	687b      	ldr	r3, [r7, #4]
 81020e4:	681b      	ldr	r3, [r3, #0]
 81020e6:	4a1e      	ldr	r2, [pc, #120]	; (8102160 <HAL_DMA_Init+0x43c>)
 81020e8:	4293      	cmp	r3, r2
 81020ea:	d00d      	beq.n	8102108 <HAL_DMA_Init+0x3e4>
 81020ec:	687b      	ldr	r3, [r7, #4]
 81020ee:	681b      	ldr	r3, [r3, #0]
 81020f0:	4a1c      	ldr	r2, [pc, #112]	; (8102164 <HAL_DMA_Init+0x440>)
 81020f2:	4293      	cmp	r3, r2
 81020f4:	d008      	beq.n	8102108 <HAL_DMA_Init+0x3e4>
 81020f6:	687b      	ldr	r3, [r7, #4]
 81020f8:	681b      	ldr	r3, [r3, #0]
 81020fa:	4a1b      	ldr	r2, [pc, #108]	; (8102168 <HAL_DMA_Init+0x444>)
 81020fc:	4293      	cmp	r3, r2
 81020fe:	d003      	beq.n	8102108 <HAL_DMA_Init+0x3e4>
 8102100:	687b      	ldr	r3, [r7, #4]
 8102102:	681b      	ldr	r3, [r3, #0]
 8102104:	4a19      	ldr	r2, [pc, #100]	; (810216c <HAL_DMA_Init+0x448>)
 8102106:	4293      	cmp	r3, r2
 8102108:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 810210a:	687b      	ldr	r3, [r7, #4]
 810210c:	2202      	movs	r2, #2
 810210e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102112:	687b      	ldr	r3, [r7, #4]
 8102114:	2200      	movs	r2, #0
 8102116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 810211a:	687b      	ldr	r3, [r7, #4]
 810211c:	681b      	ldr	r3, [r3, #0]
 810211e:	681b      	ldr	r3, [r3, #0]
 8102120:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8102122:	697b      	ldr	r3, [r7, #20]
 8102124:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8102128:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 810212c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810212e:	687b      	ldr	r3, [r7, #4]
 8102130:	689b      	ldr	r3, [r3, #8]
 8102132:	2b40      	cmp	r3, #64	; 0x40
 8102134:	d01c      	beq.n	8102170 <HAL_DMA_Init+0x44c>
 8102136:	687b      	ldr	r3, [r7, #4]
 8102138:	689b      	ldr	r3, [r3, #8]
 810213a:	2b80      	cmp	r3, #128	; 0x80
 810213c:	d102      	bne.n	8102144 <HAL_DMA_Init+0x420>
 810213e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8102142:	e016      	b.n	8102172 <HAL_DMA_Init+0x44e>
 8102144:	2300      	movs	r3, #0
 8102146:	e014      	b.n	8102172 <HAL_DMA_Init+0x44e>
 8102148:	fe10803f 	.word	0xfe10803f
 810214c:	5c001000 	.word	0x5c001000
 8102150:	58025408 	.word	0x58025408
 8102154:	5802541c 	.word	0x5802541c
 8102158:	58025430 	.word	0x58025430
 810215c:	58025444 	.word	0x58025444
 8102160:	58025458 	.word	0x58025458
 8102164:	5802546c 	.word	0x5802546c
 8102168:	58025480 	.word	0x58025480
 810216c:	58025494 	.word	0x58025494
 8102170:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102172:	687a      	ldr	r2, [r7, #4]
 8102174:	68d2      	ldr	r2, [r2, #12]
 8102176:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102178:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 810217a:	687b      	ldr	r3, [r7, #4]
 810217c:	691b      	ldr	r3, [r3, #16]
 810217e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102180:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102182:	687b      	ldr	r3, [r7, #4]
 8102184:	695b      	ldr	r3, [r3, #20]
 8102186:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102188:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810218a:	687b      	ldr	r3, [r7, #4]
 810218c:	699b      	ldr	r3, [r3, #24]
 810218e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102190:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102192:	687b      	ldr	r3, [r7, #4]
 8102194:	69db      	ldr	r3, [r3, #28]
 8102196:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102198:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 810219a:	687b      	ldr	r3, [r7, #4]
 810219c:	6a1b      	ldr	r3, [r3, #32]
 810219e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81021a0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81021a2:	697a      	ldr	r2, [r7, #20]
 81021a4:	4313      	orrs	r3, r2
 81021a6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 81021a8:	687b      	ldr	r3, [r7, #4]
 81021aa:	681b      	ldr	r3, [r3, #0]
 81021ac:	697a      	ldr	r2, [r7, #20]
 81021ae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 81021b0:	687b      	ldr	r3, [r7, #4]
 81021b2:	681b      	ldr	r3, [r3, #0]
 81021b4:	461a      	mov	r2, r3
 81021b6:	4b6e      	ldr	r3, [pc, #440]	; (8102370 <HAL_DMA_Init+0x64c>)
 81021b8:	4413      	add	r3, r2
 81021ba:	4a6e      	ldr	r2, [pc, #440]	; (8102374 <HAL_DMA_Init+0x650>)
 81021bc:	fba2 2303 	umull	r2, r3, r2, r3
 81021c0:	091b      	lsrs	r3, r3, #4
 81021c2:	009a      	lsls	r2, r3, #2
 81021c4:	687b      	ldr	r3, [r7, #4]
 81021c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81021c8:	6878      	ldr	r0, [r7, #4]
 81021ca:	f000 f905 	bl	81023d8 <DMA_CalcBaseAndBitshift>
 81021ce:	4603      	mov	r3, r0
 81021d0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81021d2:	687b      	ldr	r3, [r7, #4]
 81021d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81021d6:	f003 031f 	and.w	r3, r3, #31
 81021da:	2201      	movs	r2, #1
 81021dc:	409a      	lsls	r2, r3
 81021de:	68fb      	ldr	r3, [r7, #12]
 81021e0:	605a      	str	r2, [r3, #4]
 81021e2:	e008      	b.n	81021f6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81021e4:	687b      	ldr	r3, [r7, #4]
 81021e6:	2240      	movs	r2, #64	; 0x40
 81021e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 81021ea:	687b      	ldr	r3, [r7, #4]
 81021ec:	2203      	movs	r2, #3
 81021ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 81021f2:	2301      	movs	r3, #1
 81021f4:	e0b7      	b.n	8102366 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81021f6:	687b      	ldr	r3, [r7, #4]
 81021f8:	681b      	ldr	r3, [r3, #0]
 81021fa:	4a5f      	ldr	r2, [pc, #380]	; (8102378 <HAL_DMA_Init+0x654>)
 81021fc:	4293      	cmp	r3, r2
 81021fe:	d072      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 8102200:	687b      	ldr	r3, [r7, #4]
 8102202:	681b      	ldr	r3, [r3, #0]
 8102204:	4a5d      	ldr	r2, [pc, #372]	; (810237c <HAL_DMA_Init+0x658>)
 8102206:	4293      	cmp	r3, r2
 8102208:	d06d      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 810220a:	687b      	ldr	r3, [r7, #4]
 810220c:	681b      	ldr	r3, [r3, #0]
 810220e:	4a5c      	ldr	r2, [pc, #368]	; (8102380 <HAL_DMA_Init+0x65c>)
 8102210:	4293      	cmp	r3, r2
 8102212:	d068      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 8102214:	687b      	ldr	r3, [r7, #4]
 8102216:	681b      	ldr	r3, [r3, #0]
 8102218:	4a5a      	ldr	r2, [pc, #360]	; (8102384 <HAL_DMA_Init+0x660>)
 810221a:	4293      	cmp	r3, r2
 810221c:	d063      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 810221e:	687b      	ldr	r3, [r7, #4]
 8102220:	681b      	ldr	r3, [r3, #0]
 8102222:	4a59      	ldr	r2, [pc, #356]	; (8102388 <HAL_DMA_Init+0x664>)
 8102224:	4293      	cmp	r3, r2
 8102226:	d05e      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 8102228:	687b      	ldr	r3, [r7, #4]
 810222a:	681b      	ldr	r3, [r3, #0]
 810222c:	4a57      	ldr	r2, [pc, #348]	; (810238c <HAL_DMA_Init+0x668>)
 810222e:	4293      	cmp	r3, r2
 8102230:	d059      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 8102232:	687b      	ldr	r3, [r7, #4]
 8102234:	681b      	ldr	r3, [r3, #0]
 8102236:	4a56      	ldr	r2, [pc, #344]	; (8102390 <HAL_DMA_Init+0x66c>)
 8102238:	4293      	cmp	r3, r2
 810223a:	d054      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 810223c:	687b      	ldr	r3, [r7, #4]
 810223e:	681b      	ldr	r3, [r3, #0]
 8102240:	4a54      	ldr	r2, [pc, #336]	; (8102394 <HAL_DMA_Init+0x670>)
 8102242:	4293      	cmp	r3, r2
 8102244:	d04f      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 8102246:	687b      	ldr	r3, [r7, #4]
 8102248:	681b      	ldr	r3, [r3, #0]
 810224a:	4a53      	ldr	r2, [pc, #332]	; (8102398 <HAL_DMA_Init+0x674>)
 810224c:	4293      	cmp	r3, r2
 810224e:	d04a      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 8102250:	687b      	ldr	r3, [r7, #4]
 8102252:	681b      	ldr	r3, [r3, #0]
 8102254:	4a51      	ldr	r2, [pc, #324]	; (810239c <HAL_DMA_Init+0x678>)
 8102256:	4293      	cmp	r3, r2
 8102258:	d045      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 810225a:	687b      	ldr	r3, [r7, #4]
 810225c:	681b      	ldr	r3, [r3, #0]
 810225e:	4a50      	ldr	r2, [pc, #320]	; (81023a0 <HAL_DMA_Init+0x67c>)
 8102260:	4293      	cmp	r3, r2
 8102262:	d040      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 8102264:	687b      	ldr	r3, [r7, #4]
 8102266:	681b      	ldr	r3, [r3, #0]
 8102268:	4a4e      	ldr	r2, [pc, #312]	; (81023a4 <HAL_DMA_Init+0x680>)
 810226a:	4293      	cmp	r3, r2
 810226c:	d03b      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 810226e:	687b      	ldr	r3, [r7, #4]
 8102270:	681b      	ldr	r3, [r3, #0]
 8102272:	4a4d      	ldr	r2, [pc, #308]	; (81023a8 <HAL_DMA_Init+0x684>)
 8102274:	4293      	cmp	r3, r2
 8102276:	d036      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 8102278:	687b      	ldr	r3, [r7, #4]
 810227a:	681b      	ldr	r3, [r3, #0]
 810227c:	4a4b      	ldr	r2, [pc, #300]	; (81023ac <HAL_DMA_Init+0x688>)
 810227e:	4293      	cmp	r3, r2
 8102280:	d031      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 8102282:	687b      	ldr	r3, [r7, #4]
 8102284:	681b      	ldr	r3, [r3, #0]
 8102286:	4a4a      	ldr	r2, [pc, #296]	; (81023b0 <HAL_DMA_Init+0x68c>)
 8102288:	4293      	cmp	r3, r2
 810228a:	d02c      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 810228c:	687b      	ldr	r3, [r7, #4]
 810228e:	681b      	ldr	r3, [r3, #0]
 8102290:	4a48      	ldr	r2, [pc, #288]	; (81023b4 <HAL_DMA_Init+0x690>)
 8102292:	4293      	cmp	r3, r2
 8102294:	d027      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 8102296:	687b      	ldr	r3, [r7, #4]
 8102298:	681b      	ldr	r3, [r3, #0]
 810229a:	4a47      	ldr	r2, [pc, #284]	; (81023b8 <HAL_DMA_Init+0x694>)
 810229c:	4293      	cmp	r3, r2
 810229e:	d022      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 81022a0:	687b      	ldr	r3, [r7, #4]
 81022a2:	681b      	ldr	r3, [r3, #0]
 81022a4:	4a45      	ldr	r2, [pc, #276]	; (81023bc <HAL_DMA_Init+0x698>)
 81022a6:	4293      	cmp	r3, r2
 81022a8:	d01d      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 81022aa:	687b      	ldr	r3, [r7, #4]
 81022ac:	681b      	ldr	r3, [r3, #0]
 81022ae:	4a44      	ldr	r2, [pc, #272]	; (81023c0 <HAL_DMA_Init+0x69c>)
 81022b0:	4293      	cmp	r3, r2
 81022b2:	d018      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 81022b4:	687b      	ldr	r3, [r7, #4]
 81022b6:	681b      	ldr	r3, [r3, #0]
 81022b8:	4a42      	ldr	r2, [pc, #264]	; (81023c4 <HAL_DMA_Init+0x6a0>)
 81022ba:	4293      	cmp	r3, r2
 81022bc:	d013      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 81022be:	687b      	ldr	r3, [r7, #4]
 81022c0:	681b      	ldr	r3, [r3, #0]
 81022c2:	4a41      	ldr	r2, [pc, #260]	; (81023c8 <HAL_DMA_Init+0x6a4>)
 81022c4:	4293      	cmp	r3, r2
 81022c6:	d00e      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 81022c8:	687b      	ldr	r3, [r7, #4]
 81022ca:	681b      	ldr	r3, [r3, #0]
 81022cc:	4a3f      	ldr	r2, [pc, #252]	; (81023cc <HAL_DMA_Init+0x6a8>)
 81022ce:	4293      	cmp	r3, r2
 81022d0:	d009      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 81022d2:	687b      	ldr	r3, [r7, #4]
 81022d4:	681b      	ldr	r3, [r3, #0]
 81022d6:	4a3e      	ldr	r2, [pc, #248]	; (81023d0 <HAL_DMA_Init+0x6ac>)
 81022d8:	4293      	cmp	r3, r2
 81022da:	d004      	beq.n	81022e6 <HAL_DMA_Init+0x5c2>
 81022dc:	687b      	ldr	r3, [r7, #4]
 81022de:	681b      	ldr	r3, [r3, #0]
 81022e0:	4a3c      	ldr	r2, [pc, #240]	; (81023d4 <HAL_DMA_Init+0x6b0>)
 81022e2:	4293      	cmp	r3, r2
 81022e4:	d101      	bne.n	81022ea <HAL_DMA_Init+0x5c6>
 81022e6:	2301      	movs	r3, #1
 81022e8:	e000      	b.n	81022ec <HAL_DMA_Init+0x5c8>
 81022ea:	2300      	movs	r3, #0
 81022ec:	2b00      	cmp	r3, #0
 81022ee:	d032      	beq.n	8102356 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 81022f0:	6878      	ldr	r0, [r7, #4]
 81022f2:	f000 f99f 	bl	8102634 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 81022f6:	687b      	ldr	r3, [r7, #4]
 81022f8:	689b      	ldr	r3, [r3, #8]
 81022fa:	2b80      	cmp	r3, #128	; 0x80
 81022fc:	d102      	bne.n	8102304 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81022fe:	687b      	ldr	r3, [r7, #4]
 8102300:	2200      	movs	r2, #0
 8102302:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8102304:	687b      	ldr	r3, [r7, #4]
 8102306:	685a      	ldr	r2, [r3, #4]
 8102308:	687b      	ldr	r3, [r7, #4]
 810230a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810230c:	b2d2      	uxtb	r2, r2
 810230e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102310:	687b      	ldr	r3, [r7, #4]
 8102312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102314:	687a      	ldr	r2, [r7, #4]
 8102316:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102318:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 810231a:	687b      	ldr	r3, [r7, #4]
 810231c:	685b      	ldr	r3, [r3, #4]
 810231e:	2b00      	cmp	r3, #0
 8102320:	d010      	beq.n	8102344 <HAL_DMA_Init+0x620>
 8102322:	687b      	ldr	r3, [r7, #4]
 8102324:	685b      	ldr	r3, [r3, #4]
 8102326:	2b08      	cmp	r3, #8
 8102328:	d80c      	bhi.n	8102344 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 810232a:	6878      	ldr	r0, [r7, #4]
 810232c:	f000 fa1c 	bl	8102768 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8102330:	687b      	ldr	r3, [r7, #4]
 8102332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102334:	2200      	movs	r2, #0
 8102336:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102338:	687b      	ldr	r3, [r7, #4]
 810233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810233c:	687a      	ldr	r2, [r7, #4]
 810233e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102340:	605a      	str	r2, [r3, #4]
 8102342:	e008      	b.n	8102356 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8102344:	687b      	ldr	r3, [r7, #4]
 8102346:	2200      	movs	r2, #0
 8102348:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 810234a:	687b      	ldr	r3, [r7, #4]
 810234c:	2200      	movs	r2, #0
 810234e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8102350:	687b      	ldr	r3, [r7, #4]
 8102352:	2200      	movs	r2, #0
 8102354:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102356:	687b      	ldr	r3, [r7, #4]
 8102358:	2200      	movs	r2, #0
 810235a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 810235c:	687b      	ldr	r3, [r7, #4]
 810235e:	2201      	movs	r2, #1
 8102360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8102364:	2300      	movs	r3, #0
}
 8102366:	4618      	mov	r0, r3
 8102368:	3718      	adds	r7, #24
 810236a:	46bd      	mov	sp, r7
 810236c:	bd80      	pop	{r7, pc}
 810236e:	bf00      	nop
 8102370:	a7fdabf8 	.word	0xa7fdabf8
 8102374:	cccccccd 	.word	0xcccccccd
 8102378:	40020010 	.word	0x40020010
 810237c:	40020028 	.word	0x40020028
 8102380:	40020040 	.word	0x40020040
 8102384:	40020058 	.word	0x40020058
 8102388:	40020070 	.word	0x40020070
 810238c:	40020088 	.word	0x40020088
 8102390:	400200a0 	.word	0x400200a0
 8102394:	400200b8 	.word	0x400200b8
 8102398:	40020410 	.word	0x40020410
 810239c:	40020428 	.word	0x40020428
 81023a0:	40020440 	.word	0x40020440
 81023a4:	40020458 	.word	0x40020458
 81023a8:	40020470 	.word	0x40020470
 81023ac:	40020488 	.word	0x40020488
 81023b0:	400204a0 	.word	0x400204a0
 81023b4:	400204b8 	.word	0x400204b8
 81023b8:	58025408 	.word	0x58025408
 81023bc:	5802541c 	.word	0x5802541c
 81023c0:	58025430 	.word	0x58025430
 81023c4:	58025444 	.word	0x58025444
 81023c8:	58025458 	.word	0x58025458
 81023cc:	5802546c 	.word	0x5802546c
 81023d0:	58025480 	.word	0x58025480
 81023d4:	58025494 	.word	0x58025494

081023d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 81023d8:	b480      	push	{r7}
 81023da:	b085      	sub	sp, #20
 81023dc:	af00      	add	r7, sp, #0
 81023de:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81023e0:	687b      	ldr	r3, [r7, #4]
 81023e2:	681b      	ldr	r3, [r3, #0]
 81023e4:	4a43      	ldr	r2, [pc, #268]	; (81024f4 <DMA_CalcBaseAndBitshift+0x11c>)
 81023e6:	4293      	cmp	r3, r2
 81023e8:	d04a      	beq.n	8102480 <DMA_CalcBaseAndBitshift+0xa8>
 81023ea:	687b      	ldr	r3, [r7, #4]
 81023ec:	681b      	ldr	r3, [r3, #0]
 81023ee:	4a42      	ldr	r2, [pc, #264]	; (81024f8 <DMA_CalcBaseAndBitshift+0x120>)
 81023f0:	4293      	cmp	r3, r2
 81023f2:	d045      	beq.n	8102480 <DMA_CalcBaseAndBitshift+0xa8>
 81023f4:	687b      	ldr	r3, [r7, #4]
 81023f6:	681b      	ldr	r3, [r3, #0]
 81023f8:	4a40      	ldr	r2, [pc, #256]	; (81024fc <DMA_CalcBaseAndBitshift+0x124>)
 81023fa:	4293      	cmp	r3, r2
 81023fc:	d040      	beq.n	8102480 <DMA_CalcBaseAndBitshift+0xa8>
 81023fe:	687b      	ldr	r3, [r7, #4]
 8102400:	681b      	ldr	r3, [r3, #0]
 8102402:	4a3f      	ldr	r2, [pc, #252]	; (8102500 <DMA_CalcBaseAndBitshift+0x128>)
 8102404:	4293      	cmp	r3, r2
 8102406:	d03b      	beq.n	8102480 <DMA_CalcBaseAndBitshift+0xa8>
 8102408:	687b      	ldr	r3, [r7, #4]
 810240a:	681b      	ldr	r3, [r3, #0]
 810240c:	4a3d      	ldr	r2, [pc, #244]	; (8102504 <DMA_CalcBaseAndBitshift+0x12c>)
 810240e:	4293      	cmp	r3, r2
 8102410:	d036      	beq.n	8102480 <DMA_CalcBaseAndBitshift+0xa8>
 8102412:	687b      	ldr	r3, [r7, #4]
 8102414:	681b      	ldr	r3, [r3, #0]
 8102416:	4a3c      	ldr	r2, [pc, #240]	; (8102508 <DMA_CalcBaseAndBitshift+0x130>)
 8102418:	4293      	cmp	r3, r2
 810241a:	d031      	beq.n	8102480 <DMA_CalcBaseAndBitshift+0xa8>
 810241c:	687b      	ldr	r3, [r7, #4]
 810241e:	681b      	ldr	r3, [r3, #0]
 8102420:	4a3a      	ldr	r2, [pc, #232]	; (810250c <DMA_CalcBaseAndBitshift+0x134>)
 8102422:	4293      	cmp	r3, r2
 8102424:	d02c      	beq.n	8102480 <DMA_CalcBaseAndBitshift+0xa8>
 8102426:	687b      	ldr	r3, [r7, #4]
 8102428:	681b      	ldr	r3, [r3, #0]
 810242a:	4a39      	ldr	r2, [pc, #228]	; (8102510 <DMA_CalcBaseAndBitshift+0x138>)
 810242c:	4293      	cmp	r3, r2
 810242e:	d027      	beq.n	8102480 <DMA_CalcBaseAndBitshift+0xa8>
 8102430:	687b      	ldr	r3, [r7, #4]
 8102432:	681b      	ldr	r3, [r3, #0]
 8102434:	4a37      	ldr	r2, [pc, #220]	; (8102514 <DMA_CalcBaseAndBitshift+0x13c>)
 8102436:	4293      	cmp	r3, r2
 8102438:	d022      	beq.n	8102480 <DMA_CalcBaseAndBitshift+0xa8>
 810243a:	687b      	ldr	r3, [r7, #4]
 810243c:	681b      	ldr	r3, [r3, #0]
 810243e:	4a36      	ldr	r2, [pc, #216]	; (8102518 <DMA_CalcBaseAndBitshift+0x140>)
 8102440:	4293      	cmp	r3, r2
 8102442:	d01d      	beq.n	8102480 <DMA_CalcBaseAndBitshift+0xa8>
 8102444:	687b      	ldr	r3, [r7, #4]
 8102446:	681b      	ldr	r3, [r3, #0]
 8102448:	4a34      	ldr	r2, [pc, #208]	; (810251c <DMA_CalcBaseAndBitshift+0x144>)
 810244a:	4293      	cmp	r3, r2
 810244c:	d018      	beq.n	8102480 <DMA_CalcBaseAndBitshift+0xa8>
 810244e:	687b      	ldr	r3, [r7, #4]
 8102450:	681b      	ldr	r3, [r3, #0]
 8102452:	4a33      	ldr	r2, [pc, #204]	; (8102520 <DMA_CalcBaseAndBitshift+0x148>)
 8102454:	4293      	cmp	r3, r2
 8102456:	d013      	beq.n	8102480 <DMA_CalcBaseAndBitshift+0xa8>
 8102458:	687b      	ldr	r3, [r7, #4]
 810245a:	681b      	ldr	r3, [r3, #0]
 810245c:	4a31      	ldr	r2, [pc, #196]	; (8102524 <DMA_CalcBaseAndBitshift+0x14c>)
 810245e:	4293      	cmp	r3, r2
 8102460:	d00e      	beq.n	8102480 <DMA_CalcBaseAndBitshift+0xa8>
 8102462:	687b      	ldr	r3, [r7, #4]
 8102464:	681b      	ldr	r3, [r3, #0]
 8102466:	4a30      	ldr	r2, [pc, #192]	; (8102528 <DMA_CalcBaseAndBitshift+0x150>)
 8102468:	4293      	cmp	r3, r2
 810246a:	d009      	beq.n	8102480 <DMA_CalcBaseAndBitshift+0xa8>
 810246c:	687b      	ldr	r3, [r7, #4]
 810246e:	681b      	ldr	r3, [r3, #0]
 8102470:	4a2e      	ldr	r2, [pc, #184]	; (810252c <DMA_CalcBaseAndBitshift+0x154>)
 8102472:	4293      	cmp	r3, r2
 8102474:	d004      	beq.n	8102480 <DMA_CalcBaseAndBitshift+0xa8>
 8102476:	687b      	ldr	r3, [r7, #4]
 8102478:	681b      	ldr	r3, [r3, #0]
 810247a:	4a2d      	ldr	r2, [pc, #180]	; (8102530 <DMA_CalcBaseAndBitshift+0x158>)
 810247c:	4293      	cmp	r3, r2
 810247e:	d101      	bne.n	8102484 <DMA_CalcBaseAndBitshift+0xac>
 8102480:	2301      	movs	r3, #1
 8102482:	e000      	b.n	8102486 <DMA_CalcBaseAndBitshift+0xae>
 8102484:	2300      	movs	r3, #0
 8102486:	2b00      	cmp	r3, #0
 8102488:	d026      	beq.n	81024d8 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810248a:	687b      	ldr	r3, [r7, #4]
 810248c:	681b      	ldr	r3, [r3, #0]
 810248e:	b2db      	uxtb	r3, r3
 8102490:	3b10      	subs	r3, #16
 8102492:	4a28      	ldr	r2, [pc, #160]	; (8102534 <DMA_CalcBaseAndBitshift+0x15c>)
 8102494:	fba2 2303 	umull	r2, r3, r2, r3
 8102498:	091b      	lsrs	r3, r3, #4
 810249a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 810249c:	68fb      	ldr	r3, [r7, #12]
 810249e:	f003 0307 	and.w	r3, r3, #7
 81024a2:	4a25      	ldr	r2, [pc, #148]	; (8102538 <DMA_CalcBaseAndBitshift+0x160>)
 81024a4:	5cd3      	ldrb	r3, [r2, r3]
 81024a6:	461a      	mov	r2, r3
 81024a8:	687b      	ldr	r3, [r7, #4]
 81024aa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 81024ac:	68fb      	ldr	r3, [r7, #12]
 81024ae:	2b03      	cmp	r3, #3
 81024b0:	d909      	bls.n	81024c6 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 81024b2:	687b      	ldr	r3, [r7, #4]
 81024b4:	681b      	ldr	r3, [r3, #0]
 81024b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81024ba:	f023 0303 	bic.w	r3, r3, #3
 81024be:	1d1a      	adds	r2, r3, #4
 81024c0:	687b      	ldr	r3, [r7, #4]
 81024c2:	659a      	str	r2, [r3, #88]	; 0x58
 81024c4:	e00e      	b.n	81024e4 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 81024c6:	687b      	ldr	r3, [r7, #4]
 81024c8:	681b      	ldr	r3, [r3, #0]
 81024ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81024ce:	f023 0303 	bic.w	r3, r3, #3
 81024d2:	687a      	ldr	r2, [r7, #4]
 81024d4:	6593      	str	r3, [r2, #88]	; 0x58
 81024d6:	e005      	b.n	81024e4 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 81024d8:	687b      	ldr	r3, [r7, #4]
 81024da:	681b      	ldr	r3, [r3, #0]
 81024dc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 81024e0:	687b      	ldr	r3, [r7, #4]
 81024e2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 81024e4:	687b      	ldr	r3, [r7, #4]
 81024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 81024e8:	4618      	mov	r0, r3
 81024ea:	3714      	adds	r7, #20
 81024ec:	46bd      	mov	sp, r7
 81024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024f2:	4770      	bx	lr
 81024f4:	40020010 	.word	0x40020010
 81024f8:	40020028 	.word	0x40020028
 81024fc:	40020040 	.word	0x40020040
 8102500:	40020058 	.word	0x40020058
 8102504:	40020070 	.word	0x40020070
 8102508:	40020088 	.word	0x40020088
 810250c:	400200a0 	.word	0x400200a0
 8102510:	400200b8 	.word	0x400200b8
 8102514:	40020410 	.word	0x40020410
 8102518:	40020428 	.word	0x40020428
 810251c:	40020440 	.word	0x40020440
 8102520:	40020458 	.word	0x40020458
 8102524:	40020470 	.word	0x40020470
 8102528:	40020488 	.word	0x40020488
 810252c:	400204a0 	.word	0x400204a0
 8102530:	400204b8 	.word	0x400204b8
 8102534:	aaaaaaab 	.word	0xaaaaaaab
 8102538:	081074d4 	.word	0x081074d4

0810253c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 810253c:	b480      	push	{r7}
 810253e:	b085      	sub	sp, #20
 8102540:	af00      	add	r7, sp, #0
 8102542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8102544:	2300      	movs	r3, #0
 8102546:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8102548:	687b      	ldr	r3, [r7, #4]
 810254a:	699b      	ldr	r3, [r3, #24]
 810254c:	2b00      	cmp	r3, #0
 810254e:	d120      	bne.n	8102592 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8102550:	687b      	ldr	r3, [r7, #4]
 8102552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102554:	2b03      	cmp	r3, #3
 8102556:	d858      	bhi.n	810260a <DMA_CheckFifoParam+0xce>
 8102558:	a201      	add	r2, pc, #4	; (adr r2, 8102560 <DMA_CheckFifoParam+0x24>)
 810255a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810255e:	bf00      	nop
 8102560:	08102571 	.word	0x08102571
 8102564:	08102583 	.word	0x08102583
 8102568:	08102571 	.word	0x08102571
 810256c:	0810260b 	.word	0x0810260b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8102570:	687b      	ldr	r3, [r7, #4]
 8102572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8102578:	2b00      	cmp	r3, #0
 810257a:	d048      	beq.n	810260e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 810257c:	2301      	movs	r3, #1
 810257e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8102580:	e045      	b.n	810260e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8102582:	687b      	ldr	r3, [r7, #4]
 8102584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102586:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810258a:	d142      	bne.n	8102612 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 810258c:	2301      	movs	r3, #1
 810258e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8102590:	e03f      	b.n	8102612 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8102592:	687b      	ldr	r3, [r7, #4]
 8102594:	699b      	ldr	r3, [r3, #24]
 8102596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810259a:	d123      	bne.n	81025e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81025a0:	2b03      	cmp	r3, #3
 81025a2:	d838      	bhi.n	8102616 <DMA_CheckFifoParam+0xda>
 81025a4:	a201      	add	r2, pc, #4	; (adr r2, 81025ac <DMA_CheckFifoParam+0x70>)
 81025a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81025aa:	bf00      	nop
 81025ac:	081025bd 	.word	0x081025bd
 81025b0:	081025c3 	.word	0x081025c3
 81025b4:	081025bd 	.word	0x081025bd
 81025b8:	081025d5 	.word	0x081025d5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 81025bc:	2301      	movs	r3, #1
 81025be:	73fb      	strb	r3, [r7, #15]
        break;
 81025c0:	e030      	b.n	8102624 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81025c2:	687b      	ldr	r3, [r7, #4]
 81025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81025c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81025ca:	2b00      	cmp	r3, #0
 81025cc:	d025      	beq.n	810261a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 81025ce:	2301      	movs	r3, #1
 81025d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81025d2:	e022      	b.n	810261a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81025d4:	687b      	ldr	r3, [r7, #4]
 81025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81025d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81025dc:	d11f      	bne.n	810261e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 81025de:	2301      	movs	r3, #1
 81025e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81025e2:	e01c      	b.n	810261e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 81025e4:	687b      	ldr	r3, [r7, #4]
 81025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81025e8:	2b02      	cmp	r3, #2
 81025ea:	d902      	bls.n	81025f2 <DMA_CheckFifoParam+0xb6>
 81025ec:	2b03      	cmp	r3, #3
 81025ee:	d003      	beq.n	81025f8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 81025f0:	e018      	b.n	8102624 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 81025f2:	2301      	movs	r3, #1
 81025f4:	73fb      	strb	r3, [r7, #15]
        break;
 81025f6:	e015      	b.n	8102624 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81025f8:	687b      	ldr	r3, [r7, #4]
 81025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81025fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8102600:	2b00      	cmp	r3, #0
 8102602:	d00e      	beq.n	8102622 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8102604:	2301      	movs	r3, #1
 8102606:	73fb      	strb	r3, [r7, #15]
    break;
 8102608:	e00b      	b.n	8102622 <DMA_CheckFifoParam+0xe6>
        break;
 810260a:	bf00      	nop
 810260c:	e00a      	b.n	8102624 <DMA_CheckFifoParam+0xe8>
        break;
 810260e:	bf00      	nop
 8102610:	e008      	b.n	8102624 <DMA_CheckFifoParam+0xe8>
        break;
 8102612:	bf00      	nop
 8102614:	e006      	b.n	8102624 <DMA_CheckFifoParam+0xe8>
        break;
 8102616:	bf00      	nop
 8102618:	e004      	b.n	8102624 <DMA_CheckFifoParam+0xe8>
        break;
 810261a:	bf00      	nop
 810261c:	e002      	b.n	8102624 <DMA_CheckFifoParam+0xe8>
        break;
 810261e:	bf00      	nop
 8102620:	e000      	b.n	8102624 <DMA_CheckFifoParam+0xe8>
    break;
 8102622:	bf00      	nop
    }
  }

  return status;
 8102624:	7bfb      	ldrb	r3, [r7, #15]
}
 8102626:	4618      	mov	r0, r3
 8102628:	3714      	adds	r7, #20
 810262a:	46bd      	mov	sp, r7
 810262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102630:	4770      	bx	lr
 8102632:	bf00      	nop

08102634 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8102634:	b480      	push	{r7}
 8102636:	b085      	sub	sp, #20
 8102638:	af00      	add	r7, sp, #0
 810263a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 810263c:	687b      	ldr	r3, [r7, #4]
 810263e:	681b      	ldr	r3, [r3, #0]
 8102640:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102642:	687b      	ldr	r3, [r7, #4]
 8102644:	681b      	ldr	r3, [r3, #0]
 8102646:	4a3a      	ldr	r2, [pc, #232]	; (8102730 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8102648:	4293      	cmp	r3, r2
 810264a:	d022      	beq.n	8102692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810264c:	687b      	ldr	r3, [r7, #4]
 810264e:	681b      	ldr	r3, [r3, #0]
 8102650:	4a38      	ldr	r2, [pc, #224]	; (8102734 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8102652:	4293      	cmp	r3, r2
 8102654:	d01d      	beq.n	8102692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8102656:	687b      	ldr	r3, [r7, #4]
 8102658:	681b      	ldr	r3, [r3, #0]
 810265a:	4a37      	ldr	r2, [pc, #220]	; (8102738 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 810265c:	4293      	cmp	r3, r2
 810265e:	d018      	beq.n	8102692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8102660:	687b      	ldr	r3, [r7, #4]
 8102662:	681b      	ldr	r3, [r3, #0]
 8102664:	4a35      	ldr	r2, [pc, #212]	; (810273c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8102666:	4293      	cmp	r3, r2
 8102668:	d013      	beq.n	8102692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810266a:	687b      	ldr	r3, [r7, #4]
 810266c:	681b      	ldr	r3, [r3, #0]
 810266e:	4a34      	ldr	r2, [pc, #208]	; (8102740 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8102670:	4293      	cmp	r3, r2
 8102672:	d00e      	beq.n	8102692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8102674:	687b      	ldr	r3, [r7, #4]
 8102676:	681b      	ldr	r3, [r3, #0]
 8102678:	4a32      	ldr	r2, [pc, #200]	; (8102744 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810267a:	4293      	cmp	r3, r2
 810267c:	d009      	beq.n	8102692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810267e:	687b      	ldr	r3, [r7, #4]
 8102680:	681b      	ldr	r3, [r3, #0]
 8102682:	4a31      	ldr	r2, [pc, #196]	; (8102748 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8102684:	4293      	cmp	r3, r2
 8102686:	d004      	beq.n	8102692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8102688:	687b      	ldr	r3, [r7, #4]
 810268a:	681b      	ldr	r3, [r3, #0]
 810268c:	4a2f      	ldr	r2, [pc, #188]	; (810274c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 810268e:	4293      	cmp	r3, r2
 8102690:	d101      	bne.n	8102696 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8102692:	2301      	movs	r3, #1
 8102694:	e000      	b.n	8102698 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8102696:	2300      	movs	r3, #0
 8102698:	2b00      	cmp	r3, #0
 810269a:	d01c      	beq.n	81026d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 810269c:	687b      	ldr	r3, [r7, #4]
 810269e:	681b      	ldr	r3, [r3, #0]
 81026a0:	b2db      	uxtb	r3, r3
 81026a2:	3b08      	subs	r3, #8
 81026a4:	4a2a      	ldr	r2, [pc, #168]	; (8102750 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 81026a6:	fba2 2303 	umull	r2, r3, r2, r3
 81026aa:	091b      	lsrs	r3, r3, #4
 81026ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 81026ae:	68fb      	ldr	r3, [r7, #12]
 81026b0:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 81026b4:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 81026b8:	009b      	lsls	r3, r3, #2
 81026ba:	461a      	mov	r2, r3
 81026bc:	687b      	ldr	r3, [r7, #4]
 81026be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 81026c0:	687b      	ldr	r3, [r7, #4]
 81026c2:	4a24      	ldr	r2, [pc, #144]	; (8102754 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 81026c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81026c6:	68fb      	ldr	r3, [r7, #12]
 81026c8:	f003 031f 	and.w	r3, r3, #31
 81026cc:	2201      	movs	r2, #1
 81026ce:	409a      	lsls	r2, r3
 81026d0:	687b      	ldr	r3, [r7, #4]
 81026d2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 81026d4:	e026      	b.n	8102724 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81026d6:	687b      	ldr	r3, [r7, #4]
 81026d8:	681b      	ldr	r3, [r3, #0]
 81026da:	b2db      	uxtb	r3, r3
 81026dc:	3b10      	subs	r3, #16
 81026de:	4a1e      	ldr	r2, [pc, #120]	; (8102758 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 81026e0:	fba2 2303 	umull	r2, r3, r2, r3
 81026e4:	091b      	lsrs	r3, r3, #4
 81026e6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 81026e8:	68bb      	ldr	r3, [r7, #8]
 81026ea:	4a1c      	ldr	r2, [pc, #112]	; (810275c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 81026ec:	4293      	cmp	r3, r2
 81026ee:	d806      	bhi.n	81026fe <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 81026f0:	68bb      	ldr	r3, [r7, #8]
 81026f2:	4a1b      	ldr	r2, [pc, #108]	; (8102760 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 81026f4:	4293      	cmp	r3, r2
 81026f6:	d902      	bls.n	81026fe <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 81026f8:	68fb      	ldr	r3, [r7, #12]
 81026fa:	3308      	adds	r3, #8
 81026fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 81026fe:	68fb      	ldr	r3, [r7, #12]
 8102700:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8102704:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8102708:	009b      	lsls	r3, r3, #2
 810270a:	461a      	mov	r2, r3
 810270c:	687b      	ldr	r3, [r7, #4]
 810270e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8102710:	687b      	ldr	r3, [r7, #4]
 8102712:	4a14      	ldr	r2, [pc, #80]	; (8102764 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8102714:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8102716:	68fb      	ldr	r3, [r7, #12]
 8102718:	f003 031f 	and.w	r3, r3, #31
 810271c:	2201      	movs	r2, #1
 810271e:	409a      	lsls	r2, r3
 8102720:	687b      	ldr	r3, [r7, #4]
 8102722:	669a      	str	r2, [r3, #104]	; 0x68
}
 8102724:	bf00      	nop
 8102726:	3714      	adds	r7, #20
 8102728:	46bd      	mov	sp, r7
 810272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810272e:	4770      	bx	lr
 8102730:	58025408 	.word	0x58025408
 8102734:	5802541c 	.word	0x5802541c
 8102738:	58025430 	.word	0x58025430
 810273c:	58025444 	.word	0x58025444
 8102740:	58025458 	.word	0x58025458
 8102744:	5802546c 	.word	0x5802546c
 8102748:	58025480 	.word	0x58025480
 810274c:	58025494 	.word	0x58025494
 8102750:	cccccccd 	.word	0xcccccccd
 8102754:	58025880 	.word	0x58025880
 8102758:	aaaaaaab 	.word	0xaaaaaaab
 810275c:	400204b8 	.word	0x400204b8
 8102760:	4002040f 	.word	0x4002040f
 8102764:	40020880 	.word	0x40020880

08102768 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8102768:	b480      	push	{r7}
 810276a:	b085      	sub	sp, #20
 810276c:	af00      	add	r7, sp, #0
 810276e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8102770:	687b      	ldr	r3, [r7, #4]
 8102772:	685b      	ldr	r3, [r3, #4]
 8102774:	b2db      	uxtb	r3, r3
 8102776:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8102778:	68fb      	ldr	r3, [r7, #12]
 810277a:	2b00      	cmp	r3, #0
 810277c:	d04a      	beq.n	8102814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 810277e:	68fb      	ldr	r3, [r7, #12]
 8102780:	2b08      	cmp	r3, #8
 8102782:	d847      	bhi.n	8102814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102784:	687b      	ldr	r3, [r7, #4]
 8102786:	681b      	ldr	r3, [r3, #0]
 8102788:	4a25      	ldr	r2, [pc, #148]	; (8102820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 810278a:	4293      	cmp	r3, r2
 810278c:	d022      	beq.n	81027d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810278e:	687b      	ldr	r3, [r7, #4]
 8102790:	681b      	ldr	r3, [r3, #0]
 8102792:	4a24      	ldr	r2, [pc, #144]	; (8102824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8102794:	4293      	cmp	r3, r2
 8102796:	d01d      	beq.n	81027d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8102798:	687b      	ldr	r3, [r7, #4]
 810279a:	681b      	ldr	r3, [r3, #0]
 810279c:	4a22      	ldr	r2, [pc, #136]	; (8102828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 810279e:	4293      	cmp	r3, r2
 81027a0:	d018      	beq.n	81027d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81027a2:	687b      	ldr	r3, [r7, #4]
 81027a4:	681b      	ldr	r3, [r3, #0]
 81027a6:	4a21      	ldr	r2, [pc, #132]	; (810282c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 81027a8:	4293      	cmp	r3, r2
 81027aa:	d013      	beq.n	81027d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81027ac:	687b      	ldr	r3, [r7, #4]
 81027ae:	681b      	ldr	r3, [r3, #0]
 81027b0:	4a1f      	ldr	r2, [pc, #124]	; (8102830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 81027b2:	4293      	cmp	r3, r2
 81027b4:	d00e      	beq.n	81027d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81027b6:	687b      	ldr	r3, [r7, #4]
 81027b8:	681b      	ldr	r3, [r3, #0]
 81027ba:	4a1e      	ldr	r2, [pc, #120]	; (8102834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 81027bc:	4293      	cmp	r3, r2
 81027be:	d009      	beq.n	81027d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81027c0:	687b      	ldr	r3, [r7, #4]
 81027c2:	681b      	ldr	r3, [r3, #0]
 81027c4:	4a1c      	ldr	r2, [pc, #112]	; (8102838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 81027c6:	4293      	cmp	r3, r2
 81027c8:	d004      	beq.n	81027d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81027ca:	687b      	ldr	r3, [r7, #4]
 81027cc:	681b      	ldr	r3, [r3, #0]
 81027ce:	4a1b      	ldr	r2, [pc, #108]	; (810283c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 81027d0:	4293      	cmp	r3, r2
 81027d2:	d101      	bne.n	81027d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 81027d4:	2301      	movs	r3, #1
 81027d6:	e000      	b.n	81027da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 81027d8:	2300      	movs	r3, #0
 81027da:	2b00      	cmp	r3, #0
 81027dc:	d00a      	beq.n	81027f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 81027de:	68fa      	ldr	r2, [r7, #12]
 81027e0:	4b17      	ldr	r3, [pc, #92]	; (8102840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 81027e2:	4413      	add	r3, r2
 81027e4:	009b      	lsls	r3, r3, #2
 81027e6:	461a      	mov	r2, r3
 81027e8:	687b      	ldr	r3, [r7, #4]
 81027ea:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 81027ec:	687b      	ldr	r3, [r7, #4]
 81027ee:	4a15      	ldr	r2, [pc, #84]	; (8102844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 81027f0:	671a      	str	r2, [r3, #112]	; 0x70
 81027f2:	e009      	b.n	8102808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 81027f4:	68fa      	ldr	r2, [r7, #12]
 81027f6:	4b14      	ldr	r3, [pc, #80]	; (8102848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 81027f8:	4413      	add	r3, r2
 81027fa:	009b      	lsls	r3, r3, #2
 81027fc:	461a      	mov	r2, r3
 81027fe:	687b      	ldr	r3, [r7, #4]
 8102800:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8102802:	687b      	ldr	r3, [r7, #4]
 8102804:	4a11      	ldr	r2, [pc, #68]	; (810284c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8102806:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8102808:	68fb      	ldr	r3, [r7, #12]
 810280a:	3b01      	subs	r3, #1
 810280c:	2201      	movs	r2, #1
 810280e:	409a      	lsls	r2, r3
 8102810:	687b      	ldr	r3, [r7, #4]
 8102812:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8102814:	bf00      	nop
 8102816:	3714      	adds	r7, #20
 8102818:	46bd      	mov	sp, r7
 810281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810281e:	4770      	bx	lr
 8102820:	58025408 	.word	0x58025408
 8102824:	5802541c 	.word	0x5802541c
 8102828:	58025430 	.word	0x58025430
 810282c:	58025444 	.word	0x58025444
 8102830:	58025458 	.word	0x58025458
 8102834:	5802546c 	.word	0x5802546c
 8102838:	58025480 	.word	0x58025480
 810283c:	58025494 	.word	0x58025494
 8102840:	1600963f 	.word	0x1600963f
 8102844:	58025940 	.word	0x58025940
 8102848:	1000823f 	.word	0x1000823f
 810284c:	40020940 	.word	0x40020940

08102850 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102850:	b480      	push	{r7}
 8102852:	b089      	sub	sp, #36	; 0x24
 8102854:	af00      	add	r7, sp, #0
 8102856:	6078      	str	r0, [r7, #4]
 8102858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810285a:	2300      	movs	r3, #0
 810285c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810285e:	4b89      	ldr	r3, [pc, #548]	; (8102a84 <HAL_GPIO_Init+0x234>)
 8102860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102862:	e194      	b.n	8102b8e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102864:	683b      	ldr	r3, [r7, #0]
 8102866:	681a      	ldr	r2, [r3, #0]
 8102868:	2101      	movs	r1, #1
 810286a:	69fb      	ldr	r3, [r7, #28]
 810286c:	fa01 f303 	lsl.w	r3, r1, r3
 8102870:	4013      	ands	r3, r2
 8102872:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102874:	693b      	ldr	r3, [r7, #16]
 8102876:	2b00      	cmp	r3, #0
 8102878:	f000 8186 	beq.w	8102b88 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810287c:	683b      	ldr	r3, [r7, #0]
 810287e:	685b      	ldr	r3, [r3, #4]
 8102880:	f003 0303 	and.w	r3, r3, #3
 8102884:	2b01      	cmp	r3, #1
 8102886:	d005      	beq.n	8102894 <HAL_GPIO_Init+0x44>
 8102888:	683b      	ldr	r3, [r7, #0]
 810288a:	685b      	ldr	r3, [r3, #4]
 810288c:	f003 0303 	and.w	r3, r3, #3
 8102890:	2b02      	cmp	r3, #2
 8102892:	d130      	bne.n	81028f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102894:	687b      	ldr	r3, [r7, #4]
 8102896:	689b      	ldr	r3, [r3, #8]
 8102898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810289a:	69fb      	ldr	r3, [r7, #28]
 810289c:	005b      	lsls	r3, r3, #1
 810289e:	2203      	movs	r2, #3
 81028a0:	fa02 f303 	lsl.w	r3, r2, r3
 81028a4:	43db      	mvns	r3, r3
 81028a6:	69ba      	ldr	r2, [r7, #24]
 81028a8:	4013      	ands	r3, r2
 81028aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81028ac:	683b      	ldr	r3, [r7, #0]
 81028ae:	68da      	ldr	r2, [r3, #12]
 81028b0:	69fb      	ldr	r3, [r7, #28]
 81028b2:	005b      	lsls	r3, r3, #1
 81028b4:	fa02 f303 	lsl.w	r3, r2, r3
 81028b8:	69ba      	ldr	r2, [r7, #24]
 81028ba:	4313      	orrs	r3, r2
 81028bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81028be:	687b      	ldr	r3, [r7, #4]
 81028c0:	69ba      	ldr	r2, [r7, #24]
 81028c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81028c4:	687b      	ldr	r3, [r7, #4]
 81028c6:	685b      	ldr	r3, [r3, #4]
 81028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81028ca:	2201      	movs	r2, #1
 81028cc:	69fb      	ldr	r3, [r7, #28]
 81028ce:	fa02 f303 	lsl.w	r3, r2, r3
 81028d2:	43db      	mvns	r3, r3
 81028d4:	69ba      	ldr	r2, [r7, #24]
 81028d6:	4013      	ands	r3, r2
 81028d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81028da:	683b      	ldr	r3, [r7, #0]
 81028dc:	685b      	ldr	r3, [r3, #4]
 81028de:	091b      	lsrs	r3, r3, #4
 81028e0:	f003 0201 	and.w	r2, r3, #1
 81028e4:	69fb      	ldr	r3, [r7, #28]
 81028e6:	fa02 f303 	lsl.w	r3, r2, r3
 81028ea:	69ba      	ldr	r2, [r7, #24]
 81028ec:	4313      	orrs	r3, r2
 81028ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81028f0:	687b      	ldr	r3, [r7, #4]
 81028f2:	69ba      	ldr	r2, [r7, #24]
 81028f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81028f6:	683b      	ldr	r3, [r7, #0]
 81028f8:	685b      	ldr	r3, [r3, #4]
 81028fa:	f003 0303 	and.w	r3, r3, #3
 81028fe:	2b03      	cmp	r3, #3
 8102900:	d017      	beq.n	8102932 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102902:	687b      	ldr	r3, [r7, #4]
 8102904:	68db      	ldr	r3, [r3, #12]
 8102906:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102908:	69fb      	ldr	r3, [r7, #28]
 810290a:	005b      	lsls	r3, r3, #1
 810290c:	2203      	movs	r2, #3
 810290e:	fa02 f303 	lsl.w	r3, r2, r3
 8102912:	43db      	mvns	r3, r3
 8102914:	69ba      	ldr	r2, [r7, #24]
 8102916:	4013      	ands	r3, r2
 8102918:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810291a:	683b      	ldr	r3, [r7, #0]
 810291c:	689a      	ldr	r2, [r3, #8]
 810291e:	69fb      	ldr	r3, [r7, #28]
 8102920:	005b      	lsls	r3, r3, #1
 8102922:	fa02 f303 	lsl.w	r3, r2, r3
 8102926:	69ba      	ldr	r2, [r7, #24]
 8102928:	4313      	orrs	r3, r2
 810292a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810292c:	687b      	ldr	r3, [r7, #4]
 810292e:	69ba      	ldr	r2, [r7, #24]
 8102930:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102932:	683b      	ldr	r3, [r7, #0]
 8102934:	685b      	ldr	r3, [r3, #4]
 8102936:	f003 0303 	and.w	r3, r3, #3
 810293a:	2b02      	cmp	r3, #2
 810293c:	d123      	bne.n	8102986 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810293e:	69fb      	ldr	r3, [r7, #28]
 8102940:	08da      	lsrs	r2, r3, #3
 8102942:	687b      	ldr	r3, [r7, #4]
 8102944:	3208      	adds	r2, #8
 8102946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810294a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810294c:	69fb      	ldr	r3, [r7, #28]
 810294e:	f003 0307 	and.w	r3, r3, #7
 8102952:	009b      	lsls	r3, r3, #2
 8102954:	220f      	movs	r2, #15
 8102956:	fa02 f303 	lsl.w	r3, r2, r3
 810295a:	43db      	mvns	r3, r3
 810295c:	69ba      	ldr	r2, [r7, #24]
 810295e:	4013      	ands	r3, r2
 8102960:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102962:	683b      	ldr	r3, [r7, #0]
 8102964:	691a      	ldr	r2, [r3, #16]
 8102966:	69fb      	ldr	r3, [r7, #28]
 8102968:	f003 0307 	and.w	r3, r3, #7
 810296c:	009b      	lsls	r3, r3, #2
 810296e:	fa02 f303 	lsl.w	r3, r2, r3
 8102972:	69ba      	ldr	r2, [r7, #24]
 8102974:	4313      	orrs	r3, r2
 8102976:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102978:	69fb      	ldr	r3, [r7, #28]
 810297a:	08da      	lsrs	r2, r3, #3
 810297c:	687b      	ldr	r3, [r7, #4]
 810297e:	3208      	adds	r2, #8
 8102980:	69b9      	ldr	r1, [r7, #24]
 8102982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102986:	687b      	ldr	r3, [r7, #4]
 8102988:	681b      	ldr	r3, [r3, #0]
 810298a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810298c:	69fb      	ldr	r3, [r7, #28]
 810298e:	005b      	lsls	r3, r3, #1
 8102990:	2203      	movs	r2, #3
 8102992:	fa02 f303 	lsl.w	r3, r2, r3
 8102996:	43db      	mvns	r3, r3
 8102998:	69ba      	ldr	r2, [r7, #24]
 810299a:	4013      	ands	r3, r2
 810299c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810299e:	683b      	ldr	r3, [r7, #0]
 81029a0:	685b      	ldr	r3, [r3, #4]
 81029a2:	f003 0203 	and.w	r2, r3, #3
 81029a6:	69fb      	ldr	r3, [r7, #28]
 81029a8:	005b      	lsls	r3, r3, #1
 81029aa:	fa02 f303 	lsl.w	r3, r2, r3
 81029ae:	69ba      	ldr	r2, [r7, #24]
 81029b0:	4313      	orrs	r3, r2
 81029b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81029b4:	687b      	ldr	r3, [r7, #4]
 81029b6:	69ba      	ldr	r2, [r7, #24]
 81029b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81029ba:	683b      	ldr	r3, [r7, #0]
 81029bc:	685b      	ldr	r3, [r3, #4]
 81029be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81029c2:	2b00      	cmp	r3, #0
 81029c4:	f000 80e0 	beq.w	8102b88 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81029c8:	4b2f      	ldr	r3, [pc, #188]	; (8102a88 <HAL_GPIO_Init+0x238>)
 81029ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81029ce:	4a2e      	ldr	r2, [pc, #184]	; (8102a88 <HAL_GPIO_Init+0x238>)
 81029d0:	f043 0302 	orr.w	r3, r3, #2
 81029d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81029d8:	4b2b      	ldr	r3, [pc, #172]	; (8102a88 <HAL_GPIO_Init+0x238>)
 81029da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81029de:	f003 0302 	and.w	r3, r3, #2
 81029e2:	60fb      	str	r3, [r7, #12]
 81029e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81029e6:	4a29      	ldr	r2, [pc, #164]	; (8102a8c <HAL_GPIO_Init+0x23c>)
 81029e8:	69fb      	ldr	r3, [r7, #28]
 81029ea:	089b      	lsrs	r3, r3, #2
 81029ec:	3302      	adds	r3, #2
 81029ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81029f4:	69fb      	ldr	r3, [r7, #28]
 81029f6:	f003 0303 	and.w	r3, r3, #3
 81029fa:	009b      	lsls	r3, r3, #2
 81029fc:	220f      	movs	r2, #15
 81029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8102a02:	43db      	mvns	r3, r3
 8102a04:	69ba      	ldr	r2, [r7, #24]
 8102a06:	4013      	ands	r3, r2
 8102a08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102a0a:	687b      	ldr	r3, [r7, #4]
 8102a0c:	4a20      	ldr	r2, [pc, #128]	; (8102a90 <HAL_GPIO_Init+0x240>)
 8102a0e:	4293      	cmp	r3, r2
 8102a10:	d052      	beq.n	8102ab8 <HAL_GPIO_Init+0x268>
 8102a12:	687b      	ldr	r3, [r7, #4]
 8102a14:	4a1f      	ldr	r2, [pc, #124]	; (8102a94 <HAL_GPIO_Init+0x244>)
 8102a16:	4293      	cmp	r3, r2
 8102a18:	d031      	beq.n	8102a7e <HAL_GPIO_Init+0x22e>
 8102a1a:	687b      	ldr	r3, [r7, #4]
 8102a1c:	4a1e      	ldr	r2, [pc, #120]	; (8102a98 <HAL_GPIO_Init+0x248>)
 8102a1e:	4293      	cmp	r3, r2
 8102a20:	d02b      	beq.n	8102a7a <HAL_GPIO_Init+0x22a>
 8102a22:	687b      	ldr	r3, [r7, #4]
 8102a24:	4a1d      	ldr	r2, [pc, #116]	; (8102a9c <HAL_GPIO_Init+0x24c>)
 8102a26:	4293      	cmp	r3, r2
 8102a28:	d025      	beq.n	8102a76 <HAL_GPIO_Init+0x226>
 8102a2a:	687b      	ldr	r3, [r7, #4]
 8102a2c:	4a1c      	ldr	r2, [pc, #112]	; (8102aa0 <HAL_GPIO_Init+0x250>)
 8102a2e:	4293      	cmp	r3, r2
 8102a30:	d01f      	beq.n	8102a72 <HAL_GPIO_Init+0x222>
 8102a32:	687b      	ldr	r3, [r7, #4]
 8102a34:	4a1b      	ldr	r2, [pc, #108]	; (8102aa4 <HAL_GPIO_Init+0x254>)
 8102a36:	4293      	cmp	r3, r2
 8102a38:	d019      	beq.n	8102a6e <HAL_GPIO_Init+0x21e>
 8102a3a:	687b      	ldr	r3, [r7, #4]
 8102a3c:	4a1a      	ldr	r2, [pc, #104]	; (8102aa8 <HAL_GPIO_Init+0x258>)
 8102a3e:	4293      	cmp	r3, r2
 8102a40:	d013      	beq.n	8102a6a <HAL_GPIO_Init+0x21a>
 8102a42:	687b      	ldr	r3, [r7, #4]
 8102a44:	4a19      	ldr	r2, [pc, #100]	; (8102aac <HAL_GPIO_Init+0x25c>)
 8102a46:	4293      	cmp	r3, r2
 8102a48:	d00d      	beq.n	8102a66 <HAL_GPIO_Init+0x216>
 8102a4a:	687b      	ldr	r3, [r7, #4]
 8102a4c:	4a18      	ldr	r2, [pc, #96]	; (8102ab0 <HAL_GPIO_Init+0x260>)
 8102a4e:	4293      	cmp	r3, r2
 8102a50:	d007      	beq.n	8102a62 <HAL_GPIO_Init+0x212>
 8102a52:	687b      	ldr	r3, [r7, #4]
 8102a54:	4a17      	ldr	r2, [pc, #92]	; (8102ab4 <HAL_GPIO_Init+0x264>)
 8102a56:	4293      	cmp	r3, r2
 8102a58:	d101      	bne.n	8102a5e <HAL_GPIO_Init+0x20e>
 8102a5a:	2309      	movs	r3, #9
 8102a5c:	e02d      	b.n	8102aba <HAL_GPIO_Init+0x26a>
 8102a5e:	230a      	movs	r3, #10
 8102a60:	e02b      	b.n	8102aba <HAL_GPIO_Init+0x26a>
 8102a62:	2308      	movs	r3, #8
 8102a64:	e029      	b.n	8102aba <HAL_GPIO_Init+0x26a>
 8102a66:	2307      	movs	r3, #7
 8102a68:	e027      	b.n	8102aba <HAL_GPIO_Init+0x26a>
 8102a6a:	2306      	movs	r3, #6
 8102a6c:	e025      	b.n	8102aba <HAL_GPIO_Init+0x26a>
 8102a6e:	2305      	movs	r3, #5
 8102a70:	e023      	b.n	8102aba <HAL_GPIO_Init+0x26a>
 8102a72:	2304      	movs	r3, #4
 8102a74:	e021      	b.n	8102aba <HAL_GPIO_Init+0x26a>
 8102a76:	2303      	movs	r3, #3
 8102a78:	e01f      	b.n	8102aba <HAL_GPIO_Init+0x26a>
 8102a7a:	2302      	movs	r3, #2
 8102a7c:	e01d      	b.n	8102aba <HAL_GPIO_Init+0x26a>
 8102a7e:	2301      	movs	r3, #1
 8102a80:	e01b      	b.n	8102aba <HAL_GPIO_Init+0x26a>
 8102a82:	bf00      	nop
 8102a84:	580000c0 	.word	0x580000c0
 8102a88:	58024400 	.word	0x58024400
 8102a8c:	58000400 	.word	0x58000400
 8102a90:	58020000 	.word	0x58020000
 8102a94:	58020400 	.word	0x58020400
 8102a98:	58020800 	.word	0x58020800
 8102a9c:	58020c00 	.word	0x58020c00
 8102aa0:	58021000 	.word	0x58021000
 8102aa4:	58021400 	.word	0x58021400
 8102aa8:	58021800 	.word	0x58021800
 8102aac:	58021c00 	.word	0x58021c00
 8102ab0:	58022000 	.word	0x58022000
 8102ab4:	58022400 	.word	0x58022400
 8102ab8:	2300      	movs	r3, #0
 8102aba:	69fa      	ldr	r2, [r7, #28]
 8102abc:	f002 0203 	and.w	r2, r2, #3
 8102ac0:	0092      	lsls	r2, r2, #2
 8102ac2:	4093      	lsls	r3, r2
 8102ac4:	69ba      	ldr	r2, [r7, #24]
 8102ac6:	4313      	orrs	r3, r2
 8102ac8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102aca:	4938      	ldr	r1, [pc, #224]	; (8102bac <HAL_GPIO_Init+0x35c>)
 8102acc:	69fb      	ldr	r3, [r7, #28]
 8102ace:	089b      	lsrs	r3, r3, #2
 8102ad0:	3302      	adds	r3, #2
 8102ad2:	69ba      	ldr	r2, [r7, #24]
 8102ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102adc:	681b      	ldr	r3, [r3, #0]
 8102ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102ae0:	693b      	ldr	r3, [r7, #16]
 8102ae2:	43db      	mvns	r3, r3
 8102ae4:	69ba      	ldr	r2, [r7, #24]
 8102ae6:	4013      	ands	r3, r2
 8102ae8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102aea:	683b      	ldr	r3, [r7, #0]
 8102aec:	685b      	ldr	r3, [r3, #4]
 8102aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102af2:	2b00      	cmp	r3, #0
 8102af4:	d003      	beq.n	8102afe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8102af6:	69ba      	ldr	r2, [r7, #24]
 8102af8:	693b      	ldr	r3, [r7, #16]
 8102afa:	4313      	orrs	r3, r2
 8102afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102b02:	69bb      	ldr	r3, [r7, #24]
 8102b04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102b0a:	685b      	ldr	r3, [r3, #4]
 8102b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102b0e:	693b      	ldr	r3, [r7, #16]
 8102b10:	43db      	mvns	r3, r3
 8102b12:	69ba      	ldr	r2, [r7, #24]
 8102b14:	4013      	ands	r3, r2
 8102b16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102b18:	683b      	ldr	r3, [r7, #0]
 8102b1a:	685b      	ldr	r3, [r3, #4]
 8102b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102b20:	2b00      	cmp	r3, #0
 8102b22:	d003      	beq.n	8102b2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102b24:	69ba      	ldr	r2, [r7, #24]
 8102b26:	693b      	ldr	r3, [r7, #16]
 8102b28:	4313      	orrs	r3, r2
 8102b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102b2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102b30:	69bb      	ldr	r3, [r7, #24]
 8102b32:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102b34:	697b      	ldr	r3, [r7, #20]
 8102b36:	685b      	ldr	r3, [r3, #4]
 8102b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102b3a:	693b      	ldr	r3, [r7, #16]
 8102b3c:	43db      	mvns	r3, r3
 8102b3e:	69ba      	ldr	r2, [r7, #24]
 8102b40:	4013      	ands	r3, r2
 8102b42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102b44:	683b      	ldr	r3, [r7, #0]
 8102b46:	685b      	ldr	r3, [r3, #4]
 8102b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102b4c:	2b00      	cmp	r3, #0
 8102b4e:	d003      	beq.n	8102b58 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102b50:	69ba      	ldr	r2, [r7, #24]
 8102b52:	693b      	ldr	r3, [r7, #16]
 8102b54:	4313      	orrs	r3, r2
 8102b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102b58:	697b      	ldr	r3, [r7, #20]
 8102b5a:	69ba      	ldr	r2, [r7, #24]
 8102b5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102b5e:	697b      	ldr	r3, [r7, #20]
 8102b60:	681b      	ldr	r3, [r3, #0]
 8102b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102b64:	693b      	ldr	r3, [r7, #16]
 8102b66:	43db      	mvns	r3, r3
 8102b68:	69ba      	ldr	r2, [r7, #24]
 8102b6a:	4013      	ands	r3, r2
 8102b6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8102b6e:	683b      	ldr	r3, [r7, #0]
 8102b70:	685b      	ldr	r3, [r3, #4]
 8102b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102b76:	2b00      	cmp	r3, #0
 8102b78:	d003      	beq.n	8102b82 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8102b7a:	69ba      	ldr	r2, [r7, #24]
 8102b7c:	693b      	ldr	r3, [r7, #16]
 8102b7e:	4313      	orrs	r3, r2
 8102b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102b82:	697b      	ldr	r3, [r7, #20]
 8102b84:	69ba      	ldr	r2, [r7, #24]
 8102b86:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102b88:	69fb      	ldr	r3, [r7, #28]
 8102b8a:	3301      	adds	r3, #1
 8102b8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102b8e:	683b      	ldr	r3, [r7, #0]
 8102b90:	681a      	ldr	r2, [r3, #0]
 8102b92:	69fb      	ldr	r3, [r7, #28]
 8102b94:	fa22 f303 	lsr.w	r3, r2, r3
 8102b98:	2b00      	cmp	r3, #0
 8102b9a:	f47f ae63 	bne.w	8102864 <HAL_GPIO_Init+0x14>
  }
}
 8102b9e:	bf00      	nop
 8102ba0:	bf00      	nop
 8102ba2:	3724      	adds	r7, #36	; 0x24
 8102ba4:	46bd      	mov	sp, r7
 8102ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102baa:	4770      	bx	lr
 8102bac:	58000400 	.word	0x58000400

08102bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8102bb0:	b480      	push	{r7}
 8102bb2:	b083      	sub	sp, #12
 8102bb4:	af00      	add	r7, sp, #0
 8102bb6:	6078      	str	r0, [r7, #4]
 8102bb8:	460b      	mov	r3, r1
 8102bba:	807b      	strh	r3, [r7, #2]
 8102bbc:	4613      	mov	r3, r2
 8102bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8102bc0:	787b      	ldrb	r3, [r7, #1]
 8102bc2:	2b00      	cmp	r3, #0
 8102bc4:	d003      	beq.n	8102bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8102bc6:	887a      	ldrh	r2, [r7, #2]
 8102bc8:	687b      	ldr	r3, [r7, #4]
 8102bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8102bcc:	e003      	b.n	8102bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8102bce:	887b      	ldrh	r3, [r7, #2]
 8102bd0:	041a      	lsls	r2, r3, #16
 8102bd2:	687b      	ldr	r3, [r7, #4]
 8102bd4:	619a      	str	r2, [r3, #24]
}
 8102bd6:	bf00      	nop
 8102bd8:	370c      	adds	r7, #12
 8102bda:	46bd      	mov	sp, r7
 8102bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102be0:	4770      	bx	lr

08102be2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8102be2:	b480      	push	{r7}
 8102be4:	b085      	sub	sp, #20
 8102be6:	af00      	add	r7, sp, #0
 8102be8:	6078      	str	r0, [r7, #4]
 8102bea:	460b      	mov	r3, r1
 8102bec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8102bee:	687b      	ldr	r3, [r7, #4]
 8102bf0:	695b      	ldr	r3, [r3, #20]
 8102bf2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8102bf4:	887a      	ldrh	r2, [r7, #2]
 8102bf6:	68fb      	ldr	r3, [r7, #12]
 8102bf8:	4013      	ands	r3, r2
 8102bfa:	041a      	lsls	r2, r3, #16
 8102bfc:	68fb      	ldr	r3, [r7, #12]
 8102bfe:	43d9      	mvns	r1, r3
 8102c00:	887b      	ldrh	r3, [r7, #2]
 8102c02:	400b      	ands	r3, r1
 8102c04:	431a      	orrs	r2, r3
 8102c06:	687b      	ldr	r3, [r7, #4]
 8102c08:	619a      	str	r2, [r3, #24]
}
 8102c0a:	bf00      	nop
 8102c0c:	3714      	adds	r7, #20
 8102c0e:	46bd      	mov	sp, r7
 8102c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c14:	4770      	bx	lr

08102c16 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8102c16:	b580      	push	{r7, lr}
 8102c18:	b082      	sub	sp, #8
 8102c1a:	af00      	add	r7, sp, #0
 8102c1c:	4603      	mov	r3, r0
 8102c1e:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8102c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102c24:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8102c28:	88fb      	ldrh	r3, [r7, #6]
 8102c2a:	4013      	ands	r3, r2
 8102c2c:	2b00      	cmp	r3, #0
 8102c2e:	d008      	beq.n	8102c42 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8102c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102c34:	88fb      	ldrh	r3, [r7, #6]
 8102c36:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8102c3a:	88fb      	ldrh	r3, [r7, #6]
 8102c3c:	4618      	mov	r0, r3
 8102c3e:	f7fe fc23 	bl	8101488 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8102c42:	bf00      	nop
 8102c44:	3708      	adds	r7, #8
 8102c46:	46bd      	mov	sp, r7
 8102c48:	bd80      	pop	{r7, pc}
	...

08102c4c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102c4c:	b480      	push	{r7}
 8102c4e:	b083      	sub	sp, #12
 8102c50:	af00      	add	r7, sp, #0
 8102c52:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102c54:	4b05      	ldr	r3, [pc, #20]	; (8102c6c <HAL_HSEM_ActivateNotification+0x20>)
 8102c56:	681a      	ldr	r2, [r3, #0]
 8102c58:	4904      	ldr	r1, [pc, #16]	; (8102c6c <HAL_HSEM_ActivateNotification+0x20>)
 8102c5a:	687b      	ldr	r3, [r7, #4]
 8102c5c:	4313      	orrs	r3, r2
 8102c5e:	600b      	str	r3, [r1, #0]
#endif
}
 8102c60:	bf00      	nop
 8102c62:	370c      	adds	r7, #12
 8102c64:	46bd      	mov	sp, r7
 8102c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c6a:	4770      	bx	lr
 8102c6c:	58026510 	.word	0x58026510

08102c70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8102c70:	b580      	push	{r7, lr}
 8102c72:	b082      	sub	sp, #8
 8102c74:	af00      	add	r7, sp, #0
 8102c76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8102c78:	687b      	ldr	r3, [r7, #4]
 8102c7a:	2b00      	cmp	r3, #0
 8102c7c:	d101      	bne.n	8102c82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8102c7e:	2301      	movs	r3, #1
 8102c80:	e081      	b.n	8102d86 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8102c82:	687b      	ldr	r3, [r7, #4]
 8102c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102c88:	b2db      	uxtb	r3, r3
 8102c8a:	2b00      	cmp	r3, #0
 8102c8c:	d106      	bne.n	8102c9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8102c8e:	687b      	ldr	r3, [r7, #4]
 8102c90:	2200      	movs	r2, #0
 8102c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8102c96:	6878      	ldr	r0, [r7, #4]
 8102c98:	f7fe fc78 	bl	810158c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8102c9c:	687b      	ldr	r3, [r7, #4]
 8102c9e:	2224      	movs	r2, #36	; 0x24
 8102ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8102ca4:	687b      	ldr	r3, [r7, #4]
 8102ca6:	681b      	ldr	r3, [r3, #0]
 8102ca8:	681a      	ldr	r2, [r3, #0]
 8102caa:	687b      	ldr	r3, [r7, #4]
 8102cac:	681b      	ldr	r3, [r3, #0]
 8102cae:	f022 0201 	bic.w	r2, r2, #1
 8102cb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8102cb4:	687b      	ldr	r3, [r7, #4]
 8102cb6:	685a      	ldr	r2, [r3, #4]
 8102cb8:	687b      	ldr	r3, [r7, #4]
 8102cba:	681b      	ldr	r3, [r3, #0]
 8102cbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8102cc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8102cc2:	687b      	ldr	r3, [r7, #4]
 8102cc4:	681b      	ldr	r3, [r3, #0]
 8102cc6:	689a      	ldr	r2, [r3, #8]
 8102cc8:	687b      	ldr	r3, [r7, #4]
 8102cca:	681b      	ldr	r3, [r3, #0]
 8102ccc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102cd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8102cd2:	687b      	ldr	r3, [r7, #4]
 8102cd4:	68db      	ldr	r3, [r3, #12]
 8102cd6:	2b01      	cmp	r3, #1
 8102cd8:	d107      	bne.n	8102cea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8102cda:	687b      	ldr	r3, [r7, #4]
 8102cdc:	689a      	ldr	r2, [r3, #8]
 8102cde:	687b      	ldr	r3, [r7, #4]
 8102ce0:	681b      	ldr	r3, [r3, #0]
 8102ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8102ce6:	609a      	str	r2, [r3, #8]
 8102ce8:	e006      	b.n	8102cf8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8102cea:	687b      	ldr	r3, [r7, #4]
 8102cec:	689a      	ldr	r2, [r3, #8]
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	681b      	ldr	r3, [r3, #0]
 8102cf2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8102cf6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8102cf8:	687b      	ldr	r3, [r7, #4]
 8102cfa:	68db      	ldr	r3, [r3, #12]
 8102cfc:	2b02      	cmp	r3, #2
 8102cfe:	d104      	bne.n	8102d0a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8102d00:	687b      	ldr	r3, [r7, #4]
 8102d02:	681b      	ldr	r3, [r3, #0]
 8102d04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102d08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8102d0a:	687b      	ldr	r3, [r7, #4]
 8102d0c:	681b      	ldr	r3, [r3, #0]
 8102d0e:	685b      	ldr	r3, [r3, #4]
 8102d10:	687a      	ldr	r2, [r7, #4]
 8102d12:	6812      	ldr	r2, [r2, #0]
 8102d14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8102d1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8102d1e:	687b      	ldr	r3, [r7, #4]
 8102d20:	681b      	ldr	r3, [r3, #0]
 8102d22:	68da      	ldr	r2, [r3, #12]
 8102d24:	687b      	ldr	r3, [r7, #4]
 8102d26:	681b      	ldr	r3, [r3, #0]
 8102d28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102d2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8102d2e:	687b      	ldr	r3, [r7, #4]
 8102d30:	691a      	ldr	r2, [r3, #16]
 8102d32:	687b      	ldr	r3, [r7, #4]
 8102d34:	695b      	ldr	r3, [r3, #20]
 8102d36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8102d3a:	687b      	ldr	r3, [r7, #4]
 8102d3c:	699b      	ldr	r3, [r3, #24]
 8102d3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8102d40:	687b      	ldr	r3, [r7, #4]
 8102d42:	681b      	ldr	r3, [r3, #0]
 8102d44:	430a      	orrs	r2, r1
 8102d46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8102d48:	687b      	ldr	r3, [r7, #4]
 8102d4a:	69d9      	ldr	r1, [r3, #28]
 8102d4c:	687b      	ldr	r3, [r7, #4]
 8102d4e:	6a1a      	ldr	r2, [r3, #32]
 8102d50:	687b      	ldr	r3, [r7, #4]
 8102d52:	681b      	ldr	r3, [r3, #0]
 8102d54:	430a      	orrs	r2, r1
 8102d56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8102d58:	687b      	ldr	r3, [r7, #4]
 8102d5a:	681b      	ldr	r3, [r3, #0]
 8102d5c:	681a      	ldr	r2, [r3, #0]
 8102d5e:	687b      	ldr	r3, [r7, #4]
 8102d60:	681b      	ldr	r3, [r3, #0]
 8102d62:	f042 0201 	orr.w	r2, r2, #1
 8102d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102d68:	687b      	ldr	r3, [r7, #4]
 8102d6a:	2200      	movs	r2, #0
 8102d6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8102d6e:	687b      	ldr	r3, [r7, #4]
 8102d70:	2220      	movs	r2, #32
 8102d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8102d76:	687b      	ldr	r3, [r7, #4]
 8102d78:	2200      	movs	r2, #0
 8102d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8102d7c:	687b      	ldr	r3, [r7, #4]
 8102d7e:	2200      	movs	r2, #0
 8102d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8102d84:	2300      	movs	r3, #0
}
 8102d86:	4618      	mov	r0, r3
 8102d88:	3708      	adds	r7, #8
 8102d8a:	46bd      	mov	sp, r7
 8102d8c:	bd80      	pop	{r7, pc}
	...

08102d90 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102d90:	b580      	push	{r7, lr}
 8102d92:	b088      	sub	sp, #32
 8102d94:	af02      	add	r7, sp, #8
 8102d96:	60f8      	str	r0, [r7, #12]
 8102d98:	4608      	mov	r0, r1
 8102d9a:	4611      	mov	r1, r2
 8102d9c:	461a      	mov	r2, r3
 8102d9e:	4603      	mov	r3, r0
 8102da0:	817b      	strh	r3, [r7, #10]
 8102da2:	460b      	mov	r3, r1
 8102da4:	813b      	strh	r3, [r7, #8]
 8102da6:	4613      	mov	r3, r2
 8102da8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102daa:	68fb      	ldr	r3, [r7, #12]
 8102dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102db0:	b2db      	uxtb	r3, r3
 8102db2:	2b20      	cmp	r3, #32
 8102db4:	f040 80fd 	bne.w	8102fb2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8102db8:	6a3b      	ldr	r3, [r7, #32]
 8102dba:	2b00      	cmp	r3, #0
 8102dbc:	d002      	beq.n	8102dc4 <HAL_I2C_Mem_Read+0x34>
 8102dbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8102dc0:	2b00      	cmp	r3, #0
 8102dc2:	d105      	bne.n	8102dd0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8102dc4:	68fb      	ldr	r3, [r7, #12]
 8102dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8102dca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8102dcc:	2301      	movs	r3, #1
 8102dce:	e0f1      	b.n	8102fb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102dd0:	68fb      	ldr	r3, [r7, #12]
 8102dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102dd6:	2b01      	cmp	r3, #1
 8102dd8:	d101      	bne.n	8102dde <HAL_I2C_Mem_Read+0x4e>
 8102dda:	2302      	movs	r3, #2
 8102ddc:	e0ea      	b.n	8102fb4 <HAL_I2C_Mem_Read+0x224>
 8102dde:	68fb      	ldr	r3, [r7, #12]
 8102de0:	2201      	movs	r2, #1
 8102de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8102de6:	f7fe fe49 	bl	8101a7c <HAL_GetTick>
 8102dea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8102dec:	697b      	ldr	r3, [r7, #20]
 8102dee:	9300      	str	r3, [sp, #0]
 8102df0:	2319      	movs	r3, #25
 8102df2:	2201      	movs	r2, #1
 8102df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8102df8:	68f8      	ldr	r0, [r7, #12]
 8102dfa:	f000 f95b 	bl	81030b4 <I2C_WaitOnFlagUntilTimeout>
 8102dfe:	4603      	mov	r3, r0
 8102e00:	2b00      	cmp	r3, #0
 8102e02:	d001      	beq.n	8102e08 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8102e04:	2301      	movs	r3, #1
 8102e06:	e0d5      	b.n	8102fb4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8102e08:	68fb      	ldr	r3, [r7, #12]
 8102e0a:	2222      	movs	r2, #34	; 0x22
 8102e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8102e10:	68fb      	ldr	r3, [r7, #12]
 8102e12:	2240      	movs	r2, #64	; 0x40
 8102e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102e18:	68fb      	ldr	r3, [r7, #12]
 8102e1a:	2200      	movs	r2, #0
 8102e1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8102e1e:	68fb      	ldr	r3, [r7, #12]
 8102e20:	6a3a      	ldr	r2, [r7, #32]
 8102e22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102e24:	68fb      	ldr	r3, [r7, #12]
 8102e26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8102e28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8102e2a:	68fb      	ldr	r3, [r7, #12]
 8102e2c:	2200      	movs	r2, #0
 8102e2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8102e30:	88f8      	ldrh	r0, [r7, #6]
 8102e32:	893a      	ldrh	r2, [r7, #8]
 8102e34:	8979      	ldrh	r1, [r7, #10]
 8102e36:	697b      	ldr	r3, [r7, #20]
 8102e38:	9301      	str	r3, [sp, #4]
 8102e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102e3c:	9300      	str	r3, [sp, #0]
 8102e3e:	4603      	mov	r3, r0
 8102e40:	68f8      	ldr	r0, [r7, #12]
 8102e42:	f000 f8bf 	bl	8102fc4 <I2C_RequestMemoryRead>
 8102e46:	4603      	mov	r3, r0
 8102e48:	2b00      	cmp	r3, #0
 8102e4a:	d005      	beq.n	8102e58 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102e4c:	68fb      	ldr	r3, [r7, #12]
 8102e4e:	2200      	movs	r2, #0
 8102e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102e54:	2301      	movs	r3, #1
 8102e56:	e0ad      	b.n	8102fb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102e58:	68fb      	ldr	r3, [r7, #12]
 8102e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102e5c:	b29b      	uxth	r3, r3
 8102e5e:	2bff      	cmp	r3, #255	; 0xff
 8102e60:	d90e      	bls.n	8102e80 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102e62:	68fb      	ldr	r3, [r7, #12]
 8102e64:	22ff      	movs	r2, #255	; 0xff
 8102e66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102e68:	68fb      	ldr	r3, [r7, #12]
 8102e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102e6c:	b2da      	uxtb	r2, r3
 8102e6e:	8979      	ldrh	r1, [r7, #10]
 8102e70:	4b52      	ldr	r3, [pc, #328]	; (8102fbc <HAL_I2C_Mem_Read+0x22c>)
 8102e72:	9300      	str	r3, [sp, #0]
 8102e74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102e78:	68f8      	ldr	r0, [r7, #12]
 8102e7a:	f000 fac3 	bl	8103404 <I2C_TransferConfig>
 8102e7e:	e00f      	b.n	8102ea0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102e80:	68fb      	ldr	r3, [r7, #12]
 8102e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102e84:	b29a      	uxth	r2, r3
 8102e86:	68fb      	ldr	r3, [r7, #12]
 8102e88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102e8a:	68fb      	ldr	r3, [r7, #12]
 8102e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102e8e:	b2da      	uxtb	r2, r3
 8102e90:	8979      	ldrh	r1, [r7, #10]
 8102e92:	4b4a      	ldr	r3, [pc, #296]	; (8102fbc <HAL_I2C_Mem_Read+0x22c>)
 8102e94:	9300      	str	r3, [sp, #0]
 8102e96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102e9a:	68f8      	ldr	r0, [r7, #12]
 8102e9c:	f000 fab2 	bl	8103404 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8102ea0:	697b      	ldr	r3, [r7, #20]
 8102ea2:	9300      	str	r3, [sp, #0]
 8102ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102ea6:	2200      	movs	r2, #0
 8102ea8:	2104      	movs	r1, #4
 8102eaa:	68f8      	ldr	r0, [r7, #12]
 8102eac:	f000 f902 	bl	81030b4 <I2C_WaitOnFlagUntilTimeout>
 8102eb0:	4603      	mov	r3, r0
 8102eb2:	2b00      	cmp	r3, #0
 8102eb4:	d001      	beq.n	8102eba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8102eb6:	2301      	movs	r3, #1
 8102eb8:	e07c      	b.n	8102fb4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8102eba:	68fb      	ldr	r3, [r7, #12]
 8102ebc:	681b      	ldr	r3, [r3, #0]
 8102ebe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8102ec0:	68fb      	ldr	r3, [r7, #12]
 8102ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102ec4:	b2d2      	uxtb	r2, r2
 8102ec6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102ec8:	68fb      	ldr	r3, [r7, #12]
 8102eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102ecc:	1c5a      	adds	r2, r3, #1
 8102ece:	68fb      	ldr	r3, [r7, #12]
 8102ed0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8102ed2:	68fb      	ldr	r3, [r7, #12]
 8102ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102ed6:	3b01      	subs	r3, #1
 8102ed8:	b29a      	uxth	r2, r3
 8102eda:	68fb      	ldr	r3, [r7, #12]
 8102edc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8102ede:	68fb      	ldr	r3, [r7, #12]
 8102ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102ee2:	b29b      	uxth	r3, r3
 8102ee4:	3b01      	subs	r3, #1
 8102ee6:	b29a      	uxth	r2, r3
 8102ee8:	68fb      	ldr	r3, [r7, #12]
 8102eea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102eec:	68fb      	ldr	r3, [r7, #12]
 8102eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102ef0:	b29b      	uxth	r3, r3
 8102ef2:	2b00      	cmp	r3, #0
 8102ef4:	d034      	beq.n	8102f60 <HAL_I2C_Mem_Read+0x1d0>
 8102ef6:	68fb      	ldr	r3, [r7, #12]
 8102ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102efa:	2b00      	cmp	r3, #0
 8102efc:	d130      	bne.n	8102f60 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102efe:	697b      	ldr	r3, [r7, #20]
 8102f00:	9300      	str	r3, [sp, #0]
 8102f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102f04:	2200      	movs	r2, #0
 8102f06:	2180      	movs	r1, #128	; 0x80
 8102f08:	68f8      	ldr	r0, [r7, #12]
 8102f0a:	f000 f8d3 	bl	81030b4 <I2C_WaitOnFlagUntilTimeout>
 8102f0e:	4603      	mov	r3, r0
 8102f10:	2b00      	cmp	r3, #0
 8102f12:	d001      	beq.n	8102f18 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8102f14:	2301      	movs	r3, #1
 8102f16:	e04d      	b.n	8102fb4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102f18:	68fb      	ldr	r3, [r7, #12]
 8102f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102f1c:	b29b      	uxth	r3, r3
 8102f1e:	2bff      	cmp	r3, #255	; 0xff
 8102f20:	d90e      	bls.n	8102f40 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8102f22:	68fb      	ldr	r3, [r7, #12]
 8102f24:	22ff      	movs	r2, #255	; 0xff
 8102f26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8102f28:	68fb      	ldr	r3, [r7, #12]
 8102f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102f2c:	b2da      	uxtb	r2, r3
 8102f2e:	8979      	ldrh	r1, [r7, #10]
 8102f30:	2300      	movs	r3, #0
 8102f32:	9300      	str	r3, [sp, #0]
 8102f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102f38:	68f8      	ldr	r0, [r7, #12]
 8102f3a:	f000 fa63 	bl	8103404 <I2C_TransferConfig>
 8102f3e:	e00f      	b.n	8102f60 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102f40:	68fb      	ldr	r3, [r7, #12]
 8102f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102f44:	b29a      	uxth	r2, r3
 8102f46:	68fb      	ldr	r3, [r7, #12]
 8102f48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102f4a:	68fb      	ldr	r3, [r7, #12]
 8102f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102f4e:	b2da      	uxtb	r2, r3
 8102f50:	8979      	ldrh	r1, [r7, #10]
 8102f52:	2300      	movs	r3, #0
 8102f54:	9300      	str	r3, [sp, #0]
 8102f56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102f5a:	68f8      	ldr	r0, [r7, #12]
 8102f5c:	f000 fa52 	bl	8103404 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8102f60:	68fb      	ldr	r3, [r7, #12]
 8102f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102f64:	b29b      	uxth	r3, r3
 8102f66:	2b00      	cmp	r3, #0
 8102f68:	d19a      	bne.n	8102ea0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102f6a:	697a      	ldr	r2, [r7, #20]
 8102f6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102f6e:	68f8      	ldr	r0, [r7, #12]
 8102f70:	f000 f920 	bl	81031b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8102f74:	4603      	mov	r3, r0
 8102f76:	2b00      	cmp	r3, #0
 8102f78:	d001      	beq.n	8102f7e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8102f7a:	2301      	movs	r3, #1
 8102f7c:	e01a      	b.n	8102fb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102f7e:	68fb      	ldr	r3, [r7, #12]
 8102f80:	681b      	ldr	r3, [r3, #0]
 8102f82:	2220      	movs	r2, #32
 8102f84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102f86:	68fb      	ldr	r3, [r7, #12]
 8102f88:	681b      	ldr	r3, [r3, #0]
 8102f8a:	6859      	ldr	r1, [r3, #4]
 8102f8c:	68fb      	ldr	r3, [r7, #12]
 8102f8e:	681a      	ldr	r2, [r3, #0]
 8102f90:	4b0b      	ldr	r3, [pc, #44]	; (8102fc0 <HAL_I2C_Mem_Read+0x230>)
 8102f92:	400b      	ands	r3, r1
 8102f94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102f96:	68fb      	ldr	r3, [r7, #12]
 8102f98:	2220      	movs	r2, #32
 8102f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102f9e:	68fb      	ldr	r3, [r7, #12]
 8102fa0:	2200      	movs	r2, #0
 8102fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102fa6:	68fb      	ldr	r3, [r7, #12]
 8102fa8:	2200      	movs	r2, #0
 8102faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102fae:	2300      	movs	r3, #0
 8102fb0:	e000      	b.n	8102fb4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8102fb2:	2302      	movs	r3, #2
  }
}
 8102fb4:	4618      	mov	r0, r3
 8102fb6:	3718      	adds	r7, #24
 8102fb8:	46bd      	mov	sp, r7
 8102fba:	bd80      	pop	{r7, pc}
 8102fbc:	80002400 	.word	0x80002400
 8102fc0:	fe00e800 	.word	0xfe00e800

08102fc4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8102fc4:	b580      	push	{r7, lr}
 8102fc6:	b086      	sub	sp, #24
 8102fc8:	af02      	add	r7, sp, #8
 8102fca:	60f8      	str	r0, [r7, #12]
 8102fcc:	4608      	mov	r0, r1
 8102fce:	4611      	mov	r1, r2
 8102fd0:	461a      	mov	r2, r3
 8102fd2:	4603      	mov	r3, r0
 8102fd4:	817b      	strh	r3, [r7, #10]
 8102fd6:	460b      	mov	r3, r1
 8102fd8:	813b      	strh	r3, [r7, #8]
 8102fda:	4613      	mov	r3, r2
 8102fdc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8102fde:	88fb      	ldrh	r3, [r7, #6]
 8102fe0:	b2da      	uxtb	r2, r3
 8102fe2:	8979      	ldrh	r1, [r7, #10]
 8102fe4:	4b20      	ldr	r3, [pc, #128]	; (8103068 <I2C_RequestMemoryRead+0xa4>)
 8102fe6:	9300      	str	r3, [sp, #0]
 8102fe8:	2300      	movs	r3, #0
 8102fea:	68f8      	ldr	r0, [r7, #12]
 8102fec:	f000 fa0a 	bl	8103404 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102ff0:	69fa      	ldr	r2, [r7, #28]
 8102ff2:	69b9      	ldr	r1, [r7, #24]
 8102ff4:	68f8      	ldr	r0, [r7, #12]
 8102ff6:	f000 f89d 	bl	8103134 <I2C_WaitOnTXISFlagUntilTimeout>
 8102ffa:	4603      	mov	r3, r0
 8102ffc:	2b00      	cmp	r3, #0
 8102ffe:	d001      	beq.n	8103004 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8103000:	2301      	movs	r3, #1
 8103002:	e02c      	b.n	810305e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8103004:	88fb      	ldrh	r3, [r7, #6]
 8103006:	2b01      	cmp	r3, #1
 8103008:	d105      	bne.n	8103016 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810300a:	893b      	ldrh	r3, [r7, #8]
 810300c:	b2da      	uxtb	r2, r3
 810300e:	68fb      	ldr	r3, [r7, #12]
 8103010:	681b      	ldr	r3, [r3, #0]
 8103012:	629a      	str	r2, [r3, #40]	; 0x28
 8103014:	e015      	b.n	8103042 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8103016:	893b      	ldrh	r3, [r7, #8]
 8103018:	0a1b      	lsrs	r3, r3, #8
 810301a:	b29b      	uxth	r3, r3
 810301c:	b2da      	uxtb	r2, r3
 810301e:	68fb      	ldr	r3, [r7, #12]
 8103020:	681b      	ldr	r3, [r3, #0]
 8103022:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8103024:	69fa      	ldr	r2, [r7, #28]
 8103026:	69b9      	ldr	r1, [r7, #24]
 8103028:	68f8      	ldr	r0, [r7, #12]
 810302a:	f000 f883 	bl	8103134 <I2C_WaitOnTXISFlagUntilTimeout>
 810302e:	4603      	mov	r3, r0
 8103030:	2b00      	cmp	r3, #0
 8103032:	d001      	beq.n	8103038 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8103034:	2301      	movs	r3, #1
 8103036:	e012      	b.n	810305e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8103038:	893b      	ldrh	r3, [r7, #8]
 810303a:	b2da      	uxtb	r2, r3
 810303c:	68fb      	ldr	r3, [r7, #12]
 810303e:	681b      	ldr	r3, [r3, #0]
 8103040:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8103042:	69fb      	ldr	r3, [r7, #28]
 8103044:	9300      	str	r3, [sp, #0]
 8103046:	69bb      	ldr	r3, [r7, #24]
 8103048:	2200      	movs	r2, #0
 810304a:	2140      	movs	r1, #64	; 0x40
 810304c:	68f8      	ldr	r0, [r7, #12]
 810304e:	f000 f831 	bl	81030b4 <I2C_WaitOnFlagUntilTimeout>
 8103052:	4603      	mov	r3, r0
 8103054:	2b00      	cmp	r3, #0
 8103056:	d001      	beq.n	810305c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8103058:	2301      	movs	r3, #1
 810305a:	e000      	b.n	810305e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 810305c:	2300      	movs	r3, #0
}
 810305e:	4618      	mov	r0, r3
 8103060:	3710      	adds	r7, #16
 8103062:	46bd      	mov	sp, r7
 8103064:	bd80      	pop	{r7, pc}
 8103066:	bf00      	nop
 8103068:	80002000 	.word	0x80002000

0810306c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 810306c:	b480      	push	{r7}
 810306e:	b083      	sub	sp, #12
 8103070:	af00      	add	r7, sp, #0
 8103072:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8103074:	687b      	ldr	r3, [r7, #4]
 8103076:	681b      	ldr	r3, [r3, #0]
 8103078:	699b      	ldr	r3, [r3, #24]
 810307a:	f003 0302 	and.w	r3, r3, #2
 810307e:	2b02      	cmp	r3, #2
 8103080:	d103      	bne.n	810308a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8103082:	687b      	ldr	r3, [r7, #4]
 8103084:	681b      	ldr	r3, [r3, #0]
 8103086:	2200      	movs	r2, #0
 8103088:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810308a:	687b      	ldr	r3, [r7, #4]
 810308c:	681b      	ldr	r3, [r3, #0]
 810308e:	699b      	ldr	r3, [r3, #24]
 8103090:	f003 0301 	and.w	r3, r3, #1
 8103094:	2b01      	cmp	r3, #1
 8103096:	d007      	beq.n	81030a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8103098:	687b      	ldr	r3, [r7, #4]
 810309a:	681b      	ldr	r3, [r3, #0]
 810309c:	699a      	ldr	r2, [r3, #24]
 810309e:	687b      	ldr	r3, [r7, #4]
 81030a0:	681b      	ldr	r3, [r3, #0]
 81030a2:	f042 0201 	orr.w	r2, r2, #1
 81030a6:	619a      	str	r2, [r3, #24]
  }
}
 81030a8:	bf00      	nop
 81030aa:	370c      	adds	r7, #12
 81030ac:	46bd      	mov	sp, r7
 81030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030b2:	4770      	bx	lr

081030b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81030b4:	b580      	push	{r7, lr}
 81030b6:	b084      	sub	sp, #16
 81030b8:	af00      	add	r7, sp, #0
 81030ba:	60f8      	str	r0, [r7, #12]
 81030bc:	60b9      	str	r1, [r7, #8]
 81030be:	603b      	str	r3, [r7, #0]
 81030c0:	4613      	mov	r3, r2
 81030c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81030c4:	e022      	b.n	810310c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81030c6:	683b      	ldr	r3, [r7, #0]
 81030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81030cc:	d01e      	beq.n	810310c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81030ce:	f7fe fcd5 	bl	8101a7c <HAL_GetTick>
 81030d2:	4602      	mov	r2, r0
 81030d4:	69bb      	ldr	r3, [r7, #24]
 81030d6:	1ad3      	subs	r3, r2, r3
 81030d8:	683a      	ldr	r2, [r7, #0]
 81030da:	429a      	cmp	r2, r3
 81030dc:	d302      	bcc.n	81030e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 81030de:	683b      	ldr	r3, [r7, #0]
 81030e0:	2b00      	cmp	r3, #0
 81030e2:	d113      	bne.n	810310c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81030e4:	68fb      	ldr	r3, [r7, #12]
 81030e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81030e8:	f043 0220 	orr.w	r2, r3, #32
 81030ec:	68fb      	ldr	r3, [r7, #12]
 81030ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81030f0:	68fb      	ldr	r3, [r7, #12]
 81030f2:	2220      	movs	r2, #32
 81030f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81030f8:	68fb      	ldr	r3, [r7, #12]
 81030fa:	2200      	movs	r2, #0
 81030fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8103100:	68fb      	ldr	r3, [r7, #12]
 8103102:	2200      	movs	r2, #0
 8103104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8103108:	2301      	movs	r3, #1
 810310a:	e00f      	b.n	810312c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810310c:	68fb      	ldr	r3, [r7, #12]
 810310e:	681b      	ldr	r3, [r3, #0]
 8103110:	699a      	ldr	r2, [r3, #24]
 8103112:	68bb      	ldr	r3, [r7, #8]
 8103114:	4013      	ands	r3, r2
 8103116:	68ba      	ldr	r2, [r7, #8]
 8103118:	429a      	cmp	r2, r3
 810311a:	bf0c      	ite	eq
 810311c:	2301      	moveq	r3, #1
 810311e:	2300      	movne	r3, #0
 8103120:	b2db      	uxtb	r3, r3
 8103122:	461a      	mov	r2, r3
 8103124:	79fb      	ldrb	r3, [r7, #7]
 8103126:	429a      	cmp	r2, r3
 8103128:	d0cd      	beq.n	81030c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 810312a:	2300      	movs	r3, #0
}
 810312c:	4618      	mov	r0, r3
 810312e:	3710      	adds	r7, #16
 8103130:	46bd      	mov	sp, r7
 8103132:	bd80      	pop	{r7, pc}

08103134 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8103134:	b580      	push	{r7, lr}
 8103136:	b084      	sub	sp, #16
 8103138:	af00      	add	r7, sp, #0
 810313a:	60f8      	str	r0, [r7, #12]
 810313c:	60b9      	str	r1, [r7, #8]
 810313e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8103140:	e02c      	b.n	810319c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103142:	687a      	ldr	r2, [r7, #4]
 8103144:	68b9      	ldr	r1, [r7, #8]
 8103146:	68f8      	ldr	r0, [r7, #12]
 8103148:	f000 f870 	bl	810322c <I2C_IsErrorOccurred>
 810314c:	4603      	mov	r3, r0
 810314e:	2b00      	cmp	r3, #0
 8103150:	d001      	beq.n	8103156 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8103152:	2301      	movs	r3, #1
 8103154:	e02a      	b.n	81031ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103156:	68bb      	ldr	r3, [r7, #8]
 8103158:	f1b3 3fff 	cmp.w	r3, #4294967295
 810315c:	d01e      	beq.n	810319c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810315e:	f7fe fc8d 	bl	8101a7c <HAL_GetTick>
 8103162:	4602      	mov	r2, r0
 8103164:	687b      	ldr	r3, [r7, #4]
 8103166:	1ad3      	subs	r3, r2, r3
 8103168:	68ba      	ldr	r2, [r7, #8]
 810316a:	429a      	cmp	r2, r3
 810316c:	d302      	bcc.n	8103174 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810316e:	68bb      	ldr	r3, [r7, #8]
 8103170:	2b00      	cmp	r3, #0
 8103172:	d113      	bne.n	810319c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103174:	68fb      	ldr	r3, [r7, #12]
 8103176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103178:	f043 0220 	orr.w	r2, r3, #32
 810317c:	68fb      	ldr	r3, [r7, #12]
 810317e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8103180:	68fb      	ldr	r3, [r7, #12]
 8103182:	2220      	movs	r2, #32
 8103184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8103188:	68fb      	ldr	r3, [r7, #12]
 810318a:	2200      	movs	r2, #0
 810318c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8103190:	68fb      	ldr	r3, [r7, #12]
 8103192:	2200      	movs	r2, #0
 8103194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8103198:	2301      	movs	r3, #1
 810319a:	e007      	b.n	81031ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810319c:	68fb      	ldr	r3, [r7, #12]
 810319e:	681b      	ldr	r3, [r3, #0]
 81031a0:	699b      	ldr	r3, [r3, #24]
 81031a2:	f003 0302 	and.w	r3, r3, #2
 81031a6:	2b02      	cmp	r3, #2
 81031a8:	d1cb      	bne.n	8103142 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 81031aa:	2300      	movs	r3, #0
}
 81031ac:	4618      	mov	r0, r3
 81031ae:	3710      	adds	r7, #16
 81031b0:	46bd      	mov	sp, r7
 81031b2:	bd80      	pop	{r7, pc}

081031b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81031b4:	b580      	push	{r7, lr}
 81031b6:	b084      	sub	sp, #16
 81031b8:	af00      	add	r7, sp, #0
 81031ba:	60f8      	str	r0, [r7, #12]
 81031bc:	60b9      	str	r1, [r7, #8]
 81031be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81031c0:	e028      	b.n	8103214 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81031c2:	687a      	ldr	r2, [r7, #4]
 81031c4:	68b9      	ldr	r1, [r7, #8]
 81031c6:	68f8      	ldr	r0, [r7, #12]
 81031c8:	f000 f830 	bl	810322c <I2C_IsErrorOccurred>
 81031cc:	4603      	mov	r3, r0
 81031ce:	2b00      	cmp	r3, #0
 81031d0:	d001      	beq.n	81031d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81031d2:	2301      	movs	r3, #1
 81031d4:	e026      	b.n	8103224 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81031d6:	f7fe fc51 	bl	8101a7c <HAL_GetTick>
 81031da:	4602      	mov	r2, r0
 81031dc:	687b      	ldr	r3, [r7, #4]
 81031de:	1ad3      	subs	r3, r2, r3
 81031e0:	68ba      	ldr	r2, [r7, #8]
 81031e2:	429a      	cmp	r2, r3
 81031e4:	d302      	bcc.n	81031ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 81031e6:	68bb      	ldr	r3, [r7, #8]
 81031e8:	2b00      	cmp	r3, #0
 81031ea:	d113      	bne.n	8103214 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81031ec:	68fb      	ldr	r3, [r7, #12]
 81031ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81031f0:	f043 0220 	orr.w	r2, r3, #32
 81031f4:	68fb      	ldr	r3, [r7, #12]
 81031f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 81031f8:	68fb      	ldr	r3, [r7, #12]
 81031fa:	2220      	movs	r2, #32
 81031fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8103200:	68fb      	ldr	r3, [r7, #12]
 8103202:	2200      	movs	r2, #0
 8103204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8103208:	68fb      	ldr	r3, [r7, #12]
 810320a:	2200      	movs	r2, #0
 810320c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8103210:	2301      	movs	r3, #1
 8103212:	e007      	b.n	8103224 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103214:	68fb      	ldr	r3, [r7, #12]
 8103216:	681b      	ldr	r3, [r3, #0]
 8103218:	699b      	ldr	r3, [r3, #24]
 810321a:	f003 0320 	and.w	r3, r3, #32
 810321e:	2b20      	cmp	r3, #32
 8103220:	d1cf      	bne.n	81031c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8103222:	2300      	movs	r3, #0
}
 8103224:	4618      	mov	r0, r3
 8103226:	3710      	adds	r7, #16
 8103228:	46bd      	mov	sp, r7
 810322a:	bd80      	pop	{r7, pc}

0810322c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 810322c:	b580      	push	{r7, lr}
 810322e:	b08a      	sub	sp, #40	; 0x28
 8103230:	af00      	add	r7, sp, #0
 8103232:	60f8      	str	r0, [r7, #12]
 8103234:	60b9      	str	r1, [r7, #8]
 8103236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8103238:	2300      	movs	r3, #0
 810323a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 810323e:	68fb      	ldr	r3, [r7, #12]
 8103240:	681b      	ldr	r3, [r3, #0]
 8103242:	699b      	ldr	r3, [r3, #24]
 8103244:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8103246:	2300      	movs	r3, #0
 8103248:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 810324a:	687b      	ldr	r3, [r7, #4]
 810324c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 810324e:	69bb      	ldr	r3, [r7, #24]
 8103250:	f003 0310 	and.w	r3, r3, #16
 8103254:	2b00      	cmp	r3, #0
 8103256:	d075      	beq.n	8103344 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8103258:	68fb      	ldr	r3, [r7, #12]
 810325a:	681b      	ldr	r3, [r3, #0]
 810325c:	2210      	movs	r2, #16
 810325e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8103260:	e056      	b.n	8103310 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8103262:	68bb      	ldr	r3, [r7, #8]
 8103264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103268:	d052      	beq.n	8103310 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 810326a:	f7fe fc07 	bl	8101a7c <HAL_GetTick>
 810326e:	4602      	mov	r2, r0
 8103270:	69fb      	ldr	r3, [r7, #28]
 8103272:	1ad3      	subs	r3, r2, r3
 8103274:	68ba      	ldr	r2, [r7, #8]
 8103276:	429a      	cmp	r2, r3
 8103278:	d302      	bcc.n	8103280 <I2C_IsErrorOccurred+0x54>
 810327a:	68bb      	ldr	r3, [r7, #8]
 810327c:	2b00      	cmp	r3, #0
 810327e:	d147      	bne.n	8103310 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8103280:	68fb      	ldr	r3, [r7, #12]
 8103282:	681b      	ldr	r3, [r3, #0]
 8103284:	685b      	ldr	r3, [r3, #4]
 8103286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810328a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 810328c:	68fb      	ldr	r3, [r7, #12]
 810328e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8103292:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8103294:	68fb      	ldr	r3, [r7, #12]
 8103296:	681b      	ldr	r3, [r3, #0]
 8103298:	699b      	ldr	r3, [r3, #24]
 810329a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810329e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81032a2:	d12e      	bne.n	8103302 <I2C_IsErrorOccurred+0xd6>
 81032a4:	697b      	ldr	r3, [r7, #20]
 81032a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81032aa:	d02a      	beq.n	8103302 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 81032ac:	7cfb      	ldrb	r3, [r7, #19]
 81032ae:	2b20      	cmp	r3, #32
 81032b0:	d027      	beq.n	8103302 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 81032b2:	68fb      	ldr	r3, [r7, #12]
 81032b4:	681b      	ldr	r3, [r3, #0]
 81032b6:	685a      	ldr	r2, [r3, #4]
 81032b8:	68fb      	ldr	r3, [r7, #12]
 81032ba:	681b      	ldr	r3, [r3, #0]
 81032bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81032c0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 81032c2:	f7fe fbdb 	bl	8101a7c <HAL_GetTick>
 81032c6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81032c8:	e01b      	b.n	8103302 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 81032ca:	f7fe fbd7 	bl	8101a7c <HAL_GetTick>
 81032ce:	4602      	mov	r2, r0
 81032d0:	69fb      	ldr	r3, [r7, #28]
 81032d2:	1ad3      	subs	r3, r2, r3
 81032d4:	2b19      	cmp	r3, #25
 81032d6:	d914      	bls.n	8103302 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81032d8:	68fb      	ldr	r3, [r7, #12]
 81032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81032dc:	f043 0220 	orr.w	r2, r3, #32
 81032e0:	68fb      	ldr	r3, [r7, #12]
 81032e2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 81032e4:	68fb      	ldr	r3, [r7, #12]
 81032e6:	2220      	movs	r2, #32
 81032e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 81032ec:	68fb      	ldr	r3, [r7, #12]
 81032ee:	2200      	movs	r2, #0
 81032f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 81032f4:	68fb      	ldr	r3, [r7, #12]
 81032f6:	2200      	movs	r2, #0
 81032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 81032fc:	2301      	movs	r3, #1
 81032fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103302:	68fb      	ldr	r3, [r7, #12]
 8103304:	681b      	ldr	r3, [r3, #0]
 8103306:	699b      	ldr	r3, [r3, #24]
 8103308:	f003 0320 	and.w	r3, r3, #32
 810330c:	2b20      	cmp	r3, #32
 810330e:	d1dc      	bne.n	81032ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8103310:	68fb      	ldr	r3, [r7, #12]
 8103312:	681b      	ldr	r3, [r3, #0]
 8103314:	699b      	ldr	r3, [r3, #24]
 8103316:	f003 0320 	and.w	r3, r3, #32
 810331a:	2b20      	cmp	r3, #32
 810331c:	d003      	beq.n	8103326 <I2C_IsErrorOccurred+0xfa>
 810331e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8103322:	2b00      	cmp	r3, #0
 8103324:	d09d      	beq.n	8103262 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8103326:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810332a:	2b00      	cmp	r3, #0
 810332c:	d103      	bne.n	8103336 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810332e:	68fb      	ldr	r3, [r7, #12]
 8103330:	681b      	ldr	r3, [r3, #0]
 8103332:	2220      	movs	r2, #32
 8103334:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8103336:	6a3b      	ldr	r3, [r7, #32]
 8103338:	f043 0304 	orr.w	r3, r3, #4
 810333c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 810333e:	2301      	movs	r3, #1
 8103340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8103344:	68fb      	ldr	r3, [r7, #12]
 8103346:	681b      	ldr	r3, [r3, #0]
 8103348:	699b      	ldr	r3, [r3, #24]
 810334a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 810334c:	69bb      	ldr	r3, [r7, #24]
 810334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103352:	2b00      	cmp	r3, #0
 8103354:	d00b      	beq.n	810336e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8103356:	6a3b      	ldr	r3, [r7, #32]
 8103358:	f043 0301 	orr.w	r3, r3, #1
 810335c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 810335e:	68fb      	ldr	r3, [r7, #12]
 8103360:	681b      	ldr	r3, [r3, #0]
 8103362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8103366:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8103368:	2301      	movs	r3, #1
 810336a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 810336e:	69bb      	ldr	r3, [r7, #24]
 8103370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103374:	2b00      	cmp	r3, #0
 8103376:	d00b      	beq.n	8103390 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8103378:	6a3b      	ldr	r3, [r7, #32]
 810337a:	f043 0308 	orr.w	r3, r3, #8
 810337e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8103380:	68fb      	ldr	r3, [r7, #12]
 8103382:	681b      	ldr	r3, [r3, #0]
 8103384:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8103388:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810338a:	2301      	movs	r3, #1
 810338c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8103390:	69bb      	ldr	r3, [r7, #24]
 8103392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103396:	2b00      	cmp	r3, #0
 8103398:	d00b      	beq.n	81033b2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 810339a:	6a3b      	ldr	r3, [r7, #32]
 810339c:	f043 0302 	orr.w	r3, r3, #2
 81033a0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 81033a2:	68fb      	ldr	r3, [r7, #12]
 81033a4:	681b      	ldr	r3, [r3, #0]
 81033a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 81033aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81033ac:	2301      	movs	r3, #1
 81033ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 81033b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81033b6:	2b00      	cmp	r3, #0
 81033b8:	d01c      	beq.n	81033f4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 81033ba:	68f8      	ldr	r0, [r7, #12]
 81033bc:	f7ff fe56 	bl	810306c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81033c0:	68fb      	ldr	r3, [r7, #12]
 81033c2:	681b      	ldr	r3, [r3, #0]
 81033c4:	6859      	ldr	r1, [r3, #4]
 81033c6:	68fb      	ldr	r3, [r7, #12]
 81033c8:	681a      	ldr	r2, [r3, #0]
 81033ca:	4b0d      	ldr	r3, [pc, #52]	; (8103400 <I2C_IsErrorOccurred+0x1d4>)
 81033cc:	400b      	ands	r3, r1
 81033ce:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 81033d0:	68fb      	ldr	r3, [r7, #12]
 81033d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81033d4:	6a3b      	ldr	r3, [r7, #32]
 81033d6:	431a      	orrs	r2, r3
 81033d8:	68fb      	ldr	r3, [r7, #12]
 81033da:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 81033dc:	68fb      	ldr	r3, [r7, #12]
 81033de:	2220      	movs	r2, #32
 81033e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81033e4:	68fb      	ldr	r3, [r7, #12]
 81033e6:	2200      	movs	r2, #0
 81033e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81033ec:	68fb      	ldr	r3, [r7, #12]
 81033ee:	2200      	movs	r2, #0
 81033f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 81033f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 81033f8:	4618      	mov	r0, r3
 81033fa:	3728      	adds	r7, #40	; 0x28
 81033fc:	46bd      	mov	sp, r7
 81033fe:	bd80      	pop	{r7, pc}
 8103400:	fe00e800 	.word	0xfe00e800

08103404 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8103404:	b480      	push	{r7}
 8103406:	b087      	sub	sp, #28
 8103408:	af00      	add	r7, sp, #0
 810340a:	60f8      	str	r0, [r7, #12]
 810340c:	607b      	str	r3, [r7, #4]
 810340e:	460b      	mov	r3, r1
 8103410:	817b      	strh	r3, [r7, #10]
 8103412:	4613      	mov	r3, r2
 8103414:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8103416:	897b      	ldrh	r3, [r7, #10]
 8103418:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810341c:	7a7b      	ldrb	r3, [r7, #9]
 810341e:	041b      	lsls	r3, r3, #16
 8103420:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8103424:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8103426:	687b      	ldr	r3, [r7, #4]
 8103428:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810342a:	6a3b      	ldr	r3, [r7, #32]
 810342c:	4313      	orrs	r3, r2
 810342e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8103432:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8103434:	68fb      	ldr	r3, [r7, #12]
 8103436:	681b      	ldr	r3, [r3, #0]
 8103438:	685a      	ldr	r2, [r3, #4]
 810343a:	6a3b      	ldr	r3, [r7, #32]
 810343c:	0d5b      	lsrs	r3, r3, #21
 810343e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8103442:	4b08      	ldr	r3, [pc, #32]	; (8103464 <I2C_TransferConfig+0x60>)
 8103444:	430b      	orrs	r3, r1
 8103446:	43db      	mvns	r3, r3
 8103448:	ea02 0103 	and.w	r1, r2, r3
 810344c:	68fb      	ldr	r3, [r7, #12]
 810344e:	681b      	ldr	r3, [r3, #0]
 8103450:	697a      	ldr	r2, [r7, #20]
 8103452:	430a      	orrs	r2, r1
 8103454:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8103456:	bf00      	nop
 8103458:	371c      	adds	r7, #28
 810345a:	46bd      	mov	sp, r7
 810345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103460:	4770      	bx	lr
 8103462:	bf00      	nop
 8103464:	03ff63ff 	.word	0x03ff63ff

08103468 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8103468:	b480      	push	{r7}
 810346a:	b083      	sub	sp, #12
 810346c:	af00      	add	r7, sp, #0
 810346e:	6078      	str	r0, [r7, #4]
 8103470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103472:	687b      	ldr	r3, [r7, #4]
 8103474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103478:	b2db      	uxtb	r3, r3
 810347a:	2b20      	cmp	r3, #32
 810347c:	d138      	bne.n	81034f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810347e:	687b      	ldr	r3, [r7, #4]
 8103480:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103484:	2b01      	cmp	r3, #1
 8103486:	d101      	bne.n	810348c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8103488:	2302      	movs	r3, #2
 810348a:	e032      	b.n	81034f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 810348c:	687b      	ldr	r3, [r7, #4]
 810348e:	2201      	movs	r2, #1
 8103490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8103494:	687b      	ldr	r3, [r7, #4]
 8103496:	2224      	movs	r2, #36	; 0x24
 8103498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810349c:	687b      	ldr	r3, [r7, #4]
 810349e:	681b      	ldr	r3, [r3, #0]
 81034a0:	681a      	ldr	r2, [r3, #0]
 81034a2:	687b      	ldr	r3, [r7, #4]
 81034a4:	681b      	ldr	r3, [r3, #0]
 81034a6:	f022 0201 	bic.w	r2, r2, #1
 81034aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81034ac:	687b      	ldr	r3, [r7, #4]
 81034ae:	681b      	ldr	r3, [r3, #0]
 81034b0:	681a      	ldr	r2, [r3, #0]
 81034b2:	687b      	ldr	r3, [r7, #4]
 81034b4:	681b      	ldr	r3, [r3, #0]
 81034b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81034ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81034bc:	687b      	ldr	r3, [r7, #4]
 81034be:	681b      	ldr	r3, [r3, #0]
 81034c0:	6819      	ldr	r1, [r3, #0]
 81034c2:	687b      	ldr	r3, [r7, #4]
 81034c4:	681b      	ldr	r3, [r3, #0]
 81034c6:	683a      	ldr	r2, [r7, #0]
 81034c8:	430a      	orrs	r2, r1
 81034ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81034cc:	687b      	ldr	r3, [r7, #4]
 81034ce:	681b      	ldr	r3, [r3, #0]
 81034d0:	681a      	ldr	r2, [r3, #0]
 81034d2:	687b      	ldr	r3, [r7, #4]
 81034d4:	681b      	ldr	r3, [r3, #0]
 81034d6:	f042 0201 	orr.w	r2, r2, #1
 81034da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81034dc:	687b      	ldr	r3, [r7, #4]
 81034de:	2220      	movs	r2, #32
 81034e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81034e4:	687b      	ldr	r3, [r7, #4]
 81034e6:	2200      	movs	r2, #0
 81034e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81034ec:	2300      	movs	r3, #0
 81034ee:	e000      	b.n	81034f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81034f0:	2302      	movs	r3, #2
  }
}
 81034f2:	4618      	mov	r0, r3
 81034f4:	370c      	adds	r7, #12
 81034f6:	46bd      	mov	sp, r7
 81034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034fc:	4770      	bx	lr

081034fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81034fe:	b480      	push	{r7}
 8103500:	b085      	sub	sp, #20
 8103502:	af00      	add	r7, sp, #0
 8103504:	6078      	str	r0, [r7, #4]
 8103506:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103508:	687b      	ldr	r3, [r7, #4]
 810350a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810350e:	b2db      	uxtb	r3, r3
 8103510:	2b20      	cmp	r3, #32
 8103512:	d139      	bne.n	8103588 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103514:	687b      	ldr	r3, [r7, #4]
 8103516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810351a:	2b01      	cmp	r3, #1
 810351c:	d101      	bne.n	8103522 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810351e:	2302      	movs	r3, #2
 8103520:	e033      	b.n	810358a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8103522:	687b      	ldr	r3, [r7, #4]
 8103524:	2201      	movs	r2, #1
 8103526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810352a:	687b      	ldr	r3, [r7, #4]
 810352c:	2224      	movs	r2, #36	; 0x24
 810352e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8103532:	687b      	ldr	r3, [r7, #4]
 8103534:	681b      	ldr	r3, [r3, #0]
 8103536:	681a      	ldr	r2, [r3, #0]
 8103538:	687b      	ldr	r3, [r7, #4]
 810353a:	681b      	ldr	r3, [r3, #0]
 810353c:	f022 0201 	bic.w	r2, r2, #1
 8103540:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8103542:	687b      	ldr	r3, [r7, #4]
 8103544:	681b      	ldr	r3, [r3, #0]
 8103546:	681b      	ldr	r3, [r3, #0]
 8103548:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 810354a:	68fb      	ldr	r3, [r7, #12]
 810354c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8103550:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8103552:	683b      	ldr	r3, [r7, #0]
 8103554:	021b      	lsls	r3, r3, #8
 8103556:	68fa      	ldr	r2, [r7, #12]
 8103558:	4313      	orrs	r3, r2
 810355a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 810355c:	687b      	ldr	r3, [r7, #4]
 810355e:	681b      	ldr	r3, [r3, #0]
 8103560:	68fa      	ldr	r2, [r7, #12]
 8103562:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8103564:	687b      	ldr	r3, [r7, #4]
 8103566:	681b      	ldr	r3, [r3, #0]
 8103568:	681a      	ldr	r2, [r3, #0]
 810356a:	687b      	ldr	r3, [r7, #4]
 810356c:	681b      	ldr	r3, [r3, #0]
 810356e:	f042 0201 	orr.w	r2, r2, #1
 8103572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8103574:	687b      	ldr	r3, [r7, #4]
 8103576:	2220      	movs	r2, #32
 8103578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810357c:	687b      	ldr	r3, [r7, #4]
 810357e:	2200      	movs	r2, #0
 8103580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103584:	2300      	movs	r3, #0
 8103586:	e000      	b.n	810358a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8103588:	2302      	movs	r3, #2
  }
}
 810358a:	4618      	mov	r0, r3
 810358c:	3714      	adds	r7, #20
 810358e:	46bd      	mov	sp, r7
 8103590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103594:	4770      	bx	lr
	...

08103598 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103598:	b580      	push	{r7, lr}
 810359a:	b084      	sub	sp, #16
 810359c:	af00      	add	r7, sp, #0
 810359e:	60f8      	str	r0, [r7, #12]
 81035a0:	460b      	mov	r3, r1
 81035a2:	607a      	str	r2, [r7, #4]
 81035a4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81035a6:	4b37      	ldr	r3, [pc, #220]	; (8103684 <HAL_PWREx_EnterSTOPMode+0xec>)
 81035a8:	681b      	ldr	r3, [r3, #0]
 81035aa:	f023 0201 	bic.w	r2, r3, #1
 81035ae:	4935      	ldr	r1, [pc, #212]	; (8103684 <HAL_PWREx_EnterSTOPMode+0xec>)
 81035b0:	68fb      	ldr	r3, [r7, #12]
 81035b2:	4313      	orrs	r3, r2
 81035b4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81035b6:	687b      	ldr	r3, [r7, #4]
 81035b8:	2b00      	cmp	r3, #0
 81035ba:	d123      	bne.n	8103604 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81035bc:	f7fe fb9e 	bl	8101cfc <HAL_GetCurrentCPUID>
 81035c0:	4603      	mov	r3, r0
 81035c2:	2b03      	cmp	r3, #3
 81035c4:	d158      	bne.n	8103678 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81035c6:	4b2f      	ldr	r3, [pc, #188]	; (8103684 <HAL_PWREx_EnterSTOPMode+0xec>)
 81035c8:	691b      	ldr	r3, [r3, #16]
 81035ca:	4a2e      	ldr	r2, [pc, #184]	; (8103684 <HAL_PWREx_EnterSTOPMode+0xec>)
 81035cc:	f023 0301 	bic.w	r3, r3, #1
 81035d0:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81035d2:	4b2d      	ldr	r3, [pc, #180]	; (8103688 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035d4:	691b      	ldr	r3, [r3, #16]
 81035d6:	4a2c      	ldr	r2, [pc, #176]	; (8103688 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035d8:	f043 0304 	orr.w	r3, r3, #4
 81035dc:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81035de:	f3bf 8f4f 	dsb	sy
}
 81035e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81035e4:	f3bf 8f6f 	isb	sy
}
 81035e8:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81035ea:	7afb      	ldrb	r3, [r7, #11]
 81035ec:	2b01      	cmp	r3, #1
 81035ee:	d101      	bne.n	81035f4 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81035f0:	bf30      	wfi
 81035f2:	e000      	b.n	81035f6 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81035f4:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81035f6:	4b24      	ldr	r3, [pc, #144]	; (8103688 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035f8:	691b      	ldr	r3, [r3, #16]
 81035fa:	4a23      	ldr	r2, [pc, #140]	; (8103688 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035fc:	f023 0304 	bic.w	r3, r3, #4
 8103600:	6113      	str	r3, [r2, #16]
 8103602:	e03c      	b.n	810367e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103604:	687b      	ldr	r3, [r7, #4]
 8103606:	2b01      	cmp	r3, #1
 8103608:	d123      	bne.n	8103652 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810360a:	f7fe fb77 	bl	8101cfc <HAL_GetCurrentCPUID>
 810360e:	4603      	mov	r3, r0
 8103610:	2b01      	cmp	r3, #1
 8103612:	d133      	bne.n	810367c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103614:	4b1b      	ldr	r3, [pc, #108]	; (8103684 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103616:	695b      	ldr	r3, [r3, #20]
 8103618:	4a1a      	ldr	r2, [pc, #104]	; (8103684 <HAL_PWREx_EnterSTOPMode+0xec>)
 810361a:	f023 0302 	bic.w	r3, r3, #2
 810361e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103620:	4b19      	ldr	r3, [pc, #100]	; (8103688 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103622:	691b      	ldr	r3, [r3, #16]
 8103624:	4a18      	ldr	r2, [pc, #96]	; (8103688 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103626:	f043 0304 	orr.w	r3, r3, #4
 810362a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810362c:	f3bf 8f4f 	dsb	sy
}
 8103630:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103632:	f3bf 8f6f 	isb	sy
}
 8103636:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103638:	7afb      	ldrb	r3, [r7, #11]
 810363a:	2b01      	cmp	r3, #1
 810363c:	d101      	bne.n	8103642 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810363e:	bf30      	wfi
 8103640:	e000      	b.n	8103644 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103642:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103644:	4b10      	ldr	r3, [pc, #64]	; (8103688 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103646:	691b      	ldr	r3, [r3, #16]
 8103648:	4a0f      	ldr	r2, [pc, #60]	; (8103688 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810364a:	f023 0304 	bic.w	r3, r3, #4
 810364e:	6113      	str	r3, [r2, #16]
 8103650:	e015      	b.n	810367e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103652:	f7fe fb53 	bl	8101cfc <HAL_GetCurrentCPUID>
 8103656:	4603      	mov	r3, r0
 8103658:	2b03      	cmp	r3, #3
 810365a:	d106      	bne.n	810366a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810365c:	4b09      	ldr	r3, [pc, #36]	; (8103684 <HAL_PWREx_EnterSTOPMode+0xec>)
 810365e:	691b      	ldr	r3, [r3, #16]
 8103660:	4a08      	ldr	r2, [pc, #32]	; (8103684 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103662:	f023 0304 	bic.w	r3, r3, #4
 8103666:	6113      	str	r3, [r2, #16]
 8103668:	e009      	b.n	810367e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810366a:	4b06      	ldr	r3, [pc, #24]	; (8103684 <HAL_PWREx_EnterSTOPMode+0xec>)
 810366c:	695b      	ldr	r3, [r3, #20]
 810366e:	4a05      	ldr	r2, [pc, #20]	; (8103684 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103670:	f023 0304 	bic.w	r3, r3, #4
 8103674:	6153      	str	r3, [r2, #20]
 8103676:	e002      	b.n	810367e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103678:	bf00      	nop
 810367a:	e000      	b.n	810367e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810367c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810367e:	3710      	adds	r7, #16
 8103680:	46bd      	mov	sp, r7
 8103682:	bd80      	pop	{r7, pc}
 8103684:	58024800 	.word	0x58024800
 8103688:	e000ed00 	.word	0xe000ed00

0810368c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810368c:	b580      	push	{r7, lr}
 810368e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103690:	f7fe fb34 	bl	8101cfc <HAL_GetCurrentCPUID>
 8103694:	4603      	mov	r3, r0
 8103696:	2b03      	cmp	r3, #3
 8103698:	d101      	bne.n	810369e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810369a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810369c:	e001      	b.n	81036a2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810369e:	bf40      	sev
    __WFE ();
 81036a0:	bf20      	wfe
}
 81036a2:	bf00      	nop
 81036a4:	bd80      	pop	{r7, pc}
	...

081036a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81036a8:	b480      	push	{r7}
 81036aa:	b089      	sub	sp, #36	; 0x24
 81036ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81036ae:	4bb3      	ldr	r3, [pc, #716]	; (810397c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036b0:	691b      	ldr	r3, [r3, #16]
 81036b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81036b6:	2b18      	cmp	r3, #24
 81036b8:	f200 8155 	bhi.w	8103966 <HAL_RCC_GetSysClockFreq+0x2be>
 81036bc:	a201      	add	r2, pc, #4	; (adr r2, 81036c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 81036be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81036c2:	bf00      	nop
 81036c4:	08103729 	.word	0x08103729
 81036c8:	08103967 	.word	0x08103967
 81036cc:	08103967 	.word	0x08103967
 81036d0:	08103967 	.word	0x08103967
 81036d4:	08103967 	.word	0x08103967
 81036d8:	08103967 	.word	0x08103967
 81036dc:	08103967 	.word	0x08103967
 81036e0:	08103967 	.word	0x08103967
 81036e4:	0810374f 	.word	0x0810374f
 81036e8:	08103967 	.word	0x08103967
 81036ec:	08103967 	.word	0x08103967
 81036f0:	08103967 	.word	0x08103967
 81036f4:	08103967 	.word	0x08103967
 81036f8:	08103967 	.word	0x08103967
 81036fc:	08103967 	.word	0x08103967
 8103700:	08103967 	.word	0x08103967
 8103704:	08103755 	.word	0x08103755
 8103708:	08103967 	.word	0x08103967
 810370c:	08103967 	.word	0x08103967
 8103710:	08103967 	.word	0x08103967
 8103714:	08103967 	.word	0x08103967
 8103718:	08103967 	.word	0x08103967
 810371c:	08103967 	.word	0x08103967
 8103720:	08103967 	.word	0x08103967
 8103724:	0810375b 	.word	0x0810375b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103728:	4b94      	ldr	r3, [pc, #592]	; (810397c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810372a:	681b      	ldr	r3, [r3, #0]
 810372c:	f003 0320 	and.w	r3, r3, #32
 8103730:	2b00      	cmp	r3, #0
 8103732:	d009      	beq.n	8103748 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103734:	4b91      	ldr	r3, [pc, #580]	; (810397c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103736:	681b      	ldr	r3, [r3, #0]
 8103738:	08db      	lsrs	r3, r3, #3
 810373a:	f003 0303 	and.w	r3, r3, #3
 810373e:	4a90      	ldr	r2, [pc, #576]	; (8103980 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103740:	fa22 f303 	lsr.w	r3, r2, r3
 8103744:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8103746:	e111      	b.n	810396c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103748:	4b8d      	ldr	r3, [pc, #564]	; (8103980 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810374a:	61bb      	str	r3, [r7, #24]
    break;
 810374c:	e10e      	b.n	810396c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810374e:	4b8d      	ldr	r3, [pc, #564]	; (8103984 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103750:	61bb      	str	r3, [r7, #24]
    break;
 8103752:	e10b      	b.n	810396c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8103754:	4b8c      	ldr	r3, [pc, #560]	; (8103988 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103756:	61bb      	str	r3, [r7, #24]
    break;
 8103758:	e108      	b.n	810396c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810375a:	4b88      	ldr	r3, [pc, #544]	; (810397c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810375c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810375e:	f003 0303 	and.w	r3, r3, #3
 8103762:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8103764:	4b85      	ldr	r3, [pc, #532]	; (810397c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103768:	091b      	lsrs	r3, r3, #4
 810376a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810376e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103770:	4b82      	ldr	r3, [pc, #520]	; (810397c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103774:	f003 0301 	and.w	r3, r3, #1
 8103778:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810377a:	4b80      	ldr	r3, [pc, #512]	; (810397c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810377c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810377e:	08db      	lsrs	r3, r3, #3
 8103780:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103784:	68fa      	ldr	r2, [r7, #12]
 8103786:	fb02 f303 	mul.w	r3, r2, r3
 810378a:	ee07 3a90 	vmov	s15, r3
 810378e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103792:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8103796:	693b      	ldr	r3, [r7, #16]
 8103798:	2b00      	cmp	r3, #0
 810379a:	f000 80e1 	beq.w	8103960 <HAL_RCC_GetSysClockFreq+0x2b8>
 810379e:	697b      	ldr	r3, [r7, #20]
 81037a0:	2b02      	cmp	r3, #2
 81037a2:	f000 8083 	beq.w	81038ac <HAL_RCC_GetSysClockFreq+0x204>
 81037a6:	697b      	ldr	r3, [r7, #20]
 81037a8:	2b02      	cmp	r3, #2
 81037aa:	f200 80a1 	bhi.w	81038f0 <HAL_RCC_GetSysClockFreq+0x248>
 81037ae:	697b      	ldr	r3, [r7, #20]
 81037b0:	2b00      	cmp	r3, #0
 81037b2:	d003      	beq.n	81037bc <HAL_RCC_GetSysClockFreq+0x114>
 81037b4:	697b      	ldr	r3, [r7, #20]
 81037b6:	2b01      	cmp	r3, #1
 81037b8:	d056      	beq.n	8103868 <HAL_RCC_GetSysClockFreq+0x1c0>
 81037ba:	e099      	b.n	81038f0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81037bc:	4b6f      	ldr	r3, [pc, #444]	; (810397c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037be:	681b      	ldr	r3, [r3, #0]
 81037c0:	f003 0320 	and.w	r3, r3, #32
 81037c4:	2b00      	cmp	r3, #0
 81037c6:	d02d      	beq.n	8103824 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81037c8:	4b6c      	ldr	r3, [pc, #432]	; (810397c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037ca:	681b      	ldr	r3, [r3, #0]
 81037cc:	08db      	lsrs	r3, r3, #3
 81037ce:	f003 0303 	and.w	r3, r3, #3
 81037d2:	4a6b      	ldr	r2, [pc, #428]	; (8103980 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81037d4:	fa22 f303 	lsr.w	r3, r2, r3
 81037d8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81037da:	687b      	ldr	r3, [r7, #4]
 81037dc:	ee07 3a90 	vmov	s15, r3
 81037e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81037e4:	693b      	ldr	r3, [r7, #16]
 81037e6:	ee07 3a90 	vmov	s15, r3
 81037ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81037ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81037f2:	4b62      	ldr	r3, [pc, #392]	; (810397c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81037f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81037fa:	ee07 3a90 	vmov	s15, r3
 81037fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103802:	ed97 6a02 	vldr	s12, [r7, #8]
 8103806:	eddf 5a61 	vldr	s11, [pc, #388]	; 810398c <HAL_RCC_GetSysClockFreq+0x2e4>
 810380a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810380e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810381a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810381e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8103822:	e087      	b.n	8103934 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103824:	693b      	ldr	r3, [r7, #16]
 8103826:	ee07 3a90 	vmov	s15, r3
 810382a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810382e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103990 <HAL_RCC_GetSysClockFreq+0x2e8>
 8103832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103836:	4b51      	ldr	r3, [pc, #324]	; (810397c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810383a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810383e:	ee07 3a90 	vmov	s15, r3
 8103842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103846:	ed97 6a02 	vldr	s12, [r7, #8]
 810384a:	eddf 5a50 	vldr	s11, [pc, #320]	; 810398c <HAL_RCC_GetSysClockFreq+0x2e4>
 810384e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810385a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810385e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103862:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103866:	e065      	b.n	8103934 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103868:	693b      	ldr	r3, [r7, #16]
 810386a:	ee07 3a90 	vmov	s15, r3
 810386e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103872:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103994 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810387a:	4b40      	ldr	r3, [pc, #256]	; (810397c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810387e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103882:	ee07 3a90 	vmov	s15, r3
 8103886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810388a:	ed97 6a02 	vldr	s12, [r7, #8]
 810388e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810398c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810389a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810389e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81038a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81038a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81038aa:	e043      	b.n	8103934 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81038ac:	693b      	ldr	r3, [r7, #16]
 81038ae:	ee07 3a90 	vmov	s15, r3
 81038b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81038b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103998 <HAL_RCC_GetSysClockFreq+0x2f0>
 81038ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81038be:	4b2f      	ldr	r3, [pc, #188]	; (810397c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81038c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81038c6:	ee07 3a90 	vmov	s15, r3
 81038ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81038ce:	ed97 6a02 	vldr	s12, [r7, #8]
 81038d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810398c <HAL_RCC_GetSysClockFreq+0x2e4>
 81038d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81038da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81038de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81038e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81038e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81038ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81038ee:	e021      	b.n	8103934 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81038f0:	693b      	ldr	r3, [r7, #16]
 81038f2:	ee07 3a90 	vmov	s15, r3
 81038f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81038fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103994 <HAL_RCC_GetSysClockFreq+0x2ec>
 81038fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103902:	4b1e      	ldr	r3, [pc, #120]	; (810397c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810390a:	ee07 3a90 	vmov	s15, r3
 810390e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103912:	ed97 6a02 	vldr	s12, [r7, #8]
 8103916:	eddf 5a1d 	vldr	s11, [pc, #116]	; 810398c <HAL_RCC_GetSysClockFreq+0x2e4>
 810391a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810391e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810392a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810392e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103932:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8103934:	4b11      	ldr	r3, [pc, #68]	; (810397c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103938:	0a5b      	lsrs	r3, r3, #9
 810393a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810393e:	3301      	adds	r3, #1
 8103940:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8103942:	683b      	ldr	r3, [r7, #0]
 8103944:	ee07 3a90 	vmov	s15, r3
 8103948:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810394c:	edd7 6a07 	vldr	s13, [r7, #28]
 8103950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103958:	ee17 3a90 	vmov	r3, s15
 810395c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810395e:	e005      	b.n	810396c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8103960:	2300      	movs	r3, #0
 8103962:	61bb      	str	r3, [r7, #24]
    break;
 8103964:	e002      	b.n	810396c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8103966:	4b07      	ldr	r3, [pc, #28]	; (8103984 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103968:	61bb      	str	r3, [r7, #24]
    break;
 810396a:	bf00      	nop
  }

  return sysclockfreq;
 810396c:	69bb      	ldr	r3, [r7, #24]
}
 810396e:	4618      	mov	r0, r3
 8103970:	3724      	adds	r7, #36	; 0x24
 8103972:	46bd      	mov	sp, r7
 8103974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103978:	4770      	bx	lr
 810397a:	bf00      	nop
 810397c:	58024400 	.word	0x58024400
 8103980:	03d09000 	.word	0x03d09000
 8103984:	003d0900 	.word	0x003d0900
 8103988:	007a1200 	.word	0x007a1200
 810398c:	46000000 	.word	0x46000000
 8103990:	4c742400 	.word	0x4c742400
 8103994:	4a742400 	.word	0x4a742400
 8103998:	4af42400 	.word	0x4af42400

0810399c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810399c:	b580      	push	{r7, lr}
 810399e:	b082      	sub	sp, #8
 81039a0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81039a2:	f7ff fe81 	bl	81036a8 <HAL_RCC_GetSysClockFreq>
 81039a6:	4602      	mov	r2, r0
 81039a8:	4b11      	ldr	r3, [pc, #68]	; (81039f0 <HAL_RCC_GetHCLKFreq+0x54>)
 81039aa:	699b      	ldr	r3, [r3, #24]
 81039ac:	0a1b      	lsrs	r3, r3, #8
 81039ae:	f003 030f 	and.w	r3, r3, #15
 81039b2:	4910      	ldr	r1, [pc, #64]	; (81039f4 <HAL_RCC_GetHCLKFreq+0x58>)
 81039b4:	5ccb      	ldrb	r3, [r1, r3]
 81039b6:	f003 031f 	and.w	r3, r3, #31
 81039ba:	fa22 f303 	lsr.w	r3, r2, r3
 81039be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81039c0:	4b0b      	ldr	r3, [pc, #44]	; (81039f0 <HAL_RCC_GetHCLKFreq+0x54>)
 81039c2:	699b      	ldr	r3, [r3, #24]
 81039c4:	f003 030f 	and.w	r3, r3, #15
 81039c8:	4a0a      	ldr	r2, [pc, #40]	; (81039f4 <HAL_RCC_GetHCLKFreq+0x58>)
 81039ca:	5cd3      	ldrb	r3, [r2, r3]
 81039cc:	f003 031f 	and.w	r3, r3, #31
 81039d0:	687a      	ldr	r2, [r7, #4]
 81039d2:	fa22 f303 	lsr.w	r3, r2, r3
 81039d6:	4a08      	ldr	r2, [pc, #32]	; (81039f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 81039d8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81039da:	4b07      	ldr	r3, [pc, #28]	; (81039f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 81039dc:	681b      	ldr	r3, [r3, #0]
 81039de:	4a07      	ldr	r2, [pc, #28]	; (81039fc <HAL_RCC_GetHCLKFreq+0x60>)
 81039e0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81039e2:	4b05      	ldr	r3, [pc, #20]	; (81039f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 81039e4:	681b      	ldr	r3, [r3, #0]
}
 81039e6:	4618      	mov	r0, r3
 81039e8:	3708      	adds	r7, #8
 81039ea:	46bd      	mov	sp, r7
 81039ec:	bd80      	pop	{r7, pc}
 81039ee:	bf00      	nop
 81039f0:	58024400 	.word	0x58024400
 81039f4:	081074c4 	.word	0x081074c4
 81039f8:	10000004 	.word	0x10000004
 81039fc:	10000000 	.word	0x10000000

08103a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8103a00:	b580      	push	{r7, lr}
 8103a02:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8103a04:	f7ff ffca 	bl	810399c <HAL_RCC_GetHCLKFreq>
 8103a08:	4602      	mov	r2, r0
 8103a0a:	4b06      	ldr	r3, [pc, #24]	; (8103a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8103a0c:	69db      	ldr	r3, [r3, #28]
 8103a0e:	091b      	lsrs	r3, r3, #4
 8103a10:	f003 0307 	and.w	r3, r3, #7
 8103a14:	4904      	ldr	r1, [pc, #16]	; (8103a28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8103a16:	5ccb      	ldrb	r3, [r1, r3]
 8103a18:	f003 031f 	and.w	r3, r3, #31
 8103a1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8103a20:	4618      	mov	r0, r3
 8103a22:	bd80      	pop	{r7, pc}
 8103a24:	58024400 	.word	0x58024400
 8103a28:	081074c4 	.word	0x081074c4

08103a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8103a2c:	b580      	push	{r7, lr}
 8103a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8103a30:	f7ff ffb4 	bl	810399c <HAL_RCC_GetHCLKFreq>
 8103a34:	4602      	mov	r2, r0
 8103a36:	4b06      	ldr	r3, [pc, #24]	; (8103a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8103a38:	69db      	ldr	r3, [r3, #28]
 8103a3a:	0a1b      	lsrs	r3, r3, #8
 8103a3c:	f003 0307 	and.w	r3, r3, #7
 8103a40:	4904      	ldr	r1, [pc, #16]	; (8103a54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8103a42:	5ccb      	ldrb	r3, [r1, r3]
 8103a44:	f003 031f 	and.w	r3, r3, #31
 8103a48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8103a4c:	4618      	mov	r0, r3
 8103a4e:	bd80      	pop	{r7, pc}
 8103a50:	58024400 	.word	0x58024400
 8103a54:	081074c4 	.word	0x081074c4

08103a58 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103a58:	b580      	push	{r7, lr}
 8103a5a:	b086      	sub	sp, #24
 8103a5c:	af00      	add	r7, sp, #0
 8103a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103a60:	2300      	movs	r3, #0
 8103a62:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8103a64:	2300      	movs	r3, #0
 8103a66:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103a68:	687b      	ldr	r3, [r7, #4]
 8103a6a:	681b      	ldr	r3, [r3, #0]
 8103a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103a70:	2b00      	cmp	r3, #0
 8103a72:	d03f      	beq.n	8103af4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8103a74:	687b      	ldr	r3, [r7, #4]
 8103a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103a78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103a7c:	d02a      	beq.n	8103ad4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8103a7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103a82:	d824      	bhi.n	8103ace <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103a84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103a88:	d018      	beq.n	8103abc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103a8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103a8e:	d81e      	bhi.n	8103ace <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103a90:	2b00      	cmp	r3, #0
 8103a92:	d003      	beq.n	8103a9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8103a94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103a98:	d007      	beq.n	8103aaa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8103a9a:	e018      	b.n	8103ace <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a9c:	4ba3      	ldr	r3, [pc, #652]	; (8103d2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103aa0:	4aa2      	ldr	r2, [pc, #648]	; (8103d2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103aa8:	e015      	b.n	8103ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103aaa:	687b      	ldr	r3, [r7, #4]
 8103aac:	3304      	adds	r3, #4
 8103aae:	2102      	movs	r1, #2
 8103ab0:	4618      	mov	r0, r3
 8103ab2:	f001 f9d5 	bl	8104e60 <RCCEx_PLL2_Config>
 8103ab6:	4603      	mov	r3, r0
 8103ab8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103aba:	e00c      	b.n	8103ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103abc:	687b      	ldr	r3, [r7, #4]
 8103abe:	3324      	adds	r3, #36	; 0x24
 8103ac0:	2102      	movs	r1, #2
 8103ac2:	4618      	mov	r0, r3
 8103ac4:	f001 fa7e 	bl	8104fc4 <RCCEx_PLL3_Config>
 8103ac8:	4603      	mov	r3, r0
 8103aca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103acc:	e003      	b.n	8103ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103ace:	2301      	movs	r3, #1
 8103ad0:	75fb      	strb	r3, [r7, #23]
      break;
 8103ad2:	e000      	b.n	8103ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8103ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103ad6:	7dfb      	ldrb	r3, [r7, #23]
 8103ad8:	2b00      	cmp	r3, #0
 8103ada:	d109      	bne.n	8103af0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103adc:	4b93      	ldr	r3, [pc, #588]	; (8103d2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103ae0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103ae4:	687b      	ldr	r3, [r7, #4]
 8103ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103ae8:	4990      	ldr	r1, [pc, #576]	; (8103d2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103aea:	4313      	orrs	r3, r2
 8103aec:	650b      	str	r3, [r1, #80]	; 0x50
 8103aee:	e001      	b.n	8103af4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103af0:	7dfb      	ldrb	r3, [r7, #23]
 8103af2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	681b      	ldr	r3, [r3, #0]
 8103af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103afc:	2b00      	cmp	r3, #0
 8103afe:	d03d      	beq.n	8103b7c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8103b00:	687b      	ldr	r3, [r7, #4]
 8103b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b04:	2b04      	cmp	r3, #4
 8103b06:	d826      	bhi.n	8103b56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8103b08:	a201      	add	r2, pc, #4	; (adr r2, 8103b10 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8103b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b0e:	bf00      	nop
 8103b10:	08103b25 	.word	0x08103b25
 8103b14:	08103b33 	.word	0x08103b33
 8103b18:	08103b45 	.word	0x08103b45
 8103b1c:	08103b5d 	.word	0x08103b5d
 8103b20:	08103b5d 	.word	0x08103b5d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b24:	4b81      	ldr	r3, [pc, #516]	; (8103d2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b28:	4a80      	ldr	r2, [pc, #512]	; (8103d2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103b30:	e015      	b.n	8103b5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103b32:	687b      	ldr	r3, [r7, #4]
 8103b34:	3304      	adds	r3, #4
 8103b36:	2100      	movs	r1, #0
 8103b38:	4618      	mov	r0, r3
 8103b3a:	f001 f991 	bl	8104e60 <RCCEx_PLL2_Config>
 8103b3e:	4603      	mov	r3, r0
 8103b40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103b42:	e00c      	b.n	8103b5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103b44:	687b      	ldr	r3, [r7, #4]
 8103b46:	3324      	adds	r3, #36	; 0x24
 8103b48:	2100      	movs	r1, #0
 8103b4a:	4618      	mov	r0, r3
 8103b4c:	f001 fa3a 	bl	8104fc4 <RCCEx_PLL3_Config>
 8103b50:	4603      	mov	r3, r0
 8103b52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103b54:	e003      	b.n	8103b5e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103b56:	2301      	movs	r3, #1
 8103b58:	75fb      	strb	r3, [r7, #23]
      break;
 8103b5a:	e000      	b.n	8103b5e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8103b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103b5e:	7dfb      	ldrb	r3, [r7, #23]
 8103b60:	2b00      	cmp	r3, #0
 8103b62:	d109      	bne.n	8103b78 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103b64:	4b71      	ldr	r3, [pc, #452]	; (8103d2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b68:	f023 0207 	bic.w	r2, r3, #7
 8103b6c:	687b      	ldr	r3, [r7, #4]
 8103b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b70:	496e      	ldr	r1, [pc, #440]	; (8103d2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b72:	4313      	orrs	r3, r2
 8103b74:	650b      	str	r3, [r1, #80]	; 0x50
 8103b76:	e001      	b.n	8103b7c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b78:	7dfb      	ldrb	r3, [r7, #23]
 8103b7a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103b7c:	687b      	ldr	r3, [r7, #4]
 8103b7e:	681b      	ldr	r3, [r3, #0]
 8103b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103b84:	2b00      	cmp	r3, #0
 8103b86:	d042      	beq.n	8103c0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8103b88:	687b      	ldr	r3, [r7, #4]
 8103b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103b90:	d02b      	beq.n	8103bea <HAL_RCCEx_PeriphCLKConfig+0x192>
 8103b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103b96:	d825      	bhi.n	8103be4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103b98:	2bc0      	cmp	r3, #192	; 0xc0
 8103b9a:	d028      	beq.n	8103bee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8103b9c:	2bc0      	cmp	r3, #192	; 0xc0
 8103b9e:	d821      	bhi.n	8103be4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103ba0:	2b80      	cmp	r3, #128	; 0x80
 8103ba2:	d016      	beq.n	8103bd2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8103ba4:	2b80      	cmp	r3, #128	; 0x80
 8103ba6:	d81d      	bhi.n	8103be4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103ba8:	2b00      	cmp	r3, #0
 8103baa:	d002      	beq.n	8103bb2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8103bac:	2b40      	cmp	r3, #64	; 0x40
 8103bae:	d007      	beq.n	8103bc0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8103bb0:	e018      	b.n	8103be4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103bb2:	4b5e      	ldr	r3, [pc, #376]	; (8103d2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bb6:	4a5d      	ldr	r2, [pc, #372]	; (8103d2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103bbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103bbe:	e017      	b.n	8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103bc0:	687b      	ldr	r3, [r7, #4]
 8103bc2:	3304      	adds	r3, #4
 8103bc4:	2100      	movs	r1, #0
 8103bc6:	4618      	mov	r0, r3
 8103bc8:	f001 f94a 	bl	8104e60 <RCCEx_PLL2_Config>
 8103bcc:	4603      	mov	r3, r0
 8103bce:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103bd0:	e00e      	b.n	8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103bd2:	687b      	ldr	r3, [r7, #4]
 8103bd4:	3324      	adds	r3, #36	; 0x24
 8103bd6:	2100      	movs	r1, #0
 8103bd8:	4618      	mov	r0, r3
 8103bda:	f001 f9f3 	bl	8104fc4 <RCCEx_PLL3_Config>
 8103bde:	4603      	mov	r3, r0
 8103be0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103be2:	e005      	b.n	8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103be4:	2301      	movs	r3, #1
 8103be6:	75fb      	strb	r3, [r7, #23]
      break;
 8103be8:	e002      	b.n	8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103bea:	bf00      	nop
 8103bec:	e000      	b.n	8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103bf0:	7dfb      	ldrb	r3, [r7, #23]
 8103bf2:	2b00      	cmp	r3, #0
 8103bf4:	d109      	bne.n	8103c0a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103bf6:	4b4d      	ldr	r3, [pc, #308]	; (8103d2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103bfa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8103bfe:	687b      	ldr	r3, [r7, #4]
 8103c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103c02:	494a      	ldr	r1, [pc, #296]	; (8103d2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103c04:	4313      	orrs	r3, r2
 8103c06:	650b      	str	r3, [r1, #80]	; 0x50
 8103c08:	e001      	b.n	8103c0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c0a:	7dfb      	ldrb	r3, [r7, #23]
 8103c0c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103c0e:	687b      	ldr	r3, [r7, #4]
 8103c10:	681b      	ldr	r3, [r3, #0]
 8103c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103c16:	2b00      	cmp	r3, #0
 8103c18:	d049      	beq.n	8103cae <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8103c1a:	687b      	ldr	r3, [r7, #4]
 8103c1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103c20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103c24:	d030      	beq.n	8103c88 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8103c26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103c2a:	d82a      	bhi.n	8103c82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103c2c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103c30:	d02c      	beq.n	8103c8c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8103c32:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103c36:	d824      	bhi.n	8103c82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103c38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103c3c:	d018      	beq.n	8103c70 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8103c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103c42:	d81e      	bhi.n	8103c82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103c44:	2b00      	cmp	r3, #0
 8103c46:	d003      	beq.n	8103c50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8103c48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103c4c:	d007      	beq.n	8103c5e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8103c4e:	e018      	b.n	8103c82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c50:	4b36      	ldr	r3, [pc, #216]	; (8103d2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c54:	4a35      	ldr	r2, [pc, #212]	; (8103d2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103c5c:	e017      	b.n	8103c8e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103c5e:	687b      	ldr	r3, [r7, #4]
 8103c60:	3304      	adds	r3, #4
 8103c62:	2100      	movs	r1, #0
 8103c64:	4618      	mov	r0, r3
 8103c66:	f001 f8fb 	bl	8104e60 <RCCEx_PLL2_Config>
 8103c6a:	4603      	mov	r3, r0
 8103c6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103c6e:	e00e      	b.n	8103c8e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103c70:	687b      	ldr	r3, [r7, #4]
 8103c72:	3324      	adds	r3, #36	; 0x24
 8103c74:	2100      	movs	r1, #0
 8103c76:	4618      	mov	r0, r3
 8103c78:	f001 f9a4 	bl	8104fc4 <RCCEx_PLL3_Config>
 8103c7c:	4603      	mov	r3, r0
 8103c7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103c80:	e005      	b.n	8103c8e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103c82:	2301      	movs	r3, #1
 8103c84:	75fb      	strb	r3, [r7, #23]
      break;
 8103c86:	e002      	b.n	8103c8e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103c88:	bf00      	nop
 8103c8a:	e000      	b.n	8103c8e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103c8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c8e:	7dfb      	ldrb	r3, [r7, #23]
 8103c90:	2b00      	cmp	r3, #0
 8103c92:	d10a      	bne.n	8103caa <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103c94:	4b25      	ldr	r3, [pc, #148]	; (8103d2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103c98:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8103c9c:	687b      	ldr	r3, [r7, #4]
 8103c9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103ca2:	4922      	ldr	r1, [pc, #136]	; (8103d2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103ca4:	4313      	orrs	r3, r2
 8103ca6:	658b      	str	r3, [r1, #88]	; 0x58
 8103ca8:	e001      	b.n	8103cae <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103caa:	7dfb      	ldrb	r3, [r7, #23]
 8103cac:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103cae:	687b      	ldr	r3, [r7, #4]
 8103cb0:	681b      	ldr	r3, [r3, #0]
 8103cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8103cb6:	2b00      	cmp	r3, #0
 8103cb8:	d04b      	beq.n	8103d52 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8103cba:	687b      	ldr	r3, [r7, #4]
 8103cbc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103cc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103cc4:	d030      	beq.n	8103d28 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8103cc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103cca:	d82a      	bhi.n	8103d22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103ccc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103cd0:	d02e      	beq.n	8103d30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8103cd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103cd6:	d824      	bhi.n	8103d22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103cd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103cdc:	d018      	beq.n	8103d10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8103cde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103ce2:	d81e      	bhi.n	8103d22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103ce4:	2b00      	cmp	r3, #0
 8103ce6:	d003      	beq.n	8103cf0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8103ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103cec:	d007      	beq.n	8103cfe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8103cee:	e018      	b.n	8103d22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103cf0:	4b0e      	ldr	r3, [pc, #56]	; (8103d2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103cf4:	4a0d      	ldr	r2, [pc, #52]	; (8103d2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103cfc:	e019      	b.n	8103d32 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103cfe:	687b      	ldr	r3, [r7, #4]
 8103d00:	3304      	adds	r3, #4
 8103d02:	2100      	movs	r1, #0
 8103d04:	4618      	mov	r0, r3
 8103d06:	f001 f8ab 	bl	8104e60 <RCCEx_PLL2_Config>
 8103d0a:	4603      	mov	r3, r0
 8103d0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103d0e:	e010      	b.n	8103d32 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103d10:	687b      	ldr	r3, [r7, #4]
 8103d12:	3324      	adds	r3, #36	; 0x24
 8103d14:	2100      	movs	r1, #0
 8103d16:	4618      	mov	r0, r3
 8103d18:	f001 f954 	bl	8104fc4 <RCCEx_PLL3_Config>
 8103d1c:	4603      	mov	r3, r0
 8103d1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103d20:	e007      	b.n	8103d32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103d22:	2301      	movs	r3, #1
 8103d24:	75fb      	strb	r3, [r7, #23]
      break;
 8103d26:	e004      	b.n	8103d32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8103d28:	bf00      	nop
 8103d2a:	e002      	b.n	8103d32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8103d2c:	58024400 	.word	0x58024400
      break;
 8103d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103d32:	7dfb      	ldrb	r3, [r7, #23]
 8103d34:	2b00      	cmp	r3, #0
 8103d36:	d10a      	bne.n	8103d4e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103d38:	4b99      	ldr	r3, [pc, #612]	; (8103fa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103d3c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8103d40:	687b      	ldr	r3, [r7, #4]
 8103d42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103d46:	4996      	ldr	r1, [pc, #600]	; (8103fa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d48:	4313      	orrs	r3, r2
 8103d4a:	658b      	str	r3, [r1, #88]	; 0x58
 8103d4c:	e001      	b.n	8103d52 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d4e:	7dfb      	ldrb	r3, [r7, #23]
 8103d50:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103d52:	687b      	ldr	r3, [r7, #4]
 8103d54:	681b      	ldr	r3, [r3, #0]
 8103d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103d5a:	2b00      	cmp	r3, #0
 8103d5c:	d032      	beq.n	8103dc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8103d5e:	687b      	ldr	r3, [r7, #4]
 8103d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103d62:	2b30      	cmp	r3, #48	; 0x30
 8103d64:	d01c      	beq.n	8103da0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8103d66:	2b30      	cmp	r3, #48	; 0x30
 8103d68:	d817      	bhi.n	8103d9a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8103d6a:	2b20      	cmp	r3, #32
 8103d6c:	d00c      	beq.n	8103d88 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8103d6e:	2b20      	cmp	r3, #32
 8103d70:	d813      	bhi.n	8103d9a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8103d72:	2b00      	cmp	r3, #0
 8103d74:	d016      	beq.n	8103da4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8103d76:	2b10      	cmp	r3, #16
 8103d78:	d10f      	bne.n	8103d9a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103d7a:	4b89      	ldr	r3, [pc, #548]	; (8103fa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d7e:	4a88      	ldr	r2, [pc, #544]	; (8103fa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103d84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103d86:	e00e      	b.n	8103da6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103d88:	687b      	ldr	r3, [r7, #4]
 8103d8a:	3304      	adds	r3, #4
 8103d8c:	2102      	movs	r1, #2
 8103d8e:	4618      	mov	r0, r3
 8103d90:	f001 f866 	bl	8104e60 <RCCEx_PLL2_Config>
 8103d94:	4603      	mov	r3, r0
 8103d96:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103d98:	e005      	b.n	8103da6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103d9a:	2301      	movs	r3, #1
 8103d9c:	75fb      	strb	r3, [r7, #23]
      break;
 8103d9e:	e002      	b.n	8103da6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103da0:	bf00      	nop
 8103da2:	e000      	b.n	8103da6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103da6:	7dfb      	ldrb	r3, [r7, #23]
 8103da8:	2b00      	cmp	r3, #0
 8103daa:	d109      	bne.n	8103dc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103dac:	4b7c      	ldr	r3, [pc, #496]	; (8103fa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103db0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8103db4:	687b      	ldr	r3, [r7, #4]
 8103db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103db8:	4979      	ldr	r1, [pc, #484]	; (8103fa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103dba:	4313      	orrs	r3, r2
 8103dbc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103dbe:	e001      	b.n	8103dc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103dc0:	7dfb      	ldrb	r3, [r7, #23]
 8103dc2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103dc4:	687b      	ldr	r3, [r7, #4]
 8103dc6:	681b      	ldr	r3, [r3, #0]
 8103dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103dcc:	2b00      	cmp	r3, #0
 8103dce:	d047      	beq.n	8103e60 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8103dd0:	687b      	ldr	r3, [r7, #4]
 8103dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103dd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103dd8:	d030      	beq.n	8103e3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8103dda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103dde:	d82a      	bhi.n	8103e36 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103de0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103de4:	d02c      	beq.n	8103e40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8103de6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103dea:	d824      	bhi.n	8103e36 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103df0:	d018      	beq.n	8103e24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8103df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103df6:	d81e      	bhi.n	8103e36 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103df8:	2b00      	cmp	r3, #0
 8103dfa:	d003      	beq.n	8103e04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8103dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103e00:	d007      	beq.n	8103e12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8103e02:	e018      	b.n	8103e36 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103e04:	4b66      	ldr	r3, [pc, #408]	; (8103fa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e08:	4a65      	ldr	r2, [pc, #404]	; (8103fa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103e10:	e017      	b.n	8103e42 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103e12:	687b      	ldr	r3, [r7, #4]
 8103e14:	3304      	adds	r3, #4
 8103e16:	2100      	movs	r1, #0
 8103e18:	4618      	mov	r0, r3
 8103e1a:	f001 f821 	bl	8104e60 <RCCEx_PLL2_Config>
 8103e1e:	4603      	mov	r3, r0
 8103e20:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103e22:	e00e      	b.n	8103e42 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103e24:	687b      	ldr	r3, [r7, #4]
 8103e26:	3324      	adds	r3, #36	; 0x24
 8103e28:	2100      	movs	r1, #0
 8103e2a:	4618      	mov	r0, r3
 8103e2c:	f001 f8ca 	bl	8104fc4 <RCCEx_PLL3_Config>
 8103e30:	4603      	mov	r3, r0
 8103e32:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103e34:	e005      	b.n	8103e42 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103e36:	2301      	movs	r3, #1
 8103e38:	75fb      	strb	r3, [r7, #23]
      break;
 8103e3a:	e002      	b.n	8103e42 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8103e3c:	bf00      	nop
 8103e3e:	e000      	b.n	8103e42 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8103e40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103e42:	7dfb      	ldrb	r3, [r7, #23]
 8103e44:	2b00      	cmp	r3, #0
 8103e46:	d109      	bne.n	8103e5c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103e48:	4b55      	ldr	r3, [pc, #340]	; (8103fa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103e4c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8103e50:	687b      	ldr	r3, [r7, #4]
 8103e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e54:	4952      	ldr	r1, [pc, #328]	; (8103fa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103e56:	4313      	orrs	r3, r2
 8103e58:	650b      	str	r3, [r1, #80]	; 0x50
 8103e5a:	e001      	b.n	8103e60 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e5c:	7dfb      	ldrb	r3, [r7, #23]
 8103e5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103e60:	687b      	ldr	r3, [r7, #4]
 8103e62:	681b      	ldr	r3, [r3, #0]
 8103e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103e68:	2b00      	cmp	r3, #0
 8103e6a:	d049      	beq.n	8103f00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103e74:	d02e      	beq.n	8103ed4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8103e76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103e7a:	d828      	bhi.n	8103ece <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103e7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103e80:	d02a      	beq.n	8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8103e82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103e86:	d822      	bhi.n	8103ece <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103e88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103e8c:	d026      	beq.n	8103edc <HAL_RCCEx_PeriphCLKConfig+0x484>
 8103e8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103e92:	d81c      	bhi.n	8103ece <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103e98:	d010      	beq.n	8103ebc <HAL_RCCEx_PeriphCLKConfig+0x464>
 8103e9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103e9e:	d816      	bhi.n	8103ece <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103ea0:	2b00      	cmp	r3, #0
 8103ea2:	d01d      	beq.n	8103ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8103ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103ea8:	d111      	bne.n	8103ece <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103eaa:	687b      	ldr	r3, [r7, #4]
 8103eac:	3304      	adds	r3, #4
 8103eae:	2101      	movs	r1, #1
 8103eb0:	4618      	mov	r0, r3
 8103eb2:	f000 ffd5 	bl	8104e60 <RCCEx_PLL2_Config>
 8103eb6:	4603      	mov	r3, r0
 8103eb8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103eba:	e012      	b.n	8103ee2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103ebc:	687b      	ldr	r3, [r7, #4]
 8103ebe:	3324      	adds	r3, #36	; 0x24
 8103ec0:	2101      	movs	r1, #1
 8103ec2:	4618      	mov	r0, r3
 8103ec4:	f001 f87e 	bl	8104fc4 <RCCEx_PLL3_Config>
 8103ec8:	4603      	mov	r3, r0
 8103eca:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103ecc:	e009      	b.n	8103ee2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103ece:	2301      	movs	r3, #1
 8103ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8103ed2:	e006      	b.n	8103ee2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103ed4:	bf00      	nop
 8103ed6:	e004      	b.n	8103ee2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103ed8:	bf00      	nop
 8103eda:	e002      	b.n	8103ee2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103edc:	bf00      	nop
 8103ede:	e000      	b.n	8103ee2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103ee2:	7dfb      	ldrb	r3, [r7, #23]
 8103ee4:	2b00      	cmp	r3, #0
 8103ee6:	d109      	bne.n	8103efc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103ee8:	4b2d      	ldr	r3, [pc, #180]	; (8103fa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103eec:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103ef4:	492a      	ldr	r1, [pc, #168]	; (8103fa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103ef6:	4313      	orrs	r3, r2
 8103ef8:	650b      	str	r3, [r1, #80]	; 0x50
 8103efa:	e001      	b.n	8103f00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103efc:	7dfb      	ldrb	r3, [r7, #23]
 8103efe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103f00:	687b      	ldr	r3, [r7, #4]
 8103f02:	681b      	ldr	r3, [r3, #0]
 8103f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103f08:	2b00      	cmp	r3, #0
 8103f0a:	d04d      	beq.n	8103fa8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8103f0c:	687b      	ldr	r3, [r7, #4]
 8103f0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103f16:	d02e      	beq.n	8103f76 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8103f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103f1c:	d828      	bhi.n	8103f70 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103f22:	d02a      	beq.n	8103f7a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8103f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103f28:	d822      	bhi.n	8103f70 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103f2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103f2e:	d026      	beq.n	8103f7e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8103f30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103f34:	d81c      	bhi.n	8103f70 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103f36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103f3a:	d010      	beq.n	8103f5e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8103f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103f40:	d816      	bhi.n	8103f70 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103f42:	2b00      	cmp	r3, #0
 8103f44:	d01d      	beq.n	8103f82 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8103f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103f4a:	d111      	bne.n	8103f70 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103f4c:	687b      	ldr	r3, [r7, #4]
 8103f4e:	3304      	adds	r3, #4
 8103f50:	2101      	movs	r1, #1
 8103f52:	4618      	mov	r0, r3
 8103f54:	f000 ff84 	bl	8104e60 <RCCEx_PLL2_Config>
 8103f58:	4603      	mov	r3, r0
 8103f5a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103f5c:	e012      	b.n	8103f84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103f5e:	687b      	ldr	r3, [r7, #4]
 8103f60:	3324      	adds	r3, #36	; 0x24
 8103f62:	2101      	movs	r1, #1
 8103f64:	4618      	mov	r0, r3
 8103f66:	f001 f82d 	bl	8104fc4 <RCCEx_PLL3_Config>
 8103f6a:	4603      	mov	r3, r0
 8103f6c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103f6e:	e009      	b.n	8103f84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8103f70:	2301      	movs	r3, #1
 8103f72:	75fb      	strb	r3, [r7, #23]
      break;
 8103f74:	e006      	b.n	8103f84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103f76:	bf00      	nop
 8103f78:	e004      	b.n	8103f84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103f7a:	bf00      	nop
 8103f7c:	e002      	b.n	8103f84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103f7e:	bf00      	nop
 8103f80:	e000      	b.n	8103f84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f84:	7dfb      	ldrb	r3, [r7, #23]
 8103f86:	2b00      	cmp	r3, #0
 8103f88:	d10c      	bne.n	8103fa4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103f8a:	4b05      	ldr	r3, [pc, #20]	; (8103fa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103f8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103f92:	687b      	ldr	r3, [r7, #4]
 8103f94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103f98:	4901      	ldr	r1, [pc, #4]	; (8103fa0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103f9a:	4313      	orrs	r3, r2
 8103f9c:	658b      	str	r3, [r1, #88]	; 0x58
 8103f9e:	e003      	b.n	8103fa8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8103fa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fa4:	7dfb      	ldrb	r3, [r7, #23]
 8103fa6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103fa8:	687b      	ldr	r3, [r7, #4]
 8103faa:	681b      	ldr	r3, [r3, #0]
 8103fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103fb0:	2b00      	cmp	r3, #0
 8103fb2:	d02f      	beq.n	8104014 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8103fb4:	687b      	ldr	r3, [r7, #4]
 8103fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103fbc:	d00e      	beq.n	8103fdc <HAL_RCCEx_PeriphCLKConfig+0x584>
 8103fbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103fc2:	d814      	bhi.n	8103fee <HAL_RCCEx_PeriphCLKConfig+0x596>
 8103fc4:	2b00      	cmp	r3, #0
 8103fc6:	d015      	beq.n	8103ff4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8103fc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103fcc:	d10f      	bne.n	8103fee <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103fce:	4bb0      	ldr	r3, [pc, #704]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103fd2:	4aaf      	ldr	r2, [pc, #700]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103fda:	e00c      	b.n	8103ff6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103fdc:	687b      	ldr	r3, [r7, #4]
 8103fde:	3304      	adds	r3, #4
 8103fe0:	2101      	movs	r1, #1
 8103fe2:	4618      	mov	r0, r3
 8103fe4:	f000 ff3c 	bl	8104e60 <RCCEx_PLL2_Config>
 8103fe8:	4603      	mov	r3, r0
 8103fea:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103fec:	e003      	b.n	8103ff6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103fee:	2301      	movs	r3, #1
 8103ff0:	75fb      	strb	r3, [r7, #23]
      break;
 8103ff2:	e000      	b.n	8103ff6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8103ff4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103ff6:	7dfb      	ldrb	r3, [r7, #23]
 8103ff8:	2b00      	cmp	r3, #0
 8103ffa:	d109      	bne.n	8104010 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103ffc:	4ba4      	ldr	r3, [pc, #656]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104000:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8104004:	687b      	ldr	r3, [r7, #4]
 8104006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104008:	49a1      	ldr	r1, [pc, #644]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810400a:	4313      	orrs	r3, r2
 810400c:	650b      	str	r3, [r1, #80]	; 0x50
 810400e:	e001      	b.n	8104014 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104010:	7dfb      	ldrb	r3, [r7, #23]
 8104012:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8104014:	687b      	ldr	r3, [r7, #4]
 8104016:	681b      	ldr	r3, [r3, #0]
 8104018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810401c:	2b00      	cmp	r3, #0
 810401e:	d032      	beq.n	8104086 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8104020:	687b      	ldr	r3, [r7, #4]
 8104022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104024:	2b03      	cmp	r3, #3
 8104026:	d81b      	bhi.n	8104060 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8104028:	a201      	add	r2, pc, #4	; (adr r2, 8104030 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 810402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810402e:	bf00      	nop
 8104030:	08104067 	.word	0x08104067
 8104034:	08104041 	.word	0x08104041
 8104038:	0810404f 	.word	0x0810404f
 810403c:	08104067 	.word	0x08104067
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104040:	4b93      	ldr	r3, [pc, #588]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104044:	4a92      	ldr	r2, [pc, #584]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810404a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 810404c:	e00c      	b.n	8104068 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810404e:	687b      	ldr	r3, [r7, #4]
 8104050:	3304      	adds	r3, #4
 8104052:	2102      	movs	r1, #2
 8104054:	4618      	mov	r0, r3
 8104056:	f000 ff03 	bl	8104e60 <RCCEx_PLL2_Config>
 810405a:	4603      	mov	r3, r0
 810405c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 810405e:	e003      	b.n	8104068 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8104060:	2301      	movs	r3, #1
 8104062:	75fb      	strb	r3, [r7, #23]
      break;
 8104064:	e000      	b.n	8104068 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8104066:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104068:	7dfb      	ldrb	r3, [r7, #23]
 810406a:	2b00      	cmp	r3, #0
 810406c:	d109      	bne.n	8104082 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810406e:	4b88      	ldr	r3, [pc, #544]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104072:	f023 0203 	bic.w	r2, r3, #3
 8104076:	687b      	ldr	r3, [r7, #4]
 8104078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810407a:	4985      	ldr	r1, [pc, #532]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810407c:	4313      	orrs	r3, r2
 810407e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104080:	e001      	b.n	8104086 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104082:	7dfb      	ldrb	r3, [r7, #23]
 8104084:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8104086:	687b      	ldr	r3, [r7, #4]
 8104088:	681b      	ldr	r3, [r3, #0]
 810408a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810408e:	2b00      	cmp	r3, #0
 8104090:	f000 8088 	beq.w	81041a4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8104094:	4b7f      	ldr	r3, [pc, #508]	; (8104294 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8104096:	681b      	ldr	r3, [r3, #0]
 8104098:	4a7e      	ldr	r2, [pc, #504]	; (8104294 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810409a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810409e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81040a0:	f7fd fcec 	bl	8101a7c <HAL_GetTick>
 81040a4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81040a6:	e009      	b.n	81040bc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81040a8:	f7fd fce8 	bl	8101a7c <HAL_GetTick>
 81040ac:	4602      	mov	r2, r0
 81040ae:	693b      	ldr	r3, [r7, #16]
 81040b0:	1ad3      	subs	r3, r2, r3
 81040b2:	2b64      	cmp	r3, #100	; 0x64
 81040b4:	d902      	bls.n	81040bc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 81040b6:	2303      	movs	r3, #3
 81040b8:	75fb      	strb	r3, [r7, #23]
        break;
 81040ba:	e005      	b.n	81040c8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81040bc:	4b75      	ldr	r3, [pc, #468]	; (8104294 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81040be:	681b      	ldr	r3, [r3, #0]
 81040c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81040c4:	2b00      	cmp	r3, #0
 81040c6:	d0ef      	beq.n	81040a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81040c8:	7dfb      	ldrb	r3, [r7, #23]
 81040ca:	2b00      	cmp	r3, #0
 81040cc:	d168      	bne.n	81041a0 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81040ce:	4b70      	ldr	r3, [pc, #448]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81040d2:	687b      	ldr	r3, [r7, #4]
 81040d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81040d8:	4053      	eors	r3, r2
 81040da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81040de:	2b00      	cmp	r3, #0
 81040e0:	d013      	beq.n	810410a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81040e2:	4b6b      	ldr	r3, [pc, #428]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81040e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81040ea:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81040ec:	4b68      	ldr	r3, [pc, #416]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81040f0:	4a67      	ldr	r2, [pc, #412]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81040f6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81040f8:	4b65      	ldr	r3, [pc, #404]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81040fc:	4a64      	ldr	r2, [pc, #400]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8104102:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8104104:	4a62      	ldr	r2, [pc, #392]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104106:	68fb      	ldr	r3, [r7, #12]
 8104108:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810410a:	687b      	ldr	r3, [r7, #4]
 810410c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104114:	d115      	bne.n	8104142 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8104116:	f7fd fcb1 	bl	8101a7c <HAL_GetTick>
 810411a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810411c:	e00b      	b.n	8104136 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810411e:	f7fd fcad 	bl	8101a7c <HAL_GetTick>
 8104122:	4602      	mov	r2, r0
 8104124:	693b      	ldr	r3, [r7, #16]
 8104126:	1ad3      	subs	r3, r2, r3
 8104128:	f241 3288 	movw	r2, #5000	; 0x1388
 810412c:	4293      	cmp	r3, r2
 810412e:	d902      	bls.n	8104136 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8104130:	2303      	movs	r3, #3
 8104132:	75fb      	strb	r3, [r7, #23]
            break;
 8104134:	e005      	b.n	8104142 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104136:	4b56      	ldr	r3, [pc, #344]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810413a:	f003 0302 	and.w	r3, r3, #2
 810413e:	2b00      	cmp	r3, #0
 8104140:	d0ed      	beq.n	810411e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8104142:	7dfb      	ldrb	r3, [r7, #23]
 8104144:	2b00      	cmp	r3, #0
 8104146:	d128      	bne.n	810419a <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8104148:	687b      	ldr	r3, [r7, #4]
 810414a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810414e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104152:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104156:	d10f      	bne.n	8104178 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8104158:	4b4d      	ldr	r3, [pc, #308]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810415a:	691b      	ldr	r3, [r3, #16]
 810415c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8104160:	687b      	ldr	r3, [r7, #4]
 8104162:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104166:	091b      	lsrs	r3, r3, #4
 8104168:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 810416c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8104170:	4947      	ldr	r1, [pc, #284]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104172:	4313      	orrs	r3, r2
 8104174:	610b      	str	r3, [r1, #16]
 8104176:	e005      	b.n	8104184 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8104178:	4b45      	ldr	r3, [pc, #276]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810417a:	691b      	ldr	r3, [r3, #16]
 810417c:	4a44      	ldr	r2, [pc, #272]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810417e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8104182:	6113      	str	r3, [r2, #16]
 8104184:	4b42      	ldr	r3, [pc, #264]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104186:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104188:	687b      	ldr	r3, [r7, #4]
 810418a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810418e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8104192:	493f      	ldr	r1, [pc, #252]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104194:	4313      	orrs	r3, r2
 8104196:	670b      	str	r3, [r1, #112]	; 0x70
 8104198:	e004      	b.n	81041a4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810419a:	7dfb      	ldrb	r3, [r7, #23]
 810419c:	75bb      	strb	r3, [r7, #22]
 810419e:	e001      	b.n	81041a4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81041a0:	7dfb      	ldrb	r3, [r7, #23]
 81041a2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81041a4:	687b      	ldr	r3, [r7, #4]
 81041a6:	681b      	ldr	r3, [r3, #0]
 81041a8:	f003 0301 	and.w	r3, r3, #1
 81041ac:	2b00      	cmp	r3, #0
 81041ae:	f000 8083 	beq.w	81042b8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 81041b2:	687b      	ldr	r3, [r7, #4]
 81041b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81041b6:	2b28      	cmp	r3, #40	; 0x28
 81041b8:	d866      	bhi.n	8104288 <HAL_RCCEx_PeriphCLKConfig+0x830>
 81041ba:	a201      	add	r2, pc, #4	; (adr r2, 81041c0 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81041bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81041c0:	08104299 	.word	0x08104299
 81041c4:	08104289 	.word	0x08104289
 81041c8:	08104289 	.word	0x08104289
 81041cc:	08104289 	.word	0x08104289
 81041d0:	08104289 	.word	0x08104289
 81041d4:	08104289 	.word	0x08104289
 81041d8:	08104289 	.word	0x08104289
 81041dc:	08104289 	.word	0x08104289
 81041e0:	08104265 	.word	0x08104265
 81041e4:	08104289 	.word	0x08104289
 81041e8:	08104289 	.word	0x08104289
 81041ec:	08104289 	.word	0x08104289
 81041f0:	08104289 	.word	0x08104289
 81041f4:	08104289 	.word	0x08104289
 81041f8:	08104289 	.word	0x08104289
 81041fc:	08104289 	.word	0x08104289
 8104200:	08104277 	.word	0x08104277
 8104204:	08104289 	.word	0x08104289
 8104208:	08104289 	.word	0x08104289
 810420c:	08104289 	.word	0x08104289
 8104210:	08104289 	.word	0x08104289
 8104214:	08104289 	.word	0x08104289
 8104218:	08104289 	.word	0x08104289
 810421c:	08104289 	.word	0x08104289
 8104220:	08104299 	.word	0x08104299
 8104224:	08104289 	.word	0x08104289
 8104228:	08104289 	.word	0x08104289
 810422c:	08104289 	.word	0x08104289
 8104230:	08104289 	.word	0x08104289
 8104234:	08104289 	.word	0x08104289
 8104238:	08104289 	.word	0x08104289
 810423c:	08104289 	.word	0x08104289
 8104240:	08104299 	.word	0x08104299
 8104244:	08104289 	.word	0x08104289
 8104248:	08104289 	.word	0x08104289
 810424c:	08104289 	.word	0x08104289
 8104250:	08104289 	.word	0x08104289
 8104254:	08104289 	.word	0x08104289
 8104258:	08104289 	.word	0x08104289
 810425c:	08104289 	.word	0x08104289
 8104260:	08104299 	.word	0x08104299
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104264:	687b      	ldr	r3, [r7, #4]
 8104266:	3304      	adds	r3, #4
 8104268:	2101      	movs	r1, #1
 810426a:	4618      	mov	r0, r3
 810426c:	f000 fdf8 	bl	8104e60 <RCCEx_PLL2_Config>
 8104270:	4603      	mov	r3, r0
 8104272:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8104274:	e011      	b.n	810429a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104276:	687b      	ldr	r3, [r7, #4]
 8104278:	3324      	adds	r3, #36	; 0x24
 810427a:	2101      	movs	r1, #1
 810427c:	4618      	mov	r0, r3
 810427e:	f000 fea1 	bl	8104fc4 <RCCEx_PLL3_Config>
 8104282:	4603      	mov	r3, r0
 8104284:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8104286:	e008      	b.n	810429a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104288:	2301      	movs	r3, #1
 810428a:	75fb      	strb	r3, [r7, #23]
      break;
 810428c:	e005      	b.n	810429a <HAL_RCCEx_PeriphCLKConfig+0x842>
 810428e:	bf00      	nop
 8104290:	58024400 	.word	0x58024400
 8104294:	58024800 	.word	0x58024800
      break;
 8104298:	bf00      	nop
    }

    if(ret == HAL_OK)
 810429a:	7dfb      	ldrb	r3, [r7, #23]
 810429c:	2b00      	cmp	r3, #0
 810429e:	d109      	bne.n	81042b4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81042a0:	4b96      	ldr	r3, [pc, #600]	; (81044fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81042a4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 81042a8:	687b      	ldr	r3, [r7, #4]
 81042aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81042ac:	4993      	ldr	r1, [pc, #588]	; (81044fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81042ae:	4313      	orrs	r3, r2
 81042b0:	654b      	str	r3, [r1, #84]	; 0x54
 81042b2:	e001      	b.n	81042b8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042b4:	7dfb      	ldrb	r3, [r7, #23]
 81042b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81042b8:	687b      	ldr	r3, [r7, #4]
 81042ba:	681b      	ldr	r3, [r3, #0]
 81042bc:	f003 0302 	and.w	r3, r3, #2
 81042c0:	2b00      	cmp	r3, #0
 81042c2:	d038      	beq.n	8104336 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 81042c4:	687b      	ldr	r3, [r7, #4]
 81042c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81042c8:	2b05      	cmp	r3, #5
 81042ca:	d821      	bhi.n	8104310 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 81042cc:	a201      	add	r2, pc, #4	; (adr r2, 81042d4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 81042ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81042d2:	bf00      	nop
 81042d4:	08104317 	.word	0x08104317
 81042d8:	081042ed 	.word	0x081042ed
 81042dc:	081042ff 	.word	0x081042ff
 81042e0:	08104317 	.word	0x08104317
 81042e4:	08104317 	.word	0x08104317
 81042e8:	08104317 	.word	0x08104317
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81042ec:	687b      	ldr	r3, [r7, #4]
 81042ee:	3304      	adds	r3, #4
 81042f0:	2101      	movs	r1, #1
 81042f2:	4618      	mov	r0, r3
 81042f4:	f000 fdb4 	bl	8104e60 <RCCEx_PLL2_Config>
 81042f8:	4603      	mov	r3, r0
 81042fa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81042fc:	e00c      	b.n	8104318 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81042fe:	687b      	ldr	r3, [r7, #4]
 8104300:	3324      	adds	r3, #36	; 0x24
 8104302:	2101      	movs	r1, #1
 8104304:	4618      	mov	r0, r3
 8104306:	f000 fe5d 	bl	8104fc4 <RCCEx_PLL3_Config>
 810430a:	4603      	mov	r3, r0
 810430c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810430e:	e003      	b.n	8104318 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104310:	2301      	movs	r3, #1
 8104312:	75fb      	strb	r3, [r7, #23]
      break;
 8104314:	e000      	b.n	8104318 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8104316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104318:	7dfb      	ldrb	r3, [r7, #23]
 810431a:	2b00      	cmp	r3, #0
 810431c:	d109      	bne.n	8104332 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810431e:	4b77      	ldr	r3, [pc, #476]	; (81044fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104322:	f023 0207 	bic.w	r2, r3, #7
 8104326:	687b      	ldr	r3, [r7, #4]
 8104328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810432a:	4974      	ldr	r1, [pc, #464]	; (81044fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810432c:	4313      	orrs	r3, r2
 810432e:	654b      	str	r3, [r1, #84]	; 0x54
 8104330:	e001      	b.n	8104336 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104332:	7dfb      	ldrb	r3, [r7, #23]
 8104334:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8104336:	687b      	ldr	r3, [r7, #4]
 8104338:	681b      	ldr	r3, [r3, #0]
 810433a:	f003 0304 	and.w	r3, r3, #4
 810433e:	2b00      	cmp	r3, #0
 8104340:	d03a      	beq.n	81043b8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104348:	2b05      	cmp	r3, #5
 810434a:	d821      	bhi.n	8104390 <HAL_RCCEx_PeriphCLKConfig+0x938>
 810434c:	a201      	add	r2, pc, #4	; (adr r2, 8104354 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 810434e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104352:	bf00      	nop
 8104354:	08104397 	.word	0x08104397
 8104358:	0810436d 	.word	0x0810436d
 810435c:	0810437f 	.word	0x0810437f
 8104360:	08104397 	.word	0x08104397
 8104364:	08104397 	.word	0x08104397
 8104368:	08104397 	.word	0x08104397
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810436c:	687b      	ldr	r3, [r7, #4]
 810436e:	3304      	adds	r3, #4
 8104370:	2101      	movs	r1, #1
 8104372:	4618      	mov	r0, r3
 8104374:	f000 fd74 	bl	8104e60 <RCCEx_PLL2_Config>
 8104378:	4603      	mov	r3, r0
 810437a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810437c:	e00c      	b.n	8104398 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810437e:	687b      	ldr	r3, [r7, #4]
 8104380:	3324      	adds	r3, #36	; 0x24
 8104382:	2101      	movs	r1, #1
 8104384:	4618      	mov	r0, r3
 8104386:	f000 fe1d 	bl	8104fc4 <RCCEx_PLL3_Config>
 810438a:	4603      	mov	r3, r0
 810438c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810438e:	e003      	b.n	8104398 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104390:	2301      	movs	r3, #1
 8104392:	75fb      	strb	r3, [r7, #23]
      break;
 8104394:	e000      	b.n	8104398 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8104396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104398:	7dfb      	ldrb	r3, [r7, #23]
 810439a:	2b00      	cmp	r3, #0
 810439c:	d10a      	bne.n	81043b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810439e:	4b57      	ldr	r3, [pc, #348]	; (81044fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81043a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81043a2:	f023 0207 	bic.w	r2, r3, #7
 81043a6:	687b      	ldr	r3, [r7, #4]
 81043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81043ac:	4953      	ldr	r1, [pc, #332]	; (81044fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81043ae:	4313      	orrs	r3, r2
 81043b0:	658b      	str	r3, [r1, #88]	; 0x58
 81043b2:	e001      	b.n	81043b8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043b4:	7dfb      	ldrb	r3, [r7, #23]
 81043b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81043b8:	687b      	ldr	r3, [r7, #4]
 81043ba:	681b      	ldr	r3, [r3, #0]
 81043bc:	f003 0320 	and.w	r3, r3, #32
 81043c0:	2b00      	cmp	r3, #0
 81043c2:	d04b      	beq.n	810445c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 81043c4:	687b      	ldr	r3, [r7, #4]
 81043c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81043ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81043ce:	d02e      	beq.n	810442e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 81043d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81043d4:	d828      	bhi.n	8104428 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81043d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81043da:	d02a      	beq.n	8104432 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 81043dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81043e0:	d822      	bhi.n	8104428 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81043e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81043e6:	d026      	beq.n	8104436 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 81043e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81043ec:	d81c      	bhi.n	8104428 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81043ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81043f2:	d010      	beq.n	8104416 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 81043f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81043f8:	d816      	bhi.n	8104428 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81043fa:	2b00      	cmp	r3, #0
 81043fc:	d01d      	beq.n	810443a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 81043fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104402:	d111      	bne.n	8104428 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104404:	687b      	ldr	r3, [r7, #4]
 8104406:	3304      	adds	r3, #4
 8104408:	2100      	movs	r1, #0
 810440a:	4618      	mov	r0, r3
 810440c:	f000 fd28 	bl	8104e60 <RCCEx_PLL2_Config>
 8104410:	4603      	mov	r3, r0
 8104412:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8104414:	e012      	b.n	810443c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104416:	687b      	ldr	r3, [r7, #4]
 8104418:	3324      	adds	r3, #36	; 0x24
 810441a:	2102      	movs	r1, #2
 810441c:	4618      	mov	r0, r3
 810441e:	f000 fdd1 	bl	8104fc4 <RCCEx_PLL3_Config>
 8104422:	4603      	mov	r3, r0
 8104424:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8104426:	e009      	b.n	810443c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104428:	2301      	movs	r3, #1
 810442a:	75fb      	strb	r3, [r7, #23]
      break;
 810442c:	e006      	b.n	810443c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810442e:	bf00      	nop
 8104430:	e004      	b.n	810443c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8104432:	bf00      	nop
 8104434:	e002      	b.n	810443c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8104436:	bf00      	nop
 8104438:	e000      	b.n	810443c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810443a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810443c:	7dfb      	ldrb	r3, [r7, #23]
 810443e:	2b00      	cmp	r3, #0
 8104440:	d10a      	bne.n	8104458 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8104442:	4b2e      	ldr	r3, [pc, #184]	; (81044fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104446:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810444a:	687b      	ldr	r3, [r7, #4]
 810444c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104450:	492a      	ldr	r1, [pc, #168]	; (81044fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104452:	4313      	orrs	r3, r2
 8104454:	654b      	str	r3, [r1, #84]	; 0x54
 8104456:	e001      	b.n	810445c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104458:	7dfb      	ldrb	r3, [r7, #23]
 810445a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810445c:	687b      	ldr	r3, [r7, #4]
 810445e:	681b      	ldr	r3, [r3, #0]
 8104460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104464:	2b00      	cmp	r3, #0
 8104466:	d04d      	beq.n	8104504 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8104468:	687b      	ldr	r3, [r7, #4]
 810446a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810446e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104472:	d02e      	beq.n	81044d2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8104474:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104478:	d828      	bhi.n	81044cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810447a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810447e:	d02a      	beq.n	81044d6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8104480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104484:	d822      	bhi.n	81044cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104486:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810448a:	d026      	beq.n	81044da <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810448c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104490:	d81c      	bhi.n	81044cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104496:	d010      	beq.n	81044ba <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8104498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810449c:	d816      	bhi.n	81044cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810449e:	2b00      	cmp	r3, #0
 81044a0:	d01d      	beq.n	81044de <HAL_RCCEx_PeriphCLKConfig+0xa86>
 81044a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81044a6:	d111      	bne.n	81044cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81044a8:	687b      	ldr	r3, [r7, #4]
 81044aa:	3304      	adds	r3, #4
 81044ac:	2100      	movs	r1, #0
 81044ae:	4618      	mov	r0, r3
 81044b0:	f000 fcd6 	bl	8104e60 <RCCEx_PLL2_Config>
 81044b4:	4603      	mov	r3, r0
 81044b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81044b8:	e012      	b.n	81044e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81044ba:	687b      	ldr	r3, [r7, #4]
 81044bc:	3324      	adds	r3, #36	; 0x24
 81044be:	2102      	movs	r1, #2
 81044c0:	4618      	mov	r0, r3
 81044c2:	f000 fd7f 	bl	8104fc4 <RCCEx_PLL3_Config>
 81044c6:	4603      	mov	r3, r0
 81044c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81044ca:	e009      	b.n	81044e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81044cc:	2301      	movs	r3, #1
 81044ce:	75fb      	strb	r3, [r7, #23]
      break;
 81044d0:	e006      	b.n	81044e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81044d2:	bf00      	nop
 81044d4:	e004      	b.n	81044e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81044d6:	bf00      	nop
 81044d8:	e002      	b.n	81044e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81044da:	bf00      	nop
 81044dc:	e000      	b.n	81044e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81044de:	bf00      	nop
    }

    if(ret == HAL_OK)
 81044e0:	7dfb      	ldrb	r3, [r7, #23]
 81044e2:	2b00      	cmp	r3, #0
 81044e4:	d10c      	bne.n	8104500 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81044e6:	4b05      	ldr	r3, [pc, #20]	; (81044fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81044e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81044ea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 81044ee:	687b      	ldr	r3, [r7, #4]
 81044f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81044f4:	4901      	ldr	r1, [pc, #4]	; (81044fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81044f6:	4313      	orrs	r3, r2
 81044f8:	658b      	str	r3, [r1, #88]	; 0x58
 81044fa:	e003      	b.n	8104504 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 81044fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104500:	7dfb      	ldrb	r3, [r7, #23]
 8104502:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8104504:	687b      	ldr	r3, [r7, #4]
 8104506:	681b      	ldr	r3, [r3, #0]
 8104508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810450c:	2b00      	cmp	r3, #0
 810450e:	d04b      	beq.n	81045a8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8104510:	687b      	ldr	r3, [r7, #4]
 8104512:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104516:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810451a:	d02e      	beq.n	810457a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 810451c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104520:	d828      	bhi.n	8104574 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104526:	d02a      	beq.n	810457e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8104528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810452c:	d822      	bhi.n	8104574 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810452e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104532:	d026      	beq.n	8104582 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8104534:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104538:	d81c      	bhi.n	8104574 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810453a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810453e:	d010      	beq.n	8104562 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8104540:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104544:	d816      	bhi.n	8104574 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104546:	2b00      	cmp	r3, #0
 8104548:	d01d      	beq.n	8104586 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 810454a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810454e:	d111      	bne.n	8104574 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104550:	687b      	ldr	r3, [r7, #4]
 8104552:	3304      	adds	r3, #4
 8104554:	2100      	movs	r1, #0
 8104556:	4618      	mov	r0, r3
 8104558:	f000 fc82 	bl	8104e60 <RCCEx_PLL2_Config>
 810455c:	4603      	mov	r3, r0
 810455e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8104560:	e012      	b.n	8104588 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104562:	687b      	ldr	r3, [r7, #4]
 8104564:	3324      	adds	r3, #36	; 0x24
 8104566:	2102      	movs	r1, #2
 8104568:	4618      	mov	r0, r3
 810456a:	f000 fd2b 	bl	8104fc4 <RCCEx_PLL3_Config>
 810456e:	4603      	mov	r3, r0
 8104570:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8104572:	e009      	b.n	8104588 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104574:	2301      	movs	r3, #1
 8104576:	75fb      	strb	r3, [r7, #23]
      break;
 8104578:	e006      	b.n	8104588 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810457a:	bf00      	nop
 810457c:	e004      	b.n	8104588 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810457e:	bf00      	nop
 8104580:	e002      	b.n	8104588 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104582:	bf00      	nop
 8104584:	e000      	b.n	8104588 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104586:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104588:	7dfb      	ldrb	r3, [r7, #23]
 810458a:	2b00      	cmp	r3, #0
 810458c:	d10a      	bne.n	81045a4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810458e:	4b9d      	ldr	r3, [pc, #628]	; (8104804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8104596:	687b      	ldr	r3, [r7, #4]
 8104598:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810459c:	4999      	ldr	r1, [pc, #612]	; (8104804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810459e:	4313      	orrs	r3, r2
 81045a0:	658b      	str	r3, [r1, #88]	; 0x58
 81045a2:	e001      	b.n	81045a8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81045a4:	7dfb      	ldrb	r3, [r7, #23]
 81045a6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81045a8:	687b      	ldr	r3, [r7, #4]
 81045aa:	681b      	ldr	r3, [r3, #0]
 81045ac:	f003 0308 	and.w	r3, r3, #8
 81045b0:	2b00      	cmp	r3, #0
 81045b2:	d01a      	beq.n	81045ea <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 81045b4:	687b      	ldr	r3, [r7, #4]
 81045b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81045ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81045be:	d10a      	bne.n	81045d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81045c0:	687b      	ldr	r3, [r7, #4]
 81045c2:	3324      	adds	r3, #36	; 0x24
 81045c4:	2102      	movs	r1, #2
 81045c6:	4618      	mov	r0, r3
 81045c8:	f000 fcfc 	bl	8104fc4 <RCCEx_PLL3_Config>
 81045cc:	4603      	mov	r3, r0
 81045ce:	2b00      	cmp	r3, #0
 81045d0:	d001      	beq.n	81045d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 81045d2:	2301      	movs	r3, #1
 81045d4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81045d6:	4b8b      	ldr	r3, [pc, #556]	; (8104804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81045d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81045da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 81045de:	687b      	ldr	r3, [r7, #4]
 81045e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81045e4:	4987      	ldr	r1, [pc, #540]	; (8104804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81045e6:	4313      	orrs	r3, r2
 81045e8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81045ea:	687b      	ldr	r3, [r7, #4]
 81045ec:	681b      	ldr	r3, [r3, #0]
 81045ee:	f003 0310 	and.w	r3, r3, #16
 81045f2:	2b00      	cmp	r3, #0
 81045f4:	d01a      	beq.n	810462c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 81045f6:	687b      	ldr	r3, [r7, #4]
 81045f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81045fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104600:	d10a      	bne.n	8104618 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104602:	687b      	ldr	r3, [r7, #4]
 8104604:	3324      	adds	r3, #36	; 0x24
 8104606:	2102      	movs	r1, #2
 8104608:	4618      	mov	r0, r3
 810460a:	f000 fcdb 	bl	8104fc4 <RCCEx_PLL3_Config>
 810460e:	4603      	mov	r3, r0
 8104610:	2b00      	cmp	r3, #0
 8104612:	d001      	beq.n	8104618 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8104614:	2301      	movs	r3, #1
 8104616:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8104618:	4b7a      	ldr	r3, [pc, #488]	; (8104804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810461a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810461c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104620:	687b      	ldr	r3, [r7, #4]
 8104622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104626:	4977      	ldr	r1, [pc, #476]	; (8104804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104628:	4313      	orrs	r3, r2
 810462a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810462c:	687b      	ldr	r3, [r7, #4]
 810462e:	681b      	ldr	r3, [r3, #0]
 8104630:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8104634:	2b00      	cmp	r3, #0
 8104636:	d034      	beq.n	81046a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8104638:	687b      	ldr	r3, [r7, #4]
 810463a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810463e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104642:	d01d      	beq.n	8104680 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8104644:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104648:	d817      	bhi.n	810467a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 810464a:	2b00      	cmp	r3, #0
 810464c:	d003      	beq.n	8104656 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 810464e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104652:	d009      	beq.n	8104668 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8104654:	e011      	b.n	810467a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104656:	687b      	ldr	r3, [r7, #4]
 8104658:	3304      	adds	r3, #4
 810465a:	2100      	movs	r1, #0
 810465c:	4618      	mov	r0, r3
 810465e:	f000 fbff 	bl	8104e60 <RCCEx_PLL2_Config>
 8104662:	4603      	mov	r3, r0
 8104664:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8104666:	e00c      	b.n	8104682 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104668:	687b      	ldr	r3, [r7, #4]
 810466a:	3324      	adds	r3, #36	; 0x24
 810466c:	2102      	movs	r1, #2
 810466e:	4618      	mov	r0, r3
 8104670:	f000 fca8 	bl	8104fc4 <RCCEx_PLL3_Config>
 8104674:	4603      	mov	r3, r0
 8104676:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8104678:	e003      	b.n	8104682 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810467a:	2301      	movs	r3, #1
 810467c:	75fb      	strb	r3, [r7, #23]
      break;
 810467e:	e000      	b.n	8104682 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8104680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104682:	7dfb      	ldrb	r3, [r7, #23]
 8104684:	2b00      	cmp	r3, #0
 8104686:	d10a      	bne.n	810469e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104688:	4b5e      	ldr	r3, [pc, #376]	; (8104804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810468a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810468c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8104690:	687b      	ldr	r3, [r7, #4]
 8104692:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104696:	495b      	ldr	r1, [pc, #364]	; (8104804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104698:	4313      	orrs	r3, r2
 810469a:	658b      	str	r3, [r1, #88]	; 0x58
 810469c:	e001      	b.n	81046a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810469e:	7dfb      	ldrb	r3, [r7, #23]
 81046a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81046a2:	687b      	ldr	r3, [r7, #4]
 81046a4:	681b      	ldr	r3, [r3, #0]
 81046a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81046aa:	2b00      	cmp	r3, #0
 81046ac:	d033      	beq.n	8104716 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 81046ae:	687b      	ldr	r3, [r7, #4]
 81046b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81046b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81046b8:	d01c      	beq.n	81046f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 81046ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81046be:	d816      	bhi.n	81046ee <HAL_RCCEx_PeriphCLKConfig+0xc96>
 81046c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81046c4:	d003      	beq.n	81046ce <HAL_RCCEx_PeriphCLKConfig+0xc76>
 81046c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81046ca:	d007      	beq.n	81046dc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 81046cc:	e00f      	b.n	81046ee <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81046ce:	4b4d      	ldr	r3, [pc, #308]	; (8104804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81046d2:	4a4c      	ldr	r2, [pc, #304]	; (8104804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81046d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81046da:	e00c      	b.n	81046f6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81046dc:	687b      	ldr	r3, [r7, #4]
 81046de:	3324      	adds	r3, #36	; 0x24
 81046e0:	2101      	movs	r1, #1
 81046e2:	4618      	mov	r0, r3
 81046e4:	f000 fc6e 	bl	8104fc4 <RCCEx_PLL3_Config>
 81046e8:	4603      	mov	r3, r0
 81046ea:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 81046ec:	e003      	b.n	81046f6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81046ee:	2301      	movs	r3, #1
 81046f0:	75fb      	strb	r3, [r7, #23]
      break;
 81046f2:	e000      	b.n	81046f6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 81046f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81046f6:	7dfb      	ldrb	r3, [r7, #23]
 81046f8:	2b00      	cmp	r3, #0
 81046fa:	d10a      	bne.n	8104712 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81046fc:	4b41      	ldr	r3, [pc, #260]	; (8104804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104700:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8104704:	687b      	ldr	r3, [r7, #4]
 8104706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810470a:	493e      	ldr	r1, [pc, #248]	; (8104804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810470c:	4313      	orrs	r3, r2
 810470e:	654b      	str	r3, [r1, #84]	; 0x54
 8104710:	e001      	b.n	8104716 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104712:	7dfb      	ldrb	r3, [r7, #23]
 8104714:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8104716:	687b      	ldr	r3, [r7, #4]
 8104718:	681b      	ldr	r3, [r3, #0]
 810471a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810471e:	2b00      	cmp	r3, #0
 8104720:	d029      	beq.n	8104776 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8104722:	687b      	ldr	r3, [r7, #4]
 8104724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104726:	2b00      	cmp	r3, #0
 8104728:	d003      	beq.n	8104732 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 810472a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810472e:	d007      	beq.n	8104740 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8104730:	e00f      	b.n	8104752 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104732:	4b34      	ldr	r3, [pc, #208]	; (8104804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104736:	4a33      	ldr	r2, [pc, #204]	; (8104804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810473c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810473e:	e00b      	b.n	8104758 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104740:	687b      	ldr	r3, [r7, #4]
 8104742:	3304      	adds	r3, #4
 8104744:	2102      	movs	r1, #2
 8104746:	4618      	mov	r0, r3
 8104748:	f000 fb8a 	bl	8104e60 <RCCEx_PLL2_Config>
 810474c:	4603      	mov	r3, r0
 810474e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8104750:	e002      	b.n	8104758 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8104752:	2301      	movs	r3, #1
 8104754:	75fb      	strb	r3, [r7, #23]
      break;
 8104756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104758:	7dfb      	ldrb	r3, [r7, #23]
 810475a:	2b00      	cmp	r3, #0
 810475c:	d109      	bne.n	8104772 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810475e:	4b29      	ldr	r3, [pc, #164]	; (8104804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104762:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8104766:	687b      	ldr	r3, [r7, #4]
 8104768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810476a:	4926      	ldr	r1, [pc, #152]	; (8104804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810476c:	4313      	orrs	r3, r2
 810476e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104770:	e001      	b.n	8104776 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104772:	7dfb      	ldrb	r3, [r7, #23]
 8104774:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104776:	687b      	ldr	r3, [r7, #4]
 8104778:	681b      	ldr	r3, [r3, #0]
 810477a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810477e:	2b00      	cmp	r3, #0
 8104780:	d00a      	beq.n	8104798 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8104782:	687b      	ldr	r3, [r7, #4]
 8104784:	3324      	adds	r3, #36	; 0x24
 8104786:	2102      	movs	r1, #2
 8104788:	4618      	mov	r0, r3
 810478a:	f000 fc1b 	bl	8104fc4 <RCCEx_PLL3_Config>
 810478e:	4603      	mov	r3, r0
 8104790:	2b00      	cmp	r3, #0
 8104792:	d001      	beq.n	8104798 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8104794:	2301      	movs	r3, #1
 8104796:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104798:	687b      	ldr	r3, [r7, #4]
 810479a:	681b      	ldr	r3, [r3, #0]
 810479c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81047a0:	2b00      	cmp	r3, #0
 81047a2:	d033      	beq.n	810480c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 81047a4:	687b      	ldr	r3, [r7, #4]
 81047a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81047a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81047ac:	d017      	beq.n	81047de <HAL_RCCEx_PeriphCLKConfig+0xd86>
 81047ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81047b2:	d811      	bhi.n	81047d8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 81047b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81047b8:	d013      	beq.n	81047e2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 81047ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81047be:	d80b      	bhi.n	81047d8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 81047c0:	2b00      	cmp	r3, #0
 81047c2:	d010      	beq.n	81047e6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 81047c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81047c8:	d106      	bne.n	81047d8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81047ca:	4b0e      	ldr	r3, [pc, #56]	; (8104804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81047cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81047ce:	4a0d      	ldr	r2, [pc, #52]	; (8104804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81047d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81047d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81047d6:	e007      	b.n	81047e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81047d8:	2301      	movs	r3, #1
 81047da:	75fb      	strb	r3, [r7, #23]
      break;
 81047dc:	e004      	b.n	81047e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81047de:	bf00      	nop
 81047e0:	e002      	b.n	81047e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81047e2:	bf00      	nop
 81047e4:	e000      	b.n	81047e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81047e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81047e8:	7dfb      	ldrb	r3, [r7, #23]
 81047ea:	2b00      	cmp	r3, #0
 81047ec:	d10c      	bne.n	8104808 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81047ee:	4b05      	ldr	r3, [pc, #20]	; (8104804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81047f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81047f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81047f6:	687b      	ldr	r3, [r7, #4]
 81047f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81047fa:	4902      	ldr	r1, [pc, #8]	; (8104804 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81047fc:	4313      	orrs	r3, r2
 81047fe:	654b      	str	r3, [r1, #84]	; 0x54
 8104800:	e004      	b.n	810480c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8104802:	bf00      	nop
 8104804:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104808:	7dfb      	ldrb	r3, [r7, #23]
 810480a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810480c:	687b      	ldr	r3, [r7, #4]
 810480e:	681b      	ldr	r3, [r3, #0]
 8104810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104814:	2b00      	cmp	r3, #0
 8104816:	d008      	beq.n	810482a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104818:	4b31      	ldr	r3, [pc, #196]	; (81048e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810481a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810481c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8104820:	687b      	ldr	r3, [r7, #4]
 8104822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104824:	492e      	ldr	r1, [pc, #184]	; (81048e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104826:	4313      	orrs	r3, r2
 8104828:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810482a:	687b      	ldr	r3, [r7, #4]
 810482c:	681b      	ldr	r3, [r3, #0]
 810482e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104832:	2b00      	cmp	r3, #0
 8104834:	d009      	beq.n	810484a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104836:	4b2a      	ldr	r3, [pc, #168]	; (81048e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104838:	691b      	ldr	r3, [r3, #16]
 810483a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810483e:	687b      	ldr	r3, [r7, #4]
 8104840:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104844:	4926      	ldr	r1, [pc, #152]	; (81048e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104846:	4313      	orrs	r3, r2
 8104848:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810484a:	687b      	ldr	r3, [r7, #4]
 810484c:	681b      	ldr	r3, [r3, #0]
 810484e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104852:	2b00      	cmp	r3, #0
 8104854:	d008      	beq.n	8104868 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8104856:	4b22      	ldr	r3, [pc, #136]	; (81048e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810485a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810485e:	687b      	ldr	r3, [r7, #4]
 8104860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8104862:	491f      	ldr	r1, [pc, #124]	; (81048e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104864:	4313      	orrs	r3, r2
 8104866:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104868:	687b      	ldr	r3, [r7, #4]
 810486a:	681b      	ldr	r3, [r3, #0]
 810486c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8104870:	2b00      	cmp	r3, #0
 8104872:	d00d      	beq.n	8104890 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104874:	4b1a      	ldr	r3, [pc, #104]	; (81048e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104876:	691b      	ldr	r3, [r3, #16]
 8104878:	4a19      	ldr	r2, [pc, #100]	; (81048e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810487a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810487e:	6113      	str	r3, [r2, #16]
 8104880:	4b17      	ldr	r3, [pc, #92]	; (81048e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104882:	691a      	ldr	r2, [r3, #16]
 8104884:	687b      	ldr	r3, [r7, #4]
 8104886:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810488a:	4915      	ldr	r1, [pc, #84]	; (81048e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810488c:	4313      	orrs	r3, r2
 810488e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104890:	687b      	ldr	r3, [r7, #4]
 8104892:	681b      	ldr	r3, [r3, #0]
 8104894:	2b00      	cmp	r3, #0
 8104896:	da08      	bge.n	81048aa <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104898:	4b11      	ldr	r3, [pc, #68]	; (81048e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810489a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810489c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81048a0:	687b      	ldr	r3, [r7, #4]
 81048a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81048a4:	490e      	ldr	r1, [pc, #56]	; (81048e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81048a6:	4313      	orrs	r3, r2
 81048a8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81048aa:	687b      	ldr	r3, [r7, #4]
 81048ac:	681b      	ldr	r3, [r3, #0]
 81048ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81048b2:	2b00      	cmp	r3, #0
 81048b4:	d009      	beq.n	81048ca <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81048b6:	4b0a      	ldr	r3, [pc, #40]	; (81048e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81048b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81048ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81048be:	687b      	ldr	r3, [r7, #4]
 81048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81048c4:	4906      	ldr	r1, [pc, #24]	; (81048e0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81048c6:	4313      	orrs	r3, r2
 81048c8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81048ca:	7dbb      	ldrb	r3, [r7, #22]
 81048cc:	2b00      	cmp	r3, #0
 81048ce:	d101      	bne.n	81048d4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 81048d0:	2300      	movs	r3, #0
 81048d2:	e000      	b.n	81048d6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 81048d4:	2301      	movs	r3, #1
}
 81048d6:	4618      	mov	r0, r3
 81048d8:	3718      	adds	r7, #24
 81048da:	46bd      	mov	sp, r7
 81048dc:	bd80      	pop	{r7, pc}
 81048de:	bf00      	nop
 81048e0:	58024400 	.word	0x58024400

081048e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81048e4:	b580      	push	{r7, lr}
 81048e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81048e8:	f7ff f858 	bl	810399c <HAL_RCC_GetHCLKFreq>
 81048ec:	4602      	mov	r2, r0
 81048ee:	4b06      	ldr	r3, [pc, #24]	; (8104908 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81048f0:	6a1b      	ldr	r3, [r3, #32]
 81048f2:	091b      	lsrs	r3, r3, #4
 81048f4:	f003 0307 	and.w	r3, r3, #7
 81048f8:	4904      	ldr	r1, [pc, #16]	; (810490c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81048fa:	5ccb      	ldrb	r3, [r1, r3]
 81048fc:	f003 031f 	and.w	r3, r3, #31
 8104900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8104904:	4618      	mov	r0, r3
 8104906:	bd80      	pop	{r7, pc}
 8104908:	58024400 	.word	0x58024400
 810490c:	081074c4 	.word	0x081074c4

08104910 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8104910:	b480      	push	{r7}
 8104912:	b089      	sub	sp, #36	; 0x24
 8104914:	af00      	add	r7, sp, #0
 8104916:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104918:	4ba1      	ldr	r3, [pc, #644]	; (8104ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810491c:	f003 0303 	and.w	r3, r3, #3
 8104920:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8104922:	4b9f      	ldr	r3, [pc, #636]	; (8104ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104926:	0b1b      	lsrs	r3, r3, #12
 8104928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810492c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810492e:	4b9c      	ldr	r3, [pc, #624]	; (8104ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104932:	091b      	lsrs	r3, r3, #4
 8104934:	f003 0301 	and.w	r3, r3, #1
 8104938:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810493a:	4b99      	ldr	r3, [pc, #612]	; (8104ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810493c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810493e:	08db      	lsrs	r3, r3, #3
 8104940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104944:	693a      	ldr	r2, [r7, #16]
 8104946:	fb02 f303 	mul.w	r3, r2, r3
 810494a:	ee07 3a90 	vmov	s15, r3
 810494e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104952:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8104956:	697b      	ldr	r3, [r7, #20]
 8104958:	2b00      	cmp	r3, #0
 810495a:	f000 8111 	beq.w	8104b80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810495e:	69bb      	ldr	r3, [r7, #24]
 8104960:	2b02      	cmp	r3, #2
 8104962:	f000 8083 	beq.w	8104a6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8104966:	69bb      	ldr	r3, [r7, #24]
 8104968:	2b02      	cmp	r3, #2
 810496a:	f200 80a1 	bhi.w	8104ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810496e:	69bb      	ldr	r3, [r7, #24]
 8104970:	2b00      	cmp	r3, #0
 8104972:	d003      	beq.n	810497c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8104974:	69bb      	ldr	r3, [r7, #24]
 8104976:	2b01      	cmp	r3, #1
 8104978:	d056      	beq.n	8104a28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810497a:	e099      	b.n	8104ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810497c:	4b88      	ldr	r3, [pc, #544]	; (8104ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810497e:	681b      	ldr	r3, [r3, #0]
 8104980:	f003 0320 	and.w	r3, r3, #32
 8104984:	2b00      	cmp	r3, #0
 8104986:	d02d      	beq.n	81049e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104988:	4b85      	ldr	r3, [pc, #532]	; (8104ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810498a:	681b      	ldr	r3, [r3, #0]
 810498c:	08db      	lsrs	r3, r3, #3
 810498e:	f003 0303 	and.w	r3, r3, #3
 8104992:	4a84      	ldr	r2, [pc, #528]	; (8104ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8104994:	fa22 f303 	lsr.w	r3, r2, r3
 8104998:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810499a:	68bb      	ldr	r3, [r7, #8]
 810499c:	ee07 3a90 	vmov	s15, r3
 81049a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81049a4:	697b      	ldr	r3, [r7, #20]
 81049a6:	ee07 3a90 	vmov	s15, r3
 81049aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81049ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81049b2:	4b7b      	ldr	r3, [pc, #492]	; (8104ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81049b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81049b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81049ba:	ee07 3a90 	vmov	s15, r3
 81049be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81049c2:	ed97 6a03 	vldr	s12, [r7, #12]
 81049c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81049ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81049ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81049d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81049d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81049da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81049de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81049e2:	e087      	b.n	8104af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81049e4:	697b      	ldr	r3, [r7, #20]
 81049e6:	ee07 3a90 	vmov	s15, r3
 81049ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81049ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104bac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81049f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81049f6:	4b6a      	ldr	r3, [pc, #424]	; (8104ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81049fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81049fe:	ee07 3a90 	vmov	s15, r3
 8104a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8104a0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104a22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104a26:	e065      	b.n	8104af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104a28:	697b      	ldr	r3, [r7, #20]
 8104a2a:	ee07 3a90 	vmov	s15, r3
 8104a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a3a:	4b59      	ldr	r3, [pc, #356]	; (8104ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a42:	ee07 3a90 	vmov	s15, r3
 8104a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8104a4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104a66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104a6a:	e043      	b.n	8104af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104a6c:	697b      	ldr	r3, [r7, #20]
 8104a6e:	ee07 3a90 	vmov	s15, r3
 8104a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8104a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a7e:	4b48      	ldr	r3, [pc, #288]	; (8104ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a86:	ee07 3a90 	vmov	s15, r3
 8104a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104a92:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104aaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104aae:	e021      	b.n	8104af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104ab0:	697b      	ldr	r3, [r7, #20]
 8104ab2:	ee07 3a90 	vmov	s15, r3
 8104ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104aba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104ac2:	4b37      	ldr	r3, [pc, #220]	; (8104ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104aca:	ee07 3a90 	vmov	s15, r3
 8104ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8104ad6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104aee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104af2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8104af4:	4b2a      	ldr	r3, [pc, #168]	; (8104ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104af8:	0a5b      	lsrs	r3, r3, #9
 8104afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104afe:	ee07 3a90 	vmov	s15, r3
 8104b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104b0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104b0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8104b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104b1a:	ee17 2a90 	vmov	r2, s15
 8104b1e:	687b      	ldr	r3, [r7, #4]
 8104b20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8104b22:	4b1f      	ldr	r3, [pc, #124]	; (8104ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104b26:	0c1b      	lsrs	r3, r3, #16
 8104b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104b2c:	ee07 3a90 	vmov	s15, r3
 8104b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104b38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104b3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8104b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104b48:	ee17 2a90 	vmov	r2, s15
 8104b4c:	687b      	ldr	r3, [r7, #4]
 8104b4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8104b50:	4b13      	ldr	r3, [pc, #76]	; (8104ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104b54:	0e1b      	lsrs	r3, r3, #24
 8104b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104b5a:	ee07 3a90 	vmov	s15, r3
 8104b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104b66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104b6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8104b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104b76:	ee17 2a90 	vmov	r2, s15
 8104b7a:	687b      	ldr	r3, [r7, #4]
 8104b7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8104b7e:	e008      	b.n	8104b92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8104b80:	687b      	ldr	r3, [r7, #4]
 8104b82:	2200      	movs	r2, #0
 8104b84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8104b86:	687b      	ldr	r3, [r7, #4]
 8104b88:	2200      	movs	r2, #0
 8104b8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8104b8c:	687b      	ldr	r3, [r7, #4]
 8104b8e:	2200      	movs	r2, #0
 8104b90:	609a      	str	r2, [r3, #8]
}
 8104b92:	bf00      	nop
 8104b94:	3724      	adds	r7, #36	; 0x24
 8104b96:	46bd      	mov	sp, r7
 8104b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b9c:	4770      	bx	lr
 8104b9e:	bf00      	nop
 8104ba0:	58024400 	.word	0x58024400
 8104ba4:	03d09000 	.word	0x03d09000
 8104ba8:	46000000 	.word	0x46000000
 8104bac:	4c742400 	.word	0x4c742400
 8104bb0:	4a742400 	.word	0x4a742400
 8104bb4:	4af42400 	.word	0x4af42400

08104bb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8104bb8:	b480      	push	{r7}
 8104bba:	b089      	sub	sp, #36	; 0x24
 8104bbc:	af00      	add	r7, sp, #0
 8104bbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104bc0:	4ba1      	ldr	r3, [pc, #644]	; (8104e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104bc4:	f003 0303 	and.w	r3, r3, #3
 8104bc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8104bca:	4b9f      	ldr	r3, [pc, #636]	; (8104e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104bce:	0d1b      	lsrs	r3, r3, #20
 8104bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104bd4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8104bd6:	4b9c      	ldr	r3, [pc, #624]	; (8104e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104bda:	0a1b      	lsrs	r3, r3, #8
 8104bdc:	f003 0301 	and.w	r3, r3, #1
 8104be0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8104be2:	4b99      	ldr	r3, [pc, #612]	; (8104e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104be6:	08db      	lsrs	r3, r3, #3
 8104be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104bec:	693a      	ldr	r2, [r7, #16]
 8104bee:	fb02 f303 	mul.w	r3, r2, r3
 8104bf2:	ee07 3a90 	vmov	s15, r3
 8104bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104bfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8104bfe:	697b      	ldr	r3, [r7, #20]
 8104c00:	2b00      	cmp	r3, #0
 8104c02:	f000 8111 	beq.w	8104e28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8104c06:	69bb      	ldr	r3, [r7, #24]
 8104c08:	2b02      	cmp	r3, #2
 8104c0a:	f000 8083 	beq.w	8104d14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8104c0e:	69bb      	ldr	r3, [r7, #24]
 8104c10:	2b02      	cmp	r3, #2
 8104c12:	f200 80a1 	bhi.w	8104d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8104c16:	69bb      	ldr	r3, [r7, #24]
 8104c18:	2b00      	cmp	r3, #0
 8104c1a:	d003      	beq.n	8104c24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8104c1c:	69bb      	ldr	r3, [r7, #24]
 8104c1e:	2b01      	cmp	r3, #1
 8104c20:	d056      	beq.n	8104cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8104c22:	e099      	b.n	8104d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104c24:	4b88      	ldr	r3, [pc, #544]	; (8104e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104c26:	681b      	ldr	r3, [r3, #0]
 8104c28:	f003 0320 	and.w	r3, r3, #32
 8104c2c:	2b00      	cmp	r3, #0
 8104c2e:	d02d      	beq.n	8104c8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104c30:	4b85      	ldr	r3, [pc, #532]	; (8104e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104c32:	681b      	ldr	r3, [r3, #0]
 8104c34:	08db      	lsrs	r3, r3, #3
 8104c36:	f003 0303 	and.w	r3, r3, #3
 8104c3a:	4a84      	ldr	r2, [pc, #528]	; (8104e4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8104c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8104c40:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104c42:	68bb      	ldr	r3, [r7, #8]
 8104c44:	ee07 3a90 	vmov	s15, r3
 8104c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c4c:	697b      	ldr	r3, [r7, #20]
 8104c4e:	ee07 3a90 	vmov	s15, r3
 8104c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c5a:	4b7b      	ldr	r3, [pc, #492]	; (8104e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c62:	ee07 3a90 	vmov	s15, r3
 8104c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8104c6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8104c8a:	e087      	b.n	8104d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104c8c:	697b      	ldr	r3, [r7, #20]
 8104c8e:	ee07 3a90 	vmov	s15, r3
 8104c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104e54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8104c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c9e:	4b6a      	ldr	r3, [pc, #424]	; (8104e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ca6:	ee07 3a90 	vmov	s15, r3
 8104caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8104cb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104cca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104cce:	e065      	b.n	8104d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104cd0:	697b      	ldr	r3, [r7, #20]
 8104cd2:	ee07 3a90 	vmov	s15, r3
 8104cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104cda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104ce2:	4b59      	ldr	r3, [pc, #356]	; (8104e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104cea:	ee07 3a90 	vmov	s15, r3
 8104cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8104cf6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104d0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104d12:	e043      	b.n	8104d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104d14:	697b      	ldr	r3, [r7, #20]
 8104d16:	ee07 3a90 	vmov	s15, r3
 8104d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104e5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8104d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104d26:	4b48      	ldr	r3, [pc, #288]	; (8104e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104d2e:	ee07 3a90 	vmov	s15, r3
 8104d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8104d3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104d52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104d56:	e021      	b.n	8104d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104d58:	697b      	ldr	r3, [r7, #20]
 8104d5a:	ee07 3a90 	vmov	s15, r3
 8104d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104d6a:	4b37      	ldr	r3, [pc, #220]	; (8104e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104d72:	ee07 3a90 	vmov	s15, r3
 8104d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8104d7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104d96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104d9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8104d9c:	4b2a      	ldr	r3, [pc, #168]	; (8104e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104da0:	0a5b      	lsrs	r3, r3, #9
 8104da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104da6:	ee07 3a90 	vmov	s15, r3
 8104daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104dae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8104dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104dc2:	ee17 2a90 	vmov	r2, s15
 8104dc6:	687b      	ldr	r3, [r7, #4]
 8104dc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8104dca:	4b1f      	ldr	r3, [pc, #124]	; (8104e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104dce:	0c1b      	lsrs	r3, r3, #16
 8104dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104dd4:	ee07 3a90 	vmov	s15, r3
 8104dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ddc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104de0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104de4:	edd7 6a07 	vldr	s13, [r7, #28]
 8104de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104df0:	ee17 2a90 	vmov	r2, s15
 8104df4:	687b      	ldr	r3, [r7, #4]
 8104df6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8104df8:	4b13      	ldr	r3, [pc, #76]	; (8104e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104dfc:	0e1b      	lsrs	r3, r3, #24
 8104dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104e02:	ee07 3a90 	vmov	s15, r3
 8104e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104e0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8104e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104e1e:	ee17 2a90 	vmov	r2, s15
 8104e22:	687b      	ldr	r3, [r7, #4]
 8104e24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8104e26:	e008      	b.n	8104e3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8104e28:	687b      	ldr	r3, [r7, #4]
 8104e2a:	2200      	movs	r2, #0
 8104e2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8104e2e:	687b      	ldr	r3, [r7, #4]
 8104e30:	2200      	movs	r2, #0
 8104e32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8104e34:	687b      	ldr	r3, [r7, #4]
 8104e36:	2200      	movs	r2, #0
 8104e38:	609a      	str	r2, [r3, #8]
}
 8104e3a:	bf00      	nop
 8104e3c:	3724      	adds	r7, #36	; 0x24
 8104e3e:	46bd      	mov	sp, r7
 8104e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e44:	4770      	bx	lr
 8104e46:	bf00      	nop
 8104e48:	58024400 	.word	0x58024400
 8104e4c:	03d09000 	.word	0x03d09000
 8104e50:	46000000 	.word	0x46000000
 8104e54:	4c742400 	.word	0x4c742400
 8104e58:	4a742400 	.word	0x4a742400
 8104e5c:	4af42400 	.word	0x4af42400

08104e60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104e60:	b580      	push	{r7, lr}
 8104e62:	b084      	sub	sp, #16
 8104e64:	af00      	add	r7, sp, #0
 8104e66:	6078      	str	r0, [r7, #4]
 8104e68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104e6a:	2300      	movs	r3, #0
 8104e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104e6e:	4b54      	ldr	r3, [pc, #336]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104e72:	f003 0303 	and.w	r3, r3, #3
 8104e76:	2b03      	cmp	r3, #3
 8104e78:	d101      	bne.n	8104e7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8104e7a:	2301      	movs	r3, #1
 8104e7c:	e09b      	b.n	8104fb6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8104e7e:	4b50      	ldr	r3, [pc, #320]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104e80:	681b      	ldr	r3, [r3, #0]
 8104e82:	4a4f      	ldr	r2, [pc, #316]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104e84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8104e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104e8a:	f7fc fdf7 	bl	8101a7c <HAL_GetTick>
 8104e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104e90:	e008      	b.n	8104ea4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104e92:	f7fc fdf3 	bl	8101a7c <HAL_GetTick>
 8104e96:	4602      	mov	r2, r0
 8104e98:	68bb      	ldr	r3, [r7, #8]
 8104e9a:	1ad3      	subs	r3, r2, r3
 8104e9c:	2b02      	cmp	r3, #2
 8104e9e:	d901      	bls.n	8104ea4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104ea0:	2303      	movs	r3, #3
 8104ea2:	e088      	b.n	8104fb6 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104ea4:	4b46      	ldr	r3, [pc, #280]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104ea6:	681b      	ldr	r3, [r3, #0]
 8104ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104eac:	2b00      	cmp	r3, #0
 8104eae:	d1f0      	bne.n	8104e92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8104eb0:	4b43      	ldr	r3, [pc, #268]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104eb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8104eb8:	687b      	ldr	r3, [r7, #4]
 8104eba:	681b      	ldr	r3, [r3, #0]
 8104ebc:	031b      	lsls	r3, r3, #12
 8104ebe:	4940      	ldr	r1, [pc, #256]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104ec0:	4313      	orrs	r3, r2
 8104ec2:	628b      	str	r3, [r1, #40]	; 0x28
 8104ec4:	687b      	ldr	r3, [r7, #4]
 8104ec6:	685b      	ldr	r3, [r3, #4]
 8104ec8:	3b01      	subs	r3, #1
 8104eca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104ece:	687b      	ldr	r3, [r7, #4]
 8104ed0:	689b      	ldr	r3, [r3, #8]
 8104ed2:	3b01      	subs	r3, #1
 8104ed4:	025b      	lsls	r3, r3, #9
 8104ed6:	b29b      	uxth	r3, r3
 8104ed8:	431a      	orrs	r2, r3
 8104eda:	687b      	ldr	r3, [r7, #4]
 8104edc:	68db      	ldr	r3, [r3, #12]
 8104ede:	3b01      	subs	r3, #1
 8104ee0:	041b      	lsls	r3, r3, #16
 8104ee2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104ee6:	431a      	orrs	r2, r3
 8104ee8:	687b      	ldr	r3, [r7, #4]
 8104eea:	691b      	ldr	r3, [r3, #16]
 8104eec:	3b01      	subs	r3, #1
 8104eee:	061b      	lsls	r3, r3, #24
 8104ef0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104ef4:	4932      	ldr	r1, [pc, #200]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104ef6:	4313      	orrs	r3, r2
 8104ef8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104efa:	4b31      	ldr	r3, [pc, #196]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104efe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8104f02:	687b      	ldr	r3, [r7, #4]
 8104f04:	695b      	ldr	r3, [r3, #20]
 8104f06:	492e      	ldr	r1, [pc, #184]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104f08:	4313      	orrs	r3, r2
 8104f0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104f0c:	4b2c      	ldr	r3, [pc, #176]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f10:	f023 0220 	bic.w	r2, r3, #32
 8104f14:	687b      	ldr	r3, [r7, #4]
 8104f16:	699b      	ldr	r3, [r3, #24]
 8104f18:	4929      	ldr	r1, [pc, #164]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104f1a:	4313      	orrs	r3, r2
 8104f1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8104f1e:	4b28      	ldr	r3, [pc, #160]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f22:	4a27      	ldr	r2, [pc, #156]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104f24:	f023 0310 	bic.w	r3, r3, #16
 8104f28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104f2a:	4b25      	ldr	r3, [pc, #148]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104f32:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104f36:	687a      	ldr	r2, [r7, #4]
 8104f38:	69d2      	ldr	r2, [r2, #28]
 8104f3a:	00d2      	lsls	r2, r2, #3
 8104f3c:	4920      	ldr	r1, [pc, #128]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104f3e:	4313      	orrs	r3, r2
 8104f40:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104f42:	4b1f      	ldr	r3, [pc, #124]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f46:	4a1e      	ldr	r2, [pc, #120]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104f48:	f043 0310 	orr.w	r3, r3, #16
 8104f4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8104f4e:	683b      	ldr	r3, [r7, #0]
 8104f50:	2b00      	cmp	r3, #0
 8104f52:	d106      	bne.n	8104f62 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104f54:	4b1a      	ldr	r3, [pc, #104]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f58:	4a19      	ldr	r2, [pc, #100]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104f5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8104f5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104f60:	e00f      	b.n	8104f82 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8104f62:	683b      	ldr	r3, [r7, #0]
 8104f64:	2b01      	cmp	r3, #1
 8104f66:	d106      	bne.n	8104f76 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104f68:	4b15      	ldr	r3, [pc, #84]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f6c:	4a14      	ldr	r2, [pc, #80]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8104f72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104f74:	e005      	b.n	8104f82 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104f76:	4b12      	ldr	r3, [pc, #72]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f7a:	4a11      	ldr	r2, [pc, #68]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104f7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8104f80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8104f82:	4b0f      	ldr	r3, [pc, #60]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104f84:	681b      	ldr	r3, [r3, #0]
 8104f86:	4a0e      	ldr	r2, [pc, #56]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104f88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8104f8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104f8e:	f7fc fd75 	bl	8101a7c <HAL_GetTick>
 8104f92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104f94:	e008      	b.n	8104fa8 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104f96:	f7fc fd71 	bl	8101a7c <HAL_GetTick>
 8104f9a:	4602      	mov	r2, r0
 8104f9c:	68bb      	ldr	r3, [r7, #8]
 8104f9e:	1ad3      	subs	r3, r2, r3
 8104fa0:	2b02      	cmp	r3, #2
 8104fa2:	d901      	bls.n	8104fa8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104fa4:	2303      	movs	r3, #3
 8104fa6:	e006      	b.n	8104fb6 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104fa8:	4b05      	ldr	r3, [pc, #20]	; (8104fc0 <RCCEx_PLL2_Config+0x160>)
 8104faa:	681b      	ldr	r3, [r3, #0]
 8104fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104fb0:	2b00      	cmp	r3, #0
 8104fb2:	d0f0      	beq.n	8104f96 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8104fb6:	4618      	mov	r0, r3
 8104fb8:	3710      	adds	r7, #16
 8104fba:	46bd      	mov	sp, r7
 8104fbc:	bd80      	pop	{r7, pc}
 8104fbe:	bf00      	nop
 8104fc0:	58024400 	.word	0x58024400

08104fc4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104fc4:	b580      	push	{r7, lr}
 8104fc6:	b084      	sub	sp, #16
 8104fc8:	af00      	add	r7, sp, #0
 8104fca:	6078      	str	r0, [r7, #4]
 8104fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104fce:	2300      	movs	r3, #0
 8104fd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104fd2:	4b54      	ldr	r3, [pc, #336]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 8104fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104fd6:	f003 0303 	and.w	r3, r3, #3
 8104fda:	2b03      	cmp	r3, #3
 8104fdc:	d101      	bne.n	8104fe2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8104fde:	2301      	movs	r3, #1
 8104fe0:	e09b      	b.n	810511a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104fe2:	4b50      	ldr	r3, [pc, #320]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 8104fe4:	681b      	ldr	r3, [r3, #0]
 8104fe6:	4a4f      	ldr	r2, [pc, #316]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 8104fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8104fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104fee:	f7fc fd45 	bl	8101a7c <HAL_GetTick>
 8104ff2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104ff4:	e008      	b.n	8105008 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104ff6:	f7fc fd41 	bl	8101a7c <HAL_GetTick>
 8104ffa:	4602      	mov	r2, r0
 8104ffc:	68bb      	ldr	r3, [r7, #8]
 8104ffe:	1ad3      	subs	r3, r2, r3
 8105000:	2b02      	cmp	r3, #2
 8105002:	d901      	bls.n	8105008 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105004:	2303      	movs	r3, #3
 8105006:	e088      	b.n	810511a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105008:	4b46      	ldr	r3, [pc, #280]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 810500a:	681b      	ldr	r3, [r3, #0]
 810500c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105010:	2b00      	cmp	r3, #0
 8105012:	d1f0      	bne.n	8104ff6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8105014:	4b43      	ldr	r3, [pc, #268]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 8105016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105018:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810501c:	687b      	ldr	r3, [r7, #4]
 810501e:	681b      	ldr	r3, [r3, #0]
 8105020:	051b      	lsls	r3, r3, #20
 8105022:	4940      	ldr	r1, [pc, #256]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 8105024:	4313      	orrs	r3, r2
 8105026:	628b      	str	r3, [r1, #40]	; 0x28
 8105028:	687b      	ldr	r3, [r7, #4]
 810502a:	685b      	ldr	r3, [r3, #4]
 810502c:	3b01      	subs	r3, #1
 810502e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105032:	687b      	ldr	r3, [r7, #4]
 8105034:	689b      	ldr	r3, [r3, #8]
 8105036:	3b01      	subs	r3, #1
 8105038:	025b      	lsls	r3, r3, #9
 810503a:	b29b      	uxth	r3, r3
 810503c:	431a      	orrs	r2, r3
 810503e:	687b      	ldr	r3, [r7, #4]
 8105040:	68db      	ldr	r3, [r3, #12]
 8105042:	3b01      	subs	r3, #1
 8105044:	041b      	lsls	r3, r3, #16
 8105046:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810504a:	431a      	orrs	r2, r3
 810504c:	687b      	ldr	r3, [r7, #4]
 810504e:	691b      	ldr	r3, [r3, #16]
 8105050:	3b01      	subs	r3, #1
 8105052:	061b      	lsls	r3, r3, #24
 8105054:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105058:	4932      	ldr	r1, [pc, #200]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 810505a:	4313      	orrs	r3, r2
 810505c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810505e:	4b31      	ldr	r3, [pc, #196]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 8105060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105062:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8105066:	687b      	ldr	r3, [r7, #4]
 8105068:	695b      	ldr	r3, [r3, #20]
 810506a:	492e      	ldr	r1, [pc, #184]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 810506c:	4313      	orrs	r3, r2
 810506e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8105070:	4b2c      	ldr	r3, [pc, #176]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 8105072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105074:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8105078:	687b      	ldr	r3, [r7, #4]
 810507a:	699b      	ldr	r3, [r3, #24]
 810507c:	4929      	ldr	r1, [pc, #164]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 810507e:	4313      	orrs	r3, r2
 8105080:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8105082:	4b28      	ldr	r3, [pc, #160]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 8105084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105086:	4a27      	ldr	r2, [pc, #156]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 8105088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810508c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810508e:	4b25      	ldr	r3, [pc, #148]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 8105090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105092:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105096:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810509a:	687a      	ldr	r2, [r7, #4]
 810509c:	69d2      	ldr	r2, [r2, #28]
 810509e:	00d2      	lsls	r2, r2, #3
 81050a0:	4920      	ldr	r1, [pc, #128]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 81050a2:	4313      	orrs	r3, r2
 81050a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81050a6:	4b1f      	ldr	r3, [pc, #124]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 81050a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81050aa:	4a1e      	ldr	r2, [pc, #120]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 81050ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81050b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81050b2:	683b      	ldr	r3, [r7, #0]
 81050b4:	2b00      	cmp	r3, #0
 81050b6:	d106      	bne.n	81050c6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81050b8:	4b1a      	ldr	r3, [pc, #104]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 81050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81050bc:	4a19      	ldr	r2, [pc, #100]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 81050be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81050c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81050c4:	e00f      	b.n	81050e6 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81050c6:	683b      	ldr	r3, [r7, #0]
 81050c8:	2b01      	cmp	r3, #1
 81050ca:	d106      	bne.n	81050da <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81050cc:	4b15      	ldr	r3, [pc, #84]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 81050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81050d0:	4a14      	ldr	r2, [pc, #80]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 81050d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81050d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81050d8:	e005      	b.n	81050e6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81050da:	4b12      	ldr	r3, [pc, #72]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 81050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81050de:	4a11      	ldr	r2, [pc, #68]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 81050e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81050e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81050e6:	4b0f      	ldr	r3, [pc, #60]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 81050e8:	681b      	ldr	r3, [r3, #0]
 81050ea:	4a0e      	ldr	r2, [pc, #56]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 81050ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81050f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81050f2:	f7fc fcc3 	bl	8101a7c <HAL_GetTick>
 81050f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81050f8:	e008      	b.n	810510c <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81050fa:	f7fc fcbf 	bl	8101a7c <HAL_GetTick>
 81050fe:	4602      	mov	r2, r0
 8105100:	68bb      	ldr	r3, [r7, #8]
 8105102:	1ad3      	subs	r3, r2, r3
 8105104:	2b02      	cmp	r3, #2
 8105106:	d901      	bls.n	810510c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105108:	2303      	movs	r3, #3
 810510a:	e006      	b.n	810511a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810510c:	4b05      	ldr	r3, [pc, #20]	; (8105124 <RCCEx_PLL3_Config+0x160>)
 810510e:	681b      	ldr	r3, [r3, #0]
 8105110:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105114:	2b00      	cmp	r3, #0
 8105116:	d0f0      	beq.n	81050fa <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8105118:	7bfb      	ldrb	r3, [r7, #15]
}
 810511a:	4618      	mov	r0, r3
 810511c:	3710      	adds	r7, #16
 810511e:	46bd      	mov	sp, r7
 8105120:	bd80      	pop	{r7, pc}
 8105122:	bf00      	nop
 8105124:	58024400 	.word	0x58024400

08105128 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8105128:	b580      	push	{r7, lr}
 810512a:	b084      	sub	sp, #16
 810512c:	af00      	add	r7, sp, #0
 810512e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8105130:	2301      	movs	r3, #1
 8105132:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8105134:	687b      	ldr	r3, [r7, #4]
 8105136:	2b00      	cmp	r3, #0
 8105138:	d069      	beq.n	810520e <HAL_RTC_Init+0xe6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 810513a:	687b      	ldr	r3, [r7, #4]
 810513c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8105140:	b2db      	uxtb	r3, r3
 8105142:	2b00      	cmp	r3, #0
 8105144:	d106      	bne.n	8105154 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8105146:	687b      	ldr	r3, [r7, #4]
 8105148:	2200      	movs	r2, #0
 810514a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 810514e:	6878      	ldr	r0, [r7, #4]
 8105150:	f7fc fa82 	bl	8101658 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8105154:	687b      	ldr	r3, [r7, #4]
 8105156:	2202      	movs	r2, #2
 8105158:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 810515c:	687b      	ldr	r3, [r7, #4]
 810515e:	681b      	ldr	r3, [r3, #0]
 8105160:	22ca      	movs	r2, #202	; 0xca
 8105162:	625a      	str	r2, [r3, #36]	; 0x24
 8105164:	687b      	ldr	r3, [r7, #4]
 8105166:	681b      	ldr	r3, [r3, #0]
 8105168:	2253      	movs	r2, #83	; 0x53
 810516a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 810516c:	6878      	ldr	r0, [r7, #4]
 810516e:	f000 fa46 	bl	81055fe <RTC_EnterInitMode>
 8105172:	4603      	mov	r3, r0
 8105174:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8105176:	7bfb      	ldrb	r3, [r7, #15]
 8105178:	2b00      	cmp	r3, #0
 810517a:	d13d      	bne.n	81051f8 <HAL_RTC_Init+0xd0>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 810517c:	687b      	ldr	r3, [r7, #4]
 810517e:	681b      	ldr	r3, [r3, #0]
 8105180:	689b      	ldr	r3, [r3, #8]
 8105182:	687a      	ldr	r2, [r7, #4]
 8105184:	6812      	ldr	r2, [r2, #0]
 8105186:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810518a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810518e:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8105190:	687b      	ldr	r3, [r7, #4]
 8105192:	681b      	ldr	r3, [r3, #0]
 8105194:	6899      	ldr	r1, [r3, #8]
 8105196:	687b      	ldr	r3, [r7, #4]
 8105198:	685a      	ldr	r2, [r3, #4]
 810519a:	687b      	ldr	r3, [r7, #4]
 810519c:	691b      	ldr	r3, [r3, #16]
 810519e:	431a      	orrs	r2, r3
 81051a0:	687b      	ldr	r3, [r7, #4]
 81051a2:	699b      	ldr	r3, [r3, #24]
 81051a4:	431a      	orrs	r2, r3
 81051a6:	687b      	ldr	r3, [r7, #4]
 81051a8:	681b      	ldr	r3, [r3, #0]
 81051aa:	430a      	orrs	r2, r1
 81051ac:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 81051ae:	687b      	ldr	r3, [r7, #4]
 81051b0:	689b      	ldr	r3, [r3, #8]
 81051b2:	0419      	lsls	r1, r3, #16
 81051b4:	687b      	ldr	r3, [r7, #4]
 81051b6:	68da      	ldr	r2, [r3, #12]
 81051b8:	687b      	ldr	r3, [r7, #4]
 81051ba:	681b      	ldr	r3, [r3, #0]
 81051bc:	430a      	orrs	r2, r1
 81051be:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 81051c0:	6878      	ldr	r0, [r7, #4]
 81051c2:	f000 fa4f 	bl	8105664 <RTC_ExitInitMode>
 81051c6:	4603      	mov	r3, r0
 81051c8:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 81051ca:	7bfb      	ldrb	r3, [r7, #15]
 81051cc:	2b00      	cmp	r3, #0
 81051ce:	d113      	bne.n	81051f8 <HAL_RTC_Init+0xd0>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 81051d0:	687b      	ldr	r3, [r7, #4]
 81051d2:	681b      	ldr	r3, [r3, #0]
 81051d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81051d6:	687b      	ldr	r3, [r7, #4]
 81051d8:	681b      	ldr	r3, [r3, #0]
 81051da:	f022 0203 	bic.w	r2, r2, #3
 81051de:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 81051e0:	687b      	ldr	r3, [r7, #4]
 81051e2:	681b      	ldr	r3, [r3, #0]
 81051e4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 81051e6:	687b      	ldr	r3, [r7, #4]
 81051e8:	69da      	ldr	r2, [r3, #28]
 81051ea:	687b      	ldr	r3, [r7, #4]
 81051ec:	695b      	ldr	r3, [r3, #20]
 81051ee:	431a      	orrs	r2, r3
 81051f0:	687b      	ldr	r3, [r7, #4]
 81051f2:	681b      	ldr	r3, [r3, #0]
 81051f4:	430a      	orrs	r2, r1
 81051f6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 81051f8:	687b      	ldr	r3, [r7, #4]
 81051fa:	681b      	ldr	r3, [r3, #0]
 81051fc:	22ff      	movs	r2, #255	; 0xff
 81051fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8105200:	7bfb      	ldrb	r3, [r7, #15]
 8105202:	2b00      	cmp	r3, #0
 8105204:	d103      	bne.n	810520e <HAL_RTC_Init+0xe6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8105206:	687b      	ldr	r3, [r7, #4]
 8105208:	2201      	movs	r2, #1
 810520a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 810520e:	7bfb      	ldrb	r3, [r7, #15]
}
 8105210:	4618      	mov	r0, r3
 8105212:	3710      	adds	r7, #16
 8105214:	46bd      	mov	sp, r7
 8105216:	bd80      	pop	{r7, pc}

08105218 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8105218:	b590      	push	{r4, r7, lr}
 810521a:	b087      	sub	sp, #28
 810521c:	af00      	add	r7, sp, #0
 810521e:	60f8      	str	r0, [r7, #12]
 8105220:	60b9      	str	r1, [r7, #8]
 8105222:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8105224:	68fb      	ldr	r3, [r7, #12]
 8105226:	f893 3020 	ldrb.w	r3, [r3, #32]
 810522a:	2b01      	cmp	r3, #1
 810522c:	d101      	bne.n	8105232 <HAL_RTC_SetTime+0x1a>
 810522e:	2302      	movs	r3, #2
 8105230:	e08b      	b.n	810534a <HAL_RTC_SetTime+0x132>
 8105232:	68fb      	ldr	r3, [r7, #12]
 8105234:	2201      	movs	r2, #1
 8105236:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 810523a:	68fb      	ldr	r3, [r7, #12]
 810523c:	2202      	movs	r2, #2
 810523e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8105242:	68fb      	ldr	r3, [r7, #12]
 8105244:	681b      	ldr	r3, [r3, #0]
 8105246:	22ca      	movs	r2, #202	; 0xca
 8105248:	625a      	str	r2, [r3, #36]	; 0x24
 810524a:	68fb      	ldr	r3, [r7, #12]
 810524c:	681b      	ldr	r3, [r3, #0]
 810524e:	2253      	movs	r2, #83	; 0x53
 8105250:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8105252:	68f8      	ldr	r0, [r7, #12]
 8105254:	f000 f9d3 	bl	81055fe <RTC_EnterInitMode>
 8105258:	4603      	mov	r3, r0
 810525a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 810525c:	7cfb      	ldrb	r3, [r7, #19]
 810525e:	2b00      	cmp	r3, #0
 8105260:	d163      	bne.n	810532a <HAL_RTC_SetTime+0x112>
  {
    if(Format == RTC_FORMAT_BIN)
 8105262:	687b      	ldr	r3, [r7, #4]
 8105264:	2b00      	cmp	r3, #0
 8105266:	d126      	bne.n	81052b6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8105268:	68fb      	ldr	r3, [r7, #12]
 810526a:	681b      	ldr	r3, [r3, #0]
 810526c:	689b      	ldr	r3, [r3, #8]
 810526e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105272:	2b00      	cmp	r3, #0
 8105274:	d102      	bne.n	810527c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8105276:	68bb      	ldr	r3, [r7, #8]
 8105278:	2200      	movs	r2, #0
 810527a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 810527c:	68bb      	ldr	r3, [r7, #8]
 810527e:	781b      	ldrb	r3, [r3, #0]
 8105280:	4618      	mov	r0, r3
 8105282:	f000 fa2d 	bl	81056e0 <RTC_ByteToBcd2>
 8105286:	4603      	mov	r3, r0
 8105288:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 810528a:	68bb      	ldr	r3, [r7, #8]
 810528c:	785b      	ldrb	r3, [r3, #1]
 810528e:	4618      	mov	r0, r3
 8105290:	f000 fa26 	bl	81056e0 <RTC_ByteToBcd2>
 8105294:	4603      	mov	r3, r0
 8105296:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8105298:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 810529a:	68bb      	ldr	r3, [r7, #8]
 810529c:	789b      	ldrb	r3, [r3, #2]
 810529e:	4618      	mov	r0, r3
 81052a0:	f000 fa1e 	bl	81056e0 <RTC_ByteToBcd2>
 81052a4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 81052a6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 81052aa:	68bb      	ldr	r3, [r7, #8]
 81052ac:	78db      	ldrb	r3, [r3, #3]
 81052ae:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 81052b0:	4313      	orrs	r3, r2
 81052b2:	617b      	str	r3, [r7, #20]
 81052b4:	e018      	b.n	81052e8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 81052b6:	68fb      	ldr	r3, [r7, #12]
 81052b8:	681b      	ldr	r3, [r3, #0]
 81052ba:	689b      	ldr	r3, [r3, #8]
 81052bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81052c0:	2b00      	cmp	r3, #0
 81052c2:	d102      	bne.n	81052ca <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 81052c4:	68bb      	ldr	r3, [r7, #8]
 81052c6:	2200      	movs	r2, #0
 81052c8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 81052ca:	68bb      	ldr	r3, [r7, #8]
 81052cc:	781b      	ldrb	r3, [r3, #0]
 81052ce:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 81052d0:	68bb      	ldr	r3, [r7, #8]
 81052d2:	785b      	ldrb	r3, [r3, #1]
 81052d4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 81052d6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 81052d8:	68ba      	ldr	r2, [r7, #8]
 81052da:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 81052dc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 81052de:	68bb      	ldr	r3, [r7, #8]
 81052e0:	78db      	ldrb	r3, [r3, #3]
 81052e2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 81052e4:	4313      	orrs	r3, r2
 81052e6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 81052e8:	68fb      	ldr	r3, [r7, #12]
 81052ea:	681a      	ldr	r2, [r3, #0]
 81052ec:	697b      	ldr	r3, [r7, #20]
 81052ee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 81052f2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 81052f6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 81052f8:	68fb      	ldr	r3, [r7, #12]
 81052fa:	681b      	ldr	r3, [r3, #0]
 81052fc:	689a      	ldr	r2, [r3, #8]
 81052fe:	68fb      	ldr	r3, [r7, #12]
 8105300:	681b      	ldr	r3, [r3, #0]
 8105302:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8105306:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8105308:	68fb      	ldr	r3, [r7, #12]
 810530a:	681b      	ldr	r3, [r3, #0]
 810530c:	6899      	ldr	r1, [r3, #8]
 810530e:	68bb      	ldr	r3, [r7, #8]
 8105310:	68da      	ldr	r2, [r3, #12]
 8105312:	68bb      	ldr	r3, [r7, #8]
 8105314:	691b      	ldr	r3, [r3, #16]
 8105316:	431a      	orrs	r2, r3
 8105318:	68fb      	ldr	r3, [r7, #12]
 810531a:	681b      	ldr	r3, [r3, #0]
 810531c:	430a      	orrs	r2, r1
 810531e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8105320:	68f8      	ldr	r0, [r7, #12]
 8105322:	f000 f99f 	bl	8105664 <RTC_ExitInitMode>
 8105326:	4603      	mov	r3, r0
 8105328:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 810532a:	68fb      	ldr	r3, [r7, #12]
 810532c:	681b      	ldr	r3, [r3, #0]
 810532e:	22ff      	movs	r2, #255	; 0xff
 8105330:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8105332:	7cfb      	ldrb	r3, [r7, #19]
 8105334:	2b00      	cmp	r3, #0
 8105336:	d103      	bne.n	8105340 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8105338:	68fb      	ldr	r3, [r7, #12]
 810533a:	2201      	movs	r2, #1
 810533c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8105340:	68fb      	ldr	r3, [r7, #12]
 8105342:	2200      	movs	r2, #0
 8105344:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8105348:	7cfb      	ldrb	r3, [r7, #19]
}
 810534a:	4618      	mov	r0, r3
 810534c:	371c      	adds	r7, #28
 810534e:	46bd      	mov	sp, r7
 8105350:	bd90      	pop	{r4, r7, pc}

08105352 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8105352:	b580      	push	{r7, lr}
 8105354:	b086      	sub	sp, #24
 8105356:	af00      	add	r7, sp, #0
 8105358:	60f8      	str	r0, [r7, #12]
 810535a:	60b9      	str	r1, [r7, #8]
 810535c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 810535e:	68fb      	ldr	r3, [r7, #12]
 8105360:	681b      	ldr	r3, [r3, #0]
 8105362:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8105364:	68bb      	ldr	r3, [r7, #8]
 8105366:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8105368:	68fb      	ldr	r3, [r7, #12]
 810536a:	681b      	ldr	r3, [r3, #0]
 810536c:	691b      	ldr	r3, [r3, #16]
 810536e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8105372:	68bb      	ldr	r3, [r7, #8]
 8105374:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8105376:	68fb      	ldr	r3, [r7, #12]
 8105378:	681b      	ldr	r3, [r3, #0]
 810537a:	681b      	ldr	r3, [r3, #0]
 810537c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8105380:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8105384:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8105386:	697b      	ldr	r3, [r7, #20]
 8105388:	0c1b      	lsrs	r3, r3, #16
 810538a:	b2db      	uxtb	r3, r3
 810538c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105390:	b2da      	uxtb	r2, r3
 8105392:	68bb      	ldr	r3, [r7, #8]
 8105394:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8105396:	697b      	ldr	r3, [r7, #20]
 8105398:	0a1b      	lsrs	r3, r3, #8
 810539a:	b2db      	uxtb	r3, r3
 810539c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81053a0:	b2da      	uxtb	r2, r3
 81053a2:	68bb      	ldr	r3, [r7, #8]
 81053a4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 81053a6:	697b      	ldr	r3, [r7, #20]
 81053a8:	b2db      	uxtb	r3, r3
 81053aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81053ae:	b2da      	uxtb	r2, r3
 81053b0:	68bb      	ldr	r3, [r7, #8]
 81053b2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 81053b4:	697b      	ldr	r3, [r7, #20]
 81053b6:	0d9b      	lsrs	r3, r3, #22
 81053b8:	b2db      	uxtb	r3, r3
 81053ba:	f003 0301 	and.w	r3, r3, #1
 81053be:	b2da      	uxtb	r2, r3
 81053c0:	68bb      	ldr	r3, [r7, #8]
 81053c2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 81053c4:	687b      	ldr	r3, [r7, #4]
 81053c6:	2b00      	cmp	r3, #0
 81053c8:	d11a      	bne.n	8105400 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 81053ca:	68bb      	ldr	r3, [r7, #8]
 81053cc:	781b      	ldrb	r3, [r3, #0]
 81053ce:	4618      	mov	r0, r3
 81053d0:	f000 f9a6 	bl	8105720 <RTC_Bcd2ToByte>
 81053d4:	4603      	mov	r3, r0
 81053d6:	461a      	mov	r2, r3
 81053d8:	68bb      	ldr	r3, [r7, #8]
 81053da:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 81053dc:	68bb      	ldr	r3, [r7, #8]
 81053de:	785b      	ldrb	r3, [r3, #1]
 81053e0:	4618      	mov	r0, r3
 81053e2:	f000 f99d 	bl	8105720 <RTC_Bcd2ToByte>
 81053e6:	4603      	mov	r3, r0
 81053e8:	461a      	mov	r2, r3
 81053ea:	68bb      	ldr	r3, [r7, #8]
 81053ec:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 81053ee:	68bb      	ldr	r3, [r7, #8]
 81053f0:	789b      	ldrb	r3, [r3, #2]
 81053f2:	4618      	mov	r0, r3
 81053f4:	f000 f994 	bl	8105720 <RTC_Bcd2ToByte>
 81053f8:	4603      	mov	r3, r0
 81053fa:	461a      	mov	r2, r3
 81053fc:	68bb      	ldr	r3, [r7, #8]
 81053fe:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8105400:	2300      	movs	r3, #0
}
 8105402:	4618      	mov	r0, r3
 8105404:	3718      	adds	r7, #24
 8105406:	46bd      	mov	sp, r7
 8105408:	bd80      	pop	{r7, pc}

0810540a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 810540a:	b590      	push	{r4, r7, lr}
 810540c:	b087      	sub	sp, #28
 810540e:	af00      	add	r7, sp, #0
 8105410:	60f8      	str	r0, [r7, #12]
 8105412:	60b9      	str	r1, [r7, #8]
 8105414:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8105416:	68fb      	ldr	r3, [r7, #12]
 8105418:	f893 3020 	ldrb.w	r3, [r3, #32]
 810541c:	2b01      	cmp	r3, #1
 810541e:	d101      	bne.n	8105424 <HAL_RTC_SetDate+0x1a>
 8105420:	2302      	movs	r3, #2
 8105422:	e075      	b.n	8105510 <HAL_RTC_SetDate+0x106>
 8105424:	68fb      	ldr	r3, [r7, #12]
 8105426:	2201      	movs	r2, #1
 8105428:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 810542c:	68fb      	ldr	r3, [r7, #12]
 810542e:	2202      	movs	r2, #2
 8105430:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8105434:	687b      	ldr	r3, [r7, #4]
 8105436:	2b00      	cmp	r3, #0
 8105438:	d10e      	bne.n	8105458 <HAL_RTC_SetDate+0x4e>
 810543a:	68bb      	ldr	r3, [r7, #8]
 810543c:	785b      	ldrb	r3, [r3, #1]
 810543e:	f003 0310 	and.w	r3, r3, #16
 8105442:	2b00      	cmp	r3, #0
 8105444:	d008      	beq.n	8105458 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8105446:	68bb      	ldr	r3, [r7, #8]
 8105448:	785b      	ldrb	r3, [r3, #1]
 810544a:	f023 0310 	bic.w	r3, r3, #16
 810544e:	b2db      	uxtb	r3, r3
 8105450:	330a      	adds	r3, #10
 8105452:	b2da      	uxtb	r2, r3
 8105454:	68bb      	ldr	r3, [r7, #8]
 8105456:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8105458:	687b      	ldr	r3, [r7, #4]
 810545a:	2b00      	cmp	r3, #0
 810545c:	d11c      	bne.n	8105498 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 810545e:	68bb      	ldr	r3, [r7, #8]
 8105460:	78db      	ldrb	r3, [r3, #3]
 8105462:	4618      	mov	r0, r3
 8105464:	f000 f93c 	bl	81056e0 <RTC_ByteToBcd2>
 8105468:	4603      	mov	r3, r0
 810546a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 810546c:	68bb      	ldr	r3, [r7, #8]
 810546e:	785b      	ldrb	r3, [r3, #1]
 8105470:	4618      	mov	r0, r3
 8105472:	f000 f935 	bl	81056e0 <RTC_ByteToBcd2>
 8105476:	4603      	mov	r3, r0
 8105478:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 810547a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 810547c:	68bb      	ldr	r3, [r7, #8]
 810547e:	789b      	ldrb	r3, [r3, #2]
 8105480:	4618      	mov	r0, r3
 8105482:	f000 f92d 	bl	81056e0 <RTC_ByteToBcd2>
 8105486:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8105488:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 810548c:	68bb      	ldr	r3, [r7, #8]
 810548e:	781b      	ldrb	r3, [r3, #0]
 8105490:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8105492:	4313      	orrs	r3, r2
 8105494:	617b      	str	r3, [r7, #20]
 8105496:	e00e      	b.n	81054b6 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8105498:	68bb      	ldr	r3, [r7, #8]
 810549a:	78db      	ldrb	r3, [r3, #3]
 810549c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 810549e:	68bb      	ldr	r3, [r7, #8]
 81054a0:	785b      	ldrb	r3, [r3, #1]
 81054a2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 81054a4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 81054a6:	68ba      	ldr	r2, [r7, #8]
 81054a8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 81054aa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 81054ac:	68bb      	ldr	r3, [r7, #8]
 81054ae:	781b      	ldrb	r3, [r3, #0]
 81054b0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 81054b2:	4313      	orrs	r3, r2
 81054b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 81054b6:	68fb      	ldr	r3, [r7, #12]
 81054b8:	681b      	ldr	r3, [r3, #0]
 81054ba:	22ca      	movs	r2, #202	; 0xca
 81054bc:	625a      	str	r2, [r3, #36]	; 0x24
 81054be:	68fb      	ldr	r3, [r7, #12]
 81054c0:	681b      	ldr	r3, [r3, #0]
 81054c2:	2253      	movs	r2, #83	; 0x53
 81054c4:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 81054c6:	68f8      	ldr	r0, [r7, #12]
 81054c8:	f000 f899 	bl	81055fe <RTC_EnterInitMode>
 81054cc:	4603      	mov	r3, r0
 81054ce:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 81054d0:	7cfb      	ldrb	r3, [r7, #19]
 81054d2:	2b00      	cmp	r3, #0
 81054d4:	d10c      	bne.n	81054f0 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 81054d6:	68fb      	ldr	r3, [r7, #12]
 81054d8:	681a      	ldr	r2, [r3, #0]
 81054da:	697b      	ldr	r3, [r7, #20]
 81054dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81054e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 81054e4:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 81054e6:	68f8      	ldr	r0, [r7, #12]
 81054e8:	f000 f8bc 	bl	8105664 <RTC_ExitInitMode>
 81054ec:	4603      	mov	r3, r0
 81054ee:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 81054f0:	68fb      	ldr	r3, [r7, #12]
 81054f2:	681b      	ldr	r3, [r3, #0]
 81054f4:	22ff      	movs	r2, #255	; 0xff
 81054f6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 81054f8:	7cfb      	ldrb	r3, [r7, #19]
 81054fa:	2b00      	cmp	r3, #0
 81054fc:	d103      	bne.n	8105506 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 81054fe:	68fb      	ldr	r3, [r7, #12]
 8105500:	2201      	movs	r2, #1
 8105502:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8105506:	68fb      	ldr	r3, [r7, #12]
 8105508:	2200      	movs	r2, #0
 810550a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 810550e:	7cfb      	ldrb	r3, [r7, #19]


}
 8105510:	4618      	mov	r0, r3
 8105512:	371c      	adds	r7, #28
 8105514:	46bd      	mov	sp, r7
 8105516:	bd90      	pop	{r4, r7, pc}

08105518 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8105518:	b580      	push	{r7, lr}
 810551a:	b086      	sub	sp, #24
 810551c:	af00      	add	r7, sp, #0
 810551e:	60f8      	str	r0, [r7, #12]
 8105520:	60b9      	str	r1, [r7, #8]
 8105522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8105524:	68fb      	ldr	r3, [r7, #12]
 8105526:	681b      	ldr	r3, [r3, #0]
 8105528:	685b      	ldr	r3, [r3, #4]
 810552a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 810552e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8105532:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8105534:	697b      	ldr	r3, [r7, #20]
 8105536:	0c1b      	lsrs	r3, r3, #16
 8105538:	b2da      	uxtb	r2, r3
 810553a:	68bb      	ldr	r3, [r7, #8]
 810553c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 810553e:	697b      	ldr	r3, [r7, #20]
 8105540:	0a1b      	lsrs	r3, r3, #8
 8105542:	b2db      	uxtb	r3, r3
 8105544:	f003 031f 	and.w	r3, r3, #31
 8105548:	b2da      	uxtb	r2, r3
 810554a:	68bb      	ldr	r3, [r7, #8]
 810554c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 810554e:	697b      	ldr	r3, [r7, #20]
 8105550:	b2db      	uxtb	r3, r3
 8105552:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105556:	b2da      	uxtb	r2, r3
 8105558:	68bb      	ldr	r3, [r7, #8]
 810555a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 810555c:	697b      	ldr	r3, [r7, #20]
 810555e:	0b5b      	lsrs	r3, r3, #13
 8105560:	b2db      	uxtb	r3, r3
 8105562:	f003 0307 	and.w	r3, r3, #7
 8105566:	b2da      	uxtb	r2, r3
 8105568:	68bb      	ldr	r3, [r7, #8]
 810556a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 810556c:	687b      	ldr	r3, [r7, #4]
 810556e:	2b00      	cmp	r3, #0
 8105570:	d11a      	bne.n	81055a8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8105572:	68bb      	ldr	r3, [r7, #8]
 8105574:	78db      	ldrb	r3, [r3, #3]
 8105576:	4618      	mov	r0, r3
 8105578:	f000 f8d2 	bl	8105720 <RTC_Bcd2ToByte>
 810557c:	4603      	mov	r3, r0
 810557e:	461a      	mov	r2, r3
 8105580:	68bb      	ldr	r3, [r7, #8]
 8105582:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8105584:	68bb      	ldr	r3, [r7, #8]
 8105586:	785b      	ldrb	r3, [r3, #1]
 8105588:	4618      	mov	r0, r3
 810558a:	f000 f8c9 	bl	8105720 <RTC_Bcd2ToByte>
 810558e:	4603      	mov	r3, r0
 8105590:	461a      	mov	r2, r3
 8105592:	68bb      	ldr	r3, [r7, #8]
 8105594:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8105596:	68bb      	ldr	r3, [r7, #8]
 8105598:	789b      	ldrb	r3, [r3, #2]
 810559a:	4618      	mov	r0, r3
 810559c:	f000 f8c0 	bl	8105720 <RTC_Bcd2ToByte>
 81055a0:	4603      	mov	r3, r0
 81055a2:	461a      	mov	r2, r3
 81055a4:	68bb      	ldr	r3, [r7, #8]
 81055a6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 81055a8:	2300      	movs	r3, #0
}
 81055aa:	4618      	mov	r0, r3
 81055ac:	3718      	adds	r7, #24
 81055ae:	46bd      	mov	sp, r7
 81055b0:	bd80      	pop	{r7, pc}

081055b2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 81055b2:	b580      	push	{r7, lr}
 81055b4:	b084      	sub	sp, #16
 81055b6:	af00      	add	r7, sp, #0
 81055b8:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 81055ba:	687b      	ldr	r3, [r7, #4]
 81055bc:	681b      	ldr	r3, [r3, #0]
 81055be:	68da      	ldr	r2, [r3, #12]
 81055c0:	687b      	ldr	r3, [r7, #4]
 81055c2:	681b      	ldr	r3, [r3, #0]
 81055c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 81055c8:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 81055ca:	f7fc fa57 	bl	8101a7c <HAL_GetTick>
 81055ce:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 81055d0:	e009      	b.n	81055e6 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 81055d2:	f7fc fa53 	bl	8101a7c <HAL_GetTick>
 81055d6:	4602      	mov	r2, r0
 81055d8:	68fb      	ldr	r3, [r7, #12]
 81055da:	1ad3      	subs	r3, r2, r3
 81055dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 81055e0:	d901      	bls.n	81055e6 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 81055e2:	2303      	movs	r3, #3
 81055e4:	e007      	b.n	81055f6 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 81055e6:	687b      	ldr	r3, [r7, #4]
 81055e8:	681b      	ldr	r3, [r3, #0]
 81055ea:	68db      	ldr	r3, [r3, #12]
 81055ec:	f003 0320 	and.w	r3, r3, #32
 81055f0:	2b00      	cmp	r3, #0
 81055f2:	d0ee      	beq.n	81055d2 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 81055f4:	2300      	movs	r3, #0
}
 81055f6:	4618      	mov	r0, r3
 81055f8:	3710      	adds	r7, #16
 81055fa:	46bd      	mov	sp, r7
 81055fc:	bd80      	pop	{r7, pc}

081055fe <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 81055fe:	b580      	push	{r7, lr}
 8105600:	b084      	sub	sp, #16
 8105602:	af00      	add	r7, sp, #0
 8105604:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105606:	2300      	movs	r3, #0
 8105608:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 810560a:	687b      	ldr	r3, [r7, #4]
 810560c:	681b      	ldr	r3, [r3, #0]
 810560e:	68db      	ldr	r3, [r3, #12]
 8105610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105614:	2b00      	cmp	r3, #0
 8105616:	d120      	bne.n	810565a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8105618:	687b      	ldr	r3, [r7, #4]
 810561a:	681b      	ldr	r3, [r3, #0]
 810561c:	f04f 32ff 	mov.w	r2, #4294967295
 8105620:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8105622:	f7fc fa2b 	bl	8101a7c <HAL_GetTick>
 8105626:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8105628:	e00d      	b.n	8105646 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 810562a:	f7fc fa27 	bl	8101a7c <HAL_GetTick>
 810562e:	4602      	mov	r2, r0
 8105630:	68bb      	ldr	r3, [r7, #8]
 8105632:	1ad3      	subs	r3, r2, r3
 8105634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8105638:	d905      	bls.n	8105646 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 810563a:	2303      	movs	r3, #3
 810563c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 810563e:	687b      	ldr	r3, [r7, #4]
 8105640:	2203      	movs	r2, #3
 8105642:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8105646:	687b      	ldr	r3, [r7, #4]
 8105648:	681b      	ldr	r3, [r3, #0]
 810564a:	68db      	ldr	r3, [r3, #12]
 810564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105650:	2b00      	cmp	r3, #0
 8105652:	d102      	bne.n	810565a <RTC_EnterInitMode+0x5c>
 8105654:	7bfb      	ldrb	r3, [r7, #15]
 8105656:	2b03      	cmp	r3, #3
 8105658:	d1e7      	bne.n	810562a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 810565a:	7bfb      	ldrb	r3, [r7, #15]
}
 810565c:	4618      	mov	r0, r3
 810565e:	3710      	adds	r7, #16
 8105660:	46bd      	mov	sp, r7
 8105662:	bd80      	pop	{r7, pc}

08105664 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8105664:	b580      	push	{r7, lr}
 8105666:	b084      	sub	sp, #16
 8105668:	af00      	add	r7, sp, #0
 810566a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810566c:	2300      	movs	r3, #0
 810566e:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8105670:	4b1a      	ldr	r3, [pc, #104]	; (81056dc <RTC_ExitInitMode+0x78>)
 8105672:	68db      	ldr	r3, [r3, #12]
 8105674:	4a19      	ldr	r2, [pc, #100]	; (81056dc <RTC_ExitInitMode+0x78>)
 8105676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810567a:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 810567c:	4b17      	ldr	r3, [pc, #92]	; (81056dc <RTC_ExitInitMode+0x78>)
 810567e:	689b      	ldr	r3, [r3, #8]
 8105680:	f003 0320 	and.w	r3, r3, #32
 8105684:	2b00      	cmp	r3, #0
 8105686:	d10c      	bne.n	81056a2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8105688:	6878      	ldr	r0, [r7, #4]
 810568a:	f7ff ff92 	bl	81055b2 <HAL_RTC_WaitForSynchro>
 810568e:	4603      	mov	r3, r0
 8105690:	2b00      	cmp	r3, #0
 8105692:	d01e      	beq.n	81056d2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105694:	687b      	ldr	r3, [r7, #4]
 8105696:	2203      	movs	r2, #3
 8105698:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 810569c:	2303      	movs	r3, #3
 810569e:	73fb      	strb	r3, [r7, #15]
 81056a0:	e017      	b.n	81056d2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 81056a2:	4b0e      	ldr	r3, [pc, #56]	; (81056dc <RTC_ExitInitMode+0x78>)
 81056a4:	689b      	ldr	r3, [r3, #8]
 81056a6:	4a0d      	ldr	r2, [pc, #52]	; (81056dc <RTC_ExitInitMode+0x78>)
 81056a8:	f023 0320 	bic.w	r3, r3, #32
 81056ac:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 81056ae:	6878      	ldr	r0, [r7, #4]
 81056b0:	f7ff ff7f 	bl	81055b2 <HAL_RTC_WaitForSynchro>
 81056b4:	4603      	mov	r3, r0
 81056b6:	2b00      	cmp	r3, #0
 81056b8:	d005      	beq.n	81056c6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81056ba:	687b      	ldr	r3, [r7, #4]
 81056bc:	2203      	movs	r2, #3
 81056be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 81056c2:	2303      	movs	r3, #3
 81056c4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 81056c6:	4b05      	ldr	r3, [pc, #20]	; (81056dc <RTC_ExitInitMode+0x78>)
 81056c8:	689b      	ldr	r3, [r3, #8]
 81056ca:	4a04      	ldr	r2, [pc, #16]	; (81056dc <RTC_ExitInitMode+0x78>)
 81056cc:	f043 0320 	orr.w	r3, r3, #32
 81056d0:	6093      	str	r3, [r2, #8]
  }

  return status;
 81056d2:	7bfb      	ldrb	r3, [r7, #15]
}
 81056d4:	4618      	mov	r0, r3
 81056d6:	3710      	adds	r7, #16
 81056d8:	46bd      	mov	sp, r7
 81056da:	bd80      	pop	{r7, pc}
 81056dc:	58004000 	.word	0x58004000

081056e0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 81056e0:	b480      	push	{r7}
 81056e2:	b085      	sub	sp, #20
 81056e4:	af00      	add	r7, sp, #0
 81056e6:	4603      	mov	r3, r0
 81056e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 81056ea:	2300      	movs	r3, #0
 81056ec:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 81056ee:	79fb      	ldrb	r3, [r7, #7]
 81056f0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 81056f2:	e005      	b.n	8105700 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 81056f4:	68fb      	ldr	r3, [r7, #12]
 81056f6:	3301      	adds	r3, #1
 81056f8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 81056fa:	7afb      	ldrb	r3, [r7, #11]
 81056fc:	3b0a      	subs	r3, #10
 81056fe:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8105700:	7afb      	ldrb	r3, [r7, #11]
 8105702:	2b09      	cmp	r3, #9
 8105704:	d8f6      	bhi.n	81056f4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8105706:	68fb      	ldr	r3, [r7, #12]
 8105708:	b2db      	uxtb	r3, r3
 810570a:	011b      	lsls	r3, r3, #4
 810570c:	b2da      	uxtb	r2, r3
 810570e:	7afb      	ldrb	r3, [r7, #11]
 8105710:	4313      	orrs	r3, r2
 8105712:	b2db      	uxtb	r3, r3
}
 8105714:	4618      	mov	r0, r3
 8105716:	3714      	adds	r7, #20
 8105718:	46bd      	mov	sp, r7
 810571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810571e:	4770      	bx	lr

08105720 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8105720:	b480      	push	{r7}
 8105722:	b085      	sub	sp, #20
 8105724:	af00      	add	r7, sp, #0
 8105726:	4603      	mov	r3, r0
 8105728:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 810572a:	79fb      	ldrb	r3, [r7, #7]
 810572c:	091b      	lsrs	r3, r3, #4
 810572e:	b2db      	uxtb	r3, r3
 8105730:	461a      	mov	r2, r3
 8105732:	0092      	lsls	r2, r2, #2
 8105734:	4413      	add	r3, r2
 8105736:	005b      	lsls	r3, r3, #1
 8105738:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 810573a:	79fb      	ldrb	r3, [r7, #7]
 810573c:	f003 030f 	and.w	r3, r3, #15
 8105740:	b2da      	uxtb	r2, r3
 8105742:	7bfb      	ldrb	r3, [r7, #15]
 8105744:	4413      	add	r3, r2
 8105746:	b2db      	uxtb	r3, r3
}
 8105748:	4618      	mov	r0, r3
 810574a:	3714      	adds	r7, #20
 810574c:	46bd      	mov	sp, r7
 810574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105752:	4770      	bx	lr

08105754 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8105754:	b580      	push	{r7, lr}
 8105756:	b082      	sub	sp, #8
 8105758:	af00      	add	r7, sp, #0
 810575a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810575c:	687b      	ldr	r3, [r7, #4]
 810575e:	2b00      	cmp	r3, #0
 8105760:	d101      	bne.n	8105766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8105762:	2301      	movs	r3, #1
 8105764:	e042      	b.n	81057ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8105766:	687b      	ldr	r3, [r7, #4]
 8105768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810576c:	2b00      	cmp	r3, #0
 810576e:	d106      	bne.n	810577e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8105770:	687b      	ldr	r3, [r7, #4]
 8105772:	2200      	movs	r2, #0
 8105774:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8105778:	6878      	ldr	r0, [r7, #4]
 810577a:	f7fb ff9d 	bl	81016b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810577e:	687b      	ldr	r3, [r7, #4]
 8105780:	2224      	movs	r2, #36	; 0x24
 8105782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8105786:	687b      	ldr	r3, [r7, #4]
 8105788:	681b      	ldr	r3, [r3, #0]
 810578a:	681a      	ldr	r2, [r3, #0]
 810578c:	687b      	ldr	r3, [r7, #4]
 810578e:	681b      	ldr	r3, [r3, #0]
 8105790:	f022 0201 	bic.w	r2, r2, #1
 8105794:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8105796:	6878      	ldr	r0, [r7, #4]
 8105798:	f000 f8c2 	bl	8105920 <UART_SetConfig>
 810579c:	4603      	mov	r3, r0
 810579e:	2b01      	cmp	r3, #1
 81057a0:	d101      	bne.n	81057a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 81057a2:	2301      	movs	r3, #1
 81057a4:	e022      	b.n	81057ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81057a6:	687b      	ldr	r3, [r7, #4]
 81057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81057aa:	2b00      	cmp	r3, #0
 81057ac:	d002      	beq.n	81057b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 81057ae:	6878      	ldr	r0, [r7, #4]
 81057b0:	f000 fe1e 	bl	81063f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81057b4:	687b      	ldr	r3, [r7, #4]
 81057b6:	681b      	ldr	r3, [r3, #0]
 81057b8:	685a      	ldr	r2, [r3, #4]
 81057ba:	687b      	ldr	r3, [r7, #4]
 81057bc:	681b      	ldr	r3, [r3, #0]
 81057be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81057c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81057c4:	687b      	ldr	r3, [r7, #4]
 81057c6:	681b      	ldr	r3, [r3, #0]
 81057c8:	689a      	ldr	r2, [r3, #8]
 81057ca:	687b      	ldr	r3, [r7, #4]
 81057cc:	681b      	ldr	r3, [r3, #0]
 81057ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81057d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81057d4:	687b      	ldr	r3, [r7, #4]
 81057d6:	681b      	ldr	r3, [r3, #0]
 81057d8:	681a      	ldr	r2, [r3, #0]
 81057da:	687b      	ldr	r3, [r7, #4]
 81057dc:	681b      	ldr	r3, [r3, #0]
 81057de:	f042 0201 	orr.w	r2, r2, #1
 81057e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81057e4:	6878      	ldr	r0, [r7, #4]
 81057e6:	f000 fea5 	bl	8106534 <UART_CheckIdleState>
 81057ea:	4603      	mov	r3, r0
}
 81057ec:	4618      	mov	r0, r3
 81057ee:	3708      	adds	r7, #8
 81057f0:	46bd      	mov	sp, r7
 81057f2:	bd80      	pop	{r7, pc}

081057f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81057f4:	b580      	push	{r7, lr}
 81057f6:	b08a      	sub	sp, #40	; 0x28
 81057f8:	af02      	add	r7, sp, #8
 81057fa:	60f8      	str	r0, [r7, #12]
 81057fc:	60b9      	str	r1, [r7, #8]
 81057fe:	603b      	str	r3, [r7, #0]
 8105800:	4613      	mov	r3, r2
 8105802:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8105804:	68fb      	ldr	r3, [r7, #12]
 8105806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810580a:	2b20      	cmp	r3, #32
 810580c:	f040 8083 	bne.w	8105916 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8105810:	68bb      	ldr	r3, [r7, #8]
 8105812:	2b00      	cmp	r3, #0
 8105814:	d002      	beq.n	810581c <HAL_UART_Transmit+0x28>
 8105816:	88fb      	ldrh	r3, [r7, #6]
 8105818:	2b00      	cmp	r3, #0
 810581a:	d101      	bne.n	8105820 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 810581c:	2301      	movs	r3, #1
 810581e:	e07b      	b.n	8105918 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8105820:	68fb      	ldr	r3, [r7, #12]
 8105822:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105826:	2b01      	cmp	r3, #1
 8105828:	d101      	bne.n	810582e <HAL_UART_Transmit+0x3a>
 810582a:	2302      	movs	r3, #2
 810582c:	e074      	b.n	8105918 <HAL_UART_Transmit+0x124>
 810582e:	68fb      	ldr	r3, [r7, #12]
 8105830:	2201      	movs	r2, #1
 8105832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105836:	68fb      	ldr	r3, [r7, #12]
 8105838:	2200      	movs	r2, #0
 810583a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810583e:	68fb      	ldr	r3, [r7, #12]
 8105840:	2221      	movs	r2, #33	; 0x21
 8105842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8105846:	f7fc f919 	bl	8101a7c <HAL_GetTick>
 810584a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810584c:	68fb      	ldr	r3, [r7, #12]
 810584e:	88fa      	ldrh	r2, [r7, #6]
 8105850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8105854:	68fb      	ldr	r3, [r7, #12]
 8105856:	88fa      	ldrh	r2, [r7, #6]
 8105858:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810585c:	68fb      	ldr	r3, [r7, #12]
 810585e:	689b      	ldr	r3, [r3, #8]
 8105860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105864:	d108      	bne.n	8105878 <HAL_UART_Transmit+0x84>
 8105866:	68fb      	ldr	r3, [r7, #12]
 8105868:	691b      	ldr	r3, [r3, #16]
 810586a:	2b00      	cmp	r3, #0
 810586c:	d104      	bne.n	8105878 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 810586e:	2300      	movs	r3, #0
 8105870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8105872:	68bb      	ldr	r3, [r7, #8]
 8105874:	61bb      	str	r3, [r7, #24]
 8105876:	e003      	b.n	8105880 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8105878:	68bb      	ldr	r3, [r7, #8]
 810587a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810587c:	2300      	movs	r3, #0
 810587e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8105880:	68fb      	ldr	r3, [r7, #12]
 8105882:	2200      	movs	r2, #0
 8105884:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8105888:	e02c      	b.n	81058e4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810588a:	683b      	ldr	r3, [r7, #0]
 810588c:	9300      	str	r3, [sp, #0]
 810588e:	697b      	ldr	r3, [r7, #20]
 8105890:	2200      	movs	r2, #0
 8105892:	2180      	movs	r1, #128	; 0x80
 8105894:	68f8      	ldr	r0, [r7, #12]
 8105896:	f000 fe98 	bl	81065ca <UART_WaitOnFlagUntilTimeout>
 810589a:	4603      	mov	r3, r0
 810589c:	2b00      	cmp	r3, #0
 810589e:	d001      	beq.n	81058a4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 81058a0:	2303      	movs	r3, #3
 81058a2:	e039      	b.n	8105918 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 81058a4:	69fb      	ldr	r3, [r7, #28]
 81058a6:	2b00      	cmp	r3, #0
 81058a8:	d10b      	bne.n	81058c2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 81058aa:	69bb      	ldr	r3, [r7, #24]
 81058ac:	881b      	ldrh	r3, [r3, #0]
 81058ae:	461a      	mov	r2, r3
 81058b0:	68fb      	ldr	r3, [r7, #12]
 81058b2:	681b      	ldr	r3, [r3, #0]
 81058b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81058b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 81058ba:	69bb      	ldr	r3, [r7, #24]
 81058bc:	3302      	adds	r3, #2
 81058be:	61bb      	str	r3, [r7, #24]
 81058c0:	e007      	b.n	81058d2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 81058c2:	69fb      	ldr	r3, [r7, #28]
 81058c4:	781a      	ldrb	r2, [r3, #0]
 81058c6:	68fb      	ldr	r3, [r7, #12]
 81058c8:	681b      	ldr	r3, [r3, #0]
 81058ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 81058cc:	69fb      	ldr	r3, [r7, #28]
 81058ce:	3301      	adds	r3, #1
 81058d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81058d2:	68fb      	ldr	r3, [r7, #12]
 81058d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81058d8:	b29b      	uxth	r3, r3
 81058da:	3b01      	subs	r3, #1
 81058dc:	b29a      	uxth	r2, r3
 81058de:	68fb      	ldr	r3, [r7, #12]
 81058e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 81058e4:	68fb      	ldr	r3, [r7, #12]
 81058e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81058ea:	b29b      	uxth	r3, r3
 81058ec:	2b00      	cmp	r3, #0
 81058ee:	d1cc      	bne.n	810588a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81058f0:	683b      	ldr	r3, [r7, #0]
 81058f2:	9300      	str	r3, [sp, #0]
 81058f4:	697b      	ldr	r3, [r7, #20]
 81058f6:	2200      	movs	r2, #0
 81058f8:	2140      	movs	r1, #64	; 0x40
 81058fa:	68f8      	ldr	r0, [r7, #12]
 81058fc:	f000 fe65 	bl	81065ca <UART_WaitOnFlagUntilTimeout>
 8105900:	4603      	mov	r3, r0
 8105902:	2b00      	cmp	r3, #0
 8105904:	d001      	beq.n	810590a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8105906:	2303      	movs	r3, #3
 8105908:	e006      	b.n	8105918 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810590a:	68fb      	ldr	r3, [r7, #12]
 810590c:	2220      	movs	r2, #32
 810590e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8105912:	2300      	movs	r3, #0
 8105914:	e000      	b.n	8105918 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8105916:	2302      	movs	r3, #2
  }
}
 8105918:	4618      	mov	r0, r3
 810591a:	3720      	adds	r7, #32
 810591c:	46bd      	mov	sp, r7
 810591e:	bd80      	pop	{r7, pc}

08105920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8105920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8105924:	b092      	sub	sp, #72	; 0x48
 8105926:	af00      	add	r7, sp, #0
 8105928:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810592a:	2300      	movs	r3, #0
 810592c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8105930:	697b      	ldr	r3, [r7, #20]
 8105932:	689a      	ldr	r2, [r3, #8]
 8105934:	697b      	ldr	r3, [r7, #20]
 8105936:	691b      	ldr	r3, [r3, #16]
 8105938:	431a      	orrs	r2, r3
 810593a:	697b      	ldr	r3, [r7, #20]
 810593c:	695b      	ldr	r3, [r3, #20]
 810593e:	431a      	orrs	r2, r3
 8105940:	697b      	ldr	r3, [r7, #20]
 8105942:	69db      	ldr	r3, [r3, #28]
 8105944:	4313      	orrs	r3, r2
 8105946:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8105948:	697b      	ldr	r3, [r7, #20]
 810594a:	681b      	ldr	r3, [r3, #0]
 810594c:	681a      	ldr	r2, [r3, #0]
 810594e:	4bbd      	ldr	r3, [pc, #756]	; (8105c44 <UART_SetConfig+0x324>)
 8105950:	4013      	ands	r3, r2
 8105952:	697a      	ldr	r2, [r7, #20]
 8105954:	6812      	ldr	r2, [r2, #0]
 8105956:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8105958:	430b      	orrs	r3, r1
 810595a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810595c:	697b      	ldr	r3, [r7, #20]
 810595e:	681b      	ldr	r3, [r3, #0]
 8105960:	685b      	ldr	r3, [r3, #4]
 8105962:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8105966:	697b      	ldr	r3, [r7, #20]
 8105968:	68da      	ldr	r2, [r3, #12]
 810596a:	697b      	ldr	r3, [r7, #20]
 810596c:	681b      	ldr	r3, [r3, #0]
 810596e:	430a      	orrs	r2, r1
 8105970:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8105972:	697b      	ldr	r3, [r7, #20]
 8105974:	699b      	ldr	r3, [r3, #24]
 8105976:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8105978:	697b      	ldr	r3, [r7, #20]
 810597a:	681b      	ldr	r3, [r3, #0]
 810597c:	4ab2      	ldr	r2, [pc, #712]	; (8105c48 <UART_SetConfig+0x328>)
 810597e:	4293      	cmp	r3, r2
 8105980:	d004      	beq.n	810598c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8105982:	697b      	ldr	r3, [r7, #20]
 8105984:	6a1b      	ldr	r3, [r3, #32]
 8105986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8105988:	4313      	orrs	r3, r2
 810598a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810598c:	697b      	ldr	r3, [r7, #20]
 810598e:	681b      	ldr	r3, [r3, #0]
 8105990:	689b      	ldr	r3, [r3, #8]
 8105992:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8105996:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810599a:	697a      	ldr	r2, [r7, #20]
 810599c:	6812      	ldr	r2, [r2, #0]
 810599e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81059a0:	430b      	orrs	r3, r1
 81059a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81059a4:	697b      	ldr	r3, [r7, #20]
 81059a6:	681b      	ldr	r3, [r3, #0]
 81059a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81059aa:	f023 010f 	bic.w	r1, r3, #15
 81059ae:	697b      	ldr	r3, [r7, #20]
 81059b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81059b2:	697b      	ldr	r3, [r7, #20]
 81059b4:	681b      	ldr	r3, [r3, #0]
 81059b6:	430a      	orrs	r2, r1
 81059b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81059ba:	697b      	ldr	r3, [r7, #20]
 81059bc:	681b      	ldr	r3, [r3, #0]
 81059be:	4aa3      	ldr	r2, [pc, #652]	; (8105c4c <UART_SetConfig+0x32c>)
 81059c0:	4293      	cmp	r3, r2
 81059c2:	d177      	bne.n	8105ab4 <UART_SetConfig+0x194>
 81059c4:	4ba2      	ldr	r3, [pc, #648]	; (8105c50 <UART_SetConfig+0x330>)
 81059c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81059c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81059cc:	2b28      	cmp	r3, #40	; 0x28
 81059ce:	d86d      	bhi.n	8105aac <UART_SetConfig+0x18c>
 81059d0:	a201      	add	r2, pc, #4	; (adr r2, 81059d8 <UART_SetConfig+0xb8>)
 81059d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81059d6:	bf00      	nop
 81059d8:	08105a7d 	.word	0x08105a7d
 81059dc:	08105aad 	.word	0x08105aad
 81059e0:	08105aad 	.word	0x08105aad
 81059e4:	08105aad 	.word	0x08105aad
 81059e8:	08105aad 	.word	0x08105aad
 81059ec:	08105aad 	.word	0x08105aad
 81059f0:	08105aad 	.word	0x08105aad
 81059f4:	08105aad 	.word	0x08105aad
 81059f8:	08105a85 	.word	0x08105a85
 81059fc:	08105aad 	.word	0x08105aad
 8105a00:	08105aad 	.word	0x08105aad
 8105a04:	08105aad 	.word	0x08105aad
 8105a08:	08105aad 	.word	0x08105aad
 8105a0c:	08105aad 	.word	0x08105aad
 8105a10:	08105aad 	.word	0x08105aad
 8105a14:	08105aad 	.word	0x08105aad
 8105a18:	08105a8d 	.word	0x08105a8d
 8105a1c:	08105aad 	.word	0x08105aad
 8105a20:	08105aad 	.word	0x08105aad
 8105a24:	08105aad 	.word	0x08105aad
 8105a28:	08105aad 	.word	0x08105aad
 8105a2c:	08105aad 	.word	0x08105aad
 8105a30:	08105aad 	.word	0x08105aad
 8105a34:	08105aad 	.word	0x08105aad
 8105a38:	08105a95 	.word	0x08105a95
 8105a3c:	08105aad 	.word	0x08105aad
 8105a40:	08105aad 	.word	0x08105aad
 8105a44:	08105aad 	.word	0x08105aad
 8105a48:	08105aad 	.word	0x08105aad
 8105a4c:	08105aad 	.word	0x08105aad
 8105a50:	08105aad 	.word	0x08105aad
 8105a54:	08105aad 	.word	0x08105aad
 8105a58:	08105a9d 	.word	0x08105a9d
 8105a5c:	08105aad 	.word	0x08105aad
 8105a60:	08105aad 	.word	0x08105aad
 8105a64:	08105aad 	.word	0x08105aad
 8105a68:	08105aad 	.word	0x08105aad
 8105a6c:	08105aad 	.word	0x08105aad
 8105a70:	08105aad 	.word	0x08105aad
 8105a74:	08105aad 	.word	0x08105aad
 8105a78:	08105aa5 	.word	0x08105aa5
 8105a7c:	2301      	movs	r3, #1
 8105a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a82:	e220      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105a84:	2304      	movs	r3, #4
 8105a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a8a:	e21c      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105a8c:	2308      	movs	r3, #8
 8105a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a92:	e218      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105a94:	2310      	movs	r3, #16
 8105a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a9a:	e214      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105a9c:	2320      	movs	r3, #32
 8105a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105aa2:	e210      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105aa4:	2340      	movs	r3, #64	; 0x40
 8105aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105aaa:	e20c      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105aac:	2380      	movs	r3, #128	; 0x80
 8105aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105ab2:	e208      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105ab4:	697b      	ldr	r3, [r7, #20]
 8105ab6:	681b      	ldr	r3, [r3, #0]
 8105ab8:	4a66      	ldr	r2, [pc, #408]	; (8105c54 <UART_SetConfig+0x334>)
 8105aba:	4293      	cmp	r3, r2
 8105abc:	d130      	bne.n	8105b20 <UART_SetConfig+0x200>
 8105abe:	4b64      	ldr	r3, [pc, #400]	; (8105c50 <UART_SetConfig+0x330>)
 8105ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105ac2:	f003 0307 	and.w	r3, r3, #7
 8105ac6:	2b05      	cmp	r3, #5
 8105ac8:	d826      	bhi.n	8105b18 <UART_SetConfig+0x1f8>
 8105aca:	a201      	add	r2, pc, #4	; (adr r2, 8105ad0 <UART_SetConfig+0x1b0>)
 8105acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105ad0:	08105ae9 	.word	0x08105ae9
 8105ad4:	08105af1 	.word	0x08105af1
 8105ad8:	08105af9 	.word	0x08105af9
 8105adc:	08105b01 	.word	0x08105b01
 8105ae0:	08105b09 	.word	0x08105b09
 8105ae4:	08105b11 	.word	0x08105b11
 8105ae8:	2300      	movs	r3, #0
 8105aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105aee:	e1ea      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105af0:	2304      	movs	r3, #4
 8105af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105af6:	e1e6      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105af8:	2308      	movs	r3, #8
 8105afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105afe:	e1e2      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105b00:	2310      	movs	r3, #16
 8105b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105b06:	e1de      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105b08:	2320      	movs	r3, #32
 8105b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105b0e:	e1da      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105b10:	2340      	movs	r3, #64	; 0x40
 8105b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105b16:	e1d6      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105b18:	2380      	movs	r3, #128	; 0x80
 8105b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105b1e:	e1d2      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105b20:	697b      	ldr	r3, [r7, #20]
 8105b22:	681b      	ldr	r3, [r3, #0]
 8105b24:	4a4c      	ldr	r2, [pc, #304]	; (8105c58 <UART_SetConfig+0x338>)
 8105b26:	4293      	cmp	r3, r2
 8105b28:	d130      	bne.n	8105b8c <UART_SetConfig+0x26c>
 8105b2a:	4b49      	ldr	r3, [pc, #292]	; (8105c50 <UART_SetConfig+0x330>)
 8105b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105b2e:	f003 0307 	and.w	r3, r3, #7
 8105b32:	2b05      	cmp	r3, #5
 8105b34:	d826      	bhi.n	8105b84 <UART_SetConfig+0x264>
 8105b36:	a201      	add	r2, pc, #4	; (adr r2, 8105b3c <UART_SetConfig+0x21c>)
 8105b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105b3c:	08105b55 	.word	0x08105b55
 8105b40:	08105b5d 	.word	0x08105b5d
 8105b44:	08105b65 	.word	0x08105b65
 8105b48:	08105b6d 	.word	0x08105b6d
 8105b4c:	08105b75 	.word	0x08105b75
 8105b50:	08105b7d 	.word	0x08105b7d
 8105b54:	2300      	movs	r3, #0
 8105b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105b5a:	e1b4      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105b5c:	2304      	movs	r3, #4
 8105b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105b62:	e1b0      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105b64:	2308      	movs	r3, #8
 8105b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105b6a:	e1ac      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105b6c:	2310      	movs	r3, #16
 8105b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105b72:	e1a8      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105b74:	2320      	movs	r3, #32
 8105b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105b7a:	e1a4      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105b7c:	2340      	movs	r3, #64	; 0x40
 8105b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105b82:	e1a0      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105b84:	2380      	movs	r3, #128	; 0x80
 8105b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105b8a:	e19c      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105b8c:	697b      	ldr	r3, [r7, #20]
 8105b8e:	681b      	ldr	r3, [r3, #0]
 8105b90:	4a32      	ldr	r2, [pc, #200]	; (8105c5c <UART_SetConfig+0x33c>)
 8105b92:	4293      	cmp	r3, r2
 8105b94:	d130      	bne.n	8105bf8 <UART_SetConfig+0x2d8>
 8105b96:	4b2e      	ldr	r3, [pc, #184]	; (8105c50 <UART_SetConfig+0x330>)
 8105b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105b9a:	f003 0307 	and.w	r3, r3, #7
 8105b9e:	2b05      	cmp	r3, #5
 8105ba0:	d826      	bhi.n	8105bf0 <UART_SetConfig+0x2d0>
 8105ba2:	a201      	add	r2, pc, #4	; (adr r2, 8105ba8 <UART_SetConfig+0x288>)
 8105ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105ba8:	08105bc1 	.word	0x08105bc1
 8105bac:	08105bc9 	.word	0x08105bc9
 8105bb0:	08105bd1 	.word	0x08105bd1
 8105bb4:	08105bd9 	.word	0x08105bd9
 8105bb8:	08105be1 	.word	0x08105be1
 8105bbc:	08105be9 	.word	0x08105be9
 8105bc0:	2300      	movs	r3, #0
 8105bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105bc6:	e17e      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105bc8:	2304      	movs	r3, #4
 8105bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105bce:	e17a      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105bd0:	2308      	movs	r3, #8
 8105bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105bd6:	e176      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105bd8:	2310      	movs	r3, #16
 8105bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105bde:	e172      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105be0:	2320      	movs	r3, #32
 8105be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105be6:	e16e      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105be8:	2340      	movs	r3, #64	; 0x40
 8105bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105bee:	e16a      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105bf0:	2380      	movs	r3, #128	; 0x80
 8105bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105bf6:	e166      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105bf8:	697b      	ldr	r3, [r7, #20]
 8105bfa:	681b      	ldr	r3, [r3, #0]
 8105bfc:	4a18      	ldr	r2, [pc, #96]	; (8105c60 <UART_SetConfig+0x340>)
 8105bfe:	4293      	cmp	r3, r2
 8105c00:	d140      	bne.n	8105c84 <UART_SetConfig+0x364>
 8105c02:	4b13      	ldr	r3, [pc, #76]	; (8105c50 <UART_SetConfig+0x330>)
 8105c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105c06:	f003 0307 	and.w	r3, r3, #7
 8105c0a:	2b05      	cmp	r3, #5
 8105c0c:	d836      	bhi.n	8105c7c <UART_SetConfig+0x35c>
 8105c0e:	a201      	add	r2, pc, #4	; (adr r2, 8105c14 <UART_SetConfig+0x2f4>)
 8105c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105c14:	08105c2d 	.word	0x08105c2d
 8105c18:	08105c35 	.word	0x08105c35
 8105c1c:	08105c3d 	.word	0x08105c3d
 8105c20:	08105c65 	.word	0x08105c65
 8105c24:	08105c6d 	.word	0x08105c6d
 8105c28:	08105c75 	.word	0x08105c75
 8105c2c:	2300      	movs	r3, #0
 8105c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105c32:	e148      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105c34:	2304      	movs	r3, #4
 8105c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105c3a:	e144      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105c3c:	2308      	movs	r3, #8
 8105c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105c42:	e140      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105c44:	cfff69f3 	.word	0xcfff69f3
 8105c48:	58000c00 	.word	0x58000c00
 8105c4c:	40011000 	.word	0x40011000
 8105c50:	58024400 	.word	0x58024400
 8105c54:	40004400 	.word	0x40004400
 8105c58:	40004800 	.word	0x40004800
 8105c5c:	40004c00 	.word	0x40004c00
 8105c60:	40005000 	.word	0x40005000
 8105c64:	2310      	movs	r3, #16
 8105c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105c6a:	e12c      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105c6c:	2320      	movs	r3, #32
 8105c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105c72:	e128      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105c74:	2340      	movs	r3, #64	; 0x40
 8105c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105c7a:	e124      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105c7c:	2380      	movs	r3, #128	; 0x80
 8105c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105c82:	e120      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105c84:	697b      	ldr	r3, [r7, #20]
 8105c86:	681b      	ldr	r3, [r3, #0]
 8105c88:	4acb      	ldr	r2, [pc, #812]	; (8105fb8 <UART_SetConfig+0x698>)
 8105c8a:	4293      	cmp	r3, r2
 8105c8c:	d176      	bne.n	8105d7c <UART_SetConfig+0x45c>
 8105c8e:	4bcb      	ldr	r3, [pc, #812]	; (8105fbc <UART_SetConfig+0x69c>)
 8105c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105c92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105c96:	2b28      	cmp	r3, #40	; 0x28
 8105c98:	d86c      	bhi.n	8105d74 <UART_SetConfig+0x454>
 8105c9a:	a201      	add	r2, pc, #4	; (adr r2, 8105ca0 <UART_SetConfig+0x380>)
 8105c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105ca0:	08105d45 	.word	0x08105d45
 8105ca4:	08105d75 	.word	0x08105d75
 8105ca8:	08105d75 	.word	0x08105d75
 8105cac:	08105d75 	.word	0x08105d75
 8105cb0:	08105d75 	.word	0x08105d75
 8105cb4:	08105d75 	.word	0x08105d75
 8105cb8:	08105d75 	.word	0x08105d75
 8105cbc:	08105d75 	.word	0x08105d75
 8105cc0:	08105d4d 	.word	0x08105d4d
 8105cc4:	08105d75 	.word	0x08105d75
 8105cc8:	08105d75 	.word	0x08105d75
 8105ccc:	08105d75 	.word	0x08105d75
 8105cd0:	08105d75 	.word	0x08105d75
 8105cd4:	08105d75 	.word	0x08105d75
 8105cd8:	08105d75 	.word	0x08105d75
 8105cdc:	08105d75 	.word	0x08105d75
 8105ce0:	08105d55 	.word	0x08105d55
 8105ce4:	08105d75 	.word	0x08105d75
 8105ce8:	08105d75 	.word	0x08105d75
 8105cec:	08105d75 	.word	0x08105d75
 8105cf0:	08105d75 	.word	0x08105d75
 8105cf4:	08105d75 	.word	0x08105d75
 8105cf8:	08105d75 	.word	0x08105d75
 8105cfc:	08105d75 	.word	0x08105d75
 8105d00:	08105d5d 	.word	0x08105d5d
 8105d04:	08105d75 	.word	0x08105d75
 8105d08:	08105d75 	.word	0x08105d75
 8105d0c:	08105d75 	.word	0x08105d75
 8105d10:	08105d75 	.word	0x08105d75
 8105d14:	08105d75 	.word	0x08105d75
 8105d18:	08105d75 	.word	0x08105d75
 8105d1c:	08105d75 	.word	0x08105d75
 8105d20:	08105d65 	.word	0x08105d65
 8105d24:	08105d75 	.word	0x08105d75
 8105d28:	08105d75 	.word	0x08105d75
 8105d2c:	08105d75 	.word	0x08105d75
 8105d30:	08105d75 	.word	0x08105d75
 8105d34:	08105d75 	.word	0x08105d75
 8105d38:	08105d75 	.word	0x08105d75
 8105d3c:	08105d75 	.word	0x08105d75
 8105d40:	08105d6d 	.word	0x08105d6d
 8105d44:	2301      	movs	r3, #1
 8105d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105d4a:	e0bc      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105d4c:	2304      	movs	r3, #4
 8105d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105d52:	e0b8      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105d54:	2308      	movs	r3, #8
 8105d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105d5a:	e0b4      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105d5c:	2310      	movs	r3, #16
 8105d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105d62:	e0b0      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105d64:	2320      	movs	r3, #32
 8105d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105d6a:	e0ac      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105d6c:	2340      	movs	r3, #64	; 0x40
 8105d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105d72:	e0a8      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105d74:	2380      	movs	r3, #128	; 0x80
 8105d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105d7a:	e0a4      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105d7c:	697b      	ldr	r3, [r7, #20]
 8105d7e:	681b      	ldr	r3, [r3, #0]
 8105d80:	4a8f      	ldr	r2, [pc, #572]	; (8105fc0 <UART_SetConfig+0x6a0>)
 8105d82:	4293      	cmp	r3, r2
 8105d84:	d130      	bne.n	8105de8 <UART_SetConfig+0x4c8>
 8105d86:	4b8d      	ldr	r3, [pc, #564]	; (8105fbc <UART_SetConfig+0x69c>)
 8105d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105d8a:	f003 0307 	and.w	r3, r3, #7
 8105d8e:	2b05      	cmp	r3, #5
 8105d90:	d826      	bhi.n	8105de0 <UART_SetConfig+0x4c0>
 8105d92:	a201      	add	r2, pc, #4	; (adr r2, 8105d98 <UART_SetConfig+0x478>)
 8105d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105d98:	08105db1 	.word	0x08105db1
 8105d9c:	08105db9 	.word	0x08105db9
 8105da0:	08105dc1 	.word	0x08105dc1
 8105da4:	08105dc9 	.word	0x08105dc9
 8105da8:	08105dd1 	.word	0x08105dd1
 8105dac:	08105dd9 	.word	0x08105dd9
 8105db0:	2300      	movs	r3, #0
 8105db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105db6:	e086      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105db8:	2304      	movs	r3, #4
 8105dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105dbe:	e082      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105dc0:	2308      	movs	r3, #8
 8105dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105dc6:	e07e      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105dc8:	2310      	movs	r3, #16
 8105dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105dce:	e07a      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105dd0:	2320      	movs	r3, #32
 8105dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105dd6:	e076      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105dd8:	2340      	movs	r3, #64	; 0x40
 8105dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105dde:	e072      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105de0:	2380      	movs	r3, #128	; 0x80
 8105de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105de6:	e06e      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105de8:	697b      	ldr	r3, [r7, #20]
 8105dea:	681b      	ldr	r3, [r3, #0]
 8105dec:	4a75      	ldr	r2, [pc, #468]	; (8105fc4 <UART_SetConfig+0x6a4>)
 8105dee:	4293      	cmp	r3, r2
 8105df0:	d130      	bne.n	8105e54 <UART_SetConfig+0x534>
 8105df2:	4b72      	ldr	r3, [pc, #456]	; (8105fbc <UART_SetConfig+0x69c>)
 8105df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105df6:	f003 0307 	and.w	r3, r3, #7
 8105dfa:	2b05      	cmp	r3, #5
 8105dfc:	d826      	bhi.n	8105e4c <UART_SetConfig+0x52c>
 8105dfe:	a201      	add	r2, pc, #4	; (adr r2, 8105e04 <UART_SetConfig+0x4e4>)
 8105e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105e04:	08105e1d 	.word	0x08105e1d
 8105e08:	08105e25 	.word	0x08105e25
 8105e0c:	08105e2d 	.word	0x08105e2d
 8105e10:	08105e35 	.word	0x08105e35
 8105e14:	08105e3d 	.word	0x08105e3d
 8105e18:	08105e45 	.word	0x08105e45
 8105e1c:	2300      	movs	r3, #0
 8105e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105e22:	e050      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105e24:	2304      	movs	r3, #4
 8105e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105e2a:	e04c      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105e2c:	2308      	movs	r3, #8
 8105e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105e32:	e048      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105e34:	2310      	movs	r3, #16
 8105e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105e3a:	e044      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105e3c:	2320      	movs	r3, #32
 8105e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105e42:	e040      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105e44:	2340      	movs	r3, #64	; 0x40
 8105e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105e4a:	e03c      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105e4c:	2380      	movs	r3, #128	; 0x80
 8105e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105e52:	e038      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105e54:	697b      	ldr	r3, [r7, #20]
 8105e56:	681b      	ldr	r3, [r3, #0]
 8105e58:	4a5b      	ldr	r2, [pc, #364]	; (8105fc8 <UART_SetConfig+0x6a8>)
 8105e5a:	4293      	cmp	r3, r2
 8105e5c:	d130      	bne.n	8105ec0 <UART_SetConfig+0x5a0>
 8105e5e:	4b57      	ldr	r3, [pc, #348]	; (8105fbc <UART_SetConfig+0x69c>)
 8105e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105e62:	f003 0307 	and.w	r3, r3, #7
 8105e66:	2b05      	cmp	r3, #5
 8105e68:	d826      	bhi.n	8105eb8 <UART_SetConfig+0x598>
 8105e6a:	a201      	add	r2, pc, #4	; (adr r2, 8105e70 <UART_SetConfig+0x550>)
 8105e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105e70:	08105e89 	.word	0x08105e89
 8105e74:	08105e91 	.word	0x08105e91
 8105e78:	08105e99 	.word	0x08105e99
 8105e7c:	08105ea1 	.word	0x08105ea1
 8105e80:	08105ea9 	.word	0x08105ea9
 8105e84:	08105eb1 	.word	0x08105eb1
 8105e88:	2302      	movs	r3, #2
 8105e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105e8e:	e01a      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105e90:	2304      	movs	r3, #4
 8105e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105e96:	e016      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105e98:	2308      	movs	r3, #8
 8105e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105e9e:	e012      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105ea0:	2310      	movs	r3, #16
 8105ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105ea6:	e00e      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105ea8:	2320      	movs	r3, #32
 8105eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105eae:	e00a      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105eb0:	2340      	movs	r3, #64	; 0x40
 8105eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105eb6:	e006      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105eb8:	2380      	movs	r3, #128	; 0x80
 8105eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105ebe:	e002      	b.n	8105ec6 <UART_SetConfig+0x5a6>
 8105ec0:	2380      	movs	r3, #128	; 0x80
 8105ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8105ec6:	697b      	ldr	r3, [r7, #20]
 8105ec8:	681b      	ldr	r3, [r3, #0]
 8105eca:	4a3f      	ldr	r2, [pc, #252]	; (8105fc8 <UART_SetConfig+0x6a8>)
 8105ecc:	4293      	cmp	r3, r2
 8105ece:	f040 80f8 	bne.w	81060c2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8105ed2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8105ed6:	2b20      	cmp	r3, #32
 8105ed8:	dc46      	bgt.n	8105f68 <UART_SetConfig+0x648>
 8105eda:	2b02      	cmp	r3, #2
 8105edc:	f2c0 8082 	blt.w	8105fe4 <UART_SetConfig+0x6c4>
 8105ee0:	3b02      	subs	r3, #2
 8105ee2:	2b1e      	cmp	r3, #30
 8105ee4:	d87e      	bhi.n	8105fe4 <UART_SetConfig+0x6c4>
 8105ee6:	a201      	add	r2, pc, #4	; (adr r2, 8105eec <UART_SetConfig+0x5cc>)
 8105ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105eec:	08105f6f 	.word	0x08105f6f
 8105ef0:	08105fe5 	.word	0x08105fe5
 8105ef4:	08105f77 	.word	0x08105f77
 8105ef8:	08105fe5 	.word	0x08105fe5
 8105efc:	08105fe5 	.word	0x08105fe5
 8105f00:	08105fe5 	.word	0x08105fe5
 8105f04:	08105f87 	.word	0x08105f87
 8105f08:	08105fe5 	.word	0x08105fe5
 8105f0c:	08105fe5 	.word	0x08105fe5
 8105f10:	08105fe5 	.word	0x08105fe5
 8105f14:	08105fe5 	.word	0x08105fe5
 8105f18:	08105fe5 	.word	0x08105fe5
 8105f1c:	08105fe5 	.word	0x08105fe5
 8105f20:	08105fe5 	.word	0x08105fe5
 8105f24:	08105f97 	.word	0x08105f97
 8105f28:	08105fe5 	.word	0x08105fe5
 8105f2c:	08105fe5 	.word	0x08105fe5
 8105f30:	08105fe5 	.word	0x08105fe5
 8105f34:	08105fe5 	.word	0x08105fe5
 8105f38:	08105fe5 	.word	0x08105fe5
 8105f3c:	08105fe5 	.word	0x08105fe5
 8105f40:	08105fe5 	.word	0x08105fe5
 8105f44:	08105fe5 	.word	0x08105fe5
 8105f48:	08105fe5 	.word	0x08105fe5
 8105f4c:	08105fe5 	.word	0x08105fe5
 8105f50:	08105fe5 	.word	0x08105fe5
 8105f54:	08105fe5 	.word	0x08105fe5
 8105f58:	08105fe5 	.word	0x08105fe5
 8105f5c:	08105fe5 	.word	0x08105fe5
 8105f60:	08105fe5 	.word	0x08105fe5
 8105f64:	08105fd7 	.word	0x08105fd7
 8105f68:	2b40      	cmp	r3, #64	; 0x40
 8105f6a:	d037      	beq.n	8105fdc <UART_SetConfig+0x6bc>
 8105f6c:	e03a      	b.n	8105fe4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8105f6e:	f7fe fcb9 	bl	81048e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8105f72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105f74:	e03c      	b.n	8105ff0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105f7a:	4618      	mov	r0, r3
 8105f7c:	f7fe fcc8 	bl	8104910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105f84:	e034      	b.n	8105ff0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105f86:	f107 0318 	add.w	r3, r7, #24
 8105f8a:	4618      	mov	r0, r3
 8105f8c:	f7fe fe14 	bl	8104bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105f90:	69fb      	ldr	r3, [r7, #28]
 8105f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105f94:	e02c      	b.n	8105ff0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105f96:	4b09      	ldr	r3, [pc, #36]	; (8105fbc <UART_SetConfig+0x69c>)
 8105f98:	681b      	ldr	r3, [r3, #0]
 8105f9a:	f003 0320 	and.w	r3, r3, #32
 8105f9e:	2b00      	cmp	r3, #0
 8105fa0:	d016      	beq.n	8105fd0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105fa2:	4b06      	ldr	r3, [pc, #24]	; (8105fbc <UART_SetConfig+0x69c>)
 8105fa4:	681b      	ldr	r3, [r3, #0]
 8105fa6:	08db      	lsrs	r3, r3, #3
 8105fa8:	f003 0303 	and.w	r3, r3, #3
 8105fac:	4a07      	ldr	r2, [pc, #28]	; (8105fcc <UART_SetConfig+0x6ac>)
 8105fae:	fa22 f303 	lsr.w	r3, r2, r3
 8105fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105fb4:	e01c      	b.n	8105ff0 <UART_SetConfig+0x6d0>
 8105fb6:	bf00      	nop
 8105fb8:	40011400 	.word	0x40011400
 8105fbc:	58024400 	.word	0x58024400
 8105fc0:	40007800 	.word	0x40007800
 8105fc4:	40007c00 	.word	0x40007c00
 8105fc8:	58000c00 	.word	0x58000c00
 8105fcc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8105fd0:	4b9d      	ldr	r3, [pc, #628]	; (8106248 <UART_SetConfig+0x928>)
 8105fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105fd4:	e00c      	b.n	8105ff0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105fd6:	4b9d      	ldr	r3, [pc, #628]	; (810624c <UART_SetConfig+0x92c>)
 8105fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105fda:	e009      	b.n	8105ff0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105fdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105fe2:	e005      	b.n	8105ff0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8105fe4:	2300      	movs	r3, #0
 8105fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8105fe8:	2301      	movs	r3, #1
 8105fea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8105fee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8105ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105ff2:	2b00      	cmp	r3, #0
 8105ff4:	f000 81de 	beq.w	81063b4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8105ff8:	697b      	ldr	r3, [r7, #20]
 8105ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105ffc:	4a94      	ldr	r2, [pc, #592]	; (8106250 <UART_SetConfig+0x930>)
 8105ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106002:	461a      	mov	r2, r3
 8106004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106006:	fbb3 f3f2 	udiv	r3, r3, r2
 810600a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810600c:	697b      	ldr	r3, [r7, #20]
 810600e:	685a      	ldr	r2, [r3, #4]
 8106010:	4613      	mov	r3, r2
 8106012:	005b      	lsls	r3, r3, #1
 8106014:	4413      	add	r3, r2
 8106016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8106018:	429a      	cmp	r2, r3
 810601a:	d305      	bcc.n	8106028 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810601c:	697b      	ldr	r3, [r7, #20]
 810601e:	685b      	ldr	r3, [r3, #4]
 8106020:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8106022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8106024:	429a      	cmp	r2, r3
 8106026:	d903      	bls.n	8106030 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8106028:	2301      	movs	r3, #1
 810602a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810602e:	e1c1      	b.n	81063b4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106032:	2200      	movs	r2, #0
 8106034:	60bb      	str	r3, [r7, #8]
 8106036:	60fa      	str	r2, [r7, #12]
 8106038:	697b      	ldr	r3, [r7, #20]
 810603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810603c:	4a84      	ldr	r2, [pc, #528]	; (8106250 <UART_SetConfig+0x930>)
 810603e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106042:	b29b      	uxth	r3, r3
 8106044:	2200      	movs	r2, #0
 8106046:	603b      	str	r3, [r7, #0]
 8106048:	607a      	str	r2, [r7, #4]
 810604a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810604e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8106052:	f7fa f99d 	bl	8100390 <__aeabi_uldivmod>
 8106056:	4602      	mov	r2, r0
 8106058:	460b      	mov	r3, r1
 810605a:	4610      	mov	r0, r2
 810605c:	4619      	mov	r1, r3
 810605e:	f04f 0200 	mov.w	r2, #0
 8106062:	f04f 0300 	mov.w	r3, #0
 8106066:	020b      	lsls	r3, r1, #8
 8106068:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810606c:	0202      	lsls	r2, r0, #8
 810606e:	6979      	ldr	r1, [r7, #20]
 8106070:	6849      	ldr	r1, [r1, #4]
 8106072:	0849      	lsrs	r1, r1, #1
 8106074:	2000      	movs	r0, #0
 8106076:	460c      	mov	r4, r1
 8106078:	4605      	mov	r5, r0
 810607a:	eb12 0804 	adds.w	r8, r2, r4
 810607e:	eb43 0905 	adc.w	r9, r3, r5
 8106082:	697b      	ldr	r3, [r7, #20]
 8106084:	685b      	ldr	r3, [r3, #4]
 8106086:	2200      	movs	r2, #0
 8106088:	469a      	mov	sl, r3
 810608a:	4693      	mov	fp, r2
 810608c:	4652      	mov	r2, sl
 810608e:	465b      	mov	r3, fp
 8106090:	4640      	mov	r0, r8
 8106092:	4649      	mov	r1, r9
 8106094:	f7fa f97c 	bl	8100390 <__aeabi_uldivmod>
 8106098:	4602      	mov	r2, r0
 810609a:	460b      	mov	r3, r1
 810609c:	4613      	mov	r3, r2
 810609e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 81060a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81060a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81060a6:	d308      	bcc.n	81060ba <UART_SetConfig+0x79a>
 81060a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81060aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81060ae:	d204      	bcs.n	81060ba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 81060b0:	697b      	ldr	r3, [r7, #20]
 81060b2:	681b      	ldr	r3, [r3, #0]
 81060b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81060b6:	60da      	str	r2, [r3, #12]
 81060b8:	e17c      	b.n	81063b4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 81060ba:	2301      	movs	r3, #1
 81060bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81060c0:	e178      	b.n	81063b4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81060c2:	697b      	ldr	r3, [r7, #20]
 81060c4:	69db      	ldr	r3, [r3, #28]
 81060c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81060ca:	f040 80c5 	bne.w	8106258 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 81060ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81060d2:	2b20      	cmp	r3, #32
 81060d4:	dc48      	bgt.n	8106168 <UART_SetConfig+0x848>
 81060d6:	2b00      	cmp	r3, #0
 81060d8:	db7b      	blt.n	81061d2 <UART_SetConfig+0x8b2>
 81060da:	2b20      	cmp	r3, #32
 81060dc:	d879      	bhi.n	81061d2 <UART_SetConfig+0x8b2>
 81060de:	a201      	add	r2, pc, #4	; (adr r2, 81060e4 <UART_SetConfig+0x7c4>)
 81060e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81060e4:	0810616f 	.word	0x0810616f
 81060e8:	08106177 	.word	0x08106177
 81060ec:	081061d3 	.word	0x081061d3
 81060f0:	081061d3 	.word	0x081061d3
 81060f4:	0810617f 	.word	0x0810617f
 81060f8:	081061d3 	.word	0x081061d3
 81060fc:	081061d3 	.word	0x081061d3
 8106100:	081061d3 	.word	0x081061d3
 8106104:	0810618f 	.word	0x0810618f
 8106108:	081061d3 	.word	0x081061d3
 810610c:	081061d3 	.word	0x081061d3
 8106110:	081061d3 	.word	0x081061d3
 8106114:	081061d3 	.word	0x081061d3
 8106118:	081061d3 	.word	0x081061d3
 810611c:	081061d3 	.word	0x081061d3
 8106120:	081061d3 	.word	0x081061d3
 8106124:	0810619f 	.word	0x0810619f
 8106128:	081061d3 	.word	0x081061d3
 810612c:	081061d3 	.word	0x081061d3
 8106130:	081061d3 	.word	0x081061d3
 8106134:	081061d3 	.word	0x081061d3
 8106138:	081061d3 	.word	0x081061d3
 810613c:	081061d3 	.word	0x081061d3
 8106140:	081061d3 	.word	0x081061d3
 8106144:	081061d3 	.word	0x081061d3
 8106148:	081061d3 	.word	0x081061d3
 810614c:	081061d3 	.word	0x081061d3
 8106150:	081061d3 	.word	0x081061d3
 8106154:	081061d3 	.word	0x081061d3
 8106158:	081061d3 	.word	0x081061d3
 810615c:	081061d3 	.word	0x081061d3
 8106160:	081061d3 	.word	0x081061d3
 8106164:	081061c5 	.word	0x081061c5
 8106168:	2b40      	cmp	r3, #64	; 0x40
 810616a:	d02e      	beq.n	81061ca <UART_SetConfig+0x8aa>
 810616c:	e031      	b.n	81061d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810616e:	f7fd fc47 	bl	8103a00 <HAL_RCC_GetPCLK1Freq>
 8106172:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8106174:	e033      	b.n	81061de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8106176:	f7fd fc59 	bl	8103a2c <HAL_RCC_GetPCLK2Freq>
 810617a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810617c:	e02f      	b.n	81061de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810617e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106182:	4618      	mov	r0, r3
 8106184:	f7fe fbc4 	bl	8104910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810618a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810618c:	e027      	b.n	81061de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810618e:	f107 0318 	add.w	r3, r7, #24
 8106192:	4618      	mov	r0, r3
 8106194:	f7fe fd10 	bl	8104bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106198:	69fb      	ldr	r3, [r7, #28]
 810619a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810619c:	e01f      	b.n	81061de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810619e:	4b2d      	ldr	r3, [pc, #180]	; (8106254 <UART_SetConfig+0x934>)
 81061a0:	681b      	ldr	r3, [r3, #0]
 81061a2:	f003 0320 	and.w	r3, r3, #32
 81061a6:	2b00      	cmp	r3, #0
 81061a8:	d009      	beq.n	81061be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81061aa:	4b2a      	ldr	r3, [pc, #168]	; (8106254 <UART_SetConfig+0x934>)
 81061ac:	681b      	ldr	r3, [r3, #0]
 81061ae:	08db      	lsrs	r3, r3, #3
 81061b0:	f003 0303 	and.w	r3, r3, #3
 81061b4:	4a24      	ldr	r2, [pc, #144]	; (8106248 <UART_SetConfig+0x928>)
 81061b6:	fa22 f303 	lsr.w	r3, r2, r3
 81061ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81061bc:	e00f      	b.n	81061de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 81061be:	4b22      	ldr	r3, [pc, #136]	; (8106248 <UART_SetConfig+0x928>)
 81061c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81061c2:	e00c      	b.n	81061de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81061c4:	4b21      	ldr	r3, [pc, #132]	; (810624c <UART_SetConfig+0x92c>)
 81061c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81061c8:	e009      	b.n	81061de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81061ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81061ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81061d0:	e005      	b.n	81061de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 81061d2:	2300      	movs	r3, #0
 81061d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81061d6:	2301      	movs	r3, #1
 81061d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81061dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81061de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81061e0:	2b00      	cmp	r3, #0
 81061e2:	f000 80e7 	beq.w	81063b4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81061e6:	697b      	ldr	r3, [r7, #20]
 81061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81061ea:	4a19      	ldr	r2, [pc, #100]	; (8106250 <UART_SetConfig+0x930>)
 81061ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81061f0:	461a      	mov	r2, r3
 81061f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81061f4:	fbb3 f3f2 	udiv	r3, r3, r2
 81061f8:	005a      	lsls	r2, r3, #1
 81061fa:	697b      	ldr	r3, [r7, #20]
 81061fc:	685b      	ldr	r3, [r3, #4]
 81061fe:	085b      	lsrs	r3, r3, #1
 8106200:	441a      	add	r2, r3
 8106202:	697b      	ldr	r3, [r7, #20]
 8106204:	685b      	ldr	r3, [r3, #4]
 8106206:	fbb2 f3f3 	udiv	r3, r2, r3
 810620a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810620e:	2b0f      	cmp	r3, #15
 8106210:	d916      	bls.n	8106240 <UART_SetConfig+0x920>
 8106212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106218:	d212      	bcs.n	8106240 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810621a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810621c:	b29b      	uxth	r3, r3
 810621e:	f023 030f 	bic.w	r3, r3, #15
 8106222:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8106224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106226:	085b      	lsrs	r3, r3, #1
 8106228:	b29b      	uxth	r3, r3
 810622a:	f003 0307 	and.w	r3, r3, #7
 810622e:	b29a      	uxth	r2, r3
 8106230:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8106232:	4313      	orrs	r3, r2
 8106234:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8106236:	697b      	ldr	r3, [r7, #20]
 8106238:	681b      	ldr	r3, [r3, #0]
 810623a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 810623c:	60da      	str	r2, [r3, #12]
 810623e:	e0b9      	b.n	81063b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8106240:	2301      	movs	r3, #1
 8106242:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8106246:	e0b5      	b.n	81063b4 <UART_SetConfig+0xa94>
 8106248:	03d09000 	.word	0x03d09000
 810624c:	003d0900 	.word	0x003d0900
 8106250:	081074dc 	.word	0x081074dc
 8106254:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8106258:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810625c:	2b20      	cmp	r3, #32
 810625e:	dc49      	bgt.n	81062f4 <UART_SetConfig+0x9d4>
 8106260:	2b00      	cmp	r3, #0
 8106262:	db7c      	blt.n	810635e <UART_SetConfig+0xa3e>
 8106264:	2b20      	cmp	r3, #32
 8106266:	d87a      	bhi.n	810635e <UART_SetConfig+0xa3e>
 8106268:	a201      	add	r2, pc, #4	; (adr r2, 8106270 <UART_SetConfig+0x950>)
 810626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810626e:	bf00      	nop
 8106270:	081062fb 	.word	0x081062fb
 8106274:	08106303 	.word	0x08106303
 8106278:	0810635f 	.word	0x0810635f
 810627c:	0810635f 	.word	0x0810635f
 8106280:	0810630b 	.word	0x0810630b
 8106284:	0810635f 	.word	0x0810635f
 8106288:	0810635f 	.word	0x0810635f
 810628c:	0810635f 	.word	0x0810635f
 8106290:	0810631b 	.word	0x0810631b
 8106294:	0810635f 	.word	0x0810635f
 8106298:	0810635f 	.word	0x0810635f
 810629c:	0810635f 	.word	0x0810635f
 81062a0:	0810635f 	.word	0x0810635f
 81062a4:	0810635f 	.word	0x0810635f
 81062a8:	0810635f 	.word	0x0810635f
 81062ac:	0810635f 	.word	0x0810635f
 81062b0:	0810632b 	.word	0x0810632b
 81062b4:	0810635f 	.word	0x0810635f
 81062b8:	0810635f 	.word	0x0810635f
 81062bc:	0810635f 	.word	0x0810635f
 81062c0:	0810635f 	.word	0x0810635f
 81062c4:	0810635f 	.word	0x0810635f
 81062c8:	0810635f 	.word	0x0810635f
 81062cc:	0810635f 	.word	0x0810635f
 81062d0:	0810635f 	.word	0x0810635f
 81062d4:	0810635f 	.word	0x0810635f
 81062d8:	0810635f 	.word	0x0810635f
 81062dc:	0810635f 	.word	0x0810635f
 81062e0:	0810635f 	.word	0x0810635f
 81062e4:	0810635f 	.word	0x0810635f
 81062e8:	0810635f 	.word	0x0810635f
 81062ec:	0810635f 	.word	0x0810635f
 81062f0:	08106351 	.word	0x08106351
 81062f4:	2b40      	cmp	r3, #64	; 0x40
 81062f6:	d02e      	beq.n	8106356 <UART_SetConfig+0xa36>
 81062f8:	e031      	b.n	810635e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81062fa:	f7fd fb81 	bl	8103a00 <HAL_RCC_GetPCLK1Freq>
 81062fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8106300:	e033      	b.n	810636a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8106302:	f7fd fb93 	bl	8103a2c <HAL_RCC_GetPCLK2Freq>
 8106306:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8106308:	e02f      	b.n	810636a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810630a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810630e:	4618      	mov	r0, r3
 8106310:	f7fe fafe 	bl	8104910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106318:	e027      	b.n	810636a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810631a:	f107 0318 	add.w	r3, r7, #24
 810631e:	4618      	mov	r0, r3
 8106320:	f7fe fc4a 	bl	8104bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106324:	69fb      	ldr	r3, [r7, #28]
 8106326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106328:	e01f      	b.n	810636a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810632a:	4b2d      	ldr	r3, [pc, #180]	; (81063e0 <UART_SetConfig+0xac0>)
 810632c:	681b      	ldr	r3, [r3, #0]
 810632e:	f003 0320 	and.w	r3, r3, #32
 8106332:	2b00      	cmp	r3, #0
 8106334:	d009      	beq.n	810634a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106336:	4b2a      	ldr	r3, [pc, #168]	; (81063e0 <UART_SetConfig+0xac0>)
 8106338:	681b      	ldr	r3, [r3, #0]
 810633a:	08db      	lsrs	r3, r3, #3
 810633c:	f003 0303 	and.w	r3, r3, #3
 8106340:	4a28      	ldr	r2, [pc, #160]	; (81063e4 <UART_SetConfig+0xac4>)
 8106342:	fa22 f303 	lsr.w	r3, r2, r3
 8106346:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106348:	e00f      	b.n	810636a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810634a:	4b26      	ldr	r3, [pc, #152]	; (81063e4 <UART_SetConfig+0xac4>)
 810634c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810634e:	e00c      	b.n	810636a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106350:	4b25      	ldr	r3, [pc, #148]	; (81063e8 <UART_SetConfig+0xac8>)
 8106352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106354:	e009      	b.n	810636a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810635a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810635c:	e005      	b.n	810636a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810635e:	2300      	movs	r3, #0
 8106360:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8106362:	2301      	movs	r3, #1
 8106364:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8106368:	bf00      	nop
    }

    if (pclk != 0U)
 810636a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810636c:	2b00      	cmp	r3, #0
 810636e:	d021      	beq.n	81063b4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106370:	697b      	ldr	r3, [r7, #20]
 8106372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106374:	4a1d      	ldr	r2, [pc, #116]	; (81063ec <UART_SetConfig+0xacc>)
 8106376:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810637a:	461a      	mov	r2, r3
 810637c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810637e:	fbb3 f2f2 	udiv	r2, r3, r2
 8106382:	697b      	ldr	r3, [r7, #20]
 8106384:	685b      	ldr	r3, [r3, #4]
 8106386:	085b      	lsrs	r3, r3, #1
 8106388:	441a      	add	r2, r3
 810638a:	697b      	ldr	r3, [r7, #20]
 810638c:	685b      	ldr	r3, [r3, #4]
 810638e:	fbb2 f3f3 	udiv	r3, r2, r3
 8106392:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106396:	2b0f      	cmp	r3, #15
 8106398:	d909      	bls.n	81063ae <UART_SetConfig+0xa8e>
 810639a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810639c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81063a0:	d205      	bcs.n	81063ae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 81063a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81063a4:	b29a      	uxth	r2, r3
 81063a6:	697b      	ldr	r3, [r7, #20]
 81063a8:	681b      	ldr	r3, [r3, #0]
 81063aa:	60da      	str	r2, [r3, #12]
 81063ac:	e002      	b.n	81063b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81063ae:	2301      	movs	r3, #1
 81063b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81063b4:	697b      	ldr	r3, [r7, #20]
 81063b6:	2201      	movs	r2, #1
 81063b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 81063bc:	697b      	ldr	r3, [r7, #20]
 81063be:	2201      	movs	r2, #1
 81063c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81063c4:	697b      	ldr	r3, [r7, #20]
 81063c6:	2200      	movs	r2, #0
 81063c8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 81063ca:	697b      	ldr	r3, [r7, #20]
 81063cc:	2200      	movs	r2, #0
 81063ce:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 81063d0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 81063d4:	4618      	mov	r0, r3
 81063d6:	3748      	adds	r7, #72	; 0x48
 81063d8:	46bd      	mov	sp, r7
 81063da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81063de:	bf00      	nop
 81063e0:	58024400 	.word	0x58024400
 81063e4:	03d09000 	.word	0x03d09000
 81063e8:	003d0900 	.word	0x003d0900
 81063ec:	081074dc 	.word	0x081074dc

081063f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81063f0:	b480      	push	{r7}
 81063f2:	b083      	sub	sp, #12
 81063f4:	af00      	add	r7, sp, #0
 81063f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81063f8:	687b      	ldr	r3, [r7, #4]
 81063fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81063fc:	f003 0301 	and.w	r3, r3, #1
 8106400:	2b00      	cmp	r3, #0
 8106402:	d00a      	beq.n	810641a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8106404:	687b      	ldr	r3, [r7, #4]
 8106406:	681b      	ldr	r3, [r3, #0]
 8106408:	685b      	ldr	r3, [r3, #4]
 810640a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810640e:	687b      	ldr	r3, [r7, #4]
 8106410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106412:	687b      	ldr	r3, [r7, #4]
 8106414:	681b      	ldr	r3, [r3, #0]
 8106416:	430a      	orrs	r2, r1
 8106418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810641a:	687b      	ldr	r3, [r7, #4]
 810641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810641e:	f003 0302 	and.w	r3, r3, #2
 8106422:	2b00      	cmp	r3, #0
 8106424:	d00a      	beq.n	810643c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8106426:	687b      	ldr	r3, [r7, #4]
 8106428:	681b      	ldr	r3, [r3, #0]
 810642a:	685b      	ldr	r3, [r3, #4]
 810642c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8106430:	687b      	ldr	r3, [r7, #4]
 8106432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8106434:	687b      	ldr	r3, [r7, #4]
 8106436:	681b      	ldr	r3, [r3, #0]
 8106438:	430a      	orrs	r2, r1
 810643a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810643c:	687b      	ldr	r3, [r7, #4]
 810643e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106440:	f003 0304 	and.w	r3, r3, #4
 8106444:	2b00      	cmp	r3, #0
 8106446:	d00a      	beq.n	810645e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8106448:	687b      	ldr	r3, [r7, #4]
 810644a:	681b      	ldr	r3, [r3, #0]
 810644c:	685b      	ldr	r3, [r3, #4]
 810644e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8106452:	687b      	ldr	r3, [r7, #4]
 8106454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8106456:	687b      	ldr	r3, [r7, #4]
 8106458:	681b      	ldr	r3, [r3, #0]
 810645a:	430a      	orrs	r2, r1
 810645c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810645e:	687b      	ldr	r3, [r7, #4]
 8106460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106462:	f003 0308 	and.w	r3, r3, #8
 8106466:	2b00      	cmp	r3, #0
 8106468:	d00a      	beq.n	8106480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810646a:	687b      	ldr	r3, [r7, #4]
 810646c:	681b      	ldr	r3, [r3, #0]
 810646e:	685b      	ldr	r3, [r3, #4]
 8106470:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8106474:	687b      	ldr	r3, [r7, #4]
 8106476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106478:	687b      	ldr	r3, [r7, #4]
 810647a:	681b      	ldr	r3, [r3, #0]
 810647c:	430a      	orrs	r2, r1
 810647e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8106480:	687b      	ldr	r3, [r7, #4]
 8106482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106484:	f003 0310 	and.w	r3, r3, #16
 8106488:	2b00      	cmp	r3, #0
 810648a:	d00a      	beq.n	81064a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810648c:	687b      	ldr	r3, [r7, #4]
 810648e:	681b      	ldr	r3, [r3, #0]
 8106490:	689b      	ldr	r3, [r3, #8]
 8106492:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8106496:	687b      	ldr	r3, [r7, #4]
 8106498:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810649a:	687b      	ldr	r3, [r7, #4]
 810649c:	681b      	ldr	r3, [r3, #0]
 810649e:	430a      	orrs	r2, r1
 81064a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81064a2:	687b      	ldr	r3, [r7, #4]
 81064a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81064a6:	f003 0320 	and.w	r3, r3, #32
 81064aa:	2b00      	cmp	r3, #0
 81064ac:	d00a      	beq.n	81064c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81064ae:	687b      	ldr	r3, [r7, #4]
 81064b0:	681b      	ldr	r3, [r3, #0]
 81064b2:	689b      	ldr	r3, [r3, #8]
 81064b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 81064b8:	687b      	ldr	r3, [r7, #4]
 81064ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 81064bc:	687b      	ldr	r3, [r7, #4]
 81064be:	681b      	ldr	r3, [r3, #0]
 81064c0:	430a      	orrs	r2, r1
 81064c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81064c4:	687b      	ldr	r3, [r7, #4]
 81064c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81064c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81064cc:	2b00      	cmp	r3, #0
 81064ce:	d01a      	beq.n	8106506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 81064d0:	687b      	ldr	r3, [r7, #4]
 81064d2:	681b      	ldr	r3, [r3, #0]
 81064d4:	685b      	ldr	r3, [r3, #4]
 81064d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 81064da:	687b      	ldr	r3, [r7, #4]
 81064dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81064de:	687b      	ldr	r3, [r7, #4]
 81064e0:	681b      	ldr	r3, [r3, #0]
 81064e2:	430a      	orrs	r2, r1
 81064e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 81064e6:	687b      	ldr	r3, [r7, #4]
 81064e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81064ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81064ee:	d10a      	bne.n	8106506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 81064f0:	687b      	ldr	r3, [r7, #4]
 81064f2:	681b      	ldr	r3, [r3, #0]
 81064f4:	685b      	ldr	r3, [r3, #4]
 81064f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 81064fe:	687b      	ldr	r3, [r7, #4]
 8106500:	681b      	ldr	r3, [r3, #0]
 8106502:	430a      	orrs	r2, r1
 8106504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8106506:	687b      	ldr	r3, [r7, #4]
 8106508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810650a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810650e:	2b00      	cmp	r3, #0
 8106510:	d00a      	beq.n	8106528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8106512:	687b      	ldr	r3, [r7, #4]
 8106514:	681b      	ldr	r3, [r3, #0]
 8106516:	685b      	ldr	r3, [r3, #4]
 8106518:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810651c:	687b      	ldr	r3, [r7, #4]
 810651e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8106520:	687b      	ldr	r3, [r7, #4]
 8106522:	681b      	ldr	r3, [r3, #0]
 8106524:	430a      	orrs	r2, r1
 8106526:	605a      	str	r2, [r3, #4]
  }
}
 8106528:	bf00      	nop
 810652a:	370c      	adds	r7, #12
 810652c:	46bd      	mov	sp, r7
 810652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106532:	4770      	bx	lr

08106534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8106534:	b580      	push	{r7, lr}
 8106536:	b086      	sub	sp, #24
 8106538:	af02      	add	r7, sp, #8
 810653a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810653c:	687b      	ldr	r3, [r7, #4]
 810653e:	2200      	movs	r2, #0
 8106540:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8106544:	f7fb fa9a 	bl	8101a7c <HAL_GetTick>
 8106548:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810654a:	687b      	ldr	r3, [r7, #4]
 810654c:	681b      	ldr	r3, [r3, #0]
 810654e:	681b      	ldr	r3, [r3, #0]
 8106550:	f003 0308 	and.w	r3, r3, #8
 8106554:	2b08      	cmp	r3, #8
 8106556:	d10e      	bne.n	8106576 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8106558:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810655c:	9300      	str	r3, [sp, #0]
 810655e:	68fb      	ldr	r3, [r7, #12]
 8106560:	2200      	movs	r2, #0
 8106562:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8106566:	6878      	ldr	r0, [r7, #4]
 8106568:	f000 f82f 	bl	81065ca <UART_WaitOnFlagUntilTimeout>
 810656c:	4603      	mov	r3, r0
 810656e:	2b00      	cmp	r3, #0
 8106570:	d001      	beq.n	8106576 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8106572:	2303      	movs	r3, #3
 8106574:	e025      	b.n	81065c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8106576:	687b      	ldr	r3, [r7, #4]
 8106578:	681b      	ldr	r3, [r3, #0]
 810657a:	681b      	ldr	r3, [r3, #0]
 810657c:	f003 0304 	and.w	r3, r3, #4
 8106580:	2b04      	cmp	r3, #4
 8106582:	d10e      	bne.n	81065a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8106584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8106588:	9300      	str	r3, [sp, #0]
 810658a:	68fb      	ldr	r3, [r7, #12]
 810658c:	2200      	movs	r2, #0
 810658e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8106592:	6878      	ldr	r0, [r7, #4]
 8106594:	f000 f819 	bl	81065ca <UART_WaitOnFlagUntilTimeout>
 8106598:	4603      	mov	r3, r0
 810659a:	2b00      	cmp	r3, #0
 810659c:	d001      	beq.n	81065a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810659e:	2303      	movs	r3, #3
 81065a0:	e00f      	b.n	81065c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81065a2:	687b      	ldr	r3, [r7, #4]
 81065a4:	2220      	movs	r2, #32
 81065a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 81065aa:	687b      	ldr	r3, [r7, #4]
 81065ac:	2220      	movs	r2, #32
 81065ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81065b2:	687b      	ldr	r3, [r7, #4]
 81065b4:	2200      	movs	r2, #0
 81065b6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 81065b8:	687b      	ldr	r3, [r7, #4]
 81065ba:	2200      	movs	r2, #0
 81065bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81065c0:	2300      	movs	r3, #0
}
 81065c2:	4618      	mov	r0, r3
 81065c4:	3710      	adds	r7, #16
 81065c6:	46bd      	mov	sp, r7
 81065c8:	bd80      	pop	{r7, pc}

081065ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81065ca:	b580      	push	{r7, lr}
 81065cc:	b09c      	sub	sp, #112	; 0x70
 81065ce:	af00      	add	r7, sp, #0
 81065d0:	60f8      	str	r0, [r7, #12]
 81065d2:	60b9      	str	r1, [r7, #8]
 81065d4:	603b      	str	r3, [r7, #0]
 81065d6:	4613      	mov	r3, r2
 81065d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81065da:	e0a9      	b.n	8106730 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81065dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81065de:	f1b3 3fff 	cmp.w	r3, #4294967295
 81065e2:	f000 80a5 	beq.w	8106730 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81065e6:	f7fb fa49 	bl	8101a7c <HAL_GetTick>
 81065ea:	4602      	mov	r2, r0
 81065ec:	683b      	ldr	r3, [r7, #0]
 81065ee:	1ad3      	subs	r3, r2, r3
 81065f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 81065f2:	429a      	cmp	r2, r3
 81065f4:	d302      	bcc.n	81065fc <UART_WaitOnFlagUntilTimeout+0x32>
 81065f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81065f8:	2b00      	cmp	r3, #0
 81065fa:	d140      	bne.n	810667e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 81065fc:	68fb      	ldr	r3, [r7, #12]
 81065fe:	681b      	ldr	r3, [r3, #0]
 8106600:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8106604:	e853 3f00 	ldrex	r3, [r3]
 8106608:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 810660a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810660c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8106610:	667b      	str	r3, [r7, #100]	; 0x64
 8106612:	68fb      	ldr	r3, [r7, #12]
 8106614:	681b      	ldr	r3, [r3, #0]
 8106616:	461a      	mov	r2, r3
 8106618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810661a:	65fb      	str	r3, [r7, #92]	; 0x5c
 810661c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810661e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8106620:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8106622:	e841 2300 	strex	r3, r2, [r1]
 8106626:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8106628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810662a:	2b00      	cmp	r3, #0
 810662c:	d1e6      	bne.n	81065fc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810662e:	68fb      	ldr	r3, [r7, #12]
 8106630:	681b      	ldr	r3, [r3, #0]
 8106632:	3308      	adds	r3, #8
 8106634:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106638:	e853 3f00 	ldrex	r3, [r3]
 810663c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810663e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106640:	f023 0301 	bic.w	r3, r3, #1
 8106644:	663b      	str	r3, [r7, #96]	; 0x60
 8106646:	68fb      	ldr	r3, [r7, #12]
 8106648:	681b      	ldr	r3, [r3, #0]
 810664a:	3308      	adds	r3, #8
 810664c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 810664e:	64ba      	str	r2, [r7, #72]	; 0x48
 8106650:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106652:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8106654:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8106656:	e841 2300 	strex	r3, r2, [r1]
 810665a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 810665c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810665e:	2b00      	cmp	r3, #0
 8106660:	d1e5      	bne.n	810662e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8106662:	68fb      	ldr	r3, [r7, #12]
 8106664:	2220      	movs	r2, #32
 8106666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810666a:	68fb      	ldr	r3, [r7, #12]
 810666c:	2220      	movs	r2, #32
 810666e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8106672:	68fb      	ldr	r3, [r7, #12]
 8106674:	2200      	movs	r2, #0
 8106676:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810667a:	2303      	movs	r3, #3
 810667c:	e069      	b.n	8106752 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810667e:	68fb      	ldr	r3, [r7, #12]
 8106680:	681b      	ldr	r3, [r3, #0]
 8106682:	681b      	ldr	r3, [r3, #0]
 8106684:	f003 0304 	and.w	r3, r3, #4
 8106688:	2b00      	cmp	r3, #0
 810668a:	d051      	beq.n	8106730 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810668c:	68fb      	ldr	r3, [r7, #12]
 810668e:	681b      	ldr	r3, [r3, #0]
 8106690:	69db      	ldr	r3, [r3, #28]
 8106692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8106696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810669a:	d149      	bne.n	8106730 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810669c:	68fb      	ldr	r3, [r7, #12]
 810669e:	681b      	ldr	r3, [r3, #0]
 81066a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81066a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 81066a6:	68fb      	ldr	r3, [r7, #12]
 81066a8:	681b      	ldr	r3, [r3, #0]
 81066aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81066ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81066ae:	e853 3f00 	ldrex	r3, [r3]
 81066b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81066b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 81066ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 81066bc:	68fb      	ldr	r3, [r7, #12]
 81066be:	681b      	ldr	r3, [r3, #0]
 81066c0:	461a      	mov	r2, r3
 81066c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81066c4:	637b      	str	r3, [r7, #52]	; 0x34
 81066c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81066c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 81066ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81066cc:	e841 2300 	strex	r3, r2, [r1]
 81066d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 81066d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81066d4:	2b00      	cmp	r3, #0
 81066d6:	d1e6      	bne.n	81066a6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81066d8:	68fb      	ldr	r3, [r7, #12]
 81066da:	681b      	ldr	r3, [r3, #0]
 81066dc:	3308      	adds	r3, #8
 81066de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81066e0:	697b      	ldr	r3, [r7, #20]
 81066e2:	e853 3f00 	ldrex	r3, [r3]
 81066e6:	613b      	str	r3, [r7, #16]
   return(result);
 81066e8:	693b      	ldr	r3, [r7, #16]
 81066ea:	f023 0301 	bic.w	r3, r3, #1
 81066ee:	66bb      	str	r3, [r7, #104]	; 0x68
 81066f0:	68fb      	ldr	r3, [r7, #12]
 81066f2:	681b      	ldr	r3, [r3, #0]
 81066f4:	3308      	adds	r3, #8
 81066f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 81066f8:	623a      	str	r2, [r7, #32]
 81066fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81066fc:	69f9      	ldr	r1, [r7, #28]
 81066fe:	6a3a      	ldr	r2, [r7, #32]
 8106700:	e841 2300 	strex	r3, r2, [r1]
 8106704:	61bb      	str	r3, [r7, #24]
   return(result);
 8106706:	69bb      	ldr	r3, [r7, #24]
 8106708:	2b00      	cmp	r3, #0
 810670a:	d1e5      	bne.n	81066d8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 810670c:	68fb      	ldr	r3, [r7, #12]
 810670e:	2220      	movs	r2, #32
 8106710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8106714:	68fb      	ldr	r3, [r7, #12]
 8106716:	2220      	movs	r2, #32
 8106718:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810671c:	68fb      	ldr	r3, [r7, #12]
 810671e:	2220      	movs	r2, #32
 8106720:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8106724:	68fb      	ldr	r3, [r7, #12]
 8106726:	2200      	movs	r2, #0
 8106728:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810672c:	2303      	movs	r3, #3
 810672e:	e010      	b.n	8106752 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106730:	68fb      	ldr	r3, [r7, #12]
 8106732:	681b      	ldr	r3, [r3, #0]
 8106734:	69da      	ldr	r2, [r3, #28]
 8106736:	68bb      	ldr	r3, [r7, #8]
 8106738:	4013      	ands	r3, r2
 810673a:	68ba      	ldr	r2, [r7, #8]
 810673c:	429a      	cmp	r2, r3
 810673e:	bf0c      	ite	eq
 8106740:	2301      	moveq	r3, #1
 8106742:	2300      	movne	r3, #0
 8106744:	b2db      	uxtb	r3, r3
 8106746:	461a      	mov	r2, r3
 8106748:	79fb      	ldrb	r3, [r7, #7]
 810674a:	429a      	cmp	r2, r3
 810674c:	f43f af46 	beq.w	81065dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8106750:	2300      	movs	r3, #0
}
 8106752:	4618      	mov	r0, r3
 8106754:	3770      	adds	r7, #112	; 0x70
 8106756:	46bd      	mov	sp, r7
 8106758:	bd80      	pop	{r7, pc}

0810675a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810675a:	b480      	push	{r7}
 810675c:	b085      	sub	sp, #20
 810675e:	af00      	add	r7, sp, #0
 8106760:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8106762:	687b      	ldr	r3, [r7, #4]
 8106764:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106768:	2b01      	cmp	r3, #1
 810676a:	d101      	bne.n	8106770 <HAL_UARTEx_DisableFifoMode+0x16>
 810676c:	2302      	movs	r3, #2
 810676e:	e027      	b.n	81067c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8106770:	687b      	ldr	r3, [r7, #4]
 8106772:	2201      	movs	r2, #1
 8106774:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8106778:	687b      	ldr	r3, [r7, #4]
 810677a:	2224      	movs	r2, #36	; 0x24
 810677c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106780:	687b      	ldr	r3, [r7, #4]
 8106782:	681b      	ldr	r3, [r3, #0]
 8106784:	681b      	ldr	r3, [r3, #0]
 8106786:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8106788:	687b      	ldr	r3, [r7, #4]
 810678a:	681b      	ldr	r3, [r3, #0]
 810678c:	681a      	ldr	r2, [r3, #0]
 810678e:	687b      	ldr	r3, [r7, #4]
 8106790:	681b      	ldr	r3, [r3, #0]
 8106792:	f022 0201 	bic.w	r2, r2, #1
 8106796:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8106798:	68fb      	ldr	r3, [r7, #12]
 810679a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810679e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81067a0:	687b      	ldr	r3, [r7, #4]
 81067a2:	2200      	movs	r2, #0
 81067a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81067a6:	687b      	ldr	r3, [r7, #4]
 81067a8:	681b      	ldr	r3, [r3, #0]
 81067aa:	68fa      	ldr	r2, [r7, #12]
 81067ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81067ae:	687b      	ldr	r3, [r7, #4]
 81067b0:	2220      	movs	r2, #32
 81067b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81067b6:	687b      	ldr	r3, [r7, #4]
 81067b8:	2200      	movs	r2, #0
 81067ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81067be:	2300      	movs	r3, #0
}
 81067c0:	4618      	mov	r0, r3
 81067c2:	3714      	adds	r7, #20
 81067c4:	46bd      	mov	sp, r7
 81067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067ca:	4770      	bx	lr

081067cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81067cc:	b580      	push	{r7, lr}
 81067ce:	b084      	sub	sp, #16
 81067d0:	af00      	add	r7, sp, #0
 81067d2:	6078      	str	r0, [r7, #4]
 81067d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81067d6:	687b      	ldr	r3, [r7, #4]
 81067d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81067dc:	2b01      	cmp	r3, #1
 81067de:	d101      	bne.n	81067e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 81067e0:	2302      	movs	r3, #2
 81067e2:	e02d      	b.n	8106840 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 81067e4:	687b      	ldr	r3, [r7, #4]
 81067e6:	2201      	movs	r2, #1
 81067e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81067ec:	687b      	ldr	r3, [r7, #4]
 81067ee:	2224      	movs	r2, #36	; 0x24
 81067f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81067f4:	687b      	ldr	r3, [r7, #4]
 81067f6:	681b      	ldr	r3, [r3, #0]
 81067f8:	681b      	ldr	r3, [r3, #0]
 81067fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81067fc:	687b      	ldr	r3, [r7, #4]
 81067fe:	681b      	ldr	r3, [r3, #0]
 8106800:	681a      	ldr	r2, [r3, #0]
 8106802:	687b      	ldr	r3, [r7, #4]
 8106804:	681b      	ldr	r3, [r3, #0]
 8106806:	f022 0201 	bic.w	r2, r2, #1
 810680a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810680c:	687b      	ldr	r3, [r7, #4]
 810680e:	681b      	ldr	r3, [r3, #0]
 8106810:	689b      	ldr	r3, [r3, #8]
 8106812:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8106816:	687b      	ldr	r3, [r7, #4]
 8106818:	681b      	ldr	r3, [r3, #0]
 810681a:	683a      	ldr	r2, [r7, #0]
 810681c:	430a      	orrs	r2, r1
 810681e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8106820:	6878      	ldr	r0, [r7, #4]
 8106822:	f000 f84f 	bl	81068c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106826:	687b      	ldr	r3, [r7, #4]
 8106828:	681b      	ldr	r3, [r3, #0]
 810682a:	68fa      	ldr	r2, [r7, #12]
 810682c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810682e:	687b      	ldr	r3, [r7, #4]
 8106830:	2220      	movs	r2, #32
 8106832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	2200      	movs	r2, #0
 810683a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810683e:	2300      	movs	r3, #0
}
 8106840:	4618      	mov	r0, r3
 8106842:	3710      	adds	r7, #16
 8106844:	46bd      	mov	sp, r7
 8106846:	bd80      	pop	{r7, pc}

08106848 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8106848:	b580      	push	{r7, lr}
 810684a:	b084      	sub	sp, #16
 810684c:	af00      	add	r7, sp, #0
 810684e:	6078      	str	r0, [r7, #4]
 8106850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8106852:	687b      	ldr	r3, [r7, #4]
 8106854:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106858:	2b01      	cmp	r3, #1
 810685a:	d101      	bne.n	8106860 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810685c:	2302      	movs	r3, #2
 810685e:	e02d      	b.n	81068bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8106860:	687b      	ldr	r3, [r7, #4]
 8106862:	2201      	movs	r2, #1
 8106864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8106868:	687b      	ldr	r3, [r7, #4]
 810686a:	2224      	movs	r2, #36	; 0x24
 810686c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106870:	687b      	ldr	r3, [r7, #4]
 8106872:	681b      	ldr	r3, [r3, #0]
 8106874:	681b      	ldr	r3, [r3, #0]
 8106876:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8106878:	687b      	ldr	r3, [r7, #4]
 810687a:	681b      	ldr	r3, [r3, #0]
 810687c:	681a      	ldr	r2, [r3, #0]
 810687e:	687b      	ldr	r3, [r7, #4]
 8106880:	681b      	ldr	r3, [r3, #0]
 8106882:	f022 0201 	bic.w	r2, r2, #1
 8106886:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8106888:	687b      	ldr	r3, [r7, #4]
 810688a:	681b      	ldr	r3, [r3, #0]
 810688c:	689b      	ldr	r3, [r3, #8]
 810688e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8106892:	687b      	ldr	r3, [r7, #4]
 8106894:	681b      	ldr	r3, [r3, #0]
 8106896:	683a      	ldr	r2, [r7, #0]
 8106898:	430a      	orrs	r2, r1
 810689a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810689c:	6878      	ldr	r0, [r7, #4]
 810689e:	f000 f811 	bl	81068c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81068a2:	687b      	ldr	r3, [r7, #4]
 81068a4:	681b      	ldr	r3, [r3, #0]
 81068a6:	68fa      	ldr	r2, [r7, #12]
 81068a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81068aa:	687b      	ldr	r3, [r7, #4]
 81068ac:	2220      	movs	r2, #32
 81068ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81068b2:	687b      	ldr	r3, [r7, #4]
 81068b4:	2200      	movs	r2, #0
 81068b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81068ba:	2300      	movs	r3, #0
}
 81068bc:	4618      	mov	r0, r3
 81068be:	3710      	adds	r7, #16
 81068c0:	46bd      	mov	sp, r7
 81068c2:	bd80      	pop	{r7, pc}

081068c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81068c4:	b480      	push	{r7}
 81068c6:	b085      	sub	sp, #20
 81068c8:	af00      	add	r7, sp, #0
 81068ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81068cc:	687b      	ldr	r3, [r7, #4]
 81068ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81068d0:	2b00      	cmp	r3, #0
 81068d2:	d108      	bne.n	81068e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 81068d4:	687b      	ldr	r3, [r7, #4]
 81068d6:	2201      	movs	r2, #1
 81068d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 81068dc:	687b      	ldr	r3, [r7, #4]
 81068de:	2201      	movs	r2, #1
 81068e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 81068e4:	e031      	b.n	810694a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 81068e6:	2310      	movs	r3, #16
 81068e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 81068ea:	2310      	movs	r3, #16
 81068ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81068ee:	687b      	ldr	r3, [r7, #4]
 81068f0:	681b      	ldr	r3, [r3, #0]
 81068f2:	689b      	ldr	r3, [r3, #8]
 81068f4:	0e5b      	lsrs	r3, r3, #25
 81068f6:	b2db      	uxtb	r3, r3
 81068f8:	f003 0307 	and.w	r3, r3, #7
 81068fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81068fe:	687b      	ldr	r3, [r7, #4]
 8106900:	681b      	ldr	r3, [r3, #0]
 8106902:	689b      	ldr	r3, [r3, #8]
 8106904:	0f5b      	lsrs	r3, r3, #29
 8106906:	b2db      	uxtb	r3, r3
 8106908:	f003 0307 	and.w	r3, r3, #7
 810690c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810690e:	7bbb      	ldrb	r3, [r7, #14]
 8106910:	7b3a      	ldrb	r2, [r7, #12]
 8106912:	4911      	ldr	r1, [pc, #68]	; (8106958 <UARTEx_SetNbDataToProcess+0x94>)
 8106914:	5c8a      	ldrb	r2, [r1, r2]
 8106916:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810691a:	7b3a      	ldrb	r2, [r7, #12]
 810691c:	490f      	ldr	r1, [pc, #60]	; (810695c <UARTEx_SetNbDataToProcess+0x98>)
 810691e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106920:	fb93 f3f2 	sdiv	r3, r3, r2
 8106924:	b29a      	uxth	r2, r3
 8106926:	687b      	ldr	r3, [r7, #4]
 8106928:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810692c:	7bfb      	ldrb	r3, [r7, #15]
 810692e:	7b7a      	ldrb	r2, [r7, #13]
 8106930:	4909      	ldr	r1, [pc, #36]	; (8106958 <UARTEx_SetNbDataToProcess+0x94>)
 8106932:	5c8a      	ldrb	r2, [r1, r2]
 8106934:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8106938:	7b7a      	ldrb	r2, [r7, #13]
 810693a:	4908      	ldr	r1, [pc, #32]	; (810695c <UARTEx_SetNbDataToProcess+0x98>)
 810693c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810693e:	fb93 f3f2 	sdiv	r3, r3, r2
 8106942:	b29a      	uxth	r2, r3
 8106944:	687b      	ldr	r3, [r7, #4]
 8106946:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810694a:	bf00      	nop
 810694c:	3714      	adds	r7, #20
 810694e:	46bd      	mov	sp, r7
 8106950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106954:	4770      	bx	lr
 8106956:	bf00      	nop
 8106958:	081074f4 	.word	0x081074f4
 810695c:	081074fc 	.word	0x081074fc

08106960 <__errno>:
 8106960:	4b01      	ldr	r3, [pc, #4]	; (8106968 <__errno+0x8>)
 8106962:	6818      	ldr	r0, [r3, #0]
 8106964:	4770      	bx	lr
 8106966:	bf00      	nop
 8106968:	10000014 	.word	0x10000014

0810696c <__libc_init_array>:
 810696c:	b570      	push	{r4, r5, r6, lr}
 810696e:	4d0d      	ldr	r5, [pc, #52]	; (81069a4 <__libc_init_array+0x38>)
 8106970:	4c0d      	ldr	r4, [pc, #52]	; (81069a8 <__libc_init_array+0x3c>)
 8106972:	1b64      	subs	r4, r4, r5
 8106974:	10a4      	asrs	r4, r4, #2
 8106976:	2600      	movs	r6, #0
 8106978:	42a6      	cmp	r6, r4
 810697a:	d109      	bne.n	8106990 <__libc_init_array+0x24>
 810697c:	4d0b      	ldr	r5, [pc, #44]	; (81069ac <__libc_init_array+0x40>)
 810697e:	4c0c      	ldr	r4, [pc, #48]	; (81069b0 <__libc_init_array+0x44>)
 8106980:	f000 fc8e 	bl	81072a0 <_init>
 8106984:	1b64      	subs	r4, r4, r5
 8106986:	10a4      	asrs	r4, r4, #2
 8106988:	2600      	movs	r6, #0
 810698a:	42a6      	cmp	r6, r4
 810698c:	d105      	bne.n	810699a <__libc_init_array+0x2e>
 810698e:	bd70      	pop	{r4, r5, r6, pc}
 8106990:	f855 3b04 	ldr.w	r3, [r5], #4
 8106994:	4798      	blx	r3
 8106996:	3601      	adds	r6, #1
 8106998:	e7ee      	b.n	8106978 <__libc_init_array+0xc>
 810699a:	f855 3b04 	ldr.w	r3, [r5], #4
 810699e:	4798      	blx	r3
 81069a0:	3601      	adds	r6, #1
 81069a2:	e7f2      	b.n	810698a <__libc_init_array+0x1e>
 81069a4:	08107540 	.word	0x08107540
 81069a8:	08107540 	.word	0x08107540
 81069ac:	08107540 	.word	0x08107540
 81069b0:	08107544 	.word	0x08107544

081069b4 <memcpy>:
 81069b4:	440a      	add	r2, r1
 81069b6:	4291      	cmp	r1, r2
 81069b8:	f100 33ff 	add.w	r3, r0, #4294967295
 81069bc:	d100      	bne.n	81069c0 <memcpy+0xc>
 81069be:	4770      	bx	lr
 81069c0:	b510      	push	{r4, lr}
 81069c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 81069c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 81069ca:	4291      	cmp	r1, r2
 81069cc:	d1f9      	bne.n	81069c2 <memcpy+0xe>
 81069ce:	bd10      	pop	{r4, pc}

081069d0 <memset>:
 81069d0:	4402      	add	r2, r0
 81069d2:	4603      	mov	r3, r0
 81069d4:	4293      	cmp	r3, r2
 81069d6:	d100      	bne.n	81069da <memset+0xa>
 81069d8:	4770      	bx	lr
 81069da:	f803 1b01 	strb.w	r1, [r3], #1
 81069de:	e7f9      	b.n	81069d4 <memset+0x4>

081069e0 <siprintf>:
 81069e0:	b40e      	push	{r1, r2, r3}
 81069e2:	b500      	push	{lr}
 81069e4:	b09c      	sub	sp, #112	; 0x70
 81069e6:	ab1d      	add	r3, sp, #116	; 0x74
 81069e8:	9002      	str	r0, [sp, #8]
 81069ea:	9006      	str	r0, [sp, #24]
 81069ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 81069f0:	4809      	ldr	r0, [pc, #36]	; (8106a18 <siprintf+0x38>)
 81069f2:	9107      	str	r1, [sp, #28]
 81069f4:	9104      	str	r1, [sp, #16]
 81069f6:	4909      	ldr	r1, [pc, #36]	; (8106a1c <siprintf+0x3c>)
 81069f8:	f853 2b04 	ldr.w	r2, [r3], #4
 81069fc:	9105      	str	r1, [sp, #20]
 81069fe:	6800      	ldr	r0, [r0, #0]
 8106a00:	9301      	str	r3, [sp, #4]
 8106a02:	a902      	add	r1, sp, #8
 8106a04:	f000 f868 	bl	8106ad8 <_svfiprintf_r>
 8106a08:	9b02      	ldr	r3, [sp, #8]
 8106a0a:	2200      	movs	r2, #0
 8106a0c:	701a      	strb	r2, [r3, #0]
 8106a0e:	b01c      	add	sp, #112	; 0x70
 8106a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8106a14:	b003      	add	sp, #12
 8106a16:	4770      	bx	lr
 8106a18:	10000014 	.word	0x10000014
 8106a1c:	ffff0208 	.word	0xffff0208

08106a20 <__ssputs_r>:
 8106a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8106a24:	688e      	ldr	r6, [r1, #8]
 8106a26:	429e      	cmp	r6, r3
 8106a28:	4682      	mov	sl, r0
 8106a2a:	460c      	mov	r4, r1
 8106a2c:	4690      	mov	r8, r2
 8106a2e:	461f      	mov	r7, r3
 8106a30:	d838      	bhi.n	8106aa4 <__ssputs_r+0x84>
 8106a32:	898a      	ldrh	r2, [r1, #12]
 8106a34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8106a38:	d032      	beq.n	8106aa0 <__ssputs_r+0x80>
 8106a3a:	6825      	ldr	r5, [r4, #0]
 8106a3c:	6909      	ldr	r1, [r1, #16]
 8106a3e:	eba5 0901 	sub.w	r9, r5, r1
 8106a42:	6965      	ldr	r5, [r4, #20]
 8106a44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8106a48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8106a4c:	3301      	adds	r3, #1
 8106a4e:	444b      	add	r3, r9
 8106a50:	106d      	asrs	r5, r5, #1
 8106a52:	429d      	cmp	r5, r3
 8106a54:	bf38      	it	cc
 8106a56:	461d      	movcc	r5, r3
 8106a58:	0553      	lsls	r3, r2, #21
 8106a5a:	d531      	bpl.n	8106ac0 <__ssputs_r+0xa0>
 8106a5c:	4629      	mov	r1, r5
 8106a5e:	f000 fb55 	bl	810710c <_malloc_r>
 8106a62:	4606      	mov	r6, r0
 8106a64:	b950      	cbnz	r0, 8106a7c <__ssputs_r+0x5c>
 8106a66:	230c      	movs	r3, #12
 8106a68:	f8ca 3000 	str.w	r3, [sl]
 8106a6c:	89a3      	ldrh	r3, [r4, #12]
 8106a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8106a72:	81a3      	strh	r3, [r4, #12]
 8106a74:	f04f 30ff 	mov.w	r0, #4294967295
 8106a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106a7c:	6921      	ldr	r1, [r4, #16]
 8106a7e:	464a      	mov	r2, r9
 8106a80:	f7ff ff98 	bl	81069b4 <memcpy>
 8106a84:	89a3      	ldrh	r3, [r4, #12]
 8106a86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8106a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8106a8e:	81a3      	strh	r3, [r4, #12]
 8106a90:	6126      	str	r6, [r4, #16]
 8106a92:	6165      	str	r5, [r4, #20]
 8106a94:	444e      	add	r6, r9
 8106a96:	eba5 0509 	sub.w	r5, r5, r9
 8106a9a:	6026      	str	r6, [r4, #0]
 8106a9c:	60a5      	str	r5, [r4, #8]
 8106a9e:	463e      	mov	r6, r7
 8106aa0:	42be      	cmp	r6, r7
 8106aa2:	d900      	bls.n	8106aa6 <__ssputs_r+0x86>
 8106aa4:	463e      	mov	r6, r7
 8106aa6:	6820      	ldr	r0, [r4, #0]
 8106aa8:	4632      	mov	r2, r6
 8106aaa:	4641      	mov	r1, r8
 8106aac:	f000 faa8 	bl	8107000 <memmove>
 8106ab0:	68a3      	ldr	r3, [r4, #8]
 8106ab2:	1b9b      	subs	r3, r3, r6
 8106ab4:	60a3      	str	r3, [r4, #8]
 8106ab6:	6823      	ldr	r3, [r4, #0]
 8106ab8:	4433      	add	r3, r6
 8106aba:	6023      	str	r3, [r4, #0]
 8106abc:	2000      	movs	r0, #0
 8106abe:	e7db      	b.n	8106a78 <__ssputs_r+0x58>
 8106ac0:	462a      	mov	r2, r5
 8106ac2:	f000 fb97 	bl	81071f4 <_realloc_r>
 8106ac6:	4606      	mov	r6, r0
 8106ac8:	2800      	cmp	r0, #0
 8106aca:	d1e1      	bne.n	8106a90 <__ssputs_r+0x70>
 8106acc:	6921      	ldr	r1, [r4, #16]
 8106ace:	4650      	mov	r0, sl
 8106ad0:	f000 fab0 	bl	8107034 <_free_r>
 8106ad4:	e7c7      	b.n	8106a66 <__ssputs_r+0x46>
	...

08106ad8 <_svfiprintf_r>:
 8106ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106adc:	4698      	mov	r8, r3
 8106ade:	898b      	ldrh	r3, [r1, #12]
 8106ae0:	061b      	lsls	r3, r3, #24
 8106ae2:	b09d      	sub	sp, #116	; 0x74
 8106ae4:	4607      	mov	r7, r0
 8106ae6:	460d      	mov	r5, r1
 8106ae8:	4614      	mov	r4, r2
 8106aea:	d50e      	bpl.n	8106b0a <_svfiprintf_r+0x32>
 8106aec:	690b      	ldr	r3, [r1, #16]
 8106aee:	b963      	cbnz	r3, 8106b0a <_svfiprintf_r+0x32>
 8106af0:	2140      	movs	r1, #64	; 0x40
 8106af2:	f000 fb0b 	bl	810710c <_malloc_r>
 8106af6:	6028      	str	r0, [r5, #0]
 8106af8:	6128      	str	r0, [r5, #16]
 8106afa:	b920      	cbnz	r0, 8106b06 <_svfiprintf_r+0x2e>
 8106afc:	230c      	movs	r3, #12
 8106afe:	603b      	str	r3, [r7, #0]
 8106b00:	f04f 30ff 	mov.w	r0, #4294967295
 8106b04:	e0d1      	b.n	8106caa <_svfiprintf_r+0x1d2>
 8106b06:	2340      	movs	r3, #64	; 0x40
 8106b08:	616b      	str	r3, [r5, #20]
 8106b0a:	2300      	movs	r3, #0
 8106b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8106b0e:	2320      	movs	r3, #32
 8106b10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8106b14:	f8cd 800c 	str.w	r8, [sp, #12]
 8106b18:	2330      	movs	r3, #48	; 0x30
 8106b1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8106cc4 <_svfiprintf_r+0x1ec>
 8106b1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8106b22:	f04f 0901 	mov.w	r9, #1
 8106b26:	4623      	mov	r3, r4
 8106b28:	469a      	mov	sl, r3
 8106b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8106b2e:	b10a      	cbz	r2, 8106b34 <_svfiprintf_r+0x5c>
 8106b30:	2a25      	cmp	r2, #37	; 0x25
 8106b32:	d1f9      	bne.n	8106b28 <_svfiprintf_r+0x50>
 8106b34:	ebba 0b04 	subs.w	fp, sl, r4
 8106b38:	d00b      	beq.n	8106b52 <_svfiprintf_r+0x7a>
 8106b3a:	465b      	mov	r3, fp
 8106b3c:	4622      	mov	r2, r4
 8106b3e:	4629      	mov	r1, r5
 8106b40:	4638      	mov	r0, r7
 8106b42:	f7ff ff6d 	bl	8106a20 <__ssputs_r>
 8106b46:	3001      	adds	r0, #1
 8106b48:	f000 80aa 	beq.w	8106ca0 <_svfiprintf_r+0x1c8>
 8106b4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8106b4e:	445a      	add	r2, fp
 8106b50:	9209      	str	r2, [sp, #36]	; 0x24
 8106b52:	f89a 3000 	ldrb.w	r3, [sl]
 8106b56:	2b00      	cmp	r3, #0
 8106b58:	f000 80a2 	beq.w	8106ca0 <_svfiprintf_r+0x1c8>
 8106b5c:	2300      	movs	r3, #0
 8106b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8106b62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8106b66:	f10a 0a01 	add.w	sl, sl, #1
 8106b6a:	9304      	str	r3, [sp, #16]
 8106b6c:	9307      	str	r3, [sp, #28]
 8106b6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8106b72:	931a      	str	r3, [sp, #104]	; 0x68
 8106b74:	4654      	mov	r4, sl
 8106b76:	2205      	movs	r2, #5
 8106b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106b7c:	4851      	ldr	r0, [pc, #324]	; (8106cc4 <_svfiprintf_r+0x1ec>)
 8106b7e:	f7f9 fbb7 	bl	81002f0 <memchr>
 8106b82:	9a04      	ldr	r2, [sp, #16]
 8106b84:	b9d8      	cbnz	r0, 8106bbe <_svfiprintf_r+0xe6>
 8106b86:	06d0      	lsls	r0, r2, #27
 8106b88:	bf44      	itt	mi
 8106b8a:	2320      	movmi	r3, #32
 8106b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8106b90:	0711      	lsls	r1, r2, #28
 8106b92:	bf44      	itt	mi
 8106b94:	232b      	movmi	r3, #43	; 0x2b
 8106b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8106b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8106b9e:	2b2a      	cmp	r3, #42	; 0x2a
 8106ba0:	d015      	beq.n	8106bce <_svfiprintf_r+0xf6>
 8106ba2:	9a07      	ldr	r2, [sp, #28]
 8106ba4:	4654      	mov	r4, sl
 8106ba6:	2000      	movs	r0, #0
 8106ba8:	f04f 0c0a 	mov.w	ip, #10
 8106bac:	4621      	mov	r1, r4
 8106bae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8106bb2:	3b30      	subs	r3, #48	; 0x30
 8106bb4:	2b09      	cmp	r3, #9
 8106bb6:	d94e      	bls.n	8106c56 <_svfiprintf_r+0x17e>
 8106bb8:	b1b0      	cbz	r0, 8106be8 <_svfiprintf_r+0x110>
 8106bba:	9207      	str	r2, [sp, #28]
 8106bbc:	e014      	b.n	8106be8 <_svfiprintf_r+0x110>
 8106bbe:	eba0 0308 	sub.w	r3, r0, r8
 8106bc2:	fa09 f303 	lsl.w	r3, r9, r3
 8106bc6:	4313      	orrs	r3, r2
 8106bc8:	9304      	str	r3, [sp, #16]
 8106bca:	46a2      	mov	sl, r4
 8106bcc:	e7d2      	b.n	8106b74 <_svfiprintf_r+0x9c>
 8106bce:	9b03      	ldr	r3, [sp, #12]
 8106bd0:	1d19      	adds	r1, r3, #4
 8106bd2:	681b      	ldr	r3, [r3, #0]
 8106bd4:	9103      	str	r1, [sp, #12]
 8106bd6:	2b00      	cmp	r3, #0
 8106bd8:	bfbb      	ittet	lt
 8106bda:	425b      	neglt	r3, r3
 8106bdc:	f042 0202 	orrlt.w	r2, r2, #2
 8106be0:	9307      	strge	r3, [sp, #28]
 8106be2:	9307      	strlt	r3, [sp, #28]
 8106be4:	bfb8      	it	lt
 8106be6:	9204      	strlt	r2, [sp, #16]
 8106be8:	7823      	ldrb	r3, [r4, #0]
 8106bea:	2b2e      	cmp	r3, #46	; 0x2e
 8106bec:	d10c      	bne.n	8106c08 <_svfiprintf_r+0x130>
 8106bee:	7863      	ldrb	r3, [r4, #1]
 8106bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8106bf2:	d135      	bne.n	8106c60 <_svfiprintf_r+0x188>
 8106bf4:	9b03      	ldr	r3, [sp, #12]
 8106bf6:	1d1a      	adds	r2, r3, #4
 8106bf8:	681b      	ldr	r3, [r3, #0]
 8106bfa:	9203      	str	r2, [sp, #12]
 8106bfc:	2b00      	cmp	r3, #0
 8106bfe:	bfb8      	it	lt
 8106c00:	f04f 33ff 	movlt.w	r3, #4294967295
 8106c04:	3402      	adds	r4, #2
 8106c06:	9305      	str	r3, [sp, #20]
 8106c08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8106cd4 <_svfiprintf_r+0x1fc>
 8106c0c:	7821      	ldrb	r1, [r4, #0]
 8106c0e:	2203      	movs	r2, #3
 8106c10:	4650      	mov	r0, sl
 8106c12:	f7f9 fb6d 	bl	81002f0 <memchr>
 8106c16:	b140      	cbz	r0, 8106c2a <_svfiprintf_r+0x152>
 8106c18:	2340      	movs	r3, #64	; 0x40
 8106c1a:	eba0 000a 	sub.w	r0, r0, sl
 8106c1e:	fa03 f000 	lsl.w	r0, r3, r0
 8106c22:	9b04      	ldr	r3, [sp, #16]
 8106c24:	4303      	orrs	r3, r0
 8106c26:	3401      	adds	r4, #1
 8106c28:	9304      	str	r3, [sp, #16]
 8106c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106c2e:	4826      	ldr	r0, [pc, #152]	; (8106cc8 <_svfiprintf_r+0x1f0>)
 8106c30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8106c34:	2206      	movs	r2, #6
 8106c36:	f7f9 fb5b 	bl	81002f0 <memchr>
 8106c3a:	2800      	cmp	r0, #0
 8106c3c:	d038      	beq.n	8106cb0 <_svfiprintf_r+0x1d8>
 8106c3e:	4b23      	ldr	r3, [pc, #140]	; (8106ccc <_svfiprintf_r+0x1f4>)
 8106c40:	bb1b      	cbnz	r3, 8106c8a <_svfiprintf_r+0x1b2>
 8106c42:	9b03      	ldr	r3, [sp, #12]
 8106c44:	3307      	adds	r3, #7
 8106c46:	f023 0307 	bic.w	r3, r3, #7
 8106c4a:	3308      	adds	r3, #8
 8106c4c:	9303      	str	r3, [sp, #12]
 8106c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8106c50:	4433      	add	r3, r6
 8106c52:	9309      	str	r3, [sp, #36]	; 0x24
 8106c54:	e767      	b.n	8106b26 <_svfiprintf_r+0x4e>
 8106c56:	fb0c 3202 	mla	r2, ip, r2, r3
 8106c5a:	460c      	mov	r4, r1
 8106c5c:	2001      	movs	r0, #1
 8106c5e:	e7a5      	b.n	8106bac <_svfiprintf_r+0xd4>
 8106c60:	2300      	movs	r3, #0
 8106c62:	3401      	adds	r4, #1
 8106c64:	9305      	str	r3, [sp, #20]
 8106c66:	4619      	mov	r1, r3
 8106c68:	f04f 0c0a 	mov.w	ip, #10
 8106c6c:	4620      	mov	r0, r4
 8106c6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8106c72:	3a30      	subs	r2, #48	; 0x30
 8106c74:	2a09      	cmp	r2, #9
 8106c76:	d903      	bls.n	8106c80 <_svfiprintf_r+0x1a8>
 8106c78:	2b00      	cmp	r3, #0
 8106c7a:	d0c5      	beq.n	8106c08 <_svfiprintf_r+0x130>
 8106c7c:	9105      	str	r1, [sp, #20]
 8106c7e:	e7c3      	b.n	8106c08 <_svfiprintf_r+0x130>
 8106c80:	fb0c 2101 	mla	r1, ip, r1, r2
 8106c84:	4604      	mov	r4, r0
 8106c86:	2301      	movs	r3, #1
 8106c88:	e7f0      	b.n	8106c6c <_svfiprintf_r+0x194>
 8106c8a:	ab03      	add	r3, sp, #12
 8106c8c:	9300      	str	r3, [sp, #0]
 8106c8e:	462a      	mov	r2, r5
 8106c90:	4b0f      	ldr	r3, [pc, #60]	; (8106cd0 <_svfiprintf_r+0x1f8>)
 8106c92:	a904      	add	r1, sp, #16
 8106c94:	4638      	mov	r0, r7
 8106c96:	f3af 8000 	nop.w
 8106c9a:	1c42      	adds	r2, r0, #1
 8106c9c:	4606      	mov	r6, r0
 8106c9e:	d1d6      	bne.n	8106c4e <_svfiprintf_r+0x176>
 8106ca0:	89ab      	ldrh	r3, [r5, #12]
 8106ca2:	065b      	lsls	r3, r3, #25
 8106ca4:	f53f af2c 	bmi.w	8106b00 <_svfiprintf_r+0x28>
 8106ca8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8106caa:	b01d      	add	sp, #116	; 0x74
 8106cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106cb0:	ab03      	add	r3, sp, #12
 8106cb2:	9300      	str	r3, [sp, #0]
 8106cb4:	462a      	mov	r2, r5
 8106cb6:	4b06      	ldr	r3, [pc, #24]	; (8106cd0 <_svfiprintf_r+0x1f8>)
 8106cb8:	a904      	add	r1, sp, #16
 8106cba:	4638      	mov	r0, r7
 8106cbc:	f000 f87a 	bl	8106db4 <_printf_i>
 8106cc0:	e7eb      	b.n	8106c9a <_svfiprintf_r+0x1c2>
 8106cc2:	bf00      	nop
 8106cc4:	08107504 	.word	0x08107504
 8106cc8:	0810750e 	.word	0x0810750e
 8106ccc:	00000000 	.word	0x00000000
 8106cd0:	08106a21 	.word	0x08106a21
 8106cd4:	0810750a 	.word	0x0810750a

08106cd8 <_printf_common>:
 8106cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8106cdc:	4616      	mov	r6, r2
 8106cde:	4699      	mov	r9, r3
 8106ce0:	688a      	ldr	r2, [r1, #8]
 8106ce2:	690b      	ldr	r3, [r1, #16]
 8106ce4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8106ce8:	4293      	cmp	r3, r2
 8106cea:	bfb8      	it	lt
 8106cec:	4613      	movlt	r3, r2
 8106cee:	6033      	str	r3, [r6, #0]
 8106cf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8106cf4:	4607      	mov	r7, r0
 8106cf6:	460c      	mov	r4, r1
 8106cf8:	b10a      	cbz	r2, 8106cfe <_printf_common+0x26>
 8106cfa:	3301      	adds	r3, #1
 8106cfc:	6033      	str	r3, [r6, #0]
 8106cfe:	6823      	ldr	r3, [r4, #0]
 8106d00:	0699      	lsls	r1, r3, #26
 8106d02:	bf42      	ittt	mi
 8106d04:	6833      	ldrmi	r3, [r6, #0]
 8106d06:	3302      	addmi	r3, #2
 8106d08:	6033      	strmi	r3, [r6, #0]
 8106d0a:	6825      	ldr	r5, [r4, #0]
 8106d0c:	f015 0506 	ands.w	r5, r5, #6
 8106d10:	d106      	bne.n	8106d20 <_printf_common+0x48>
 8106d12:	f104 0a19 	add.w	sl, r4, #25
 8106d16:	68e3      	ldr	r3, [r4, #12]
 8106d18:	6832      	ldr	r2, [r6, #0]
 8106d1a:	1a9b      	subs	r3, r3, r2
 8106d1c:	42ab      	cmp	r3, r5
 8106d1e:	dc26      	bgt.n	8106d6e <_printf_common+0x96>
 8106d20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8106d24:	1e13      	subs	r3, r2, #0
 8106d26:	6822      	ldr	r2, [r4, #0]
 8106d28:	bf18      	it	ne
 8106d2a:	2301      	movne	r3, #1
 8106d2c:	0692      	lsls	r2, r2, #26
 8106d2e:	d42b      	bmi.n	8106d88 <_printf_common+0xb0>
 8106d30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8106d34:	4649      	mov	r1, r9
 8106d36:	4638      	mov	r0, r7
 8106d38:	47c0      	blx	r8
 8106d3a:	3001      	adds	r0, #1
 8106d3c:	d01e      	beq.n	8106d7c <_printf_common+0xa4>
 8106d3e:	6823      	ldr	r3, [r4, #0]
 8106d40:	68e5      	ldr	r5, [r4, #12]
 8106d42:	6832      	ldr	r2, [r6, #0]
 8106d44:	f003 0306 	and.w	r3, r3, #6
 8106d48:	2b04      	cmp	r3, #4
 8106d4a:	bf08      	it	eq
 8106d4c:	1aad      	subeq	r5, r5, r2
 8106d4e:	68a3      	ldr	r3, [r4, #8]
 8106d50:	6922      	ldr	r2, [r4, #16]
 8106d52:	bf0c      	ite	eq
 8106d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8106d58:	2500      	movne	r5, #0
 8106d5a:	4293      	cmp	r3, r2
 8106d5c:	bfc4      	itt	gt
 8106d5e:	1a9b      	subgt	r3, r3, r2
 8106d60:	18ed      	addgt	r5, r5, r3
 8106d62:	2600      	movs	r6, #0
 8106d64:	341a      	adds	r4, #26
 8106d66:	42b5      	cmp	r5, r6
 8106d68:	d11a      	bne.n	8106da0 <_printf_common+0xc8>
 8106d6a:	2000      	movs	r0, #0
 8106d6c:	e008      	b.n	8106d80 <_printf_common+0xa8>
 8106d6e:	2301      	movs	r3, #1
 8106d70:	4652      	mov	r2, sl
 8106d72:	4649      	mov	r1, r9
 8106d74:	4638      	mov	r0, r7
 8106d76:	47c0      	blx	r8
 8106d78:	3001      	adds	r0, #1
 8106d7a:	d103      	bne.n	8106d84 <_printf_common+0xac>
 8106d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8106d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106d84:	3501      	adds	r5, #1
 8106d86:	e7c6      	b.n	8106d16 <_printf_common+0x3e>
 8106d88:	18e1      	adds	r1, r4, r3
 8106d8a:	1c5a      	adds	r2, r3, #1
 8106d8c:	2030      	movs	r0, #48	; 0x30
 8106d8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8106d92:	4422      	add	r2, r4
 8106d94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8106d98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8106d9c:	3302      	adds	r3, #2
 8106d9e:	e7c7      	b.n	8106d30 <_printf_common+0x58>
 8106da0:	2301      	movs	r3, #1
 8106da2:	4622      	mov	r2, r4
 8106da4:	4649      	mov	r1, r9
 8106da6:	4638      	mov	r0, r7
 8106da8:	47c0      	blx	r8
 8106daa:	3001      	adds	r0, #1
 8106dac:	d0e6      	beq.n	8106d7c <_printf_common+0xa4>
 8106dae:	3601      	adds	r6, #1
 8106db0:	e7d9      	b.n	8106d66 <_printf_common+0x8e>
	...

08106db4 <_printf_i>:
 8106db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8106db8:	7e0f      	ldrb	r7, [r1, #24]
 8106dba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8106dbc:	2f78      	cmp	r7, #120	; 0x78
 8106dbe:	4691      	mov	r9, r2
 8106dc0:	4680      	mov	r8, r0
 8106dc2:	460c      	mov	r4, r1
 8106dc4:	469a      	mov	sl, r3
 8106dc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8106dca:	d807      	bhi.n	8106ddc <_printf_i+0x28>
 8106dcc:	2f62      	cmp	r7, #98	; 0x62
 8106dce:	d80a      	bhi.n	8106de6 <_printf_i+0x32>
 8106dd0:	2f00      	cmp	r7, #0
 8106dd2:	f000 80d8 	beq.w	8106f86 <_printf_i+0x1d2>
 8106dd6:	2f58      	cmp	r7, #88	; 0x58
 8106dd8:	f000 80a3 	beq.w	8106f22 <_printf_i+0x16e>
 8106ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8106de0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8106de4:	e03a      	b.n	8106e5c <_printf_i+0xa8>
 8106de6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8106dea:	2b15      	cmp	r3, #21
 8106dec:	d8f6      	bhi.n	8106ddc <_printf_i+0x28>
 8106dee:	a101      	add	r1, pc, #4	; (adr r1, 8106df4 <_printf_i+0x40>)
 8106df0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8106df4:	08106e4d 	.word	0x08106e4d
 8106df8:	08106e61 	.word	0x08106e61
 8106dfc:	08106ddd 	.word	0x08106ddd
 8106e00:	08106ddd 	.word	0x08106ddd
 8106e04:	08106ddd 	.word	0x08106ddd
 8106e08:	08106ddd 	.word	0x08106ddd
 8106e0c:	08106e61 	.word	0x08106e61
 8106e10:	08106ddd 	.word	0x08106ddd
 8106e14:	08106ddd 	.word	0x08106ddd
 8106e18:	08106ddd 	.word	0x08106ddd
 8106e1c:	08106ddd 	.word	0x08106ddd
 8106e20:	08106f6d 	.word	0x08106f6d
 8106e24:	08106e91 	.word	0x08106e91
 8106e28:	08106f4f 	.word	0x08106f4f
 8106e2c:	08106ddd 	.word	0x08106ddd
 8106e30:	08106ddd 	.word	0x08106ddd
 8106e34:	08106f8f 	.word	0x08106f8f
 8106e38:	08106ddd 	.word	0x08106ddd
 8106e3c:	08106e91 	.word	0x08106e91
 8106e40:	08106ddd 	.word	0x08106ddd
 8106e44:	08106ddd 	.word	0x08106ddd
 8106e48:	08106f57 	.word	0x08106f57
 8106e4c:	682b      	ldr	r3, [r5, #0]
 8106e4e:	1d1a      	adds	r2, r3, #4
 8106e50:	681b      	ldr	r3, [r3, #0]
 8106e52:	602a      	str	r2, [r5, #0]
 8106e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8106e58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8106e5c:	2301      	movs	r3, #1
 8106e5e:	e0a3      	b.n	8106fa8 <_printf_i+0x1f4>
 8106e60:	6820      	ldr	r0, [r4, #0]
 8106e62:	6829      	ldr	r1, [r5, #0]
 8106e64:	0606      	lsls	r6, r0, #24
 8106e66:	f101 0304 	add.w	r3, r1, #4
 8106e6a:	d50a      	bpl.n	8106e82 <_printf_i+0xce>
 8106e6c:	680e      	ldr	r6, [r1, #0]
 8106e6e:	602b      	str	r3, [r5, #0]
 8106e70:	2e00      	cmp	r6, #0
 8106e72:	da03      	bge.n	8106e7c <_printf_i+0xc8>
 8106e74:	232d      	movs	r3, #45	; 0x2d
 8106e76:	4276      	negs	r6, r6
 8106e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106e7c:	485e      	ldr	r0, [pc, #376]	; (8106ff8 <_printf_i+0x244>)
 8106e7e:	230a      	movs	r3, #10
 8106e80:	e019      	b.n	8106eb6 <_printf_i+0x102>
 8106e82:	680e      	ldr	r6, [r1, #0]
 8106e84:	602b      	str	r3, [r5, #0]
 8106e86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8106e8a:	bf18      	it	ne
 8106e8c:	b236      	sxthne	r6, r6
 8106e8e:	e7ef      	b.n	8106e70 <_printf_i+0xbc>
 8106e90:	682b      	ldr	r3, [r5, #0]
 8106e92:	6820      	ldr	r0, [r4, #0]
 8106e94:	1d19      	adds	r1, r3, #4
 8106e96:	6029      	str	r1, [r5, #0]
 8106e98:	0601      	lsls	r1, r0, #24
 8106e9a:	d501      	bpl.n	8106ea0 <_printf_i+0xec>
 8106e9c:	681e      	ldr	r6, [r3, #0]
 8106e9e:	e002      	b.n	8106ea6 <_printf_i+0xf2>
 8106ea0:	0646      	lsls	r6, r0, #25
 8106ea2:	d5fb      	bpl.n	8106e9c <_printf_i+0xe8>
 8106ea4:	881e      	ldrh	r6, [r3, #0]
 8106ea6:	4854      	ldr	r0, [pc, #336]	; (8106ff8 <_printf_i+0x244>)
 8106ea8:	2f6f      	cmp	r7, #111	; 0x6f
 8106eaa:	bf0c      	ite	eq
 8106eac:	2308      	moveq	r3, #8
 8106eae:	230a      	movne	r3, #10
 8106eb0:	2100      	movs	r1, #0
 8106eb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8106eb6:	6865      	ldr	r5, [r4, #4]
 8106eb8:	60a5      	str	r5, [r4, #8]
 8106eba:	2d00      	cmp	r5, #0
 8106ebc:	bfa2      	ittt	ge
 8106ebe:	6821      	ldrge	r1, [r4, #0]
 8106ec0:	f021 0104 	bicge.w	r1, r1, #4
 8106ec4:	6021      	strge	r1, [r4, #0]
 8106ec6:	b90e      	cbnz	r6, 8106ecc <_printf_i+0x118>
 8106ec8:	2d00      	cmp	r5, #0
 8106eca:	d04d      	beq.n	8106f68 <_printf_i+0x1b4>
 8106ecc:	4615      	mov	r5, r2
 8106ece:	fbb6 f1f3 	udiv	r1, r6, r3
 8106ed2:	fb03 6711 	mls	r7, r3, r1, r6
 8106ed6:	5dc7      	ldrb	r7, [r0, r7]
 8106ed8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8106edc:	4637      	mov	r7, r6
 8106ede:	42bb      	cmp	r3, r7
 8106ee0:	460e      	mov	r6, r1
 8106ee2:	d9f4      	bls.n	8106ece <_printf_i+0x11a>
 8106ee4:	2b08      	cmp	r3, #8
 8106ee6:	d10b      	bne.n	8106f00 <_printf_i+0x14c>
 8106ee8:	6823      	ldr	r3, [r4, #0]
 8106eea:	07de      	lsls	r6, r3, #31
 8106eec:	d508      	bpl.n	8106f00 <_printf_i+0x14c>
 8106eee:	6923      	ldr	r3, [r4, #16]
 8106ef0:	6861      	ldr	r1, [r4, #4]
 8106ef2:	4299      	cmp	r1, r3
 8106ef4:	bfde      	ittt	le
 8106ef6:	2330      	movle	r3, #48	; 0x30
 8106ef8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8106efc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8106f00:	1b52      	subs	r2, r2, r5
 8106f02:	6122      	str	r2, [r4, #16]
 8106f04:	f8cd a000 	str.w	sl, [sp]
 8106f08:	464b      	mov	r3, r9
 8106f0a:	aa03      	add	r2, sp, #12
 8106f0c:	4621      	mov	r1, r4
 8106f0e:	4640      	mov	r0, r8
 8106f10:	f7ff fee2 	bl	8106cd8 <_printf_common>
 8106f14:	3001      	adds	r0, #1
 8106f16:	d14c      	bne.n	8106fb2 <_printf_i+0x1fe>
 8106f18:	f04f 30ff 	mov.w	r0, #4294967295
 8106f1c:	b004      	add	sp, #16
 8106f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106f22:	4835      	ldr	r0, [pc, #212]	; (8106ff8 <_printf_i+0x244>)
 8106f24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8106f28:	6829      	ldr	r1, [r5, #0]
 8106f2a:	6823      	ldr	r3, [r4, #0]
 8106f2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8106f30:	6029      	str	r1, [r5, #0]
 8106f32:	061d      	lsls	r5, r3, #24
 8106f34:	d514      	bpl.n	8106f60 <_printf_i+0x1ac>
 8106f36:	07df      	lsls	r7, r3, #31
 8106f38:	bf44      	itt	mi
 8106f3a:	f043 0320 	orrmi.w	r3, r3, #32
 8106f3e:	6023      	strmi	r3, [r4, #0]
 8106f40:	b91e      	cbnz	r6, 8106f4a <_printf_i+0x196>
 8106f42:	6823      	ldr	r3, [r4, #0]
 8106f44:	f023 0320 	bic.w	r3, r3, #32
 8106f48:	6023      	str	r3, [r4, #0]
 8106f4a:	2310      	movs	r3, #16
 8106f4c:	e7b0      	b.n	8106eb0 <_printf_i+0xfc>
 8106f4e:	6823      	ldr	r3, [r4, #0]
 8106f50:	f043 0320 	orr.w	r3, r3, #32
 8106f54:	6023      	str	r3, [r4, #0]
 8106f56:	2378      	movs	r3, #120	; 0x78
 8106f58:	4828      	ldr	r0, [pc, #160]	; (8106ffc <_printf_i+0x248>)
 8106f5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8106f5e:	e7e3      	b.n	8106f28 <_printf_i+0x174>
 8106f60:	0659      	lsls	r1, r3, #25
 8106f62:	bf48      	it	mi
 8106f64:	b2b6      	uxthmi	r6, r6
 8106f66:	e7e6      	b.n	8106f36 <_printf_i+0x182>
 8106f68:	4615      	mov	r5, r2
 8106f6a:	e7bb      	b.n	8106ee4 <_printf_i+0x130>
 8106f6c:	682b      	ldr	r3, [r5, #0]
 8106f6e:	6826      	ldr	r6, [r4, #0]
 8106f70:	6961      	ldr	r1, [r4, #20]
 8106f72:	1d18      	adds	r0, r3, #4
 8106f74:	6028      	str	r0, [r5, #0]
 8106f76:	0635      	lsls	r5, r6, #24
 8106f78:	681b      	ldr	r3, [r3, #0]
 8106f7a:	d501      	bpl.n	8106f80 <_printf_i+0x1cc>
 8106f7c:	6019      	str	r1, [r3, #0]
 8106f7e:	e002      	b.n	8106f86 <_printf_i+0x1d2>
 8106f80:	0670      	lsls	r0, r6, #25
 8106f82:	d5fb      	bpl.n	8106f7c <_printf_i+0x1c8>
 8106f84:	8019      	strh	r1, [r3, #0]
 8106f86:	2300      	movs	r3, #0
 8106f88:	6123      	str	r3, [r4, #16]
 8106f8a:	4615      	mov	r5, r2
 8106f8c:	e7ba      	b.n	8106f04 <_printf_i+0x150>
 8106f8e:	682b      	ldr	r3, [r5, #0]
 8106f90:	1d1a      	adds	r2, r3, #4
 8106f92:	602a      	str	r2, [r5, #0]
 8106f94:	681d      	ldr	r5, [r3, #0]
 8106f96:	6862      	ldr	r2, [r4, #4]
 8106f98:	2100      	movs	r1, #0
 8106f9a:	4628      	mov	r0, r5
 8106f9c:	f7f9 f9a8 	bl	81002f0 <memchr>
 8106fa0:	b108      	cbz	r0, 8106fa6 <_printf_i+0x1f2>
 8106fa2:	1b40      	subs	r0, r0, r5
 8106fa4:	6060      	str	r0, [r4, #4]
 8106fa6:	6863      	ldr	r3, [r4, #4]
 8106fa8:	6123      	str	r3, [r4, #16]
 8106faa:	2300      	movs	r3, #0
 8106fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106fb0:	e7a8      	b.n	8106f04 <_printf_i+0x150>
 8106fb2:	6923      	ldr	r3, [r4, #16]
 8106fb4:	462a      	mov	r2, r5
 8106fb6:	4649      	mov	r1, r9
 8106fb8:	4640      	mov	r0, r8
 8106fba:	47d0      	blx	sl
 8106fbc:	3001      	adds	r0, #1
 8106fbe:	d0ab      	beq.n	8106f18 <_printf_i+0x164>
 8106fc0:	6823      	ldr	r3, [r4, #0]
 8106fc2:	079b      	lsls	r3, r3, #30
 8106fc4:	d413      	bmi.n	8106fee <_printf_i+0x23a>
 8106fc6:	68e0      	ldr	r0, [r4, #12]
 8106fc8:	9b03      	ldr	r3, [sp, #12]
 8106fca:	4298      	cmp	r0, r3
 8106fcc:	bfb8      	it	lt
 8106fce:	4618      	movlt	r0, r3
 8106fd0:	e7a4      	b.n	8106f1c <_printf_i+0x168>
 8106fd2:	2301      	movs	r3, #1
 8106fd4:	4632      	mov	r2, r6
 8106fd6:	4649      	mov	r1, r9
 8106fd8:	4640      	mov	r0, r8
 8106fda:	47d0      	blx	sl
 8106fdc:	3001      	adds	r0, #1
 8106fde:	d09b      	beq.n	8106f18 <_printf_i+0x164>
 8106fe0:	3501      	adds	r5, #1
 8106fe2:	68e3      	ldr	r3, [r4, #12]
 8106fe4:	9903      	ldr	r1, [sp, #12]
 8106fe6:	1a5b      	subs	r3, r3, r1
 8106fe8:	42ab      	cmp	r3, r5
 8106fea:	dcf2      	bgt.n	8106fd2 <_printf_i+0x21e>
 8106fec:	e7eb      	b.n	8106fc6 <_printf_i+0x212>
 8106fee:	2500      	movs	r5, #0
 8106ff0:	f104 0619 	add.w	r6, r4, #25
 8106ff4:	e7f5      	b.n	8106fe2 <_printf_i+0x22e>
 8106ff6:	bf00      	nop
 8106ff8:	08107515 	.word	0x08107515
 8106ffc:	08107526 	.word	0x08107526

08107000 <memmove>:
 8107000:	4288      	cmp	r0, r1
 8107002:	b510      	push	{r4, lr}
 8107004:	eb01 0402 	add.w	r4, r1, r2
 8107008:	d902      	bls.n	8107010 <memmove+0x10>
 810700a:	4284      	cmp	r4, r0
 810700c:	4623      	mov	r3, r4
 810700e:	d807      	bhi.n	8107020 <memmove+0x20>
 8107010:	1e43      	subs	r3, r0, #1
 8107012:	42a1      	cmp	r1, r4
 8107014:	d008      	beq.n	8107028 <memmove+0x28>
 8107016:	f811 2b01 	ldrb.w	r2, [r1], #1
 810701a:	f803 2f01 	strb.w	r2, [r3, #1]!
 810701e:	e7f8      	b.n	8107012 <memmove+0x12>
 8107020:	4402      	add	r2, r0
 8107022:	4601      	mov	r1, r0
 8107024:	428a      	cmp	r2, r1
 8107026:	d100      	bne.n	810702a <memmove+0x2a>
 8107028:	bd10      	pop	{r4, pc}
 810702a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810702e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8107032:	e7f7      	b.n	8107024 <memmove+0x24>

08107034 <_free_r>:
 8107034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8107036:	2900      	cmp	r1, #0
 8107038:	d044      	beq.n	81070c4 <_free_r+0x90>
 810703a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810703e:	9001      	str	r0, [sp, #4]
 8107040:	2b00      	cmp	r3, #0
 8107042:	f1a1 0404 	sub.w	r4, r1, #4
 8107046:	bfb8      	it	lt
 8107048:	18e4      	addlt	r4, r4, r3
 810704a:	f000 f913 	bl	8107274 <__malloc_lock>
 810704e:	4a1e      	ldr	r2, [pc, #120]	; (81070c8 <_free_r+0x94>)
 8107050:	9801      	ldr	r0, [sp, #4]
 8107052:	6813      	ldr	r3, [r2, #0]
 8107054:	b933      	cbnz	r3, 8107064 <_free_r+0x30>
 8107056:	6063      	str	r3, [r4, #4]
 8107058:	6014      	str	r4, [r2, #0]
 810705a:	b003      	add	sp, #12
 810705c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8107060:	f000 b90e 	b.w	8107280 <__malloc_unlock>
 8107064:	42a3      	cmp	r3, r4
 8107066:	d908      	bls.n	810707a <_free_r+0x46>
 8107068:	6825      	ldr	r5, [r4, #0]
 810706a:	1961      	adds	r1, r4, r5
 810706c:	428b      	cmp	r3, r1
 810706e:	bf01      	itttt	eq
 8107070:	6819      	ldreq	r1, [r3, #0]
 8107072:	685b      	ldreq	r3, [r3, #4]
 8107074:	1949      	addeq	r1, r1, r5
 8107076:	6021      	streq	r1, [r4, #0]
 8107078:	e7ed      	b.n	8107056 <_free_r+0x22>
 810707a:	461a      	mov	r2, r3
 810707c:	685b      	ldr	r3, [r3, #4]
 810707e:	b10b      	cbz	r3, 8107084 <_free_r+0x50>
 8107080:	42a3      	cmp	r3, r4
 8107082:	d9fa      	bls.n	810707a <_free_r+0x46>
 8107084:	6811      	ldr	r1, [r2, #0]
 8107086:	1855      	adds	r5, r2, r1
 8107088:	42a5      	cmp	r5, r4
 810708a:	d10b      	bne.n	81070a4 <_free_r+0x70>
 810708c:	6824      	ldr	r4, [r4, #0]
 810708e:	4421      	add	r1, r4
 8107090:	1854      	adds	r4, r2, r1
 8107092:	42a3      	cmp	r3, r4
 8107094:	6011      	str	r1, [r2, #0]
 8107096:	d1e0      	bne.n	810705a <_free_r+0x26>
 8107098:	681c      	ldr	r4, [r3, #0]
 810709a:	685b      	ldr	r3, [r3, #4]
 810709c:	6053      	str	r3, [r2, #4]
 810709e:	4421      	add	r1, r4
 81070a0:	6011      	str	r1, [r2, #0]
 81070a2:	e7da      	b.n	810705a <_free_r+0x26>
 81070a4:	d902      	bls.n	81070ac <_free_r+0x78>
 81070a6:	230c      	movs	r3, #12
 81070a8:	6003      	str	r3, [r0, #0]
 81070aa:	e7d6      	b.n	810705a <_free_r+0x26>
 81070ac:	6825      	ldr	r5, [r4, #0]
 81070ae:	1961      	adds	r1, r4, r5
 81070b0:	428b      	cmp	r3, r1
 81070b2:	bf04      	itt	eq
 81070b4:	6819      	ldreq	r1, [r3, #0]
 81070b6:	685b      	ldreq	r3, [r3, #4]
 81070b8:	6063      	str	r3, [r4, #4]
 81070ba:	bf04      	itt	eq
 81070bc:	1949      	addeq	r1, r1, r5
 81070be:	6021      	streq	r1, [r4, #0]
 81070c0:	6054      	str	r4, [r2, #4]
 81070c2:	e7ca      	b.n	810705a <_free_r+0x26>
 81070c4:	b003      	add	sp, #12
 81070c6:	bd30      	pop	{r4, r5, pc}
 81070c8:	1000033c 	.word	0x1000033c

081070cc <sbrk_aligned>:
 81070cc:	b570      	push	{r4, r5, r6, lr}
 81070ce:	4e0e      	ldr	r6, [pc, #56]	; (8107108 <sbrk_aligned+0x3c>)
 81070d0:	460c      	mov	r4, r1
 81070d2:	6831      	ldr	r1, [r6, #0]
 81070d4:	4605      	mov	r5, r0
 81070d6:	b911      	cbnz	r1, 81070de <sbrk_aligned+0x12>
 81070d8:	f000 f8bc 	bl	8107254 <_sbrk_r>
 81070dc:	6030      	str	r0, [r6, #0]
 81070de:	4621      	mov	r1, r4
 81070e0:	4628      	mov	r0, r5
 81070e2:	f000 f8b7 	bl	8107254 <_sbrk_r>
 81070e6:	1c43      	adds	r3, r0, #1
 81070e8:	d00a      	beq.n	8107100 <sbrk_aligned+0x34>
 81070ea:	1cc4      	adds	r4, r0, #3
 81070ec:	f024 0403 	bic.w	r4, r4, #3
 81070f0:	42a0      	cmp	r0, r4
 81070f2:	d007      	beq.n	8107104 <sbrk_aligned+0x38>
 81070f4:	1a21      	subs	r1, r4, r0
 81070f6:	4628      	mov	r0, r5
 81070f8:	f000 f8ac 	bl	8107254 <_sbrk_r>
 81070fc:	3001      	adds	r0, #1
 81070fe:	d101      	bne.n	8107104 <sbrk_aligned+0x38>
 8107100:	f04f 34ff 	mov.w	r4, #4294967295
 8107104:	4620      	mov	r0, r4
 8107106:	bd70      	pop	{r4, r5, r6, pc}
 8107108:	10000340 	.word	0x10000340

0810710c <_malloc_r>:
 810710c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107110:	1ccd      	adds	r5, r1, #3
 8107112:	f025 0503 	bic.w	r5, r5, #3
 8107116:	3508      	adds	r5, #8
 8107118:	2d0c      	cmp	r5, #12
 810711a:	bf38      	it	cc
 810711c:	250c      	movcc	r5, #12
 810711e:	2d00      	cmp	r5, #0
 8107120:	4607      	mov	r7, r0
 8107122:	db01      	blt.n	8107128 <_malloc_r+0x1c>
 8107124:	42a9      	cmp	r1, r5
 8107126:	d905      	bls.n	8107134 <_malloc_r+0x28>
 8107128:	230c      	movs	r3, #12
 810712a:	603b      	str	r3, [r7, #0]
 810712c:	2600      	movs	r6, #0
 810712e:	4630      	mov	r0, r6
 8107130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8107134:	4e2e      	ldr	r6, [pc, #184]	; (81071f0 <_malloc_r+0xe4>)
 8107136:	f000 f89d 	bl	8107274 <__malloc_lock>
 810713a:	6833      	ldr	r3, [r6, #0]
 810713c:	461c      	mov	r4, r3
 810713e:	bb34      	cbnz	r4, 810718e <_malloc_r+0x82>
 8107140:	4629      	mov	r1, r5
 8107142:	4638      	mov	r0, r7
 8107144:	f7ff ffc2 	bl	81070cc <sbrk_aligned>
 8107148:	1c43      	adds	r3, r0, #1
 810714a:	4604      	mov	r4, r0
 810714c:	d14d      	bne.n	81071ea <_malloc_r+0xde>
 810714e:	6834      	ldr	r4, [r6, #0]
 8107150:	4626      	mov	r6, r4
 8107152:	2e00      	cmp	r6, #0
 8107154:	d140      	bne.n	81071d8 <_malloc_r+0xcc>
 8107156:	6823      	ldr	r3, [r4, #0]
 8107158:	4631      	mov	r1, r6
 810715a:	4638      	mov	r0, r7
 810715c:	eb04 0803 	add.w	r8, r4, r3
 8107160:	f000 f878 	bl	8107254 <_sbrk_r>
 8107164:	4580      	cmp	r8, r0
 8107166:	d13a      	bne.n	81071de <_malloc_r+0xd2>
 8107168:	6821      	ldr	r1, [r4, #0]
 810716a:	3503      	adds	r5, #3
 810716c:	1a6d      	subs	r5, r5, r1
 810716e:	f025 0503 	bic.w	r5, r5, #3
 8107172:	3508      	adds	r5, #8
 8107174:	2d0c      	cmp	r5, #12
 8107176:	bf38      	it	cc
 8107178:	250c      	movcc	r5, #12
 810717a:	4629      	mov	r1, r5
 810717c:	4638      	mov	r0, r7
 810717e:	f7ff ffa5 	bl	81070cc <sbrk_aligned>
 8107182:	3001      	adds	r0, #1
 8107184:	d02b      	beq.n	81071de <_malloc_r+0xd2>
 8107186:	6823      	ldr	r3, [r4, #0]
 8107188:	442b      	add	r3, r5
 810718a:	6023      	str	r3, [r4, #0]
 810718c:	e00e      	b.n	81071ac <_malloc_r+0xa0>
 810718e:	6822      	ldr	r2, [r4, #0]
 8107190:	1b52      	subs	r2, r2, r5
 8107192:	d41e      	bmi.n	81071d2 <_malloc_r+0xc6>
 8107194:	2a0b      	cmp	r2, #11
 8107196:	d916      	bls.n	81071c6 <_malloc_r+0xba>
 8107198:	1961      	adds	r1, r4, r5
 810719a:	42a3      	cmp	r3, r4
 810719c:	6025      	str	r5, [r4, #0]
 810719e:	bf18      	it	ne
 81071a0:	6059      	strne	r1, [r3, #4]
 81071a2:	6863      	ldr	r3, [r4, #4]
 81071a4:	bf08      	it	eq
 81071a6:	6031      	streq	r1, [r6, #0]
 81071a8:	5162      	str	r2, [r4, r5]
 81071aa:	604b      	str	r3, [r1, #4]
 81071ac:	4638      	mov	r0, r7
 81071ae:	f104 060b 	add.w	r6, r4, #11
 81071b2:	f000 f865 	bl	8107280 <__malloc_unlock>
 81071b6:	f026 0607 	bic.w	r6, r6, #7
 81071ba:	1d23      	adds	r3, r4, #4
 81071bc:	1af2      	subs	r2, r6, r3
 81071be:	d0b6      	beq.n	810712e <_malloc_r+0x22>
 81071c0:	1b9b      	subs	r3, r3, r6
 81071c2:	50a3      	str	r3, [r4, r2]
 81071c4:	e7b3      	b.n	810712e <_malloc_r+0x22>
 81071c6:	6862      	ldr	r2, [r4, #4]
 81071c8:	42a3      	cmp	r3, r4
 81071ca:	bf0c      	ite	eq
 81071cc:	6032      	streq	r2, [r6, #0]
 81071ce:	605a      	strne	r2, [r3, #4]
 81071d0:	e7ec      	b.n	81071ac <_malloc_r+0xa0>
 81071d2:	4623      	mov	r3, r4
 81071d4:	6864      	ldr	r4, [r4, #4]
 81071d6:	e7b2      	b.n	810713e <_malloc_r+0x32>
 81071d8:	4634      	mov	r4, r6
 81071da:	6876      	ldr	r6, [r6, #4]
 81071dc:	e7b9      	b.n	8107152 <_malloc_r+0x46>
 81071de:	230c      	movs	r3, #12
 81071e0:	603b      	str	r3, [r7, #0]
 81071e2:	4638      	mov	r0, r7
 81071e4:	f000 f84c 	bl	8107280 <__malloc_unlock>
 81071e8:	e7a1      	b.n	810712e <_malloc_r+0x22>
 81071ea:	6025      	str	r5, [r4, #0]
 81071ec:	e7de      	b.n	81071ac <_malloc_r+0xa0>
 81071ee:	bf00      	nop
 81071f0:	1000033c 	.word	0x1000033c

081071f4 <_realloc_r>:
 81071f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81071f8:	4680      	mov	r8, r0
 81071fa:	4614      	mov	r4, r2
 81071fc:	460e      	mov	r6, r1
 81071fe:	b921      	cbnz	r1, 810720a <_realloc_r+0x16>
 8107200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8107204:	4611      	mov	r1, r2
 8107206:	f7ff bf81 	b.w	810710c <_malloc_r>
 810720a:	b92a      	cbnz	r2, 8107218 <_realloc_r+0x24>
 810720c:	f7ff ff12 	bl	8107034 <_free_r>
 8107210:	4625      	mov	r5, r4
 8107212:	4628      	mov	r0, r5
 8107214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8107218:	f000 f838 	bl	810728c <_malloc_usable_size_r>
 810721c:	4284      	cmp	r4, r0
 810721e:	4607      	mov	r7, r0
 8107220:	d802      	bhi.n	8107228 <_realloc_r+0x34>
 8107222:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8107226:	d812      	bhi.n	810724e <_realloc_r+0x5a>
 8107228:	4621      	mov	r1, r4
 810722a:	4640      	mov	r0, r8
 810722c:	f7ff ff6e 	bl	810710c <_malloc_r>
 8107230:	4605      	mov	r5, r0
 8107232:	2800      	cmp	r0, #0
 8107234:	d0ed      	beq.n	8107212 <_realloc_r+0x1e>
 8107236:	42bc      	cmp	r4, r7
 8107238:	4622      	mov	r2, r4
 810723a:	4631      	mov	r1, r6
 810723c:	bf28      	it	cs
 810723e:	463a      	movcs	r2, r7
 8107240:	f7ff fbb8 	bl	81069b4 <memcpy>
 8107244:	4631      	mov	r1, r6
 8107246:	4640      	mov	r0, r8
 8107248:	f7ff fef4 	bl	8107034 <_free_r>
 810724c:	e7e1      	b.n	8107212 <_realloc_r+0x1e>
 810724e:	4635      	mov	r5, r6
 8107250:	e7df      	b.n	8107212 <_realloc_r+0x1e>
	...

08107254 <_sbrk_r>:
 8107254:	b538      	push	{r3, r4, r5, lr}
 8107256:	4d06      	ldr	r5, [pc, #24]	; (8107270 <_sbrk_r+0x1c>)
 8107258:	2300      	movs	r3, #0
 810725a:	4604      	mov	r4, r0
 810725c:	4608      	mov	r0, r1
 810725e:	602b      	str	r3, [r5, #0]
 8107260:	f7fa fb04 	bl	810186c <_sbrk>
 8107264:	1c43      	adds	r3, r0, #1
 8107266:	d102      	bne.n	810726e <_sbrk_r+0x1a>
 8107268:	682b      	ldr	r3, [r5, #0]
 810726a:	b103      	cbz	r3, 810726e <_sbrk_r+0x1a>
 810726c:	6023      	str	r3, [r4, #0]
 810726e:	bd38      	pop	{r3, r4, r5, pc}
 8107270:	10000344 	.word	0x10000344

08107274 <__malloc_lock>:
 8107274:	4801      	ldr	r0, [pc, #4]	; (810727c <__malloc_lock+0x8>)
 8107276:	f000 b811 	b.w	810729c <__retarget_lock_acquire_recursive>
 810727a:	bf00      	nop
 810727c:	10000348 	.word	0x10000348

08107280 <__malloc_unlock>:
 8107280:	4801      	ldr	r0, [pc, #4]	; (8107288 <__malloc_unlock+0x8>)
 8107282:	f000 b80c 	b.w	810729e <__retarget_lock_release_recursive>
 8107286:	bf00      	nop
 8107288:	10000348 	.word	0x10000348

0810728c <_malloc_usable_size_r>:
 810728c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8107290:	1f18      	subs	r0, r3, #4
 8107292:	2b00      	cmp	r3, #0
 8107294:	bfbc      	itt	lt
 8107296:	580b      	ldrlt	r3, [r1, r0]
 8107298:	18c0      	addlt	r0, r0, r3
 810729a:	4770      	bx	lr

0810729c <__retarget_lock_acquire_recursive>:
 810729c:	4770      	bx	lr

0810729e <__retarget_lock_release_recursive>:
 810729e:	4770      	bx	lr

081072a0 <_init>:
 81072a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81072a2:	bf00      	nop
 81072a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81072a6:	bc08      	pop	{r3}
 81072a8:	469e      	mov	lr, r3
 81072aa:	4770      	bx	lr

081072ac <_fini>:
 81072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81072ae:	bf00      	nop
 81072b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81072b2:	bc08      	pop	{r3}
 81072b4:	469e      	mov	lr, r3
 81072b6:	4770      	bx	lr
