
H745_ExamGame_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008db4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800904c  0800904c  0001904c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800908c  0800908c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800908c  0800908c  0001908c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009094  08009094  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009094  08009094  00019094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009098  08009098  00019098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800909c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  080090ac  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800910c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000079c  240000d0  0800916c  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400086c  0800916c  0002086c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ba31  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002c74  00000000  00000000  0003bb2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001118  00000000  00000000  0003e7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001020  00000000  00000000  0003f8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b2d7  00000000  00000000  000408e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017338  00000000  00000000  0007bbb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00187d45  00000000  00000000  00092eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0021ac34  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004878  00000000  00000000  0021ac84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009034 	.word	0x08009034

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08009034 	.word	0x08009034

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <main+0xa0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 fa65 	bl	8000c00 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fd23 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f837 	bl	80007ac <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <main+0xa0>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <main+0xa0>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <main+0xa0>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f003 ff3d 	bl	80045dc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f003 ff53 	bl	8004610 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <main+0xa0>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 fa37 	bl	8000c00 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f983 	bl	8000a9c <MX_GPIO_Init>
  MX_ETH_Init();
 8000796:	f000 f88f 	bl	80008b8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800079a:	f000 f8d9 	bl	8000950 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800079e:	f000 f923 	bl	80009e8 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 80007a2:	f000 f953 	bl	8000a4c <MX_DMA_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <main+0x9e>
 80007a8:	58024400 	.word	0x58024400

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b09c      	sub	sp, #112	; 0x70
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b6:	224c      	movs	r2, #76	; 0x4c
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f008 fc32 	bl	8009024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2220      	movs	r2, #32
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f008 fc2c 	bl	8009024 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007cc:	2004      	movs	r0, #4
 80007ce:	f004 f87b 	bl	80048c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b35      	ldr	r3, [pc, #212]	; (80008ac <SystemClock_Config+0x100>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	4a34      	ldr	r2, [pc, #208]	; (80008ac <SystemClock_Config+0x100>)
 80007dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e0:	6193      	str	r3, [r2, #24]
 80007e2:	4b32      	ldr	r3, [pc, #200]	; (80008ac <SystemClock_Config+0x100>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <SystemClock_Config+0x104>)
 80007ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f0:	4a2f      	ldr	r2, [pc, #188]	; (80008b0 <SystemClock_Config+0x104>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007f8:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <SystemClock_Config+0x104>)
 80007fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000804:	bf00      	nop
 8000806:	4b29      	ldr	r3, [pc, #164]	; (80008ac <SystemClock_Config+0x100>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800080e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000812:	d1f8      	bne.n	8000806 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <SystemClock_Config+0x108>)
 8000816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000818:	f023 0303 	bic.w	r3, r3, #3
 800081c:	4a25      	ldr	r2, [pc, #148]	; (80008b4 <SystemClock_Config+0x108>)
 800081e:	f043 0302 	orr.w	r3, r3, #2
 8000822:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000824:	2309      	movs	r3, #9
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000828:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800082e:	2301      	movs	r3, #1
 8000830:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	2302      	movs	r3, #2
 8000834:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000836:	2302      	movs	r3, #2
 8000838:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800083a:	2301      	movs	r3, #1
 800083c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800083e:	2378      	movs	r3, #120	; 0x78
 8000840:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800084a:	2302      	movs	r3, #2
 800084c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800084e:	230c      	movs	r3, #12
 8000850:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000852:	2300      	movs	r3, #0
 8000854:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085e:	4618      	mov	r0, r3
 8000860:	f004 f89c 	bl	800499c <HAL_RCC_OscConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800086a:	f000 f9c9 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086e:	233f      	movs	r3, #63	; 0x3f
 8000870:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000872:	2303      	movs	r3, #3
 8000874:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800087a:	2308      	movs	r3, #8
 800087c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800087e:	2340      	movs	r3, #64	; 0x40
 8000880:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000882:	2340      	movs	r3, #64	; 0x40
 8000884:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800088c:	2340      	movs	r3, #64	; 0x40
 800088e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2104      	movs	r1, #4
 8000894:	4618      	mov	r0, r3
 8000896:	f004 fcaf 	bl	80051f8 <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80008a0:	f000 f9ae 	bl	8000c00 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3770      	adds	r7, #112	; 0x70
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	58024800 	.word	0x58024800
 80008b0:	58000400 	.word	0x58000400
 80008b4:	58024400 	.word	0x58024400

080008b8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008bc:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <MX_ETH_Init+0x80>)
 80008be:	4a1f      	ldr	r2, [pc, #124]	; (800093c <MX_ETH_Init+0x84>)
 80008c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008c2:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_ETH_Init+0x88>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_ETH_Init+0x88>)
 80008ca:	2280      	movs	r2, #128	; 0x80
 80008cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_ETH_Init+0x88>)
 80008d0:	22e1      	movs	r2, #225	; 0xe1
 80008d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_ETH_Init+0x88>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_ETH_Init+0x88>)
 80008dc:	2200      	movs	r2, #0
 80008de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_ETH_Init+0x88>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_ETH_Init+0x80>)
 80008e8:	4a15      	ldr	r2, [pc, #84]	; (8000940 <MX_ETH_Init+0x88>)
 80008ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_ETH_Init+0x80>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_ETH_Init+0x80>)
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <MX_ETH_Init+0x8c>)
 80008f6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_ETH_Init+0x80>)
 80008fa:	4a13      	ldr	r2, [pc, #76]	; (8000948 <MX_ETH_Init+0x90>)
 80008fc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_ETH_Init+0x80>)
 8000900:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000904:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000906:	480c      	ldr	r0, [pc, #48]	; (8000938 <MX_ETH_Init+0x80>)
 8000908:	f003 f846 	bl	8003998 <HAL_ETH_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000912:	f000 f975 	bl	8000c00 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000916:	2238      	movs	r2, #56	; 0x38
 8000918:	2100      	movs	r1, #0
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <MX_ETH_Init+0x94>)
 800091c:	f008 fb82 	bl	8009024 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <MX_ETH_Init+0x94>)
 8000922:	2221      	movs	r2, #33	; 0x21
 8000924:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_ETH_Init+0x94>)
 8000928:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800092c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <MX_ETH_Init+0x94>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	24000124 	.word	0x24000124
 800093c:	40028000 	.word	0x40028000
 8000940:	24000860 	.word	0x24000860
 8000944:	24000070 	.word	0x24000070
 8000948:	24000010 	.word	0x24000010
 800094c:	240000ec 	.word	0x240000ec

08000950 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000956:	4a23      	ldr	r2, [pc, #140]	; (80009e4 <MX_USART3_UART_Init+0x94>)
 8000958:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000998:	4811      	ldr	r0, [pc, #68]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800099a:	f006 fb21 	bl	8006fe0 <HAL_UART_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009a4:	f000 f92c 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a8:	2100      	movs	r1, #0
 80009aa:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 80009ac:	f007 ff42 	bl	8008834 <HAL_UARTEx_SetTxFifoThreshold>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009b6:	f000 f923 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 80009be:	f007 ff77 	bl	80088b0 <HAL_UARTEx_SetRxFifoThreshold>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009c8:	f000 f91a 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 80009ce:	f007 fef8 	bl	80087c2 <HAL_UARTEx_DisableFifoMode>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009d8:	f000 f912 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	240001d4 	.word	0x240001d4
 80009e4:	40004800 	.word	0x40004800

080009e8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ee:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80009f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f4:	2209      	movs	r2, #9
 80009f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009fa:	2202      	movs	r2, #2
 80009fc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a06:	2202      	movs	r2, #2
 8000a08:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a30:	f003 fe02 	bl	8004638 <HAL_PCD_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a3a:	f000 f8e1 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	24000354 	.word	0x24000354
 8000a48:	40080000 	.word	0x40080000

08000a4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_DMA_Init+0x4c>)
 8000a54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a58:	4a0f      	ldr	r2, [pc, #60]	; (8000a98 <MX_DMA_Init+0x4c>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <MX_DMA_Init+0x4c>)
 8000a64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2100      	movs	r1, #0
 8000a74:	200b      	movs	r0, #11
 8000a76:	f000 fd34 	bl	80014e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a7a:	200b      	movs	r0, #11
 8000a7c:	f000 fd4b 	bl	8001516 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	200c      	movs	r0, #12
 8000a86:	f000 fd2c 	bl	80014e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a8a:	200c      	movs	r0, #12
 8000a8c:	f000 fd43 	bl	8001516 <HAL_NVIC_EnableIRQ>

}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	58024400 	.word	0x58024400

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08c      	sub	sp, #48	; 0x30
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b44      	ldr	r3, [pc, #272]	; (8000bc4 <MX_GPIO_Init+0x128>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	4a42      	ldr	r2, [pc, #264]	; (8000bc4 <MX_GPIO_Init+0x128>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac2:	4b40      	ldr	r3, [pc, #256]	; (8000bc4 <MX_GPIO_Init+0x128>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
 8000ace:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad0:	4b3c      	ldr	r3, [pc, #240]	; (8000bc4 <MX_GPIO_Init+0x128>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad6:	4a3b      	ldr	r2, [pc, #236]	; (8000bc4 <MX_GPIO_Init+0x128>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae0:	4b38      	ldr	r3, [pc, #224]	; (8000bc4 <MX_GPIO_Init+0x128>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	4b35      	ldr	r3, [pc, #212]	; (8000bc4 <MX_GPIO_Init+0x128>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af4:	4a33      	ldr	r2, [pc, #204]	; (8000bc4 <MX_GPIO_Init+0x128>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afe:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <MX_GPIO_Init+0x128>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0c:	4b2d      	ldr	r3, [pc, #180]	; (8000bc4 <MX_GPIO_Init+0x128>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b12:	4a2c      	ldr	r2, [pc, #176]	; (8000bc4 <MX_GPIO_Init+0x128>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1c:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <MX_GPIO_Init+0x128>)
 8000b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2a:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <MX_GPIO_Init+0x128>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b30:	4a24      	ldr	r2, [pc, #144]	; (8000bc4 <MX_GPIO_Init+0x128>)
 8000b32:	f043 0308 	orr.w	r3, r3, #8
 8000b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3a:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <MX_GPIO_Init+0x128>)
 8000b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b40:	f003 0308 	and.w	r3, r3, #8
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <MX_GPIO_Init+0x128>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4e:	4a1d      	ldr	r2, [pc, #116]	; (8000bc4 <MX_GPIO_Init+0x128>)
 8000b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_GPIO_Init+0x128>)
 8000b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b6c:	4816      	ldr	r0, [pc, #88]	; (8000bc8 <MX_GPIO_Init+0x12c>)
 8000b6e:	f003 fce7 	bl	8004540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	4810      	ldr	r0, [pc, #64]	; (8000bcc <MX_GPIO_Init+0x130>)
 8000b8a:	f003 fb29 	bl	80041e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000b8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <MX_GPIO_Init+0x12c>)
 8000ba8:	f003 fb1a 	bl	80041e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2028      	movs	r0, #40	; 0x28
 8000bb2:	f000 fc96 	bl	80014e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bb6:	2028      	movs	r0, #40	; 0x28
 8000bb8:	f000 fcad 	bl	8001516 <HAL_NVIC_EnableIRQ>

}
 8000bbc:	bf00      	nop
 8000bbe:	3730      	adds	r7, #48	; 0x30
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	58024400 	.word	0x58024400
 8000bc8:	58020400 	.word	0x58020400
 8000bcc:	58020800 	.word	0x58020800

08000bd0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){ // blue btn
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000be0:	d108      	bne.n	8000bf4 <HAL_GPIO_EXTI_Callback+0x24>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000be2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <HAL_GPIO_EXTI_Callback+0x2c>)
 8000be8:	f003 fcc3 	bl	8004572 <HAL_GPIO_TogglePin>
		SRAM4->flag_blue_btn = 1;
 8000bec:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]

		}
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	58020400 	.word	0x58020400

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <HAL_MspInit+0x30>)
 8000c14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c18:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <HAL_MspInit+0x30>)
 8000c1a:	f043 0302 	orr.w	r3, r3, #2
 8000c1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_MspInit+0x30>)
 8000c24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c28:	f003 0302 	and.w	r3, r3, #2
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	58024400 	.word	0x58024400

08000c40 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	; 0x38
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a59      	ldr	r2, [pc, #356]	; (8000dc4 <HAL_ETH_MspInit+0x184>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	f040 80ab 	bne.w	8000dba <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c64:	4b58      	ldr	r3, [pc, #352]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000c66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c6a:	4a57      	ldr	r2, [pc, #348]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c74:	4b54      	ldr	r3, [pc, #336]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000c76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c7e:	623b      	str	r3, [r7, #32]
 8000c80:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c82:	4b51      	ldr	r3, [pc, #324]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000c84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c88:	4a4f      	ldr	r2, [pc, #316]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c92:	4b4d      	ldr	r3, [pc, #308]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000c94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c9c:	61fb      	str	r3, [r7, #28]
 8000c9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ca0:	4b49      	ldr	r3, [pc, #292]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000ca2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ca6:	4a48      	ldr	r2, [pc, #288]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cb0:	4b45      	ldr	r3, [pc, #276]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000cb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cba:	61bb      	str	r3, [r7, #24]
 8000cbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4b42      	ldr	r3, [pc, #264]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc4:	4a40      	ldr	r2, [pc, #256]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cce:	4b3e      	ldr	r3, [pc, #248]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b3a      	ldr	r3, [pc, #232]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce2:	4a39      	ldr	r2, [pc, #228]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cec:	4b36      	ldr	r3, [pc, #216]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d00:	4a31      	ldr	r2, [pc, #196]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0a:	4b2f      	ldr	r3, [pc, #188]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1e:	4a2a      	ldr	r2, [pc, #168]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d28:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d36:	2332      	movs	r3, #50	; 0x32
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d46:	230b      	movs	r3, #11
 8000d48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	481e      	ldr	r0, [pc, #120]	; (8000dcc <HAL_ETH_MspInit+0x18c>)
 8000d52:	f003 fa45 	bl	80041e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d56:	2386      	movs	r3, #134	; 0x86
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d66:	230b      	movs	r3, #11
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <HAL_ETH_MspInit+0x190>)
 8000d72:	f003 fa35 	bl	80041e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d88:	230b      	movs	r3, #11
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	4810      	ldr	r0, [pc, #64]	; (8000dd4 <HAL_ETH_MspInit+0x194>)
 8000d94:	f003 fa24 	bl	80041e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d98:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000daa:	230b      	movs	r3, #11
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000db6:	f003 fa13 	bl	80041e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000dba:	bf00      	nop
 8000dbc:	3738      	adds	r7, #56	; 0x38
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40028000 	.word	0x40028000
 8000dc8:	58024400 	.word	0x58024400
 8000dcc:	58020800 	.word	0x58020800
 8000dd0:	58020000 	.word	0x58020000
 8000dd4:	58020400 	.word	0x58020400
 8000dd8:	58021800 	.word	0x58021800

08000ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b0b8      	sub	sp, #224	; 0xe0
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	22bc      	movs	r2, #188	; 0xbc
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f008 f911 	bl	8009024 <memset>
  if(huart->Instance==USART3)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a56      	ldr	r2, [pc, #344]	; (8000f60 <HAL_UART_MspInit+0x184>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	f040 80a5 	bne.w	8000f58 <HAL_UART_MspInit+0x17c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f004 fd77 	bl	8005910 <HAL_RCCEx_PeriphCLKConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000e28:	f7ff feea 	bl	8000c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e2c:	4b4d      	ldr	r3, [pc, #308]	; (8000f64 <HAL_UART_MspInit+0x188>)
 8000e2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e32:	4a4c      	ldr	r2, [pc, #304]	; (8000f64 <HAL_UART_MspInit+0x188>)
 8000e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e3c:	4b49      	ldr	r3, [pc, #292]	; (8000f64 <HAL_UART_MspInit+0x188>)
 8000e3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4a:	4b46      	ldr	r3, [pc, #280]	; (8000f64 <HAL_UART_MspInit+0x188>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	4a44      	ldr	r2, [pc, #272]	; (8000f64 <HAL_UART_MspInit+0x188>)
 8000e52:	f043 0308 	orr.w	r3, r3, #8
 8000e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5a:	4b42      	ldr	r3, [pc, #264]	; (8000f64 <HAL_UART_MspInit+0x188>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	f003 0308 	and.w	r3, r3, #8
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e82:	2307      	movs	r3, #7
 8000e84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4836      	ldr	r0, [pc, #216]	; (8000f68 <HAL_UART_MspInit+0x18c>)
 8000e90:	f003 f9a6 	bl	80041e0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8000e94:	4b35      	ldr	r3, [pc, #212]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000e96:	4a36      	ldr	r2, [pc, #216]	; (8000f70 <HAL_UART_MspInit+0x194>)
 8000e98:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000e9a:	4b34      	ldr	r3, [pc, #208]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000e9c:	222d      	movs	r2, #45	; 0x2d
 8000e9e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea0:	4b32      	ldr	r3, [pc, #200]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea6:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eac:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000eae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eb4:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eba:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000ec0:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ec6:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000ed2:	4826      	ldr	r0, [pc, #152]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000ed4:	f000 fb3a 	bl	800154c <HAL_DMA_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8000ede:	f7ff fe8f 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a21      	ldr	r2, [pc, #132]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000ee6:	67da      	str	r2, [r3, #124]	; 0x7c
 8000ee8:	4a20      	ldr	r2, [pc, #128]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <HAL_UART_MspInit+0x198>)
 8000ef0:	4a21      	ldr	r2, [pc, #132]	; (8000f78 <HAL_UART_MspInit+0x19c>)
 8000ef2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <HAL_UART_MspInit+0x198>)
 8000ef6:	222e      	movs	r2, #46	; 0x2e
 8000ef8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <HAL_UART_MspInit+0x198>)
 8000efc:	2240      	movs	r2, #64	; 0x40
 8000efe:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_UART_MspInit+0x198>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <HAL_UART_MspInit+0x198>)
 8000f08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f0c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_UART_MspInit+0x198>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_UART_MspInit+0x198>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <HAL_UART_MspInit+0x198>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_UART_MspInit+0x198>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <HAL_UART_MspInit+0x198>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000f2c:	4811      	ldr	r0, [pc, #68]	; (8000f74 <HAL_UART_MspInit+0x198>)
 8000f2e:	f000 fb0d 	bl	800154c <HAL_DMA_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 8000f38:	f7ff fe62 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <HAL_UART_MspInit+0x198>)
 8000f40:	679a      	str	r2, [r3, #120]	; 0x78
 8000f42:	4a0c      	ldr	r2, [pc, #48]	; (8000f74 <HAL_UART_MspInit+0x198>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2027      	movs	r0, #39	; 0x27
 8000f4e:	f000 fac8 	bl	80014e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f52:	2027      	movs	r0, #39	; 0x27
 8000f54:	f000 fadf 	bl	8001516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f58:	bf00      	nop
 8000f5a:	37e0      	adds	r7, #224	; 0xe0
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40004800 	.word	0x40004800
 8000f64:	58024400 	.word	0x58024400
 8000f68:	58020c00 	.word	0x58020c00
 8000f6c:	24000264 	.word	0x24000264
 8000f70:	40020010 	.word	0x40020010
 8000f74:	240002dc 	.word	0x240002dc
 8000f78:	40020028 	.word	0x40020028

08000f7c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b0b8      	sub	sp, #224	; 0xe0
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	22bc      	movs	r2, #188	; 0xbc
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f008 f841 	bl	8009024 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a36      	ldr	r2, [pc, #216]	; (8001080 <HAL_PCD_MspInit+0x104>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d165      	bne.n	8001078 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000fac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000fb0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000fb6:	2318      	movs	r3, #24
 8000fb8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000fc6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fca:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000fd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f004 fc97 	bl	8005910 <HAL_RCCEx_PeriphCLKConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000fe8:	f7ff fe0a 	bl	8000c00 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000fec:	f003 fcc6 	bl	800497c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff0:	4b24      	ldr	r3, [pc, #144]	; (8001084 <HAL_PCD_MspInit+0x108>)
 8000ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff6:	4a23      	ldr	r2, [pc, #140]	; (8001084 <HAL_PCD_MspInit+0x108>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001000:	4b20      	ldr	r3, [pc, #128]	; (8001084 <HAL_PCD_MspInit+0x108>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800100e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001012:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001016:	2300      	movs	r3, #0
 8001018:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001026:	4619      	mov	r1, r3
 8001028:	4817      	ldr	r0, [pc, #92]	; (8001088 <HAL_PCD_MspInit+0x10c>)
 800102a:	f003 f8d9 	bl	80041e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800102e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001032:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001048:	230a      	movs	r3, #10
 800104a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001052:	4619      	mov	r1, r3
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <HAL_PCD_MspInit+0x10c>)
 8001056:	f003 f8c3 	bl	80041e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_PCD_MspInit+0x108>)
 800105c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001060:	4a08      	ldr	r2, [pc, #32]	; (8001084 <HAL_PCD_MspInit+0x108>)
 8001062:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001066:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_PCD_MspInit+0x108>)
 800106c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001078:	bf00      	nop
 800107a:	37e0      	adds	r7, #224	; 0xe0
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40080000 	.word	0x40080000
 8001084:	58024400 	.word	0x58024400
 8001088:	58020000 	.word	0x58020000

0800108c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <NMI_Handler+0x4>

08001092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <HardFault_Handler+0x4>

08001098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <MemManage_Handler+0x4>

0800109e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <BusFault_Handler+0x4>

080010a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <UsageFault_Handler+0x4>

080010aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d8:	f000 f8c4 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <DMA1_Stream0_IRQHandler+0x10>)
 80010e6:	f001 faf1 	bl	80026cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	24000264 	.word	0x24000264

080010f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <DMA1_Stream1_IRQHandler+0x10>)
 80010fa:	f001 fae7 	bl	80026cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	240002dc 	.word	0x240002dc

08001108 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <USART3_IRQHandler+0x10>)
 800110e:	f005 ffb7 	bl	8007080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	240001d4 	.word	0x240001d4

0800111c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001120:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001124:	f003 fa3f 	bl	80045a6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001164 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001130:	f7ff fa54 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001134:	480c      	ldr	r0, [pc, #48]	; (8001168 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001136:	490d      	ldr	r1, [pc, #52]	; (800116c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800114c:	4c0a      	ldr	r4, [pc, #40]	; (8001178 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115a:	f007 ff3f 	bl	8008fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115e:	f7ff fad3 	bl	8000708 <main>
  bx  lr
 8001162:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001164:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001168:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800116c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001170:	0800909c 	.word	0x0800909c
  ldr r2, =_sbss
 8001174:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001178:	2400086c 	.word	0x2400086c

0800117c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC3_IRQHandler>
	...

08001180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001186:	2003      	movs	r0, #3
 8001188:	f000 f9a0 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800118c:	f004 f9ea 	bl	8005564 <HAL_RCC_GetSysClockFreq>
 8001190:	4602      	mov	r2, r0
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_Init+0x68>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	0a1b      	lsrs	r3, r3, #8
 8001198:	f003 030f 	and.w	r3, r3, #15
 800119c:	4913      	ldr	r1, [pc, #76]	; (80011ec <HAL_Init+0x6c>)
 800119e:	5ccb      	ldrb	r3, [r1, r3]
 80011a0:	f003 031f 	and.w	r3, r3, #31
 80011a4:	fa22 f303 	lsr.w	r3, r2, r3
 80011a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_Init+0x68>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <HAL_Init+0x6c>)
 80011b4:	5cd3      	ldrb	r3, [r2, r3]
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	fa22 f303 	lsr.w	r3, r2, r3
 80011c0:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <HAL_Init+0x70>)
 80011c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011c4:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <HAL_Init+0x74>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 f814 	bl	80011f8 <HAL_InitTick>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e002      	b.n	80011e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011da:	f7ff fd17 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	58024400 	.word	0x58024400
 80011ec:	0800904c 	.word	0x0800904c
 80011f0:	24000004 	.word	0x24000004
 80011f4:	24000000 	.word	0x24000000

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_InitTick+0x60>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e021      	b.n	8001250 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <HAL_InitTick+0x64>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_InitTick+0x60>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f985 	bl	8001532 <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f000 f94f 	bl	80014e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <HAL_InitTick+0x68>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	2400000c 	.word	0x2400000c
 800125c:	24000000 	.word	0x24000000
 8001260:	24000008 	.word	0x24000008

08001264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <HAL_IncTick+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	2400000c 	.word	0x2400000c
 8001288:	24000868 	.word	0x24000868

0800128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	24000868 	.word	0x24000868

080012a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff ffee 	bl	800128c <HAL_GetTick>
 80012b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012bc:	d005      	beq.n	80012ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_Delay+0x44>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ca:	bf00      	nop
 80012cc:	f7ff ffde 	bl	800128c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8f7      	bhi.n	80012cc <HAL_Delay+0x28>
  {
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2400000c 	.word	0x2400000c

080012ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_GetREVID+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	0c1b      	lsrs	r3, r3, #16
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	5c001000 	.word	0x5c001000

08001304 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001314:	4904      	ldr	r1, [pc, #16]	; (8001328 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4313      	orrs	r3, r2
 800131a:	604b      	str	r3, [r1, #4]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	58000400 	.word	0x58000400

0800132c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <__NVIC_SetPriorityGrouping+0x40>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	4313      	orrs	r3, r2
 8001358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135a:	4a04      	ldr	r2, [pc, #16]	; (800136c <__NVIC_SetPriorityGrouping+0x40>)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	60d3      	str	r3, [r2, #12]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00
 8001370:	05fa0000 	.word	0x05fa0000

08001374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <__NVIC_GetPriorityGrouping+0x18>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f003 0307 	and.w	r3, r3, #7
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800139a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	db0b      	blt.n	80013ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	f003 021f 	and.w	r2, r3, #31
 80013a8:	4907      	ldr	r1, [pc, #28]	; (80013c8 <__NVIC_EnableIRQ+0x38>)
 80013aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	2001      	movs	r0, #1
 80013b2:	fa00 f202 	lsl.w	r2, r0, r2
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000e100 	.word	0xe000e100

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	; (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	; (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
         );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001498:	d301      	bcc.n	800149e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149a:	2301      	movs	r3, #1
 800149c:	e00f      	b.n	80014be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <SysTick_Config+0x40>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a6:	210f      	movs	r1, #15
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f7ff ff8e 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <SysTick_Config+0x40>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SysTick_Config+0x40>)
 80014b8:	2207      	movs	r2, #7
 80014ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	e000e010 	.word	0xe000e010

080014cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff29 	bl	800132c <__NVIC_SetPriorityGrouping>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014f0:	f7ff ff40 	bl	8001374 <__NVIC_GetPriorityGrouping>
 80014f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ff90 	bl	8001420 <NVIC_EncodePriority>
 8001500:	4602      	mov	r2, r0
 8001502:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff5f 	bl	80013cc <__NVIC_SetPriority>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001520:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff33 	bl	8001390 <__NVIC_EnableIRQ>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffa4 	bl	8001488 <SysTick_Config>
 8001540:	4603      	mov	r3, r0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001554:	f7ff fe9a 	bl	800128c <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e316      	b.n	8001b92 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a66      	ldr	r2, [pc, #408]	; (8001704 <HAL_DMA_Init+0x1b8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d04a      	beq.n	8001604 <HAL_DMA_Init+0xb8>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a65      	ldr	r2, [pc, #404]	; (8001708 <HAL_DMA_Init+0x1bc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d045      	beq.n	8001604 <HAL_DMA_Init+0xb8>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a63      	ldr	r2, [pc, #396]	; (800170c <HAL_DMA_Init+0x1c0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d040      	beq.n	8001604 <HAL_DMA_Init+0xb8>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a62      	ldr	r2, [pc, #392]	; (8001710 <HAL_DMA_Init+0x1c4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d03b      	beq.n	8001604 <HAL_DMA_Init+0xb8>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a60      	ldr	r2, [pc, #384]	; (8001714 <HAL_DMA_Init+0x1c8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d036      	beq.n	8001604 <HAL_DMA_Init+0xb8>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a5f      	ldr	r2, [pc, #380]	; (8001718 <HAL_DMA_Init+0x1cc>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d031      	beq.n	8001604 <HAL_DMA_Init+0xb8>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a5d      	ldr	r2, [pc, #372]	; (800171c <HAL_DMA_Init+0x1d0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d02c      	beq.n	8001604 <HAL_DMA_Init+0xb8>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a5c      	ldr	r2, [pc, #368]	; (8001720 <HAL_DMA_Init+0x1d4>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d027      	beq.n	8001604 <HAL_DMA_Init+0xb8>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a5a      	ldr	r2, [pc, #360]	; (8001724 <HAL_DMA_Init+0x1d8>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d022      	beq.n	8001604 <HAL_DMA_Init+0xb8>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a59      	ldr	r2, [pc, #356]	; (8001728 <HAL_DMA_Init+0x1dc>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d01d      	beq.n	8001604 <HAL_DMA_Init+0xb8>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a57      	ldr	r2, [pc, #348]	; (800172c <HAL_DMA_Init+0x1e0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d018      	beq.n	8001604 <HAL_DMA_Init+0xb8>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a56      	ldr	r2, [pc, #344]	; (8001730 <HAL_DMA_Init+0x1e4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d013      	beq.n	8001604 <HAL_DMA_Init+0xb8>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a54      	ldr	r2, [pc, #336]	; (8001734 <HAL_DMA_Init+0x1e8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00e      	beq.n	8001604 <HAL_DMA_Init+0xb8>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a53      	ldr	r2, [pc, #332]	; (8001738 <HAL_DMA_Init+0x1ec>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d009      	beq.n	8001604 <HAL_DMA_Init+0xb8>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a51      	ldr	r2, [pc, #324]	; (800173c <HAL_DMA_Init+0x1f0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d004      	beq.n	8001604 <HAL_DMA_Init+0xb8>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a50      	ldr	r2, [pc, #320]	; (8001740 <HAL_DMA_Init+0x1f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d101      	bne.n	8001608 <HAL_DMA_Init+0xbc>
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <HAL_DMA_Init+0xbe>
 8001608:	2300      	movs	r3, #0
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 813b 	beq.w	8001886 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2202      	movs	r2, #2
 8001614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a37      	ldr	r2, [pc, #220]	; (8001704 <HAL_DMA_Init+0x1b8>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d04a      	beq.n	80016c0 <HAL_DMA_Init+0x174>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a36      	ldr	r2, [pc, #216]	; (8001708 <HAL_DMA_Init+0x1bc>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d045      	beq.n	80016c0 <HAL_DMA_Init+0x174>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a34      	ldr	r2, [pc, #208]	; (800170c <HAL_DMA_Init+0x1c0>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d040      	beq.n	80016c0 <HAL_DMA_Init+0x174>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a33      	ldr	r2, [pc, #204]	; (8001710 <HAL_DMA_Init+0x1c4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d03b      	beq.n	80016c0 <HAL_DMA_Init+0x174>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a31      	ldr	r2, [pc, #196]	; (8001714 <HAL_DMA_Init+0x1c8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d036      	beq.n	80016c0 <HAL_DMA_Init+0x174>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a30      	ldr	r2, [pc, #192]	; (8001718 <HAL_DMA_Init+0x1cc>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d031      	beq.n	80016c0 <HAL_DMA_Init+0x174>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a2e      	ldr	r2, [pc, #184]	; (800171c <HAL_DMA_Init+0x1d0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d02c      	beq.n	80016c0 <HAL_DMA_Init+0x174>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a2d      	ldr	r2, [pc, #180]	; (8001720 <HAL_DMA_Init+0x1d4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d027      	beq.n	80016c0 <HAL_DMA_Init+0x174>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a2b      	ldr	r2, [pc, #172]	; (8001724 <HAL_DMA_Init+0x1d8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d022      	beq.n	80016c0 <HAL_DMA_Init+0x174>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a2a      	ldr	r2, [pc, #168]	; (8001728 <HAL_DMA_Init+0x1dc>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d01d      	beq.n	80016c0 <HAL_DMA_Init+0x174>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a28      	ldr	r2, [pc, #160]	; (800172c <HAL_DMA_Init+0x1e0>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d018      	beq.n	80016c0 <HAL_DMA_Init+0x174>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a27      	ldr	r2, [pc, #156]	; (8001730 <HAL_DMA_Init+0x1e4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d013      	beq.n	80016c0 <HAL_DMA_Init+0x174>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a25      	ldr	r2, [pc, #148]	; (8001734 <HAL_DMA_Init+0x1e8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d00e      	beq.n	80016c0 <HAL_DMA_Init+0x174>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a24      	ldr	r2, [pc, #144]	; (8001738 <HAL_DMA_Init+0x1ec>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d009      	beq.n	80016c0 <HAL_DMA_Init+0x174>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a22      	ldr	r2, [pc, #136]	; (800173c <HAL_DMA_Init+0x1f0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d004      	beq.n	80016c0 <HAL_DMA_Init+0x174>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a21      	ldr	r2, [pc, #132]	; (8001740 <HAL_DMA_Init+0x1f4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d108      	bne.n	80016d2 <HAL_DMA_Init+0x186>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	e007      	b.n	80016e2 <HAL_DMA_Init+0x196>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0201 	bic.w	r2, r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80016e2:	e02f      	b.n	8001744 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016e4:	f7ff fdd2 	bl	800128c <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b05      	cmp	r3, #5
 80016f0:	d928      	bls.n	8001744 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2220      	movs	r2, #32
 80016f6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2203      	movs	r2, #3
 80016fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e246      	b.n	8001b92 <HAL_DMA_Init+0x646>
 8001704:	40020010 	.word	0x40020010
 8001708:	40020028 	.word	0x40020028
 800170c:	40020040 	.word	0x40020040
 8001710:	40020058 	.word	0x40020058
 8001714:	40020070 	.word	0x40020070
 8001718:	40020088 	.word	0x40020088
 800171c:	400200a0 	.word	0x400200a0
 8001720:	400200b8 	.word	0x400200b8
 8001724:	40020410 	.word	0x40020410
 8001728:	40020428 	.word	0x40020428
 800172c:	40020440 	.word	0x40020440
 8001730:	40020458 	.word	0x40020458
 8001734:	40020470 	.word	0x40020470
 8001738:	40020488 	.word	0x40020488
 800173c:	400204a0 	.word	0x400204a0
 8001740:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1c8      	bne.n	80016e4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	4b83      	ldr	r3, [pc, #524]	; (800196c <HAL_DMA_Init+0x420>)
 800175e:	4013      	ands	r3, r2
 8001760:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800176a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001776:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001782:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4313      	orrs	r3, r2
 800178e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	2b04      	cmp	r3, #4
 8001796:	d107      	bne.n	80017a8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	4313      	orrs	r3, r2
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80017a8:	4b71      	ldr	r3, [pc, #452]	; (8001970 <HAL_DMA_Init+0x424>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b71      	ldr	r3, [pc, #452]	; (8001974 <HAL_DMA_Init+0x428>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017b4:	d328      	bcc.n	8001808 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b28      	cmp	r3, #40	; 0x28
 80017bc:	d903      	bls.n	80017c6 <HAL_DMA_Init+0x27a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b2e      	cmp	r3, #46	; 0x2e
 80017c4:	d917      	bls.n	80017f6 <HAL_DMA_Init+0x2aa>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b3e      	cmp	r3, #62	; 0x3e
 80017cc:	d903      	bls.n	80017d6 <HAL_DMA_Init+0x28a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b42      	cmp	r3, #66	; 0x42
 80017d4:	d90f      	bls.n	80017f6 <HAL_DMA_Init+0x2aa>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b46      	cmp	r3, #70	; 0x46
 80017dc:	d903      	bls.n	80017e6 <HAL_DMA_Init+0x29a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b48      	cmp	r3, #72	; 0x48
 80017e4:	d907      	bls.n	80017f6 <HAL_DMA_Init+0x2aa>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b4e      	cmp	r3, #78	; 0x4e
 80017ec:	d905      	bls.n	80017fa <HAL_DMA_Init+0x2ae>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b52      	cmp	r3, #82	; 0x52
 80017f4:	d801      	bhi.n	80017fa <HAL_DMA_Init+0x2ae>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <HAL_DMA_Init+0x2b0>
 80017fa:	2300      	movs	r3, #0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001806:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f023 0307 	bic.w	r3, r3, #7
 800181e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	4313      	orrs	r3, r2
 8001828:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	2b04      	cmp	r3, #4
 8001830:	d117      	bne.n	8001862 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4313      	orrs	r3, r2
 800183a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00e      	beq.n	8001862 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f001 ff1d 	bl	8003684 <DMA_CheckFifoParam>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d008      	beq.n	8001862 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2240      	movs	r2, #64	; 0x40
 8001854:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e197      	b.n	8001b92 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f001 fe58 	bl	8003520 <DMA_CalcBaseAndBitshift>
 8001870:	4603      	mov	r3, r0
 8001872:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001878:	f003 031f 	and.w	r3, r3, #31
 800187c:	223f      	movs	r2, #63	; 0x3f
 800187e:	409a      	lsls	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	e0cd      	b.n	8001a22 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a3b      	ldr	r2, [pc, #236]	; (8001978 <HAL_DMA_Init+0x42c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d022      	beq.n	80018d6 <HAL_DMA_Init+0x38a>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a39      	ldr	r2, [pc, #228]	; (800197c <HAL_DMA_Init+0x430>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d01d      	beq.n	80018d6 <HAL_DMA_Init+0x38a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a38      	ldr	r2, [pc, #224]	; (8001980 <HAL_DMA_Init+0x434>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d018      	beq.n	80018d6 <HAL_DMA_Init+0x38a>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a36      	ldr	r2, [pc, #216]	; (8001984 <HAL_DMA_Init+0x438>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d013      	beq.n	80018d6 <HAL_DMA_Init+0x38a>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a35      	ldr	r2, [pc, #212]	; (8001988 <HAL_DMA_Init+0x43c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d00e      	beq.n	80018d6 <HAL_DMA_Init+0x38a>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a33      	ldr	r2, [pc, #204]	; (800198c <HAL_DMA_Init+0x440>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d009      	beq.n	80018d6 <HAL_DMA_Init+0x38a>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a32      	ldr	r2, [pc, #200]	; (8001990 <HAL_DMA_Init+0x444>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d004      	beq.n	80018d6 <HAL_DMA_Init+0x38a>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a30      	ldr	r2, [pc, #192]	; (8001994 <HAL_DMA_Init+0x448>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d101      	bne.n	80018da <HAL_DMA_Init+0x38e>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <HAL_DMA_Init+0x390>
 80018da:	2300      	movs	r3, #0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 8097 	beq.w	8001a10 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a24      	ldr	r2, [pc, #144]	; (8001978 <HAL_DMA_Init+0x42c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d021      	beq.n	8001930 <HAL_DMA_Init+0x3e4>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a22      	ldr	r2, [pc, #136]	; (800197c <HAL_DMA_Init+0x430>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d01c      	beq.n	8001930 <HAL_DMA_Init+0x3e4>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a21      	ldr	r2, [pc, #132]	; (8001980 <HAL_DMA_Init+0x434>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d017      	beq.n	8001930 <HAL_DMA_Init+0x3e4>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a1f      	ldr	r2, [pc, #124]	; (8001984 <HAL_DMA_Init+0x438>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d012      	beq.n	8001930 <HAL_DMA_Init+0x3e4>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a1e      	ldr	r2, [pc, #120]	; (8001988 <HAL_DMA_Init+0x43c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d00d      	beq.n	8001930 <HAL_DMA_Init+0x3e4>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1c      	ldr	r2, [pc, #112]	; (800198c <HAL_DMA_Init+0x440>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d008      	beq.n	8001930 <HAL_DMA_Init+0x3e4>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a1b      	ldr	r2, [pc, #108]	; (8001990 <HAL_DMA_Init+0x444>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d003      	beq.n	8001930 <HAL_DMA_Init+0x3e4>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a19      	ldr	r2, [pc, #100]	; (8001994 <HAL_DMA_Init+0x448>)
 800192e:	4293      	cmp	r3, r2
 8001930:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2202      	movs	r2, #2
 8001936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_DMA_Init+0x44c>)
 800194e:	4013      	ands	r3, r2
 8001950:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b40      	cmp	r3, #64	; 0x40
 8001958:	d020      	beq.n	800199c <HAL_DMA_Init+0x450>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b80      	cmp	r3, #128	; 0x80
 8001960:	d102      	bne.n	8001968 <HAL_DMA_Init+0x41c>
 8001962:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001966:	e01a      	b.n	800199e <HAL_DMA_Init+0x452>
 8001968:	2300      	movs	r3, #0
 800196a:	e018      	b.n	800199e <HAL_DMA_Init+0x452>
 800196c:	fe10803f 	.word	0xfe10803f
 8001970:	5c001000 	.word	0x5c001000
 8001974:	ffff0000 	.word	0xffff0000
 8001978:	58025408 	.word	0x58025408
 800197c:	5802541c 	.word	0x5802541c
 8001980:	58025430 	.word	0x58025430
 8001984:	58025444 	.word	0x58025444
 8001988:	58025458 	.word	0x58025458
 800198c:	5802546c 	.word	0x5802546c
 8001990:	58025480 	.word	0x58025480
 8001994:	58025494 	.word	0x58025494
 8001998:	fffe000f 	.word	0xfffe000f
 800199c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	68d2      	ldr	r2, [r2, #12]
 80019a2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80019a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80019ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80019b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80019bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80019c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80019cc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b6e      	ldr	r3, [pc, #440]	; (8001b9c <HAL_DMA_Init+0x650>)
 80019e4:	4413      	add	r3, r2
 80019e6:	4a6e      	ldr	r2, [pc, #440]	; (8001ba0 <HAL_DMA_Init+0x654>)
 80019e8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	009a      	lsls	r2, r3, #2
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f001 fd93 	bl	8003520 <DMA_CalcBaseAndBitshift>
 80019fa:	4603      	mov	r3, r0
 80019fc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a02:	f003 031f 	and.w	r3, r3, #31
 8001a06:	2201      	movs	r2, #1
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	e008      	b.n	8001a22 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2240      	movs	r2, #64	; 0x40
 8001a14:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2203      	movs	r2, #3
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e0b7      	b.n	8001b92 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a5f      	ldr	r2, [pc, #380]	; (8001ba4 <HAL_DMA_Init+0x658>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d072      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a5d      	ldr	r2, [pc, #372]	; (8001ba8 <HAL_DMA_Init+0x65c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d06d      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a5c      	ldr	r2, [pc, #368]	; (8001bac <HAL_DMA_Init+0x660>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d068      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a5a      	ldr	r2, [pc, #360]	; (8001bb0 <HAL_DMA_Init+0x664>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d063      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a59      	ldr	r2, [pc, #356]	; (8001bb4 <HAL_DMA_Init+0x668>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d05e      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a57      	ldr	r2, [pc, #348]	; (8001bb8 <HAL_DMA_Init+0x66c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d059      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a56      	ldr	r2, [pc, #344]	; (8001bbc <HAL_DMA_Init+0x670>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d054      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a54      	ldr	r2, [pc, #336]	; (8001bc0 <HAL_DMA_Init+0x674>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d04f      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a53      	ldr	r2, [pc, #332]	; (8001bc4 <HAL_DMA_Init+0x678>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d04a      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a51      	ldr	r2, [pc, #324]	; (8001bc8 <HAL_DMA_Init+0x67c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d045      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a50      	ldr	r2, [pc, #320]	; (8001bcc <HAL_DMA_Init+0x680>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d040      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a4e      	ldr	r2, [pc, #312]	; (8001bd0 <HAL_DMA_Init+0x684>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d03b      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a4d      	ldr	r2, [pc, #308]	; (8001bd4 <HAL_DMA_Init+0x688>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d036      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a4b      	ldr	r2, [pc, #300]	; (8001bd8 <HAL_DMA_Init+0x68c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d031      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a4a      	ldr	r2, [pc, #296]	; (8001bdc <HAL_DMA_Init+0x690>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d02c      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a48      	ldr	r2, [pc, #288]	; (8001be0 <HAL_DMA_Init+0x694>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d027      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a47      	ldr	r2, [pc, #284]	; (8001be4 <HAL_DMA_Init+0x698>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d022      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a45      	ldr	r2, [pc, #276]	; (8001be8 <HAL_DMA_Init+0x69c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d01d      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a44      	ldr	r2, [pc, #272]	; (8001bec <HAL_DMA_Init+0x6a0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d018      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a42      	ldr	r2, [pc, #264]	; (8001bf0 <HAL_DMA_Init+0x6a4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a41      	ldr	r2, [pc, #260]	; (8001bf4 <HAL_DMA_Init+0x6a8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d00e      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a3f      	ldr	r2, [pc, #252]	; (8001bf8 <HAL_DMA_Init+0x6ac>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d009      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a3e      	ldr	r2, [pc, #248]	; (8001bfc <HAL_DMA_Init+0x6b0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d004      	beq.n	8001b12 <HAL_DMA_Init+0x5c6>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a3c      	ldr	r2, [pc, #240]	; (8001c00 <HAL_DMA_Init+0x6b4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d101      	bne.n	8001b16 <HAL_DMA_Init+0x5ca>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_DMA_Init+0x5cc>
 8001b16:	2300      	movs	r3, #0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d032      	beq.n	8001b82 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f001 fe2d 	bl	800377c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b80      	cmp	r3, #128	; 0x80
 8001b28:	d102      	bne.n	8001b30 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b44:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d010      	beq.n	8001b70 <HAL_DMA_Init+0x624>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d80c      	bhi.n	8001b70 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f001 feaa 	bl	80038b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	e008      	b.n	8001b82 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	a7fdabf8 	.word	0xa7fdabf8
 8001ba0:	cccccccd 	.word	0xcccccccd
 8001ba4:	40020010 	.word	0x40020010
 8001ba8:	40020028 	.word	0x40020028
 8001bac:	40020040 	.word	0x40020040
 8001bb0:	40020058 	.word	0x40020058
 8001bb4:	40020070 	.word	0x40020070
 8001bb8:	40020088 	.word	0x40020088
 8001bbc:	400200a0 	.word	0x400200a0
 8001bc0:	400200b8 	.word	0x400200b8
 8001bc4:	40020410 	.word	0x40020410
 8001bc8:	40020428 	.word	0x40020428
 8001bcc:	40020440 	.word	0x40020440
 8001bd0:	40020458 	.word	0x40020458
 8001bd4:	40020470 	.word	0x40020470
 8001bd8:	40020488 	.word	0x40020488
 8001bdc:	400204a0 	.word	0x400204a0
 8001be0:	400204b8 	.word	0x400204b8
 8001be4:	58025408 	.word	0x58025408
 8001be8:	5802541c 	.word	0x5802541c
 8001bec:	58025430 	.word	0x58025430
 8001bf0:	58025444 	.word	0x58025444
 8001bf4:	58025458 	.word	0x58025458
 8001bf8:	5802546c 	.word	0x5802546c
 8001bfc:	58025480 	.word	0x58025480
 8001c00:	58025494 	.word	0x58025494

08001c04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001c0c:	f7ff fb3e 	bl	800128c <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e2dc      	b.n	80021d6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d008      	beq.n	8001c3a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e2cd      	b.n	80021d6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a76      	ldr	r2, [pc, #472]	; (8001e18 <HAL_DMA_Abort+0x214>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d04a      	beq.n	8001cda <HAL_DMA_Abort+0xd6>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a74      	ldr	r2, [pc, #464]	; (8001e1c <HAL_DMA_Abort+0x218>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d045      	beq.n	8001cda <HAL_DMA_Abort+0xd6>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a73      	ldr	r2, [pc, #460]	; (8001e20 <HAL_DMA_Abort+0x21c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d040      	beq.n	8001cda <HAL_DMA_Abort+0xd6>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a71      	ldr	r2, [pc, #452]	; (8001e24 <HAL_DMA_Abort+0x220>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d03b      	beq.n	8001cda <HAL_DMA_Abort+0xd6>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a70      	ldr	r2, [pc, #448]	; (8001e28 <HAL_DMA_Abort+0x224>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d036      	beq.n	8001cda <HAL_DMA_Abort+0xd6>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a6e      	ldr	r2, [pc, #440]	; (8001e2c <HAL_DMA_Abort+0x228>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d031      	beq.n	8001cda <HAL_DMA_Abort+0xd6>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a6d      	ldr	r2, [pc, #436]	; (8001e30 <HAL_DMA_Abort+0x22c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d02c      	beq.n	8001cda <HAL_DMA_Abort+0xd6>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a6b      	ldr	r2, [pc, #428]	; (8001e34 <HAL_DMA_Abort+0x230>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d027      	beq.n	8001cda <HAL_DMA_Abort+0xd6>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a6a      	ldr	r2, [pc, #424]	; (8001e38 <HAL_DMA_Abort+0x234>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d022      	beq.n	8001cda <HAL_DMA_Abort+0xd6>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a68      	ldr	r2, [pc, #416]	; (8001e3c <HAL_DMA_Abort+0x238>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d01d      	beq.n	8001cda <HAL_DMA_Abort+0xd6>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a67      	ldr	r2, [pc, #412]	; (8001e40 <HAL_DMA_Abort+0x23c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d018      	beq.n	8001cda <HAL_DMA_Abort+0xd6>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a65      	ldr	r2, [pc, #404]	; (8001e44 <HAL_DMA_Abort+0x240>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d013      	beq.n	8001cda <HAL_DMA_Abort+0xd6>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a64      	ldr	r2, [pc, #400]	; (8001e48 <HAL_DMA_Abort+0x244>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d00e      	beq.n	8001cda <HAL_DMA_Abort+0xd6>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a62      	ldr	r2, [pc, #392]	; (8001e4c <HAL_DMA_Abort+0x248>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d009      	beq.n	8001cda <HAL_DMA_Abort+0xd6>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a61      	ldr	r2, [pc, #388]	; (8001e50 <HAL_DMA_Abort+0x24c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d004      	beq.n	8001cda <HAL_DMA_Abort+0xd6>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a5f      	ldr	r2, [pc, #380]	; (8001e54 <HAL_DMA_Abort+0x250>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <HAL_DMA_Abort+0xda>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <HAL_DMA_Abort+0xdc>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d013      	beq.n	8001d0c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 021e 	bic.w	r2, r2, #30
 8001cf2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d02:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	e00a      	b.n	8001d22 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 020e 	bic.w	r2, r2, #14
 8001d1a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a3c      	ldr	r2, [pc, #240]	; (8001e18 <HAL_DMA_Abort+0x214>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d072      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a3a      	ldr	r2, [pc, #232]	; (8001e1c <HAL_DMA_Abort+0x218>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d06d      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a39      	ldr	r2, [pc, #228]	; (8001e20 <HAL_DMA_Abort+0x21c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d068      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a37      	ldr	r2, [pc, #220]	; (8001e24 <HAL_DMA_Abort+0x220>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d063      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a36      	ldr	r2, [pc, #216]	; (8001e28 <HAL_DMA_Abort+0x224>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d05e      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a34      	ldr	r2, [pc, #208]	; (8001e2c <HAL_DMA_Abort+0x228>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d059      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a33      	ldr	r2, [pc, #204]	; (8001e30 <HAL_DMA_Abort+0x22c>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d054      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a31      	ldr	r2, [pc, #196]	; (8001e34 <HAL_DMA_Abort+0x230>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d04f      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a30      	ldr	r2, [pc, #192]	; (8001e38 <HAL_DMA_Abort+0x234>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d04a      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2e      	ldr	r2, [pc, #184]	; (8001e3c <HAL_DMA_Abort+0x238>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d045      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a2d      	ldr	r2, [pc, #180]	; (8001e40 <HAL_DMA_Abort+0x23c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d040      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2b      	ldr	r2, [pc, #172]	; (8001e44 <HAL_DMA_Abort+0x240>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d03b      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2a      	ldr	r2, [pc, #168]	; (8001e48 <HAL_DMA_Abort+0x244>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d036      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a28      	ldr	r2, [pc, #160]	; (8001e4c <HAL_DMA_Abort+0x248>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d031      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a27      	ldr	r2, [pc, #156]	; (8001e50 <HAL_DMA_Abort+0x24c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d02c      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a25      	ldr	r2, [pc, #148]	; (8001e54 <HAL_DMA_Abort+0x250>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d027      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a24      	ldr	r2, [pc, #144]	; (8001e58 <HAL_DMA_Abort+0x254>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d022      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a22      	ldr	r2, [pc, #136]	; (8001e5c <HAL_DMA_Abort+0x258>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d01d      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a21      	ldr	r2, [pc, #132]	; (8001e60 <HAL_DMA_Abort+0x25c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d018      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a1f      	ldr	r2, [pc, #124]	; (8001e64 <HAL_DMA_Abort+0x260>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a1e      	ldr	r2, [pc, #120]	; (8001e68 <HAL_DMA_Abort+0x264>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d00e      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <HAL_DMA_Abort+0x268>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d009      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1b      	ldr	r2, [pc, #108]	; (8001e70 <HAL_DMA_Abort+0x26c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d004      	beq.n	8001e12 <HAL_DMA_Abort+0x20e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a19      	ldr	r2, [pc, #100]	; (8001e74 <HAL_DMA_Abort+0x270>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d132      	bne.n	8001e78 <HAL_DMA_Abort+0x274>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e031      	b.n	8001e7a <HAL_DMA_Abort+0x276>
 8001e16:	bf00      	nop
 8001e18:	40020010 	.word	0x40020010
 8001e1c:	40020028 	.word	0x40020028
 8001e20:	40020040 	.word	0x40020040
 8001e24:	40020058 	.word	0x40020058
 8001e28:	40020070 	.word	0x40020070
 8001e2c:	40020088 	.word	0x40020088
 8001e30:	400200a0 	.word	0x400200a0
 8001e34:	400200b8 	.word	0x400200b8
 8001e38:	40020410 	.word	0x40020410
 8001e3c:	40020428 	.word	0x40020428
 8001e40:	40020440 	.word	0x40020440
 8001e44:	40020458 	.word	0x40020458
 8001e48:	40020470 	.word	0x40020470
 8001e4c:	40020488 	.word	0x40020488
 8001e50:	400204a0 	.word	0x400204a0
 8001e54:	400204b8 	.word	0x400204b8
 8001e58:	58025408 	.word	0x58025408
 8001e5c:	5802541c 	.word	0x5802541c
 8001e60:	58025430 	.word	0x58025430
 8001e64:	58025444 	.word	0x58025444
 8001e68:	58025458 	.word	0x58025458
 8001e6c:	5802546c 	.word	0x5802546c
 8001e70:	58025480 	.word	0x58025480
 8001e74:	58025494 	.word	0x58025494
 8001e78:	2300      	movs	r3, #0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a6d      	ldr	r2, [pc, #436]	; (8002048 <HAL_DMA_Abort+0x444>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d04a      	beq.n	8001f2e <HAL_DMA_Abort+0x32a>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a6b      	ldr	r2, [pc, #428]	; (800204c <HAL_DMA_Abort+0x448>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d045      	beq.n	8001f2e <HAL_DMA_Abort+0x32a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a6a      	ldr	r2, [pc, #424]	; (8002050 <HAL_DMA_Abort+0x44c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d040      	beq.n	8001f2e <HAL_DMA_Abort+0x32a>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a68      	ldr	r2, [pc, #416]	; (8002054 <HAL_DMA_Abort+0x450>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d03b      	beq.n	8001f2e <HAL_DMA_Abort+0x32a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a67      	ldr	r2, [pc, #412]	; (8002058 <HAL_DMA_Abort+0x454>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d036      	beq.n	8001f2e <HAL_DMA_Abort+0x32a>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a65      	ldr	r2, [pc, #404]	; (800205c <HAL_DMA_Abort+0x458>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d031      	beq.n	8001f2e <HAL_DMA_Abort+0x32a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a64      	ldr	r2, [pc, #400]	; (8002060 <HAL_DMA_Abort+0x45c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d02c      	beq.n	8001f2e <HAL_DMA_Abort+0x32a>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a62      	ldr	r2, [pc, #392]	; (8002064 <HAL_DMA_Abort+0x460>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d027      	beq.n	8001f2e <HAL_DMA_Abort+0x32a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a61      	ldr	r2, [pc, #388]	; (8002068 <HAL_DMA_Abort+0x464>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d022      	beq.n	8001f2e <HAL_DMA_Abort+0x32a>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a5f      	ldr	r2, [pc, #380]	; (800206c <HAL_DMA_Abort+0x468>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d01d      	beq.n	8001f2e <HAL_DMA_Abort+0x32a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a5e      	ldr	r2, [pc, #376]	; (8002070 <HAL_DMA_Abort+0x46c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d018      	beq.n	8001f2e <HAL_DMA_Abort+0x32a>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a5c      	ldr	r2, [pc, #368]	; (8002074 <HAL_DMA_Abort+0x470>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_DMA_Abort+0x32a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a5b      	ldr	r2, [pc, #364]	; (8002078 <HAL_DMA_Abort+0x474>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00e      	beq.n	8001f2e <HAL_DMA_Abort+0x32a>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a59      	ldr	r2, [pc, #356]	; (800207c <HAL_DMA_Abort+0x478>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d009      	beq.n	8001f2e <HAL_DMA_Abort+0x32a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a58      	ldr	r2, [pc, #352]	; (8002080 <HAL_DMA_Abort+0x47c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d004      	beq.n	8001f2e <HAL_DMA_Abort+0x32a>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a56      	ldr	r2, [pc, #344]	; (8002084 <HAL_DMA_Abort+0x480>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d108      	bne.n	8001f40 <HAL_DMA_Abort+0x33c>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0201 	bic.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	e007      	b.n	8001f50 <HAL_DMA_Abort+0x34c>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0201 	bic.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f50:	e013      	b.n	8001f7a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f52:	f7ff f99b 	bl	800128c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b05      	cmp	r3, #5
 8001f5e:	d90c      	bls.n	8001f7a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2220      	movs	r2, #32
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2203      	movs	r2, #3
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e12d      	b.n	80021d6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1e5      	bne.n	8001f52 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a2f      	ldr	r2, [pc, #188]	; (8002048 <HAL_DMA_Abort+0x444>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d04a      	beq.n	8002026 <HAL_DMA_Abort+0x422>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a2d      	ldr	r2, [pc, #180]	; (800204c <HAL_DMA_Abort+0x448>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d045      	beq.n	8002026 <HAL_DMA_Abort+0x422>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a2c      	ldr	r2, [pc, #176]	; (8002050 <HAL_DMA_Abort+0x44c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d040      	beq.n	8002026 <HAL_DMA_Abort+0x422>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a2a      	ldr	r2, [pc, #168]	; (8002054 <HAL_DMA_Abort+0x450>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d03b      	beq.n	8002026 <HAL_DMA_Abort+0x422>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a29      	ldr	r2, [pc, #164]	; (8002058 <HAL_DMA_Abort+0x454>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d036      	beq.n	8002026 <HAL_DMA_Abort+0x422>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a27      	ldr	r2, [pc, #156]	; (800205c <HAL_DMA_Abort+0x458>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d031      	beq.n	8002026 <HAL_DMA_Abort+0x422>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a26      	ldr	r2, [pc, #152]	; (8002060 <HAL_DMA_Abort+0x45c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d02c      	beq.n	8002026 <HAL_DMA_Abort+0x422>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a24      	ldr	r2, [pc, #144]	; (8002064 <HAL_DMA_Abort+0x460>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d027      	beq.n	8002026 <HAL_DMA_Abort+0x422>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a23      	ldr	r2, [pc, #140]	; (8002068 <HAL_DMA_Abort+0x464>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d022      	beq.n	8002026 <HAL_DMA_Abort+0x422>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a21      	ldr	r2, [pc, #132]	; (800206c <HAL_DMA_Abort+0x468>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01d      	beq.n	8002026 <HAL_DMA_Abort+0x422>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a20      	ldr	r2, [pc, #128]	; (8002070 <HAL_DMA_Abort+0x46c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d018      	beq.n	8002026 <HAL_DMA_Abort+0x422>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1e      	ldr	r2, [pc, #120]	; (8002074 <HAL_DMA_Abort+0x470>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_DMA_Abort+0x422>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a1d      	ldr	r2, [pc, #116]	; (8002078 <HAL_DMA_Abort+0x474>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00e      	beq.n	8002026 <HAL_DMA_Abort+0x422>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a1b      	ldr	r2, [pc, #108]	; (800207c <HAL_DMA_Abort+0x478>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d009      	beq.n	8002026 <HAL_DMA_Abort+0x422>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1a      	ldr	r2, [pc, #104]	; (8002080 <HAL_DMA_Abort+0x47c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d004      	beq.n	8002026 <HAL_DMA_Abort+0x422>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a18      	ldr	r2, [pc, #96]	; (8002084 <HAL_DMA_Abort+0x480>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d101      	bne.n	800202a <HAL_DMA_Abort+0x426>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_DMA_Abort+0x428>
 800202a:	2300      	movs	r3, #0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d02b      	beq.n	8002088 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	f003 031f 	and.w	r3, r3, #31
 800203e:	223f      	movs	r2, #63	; 0x3f
 8002040:	409a      	lsls	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	e02a      	b.n	800209e <HAL_DMA_Abort+0x49a>
 8002048:	40020010 	.word	0x40020010
 800204c:	40020028 	.word	0x40020028
 8002050:	40020040 	.word	0x40020040
 8002054:	40020058 	.word	0x40020058
 8002058:	40020070 	.word	0x40020070
 800205c:	40020088 	.word	0x40020088
 8002060:	400200a0 	.word	0x400200a0
 8002064:	400200b8 	.word	0x400200b8
 8002068:	40020410 	.word	0x40020410
 800206c:	40020428 	.word	0x40020428
 8002070:	40020440 	.word	0x40020440
 8002074:	40020458 	.word	0x40020458
 8002078:	40020470 	.word	0x40020470
 800207c:	40020488 	.word	0x40020488
 8002080:	400204a0 	.word	0x400204a0
 8002084:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	2201      	movs	r2, #1
 8002098:	409a      	lsls	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a4f      	ldr	r2, [pc, #316]	; (80021e0 <HAL_DMA_Abort+0x5dc>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d072      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a4d      	ldr	r2, [pc, #308]	; (80021e4 <HAL_DMA_Abort+0x5e0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d06d      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a4c      	ldr	r2, [pc, #304]	; (80021e8 <HAL_DMA_Abort+0x5e4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d068      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a4a      	ldr	r2, [pc, #296]	; (80021ec <HAL_DMA_Abort+0x5e8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d063      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a49      	ldr	r2, [pc, #292]	; (80021f0 <HAL_DMA_Abort+0x5ec>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d05e      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a47      	ldr	r2, [pc, #284]	; (80021f4 <HAL_DMA_Abort+0x5f0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d059      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a46      	ldr	r2, [pc, #280]	; (80021f8 <HAL_DMA_Abort+0x5f4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d054      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a44      	ldr	r2, [pc, #272]	; (80021fc <HAL_DMA_Abort+0x5f8>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d04f      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a43      	ldr	r2, [pc, #268]	; (8002200 <HAL_DMA_Abort+0x5fc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d04a      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a41      	ldr	r2, [pc, #260]	; (8002204 <HAL_DMA_Abort+0x600>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d045      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a40      	ldr	r2, [pc, #256]	; (8002208 <HAL_DMA_Abort+0x604>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d040      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a3e      	ldr	r2, [pc, #248]	; (800220c <HAL_DMA_Abort+0x608>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d03b      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a3d      	ldr	r2, [pc, #244]	; (8002210 <HAL_DMA_Abort+0x60c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d036      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a3b      	ldr	r2, [pc, #236]	; (8002214 <HAL_DMA_Abort+0x610>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d031      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a3a      	ldr	r2, [pc, #232]	; (8002218 <HAL_DMA_Abort+0x614>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d02c      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a38      	ldr	r2, [pc, #224]	; (800221c <HAL_DMA_Abort+0x618>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d027      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a37      	ldr	r2, [pc, #220]	; (8002220 <HAL_DMA_Abort+0x61c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d022      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a35      	ldr	r2, [pc, #212]	; (8002224 <HAL_DMA_Abort+0x620>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01d      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a34      	ldr	r2, [pc, #208]	; (8002228 <HAL_DMA_Abort+0x624>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d018      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a32      	ldr	r2, [pc, #200]	; (800222c <HAL_DMA_Abort+0x628>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a31      	ldr	r2, [pc, #196]	; (8002230 <HAL_DMA_Abort+0x62c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00e      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a2f      	ldr	r2, [pc, #188]	; (8002234 <HAL_DMA_Abort+0x630>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d009      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a2e      	ldr	r2, [pc, #184]	; (8002238 <HAL_DMA_Abort+0x634>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d004      	beq.n	800218e <HAL_DMA_Abort+0x58a>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a2c      	ldr	r2, [pc, #176]	; (800223c <HAL_DMA_Abort+0x638>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d101      	bne.n	8002192 <HAL_DMA_Abort+0x58e>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <HAL_DMA_Abort+0x590>
 8002192:	2300      	movs	r3, #0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d015      	beq.n	80021c4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80021a0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00c      	beq.n	80021c4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021b8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021c2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40020010 	.word	0x40020010
 80021e4:	40020028 	.word	0x40020028
 80021e8:	40020040 	.word	0x40020040
 80021ec:	40020058 	.word	0x40020058
 80021f0:	40020070 	.word	0x40020070
 80021f4:	40020088 	.word	0x40020088
 80021f8:	400200a0 	.word	0x400200a0
 80021fc:	400200b8 	.word	0x400200b8
 8002200:	40020410 	.word	0x40020410
 8002204:	40020428 	.word	0x40020428
 8002208:	40020440 	.word	0x40020440
 800220c:	40020458 	.word	0x40020458
 8002210:	40020470 	.word	0x40020470
 8002214:	40020488 	.word	0x40020488
 8002218:	400204a0 	.word	0x400204a0
 800221c:	400204b8 	.word	0x400204b8
 8002220:	58025408 	.word	0x58025408
 8002224:	5802541c 	.word	0x5802541c
 8002228:	58025430 	.word	0x58025430
 800222c:	58025444 	.word	0x58025444
 8002230:	58025458 	.word	0x58025458
 8002234:	5802546c 	.word	0x5802546c
 8002238:	58025480 	.word	0x58025480
 800223c:	58025494 	.word	0x58025494

08002240 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e237      	b.n	80026c2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d004      	beq.n	8002268 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2280      	movs	r2, #128	; 0x80
 8002262:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e22c      	b.n	80026c2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a5c      	ldr	r2, [pc, #368]	; (80023e0 <HAL_DMA_Abort_IT+0x1a0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d04a      	beq.n	8002308 <HAL_DMA_Abort_IT+0xc8>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a5b      	ldr	r2, [pc, #364]	; (80023e4 <HAL_DMA_Abort_IT+0x1a4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d045      	beq.n	8002308 <HAL_DMA_Abort_IT+0xc8>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a59      	ldr	r2, [pc, #356]	; (80023e8 <HAL_DMA_Abort_IT+0x1a8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d040      	beq.n	8002308 <HAL_DMA_Abort_IT+0xc8>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a58      	ldr	r2, [pc, #352]	; (80023ec <HAL_DMA_Abort_IT+0x1ac>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d03b      	beq.n	8002308 <HAL_DMA_Abort_IT+0xc8>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a56      	ldr	r2, [pc, #344]	; (80023f0 <HAL_DMA_Abort_IT+0x1b0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d036      	beq.n	8002308 <HAL_DMA_Abort_IT+0xc8>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a55      	ldr	r2, [pc, #340]	; (80023f4 <HAL_DMA_Abort_IT+0x1b4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d031      	beq.n	8002308 <HAL_DMA_Abort_IT+0xc8>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a53      	ldr	r2, [pc, #332]	; (80023f8 <HAL_DMA_Abort_IT+0x1b8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d02c      	beq.n	8002308 <HAL_DMA_Abort_IT+0xc8>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a52      	ldr	r2, [pc, #328]	; (80023fc <HAL_DMA_Abort_IT+0x1bc>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d027      	beq.n	8002308 <HAL_DMA_Abort_IT+0xc8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a50      	ldr	r2, [pc, #320]	; (8002400 <HAL_DMA_Abort_IT+0x1c0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d022      	beq.n	8002308 <HAL_DMA_Abort_IT+0xc8>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a4f      	ldr	r2, [pc, #316]	; (8002404 <HAL_DMA_Abort_IT+0x1c4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d01d      	beq.n	8002308 <HAL_DMA_Abort_IT+0xc8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a4d      	ldr	r2, [pc, #308]	; (8002408 <HAL_DMA_Abort_IT+0x1c8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d018      	beq.n	8002308 <HAL_DMA_Abort_IT+0xc8>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a4c      	ldr	r2, [pc, #304]	; (800240c <HAL_DMA_Abort_IT+0x1cc>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d013      	beq.n	8002308 <HAL_DMA_Abort_IT+0xc8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a4a      	ldr	r2, [pc, #296]	; (8002410 <HAL_DMA_Abort_IT+0x1d0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00e      	beq.n	8002308 <HAL_DMA_Abort_IT+0xc8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a49      	ldr	r2, [pc, #292]	; (8002414 <HAL_DMA_Abort_IT+0x1d4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d009      	beq.n	8002308 <HAL_DMA_Abort_IT+0xc8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a47      	ldr	r2, [pc, #284]	; (8002418 <HAL_DMA_Abort_IT+0x1d8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d004      	beq.n	8002308 <HAL_DMA_Abort_IT+0xc8>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a46      	ldr	r2, [pc, #280]	; (800241c <HAL_DMA_Abort_IT+0x1dc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d101      	bne.n	800230c <HAL_DMA_Abort_IT+0xcc>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <HAL_DMA_Abort_IT+0xce>
 800230c:	2300      	movs	r3, #0
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8086 	beq.w	8002420 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2204      	movs	r2, #4
 8002318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a2f      	ldr	r2, [pc, #188]	; (80023e0 <HAL_DMA_Abort_IT+0x1a0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d04a      	beq.n	80023bc <HAL_DMA_Abort_IT+0x17c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a2e      	ldr	r2, [pc, #184]	; (80023e4 <HAL_DMA_Abort_IT+0x1a4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d045      	beq.n	80023bc <HAL_DMA_Abort_IT+0x17c>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a2c      	ldr	r2, [pc, #176]	; (80023e8 <HAL_DMA_Abort_IT+0x1a8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d040      	beq.n	80023bc <HAL_DMA_Abort_IT+0x17c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a2b      	ldr	r2, [pc, #172]	; (80023ec <HAL_DMA_Abort_IT+0x1ac>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d03b      	beq.n	80023bc <HAL_DMA_Abort_IT+0x17c>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a29      	ldr	r2, [pc, #164]	; (80023f0 <HAL_DMA_Abort_IT+0x1b0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d036      	beq.n	80023bc <HAL_DMA_Abort_IT+0x17c>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a28      	ldr	r2, [pc, #160]	; (80023f4 <HAL_DMA_Abort_IT+0x1b4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d031      	beq.n	80023bc <HAL_DMA_Abort_IT+0x17c>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a26      	ldr	r2, [pc, #152]	; (80023f8 <HAL_DMA_Abort_IT+0x1b8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d02c      	beq.n	80023bc <HAL_DMA_Abort_IT+0x17c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a25      	ldr	r2, [pc, #148]	; (80023fc <HAL_DMA_Abort_IT+0x1bc>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d027      	beq.n	80023bc <HAL_DMA_Abort_IT+0x17c>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a23      	ldr	r2, [pc, #140]	; (8002400 <HAL_DMA_Abort_IT+0x1c0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d022      	beq.n	80023bc <HAL_DMA_Abort_IT+0x17c>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a22      	ldr	r2, [pc, #136]	; (8002404 <HAL_DMA_Abort_IT+0x1c4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d01d      	beq.n	80023bc <HAL_DMA_Abort_IT+0x17c>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a20      	ldr	r2, [pc, #128]	; (8002408 <HAL_DMA_Abort_IT+0x1c8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d018      	beq.n	80023bc <HAL_DMA_Abort_IT+0x17c>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a1f      	ldr	r2, [pc, #124]	; (800240c <HAL_DMA_Abort_IT+0x1cc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d013      	beq.n	80023bc <HAL_DMA_Abort_IT+0x17c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a1d      	ldr	r2, [pc, #116]	; (8002410 <HAL_DMA_Abort_IT+0x1d0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00e      	beq.n	80023bc <HAL_DMA_Abort_IT+0x17c>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a1c      	ldr	r2, [pc, #112]	; (8002414 <HAL_DMA_Abort_IT+0x1d4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d009      	beq.n	80023bc <HAL_DMA_Abort_IT+0x17c>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a1a      	ldr	r2, [pc, #104]	; (8002418 <HAL_DMA_Abort_IT+0x1d8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d004      	beq.n	80023bc <HAL_DMA_Abort_IT+0x17c>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a19      	ldr	r2, [pc, #100]	; (800241c <HAL_DMA_Abort_IT+0x1dc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d108      	bne.n	80023ce <HAL_DMA_Abort_IT+0x18e>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0201 	bic.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	e178      	b.n	80026c0 <HAL_DMA_Abort_IT+0x480>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0201 	bic.w	r2, r2, #1
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	e16f      	b.n	80026c0 <HAL_DMA_Abort_IT+0x480>
 80023e0:	40020010 	.word	0x40020010
 80023e4:	40020028 	.word	0x40020028
 80023e8:	40020040 	.word	0x40020040
 80023ec:	40020058 	.word	0x40020058
 80023f0:	40020070 	.word	0x40020070
 80023f4:	40020088 	.word	0x40020088
 80023f8:	400200a0 	.word	0x400200a0
 80023fc:	400200b8 	.word	0x400200b8
 8002400:	40020410 	.word	0x40020410
 8002404:	40020428 	.word	0x40020428
 8002408:	40020440 	.word	0x40020440
 800240c:	40020458 	.word	0x40020458
 8002410:	40020470 	.word	0x40020470
 8002414:	40020488 	.word	0x40020488
 8002418:	400204a0 	.word	0x400204a0
 800241c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 020e 	bic.w	r2, r2, #14
 800242e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a6c      	ldr	r2, [pc, #432]	; (80025e8 <HAL_DMA_Abort_IT+0x3a8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d04a      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x290>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6b      	ldr	r2, [pc, #428]	; (80025ec <HAL_DMA_Abort_IT+0x3ac>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d045      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x290>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a69      	ldr	r2, [pc, #420]	; (80025f0 <HAL_DMA_Abort_IT+0x3b0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d040      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x290>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a68      	ldr	r2, [pc, #416]	; (80025f4 <HAL_DMA_Abort_IT+0x3b4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d03b      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x290>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a66      	ldr	r2, [pc, #408]	; (80025f8 <HAL_DMA_Abort_IT+0x3b8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d036      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x290>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a65      	ldr	r2, [pc, #404]	; (80025fc <HAL_DMA_Abort_IT+0x3bc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d031      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x290>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a63      	ldr	r2, [pc, #396]	; (8002600 <HAL_DMA_Abort_IT+0x3c0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d02c      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x290>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a62      	ldr	r2, [pc, #392]	; (8002604 <HAL_DMA_Abort_IT+0x3c4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d027      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x290>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a60      	ldr	r2, [pc, #384]	; (8002608 <HAL_DMA_Abort_IT+0x3c8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d022      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x290>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a5f      	ldr	r2, [pc, #380]	; (800260c <HAL_DMA_Abort_IT+0x3cc>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d01d      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x290>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a5d      	ldr	r2, [pc, #372]	; (8002610 <HAL_DMA_Abort_IT+0x3d0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d018      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x290>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a5c      	ldr	r2, [pc, #368]	; (8002614 <HAL_DMA_Abort_IT+0x3d4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d013      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x290>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a5a      	ldr	r2, [pc, #360]	; (8002618 <HAL_DMA_Abort_IT+0x3d8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00e      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x290>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a59      	ldr	r2, [pc, #356]	; (800261c <HAL_DMA_Abort_IT+0x3dc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d009      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x290>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a57      	ldr	r2, [pc, #348]	; (8002620 <HAL_DMA_Abort_IT+0x3e0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d004      	beq.n	80024d0 <HAL_DMA_Abort_IT+0x290>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a56      	ldr	r2, [pc, #344]	; (8002624 <HAL_DMA_Abort_IT+0x3e4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d108      	bne.n	80024e2 <HAL_DMA_Abort_IT+0x2a2>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0201 	bic.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	e007      	b.n	80024f2 <HAL_DMA_Abort_IT+0x2b2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0201 	bic.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a3c      	ldr	r2, [pc, #240]	; (80025e8 <HAL_DMA_Abort_IT+0x3a8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d072      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a3a      	ldr	r2, [pc, #232]	; (80025ec <HAL_DMA_Abort_IT+0x3ac>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d06d      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a39      	ldr	r2, [pc, #228]	; (80025f0 <HAL_DMA_Abort_IT+0x3b0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d068      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a37      	ldr	r2, [pc, #220]	; (80025f4 <HAL_DMA_Abort_IT+0x3b4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d063      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a36      	ldr	r2, [pc, #216]	; (80025f8 <HAL_DMA_Abort_IT+0x3b8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d05e      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a34      	ldr	r2, [pc, #208]	; (80025fc <HAL_DMA_Abort_IT+0x3bc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d059      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a33      	ldr	r2, [pc, #204]	; (8002600 <HAL_DMA_Abort_IT+0x3c0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d054      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a31      	ldr	r2, [pc, #196]	; (8002604 <HAL_DMA_Abort_IT+0x3c4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d04f      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a30      	ldr	r2, [pc, #192]	; (8002608 <HAL_DMA_Abort_IT+0x3c8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d04a      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a2e      	ldr	r2, [pc, #184]	; (800260c <HAL_DMA_Abort_IT+0x3cc>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d045      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a2d      	ldr	r2, [pc, #180]	; (8002610 <HAL_DMA_Abort_IT+0x3d0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d040      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a2b      	ldr	r2, [pc, #172]	; (8002614 <HAL_DMA_Abort_IT+0x3d4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d03b      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a2a      	ldr	r2, [pc, #168]	; (8002618 <HAL_DMA_Abort_IT+0x3d8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d036      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a28      	ldr	r2, [pc, #160]	; (800261c <HAL_DMA_Abort_IT+0x3dc>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d031      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a27      	ldr	r2, [pc, #156]	; (8002620 <HAL_DMA_Abort_IT+0x3e0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d02c      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a25      	ldr	r2, [pc, #148]	; (8002624 <HAL_DMA_Abort_IT+0x3e4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d027      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a24      	ldr	r2, [pc, #144]	; (8002628 <HAL_DMA_Abort_IT+0x3e8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d022      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a22      	ldr	r2, [pc, #136]	; (800262c <HAL_DMA_Abort_IT+0x3ec>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d01d      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a21      	ldr	r2, [pc, #132]	; (8002630 <HAL_DMA_Abort_IT+0x3f0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d018      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a1f      	ldr	r2, [pc, #124]	; (8002634 <HAL_DMA_Abort_IT+0x3f4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d013      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <HAL_DMA_Abort_IT+0x3f8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00e      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a1c      	ldr	r2, [pc, #112]	; (800263c <HAL_DMA_Abort_IT+0x3fc>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d009      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1b      	ldr	r2, [pc, #108]	; (8002640 <HAL_DMA_Abort_IT+0x400>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d004      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x3a2>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a19      	ldr	r2, [pc, #100]	; (8002644 <HAL_DMA_Abort_IT+0x404>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d132      	bne.n	8002648 <HAL_DMA_Abort_IT+0x408>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e031      	b.n	800264a <HAL_DMA_Abort_IT+0x40a>
 80025e6:	bf00      	nop
 80025e8:	40020010 	.word	0x40020010
 80025ec:	40020028 	.word	0x40020028
 80025f0:	40020040 	.word	0x40020040
 80025f4:	40020058 	.word	0x40020058
 80025f8:	40020070 	.word	0x40020070
 80025fc:	40020088 	.word	0x40020088
 8002600:	400200a0 	.word	0x400200a0
 8002604:	400200b8 	.word	0x400200b8
 8002608:	40020410 	.word	0x40020410
 800260c:	40020428 	.word	0x40020428
 8002610:	40020440 	.word	0x40020440
 8002614:	40020458 	.word	0x40020458
 8002618:	40020470 	.word	0x40020470
 800261c:	40020488 	.word	0x40020488
 8002620:	400204a0 	.word	0x400204a0
 8002624:	400204b8 	.word	0x400204b8
 8002628:	58025408 	.word	0x58025408
 800262c:	5802541c 	.word	0x5802541c
 8002630:	58025430 	.word	0x58025430
 8002634:	58025444 	.word	0x58025444
 8002638:	58025458 	.word	0x58025458
 800263c:	5802546c 	.word	0x5802546c
 8002640:	58025480 	.word	0x58025480
 8002644:	58025494 	.word	0x58025494
 8002648:	2300      	movs	r3, #0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d028      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002658:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800265c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	2201      	movs	r2, #1
 800266e:	409a      	lsls	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800267c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00c      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002694:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800269e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop

080026cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026d8:	4b67      	ldr	r3, [pc, #412]	; (8002878 <HAL_DMA_IRQHandler+0x1ac>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a67      	ldr	r2, [pc, #412]	; (800287c <HAL_DMA_IRQHandler+0x1b0>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	0a9b      	lsrs	r3, r3, #10
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a5f      	ldr	r2, [pc, #380]	; (8002880 <HAL_DMA_IRQHandler+0x1b4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d04a      	beq.n	800279e <HAL_DMA_IRQHandler+0xd2>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a5d      	ldr	r2, [pc, #372]	; (8002884 <HAL_DMA_IRQHandler+0x1b8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d045      	beq.n	800279e <HAL_DMA_IRQHandler+0xd2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a5c      	ldr	r2, [pc, #368]	; (8002888 <HAL_DMA_IRQHandler+0x1bc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d040      	beq.n	800279e <HAL_DMA_IRQHandler+0xd2>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a5a      	ldr	r2, [pc, #360]	; (800288c <HAL_DMA_IRQHandler+0x1c0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d03b      	beq.n	800279e <HAL_DMA_IRQHandler+0xd2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a59      	ldr	r2, [pc, #356]	; (8002890 <HAL_DMA_IRQHandler+0x1c4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d036      	beq.n	800279e <HAL_DMA_IRQHandler+0xd2>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a57      	ldr	r2, [pc, #348]	; (8002894 <HAL_DMA_IRQHandler+0x1c8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d031      	beq.n	800279e <HAL_DMA_IRQHandler+0xd2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a56      	ldr	r2, [pc, #344]	; (8002898 <HAL_DMA_IRQHandler+0x1cc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d02c      	beq.n	800279e <HAL_DMA_IRQHandler+0xd2>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a54      	ldr	r2, [pc, #336]	; (800289c <HAL_DMA_IRQHandler+0x1d0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d027      	beq.n	800279e <HAL_DMA_IRQHandler+0xd2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a53      	ldr	r2, [pc, #332]	; (80028a0 <HAL_DMA_IRQHandler+0x1d4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d022      	beq.n	800279e <HAL_DMA_IRQHandler+0xd2>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a51      	ldr	r2, [pc, #324]	; (80028a4 <HAL_DMA_IRQHandler+0x1d8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d01d      	beq.n	800279e <HAL_DMA_IRQHandler+0xd2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a50      	ldr	r2, [pc, #320]	; (80028a8 <HAL_DMA_IRQHandler+0x1dc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d018      	beq.n	800279e <HAL_DMA_IRQHandler+0xd2>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a4e      	ldr	r2, [pc, #312]	; (80028ac <HAL_DMA_IRQHandler+0x1e0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <HAL_DMA_IRQHandler+0xd2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a4d      	ldr	r2, [pc, #308]	; (80028b0 <HAL_DMA_IRQHandler+0x1e4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00e      	beq.n	800279e <HAL_DMA_IRQHandler+0xd2>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a4b      	ldr	r2, [pc, #300]	; (80028b4 <HAL_DMA_IRQHandler+0x1e8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d009      	beq.n	800279e <HAL_DMA_IRQHandler+0xd2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a4a      	ldr	r2, [pc, #296]	; (80028b8 <HAL_DMA_IRQHandler+0x1ec>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d004      	beq.n	800279e <HAL_DMA_IRQHandler+0xd2>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a48      	ldr	r2, [pc, #288]	; (80028bc <HAL_DMA_IRQHandler+0x1f0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d101      	bne.n	80027a2 <HAL_DMA_IRQHandler+0xd6>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_DMA_IRQHandler+0xd8>
 80027a2:	2300      	movs	r3, #0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 842b 	beq.w	8003000 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	2208      	movs	r2, #8
 80027b4:	409a      	lsls	r2, r3
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80a2 	beq.w	8002904 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a2e      	ldr	r2, [pc, #184]	; (8002880 <HAL_DMA_IRQHandler+0x1b4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d04a      	beq.n	8002860 <HAL_DMA_IRQHandler+0x194>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a2d      	ldr	r2, [pc, #180]	; (8002884 <HAL_DMA_IRQHandler+0x1b8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d045      	beq.n	8002860 <HAL_DMA_IRQHandler+0x194>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a2b      	ldr	r2, [pc, #172]	; (8002888 <HAL_DMA_IRQHandler+0x1bc>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d040      	beq.n	8002860 <HAL_DMA_IRQHandler+0x194>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2a      	ldr	r2, [pc, #168]	; (800288c <HAL_DMA_IRQHandler+0x1c0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d03b      	beq.n	8002860 <HAL_DMA_IRQHandler+0x194>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a28      	ldr	r2, [pc, #160]	; (8002890 <HAL_DMA_IRQHandler+0x1c4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d036      	beq.n	8002860 <HAL_DMA_IRQHandler+0x194>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a27      	ldr	r2, [pc, #156]	; (8002894 <HAL_DMA_IRQHandler+0x1c8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d031      	beq.n	8002860 <HAL_DMA_IRQHandler+0x194>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a25      	ldr	r2, [pc, #148]	; (8002898 <HAL_DMA_IRQHandler+0x1cc>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d02c      	beq.n	8002860 <HAL_DMA_IRQHandler+0x194>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a24      	ldr	r2, [pc, #144]	; (800289c <HAL_DMA_IRQHandler+0x1d0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d027      	beq.n	8002860 <HAL_DMA_IRQHandler+0x194>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a22      	ldr	r2, [pc, #136]	; (80028a0 <HAL_DMA_IRQHandler+0x1d4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d022      	beq.n	8002860 <HAL_DMA_IRQHandler+0x194>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a21      	ldr	r2, [pc, #132]	; (80028a4 <HAL_DMA_IRQHandler+0x1d8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d01d      	beq.n	8002860 <HAL_DMA_IRQHandler+0x194>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1f      	ldr	r2, [pc, #124]	; (80028a8 <HAL_DMA_IRQHandler+0x1dc>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d018      	beq.n	8002860 <HAL_DMA_IRQHandler+0x194>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1e      	ldr	r2, [pc, #120]	; (80028ac <HAL_DMA_IRQHandler+0x1e0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d013      	beq.n	8002860 <HAL_DMA_IRQHandler+0x194>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1c      	ldr	r2, [pc, #112]	; (80028b0 <HAL_DMA_IRQHandler+0x1e4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00e      	beq.n	8002860 <HAL_DMA_IRQHandler+0x194>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1b      	ldr	r2, [pc, #108]	; (80028b4 <HAL_DMA_IRQHandler+0x1e8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d009      	beq.n	8002860 <HAL_DMA_IRQHandler+0x194>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a19      	ldr	r2, [pc, #100]	; (80028b8 <HAL_DMA_IRQHandler+0x1ec>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d004      	beq.n	8002860 <HAL_DMA_IRQHandler+0x194>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a18      	ldr	r2, [pc, #96]	; (80028bc <HAL_DMA_IRQHandler+0x1f0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d12f      	bne.n	80028c0 <HAL_DMA_IRQHandler+0x1f4>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	bf14      	ite	ne
 800286e:	2301      	movne	r3, #1
 8002870:	2300      	moveq	r3, #0
 8002872:	b2db      	uxtb	r3, r3
 8002874:	e02e      	b.n	80028d4 <HAL_DMA_IRQHandler+0x208>
 8002876:	bf00      	nop
 8002878:	24000000 	.word	0x24000000
 800287c:	1b4e81b5 	.word	0x1b4e81b5
 8002880:	40020010 	.word	0x40020010
 8002884:	40020028 	.word	0x40020028
 8002888:	40020040 	.word	0x40020040
 800288c:	40020058 	.word	0x40020058
 8002890:	40020070 	.word	0x40020070
 8002894:	40020088 	.word	0x40020088
 8002898:	400200a0 	.word	0x400200a0
 800289c:	400200b8 	.word	0x400200b8
 80028a0:	40020410 	.word	0x40020410
 80028a4:	40020428 	.word	0x40020428
 80028a8:	40020440 	.word	0x40020440
 80028ac:	40020458 	.word	0x40020458
 80028b0:	40020470 	.word	0x40020470
 80028b4:	40020488 	.word	0x40020488
 80028b8:	400204a0 	.word	0x400204a0
 80028bc:	400204b8 	.word	0x400204b8
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	bf14      	ite	ne
 80028ce:	2301      	movne	r3, #1
 80028d0:	2300      	moveq	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d015      	beq.n	8002904 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0204 	bic.w	r2, r2, #4
 80028e6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	2208      	movs	r2, #8
 80028f2:	409a      	lsls	r2, r3
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	fa22 f303 	lsr.w	r3, r2, r3
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d06e      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a69      	ldr	r2, [pc, #420]	; (8002ac4 <HAL_DMA_IRQHandler+0x3f8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d04a      	beq.n	80029ba <HAL_DMA_IRQHandler+0x2ee>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a67      	ldr	r2, [pc, #412]	; (8002ac8 <HAL_DMA_IRQHandler+0x3fc>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d045      	beq.n	80029ba <HAL_DMA_IRQHandler+0x2ee>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a66      	ldr	r2, [pc, #408]	; (8002acc <HAL_DMA_IRQHandler+0x400>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d040      	beq.n	80029ba <HAL_DMA_IRQHandler+0x2ee>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a64      	ldr	r2, [pc, #400]	; (8002ad0 <HAL_DMA_IRQHandler+0x404>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d03b      	beq.n	80029ba <HAL_DMA_IRQHandler+0x2ee>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a63      	ldr	r2, [pc, #396]	; (8002ad4 <HAL_DMA_IRQHandler+0x408>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d036      	beq.n	80029ba <HAL_DMA_IRQHandler+0x2ee>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a61      	ldr	r2, [pc, #388]	; (8002ad8 <HAL_DMA_IRQHandler+0x40c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d031      	beq.n	80029ba <HAL_DMA_IRQHandler+0x2ee>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a60      	ldr	r2, [pc, #384]	; (8002adc <HAL_DMA_IRQHandler+0x410>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d02c      	beq.n	80029ba <HAL_DMA_IRQHandler+0x2ee>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a5e      	ldr	r2, [pc, #376]	; (8002ae0 <HAL_DMA_IRQHandler+0x414>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d027      	beq.n	80029ba <HAL_DMA_IRQHandler+0x2ee>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a5d      	ldr	r2, [pc, #372]	; (8002ae4 <HAL_DMA_IRQHandler+0x418>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d022      	beq.n	80029ba <HAL_DMA_IRQHandler+0x2ee>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a5b      	ldr	r2, [pc, #364]	; (8002ae8 <HAL_DMA_IRQHandler+0x41c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01d      	beq.n	80029ba <HAL_DMA_IRQHandler+0x2ee>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a5a      	ldr	r2, [pc, #360]	; (8002aec <HAL_DMA_IRQHandler+0x420>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d018      	beq.n	80029ba <HAL_DMA_IRQHandler+0x2ee>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a58      	ldr	r2, [pc, #352]	; (8002af0 <HAL_DMA_IRQHandler+0x424>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d013      	beq.n	80029ba <HAL_DMA_IRQHandler+0x2ee>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a57      	ldr	r2, [pc, #348]	; (8002af4 <HAL_DMA_IRQHandler+0x428>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d00e      	beq.n	80029ba <HAL_DMA_IRQHandler+0x2ee>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a55      	ldr	r2, [pc, #340]	; (8002af8 <HAL_DMA_IRQHandler+0x42c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d009      	beq.n	80029ba <HAL_DMA_IRQHandler+0x2ee>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a54      	ldr	r2, [pc, #336]	; (8002afc <HAL_DMA_IRQHandler+0x430>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d004      	beq.n	80029ba <HAL_DMA_IRQHandler+0x2ee>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a52      	ldr	r2, [pc, #328]	; (8002b00 <HAL_DMA_IRQHandler+0x434>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d10a      	bne.n	80029d0 <HAL_DMA_IRQHandler+0x304>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	e003      	b.n	80029d8 <HAL_DMA_IRQHandler+0x30c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2300      	movs	r3, #0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00d      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	2201      	movs	r2, #1
 80029e6:	409a      	lsls	r2, r3
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f0:	f043 0202 	orr.w	r2, r3, #2
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	2204      	movs	r2, #4
 8002a02:	409a      	lsls	r2, r3
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 808f 	beq.w	8002b2c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a2c      	ldr	r2, [pc, #176]	; (8002ac4 <HAL_DMA_IRQHandler+0x3f8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d04a      	beq.n	8002aae <HAL_DMA_IRQHandler+0x3e2>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a2a      	ldr	r2, [pc, #168]	; (8002ac8 <HAL_DMA_IRQHandler+0x3fc>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d045      	beq.n	8002aae <HAL_DMA_IRQHandler+0x3e2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a29      	ldr	r2, [pc, #164]	; (8002acc <HAL_DMA_IRQHandler+0x400>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d040      	beq.n	8002aae <HAL_DMA_IRQHandler+0x3e2>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a27      	ldr	r2, [pc, #156]	; (8002ad0 <HAL_DMA_IRQHandler+0x404>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d03b      	beq.n	8002aae <HAL_DMA_IRQHandler+0x3e2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a26      	ldr	r2, [pc, #152]	; (8002ad4 <HAL_DMA_IRQHandler+0x408>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d036      	beq.n	8002aae <HAL_DMA_IRQHandler+0x3e2>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a24      	ldr	r2, [pc, #144]	; (8002ad8 <HAL_DMA_IRQHandler+0x40c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d031      	beq.n	8002aae <HAL_DMA_IRQHandler+0x3e2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a23      	ldr	r2, [pc, #140]	; (8002adc <HAL_DMA_IRQHandler+0x410>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d02c      	beq.n	8002aae <HAL_DMA_IRQHandler+0x3e2>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a21      	ldr	r2, [pc, #132]	; (8002ae0 <HAL_DMA_IRQHandler+0x414>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d027      	beq.n	8002aae <HAL_DMA_IRQHandler+0x3e2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a20      	ldr	r2, [pc, #128]	; (8002ae4 <HAL_DMA_IRQHandler+0x418>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d022      	beq.n	8002aae <HAL_DMA_IRQHandler+0x3e2>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ae8 <HAL_DMA_IRQHandler+0x41c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d01d      	beq.n	8002aae <HAL_DMA_IRQHandler+0x3e2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a1d      	ldr	r2, [pc, #116]	; (8002aec <HAL_DMA_IRQHandler+0x420>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d018      	beq.n	8002aae <HAL_DMA_IRQHandler+0x3e2>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <HAL_DMA_IRQHandler+0x424>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d013      	beq.n	8002aae <HAL_DMA_IRQHandler+0x3e2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a1a      	ldr	r2, [pc, #104]	; (8002af4 <HAL_DMA_IRQHandler+0x428>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d00e      	beq.n	8002aae <HAL_DMA_IRQHandler+0x3e2>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a18      	ldr	r2, [pc, #96]	; (8002af8 <HAL_DMA_IRQHandler+0x42c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d009      	beq.n	8002aae <HAL_DMA_IRQHandler+0x3e2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a17      	ldr	r2, [pc, #92]	; (8002afc <HAL_DMA_IRQHandler+0x430>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d004      	beq.n	8002aae <HAL_DMA_IRQHandler+0x3e2>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a15      	ldr	r2, [pc, #84]	; (8002b00 <HAL_DMA_IRQHandler+0x434>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d12a      	bne.n	8002b04 <HAL_DMA_IRQHandler+0x438>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf14      	ite	ne
 8002abc:	2301      	movne	r3, #1
 8002abe:	2300      	moveq	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	e023      	b.n	8002b0c <HAL_DMA_IRQHandler+0x440>
 8002ac4:	40020010 	.word	0x40020010
 8002ac8:	40020028 	.word	0x40020028
 8002acc:	40020040 	.word	0x40020040
 8002ad0:	40020058 	.word	0x40020058
 8002ad4:	40020070 	.word	0x40020070
 8002ad8:	40020088 	.word	0x40020088
 8002adc:	400200a0 	.word	0x400200a0
 8002ae0:	400200b8 	.word	0x400200b8
 8002ae4:	40020410 	.word	0x40020410
 8002ae8:	40020428 	.word	0x40020428
 8002aec:	40020440 	.word	0x40020440
 8002af0:	40020458 	.word	0x40020458
 8002af4:	40020470 	.word	0x40020470
 8002af8:	40020488 	.word	0x40020488
 8002afc:	400204a0 	.word	0x400204a0
 8002b00:	400204b8 	.word	0x400204b8
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00d      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	2204      	movs	r2, #4
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b24:	f043 0204 	orr.w	r2, r3, #4
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	2210      	movs	r2, #16
 8002b36:	409a      	lsls	r2, r3
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80a6 	beq.w	8002c8e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a85      	ldr	r2, [pc, #532]	; (8002d5c <HAL_DMA_IRQHandler+0x690>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d04a      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x516>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a83      	ldr	r2, [pc, #524]	; (8002d60 <HAL_DMA_IRQHandler+0x694>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d045      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x516>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a82      	ldr	r2, [pc, #520]	; (8002d64 <HAL_DMA_IRQHandler+0x698>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d040      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x516>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a80      	ldr	r2, [pc, #512]	; (8002d68 <HAL_DMA_IRQHandler+0x69c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d03b      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x516>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a7f      	ldr	r2, [pc, #508]	; (8002d6c <HAL_DMA_IRQHandler+0x6a0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d036      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x516>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a7d      	ldr	r2, [pc, #500]	; (8002d70 <HAL_DMA_IRQHandler+0x6a4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d031      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x516>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a7c      	ldr	r2, [pc, #496]	; (8002d74 <HAL_DMA_IRQHandler+0x6a8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d02c      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x516>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a7a      	ldr	r2, [pc, #488]	; (8002d78 <HAL_DMA_IRQHandler+0x6ac>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d027      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x516>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a79      	ldr	r2, [pc, #484]	; (8002d7c <HAL_DMA_IRQHandler+0x6b0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d022      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x516>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a77      	ldr	r2, [pc, #476]	; (8002d80 <HAL_DMA_IRQHandler+0x6b4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d01d      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x516>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a76      	ldr	r2, [pc, #472]	; (8002d84 <HAL_DMA_IRQHandler+0x6b8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d018      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x516>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a74      	ldr	r2, [pc, #464]	; (8002d88 <HAL_DMA_IRQHandler+0x6bc>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d013      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x516>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a73      	ldr	r2, [pc, #460]	; (8002d8c <HAL_DMA_IRQHandler+0x6c0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d00e      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x516>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a71      	ldr	r2, [pc, #452]	; (8002d90 <HAL_DMA_IRQHandler+0x6c4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d009      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x516>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a70      	ldr	r2, [pc, #448]	; (8002d94 <HAL_DMA_IRQHandler+0x6c8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d004      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x516>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a6e      	ldr	r2, [pc, #440]	; (8002d98 <HAL_DMA_IRQHandler+0x6cc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d10a      	bne.n	8002bf8 <HAL_DMA_IRQHandler+0x52c>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf14      	ite	ne
 8002bf0:	2301      	movne	r3, #1
 8002bf2:	2300      	moveq	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	e009      	b.n	8002c0c <HAL_DMA_IRQHandler+0x540>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	bf14      	ite	ne
 8002c06:	2301      	movne	r3, #1
 8002c08:	2300      	moveq	r3, #0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d03e      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	2210      	movs	r2, #16
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d018      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d108      	bne.n	8002c4e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d024      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	4798      	blx	r3
 8002c4c:	e01f      	b.n	8002c8e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d01b      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	4798      	blx	r3
 8002c5e:	e016      	b.n	8002c8e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d107      	bne.n	8002c7e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0208 	bic.w	r2, r2, #8
 8002c7c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	2220      	movs	r2, #32
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 8110 	beq.w	8002ec4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a2c      	ldr	r2, [pc, #176]	; (8002d5c <HAL_DMA_IRQHandler+0x690>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d04a      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x678>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a2b      	ldr	r2, [pc, #172]	; (8002d60 <HAL_DMA_IRQHandler+0x694>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d045      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x678>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a29      	ldr	r2, [pc, #164]	; (8002d64 <HAL_DMA_IRQHandler+0x698>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d040      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x678>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a28      	ldr	r2, [pc, #160]	; (8002d68 <HAL_DMA_IRQHandler+0x69c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d03b      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x678>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a26      	ldr	r2, [pc, #152]	; (8002d6c <HAL_DMA_IRQHandler+0x6a0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d036      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x678>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a25      	ldr	r2, [pc, #148]	; (8002d70 <HAL_DMA_IRQHandler+0x6a4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d031      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x678>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a23      	ldr	r2, [pc, #140]	; (8002d74 <HAL_DMA_IRQHandler+0x6a8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d02c      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x678>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a22      	ldr	r2, [pc, #136]	; (8002d78 <HAL_DMA_IRQHandler+0x6ac>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d027      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x678>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a20      	ldr	r2, [pc, #128]	; (8002d7c <HAL_DMA_IRQHandler+0x6b0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d022      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x678>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1f      	ldr	r2, [pc, #124]	; (8002d80 <HAL_DMA_IRQHandler+0x6b4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d01d      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x678>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a1d      	ldr	r2, [pc, #116]	; (8002d84 <HAL_DMA_IRQHandler+0x6b8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d018      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x678>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a1c      	ldr	r2, [pc, #112]	; (8002d88 <HAL_DMA_IRQHandler+0x6bc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d013      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x678>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a1a      	ldr	r2, [pc, #104]	; (8002d8c <HAL_DMA_IRQHandler+0x6c0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00e      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x678>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a19      	ldr	r2, [pc, #100]	; (8002d90 <HAL_DMA_IRQHandler+0x6c4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d009      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x678>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a17      	ldr	r2, [pc, #92]	; (8002d94 <HAL_DMA_IRQHandler+0x6c8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d004      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x678>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a16      	ldr	r2, [pc, #88]	; (8002d98 <HAL_DMA_IRQHandler+0x6cc>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d12b      	bne.n	8002d9c <HAL_DMA_IRQHandler+0x6d0>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	bf14      	ite	ne
 8002d52:	2301      	movne	r3, #1
 8002d54:	2300      	moveq	r3, #0
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	e02a      	b.n	8002db0 <HAL_DMA_IRQHandler+0x6e4>
 8002d5a:	bf00      	nop
 8002d5c:	40020010 	.word	0x40020010
 8002d60:	40020028 	.word	0x40020028
 8002d64:	40020040 	.word	0x40020040
 8002d68:	40020058 	.word	0x40020058
 8002d6c:	40020070 	.word	0x40020070
 8002d70:	40020088 	.word	0x40020088
 8002d74:	400200a0 	.word	0x400200a0
 8002d78:	400200b8 	.word	0x400200b8
 8002d7c:	40020410 	.word	0x40020410
 8002d80:	40020428 	.word	0x40020428
 8002d84:	40020440 	.word	0x40020440
 8002d88:	40020458 	.word	0x40020458
 8002d8c:	40020470 	.word	0x40020470
 8002d90:	40020488 	.word	0x40020488
 8002d94:	400204a0 	.word	0x400204a0
 8002d98:	400204b8 	.word	0x400204b8
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	bf14      	ite	ne
 8002daa:	2301      	movne	r3, #1
 8002dac:	2300      	moveq	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 8087 	beq.w	8002ec4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d139      	bne.n	8002e46 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0216 	bic.w	r2, r2, #22
 8002de0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002df0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d103      	bne.n	8002e02 <HAL_DMA_IRQHandler+0x736>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0208 	bic.w	r2, r2, #8
 8002e10:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	223f      	movs	r2, #63	; 0x3f
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 834a 	beq.w	80034d0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	4798      	blx	r3
          }
          return;
 8002e44:	e344      	b.n	80034d0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d018      	beq.n	8002e86 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d108      	bne.n	8002e74 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d02c      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	4798      	blx	r3
 8002e72:	e027      	b.n	8002ec4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d023      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	4798      	blx	r3
 8002e84:	e01e      	b.n	8002ec4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10f      	bne.n	8002eb4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0210 	bic.w	r2, r2, #16
 8002ea2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 8306 	beq.w	80034da <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 8088 	beq.w	8002fec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2204      	movs	r2, #4
 8002ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a7a      	ldr	r2, [pc, #488]	; (80030d4 <HAL_DMA_IRQHandler+0xa08>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d04a      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x8b8>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a79      	ldr	r2, [pc, #484]	; (80030d8 <HAL_DMA_IRQHandler+0xa0c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d045      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x8b8>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a77      	ldr	r2, [pc, #476]	; (80030dc <HAL_DMA_IRQHandler+0xa10>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d040      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x8b8>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a76      	ldr	r2, [pc, #472]	; (80030e0 <HAL_DMA_IRQHandler+0xa14>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d03b      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x8b8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a74      	ldr	r2, [pc, #464]	; (80030e4 <HAL_DMA_IRQHandler+0xa18>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d036      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x8b8>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a73      	ldr	r2, [pc, #460]	; (80030e8 <HAL_DMA_IRQHandler+0xa1c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d031      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x8b8>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a71      	ldr	r2, [pc, #452]	; (80030ec <HAL_DMA_IRQHandler+0xa20>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d02c      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x8b8>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a70      	ldr	r2, [pc, #448]	; (80030f0 <HAL_DMA_IRQHandler+0xa24>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d027      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x8b8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a6e      	ldr	r2, [pc, #440]	; (80030f4 <HAL_DMA_IRQHandler+0xa28>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d022      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x8b8>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a6d      	ldr	r2, [pc, #436]	; (80030f8 <HAL_DMA_IRQHandler+0xa2c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d01d      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x8b8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a6b      	ldr	r2, [pc, #428]	; (80030fc <HAL_DMA_IRQHandler+0xa30>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d018      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x8b8>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a6a      	ldr	r2, [pc, #424]	; (8003100 <HAL_DMA_IRQHandler+0xa34>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d013      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x8b8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a68      	ldr	r2, [pc, #416]	; (8003104 <HAL_DMA_IRQHandler+0xa38>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00e      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x8b8>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a67      	ldr	r2, [pc, #412]	; (8003108 <HAL_DMA_IRQHandler+0xa3c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d009      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x8b8>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a65      	ldr	r2, [pc, #404]	; (800310c <HAL_DMA_IRQHandler+0xa40>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d004      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x8b8>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a64      	ldr	r2, [pc, #400]	; (8003110 <HAL_DMA_IRQHandler+0xa44>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d108      	bne.n	8002f96 <HAL_DMA_IRQHandler+0x8ca>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0201 	bic.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	e007      	b.n	8002fa6 <HAL_DMA_IRQHandler+0x8da>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0201 	bic.w	r2, r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d307      	bcc.n	8002fc2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1f2      	bne.n	8002fa6 <HAL_DMA_IRQHandler+0x8da>
 8002fc0:	e000      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002fc2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d004      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002fda:	e003      	b.n	8002fe4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 8272 	beq.w	80034da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	4798      	blx	r3
 8002ffe:	e26c      	b.n	80034da <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a43      	ldr	r2, [pc, #268]	; (8003114 <HAL_DMA_IRQHandler+0xa48>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d022      	beq.n	8003050 <HAL_DMA_IRQHandler+0x984>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a42      	ldr	r2, [pc, #264]	; (8003118 <HAL_DMA_IRQHandler+0xa4c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d01d      	beq.n	8003050 <HAL_DMA_IRQHandler+0x984>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a40      	ldr	r2, [pc, #256]	; (800311c <HAL_DMA_IRQHandler+0xa50>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d018      	beq.n	8003050 <HAL_DMA_IRQHandler+0x984>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a3f      	ldr	r2, [pc, #252]	; (8003120 <HAL_DMA_IRQHandler+0xa54>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d013      	beq.n	8003050 <HAL_DMA_IRQHandler+0x984>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a3d      	ldr	r2, [pc, #244]	; (8003124 <HAL_DMA_IRQHandler+0xa58>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00e      	beq.n	8003050 <HAL_DMA_IRQHandler+0x984>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a3c      	ldr	r2, [pc, #240]	; (8003128 <HAL_DMA_IRQHandler+0xa5c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d009      	beq.n	8003050 <HAL_DMA_IRQHandler+0x984>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a3a      	ldr	r2, [pc, #232]	; (800312c <HAL_DMA_IRQHandler+0xa60>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d004      	beq.n	8003050 <HAL_DMA_IRQHandler+0x984>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a39      	ldr	r2, [pc, #228]	; (8003130 <HAL_DMA_IRQHandler+0xa64>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d101      	bne.n	8003054 <HAL_DMA_IRQHandler+0x988>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <HAL_DMA_IRQHandler+0x98a>
 8003054:	2300      	movs	r3, #0
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 823f 	beq.w	80034da <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	2204      	movs	r2, #4
 800306e:	409a      	lsls	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80cd 	beq.w	8003214 <HAL_DMA_IRQHandler+0xb48>
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80c7 	beq.w	8003214 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308a:	f003 031f 	and.w	r3, r3, #31
 800308e:	2204      	movs	r2, #4
 8003090:	409a      	lsls	r2, r3
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d049      	beq.n	8003134 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d109      	bne.n	80030be <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 8210 	beq.w	80034d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030bc:	e20a      	b.n	80034d4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8206 	beq.w	80034d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030d0:	e200      	b.n	80034d4 <HAL_DMA_IRQHandler+0xe08>
 80030d2:	bf00      	nop
 80030d4:	40020010 	.word	0x40020010
 80030d8:	40020028 	.word	0x40020028
 80030dc:	40020040 	.word	0x40020040
 80030e0:	40020058 	.word	0x40020058
 80030e4:	40020070 	.word	0x40020070
 80030e8:	40020088 	.word	0x40020088
 80030ec:	400200a0 	.word	0x400200a0
 80030f0:	400200b8 	.word	0x400200b8
 80030f4:	40020410 	.word	0x40020410
 80030f8:	40020428 	.word	0x40020428
 80030fc:	40020440 	.word	0x40020440
 8003100:	40020458 	.word	0x40020458
 8003104:	40020470 	.word	0x40020470
 8003108:	40020488 	.word	0x40020488
 800310c:	400204a0 	.word	0x400204a0
 8003110:	400204b8 	.word	0x400204b8
 8003114:	58025408 	.word	0x58025408
 8003118:	5802541c 	.word	0x5802541c
 800311c:	58025430 	.word	0x58025430
 8003120:	58025444 	.word	0x58025444
 8003124:	58025458 	.word	0x58025458
 8003128:	5802546c 	.word	0x5802546c
 800312c:	58025480 	.word	0x58025480
 8003130:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b00      	cmp	r3, #0
 800313c:	d160      	bne.n	8003200 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a7f      	ldr	r2, [pc, #508]	; (8003340 <HAL_DMA_IRQHandler+0xc74>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d04a      	beq.n	80031de <HAL_DMA_IRQHandler+0xb12>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a7d      	ldr	r2, [pc, #500]	; (8003344 <HAL_DMA_IRQHandler+0xc78>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d045      	beq.n	80031de <HAL_DMA_IRQHandler+0xb12>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a7c      	ldr	r2, [pc, #496]	; (8003348 <HAL_DMA_IRQHandler+0xc7c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d040      	beq.n	80031de <HAL_DMA_IRQHandler+0xb12>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a7a      	ldr	r2, [pc, #488]	; (800334c <HAL_DMA_IRQHandler+0xc80>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d03b      	beq.n	80031de <HAL_DMA_IRQHandler+0xb12>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a79      	ldr	r2, [pc, #484]	; (8003350 <HAL_DMA_IRQHandler+0xc84>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d036      	beq.n	80031de <HAL_DMA_IRQHandler+0xb12>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a77      	ldr	r2, [pc, #476]	; (8003354 <HAL_DMA_IRQHandler+0xc88>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d031      	beq.n	80031de <HAL_DMA_IRQHandler+0xb12>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a76      	ldr	r2, [pc, #472]	; (8003358 <HAL_DMA_IRQHandler+0xc8c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d02c      	beq.n	80031de <HAL_DMA_IRQHandler+0xb12>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a74      	ldr	r2, [pc, #464]	; (800335c <HAL_DMA_IRQHandler+0xc90>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d027      	beq.n	80031de <HAL_DMA_IRQHandler+0xb12>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a73      	ldr	r2, [pc, #460]	; (8003360 <HAL_DMA_IRQHandler+0xc94>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d022      	beq.n	80031de <HAL_DMA_IRQHandler+0xb12>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a71      	ldr	r2, [pc, #452]	; (8003364 <HAL_DMA_IRQHandler+0xc98>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01d      	beq.n	80031de <HAL_DMA_IRQHandler+0xb12>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a70      	ldr	r2, [pc, #448]	; (8003368 <HAL_DMA_IRQHandler+0xc9c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d018      	beq.n	80031de <HAL_DMA_IRQHandler+0xb12>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a6e      	ldr	r2, [pc, #440]	; (800336c <HAL_DMA_IRQHandler+0xca0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d013      	beq.n	80031de <HAL_DMA_IRQHandler+0xb12>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a6d      	ldr	r2, [pc, #436]	; (8003370 <HAL_DMA_IRQHandler+0xca4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00e      	beq.n	80031de <HAL_DMA_IRQHandler+0xb12>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a6b      	ldr	r2, [pc, #428]	; (8003374 <HAL_DMA_IRQHandler+0xca8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d009      	beq.n	80031de <HAL_DMA_IRQHandler+0xb12>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a6a      	ldr	r2, [pc, #424]	; (8003378 <HAL_DMA_IRQHandler+0xcac>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d004      	beq.n	80031de <HAL_DMA_IRQHandler+0xb12>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a68      	ldr	r2, [pc, #416]	; (800337c <HAL_DMA_IRQHandler+0xcb0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d108      	bne.n	80031f0 <HAL_DMA_IRQHandler+0xb24>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0208 	bic.w	r2, r2, #8
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	e007      	b.n	8003200 <HAL_DMA_IRQHandler+0xb34>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0204 	bic.w	r2, r2, #4
 80031fe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8165 	beq.w	80034d4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003212:	e15f      	b.n	80034d4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	2202      	movs	r2, #2
 800321e:	409a      	lsls	r2, r3
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	4013      	ands	r3, r2
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80c5 	beq.w	80033b4 <HAL_DMA_IRQHandler+0xce8>
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80bf 	beq.w	80033b4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	2202      	movs	r2, #2
 8003240:	409a      	lsls	r2, r3
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d018      	beq.n	8003282 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 813a 	beq.w	80034d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800326c:	e134      	b.n	80034d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 8130 	beq.w	80034d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003280:	e12a      	b.n	80034d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	f040 8089 	bne.w	80033a0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a2b      	ldr	r2, [pc, #172]	; (8003340 <HAL_DMA_IRQHandler+0xc74>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d04a      	beq.n	800332e <HAL_DMA_IRQHandler+0xc62>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a29      	ldr	r2, [pc, #164]	; (8003344 <HAL_DMA_IRQHandler+0xc78>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d045      	beq.n	800332e <HAL_DMA_IRQHandler+0xc62>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a28      	ldr	r2, [pc, #160]	; (8003348 <HAL_DMA_IRQHandler+0xc7c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d040      	beq.n	800332e <HAL_DMA_IRQHandler+0xc62>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a26      	ldr	r2, [pc, #152]	; (800334c <HAL_DMA_IRQHandler+0xc80>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d03b      	beq.n	800332e <HAL_DMA_IRQHandler+0xc62>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a25      	ldr	r2, [pc, #148]	; (8003350 <HAL_DMA_IRQHandler+0xc84>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d036      	beq.n	800332e <HAL_DMA_IRQHandler+0xc62>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a23      	ldr	r2, [pc, #140]	; (8003354 <HAL_DMA_IRQHandler+0xc88>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d031      	beq.n	800332e <HAL_DMA_IRQHandler+0xc62>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a22      	ldr	r2, [pc, #136]	; (8003358 <HAL_DMA_IRQHandler+0xc8c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d02c      	beq.n	800332e <HAL_DMA_IRQHandler+0xc62>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a20      	ldr	r2, [pc, #128]	; (800335c <HAL_DMA_IRQHandler+0xc90>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d027      	beq.n	800332e <HAL_DMA_IRQHandler+0xc62>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a1f      	ldr	r2, [pc, #124]	; (8003360 <HAL_DMA_IRQHandler+0xc94>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d022      	beq.n	800332e <HAL_DMA_IRQHandler+0xc62>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1d      	ldr	r2, [pc, #116]	; (8003364 <HAL_DMA_IRQHandler+0xc98>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d01d      	beq.n	800332e <HAL_DMA_IRQHandler+0xc62>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1c      	ldr	r2, [pc, #112]	; (8003368 <HAL_DMA_IRQHandler+0xc9c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d018      	beq.n	800332e <HAL_DMA_IRQHandler+0xc62>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a1a      	ldr	r2, [pc, #104]	; (800336c <HAL_DMA_IRQHandler+0xca0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d013      	beq.n	800332e <HAL_DMA_IRQHandler+0xc62>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a19      	ldr	r2, [pc, #100]	; (8003370 <HAL_DMA_IRQHandler+0xca4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00e      	beq.n	800332e <HAL_DMA_IRQHandler+0xc62>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a17      	ldr	r2, [pc, #92]	; (8003374 <HAL_DMA_IRQHandler+0xca8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d009      	beq.n	800332e <HAL_DMA_IRQHandler+0xc62>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a16      	ldr	r2, [pc, #88]	; (8003378 <HAL_DMA_IRQHandler+0xcac>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d004      	beq.n	800332e <HAL_DMA_IRQHandler+0xc62>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a14      	ldr	r2, [pc, #80]	; (800337c <HAL_DMA_IRQHandler+0xcb0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d128      	bne.n	8003380 <HAL_DMA_IRQHandler+0xcb4>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0214 	bic.w	r2, r2, #20
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	e027      	b.n	8003390 <HAL_DMA_IRQHandler+0xcc4>
 8003340:	40020010 	.word	0x40020010
 8003344:	40020028 	.word	0x40020028
 8003348:	40020040 	.word	0x40020040
 800334c:	40020058 	.word	0x40020058
 8003350:	40020070 	.word	0x40020070
 8003354:	40020088 	.word	0x40020088
 8003358:	400200a0 	.word	0x400200a0
 800335c:	400200b8 	.word	0x400200b8
 8003360:	40020410 	.word	0x40020410
 8003364:	40020428 	.word	0x40020428
 8003368:	40020440 	.word	0x40020440
 800336c:	40020458 	.word	0x40020458
 8003370:	40020470 	.word	0x40020470
 8003374:	40020488 	.word	0x40020488
 8003378:	400204a0 	.word	0x400204a0
 800337c:	400204b8 	.word	0x400204b8
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 020a 	bic.w	r2, r2, #10
 800338e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 8097 	beq.w	80034d8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033b2:	e091      	b.n	80034d8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	2208      	movs	r2, #8
 80033be:	409a      	lsls	r2, r3
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8088 	beq.w	80034da <HAL_DMA_IRQHandler+0xe0e>
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 8082 	beq.w	80034da <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a41      	ldr	r2, [pc, #260]	; (80034e0 <HAL_DMA_IRQHandler+0xe14>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d04a      	beq.n	8003476 <HAL_DMA_IRQHandler+0xdaa>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a3f      	ldr	r2, [pc, #252]	; (80034e4 <HAL_DMA_IRQHandler+0xe18>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d045      	beq.n	8003476 <HAL_DMA_IRQHandler+0xdaa>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a3e      	ldr	r2, [pc, #248]	; (80034e8 <HAL_DMA_IRQHandler+0xe1c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d040      	beq.n	8003476 <HAL_DMA_IRQHandler+0xdaa>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a3c      	ldr	r2, [pc, #240]	; (80034ec <HAL_DMA_IRQHandler+0xe20>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d03b      	beq.n	8003476 <HAL_DMA_IRQHandler+0xdaa>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a3b      	ldr	r2, [pc, #236]	; (80034f0 <HAL_DMA_IRQHandler+0xe24>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d036      	beq.n	8003476 <HAL_DMA_IRQHandler+0xdaa>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a39      	ldr	r2, [pc, #228]	; (80034f4 <HAL_DMA_IRQHandler+0xe28>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d031      	beq.n	8003476 <HAL_DMA_IRQHandler+0xdaa>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a38      	ldr	r2, [pc, #224]	; (80034f8 <HAL_DMA_IRQHandler+0xe2c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d02c      	beq.n	8003476 <HAL_DMA_IRQHandler+0xdaa>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a36      	ldr	r2, [pc, #216]	; (80034fc <HAL_DMA_IRQHandler+0xe30>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d027      	beq.n	8003476 <HAL_DMA_IRQHandler+0xdaa>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a35      	ldr	r2, [pc, #212]	; (8003500 <HAL_DMA_IRQHandler+0xe34>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d022      	beq.n	8003476 <HAL_DMA_IRQHandler+0xdaa>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a33      	ldr	r2, [pc, #204]	; (8003504 <HAL_DMA_IRQHandler+0xe38>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d01d      	beq.n	8003476 <HAL_DMA_IRQHandler+0xdaa>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a32      	ldr	r2, [pc, #200]	; (8003508 <HAL_DMA_IRQHandler+0xe3c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d018      	beq.n	8003476 <HAL_DMA_IRQHandler+0xdaa>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a30      	ldr	r2, [pc, #192]	; (800350c <HAL_DMA_IRQHandler+0xe40>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d013      	beq.n	8003476 <HAL_DMA_IRQHandler+0xdaa>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a2f      	ldr	r2, [pc, #188]	; (8003510 <HAL_DMA_IRQHandler+0xe44>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d00e      	beq.n	8003476 <HAL_DMA_IRQHandler+0xdaa>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a2d      	ldr	r2, [pc, #180]	; (8003514 <HAL_DMA_IRQHandler+0xe48>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d009      	beq.n	8003476 <HAL_DMA_IRQHandler+0xdaa>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2c      	ldr	r2, [pc, #176]	; (8003518 <HAL_DMA_IRQHandler+0xe4c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d004      	beq.n	8003476 <HAL_DMA_IRQHandler+0xdaa>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a2a      	ldr	r2, [pc, #168]	; (800351c <HAL_DMA_IRQHandler+0xe50>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d108      	bne.n	8003488 <HAL_DMA_IRQHandler+0xdbc>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 021c 	bic.w	r2, r2, #28
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	e007      	b.n	8003498 <HAL_DMA_IRQHandler+0xdcc>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 020e 	bic.w	r2, r2, #14
 8003496:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	2201      	movs	r2, #1
 80034a2:	409a      	lsls	r2, r3
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	4798      	blx	r3
 80034ce:	e004      	b.n	80034da <HAL_DMA_IRQHandler+0xe0e>
          return;
 80034d0:	bf00      	nop
 80034d2:	e002      	b.n	80034da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034d4:	bf00      	nop
 80034d6:	e000      	b.n	80034da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034d8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80034da:	3728      	adds	r7, #40	; 0x28
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40020010 	.word	0x40020010
 80034e4:	40020028 	.word	0x40020028
 80034e8:	40020040 	.word	0x40020040
 80034ec:	40020058 	.word	0x40020058
 80034f0:	40020070 	.word	0x40020070
 80034f4:	40020088 	.word	0x40020088
 80034f8:	400200a0 	.word	0x400200a0
 80034fc:	400200b8 	.word	0x400200b8
 8003500:	40020410 	.word	0x40020410
 8003504:	40020428 	.word	0x40020428
 8003508:	40020440 	.word	0x40020440
 800350c:	40020458 	.word	0x40020458
 8003510:	40020470 	.word	0x40020470
 8003514:	40020488 	.word	0x40020488
 8003518:	400204a0 	.word	0x400204a0
 800351c:	400204b8 	.word	0x400204b8

08003520 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a42      	ldr	r2, [pc, #264]	; (8003638 <DMA_CalcBaseAndBitshift+0x118>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d04a      	beq.n	80035c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a41      	ldr	r2, [pc, #260]	; (800363c <DMA_CalcBaseAndBitshift+0x11c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d045      	beq.n	80035c8 <DMA_CalcBaseAndBitshift+0xa8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a3f      	ldr	r2, [pc, #252]	; (8003640 <DMA_CalcBaseAndBitshift+0x120>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d040      	beq.n	80035c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a3e      	ldr	r2, [pc, #248]	; (8003644 <DMA_CalcBaseAndBitshift+0x124>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d03b      	beq.n	80035c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a3c      	ldr	r2, [pc, #240]	; (8003648 <DMA_CalcBaseAndBitshift+0x128>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d036      	beq.n	80035c8 <DMA_CalcBaseAndBitshift+0xa8>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a3b      	ldr	r2, [pc, #236]	; (800364c <DMA_CalcBaseAndBitshift+0x12c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d031      	beq.n	80035c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a39      	ldr	r2, [pc, #228]	; (8003650 <DMA_CalcBaseAndBitshift+0x130>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d02c      	beq.n	80035c8 <DMA_CalcBaseAndBitshift+0xa8>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a38      	ldr	r2, [pc, #224]	; (8003654 <DMA_CalcBaseAndBitshift+0x134>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d027      	beq.n	80035c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a36      	ldr	r2, [pc, #216]	; (8003658 <DMA_CalcBaseAndBitshift+0x138>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d022      	beq.n	80035c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a35      	ldr	r2, [pc, #212]	; (800365c <DMA_CalcBaseAndBitshift+0x13c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d01d      	beq.n	80035c8 <DMA_CalcBaseAndBitshift+0xa8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a33      	ldr	r2, [pc, #204]	; (8003660 <DMA_CalcBaseAndBitshift+0x140>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d018      	beq.n	80035c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a32      	ldr	r2, [pc, #200]	; (8003664 <DMA_CalcBaseAndBitshift+0x144>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d013      	beq.n	80035c8 <DMA_CalcBaseAndBitshift+0xa8>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a30      	ldr	r2, [pc, #192]	; (8003668 <DMA_CalcBaseAndBitshift+0x148>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00e      	beq.n	80035c8 <DMA_CalcBaseAndBitshift+0xa8>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a2f      	ldr	r2, [pc, #188]	; (800366c <DMA_CalcBaseAndBitshift+0x14c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d009      	beq.n	80035c8 <DMA_CalcBaseAndBitshift+0xa8>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a2d      	ldr	r2, [pc, #180]	; (8003670 <DMA_CalcBaseAndBitshift+0x150>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d004      	beq.n	80035c8 <DMA_CalcBaseAndBitshift+0xa8>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a2c      	ldr	r2, [pc, #176]	; (8003674 <DMA_CalcBaseAndBitshift+0x154>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d101      	bne.n	80035cc <DMA_CalcBaseAndBitshift+0xac>
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <DMA_CalcBaseAndBitshift+0xae>
 80035cc:	2300      	movs	r3, #0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d024      	beq.n	800361c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	3b10      	subs	r3, #16
 80035da:	4a27      	ldr	r2, [pc, #156]	; (8003678 <DMA_CalcBaseAndBitshift+0x158>)
 80035dc:	fba2 2303 	umull	r2, r3, r2, r3
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	4a24      	ldr	r2, [pc, #144]	; (800367c <DMA_CalcBaseAndBitshift+0x15c>)
 80035ec:	5cd3      	ldrb	r3, [r2, r3]
 80035ee:	461a      	mov	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d908      	bls.n	800360c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	4b1f      	ldr	r3, [pc, #124]	; (8003680 <DMA_CalcBaseAndBitshift+0x160>)
 8003602:	4013      	ands	r3, r2
 8003604:	1d1a      	adds	r2, r3, #4
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	659a      	str	r2, [r3, #88]	; 0x58
 800360a:	e00d      	b.n	8003628 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	461a      	mov	r2, r3
 8003612:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <DMA_CalcBaseAndBitshift+0x160>)
 8003614:	4013      	ands	r3, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6593      	str	r3, [r2, #88]	; 0x58
 800361a:	e005      	b.n	8003628 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	40020010 	.word	0x40020010
 800363c:	40020028 	.word	0x40020028
 8003640:	40020040 	.word	0x40020040
 8003644:	40020058 	.word	0x40020058
 8003648:	40020070 	.word	0x40020070
 800364c:	40020088 	.word	0x40020088
 8003650:	400200a0 	.word	0x400200a0
 8003654:	400200b8 	.word	0x400200b8
 8003658:	40020410 	.word	0x40020410
 800365c:	40020428 	.word	0x40020428
 8003660:	40020440 	.word	0x40020440
 8003664:	40020458 	.word	0x40020458
 8003668:	40020470 	.word	0x40020470
 800366c:	40020488 	.word	0x40020488
 8003670:	400204a0 	.word	0x400204a0
 8003674:	400204b8 	.word	0x400204b8
 8003678:	aaaaaaab 	.word	0xaaaaaaab
 800367c:	0800905c 	.word	0x0800905c
 8003680:	fffffc00 	.word	0xfffffc00

08003684 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d120      	bne.n	80036da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	2b03      	cmp	r3, #3
 800369e:	d858      	bhi.n	8003752 <DMA_CheckFifoParam+0xce>
 80036a0:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <DMA_CheckFifoParam+0x24>)
 80036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a6:	bf00      	nop
 80036a8:	080036b9 	.word	0x080036b9
 80036ac:	080036cb 	.word	0x080036cb
 80036b0:	080036b9 	.word	0x080036b9
 80036b4:	08003753 	.word	0x08003753
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d048      	beq.n	8003756 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80036c8:	e045      	b.n	8003756 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036d2:	d142      	bne.n	800375a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80036d8:	e03f      	b.n	800375a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e2:	d123      	bne.n	800372c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d838      	bhi.n	800375e <DMA_CheckFifoParam+0xda>
 80036ec:	a201      	add	r2, pc, #4	; (adr r2, 80036f4 <DMA_CheckFifoParam+0x70>)
 80036ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f2:	bf00      	nop
 80036f4:	08003705 	.word	0x08003705
 80036f8:	0800370b 	.word	0x0800370b
 80036fc:	08003705 	.word	0x08003705
 8003700:	0800371d 	.word	0x0800371d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
        break;
 8003708:	e030      	b.n	800376c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d025      	beq.n	8003762 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800371a:	e022      	b.n	8003762 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003724:	d11f      	bne.n	8003766 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800372a:	e01c      	b.n	8003766 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	2b02      	cmp	r3, #2
 8003732:	d902      	bls.n	800373a <DMA_CheckFifoParam+0xb6>
 8003734:	2b03      	cmp	r3, #3
 8003736:	d003      	beq.n	8003740 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003738:	e018      	b.n	800376c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
        break;
 800373e:	e015      	b.n	800376c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00e      	beq.n	800376a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
    break;
 8003750:	e00b      	b.n	800376a <DMA_CheckFifoParam+0xe6>
        break;
 8003752:	bf00      	nop
 8003754:	e00a      	b.n	800376c <DMA_CheckFifoParam+0xe8>
        break;
 8003756:	bf00      	nop
 8003758:	e008      	b.n	800376c <DMA_CheckFifoParam+0xe8>
        break;
 800375a:	bf00      	nop
 800375c:	e006      	b.n	800376c <DMA_CheckFifoParam+0xe8>
        break;
 800375e:	bf00      	nop
 8003760:	e004      	b.n	800376c <DMA_CheckFifoParam+0xe8>
        break;
 8003762:	bf00      	nop
 8003764:	e002      	b.n	800376c <DMA_CheckFifoParam+0xe8>
        break;
 8003766:	bf00      	nop
 8003768:	e000      	b.n	800376c <DMA_CheckFifoParam+0xe8>
    break;
 800376a:	bf00      	nop
    }
  }

  return status;
 800376c:	7bfb      	ldrb	r3, [r7, #15]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop

0800377c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a38      	ldr	r2, [pc, #224]	; (8003870 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d022      	beq.n	80037da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a36      	ldr	r2, [pc, #216]	; (8003874 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d01d      	beq.n	80037da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a35      	ldr	r2, [pc, #212]	; (8003878 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d018      	beq.n	80037da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a33      	ldr	r2, [pc, #204]	; (800387c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d013      	beq.n	80037da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a32      	ldr	r2, [pc, #200]	; (8003880 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00e      	beq.n	80037da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a30      	ldr	r2, [pc, #192]	; (8003884 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d009      	beq.n	80037da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a2f      	ldr	r2, [pc, #188]	; (8003888 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d004      	beq.n	80037da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a2d      	ldr	r2, [pc, #180]	; (800388c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d101      	bne.n	80037de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80037de:	2300      	movs	r3, #0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01a      	beq.n	800381a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	3b08      	subs	r3, #8
 80037ec:	4a28      	ldr	r2, [pc, #160]	; (8003890 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4b26      	ldr	r3, [pc, #152]	; (8003894 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	461a      	mov	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a24      	ldr	r2, [pc, #144]	; (8003898 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003808:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	2201      	movs	r2, #1
 8003812:	409a      	lsls	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003818:	e024      	b.n	8003864 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	3b10      	subs	r3, #16
 8003822:	4a1e      	ldr	r2, [pc, #120]	; (800389c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4a1c      	ldr	r2, [pc, #112]	; (80038a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d806      	bhi.n	8003842 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4a1b      	ldr	r2, [pc, #108]	; (80038a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d902      	bls.n	8003842 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3308      	adds	r3, #8
 8003840:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4b18      	ldr	r3, [pc, #96]	; (80038a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	461a      	mov	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a16      	ldr	r2, [pc, #88]	; (80038ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003854:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f003 031f 	and.w	r3, r3, #31
 800385c:	2201      	movs	r2, #1
 800385e:	409a      	lsls	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003864:	bf00      	nop
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	58025408 	.word	0x58025408
 8003874:	5802541c 	.word	0x5802541c
 8003878:	58025430 	.word	0x58025430
 800387c:	58025444 	.word	0x58025444
 8003880:	58025458 	.word	0x58025458
 8003884:	5802546c 	.word	0x5802546c
 8003888:	58025480 	.word	0x58025480
 800388c:	58025494 	.word	0x58025494
 8003890:	cccccccd 	.word	0xcccccccd
 8003894:	16009600 	.word	0x16009600
 8003898:	58025880 	.word	0x58025880
 800389c:	aaaaaaab 	.word	0xaaaaaaab
 80038a0:	400204b8 	.word	0x400204b8
 80038a4:	4002040f 	.word	0x4002040f
 80038a8:	10008200 	.word	0x10008200
 80038ac:	40020880 	.word	0x40020880

080038b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d04a      	beq.n	800395c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d847      	bhi.n	800395c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a25      	ldr	r2, [pc, #148]	; (8003968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d022      	beq.n	800391c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a24      	ldr	r2, [pc, #144]	; (800396c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d01d      	beq.n	800391c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a22      	ldr	r2, [pc, #136]	; (8003970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d018      	beq.n	800391c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a21      	ldr	r2, [pc, #132]	; (8003974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d013      	beq.n	800391c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1f      	ldr	r2, [pc, #124]	; (8003978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00e      	beq.n	800391c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a1e      	ldr	r2, [pc, #120]	; (800397c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d009      	beq.n	800391c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d004      	beq.n	800391c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a1b      	ldr	r2, [pc, #108]	; (8003984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d101      	bne.n	8003920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003920:	2300      	movs	r3, #0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4b17      	ldr	r3, [pc, #92]	; (8003988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	461a      	mov	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a15      	ldr	r2, [pc, #84]	; (800398c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003938:	671a      	str	r2, [r3, #112]	; 0x70
 800393a:	e009      	b.n	8003950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4b14      	ldr	r3, [pc, #80]	; (8003990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	461a      	mov	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a11      	ldr	r2, [pc, #68]	; (8003994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800394e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3b01      	subs	r3, #1
 8003954:	2201      	movs	r2, #1
 8003956:	409a      	lsls	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800395c:	bf00      	nop
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	58025408 	.word	0x58025408
 800396c:	5802541c 	.word	0x5802541c
 8003970:	58025430 	.word	0x58025430
 8003974:	58025444 	.word	0x58025444
 8003978:	58025458 	.word	0x58025458
 800397c:	5802546c 	.word	0x5802546c
 8003980:	58025480 	.word	0x58025480
 8003984:	58025494 	.word	0x58025494
 8003988:	1600963f 	.word	0x1600963f
 800398c:	58025940 	.word	0x58025940
 8003990:	1000823f 	.word	0x1000823f
 8003994:	40020940 	.word	0x40020940

08003998 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e0cf      	b.n	8003b4a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2223      	movs	r2, #35	; 0x23
 80039b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7fd f93f 	bl	8000c40 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c2:	4b64      	ldr	r3, [pc, #400]	; (8003b54 <HAL_ETH_Init+0x1bc>)
 80039c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039c8:	4a62      	ldr	r2, [pc, #392]	; (8003b54 <HAL_ETH_Init+0x1bc>)
 80039ca:	f043 0302 	orr.w	r3, r3, #2
 80039ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80039d2:	4b60      	ldr	r3, [pc, #384]	; (8003b54 <HAL_ETH_Init+0x1bc>)
 80039d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	7a1b      	ldrb	r3, [r3, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d103      	bne.n	80039f0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80039e8:	2000      	movs	r0, #0
 80039ea:	f7fd fc8b 	bl	8001304 <HAL_SYSCFG_ETHInterfaceSelect>
 80039ee:	e003      	b.n	80039f8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80039f0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80039f4:	f7fd fc86 	bl	8001304 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80039f8:	4b57      	ldr	r3, [pc, #348]	; (8003b58 <HAL_ETH_Init+0x1c0>)
 80039fa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6812      	ldr	r2, [r2, #0]
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a14:	f7fd fc3a 	bl	800128c <HAL_GetTick>
 8003a18:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003a1a:	e011      	b.n	8003a40 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003a1c:	f7fd fc36 	bl	800128c <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a2a:	d909      	bls.n	8003a40 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2204      	movs	r2, #4
 8003a30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	22e0      	movs	r2, #224	; 0xe0
 8003a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e084      	b.n	8003b4a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e4      	bne.n	8003a1c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f886 	bl	8003b64 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003a58:	f001 fefe 	bl	8005858 <HAL_RCC_GetHCLKFreq>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	4a3f      	ldr	r2, [pc, #252]	; (8003b5c <HAL_ETH_Init+0x1c4>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	0c9a      	lsrs	r2, r3, #18
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3a01      	subs	r2, #1
 8003a6c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 fa71 	bl	8003f58 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a7e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003a82:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6812      	ldr	r2, [r2, #0]
 8003a8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a92:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	22e0      	movs	r2, #224	; 0xe0
 8003aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e049      	b.n	8003b4a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003abe:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003ac2:	4b27      	ldr	r3, [pc, #156]	; (8003b60 <HAL_ETH_Init+0x1c8>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6952      	ldr	r2, [r2, #20]
 8003aca:	0051      	lsls	r1, r2, #1
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ad6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fad9 	bl	8004092 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fb1f 	bl	8004124 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	3305      	adds	r3, #5
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	021a      	lsls	r2, r3, #8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	3304      	adds	r3, #4
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	4619      	mov	r1, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	3303      	adds	r3, #3
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	061a      	lsls	r2, r3, #24
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	3302      	adds	r3, #2
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	041b      	lsls	r3, r3, #16
 8003b18:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003b24:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003b32:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003b34:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2210      	movs	r2, #16
 8003b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	58024400 	.word	0x58024400
 8003b58:	58000400 	.word	0x58000400
 8003b5c:	431bde83 	.word	0x431bde83
 8003b60:	ffff8001 	.word	0xffff8001

08003b64 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b74:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003b7e:	f001 fe6b 	bl	8005858 <HAL_RCC_GetHCLKFreq>
 8003b82:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d908      	bls.n	8003b9e <HAL_ETH_SetMDIOClockRange+0x3a>
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d804      	bhi.n	8003b9e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	e027      	b.n	8003bee <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4a18      	ldr	r2, [pc, #96]	; (8003c04 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d908      	bls.n	8003bb8 <HAL_ETH_SetMDIOClockRange+0x54>
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4a17      	ldr	r2, [pc, #92]	; (8003c08 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d204      	bcs.n	8003bb8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e01a      	b.n	8003bee <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4a13      	ldr	r2, [pc, #76]	; (8003c08 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d303      	bcc.n	8003bc8 <HAL_ETH_SetMDIOClockRange+0x64>
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4a12      	ldr	r2, [pc, #72]	; (8003c0c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d911      	bls.n	8003bec <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4a10      	ldr	r2, [pc, #64]	; (8003c0c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d908      	bls.n	8003be2 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4a0f      	ldr	r2, [pc, #60]	; (8003c10 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d804      	bhi.n	8003be2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	e005      	b.n	8003bee <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	e000      	b.n	8003bee <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003bec:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003bf8:	bf00      	nop
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	01312cff 	.word	0x01312cff
 8003c04:	02160ebf 	.word	0x02160ebf
 8003c08:	03938700 	.word	0x03938700
 8003c0c:	05f5e0ff 	.word	0x05f5e0ff
 8003c10:	08f0d17f 	.word	0x08f0d17f

08003c14 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003c26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	791b      	ldrb	r3, [r3, #4]
 8003c2c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003c2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	7b1b      	ldrb	r3, [r3, #12]
 8003c34:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003c36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	7b5b      	ldrb	r3, [r3, #13]
 8003c3c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003c3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	7b9b      	ldrb	r3, [r3, #14]
 8003c44:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003c46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	7bdb      	ldrb	r3, [r3, #15]
 8003c4c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003c4e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	7c12      	ldrb	r2, [r2, #16]
 8003c54:	2a00      	cmp	r2, #0
 8003c56:	d102      	bne.n	8003c5e <ETH_SetMACConfig+0x4a>
 8003c58:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003c5c:	e000      	b.n	8003c60 <ETH_SetMACConfig+0x4c>
 8003c5e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003c60:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	7c52      	ldrb	r2, [r2, #17]
 8003c66:	2a00      	cmp	r2, #0
 8003c68:	d102      	bne.n	8003c70 <ETH_SetMACConfig+0x5c>
 8003c6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c6e:	e000      	b.n	8003c72 <ETH_SetMACConfig+0x5e>
 8003c70:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003c72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	7c9b      	ldrb	r3, [r3, #18]
 8003c78:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003c7a:	431a      	orrs	r2, r3
               macconf->Speed |
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003c80:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003c86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	7f1b      	ldrb	r3, [r3, #28]
 8003c8c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003c8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	7f5b      	ldrb	r3, [r3, #29]
 8003c94:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003c96:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	7f92      	ldrb	r2, [r2, #30]
 8003c9c:	2a00      	cmp	r2, #0
 8003c9e:	d102      	bne.n	8003ca6 <ETH_SetMACConfig+0x92>
 8003ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ca4:	e000      	b.n	8003ca8 <ETH_SetMACConfig+0x94>
 8003ca6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003ca8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	7fdb      	ldrb	r3, [r3, #31]
 8003cae:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003cb0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003cb8:	2a00      	cmp	r2, #0
 8003cba:	d102      	bne.n	8003cc2 <ETH_SetMACConfig+0xae>
 8003cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cc0:	e000      	b.n	8003cc4 <ETH_SetMACConfig+0xb0>
 8003cc2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003cc4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003cca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cd2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003cd4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b56      	ldr	r3, [pc, #344]	; (8003e40 <ETH_SetMACConfig+0x22c>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	68f9      	ldr	r1, [r7, #12]
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cfe:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003d00:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d08:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003d0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003d12:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003d14:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003d1c:	2a00      	cmp	r2, #0
 8003d1e:	d102      	bne.n	8003d26 <ETH_SetMACConfig+0x112>
 8003d20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d24:	e000      	b.n	8003d28 <ETH_SetMACConfig+0x114>
 8003d26:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003d28:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	4b42      	ldr	r3, [pc, #264]	; (8003e44 <ETH_SetMACConfig+0x230>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	68f9      	ldr	r1, [r7, #12]
 8003d42:	430b      	orrs	r3, r1
 8003d44:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d4c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	4b3a      	ldr	r3, [pc, #232]	; (8003e48 <ETH_SetMACConfig+0x234>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	68f9      	ldr	r1, [r7, #12]
 8003d66:	430b      	orrs	r3, r1
 8003d68:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003d70:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003d76:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003d7e:	2a00      	cmp	r2, #0
 8003d80:	d101      	bne.n	8003d86 <ETH_SetMACConfig+0x172>
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	e000      	b.n	8003d88 <ETH_SetMACConfig+0x174>
 8003d86:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003d88:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d9a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003d9e:	4013      	ands	r3, r2
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	68f9      	ldr	r1, [r7, #12]
 8003da6:	430b      	orrs	r3, r1
 8003da8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003db0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003db8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc6:	f023 0103 	bic.w	r1, r3, #3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003dde:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003dfa:	2a00      	cmp	r2, #0
 8003dfc:	d101      	bne.n	8003e02 <ETH_SetMACConfig+0x1ee>
 8003dfe:	2240      	movs	r2, #64	; 0x40
 8003e00:	e000      	b.n	8003e04 <ETH_SetMACConfig+0x1f0>
 8003e02:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003e04:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003e0c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003e0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003e16:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003e24:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003e34:	bf00      	nop
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	00048083 	.word	0x00048083
 8003e44:	c0f88000 	.word	0xc0f88000
 8003e48:	fffffef0 	.word	0xfffffef0

08003e4c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	4b38      	ldr	r3, [pc, #224]	; (8003f44 <ETH_SetDMAConfig+0xf8>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	6811      	ldr	r1, [r2, #0]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e72:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	791b      	ldrb	r3, [r3, #4]
 8003e78:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003e7e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	7b1b      	ldrb	r3, [r3, #12]
 8003e84:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <ETH_SetDMAConfig+0xfc>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	68f9      	ldr	r1, [r7, #12]
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ea4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	7b5b      	ldrb	r3, [r3, #13]
 8003eaa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ebc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003ec0:	4b22      	ldr	r3, [pc, #136]	; (8003f4c <ETH_SetDMAConfig+0x100>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	68f9      	ldr	r1, [r7, #12]
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ed0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	7d1b      	ldrb	r3, [r3, #20]
 8003edc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ede:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	7f5b      	ldrb	r3, [r3, #29]
 8003ee4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003ef6:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <ETH_SetDMAConfig+0x104>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6812      	ldr	r2, [r2, #0]
 8003efe:	68f9      	ldr	r1, [r7, #12]
 8003f00:	430b      	orrs	r3, r1
 8003f02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f06:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	7f1b      	ldrb	r3, [r3, #28]
 8003f0e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f20:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <ETH_SetDMAConfig+0x108>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	68f9      	ldr	r1, [r7, #12]
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f34:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	ffff87fd 	.word	0xffff87fd
 8003f48:	ffff2ffe 	.word	0xffff2ffe
 8003f4c:	fffec000 	.word	0xfffec000
 8003f50:	ffc0efef 	.word	0xffc0efef
 8003f54:	7fc0ffff 	.word	0x7fc0ffff

08003f58 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b0a4      	sub	sp, #144	; 0x90
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003f60:	2301      	movs	r3, #1
 8003f62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003f66:	2300      	movs	r3, #0
 8003f68:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f98:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003faa:	2300      	movs	r3, #0
 8003fac:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003fb0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003fb4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003ff0:	2320      	movs	r3, #32
 8003ff2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004002:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004006:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004008:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800400c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800400e:	2300      	movs	r3, #0
 8004010:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004014:	2302      	movs	r3, #2
 8004016:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800401a:	2300      	movs	r3, #0
 800401c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004020:	2300      	movs	r3, #0
 8004022:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004026:	2300      	movs	r3, #0
 8004028:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004032:	2300      	movs	r3, #0
 8004034:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800403c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004040:	4619      	mov	r1, r3
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff fde6 	bl	8003c14 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004048:	2301      	movs	r3, #1
 800404a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800404c:	2301      	movs	r3, #1
 800404e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004050:	2300      	movs	r3, #0
 8004052:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004054:	2300      	movs	r3, #0
 8004056:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800405a:	2300      	movs	r3, #0
 800405c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800405e:	2300      	movs	r3, #0
 8004060:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004062:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004066:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004068:	2300      	movs	r3, #0
 800406a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800406c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004070:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004072:	2300      	movs	r3, #0
 8004074:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004078:	f44f 7306 	mov.w	r3, #536	; 0x218
 800407c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800407e:	f107 0308 	add.w	r3, r7, #8
 8004082:	4619      	mov	r1, r3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff fee1 	bl	8003e4c <ETH_SetDMAConfig>
}
 800408a:	bf00      	nop
 800408c:	3790      	adds	r7, #144	; 0x90
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004092:	b480      	push	{r7}
 8004094:	b085      	sub	sp, #20
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	e01d      	b.n	80040dc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68d9      	ldr	r1, [r3, #12]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	4613      	mov	r3, r2
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	4413      	add	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	440b      	add	r3, r1
 80040b0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2200      	movs	r2, #0
 80040bc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2200      	movs	r2, #0
 80040c2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2200      	movs	r2, #0
 80040c8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	3206      	adds	r2, #6
 80040d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3301      	adds	r3, #1
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d9de      	bls.n	80040a0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f0:	461a      	mov	r2, r3
 80040f2:	2303      	movs	r3, #3
 80040f4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004104:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004114:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004118:	bf00      	nop
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	e023      	b.n	800417a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6919      	ldr	r1, [r3, #16]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4613      	mov	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	4413      	add	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	440b      	add	r3, r1
 8004142:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2200      	movs	r2, #0
 800414e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2200      	movs	r2, #0
 8004154:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2200      	movs	r2, #0
 800415a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2200      	movs	r2, #0
 8004160:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2200      	movs	r2, #0
 8004166:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	3212      	adds	r2, #18
 8004170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	3301      	adds	r3, #1
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b03      	cmp	r3, #3
 800417e:	d9d8      	bls.n	8004132 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a6:	461a      	mov	r2, r3
 80041a8:	2303      	movs	r3, #3
 80041aa:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ba:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80041d2:	bf00      	nop
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
	...

080041e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b089      	sub	sp, #36	; 0x24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80041ee:	4b89      	ldr	r3, [pc, #548]	; (8004414 <HAL_GPIO_Init+0x234>)
 80041f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041f2:	e194      	b.n	800451e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	2101      	movs	r1, #1
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004200:	4013      	ands	r3, r2
 8004202:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8186 	beq.w	8004518 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	2b01      	cmp	r3, #1
 8004216:	d005      	beq.n	8004224 <HAL_GPIO_Init+0x44>
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f003 0303 	and.w	r3, r3, #3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d130      	bne.n	8004286 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	2203      	movs	r2, #3
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	43db      	mvns	r3, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4013      	ands	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4313      	orrs	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800425a:	2201      	movs	r2, #1
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43db      	mvns	r3, r3
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	4013      	ands	r3, r2
 8004268:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	091b      	lsrs	r3, r3, #4
 8004270:	f003 0201 	and.w	r2, r3, #1
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	4313      	orrs	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	2b03      	cmp	r3, #3
 8004290:	d017      	beq.n	80042c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	2203      	movs	r2, #3
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	43db      	mvns	r3, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	4013      	ands	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d123      	bne.n	8004316 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	08da      	lsrs	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3208      	adds	r2, #8
 80042d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	220f      	movs	r2, #15
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	43db      	mvns	r3, r3
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	4013      	ands	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	4313      	orrs	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	08da      	lsrs	r2, r3, #3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3208      	adds	r2, #8
 8004310:	69b9      	ldr	r1, [r7, #24]
 8004312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	2203      	movs	r2, #3
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	43db      	mvns	r3, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4013      	ands	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f003 0203 	and.w	r2, r3, #3
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4313      	orrs	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 80e0 	beq.w	8004518 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004358:	4b2f      	ldr	r3, [pc, #188]	; (8004418 <HAL_GPIO_Init+0x238>)
 800435a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800435e:	4a2e      	ldr	r2, [pc, #184]	; (8004418 <HAL_GPIO_Init+0x238>)
 8004360:	f043 0302 	orr.w	r3, r3, #2
 8004364:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004368:	4b2b      	ldr	r3, [pc, #172]	; (8004418 <HAL_GPIO_Init+0x238>)
 800436a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004376:	4a29      	ldr	r2, [pc, #164]	; (800441c <HAL_GPIO_Init+0x23c>)
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	089b      	lsrs	r3, r3, #2
 800437c:	3302      	adds	r3, #2
 800437e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	220f      	movs	r2, #15
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	43db      	mvns	r3, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	4013      	ands	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a20      	ldr	r2, [pc, #128]	; (8004420 <HAL_GPIO_Init+0x240>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d052      	beq.n	8004448 <HAL_GPIO_Init+0x268>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a1f      	ldr	r2, [pc, #124]	; (8004424 <HAL_GPIO_Init+0x244>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d031      	beq.n	800440e <HAL_GPIO_Init+0x22e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a1e      	ldr	r2, [pc, #120]	; (8004428 <HAL_GPIO_Init+0x248>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d02b      	beq.n	800440a <HAL_GPIO_Init+0x22a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a1d      	ldr	r2, [pc, #116]	; (800442c <HAL_GPIO_Init+0x24c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d025      	beq.n	8004406 <HAL_GPIO_Init+0x226>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a1c      	ldr	r2, [pc, #112]	; (8004430 <HAL_GPIO_Init+0x250>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d01f      	beq.n	8004402 <HAL_GPIO_Init+0x222>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a1b      	ldr	r2, [pc, #108]	; (8004434 <HAL_GPIO_Init+0x254>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d019      	beq.n	80043fe <HAL_GPIO_Init+0x21e>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a1a      	ldr	r2, [pc, #104]	; (8004438 <HAL_GPIO_Init+0x258>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d013      	beq.n	80043fa <HAL_GPIO_Init+0x21a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a19      	ldr	r2, [pc, #100]	; (800443c <HAL_GPIO_Init+0x25c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00d      	beq.n	80043f6 <HAL_GPIO_Init+0x216>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a18      	ldr	r2, [pc, #96]	; (8004440 <HAL_GPIO_Init+0x260>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d007      	beq.n	80043f2 <HAL_GPIO_Init+0x212>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a17      	ldr	r2, [pc, #92]	; (8004444 <HAL_GPIO_Init+0x264>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d101      	bne.n	80043ee <HAL_GPIO_Init+0x20e>
 80043ea:	2309      	movs	r3, #9
 80043ec:	e02d      	b.n	800444a <HAL_GPIO_Init+0x26a>
 80043ee:	230a      	movs	r3, #10
 80043f0:	e02b      	b.n	800444a <HAL_GPIO_Init+0x26a>
 80043f2:	2308      	movs	r3, #8
 80043f4:	e029      	b.n	800444a <HAL_GPIO_Init+0x26a>
 80043f6:	2307      	movs	r3, #7
 80043f8:	e027      	b.n	800444a <HAL_GPIO_Init+0x26a>
 80043fa:	2306      	movs	r3, #6
 80043fc:	e025      	b.n	800444a <HAL_GPIO_Init+0x26a>
 80043fe:	2305      	movs	r3, #5
 8004400:	e023      	b.n	800444a <HAL_GPIO_Init+0x26a>
 8004402:	2304      	movs	r3, #4
 8004404:	e021      	b.n	800444a <HAL_GPIO_Init+0x26a>
 8004406:	2303      	movs	r3, #3
 8004408:	e01f      	b.n	800444a <HAL_GPIO_Init+0x26a>
 800440a:	2302      	movs	r3, #2
 800440c:	e01d      	b.n	800444a <HAL_GPIO_Init+0x26a>
 800440e:	2301      	movs	r3, #1
 8004410:	e01b      	b.n	800444a <HAL_GPIO_Init+0x26a>
 8004412:	bf00      	nop
 8004414:	58000080 	.word	0x58000080
 8004418:	58024400 	.word	0x58024400
 800441c:	58000400 	.word	0x58000400
 8004420:	58020000 	.word	0x58020000
 8004424:	58020400 	.word	0x58020400
 8004428:	58020800 	.word	0x58020800
 800442c:	58020c00 	.word	0x58020c00
 8004430:	58021000 	.word	0x58021000
 8004434:	58021400 	.word	0x58021400
 8004438:	58021800 	.word	0x58021800
 800443c:	58021c00 	.word	0x58021c00
 8004440:	58022000 	.word	0x58022000
 8004444:	58022400 	.word	0x58022400
 8004448:	2300      	movs	r3, #0
 800444a:	69fa      	ldr	r2, [r7, #28]
 800444c:	f002 0203 	and.w	r2, r2, #3
 8004450:	0092      	lsls	r2, r2, #2
 8004452:	4093      	lsls	r3, r2
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	4313      	orrs	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800445a:	4938      	ldr	r1, [pc, #224]	; (800453c <HAL_GPIO_Init+0x35c>)
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	089b      	lsrs	r3, r3, #2
 8004460:	3302      	adds	r3, #2
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	43db      	mvns	r3, r3
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4013      	ands	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800448e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	43db      	mvns	r3, r3
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4013      	ands	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80044bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	43db      	mvns	r3, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4013      	ands	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	43db      	mvns	r3, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4013      	ands	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	3301      	adds	r3, #1
 800451c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	fa22 f303 	lsr.w	r3, r2, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	f47f ae63 	bne.w	80041f4 <HAL_GPIO_Init+0x14>
  }
}
 800452e:	bf00      	nop
 8004530:	bf00      	nop
 8004532:	3724      	adds	r7, #36	; 0x24
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	58000400 	.word	0x58000400

08004540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	807b      	strh	r3, [r7, #2]
 800454c:	4613      	mov	r3, r2
 800454e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004550:	787b      	ldrb	r3, [r7, #1]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004556:	887a      	ldrh	r2, [r7, #2]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800455c:	e003      	b.n	8004566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800455e:	887b      	ldrh	r3, [r7, #2]
 8004560:	041a      	lsls	r2, r3, #16
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	619a      	str	r2, [r3, #24]
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004572:	b480      	push	{r7}
 8004574:	b085      	sub	sp, #20
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	460b      	mov	r3, r1
 800457c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004584:	887a      	ldrh	r2, [r7, #2]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4013      	ands	r3, r2
 800458a:	041a      	lsls	r2, r3, #16
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	43d9      	mvns	r1, r3
 8004590:	887b      	ldrh	r3, [r7, #2]
 8004592:	400b      	ands	r3, r1
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	619a      	str	r2, [r3, #24]
}
 800459a:	bf00      	nop
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b082      	sub	sp, #8
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	4603      	mov	r3, r0
 80045ae:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80045b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80045b8:	88fb      	ldrh	r3, [r7, #6]
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045ca:	88fb      	ldrh	r3, [r7, #6]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fc faff 	bl	8000bd0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80045d2:	bf00      	nop
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80045e4:	4a08      	ldr	r2, [pc, #32]	; (8004608 <HAL_HSEM_FastTake+0x2c>)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3320      	adds	r3, #32
 80045ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ee:	4a07      	ldr	r2, [pc, #28]	; (800460c <HAL_HSEM_FastTake+0x30>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d101      	bne.n	80045f8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	e000      	b.n	80045fa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	58026400 	.word	0x58026400
 800460c:	80000300 	.word	0x80000300

08004610 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800461a:	4906      	ldr	r1, [pc, #24]	; (8004634 <HAL_HSEM_Release+0x24>)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	58026400 	.word	0x58026400

08004638 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800463a:	b08f      	sub	sp, #60	; 0x3c
 800463c:	af0a      	add	r7, sp, #40	; 0x28
 800463e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e116      	b.n	8004878 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d106      	bne.n	800466a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7fc fc89 	bl	8000f7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2203      	movs	r2, #3
 800466e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467a:	2b00      	cmp	r3, #0
 800467c:	d102      	bne.n	8004684 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f004 fa0b 	bl	8008aa4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	687e      	ldr	r6, [r7, #4]
 8004696:	466d      	mov	r5, sp
 8004698:	f106 0410 	add.w	r4, r6, #16
 800469c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800469e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80046ac:	1d33      	adds	r3, r6, #4
 80046ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046b0:	6838      	ldr	r0, [r7, #0]
 80046b2:	f004 f989 	bl	80089c8 <USB_CoreInit>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d005      	beq.n	80046c8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0d7      	b.n	8004878 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2100      	movs	r1, #0
 80046ce:	4618      	mov	r0, r3
 80046d0:	f004 f9f9 	bl	8008ac6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046d4:	2300      	movs	r3, #0
 80046d6:	73fb      	strb	r3, [r7, #15]
 80046d8:	e04a      	b.n	8004770 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046da:	7bfa      	ldrb	r2, [r7, #15]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	333d      	adds	r3, #61	; 0x3d
 80046ea:	2201      	movs	r2, #1
 80046ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046ee:	7bfa      	ldrb	r2, [r7, #15]
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	333c      	adds	r3, #60	; 0x3c
 80046fe:	7bfa      	ldrb	r2, [r7, #15]
 8004700:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004702:	7bfa      	ldrb	r2, [r7, #15]
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	b298      	uxth	r0, r3
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	3344      	adds	r3, #68	; 0x44
 8004716:	4602      	mov	r2, r0
 8004718:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800471a:	7bfa      	ldrb	r2, [r7, #15]
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	3340      	adds	r3, #64	; 0x40
 800472a:	2200      	movs	r2, #0
 800472c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800472e:	7bfa      	ldrb	r2, [r7, #15]
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	440b      	add	r3, r1
 800473c:	3348      	adds	r3, #72	; 0x48
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004742:	7bfa      	ldrb	r2, [r7, #15]
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	4613      	mov	r3, r2
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	334c      	adds	r3, #76	; 0x4c
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004756:	7bfa      	ldrb	r2, [r7, #15]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	3354      	adds	r3, #84	; 0x54
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800476a:	7bfb      	ldrb	r3, [r7, #15]
 800476c:	3301      	adds	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
 8004770:	7bfa      	ldrb	r2, [r7, #15]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	429a      	cmp	r2, r3
 8004778:	d3af      	bcc.n	80046da <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800477a:	2300      	movs	r3, #0
 800477c:	73fb      	strb	r3, [r7, #15]
 800477e:	e044      	b.n	800480a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004780:	7bfa      	ldrb	r2, [r7, #15]
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	4613      	mov	r3, r2
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004792:	2200      	movs	r2, #0
 8004794:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004796:	7bfa      	ldrb	r2, [r7, #15]
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	4413      	add	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80047a8:	7bfa      	ldrb	r2, [r7, #15]
 80047aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047ac:	7bfa      	ldrb	r2, [r7, #15]
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	4413      	add	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80047be:	2200      	movs	r2, #0
 80047c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047c2:	7bfa      	ldrb	r2, [r7, #15]
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	4613      	mov	r3, r2
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	4413      	add	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	440b      	add	r3, r1
 80047d0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047d8:	7bfa      	ldrb	r2, [r7, #15]
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047ee:	7bfa      	ldrb	r2, [r7, #15]
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	4613      	mov	r3, r2
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	3301      	adds	r3, #1
 8004808:	73fb      	strb	r3, [r7, #15]
 800480a:	7bfa      	ldrb	r2, [r7, #15]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	429a      	cmp	r2, r3
 8004812:	d3b5      	bcc.n	8004780 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	603b      	str	r3, [r7, #0]
 800481a:	687e      	ldr	r6, [r7, #4]
 800481c:	466d      	mov	r5, sp
 800481e:	f106 0410 	add.w	r4, r6, #16
 8004822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004824:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800482a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800482e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004832:	1d33      	adds	r3, r6, #4
 8004834:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004836:	6838      	ldr	r0, [r7, #0]
 8004838:	f004 f992 	bl	8008b60 <USB_DevInit>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d005      	beq.n	800484e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2202      	movs	r2, #2
 8004846:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e014      	b.n	8004878 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	2b01      	cmp	r3, #1
 8004864:	d102      	bne.n	800486c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f80a 	bl	8004880 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4618      	mov	r0, r3
 8004872:	f004 fb50 	bl	8008f16 <USB_DevDisconnect>

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004880 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048ae:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	10000003 	.word	0x10000003

080048c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80048d0:	4b29      	ldr	r3, [pc, #164]	; (8004978 <HAL_PWREx_ConfigSupply+0xb0>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	2b06      	cmp	r3, #6
 80048da:	d00a      	beq.n	80048f2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80048dc:	4b26      	ldr	r3, [pc, #152]	; (8004978 <HAL_PWREx_ConfigSupply+0xb0>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d001      	beq.n	80048ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e040      	b.n	8004970 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	e03e      	b.n	8004970 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80048f2:	4b21      	ldr	r3, [pc, #132]	; (8004978 <HAL_PWREx_ConfigSupply+0xb0>)
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80048fa:	491f      	ldr	r1, [pc, #124]	; (8004978 <HAL_PWREx_ConfigSupply+0xb0>)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004902:	f7fc fcc3 	bl	800128c <HAL_GetTick>
 8004906:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004908:	e009      	b.n	800491e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800490a:	f7fc fcbf 	bl	800128c <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004918:	d901      	bls.n	800491e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e028      	b.n	8004970 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800491e:	4b16      	ldr	r3, [pc, #88]	; (8004978 <HAL_PWREx_ConfigSupply+0xb0>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800492a:	d1ee      	bne.n	800490a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b1e      	cmp	r3, #30
 8004930:	d008      	beq.n	8004944 <HAL_PWREx_ConfigSupply+0x7c>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b2e      	cmp	r3, #46	; 0x2e
 8004936:	d005      	beq.n	8004944 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b1d      	cmp	r3, #29
 800493c:	d002      	beq.n	8004944 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b2d      	cmp	r3, #45	; 0x2d
 8004942:	d114      	bne.n	800496e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004944:	f7fc fca2 	bl	800128c <HAL_GetTick>
 8004948:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800494a:	e009      	b.n	8004960 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800494c:	f7fc fc9e 	bl	800128c <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800495a:	d901      	bls.n	8004960 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e007      	b.n	8004970 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004960:	4b05      	ldr	r3, [pc, #20]	; (8004978 <HAL_PWREx_ConfigSupply+0xb0>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496c:	d1ee      	bne.n	800494c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	58024800 	.word	0x58024800

0800497c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4a04      	ldr	r2, [pc, #16]	; (8004998 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800498a:	60d3      	str	r3, [r2, #12]
}
 800498c:	bf00      	nop
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	58024800 	.word	0x58024800

0800499c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08c      	sub	sp, #48	; 0x30
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d102      	bne.n	80049b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f000 bc1d 	b.w	80051ea <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 8087 	beq.w	8004acc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049be:	4b99      	ldr	r3, [pc, #612]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049c8:	4b96      	ldr	r3, [pc, #600]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d0:	2b10      	cmp	r3, #16
 80049d2:	d007      	beq.n	80049e4 <HAL_RCC_OscConfig+0x48>
 80049d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d6:	2b18      	cmp	r3, #24
 80049d8:	d110      	bne.n	80049fc <HAL_RCC_OscConfig+0x60>
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	f003 0303 	and.w	r3, r3, #3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d10b      	bne.n	80049fc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e4:	4b8f      	ldr	r3, [pc, #572]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d06c      	beq.n	8004aca <HAL_RCC_OscConfig+0x12e>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d168      	bne.n	8004aca <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e3f6      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a04:	d106      	bne.n	8004a14 <HAL_RCC_OscConfig+0x78>
 8004a06:	4b87      	ldr	r3, [pc, #540]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a86      	ldr	r2, [pc, #536]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	e02e      	b.n	8004a72 <HAL_RCC_OscConfig+0xd6>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10c      	bne.n	8004a36 <HAL_RCC_OscConfig+0x9a>
 8004a1c:	4b81      	ldr	r3, [pc, #516]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a80      	ldr	r2, [pc, #512]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	4b7e      	ldr	r3, [pc, #504]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a7d      	ldr	r2, [pc, #500]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	e01d      	b.n	8004a72 <HAL_RCC_OscConfig+0xd6>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a3e:	d10c      	bne.n	8004a5a <HAL_RCC_OscConfig+0xbe>
 8004a40:	4b78      	ldr	r3, [pc, #480]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a77      	ldr	r2, [pc, #476]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004a46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	4b75      	ldr	r3, [pc, #468]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a74      	ldr	r2, [pc, #464]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	e00b      	b.n	8004a72 <HAL_RCC_OscConfig+0xd6>
 8004a5a:	4b72      	ldr	r3, [pc, #456]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a71      	ldr	r2, [pc, #452]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	4b6f      	ldr	r3, [pc, #444]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a6e      	ldr	r2, [pc, #440]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004a6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d013      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7a:	f7fc fc07 	bl	800128c <HAL_GetTick>
 8004a7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a82:	f7fc fc03 	bl	800128c <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b64      	cmp	r3, #100	; 0x64
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e3aa      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a94:	4b63      	ldr	r3, [pc, #396]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0f0      	beq.n	8004a82 <HAL_RCC_OscConfig+0xe6>
 8004aa0:	e014      	b.n	8004acc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa2:	f7fc fbf3 	bl	800128c <HAL_GetTick>
 8004aa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aaa:	f7fc fbef 	bl	800128c <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b64      	cmp	r3, #100	; 0x64
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e396      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004abc:	4b59      	ldr	r3, [pc, #356]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1f0      	bne.n	8004aaa <HAL_RCC_OscConfig+0x10e>
 8004ac8:	e000      	b.n	8004acc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 80cb 	beq.w	8004c70 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ada:	4b52      	ldr	r3, [pc, #328]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ae2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ae4:	4b4f      	ldr	r3, [pc, #316]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d007      	beq.n	8004b00 <HAL_RCC_OscConfig+0x164>
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	2b18      	cmp	r3, #24
 8004af4:	d156      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x208>
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d151      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b00:	4b48      	ldr	r3, [pc, #288]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <HAL_RCC_OscConfig+0x17c>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e368      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b18:	4b42      	ldr	r3, [pc, #264]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f023 0219 	bic.w	r2, r3, #25
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	493f      	ldr	r1, [pc, #252]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b2a:	f7fc fbaf 	bl	800128c <HAL_GetTick>
 8004b2e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b32:	f7fc fbab 	bl	800128c <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e352      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b44:	4b37      	ldr	r3, [pc, #220]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b50:	f7fc fbcc 	bl	80012ec <HAL_GetREVID>
 8004b54:	4603      	mov	r3, r0
 8004b56:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d817      	bhi.n	8004b8e <HAL_RCC_OscConfig+0x1f2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	2b40      	cmp	r3, #64	; 0x40
 8004b64:	d108      	bne.n	8004b78 <HAL_RCC_OscConfig+0x1dc>
 8004b66:	4b2f      	ldr	r3, [pc, #188]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004b6e:	4a2d      	ldr	r2, [pc, #180]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b74:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b76:	e07b      	b.n	8004c70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b78:	4b2a      	ldr	r3, [pc, #168]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	031b      	lsls	r3, r3, #12
 8004b86:	4927      	ldr	r1, [pc, #156]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b8c:	e070      	b.n	8004c70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b8e:	4b25      	ldr	r3, [pc, #148]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	061b      	lsls	r3, r3, #24
 8004b9c:	4921      	ldr	r1, [pc, #132]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ba2:	e065      	b.n	8004c70 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d048      	beq.n	8004c3e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bac:	4b1d      	ldr	r3, [pc, #116]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f023 0219 	bic.w	r2, r3, #25
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	491a      	ldr	r1, [pc, #104]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbe:	f7fc fb65 	bl	800128c <HAL_GetTick>
 8004bc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bc6:	f7fc fb61 	bl	800128c <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e308      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bd8:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0f0      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be4:	f7fc fb82 	bl	80012ec <HAL_GetREVID>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f241 0203 	movw	r2, #4099	; 0x1003
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d81a      	bhi.n	8004c28 <HAL_RCC_OscConfig+0x28c>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	2b40      	cmp	r3, #64	; 0x40
 8004bf8:	d108      	bne.n	8004c0c <HAL_RCC_OscConfig+0x270>
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004c02:	4a08      	ldr	r2, [pc, #32]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c08:	6053      	str	r3, [r2, #4]
 8004c0a:	e031      	b.n	8004c70 <HAL_RCC_OscConfig+0x2d4>
 8004c0c:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	031b      	lsls	r3, r3, #12
 8004c1a:	4902      	ldr	r1, [pc, #8]	; (8004c24 <HAL_RCC_OscConfig+0x288>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	604b      	str	r3, [r1, #4]
 8004c20:	e026      	b.n	8004c70 <HAL_RCC_OscConfig+0x2d4>
 8004c22:	bf00      	nop
 8004c24:	58024400 	.word	0x58024400
 8004c28:	4b9a      	ldr	r3, [pc, #616]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	061b      	lsls	r3, r3, #24
 8004c36:	4997      	ldr	r1, [pc, #604]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	604b      	str	r3, [r1, #4]
 8004c3c:	e018      	b.n	8004c70 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c3e:	4b95      	ldr	r3, [pc, #596]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a94      	ldr	r2, [pc, #592]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004c44:	f023 0301 	bic.w	r3, r3, #1
 8004c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4a:	f7fc fb1f 	bl	800128c <HAL_GetTick>
 8004c4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c52:	f7fc fb1b 	bl	800128c <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e2c2      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c64:	4b8b      	ldr	r3, [pc, #556]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1f0      	bne.n	8004c52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 80a9 	beq.w	8004dd0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c7e:	4b85      	ldr	r3, [pc, #532]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c88:	4b82      	ldr	r3, [pc, #520]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d007      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x308>
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	2b18      	cmp	r3, #24
 8004c98:	d13a      	bne.n	8004d10 <HAL_RCC_OscConfig+0x374>
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f003 0303 	and.w	r3, r3, #3
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d135      	bne.n	8004d10 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ca4:	4b7b      	ldr	r3, [pc, #492]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <HAL_RCC_OscConfig+0x320>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	2b80      	cmp	r3, #128	; 0x80
 8004cb6:	d001      	beq.n	8004cbc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e296      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cbc:	f7fc fb16 	bl	80012ec <HAL_GetREVID>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	f241 0203 	movw	r2, #4099	; 0x1003
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d817      	bhi.n	8004cfa <HAL_RCC_OscConfig+0x35e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	2b20      	cmp	r3, #32
 8004cd0:	d108      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x348>
 8004cd2:	4b70      	ldr	r3, [pc, #448]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004cda:	4a6e      	ldr	r2, [pc, #440]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004cdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ce0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ce2:	e075      	b.n	8004dd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ce4:	4b6b      	ldr	r3, [pc, #428]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	069b      	lsls	r3, r3, #26
 8004cf2:	4968      	ldr	r1, [pc, #416]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cf8:	e06a      	b.n	8004dd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cfa:	4b66      	ldr	r3, [pc, #408]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	061b      	lsls	r3, r3, #24
 8004d08:	4962      	ldr	r1, [pc, #392]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d0e:	e05f      	b.n	8004dd0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d042      	beq.n	8004d9e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d18:	4b5e      	ldr	r3, [pc, #376]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a5d      	ldr	r2, [pc, #372]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fc fab2 	bl	800128c <HAL_GetTick>
 8004d28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d2c:	f7fc faae 	bl	800128c <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e255      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d3e:	4b55      	ldr	r3, [pc, #340]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d4a:	f7fc facf 	bl	80012ec <HAL_GetREVID>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d817      	bhi.n	8004d88 <HAL_RCC_OscConfig+0x3ec>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d108      	bne.n	8004d72 <HAL_RCC_OscConfig+0x3d6>
 8004d60:	4b4c      	ldr	r3, [pc, #304]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004d68:	4a4a      	ldr	r2, [pc, #296]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004d6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d6e:	6053      	str	r3, [r2, #4]
 8004d70:	e02e      	b.n	8004dd0 <HAL_RCC_OscConfig+0x434>
 8004d72:	4b48      	ldr	r3, [pc, #288]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	069b      	lsls	r3, r3, #26
 8004d80:	4944      	ldr	r1, [pc, #272]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	604b      	str	r3, [r1, #4]
 8004d86:	e023      	b.n	8004dd0 <HAL_RCC_OscConfig+0x434>
 8004d88:	4b42      	ldr	r3, [pc, #264]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	061b      	lsls	r3, r3, #24
 8004d96:	493f      	ldr	r1, [pc, #252]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60cb      	str	r3, [r1, #12]
 8004d9c:	e018      	b.n	8004dd0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d9e:	4b3d      	ldr	r3, [pc, #244]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a3c      	ldr	r2, [pc, #240]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004daa:	f7fc fa6f 	bl	800128c <HAL_GetTick>
 8004dae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004db2:	f7fc fa6b 	bl	800128c <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e212      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004dc4:	4b33      	ldr	r3, [pc, #204]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1f0      	bne.n	8004db2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d036      	beq.n	8004e4a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d019      	beq.n	8004e18 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004de4:	4b2b      	ldr	r3, [pc, #172]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de8:	4a2a      	ldr	r2, [pc, #168]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004dea:	f043 0301 	orr.w	r3, r3, #1
 8004dee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df0:	f7fc fa4c 	bl	800128c <HAL_GetTick>
 8004df4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004df8:	f7fc fa48 	bl	800128c <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e1ef      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e0a:	4b22      	ldr	r3, [pc, #136]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCC_OscConfig+0x45c>
 8004e16:	e018      	b.n	8004e4a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e18:	4b1e      	ldr	r3, [pc, #120]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e1c:	4a1d      	ldr	r2, [pc, #116]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004e1e:	f023 0301 	bic.w	r3, r3, #1
 8004e22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e24:	f7fc fa32 	bl	800128c <HAL_GetTick>
 8004e28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e2c:	f7fc fa2e 	bl	800128c <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e1d5      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e3e:	4b15      	ldr	r3, [pc, #84]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1f0      	bne.n	8004e2c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d039      	beq.n	8004eca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d01c      	beq.n	8004e98 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e5e:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a0c      	ldr	r2, [pc, #48]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004e64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e6a:	f7fc fa0f 	bl	800128c <HAL_GetTick>
 8004e6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004e72:	f7fc fa0b 	bl	800128c <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e1b2      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e84:	4b03      	ldr	r3, [pc, #12]	; (8004e94 <HAL_RCC_OscConfig+0x4f8>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0f0      	beq.n	8004e72 <HAL_RCC_OscConfig+0x4d6>
 8004e90:	e01b      	b.n	8004eca <HAL_RCC_OscConfig+0x52e>
 8004e92:	bf00      	nop
 8004e94:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e98:	4b9b      	ldr	r3, [pc, #620]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a9a      	ldr	r2, [pc, #616]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004e9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ea2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ea4:	f7fc f9f2 	bl	800128c <HAL_GetTick>
 8004ea8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004eac:	f7fc f9ee 	bl	800128c <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e195      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ebe:	4b92      	ldr	r3, [pc, #584]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f0      	bne.n	8004eac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 8081 	beq.w	8004fda <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ed8:	4b8c      	ldr	r3, [pc, #560]	; (800510c <HAL_RCC_OscConfig+0x770>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a8b      	ldr	r2, [pc, #556]	; (800510c <HAL_RCC_OscConfig+0x770>)
 8004ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ee4:	f7fc f9d2 	bl	800128c <HAL_GetTick>
 8004ee8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004eec:	f7fc f9ce 	bl	800128c <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b64      	cmp	r3, #100	; 0x64
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e175      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004efe:	4b83      	ldr	r3, [pc, #524]	; (800510c <HAL_RCC_OscConfig+0x770>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0f0      	beq.n	8004eec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d106      	bne.n	8004f20 <HAL_RCC_OscConfig+0x584>
 8004f12:	4b7d      	ldr	r3, [pc, #500]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	4a7c      	ldr	r2, [pc, #496]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004f18:	f043 0301 	orr.w	r3, r3, #1
 8004f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f1e:	e02d      	b.n	8004f7c <HAL_RCC_OscConfig+0x5e0>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10c      	bne.n	8004f42 <HAL_RCC_OscConfig+0x5a6>
 8004f28:	4b77      	ldr	r3, [pc, #476]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2c:	4a76      	ldr	r2, [pc, #472]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004f2e:	f023 0301 	bic.w	r3, r3, #1
 8004f32:	6713      	str	r3, [r2, #112]	; 0x70
 8004f34:	4b74      	ldr	r3, [pc, #464]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f38:	4a73      	ldr	r2, [pc, #460]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004f3a:	f023 0304 	bic.w	r3, r3, #4
 8004f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f40:	e01c      	b.n	8004f7c <HAL_RCC_OscConfig+0x5e0>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	2b05      	cmp	r3, #5
 8004f48:	d10c      	bne.n	8004f64 <HAL_RCC_OscConfig+0x5c8>
 8004f4a:	4b6f      	ldr	r3, [pc, #444]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4e:	4a6e      	ldr	r2, [pc, #440]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004f50:	f043 0304 	orr.w	r3, r3, #4
 8004f54:	6713      	str	r3, [r2, #112]	; 0x70
 8004f56:	4b6c      	ldr	r3, [pc, #432]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	4a6b      	ldr	r2, [pc, #428]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	6713      	str	r3, [r2, #112]	; 0x70
 8004f62:	e00b      	b.n	8004f7c <HAL_RCC_OscConfig+0x5e0>
 8004f64:	4b68      	ldr	r3, [pc, #416]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f68:	4a67      	ldr	r2, [pc, #412]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004f6a:	f023 0301 	bic.w	r3, r3, #1
 8004f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f70:	4b65      	ldr	r3, [pc, #404]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f74:	4a64      	ldr	r2, [pc, #400]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004f76:	f023 0304 	bic.w	r3, r3, #4
 8004f7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d015      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f84:	f7fc f982 	bl	800128c <HAL_GetTick>
 8004f88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f8a:	e00a      	b.n	8004fa2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f8c:	f7fc f97e 	bl	800128c <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e123      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fa2:	4b59      	ldr	r3, [pc, #356]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0ee      	beq.n	8004f8c <HAL_RCC_OscConfig+0x5f0>
 8004fae:	e014      	b.n	8004fda <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb0:	f7fc f96c 	bl	800128c <HAL_GetTick>
 8004fb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fb6:	e00a      	b.n	8004fce <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fb8:	f7fc f968 	bl	800128c <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e10d      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fce:	4b4e      	ldr	r3, [pc, #312]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1ee      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 8102 	beq.w	80051e8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004fe4:	4b48      	ldr	r3, [pc, #288]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fec:	2b18      	cmp	r3, #24
 8004fee:	f000 80bd 	beq.w	800516c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	f040 809e 	bne.w	8005138 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ffc:	4b42      	ldr	r3, [pc, #264]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a41      	ldr	r2, [pc, #260]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8005002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005008:	f7fc f940 	bl	800128c <HAL_GetTick>
 800500c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005010:	f7fc f93c 	bl	800128c <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e0e3      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005022:	4b39      	ldr	r3, [pc, #228]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f0      	bne.n	8005010 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800502e:	4b36      	ldr	r3, [pc, #216]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8005030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005032:	4b37      	ldr	r3, [pc, #220]	; (8005110 <HAL_RCC_OscConfig+0x774>)
 8005034:	4013      	ands	r3, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800503e:	0112      	lsls	r2, r2, #4
 8005040:	430a      	orrs	r2, r1
 8005042:	4931      	ldr	r1, [pc, #196]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8005044:	4313      	orrs	r3, r2
 8005046:	628b      	str	r3, [r1, #40]	; 0x28
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	3b01      	subs	r3, #1
 800504e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005056:	3b01      	subs	r3, #1
 8005058:	025b      	lsls	r3, r3, #9
 800505a:	b29b      	uxth	r3, r3
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005062:	3b01      	subs	r3, #1
 8005064:	041b      	lsls	r3, r3, #16
 8005066:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005070:	3b01      	subs	r3, #1
 8005072:	061b      	lsls	r3, r3, #24
 8005074:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005078:	4923      	ldr	r1, [pc, #140]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 800507a:	4313      	orrs	r3, r2
 800507c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800507e:	4b22      	ldr	r3, [pc, #136]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	4a21      	ldr	r2, [pc, #132]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 8005084:	f023 0301 	bic.w	r3, r3, #1
 8005088:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800508a:	4b1f      	ldr	r3, [pc, #124]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 800508c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800508e:	4b21      	ldr	r3, [pc, #132]	; (8005114 <HAL_RCC_OscConfig+0x778>)
 8005090:	4013      	ands	r3, r2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005096:	00d2      	lsls	r2, r2, #3
 8005098:	491b      	ldr	r1, [pc, #108]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 800509a:	4313      	orrs	r3, r2
 800509c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800509e:	4b1a      	ldr	r3, [pc, #104]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 80050a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a2:	f023 020c 	bic.w	r2, r3, #12
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	4917      	ldr	r1, [pc, #92]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80050b0:	4b15      	ldr	r3, [pc, #84]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	f023 0202 	bic.w	r2, r3, #2
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050bc:	4912      	ldr	r1, [pc, #72]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050c2:	4b11      	ldr	r3, [pc, #68]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c6:	4a10      	ldr	r2, [pc, #64]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 80050c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050ce:	4b0e      	ldr	r3, [pc, #56]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 80050d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d2:	4a0d      	ldr	r2, [pc, #52]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 80050d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80050da:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 80050e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80050e6:	4b08      	ldr	r3, [pc, #32]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 80050e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ea:	4a07      	ldr	r2, [pc, #28]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 80050ec:	f043 0301 	orr.w	r3, r3, #1
 80050f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050f2:	4b05      	ldr	r3, [pc, #20]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a04      	ldr	r2, [pc, #16]	; (8005108 <HAL_RCC_OscConfig+0x76c>)
 80050f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fe:	f7fc f8c5 	bl	800128c <HAL_GetTick>
 8005102:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005104:	e011      	b.n	800512a <HAL_RCC_OscConfig+0x78e>
 8005106:	bf00      	nop
 8005108:	58024400 	.word	0x58024400
 800510c:	58024800 	.word	0x58024800
 8005110:	fffffc0c 	.word	0xfffffc0c
 8005114:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005118:	f7fc f8b8 	bl	800128c <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e05f      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800512a:	4b32      	ldr	r3, [pc, #200]	; (80051f4 <HAL_RCC_OscConfig+0x858>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0f0      	beq.n	8005118 <HAL_RCC_OscConfig+0x77c>
 8005136:	e057      	b.n	80051e8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005138:	4b2e      	ldr	r3, [pc, #184]	; (80051f4 <HAL_RCC_OscConfig+0x858>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a2d      	ldr	r2, [pc, #180]	; (80051f4 <HAL_RCC_OscConfig+0x858>)
 800513e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005144:	f7fc f8a2 	bl	800128c <HAL_GetTick>
 8005148:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800514c:	f7fc f89e 	bl	800128c <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e045      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800515e:	4b25      	ldr	r3, [pc, #148]	; (80051f4 <HAL_RCC_OscConfig+0x858>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f0      	bne.n	800514c <HAL_RCC_OscConfig+0x7b0>
 800516a:	e03d      	b.n	80051e8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800516c:	4b21      	ldr	r3, [pc, #132]	; (80051f4 <HAL_RCC_OscConfig+0x858>)
 800516e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005170:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005172:	4b20      	ldr	r3, [pc, #128]	; (80051f4 <HAL_RCC_OscConfig+0x858>)
 8005174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005176:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	2b01      	cmp	r3, #1
 800517e:	d031      	beq.n	80051e4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f003 0203 	and.w	r2, r3, #3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800518a:	429a      	cmp	r2, r3
 800518c:	d12a      	bne.n	80051e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	091b      	lsrs	r3, r3, #4
 8005192:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800519a:	429a      	cmp	r2, r3
 800519c:	d122      	bne.n	80051e4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d11a      	bne.n	80051e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	0a5b      	lsrs	r3, r3, #9
 80051b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051bc:	429a      	cmp	r2, r3
 80051be:	d111      	bne.n	80051e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	0c1b      	lsrs	r3, r3, #16
 80051c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d108      	bne.n	80051e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	0e1b      	lsrs	r3, r3, #24
 80051d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d001      	beq.n	80051e8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3730      	adds	r7, #48	; 0x30
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	58024400 	.word	0x58024400

080051f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e19c      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800520c:	4b8a      	ldr	r3, [pc, #552]	; (8005438 <HAL_RCC_ClockConfig+0x240>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 030f 	and.w	r3, r3, #15
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d910      	bls.n	800523c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521a:	4b87      	ldr	r3, [pc, #540]	; (8005438 <HAL_RCC_ClockConfig+0x240>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 020f 	bic.w	r2, r3, #15
 8005222:	4985      	ldr	r1, [pc, #532]	; (8005438 <HAL_RCC_ClockConfig+0x240>)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	4313      	orrs	r3, r2
 8005228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800522a:	4b83      	ldr	r3, [pc, #524]	; (8005438 <HAL_RCC_ClockConfig+0x240>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d001      	beq.n	800523c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e184      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d010      	beq.n	800526a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691a      	ldr	r2, [r3, #16]
 800524c:	4b7b      	ldr	r3, [pc, #492]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005254:	429a      	cmp	r2, r3
 8005256:	d908      	bls.n	800526a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005258:	4b78      	ldr	r3, [pc, #480]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	4975      	ldr	r1, [pc, #468]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 8005266:	4313      	orrs	r3, r2
 8005268:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b00      	cmp	r3, #0
 8005274:	d010      	beq.n	8005298 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695a      	ldr	r2, [r3, #20]
 800527a:	4b70      	ldr	r3, [pc, #448]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005282:	429a      	cmp	r2, r3
 8005284:	d908      	bls.n	8005298 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005286:	4b6d      	ldr	r3, [pc, #436]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	496a      	ldr	r1, [pc, #424]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 8005294:	4313      	orrs	r3, r2
 8005296:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d010      	beq.n	80052c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699a      	ldr	r2, [r3, #24]
 80052a8:	4b64      	ldr	r3, [pc, #400]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d908      	bls.n	80052c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052b4:	4b61      	ldr	r3, [pc, #388]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	495e      	ldr	r1, [pc, #376]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d010      	beq.n	80052f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69da      	ldr	r2, [r3, #28]
 80052d6:	4b59      	ldr	r3, [pc, #356]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052de:	429a      	cmp	r2, r3
 80052e0:	d908      	bls.n	80052f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80052e2:	4b56      	ldr	r3, [pc, #344]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	4953      	ldr	r1, [pc, #332]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d010      	beq.n	8005322 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	4b4d      	ldr	r3, [pc, #308]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	429a      	cmp	r2, r3
 800530e:	d908      	bls.n	8005322 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005310:	4b4a      	ldr	r3, [pc, #296]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	f023 020f 	bic.w	r2, r3, #15
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	4947      	ldr	r1, [pc, #284]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 800531e:	4313      	orrs	r3, r2
 8005320:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d055      	beq.n	80053da <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800532e:	4b43      	ldr	r3, [pc, #268]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	4940      	ldr	r1, [pc, #256]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 800533c:	4313      	orrs	r3, r2
 800533e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d107      	bne.n	8005358 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005348:	4b3c      	ldr	r3, [pc, #240]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d121      	bne.n	8005398 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0f6      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2b03      	cmp	r3, #3
 800535e:	d107      	bne.n	8005370 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005360:	4b36      	ldr	r3, [pc, #216]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d115      	bne.n	8005398 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e0ea      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d107      	bne.n	8005388 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005378:	4b30      	ldr	r3, [pc, #192]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d109      	bne.n	8005398 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0de      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005388:	4b2c      	ldr	r3, [pc, #176]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e0d6      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005398:	4b28      	ldr	r3, [pc, #160]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f023 0207 	bic.w	r2, r3, #7
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	4925      	ldr	r1, [pc, #148]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053aa:	f7fb ff6f 	bl	800128c <HAL_GetTick>
 80053ae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b0:	e00a      	b.n	80053c8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053b2:	f7fb ff6b 	bl	800128c <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e0be      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053c8:	4b1c      	ldr	r3, [pc, #112]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d1eb      	bne.n	80053b2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d010      	beq.n	8005408 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	4b14      	ldr	r3, [pc, #80]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d208      	bcs.n	8005408 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f6:	4b11      	ldr	r3, [pc, #68]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	f023 020f 	bic.w	r2, r3, #15
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	490e      	ldr	r1, [pc, #56]	; (800543c <HAL_RCC_ClockConfig+0x244>)
 8005404:	4313      	orrs	r3, r2
 8005406:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005408:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <HAL_RCC_ClockConfig+0x240>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	429a      	cmp	r2, r3
 8005414:	d214      	bcs.n	8005440 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005416:	4b08      	ldr	r3, [pc, #32]	; (8005438 <HAL_RCC_ClockConfig+0x240>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f023 020f 	bic.w	r2, r3, #15
 800541e:	4906      	ldr	r1, [pc, #24]	; (8005438 <HAL_RCC_ClockConfig+0x240>)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	4313      	orrs	r3, r2
 8005424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005426:	4b04      	ldr	r3, [pc, #16]	; (8005438 <HAL_RCC_ClockConfig+0x240>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	429a      	cmp	r2, r3
 8005432:	d005      	beq.n	8005440 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e086      	b.n	8005546 <HAL_RCC_ClockConfig+0x34e>
 8005438:	52002000 	.word	0x52002000
 800543c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d010      	beq.n	800546e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	4b3f      	ldr	r3, [pc, #252]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005458:	429a      	cmp	r2, r3
 800545a:	d208      	bcs.n	800546e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800545c:	4b3c      	ldr	r3, [pc, #240]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	4939      	ldr	r1, [pc, #228]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 800546a:	4313      	orrs	r3, r2
 800546c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d010      	beq.n	800549c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	4b34      	ldr	r3, [pc, #208]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005486:	429a      	cmp	r2, r3
 8005488:	d208      	bcs.n	800549c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800548a:	4b31      	ldr	r3, [pc, #196]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	492e      	ldr	r1, [pc, #184]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 8005498:	4313      	orrs	r3, r2
 800549a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d010      	beq.n	80054ca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699a      	ldr	r2, [r3, #24]
 80054ac:	4b28      	ldr	r3, [pc, #160]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d208      	bcs.n	80054ca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054b8:	4b25      	ldr	r3, [pc, #148]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	4922      	ldr	r1, [pc, #136]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d010      	beq.n	80054f8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69da      	ldr	r2, [r3, #28]
 80054da:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d208      	bcs.n	80054f8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80054e6:	4b1a      	ldr	r3, [pc, #104]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	4917      	ldr	r1, [pc, #92]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80054f8:	f000 f834 	bl	8005564 <HAL_RCC_GetSysClockFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b14      	ldr	r3, [pc, #80]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	0a1b      	lsrs	r3, r3, #8
 8005504:	f003 030f 	and.w	r3, r3, #15
 8005508:	4912      	ldr	r1, [pc, #72]	; (8005554 <HAL_RCC_ClockConfig+0x35c>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	f003 031f 	and.w	r3, r3, #31
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
 8005514:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005516:	4b0e      	ldr	r3, [pc, #56]	; (8005550 <HAL_RCC_ClockConfig+0x358>)
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	4a0d      	ldr	r2, [pc, #52]	; (8005554 <HAL_RCC_ClockConfig+0x35c>)
 8005520:	5cd3      	ldrb	r3, [r2, r3]
 8005522:	f003 031f 	and.w	r3, r3, #31
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	fa22 f303 	lsr.w	r3, r2, r3
 800552c:	4a0a      	ldr	r2, [pc, #40]	; (8005558 <HAL_RCC_ClockConfig+0x360>)
 800552e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005530:	4a0a      	ldr	r2, [pc, #40]	; (800555c <HAL_RCC_ClockConfig+0x364>)
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005536:	4b0a      	ldr	r3, [pc, #40]	; (8005560 <HAL_RCC_ClockConfig+0x368>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4618      	mov	r0, r3
 800553c:	f7fb fe5c 	bl	80011f8 <HAL_InitTick>
 8005540:	4603      	mov	r3, r0
 8005542:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005544:	7bfb      	ldrb	r3, [r7, #15]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	58024400 	.word	0x58024400
 8005554:	0800904c 	.word	0x0800904c
 8005558:	24000004 	.word	0x24000004
 800555c:	24000000 	.word	0x24000000
 8005560:	24000008 	.word	0x24000008

08005564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005564:	b480      	push	{r7}
 8005566:	b089      	sub	sp, #36	; 0x24
 8005568:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800556a:	4bb3      	ldr	r3, [pc, #716]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005572:	2b18      	cmp	r3, #24
 8005574:	f200 8155 	bhi.w	8005822 <HAL_RCC_GetSysClockFreq+0x2be>
 8005578:	a201      	add	r2, pc, #4	; (adr r2, 8005580 <HAL_RCC_GetSysClockFreq+0x1c>)
 800557a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557e:	bf00      	nop
 8005580:	080055e5 	.word	0x080055e5
 8005584:	08005823 	.word	0x08005823
 8005588:	08005823 	.word	0x08005823
 800558c:	08005823 	.word	0x08005823
 8005590:	08005823 	.word	0x08005823
 8005594:	08005823 	.word	0x08005823
 8005598:	08005823 	.word	0x08005823
 800559c:	08005823 	.word	0x08005823
 80055a0:	0800560b 	.word	0x0800560b
 80055a4:	08005823 	.word	0x08005823
 80055a8:	08005823 	.word	0x08005823
 80055ac:	08005823 	.word	0x08005823
 80055b0:	08005823 	.word	0x08005823
 80055b4:	08005823 	.word	0x08005823
 80055b8:	08005823 	.word	0x08005823
 80055bc:	08005823 	.word	0x08005823
 80055c0:	08005611 	.word	0x08005611
 80055c4:	08005823 	.word	0x08005823
 80055c8:	08005823 	.word	0x08005823
 80055cc:	08005823 	.word	0x08005823
 80055d0:	08005823 	.word	0x08005823
 80055d4:	08005823 	.word	0x08005823
 80055d8:	08005823 	.word	0x08005823
 80055dc:	08005823 	.word	0x08005823
 80055e0:	08005617 	.word	0x08005617
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055e4:	4b94      	ldr	r3, [pc, #592]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0320 	and.w	r3, r3, #32
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d009      	beq.n	8005604 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055f0:	4b91      	ldr	r3, [pc, #580]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	08db      	lsrs	r3, r3, #3
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	4a90      	ldr	r2, [pc, #576]	; (800583c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005600:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005602:	e111      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005604:	4b8d      	ldr	r3, [pc, #564]	; (800583c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005606:	61bb      	str	r3, [r7, #24]
    break;
 8005608:	e10e      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800560a:	4b8d      	ldr	r3, [pc, #564]	; (8005840 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800560c:	61bb      	str	r3, [r7, #24]
    break;
 800560e:	e10b      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005610:	4b8c      	ldr	r3, [pc, #560]	; (8005844 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005612:	61bb      	str	r3, [r7, #24]
    break;
 8005614:	e108      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005616:	4b88      	ldr	r3, [pc, #544]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005620:	4b85      	ldr	r3, [pc, #532]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	091b      	lsrs	r3, r3, #4
 8005626:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800562a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800562c:	4b82      	ldr	r3, [pc, #520]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005636:	4b80      	ldr	r3, [pc, #512]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563a:	08db      	lsrs	r3, r3, #3
 800563c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	fb02 f303 	mul.w	r3, r2, r3
 8005646:	ee07 3a90 	vmov	s15, r3
 800564a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 80e1 	beq.w	800581c <HAL_RCC_GetSysClockFreq+0x2b8>
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b02      	cmp	r3, #2
 800565e:	f000 8083 	beq.w	8005768 <HAL_RCC_GetSysClockFreq+0x204>
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b02      	cmp	r3, #2
 8005666:	f200 80a1 	bhi.w	80057ac <HAL_RCC_GetSysClockFreq+0x248>
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_RCC_GetSysClockFreq+0x114>
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d056      	beq.n	8005724 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005676:	e099      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005678:	4b6f      	ldr	r3, [pc, #444]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d02d      	beq.n	80056e0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005684:	4b6c      	ldr	r3, [pc, #432]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	08db      	lsrs	r3, r3, #3
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	4a6b      	ldr	r2, [pc, #428]	; (800583c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
 8005694:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	ee07 3a90 	vmov	s15, r3
 800569c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ae:	4b62      	ldr	r3, [pc, #392]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056be:	ed97 6a02 	vldr	s12, [r7, #8]
 80056c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005848 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80056de:	e087      	b.n	80057f0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 800584c <HAL_RCC_GetSysClockFreq+0x2e8>
 80056ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f2:	4b51      	ldr	r3, [pc, #324]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005702:	ed97 6a02 	vldr	s12, [r7, #8]
 8005706:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005848 <HAL_RCC_GetSysClockFreq+0x2e4>
 800570a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800570e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800571a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005722:	e065      	b.n	80057f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005850 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005736:	4b40      	ldr	r3, [pc, #256]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005746:	ed97 6a02 	vldr	s12, [r7, #8]
 800574a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005848 <HAL_RCC_GetSysClockFreq+0x2e4>
 800574e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800575a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800575e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005766:	e043      	b.n	80057f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	ee07 3a90 	vmov	s15, r3
 800576e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005772:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005854 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800577a:	4b2f      	ldr	r3, [pc, #188]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800578a:	ed97 6a02 	vldr	s12, [r7, #8]
 800578e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005848 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800579e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057aa:	e021      	b.n	80057f0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005850 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057be:	4b1e      	ldr	r3, [pc, #120]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80057d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005848 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057ee:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80057f0:	4b11      	ldr	r3, [pc, #68]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f4:	0a5b      	lsrs	r3, r3, #9
 80057f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057fa:	3301      	adds	r3, #1
 80057fc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	ee07 3a90 	vmov	s15, r3
 8005804:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005808:	edd7 6a07 	vldr	s13, [r7, #28]
 800580c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005814:	ee17 3a90 	vmov	r3, s15
 8005818:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800581a:	e005      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	61bb      	str	r3, [r7, #24]
    break;
 8005820:	e002      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005822:	4b07      	ldr	r3, [pc, #28]	; (8005840 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005824:	61bb      	str	r3, [r7, #24]
    break;
 8005826:	bf00      	nop
  }

  return sysclockfreq;
 8005828:	69bb      	ldr	r3, [r7, #24]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3724      	adds	r7, #36	; 0x24
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	58024400 	.word	0x58024400
 800583c:	03d09000 	.word	0x03d09000
 8005840:	003d0900 	.word	0x003d0900
 8005844:	007a1200 	.word	0x007a1200
 8005848:	46000000 	.word	0x46000000
 800584c:	4c742400 	.word	0x4c742400
 8005850:	4a742400 	.word	0x4a742400
 8005854:	4af42400 	.word	0x4af42400

08005858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800585e:	f7ff fe81 	bl	8005564 <HAL_RCC_GetSysClockFreq>
 8005862:	4602      	mov	r2, r0
 8005864:	4b10      	ldr	r3, [pc, #64]	; (80058a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	0a1b      	lsrs	r3, r3, #8
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	490f      	ldr	r1, [pc, #60]	; (80058ac <HAL_RCC_GetHCLKFreq+0x54>)
 8005870:	5ccb      	ldrb	r3, [r1, r3]
 8005872:	f003 031f 	and.w	r3, r3, #31
 8005876:	fa22 f303 	lsr.w	r3, r2, r3
 800587a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800587c:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	4a09      	ldr	r2, [pc, #36]	; (80058ac <HAL_RCC_GetHCLKFreq+0x54>)
 8005886:	5cd3      	ldrb	r3, [r2, r3]
 8005888:	f003 031f 	and.w	r3, r3, #31
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	fa22 f303 	lsr.w	r3, r2, r3
 8005892:	4a07      	ldr	r2, [pc, #28]	; (80058b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005894:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005896:	4a07      	ldr	r2, [pc, #28]	; (80058b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800589c:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800589e:	681b      	ldr	r3, [r3, #0]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	58024400 	.word	0x58024400
 80058ac:	0800904c 	.word	0x0800904c
 80058b0:	24000004 	.word	0x24000004
 80058b4:	24000000 	.word	0x24000000

080058b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80058bc:	f7ff ffcc 	bl	8005858 <HAL_RCC_GetHCLKFreq>
 80058c0:	4602      	mov	r2, r0
 80058c2:	4b06      	ldr	r3, [pc, #24]	; (80058dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	091b      	lsrs	r3, r3, #4
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	4904      	ldr	r1, [pc, #16]	; (80058e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058ce:	5ccb      	ldrb	r3, [r1, r3]
 80058d0:	f003 031f 	and.w	r3, r3, #31
 80058d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80058d8:	4618      	mov	r0, r3
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	58024400 	.word	0x58024400
 80058e0:	0800904c 	.word	0x0800904c

080058e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80058e8:	f7ff ffb6 	bl	8005858 <HAL_RCC_GetHCLKFreq>
 80058ec:	4602      	mov	r2, r0
 80058ee:	4b06      	ldr	r3, [pc, #24]	; (8005908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	0a1b      	lsrs	r3, r3, #8
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	4904      	ldr	r1, [pc, #16]	; (800590c <HAL_RCC_GetPCLK2Freq+0x28>)
 80058fa:	5ccb      	ldrb	r3, [r1, r3]
 80058fc:	f003 031f 	and.w	r3, r3, #31
 8005900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005904:	4618      	mov	r0, r3
 8005906:	bd80      	pop	{r7, pc}
 8005908:	58024400 	.word	0x58024400
 800590c:	0800904c 	.word	0x0800904c

08005910 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005918:	2300      	movs	r3, #0
 800591a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800591c:	2300      	movs	r3, #0
 800591e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d03f      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005930:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005934:	d02a      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005936:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800593a:	d824      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800593c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005940:	d018      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005942:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005946:	d81e      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800594c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005950:	d007      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005952:	e018      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005954:	4ba3      	ldr	r3, [pc, #652]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005958:	4aa2      	ldr	r2, [pc, #648]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800595a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800595e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005960:	e015      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3304      	adds	r3, #4
 8005966:	2102      	movs	r1, #2
 8005968:	4618      	mov	r0, r3
 800596a:	f001 f9d5 	bl	8006d18 <RCCEx_PLL2_Config>
 800596e:	4603      	mov	r3, r0
 8005970:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005972:	e00c      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3324      	adds	r3, #36	; 0x24
 8005978:	2102      	movs	r1, #2
 800597a:	4618      	mov	r0, r3
 800597c:	f001 fa7e 	bl	8006e7c <RCCEx_PLL3_Config>
 8005980:	4603      	mov	r3, r0
 8005982:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005984:	e003      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	75fb      	strb	r3, [r7, #23]
      break;
 800598a:	e000      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800598c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d109      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005994:	4b93      	ldr	r3, [pc, #588]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005998:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a0:	4990      	ldr	r1, [pc, #576]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	650b      	str	r3, [r1, #80]	; 0x50
 80059a6:	e001      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a8:	7dfb      	ldrb	r3, [r7, #23]
 80059aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d03d      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d826      	bhi.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80059c0:	a201      	add	r2, pc, #4	; (adr r2, 80059c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80059c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c6:	bf00      	nop
 80059c8:	080059dd 	.word	0x080059dd
 80059cc:	080059eb 	.word	0x080059eb
 80059d0:	080059fd 	.word	0x080059fd
 80059d4:	08005a15 	.word	0x08005a15
 80059d8:	08005a15 	.word	0x08005a15
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059dc:	4b81      	ldr	r3, [pc, #516]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	4a80      	ldr	r2, [pc, #512]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059e8:	e015      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	3304      	adds	r3, #4
 80059ee:	2100      	movs	r1, #0
 80059f0:	4618      	mov	r0, r3
 80059f2:	f001 f991 	bl	8006d18 <RCCEx_PLL2_Config>
 80059f6:	4603      	mov	r3, r0
 80059f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059fa:	e00c      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3324      	adds	r3, #36	; 0x24
 8005a00:	2100      	movs	r1, #0
 8005a02:	4618      	mov	r0, r3
 8005a04:	f001 fa3a 	bl	8006e7c <RCCEx_PLL3_Config>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a0c:	e003      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	75fb      	strb	r3, [r7, #23]
      break;
 8005a12:	e000      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005a14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a16:	7dfb      	ldrb	r3, [r7, #23]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d109      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a1c:	4b71      	ldr	r3, [pc, #452]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a20:	f023 0207 	bic.w	r2, r3, #7
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a28:	496e      	ldr	r1, [pc, #440]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	650b      	str	r3, [r1, #80]	; 0x50
 8005a2e:	e001      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a30:	7dfb      	ldrb	r3, [r7, #23]
 8005a32:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d042      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a48:	d02b      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a4e:	d825      	bhi.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005a50:	2bc0      	cmp	r3, #192	; 0xc0
 8005a52:	d028      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005a54:	2bc0      	cmp	r3, #192	; 0xc0
 8005a56:	d821      	bhi.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005a58:	2b80      	cmp	r3, #128	; 0x80
 8005a5a:	d016      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005a5c:	2b80      	cmp	r3, #128	; 0x80
 8005a5e:	d81d      	bhi.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005a64:	2b40      	cmp	r3, #64	; 0x40
 8005a66:	d007      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005a68:	e018      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a6a:	4b5e      	ldr	r3, [pc, #376]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6e:	4a5d      	ldr	r2, [pc, #372]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a76:	e017      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f001 f94a 	bl	8006d18 <RCCEx_PLL2_Config>
 8005a84:	4603      	mov	r3, r0
 8005a86:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a88:	e00e      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	3324      	adds	r3, #36	; 0x24
 8005a8e:	2100      	movs	r1, #0
 8005a90:	4618      	mov	r0, r3
 8005a92:	f001 f9f3 	bl	8006e7c <RCCEx_PLL3_Config>
 8005a96:	4603      	mov	r3, r0
 8005a98:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a9a:	e005      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa0:	e002      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005aa2:	bf00      	nop
 8005aa4:	e000      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005aa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aa8:	7dfb      	ldrb	r3, [r7, #23]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d109      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005aae:	4b4d      	ldr	r3, [pc, #308]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aba:	494a      	ldr	r1, [pc, #296]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	650b      	str	r3, [r1, #80]	; 0x50
 8005ac0:	e001      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac2:	7dfb      	ldrb	r3, [r7, #23]
 8005ac4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d049      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ad8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005adc:	d030      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005ade:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ae2:	d82a      	bhi.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005ae4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005ae8:	d02c      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005aea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005aee:	d824      	bhi.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005af4:	d018      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005afa:	d81e      	bhi.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005b00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b04:	d007      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005b06:	e018      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b08:	4b36      	ldr	r3, [pc, #216]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	4a35      	ldr	r2, [pc, #212]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b14:	e017      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f001 f8fb 	bl	8006d18 <RCCEx_PLL2_Config>
 8005b22:	4603      	mov	r3, r0
 8005b24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b26:	e00e      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3324      	adds	r3, #36	; 0x24
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f001 f9a4 	bl	8006e7c <RCCEx_PLL3_Config>
 8005b34:	4603      	mov	r3, r0
 8005b36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b38:	e005      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b3e:	e002      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005b40:	bf00      	nop
 8005b42:	e000      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b46:	7dfb      	ldrb	r3, [r7, #23]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10a      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005b4c:	4b25      	ldr	r3, [pc, #148]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b50:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b5a:	4922      	ldr	r1, [pc, #136]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	658b      	str	r3, [r1, #88]	; 0x58
 8005b60:	e001      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b62:	7dfb      	ldrb	r3, [r7, #23]
 8005b64:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d04b      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b7c:	d030      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005b7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b82:	d82a      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005b84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b88:	d02e      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005b8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b8e:	d824      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005b90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b94:	d018      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005b96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b9a:	d81e      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ba4:	d007      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005ba6:	e018      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ba8:	4b0e      	ldr	r3, [pc, #56]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	4a0d      	ldr	r2, [pc, #52]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bb4:	e019      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	2100      	movs	r1, #0
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f001 f8ab 	bl	8006d18 <RCCEx_PLL2_Config>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005bc6:	e010      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3324      	adds	r3, #36	; 0x24
 8005bcc:	2100      	movs	r1, #0
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 f954 	bl	8006e7c <RCCEx_PLL3_Config>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bd8:	e007      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	75fb      	strb	r3, [r7, #23]
      break;
 8005bde:	e004      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005be0:	bf00      	nop
 8005be2:	e002      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005be4:	58024400 	.word	0x58024400
      break;
 8005be8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10a      	bne.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005bf0:	4b99      	ldr	r3, [pc, #612]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005bfe:	4996      	ldr	r1, [pc, #600]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	658b      	str	r3, [r1, #88]	; 0x58
 8005c04:	e001      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c06:	7dfb      	ldrb	r3, [r7, #23]
 8005c08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d032      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c1a:	2b30      	cmp	r3, #48	; 0x30
 8005c1c:	d01c      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005c1e:	2b30      	cmp	r3, #48	; 0x30
 8005c20:	d817      	bhi.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005c22:	2b20      	cmp	r3, #32
 8005c24:	d00c      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005c26:	2b20      	cmp	r3, #32
 8005c28:	d813      	bhi.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d016      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005c2e:	2b10      	cmp	r3, #16
 8005c30:	d10f      	bne.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c32:	4b89      	ldr	r3, [pc, #548]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c36:	4a88      	ldr	r2, [pc, #544]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005c3e:	e00e      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3304      	adds	r3, #4
 8005c44:	2102      	movs	r1, #2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f001 f866 	bl	8006d18 <RCCEx_PLL2_Config>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005c50:	e005      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	75fb      	strb	r3, [r7, #23]
      break;
 8005c56:	e002      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005c58:	bf00      	nop
 8005c5a:	e000      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005c5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c5e:	7dfb      	ldrb	r3, [r7, #23]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d109      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c64:	4b7c      	ldr	r3, [pc, #496]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c70:	4979      	ldr	r1, [pc, #484]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005c76:	e001      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
 8005c7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d047      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c90:	d030      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005c92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c96:	d82a      	bhi.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005c98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c9c:	d02c      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005c9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ca2:	d824      	bhi.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ca8:	d018      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cae:	d81e      	bhi.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb8:	d007      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005cba:	e018      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cbc:	4b66      	ldr	r3, [pc, #408]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	4a65      	ldr	r2, [pc, #404]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005cc8:	e017      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	2100      	movs	r1, #0
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f001 f821 	bl	8006d18 <RCCEx_PLL2_Config>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005cda:	e00e      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3324      	adds	r3, #36	; 0x24
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f001 f8ca 	bl	8006e7c <RCCEx_PLL3_Config>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005cec:	e005      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8005cf2:	e002      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005cf4:	bf00      	nop
 8005cf6:	e000      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005cf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cfa:	7dfb      	ldrb	r3, [r7, #23]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d109      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d00:	4b55      	ldr	r3, [pc, #340]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d04:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d0c:	4952      	ldr	r1, [pc, #328]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	650b      	str	r3, [r1, #80]	; 0x50
 8005d12:	e001      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d14:	7dfb      	ldrb	r3, [r7, #23]
 8005d16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d049      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d2c:	d02e      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005d2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d32:	d828      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005d34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d38:	d02a      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005d3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d3e:	d822      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005d40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d44:	d026      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005d46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d4a:	d81c      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005d4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d50:	d010      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005d52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d56:	d816      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01d      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d60:	d111      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	3304      	adds	r3, #4
 8005d66:	2101      	movs	r1, #1
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 ffd5 	bl	8006d18 <RCCEx_PLL2_Config>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005d72:	e012      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3324      	adds	r3, #36	; 0x24
 8005d78:	2101      	movs	r1, #1
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f001 f87e 	bl	8006e7c <RCCEx_PLL3_Config>
 8005d80:	4603      	mov	r3, r0
 8005d82:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005d84:	e009      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	75fb      	strb	r3, [r7, #23]
      break;
 8005d8a:	e006      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005d8c:	bf00      	nop
 8005d8e:	e004      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005d90:	bf00      	nop
 8005d92:	e002      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005d94:	bf00      	nop
 8005d96:	e000      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d9a:	7dfb      	ldrb	r3, [r7, #23]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d109      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005da0:	4b2d      	ldr	r3, [pc, #180]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dac:	492a      	ldr	r1, [pc, #168]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	650b      	str	r3, [r1, #80]	; 0x50
 8005db2:	e001      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
 8005db6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d04d      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dce:	d02e      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dd4:	d828      	bhi.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dda:	d02a      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de0:	d822      	bhi.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005de2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005de6:	d026      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005de8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dec:	d81c      	bhi.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005df2:	d010      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005df8:	d816      	bhi.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d01d      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e02:	d111      	bne.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3304      	adds	r3, #4
 8005e08:	2101      	movs	r1, #1
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 ff84 	bl	8006d18 <RCCEx_PLL2_Config>
 8005e10:	4603      	mov	r3, r0
 8005e12:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005e14:	e012      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	3324      	adds	r3, #36	; 0x24
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f001 f82d 	bl	8006e7c <RCCEx_PLL3_Config>
 8005e22:	4603      	mov	r3, r0
 8005e24:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005e26:	e009      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e2c:	e006      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005e2e:	bf00      	nop
 8005e30:	e004      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005e32:	bf00      	nop
 8005e34:	e002      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005e36:	bf00      	nop
 8005e38:	e000      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005e3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10c      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005e42:	4b05      	ldr	r3, [pc, #20]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e46:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e50:	4901      	ldr	r1, [pc, #4]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	658b      	str	r3, [r1, #88]	; 0x58
 8005e56:	e003      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005e58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e5c:	7dfb      	ldrb	r3, [r7, #23]
 8005e5e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d02f      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e74:	d00e      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e7a:	d814      	bhi.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d015      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005e80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e84:	d10f      	bne.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e86:	4baf      	ldr	r3, [pc, #700]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	4aae      	ldr	r2, [pc, #696]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005e92:	e00c      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3304      	adds	r3, #4
 8005e98:	2101      	movs	r1, #1
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 ff3c 	bl	8006d18 <RCCEx_PLL2_Config>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005ea4:	e003      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8005eaa:	e000      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d109      	bne.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005eb4:	4ba3      	ldr	r3, [pc, #652]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ec0:	49a0      	ldr	r1, [pc, #640]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	650b      	str	r3, [r1, #80]	; 0x50
 8005ec6:	e001      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
 8005eca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d032      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d81b      	bhi.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005ee0:	a201      	add	r2, pc, #4	; (adr r2, 8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee6:	bf00      	nop
 8005ee8:	08005f1f 	.word	0x08005f1f
 8005eec:	08005ef9 	.word	0x08005ef9
 8005ef0:	08005f07 	.word	0x08005f07
 8005ef4:	08005f1f 	.word	0x08005f1f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ef8:	4b92      	ldr	r3, [pc, #584]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	4a91      	ldr	r2, [pc, #580]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005f04:	e00c      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	3304      	adds	r3, #4
 8005f0a:	2102      	movs	r1, #2
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 ff03 	bl	8006d18 <RCCEx_PLL2_Config>
 8005f12:	4603      	mov	r3, r0
 8005f14:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005f16:	e003      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f1c:	e000      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f20:	7dfb      	ldrb	r3, [r7, #23]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d109      	bne.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f26:	4b87      	ldr	r3, [pc, #540]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2a:	f023 0203 	bic.w	r2, r3, #3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f32:	4984      	ldr	r1, [pc, #528]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f38:	e001      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
 8005f3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 8086 	beq.w	8006058 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f4c:	4b7e      	ldr	r3, [pc, #504]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a7d      	ldr	r2, [pc, #500]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f58:	f7fb f998 	bl	800128c <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f5e:	e009      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f60:	f7fb f994 	bl	800128c <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b64      	cmp	r3, #100	; 0x64
 8005f6c:	d902      	bls.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	75fb      	strb	r3, [r7, #23]
        break;
 8005f72:	e005      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f74:	4b74      	ldr	r3, [pc, #464]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d0ef      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005f80:	7dfb      	ldrb	r3, [r7, #23]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d166      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f86:	4b6f      	ldr	r3, [pc, #444]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f90:	4053      	eors	r3, r2
 8005f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d013      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f9a:	4b6a      	ldr	r3, [pc, #424]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fa2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fa4:	4b67      	ldr	r3, [pc, #412]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa8:	4a66      	ldr	r2, [pc, #408]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fb0:	4b64      	ldr	r3, [pc, #400]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb4:	4a63      	ldr	r2, [pc, #396]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005fbc:	4a61      	ldr	r2, [pc, #388]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fcc:	d115      	bne.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fce:	f7fb f95d 	bl	800128c <HAL_GetTick>
 8005fd2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fd4:	e00b      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fd6:	f7fb f959 	bl	800128c <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d902      	bls.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	75fb      	strb	r3, [r7, #23]
            break;
 8005fec:	e005      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fee:	4b55      	ldr	r3, [pc, #340]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0ed      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005ffa:	7dfb      	ldrb	r3, [r7, #23]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d126      	bne.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800600a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800600e:	d10d      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006010:	4b4c      	ldr	r3, [pc, #304]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800601e:	0919      	lsrs	r1, r3, #4
 8006020:	4b4a      	ldr	r3, [pc, #296]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006022:	400b      	ands	r3, r1
 8006024:	4947      	ldr	r1, [pc, #284]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006026:	4313      	orrs	r3, r2
 8006028:	610b      	str	r3, [r1, #16]
 800602a:	e005      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800602c:	4b45      	ldr	r3, [pc, #276]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	4a44      	ldr	r2, [pc, #272]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006032:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006036:	6113      	str	r3, [r2, #16]
 8006038:	4b42      	ldr	r3, [pc, #264]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800603a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006046:	493f      	ldr	r1, [pc, #252]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006048:	4313      	orrs	r3, r2
 800604a:	670b      	str	r3, [r1, #112]	; 0x70
 800604c:	e004      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800604e:	7dfb      	ldrb	r3, [r7, #23]
 8006050:	75bb      	strb	r3, [r7, #22]
 8006052:	e001      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006054:	7dfb      	ldrb	r3, [r7, #23]
 8006056:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 8085 	beq.w	8006170 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800606a:	2b28      	cmp	r3, #40	; 0x28
 800606c:	d866      	bhi.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800606e:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	08006151 	.word	0x08006151
 8006078:	0800613d 	.word	0x0800613d
 800607c:	0800613d 	.word	0x0800613d
 8006080:	0800613d 	.word	0x0800613d
 8006084:	0800613d 	.word	0x0800613d
 8006088:	0800613d 	.word	0x0800613d
 800608c:	0800613d 	.word	0x0800613d
 8006090:	0800613d 	.word	0x0800613d
 8006094:	08006119 	.word	0x08006119
 8006098:	0800613d 	.word	0x0800613d
 800609c:	0800613d 	.word	0x0800613d
 80060a0:	0800613d 	.word	0x0800613d
 80060a4:	0800613d 	.word	0x0800613d
 80060a8:	0800613d 	.word	0x0800613d
 80060ac:	0800613d 	.word	0x0800613d
 80060b0:	0800613d 	.word	0x0800613d
 80060b4:	0800612b 	.word	0x0800612b
 80060b8:	0800613d 	.word	0x0800613d
 80060bc:	0800613d 	.word	0x0800613d
 80060c0:	0800613d 	.word	0x0800613d
 80060c4:	0800613d 	.word	0x0800613d
 80060c8:	0800613d 	.word	0x0800613d
 80060cc:	0800613d 	.word	0x0800613d
 80060d0:	0800613d 	.word	0x0800613d
 80060d4:	08006151 	.word	0x08006151
 80060d8:	0800613d 	.word	0x0800613d
 80060dc:	0800613d 	.word	0x0800613d
 80060e0:	0800613d 	.word	0x0800613d
 80060e4:	0800613d 	.word	0x0800613d
 80060e8:	0800613d 	.word	0x0800613d
 80060ec:	0800613d 	.word	0x0800613d
 80060f0:	0800613d 	.word	0x0800613d
 80060f4:	08006151 	.word	0x08006151
 80060f8:	0800613d 	.word	0x0800613d
 80060fc:	0800613d 	.word	0x0800613d
 8006100:	0800613d 	.word	0x0800613d
 8006104:	0800613d 	.word	0x0800613d
 8006108:	0800613d 	.word	0x0800613d
 800610c:	0800613d 	.word	0x0800613d
 8006110:	0800613d 	.word	0x0800613d
 8006114:	08006151 	.word	0x08006151
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3304      	adds	r3, #4
 800611c:	2101      	movs	r1, #1
 800611e:	4618      	mov	r0, r3
 8006120:	f000 fdfa 	bl	8006d18 <RCCEx_PLL2_Config>
 8006124:	4603      	mov	r3, r0
 8006126:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006128:	e013      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	3324      	adds	r3, #36	; 0x24
 800612e:	2101      	movs	r1, #1
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fea3 	bl	8006e7c <RCCEx_PLL3_Config>
 8006136:	4603      	mov	r3, r0
 8006138:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800613a:	e00a      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	75fb      	strb	r3, [r7, #23]
      break;
 8006140:	e007      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006142:	bf00      	nop
 8006144:	58024400 	.word	0x58024400
 8006148:	58024800 	.word	0x58024800
 800614c:	00ffffcf 	.word	0x00ffffcf
      break;
 8006150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006152:	7dfb      	ldrb	r3, [r7, #23]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d109      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006158:	4b96      	ldr	r3, [pc, #600]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800615a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006164:	4993      	ldr	r1, [pc, #588]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006166:	4313      	orrs	r3, r2
 8006168:	654b      	str	r3, [r1, #84]	; 0x54
 800616a:	e001      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800616c:	7dfb      	ldrb	r3, [r7, #23]
 800616e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d038      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006180:	2b05      	cmp	r3, #5
 8006182:	d821      	bhi.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006184:	a201      	add	r2, pc, #4	; (adr r2, 800618c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618a:	bf00      	nop
 800618c:	080061cf 	.word	0x080061cf
 8006190:	080061a5 	.word	0x080061a5
 8006194:	080061b7 	.word	0x080061b7
 8006198:	080061cf 	.word	0x080061cf
 800619c:	080061cf 	.word	0x080061cf
 80061a0:	080061cf 	.word	0x080061cf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3304      	adds	r3, #4
 80061a8:	2101      	movs	r1, #1
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fdb4 	bl	8006d18 <RCCEx_PLL2_Config>
 80061b0:	4603      	mov	r3, r0
 80061b2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80061b4:	e00c      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3324      	adds	r3, #36	; 0x24
 80061ba:	2101      	movs	r1, #1
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fe5d 	bl	8006e7c <RCCEx_PLL3_Config>
 80061c2:	4603      	mov	r3, r0
 80061c4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80061c6:	e003      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	75fb      	strb	r3, [r7, #23]
      break;
 80061cc:	e000      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80061ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061d0:	7dfb      	ldrb	r3, [r7, #23]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d109      	bne.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80061d6:	4b77      	ldr	r3, [pc, #476]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80061d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061da:	f023 0207 	bic.w	r2, r3, #7
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061e2:	4974      	ldr	r1, [pc, #464]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	654b      	str	r3, [r1, #84]	; 0x54
 80061e8:	e001      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ea:	7dfb      	ldrb	r3, [r7, #23]
 80061ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0304 	and.w	r3, r3, #4
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d03a      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006200:	2b05      	cmp	r3, #5
 8006202:	d821      	bhi.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006204:	a201      	add	r2, pc, #4	; (adr r2, 800620c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620a:	bf00      	nop
 800620c:	0800624f 	.word	0x0800624f
 8006210:	08006225 	.word	0x08006225
 8006214:	08006237 	.word	0x08006237
 8006218:	0800624f 	.word	0x0800624f
 800621c:	0800624f 	.word	0x0800624f
 8006220:	0800624f 	.word	0x0800624f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3304      	adds	r3, #4
 8006228:	2101      	movs	r1, #1
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fd74 	bl	8006d18 <RCCEx_PLL2_Config>
 8006230:	4603      	mov	r3, r0
 8006232:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006234:	e00c      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3324      	adds	r3, #36	; 0x24
 800623a:	2101      	movs	r1, #1
 800623c:	4618      	mov	r0, r3
 800623e:	f000 fe1d 	bl	8006e7c <RCCEx_PLL3_Config>
 8006242:	4603      	mov	r3, r0
 8006244:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006246:	e003      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	75fb      	strb	r3, [r7, #23]
      break;
 800624c:	e000      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800624e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006250:	7dfb      	ldrb	r3, [r7, #23]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10a      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006256:	4b57      	ldr	r3, [pc, #348]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625a:	f023 0207 	bic.w	r2, r3, #7
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006264:	4953      	ldr	r1, [pc, #332]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006266:	4313      	orrs	r3, r2
 8006268:	658b      	str	r3, [r1, #88]	; 0x58
 800626a:	e001      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626c:	7dfb      	ldrb	r3, [r7, #23]
 800626e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0320 	and.w	r3, r3, #32
 8006278:	2b00      	cmp	r3, #0
 800627a:	d04b      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006282:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006286:	d02e      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800628c:	d828      	bhi.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800628e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006292:	d02a      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006298:	d822      	bhi.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800629a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800629e:	d026      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80062a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062a4:	d81c      	bhi.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80062a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062aa:	d010      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80062ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062b0:	d816      	bhi.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d01d      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80062b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062ba:	d111      	bne.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3304      	adds	r3, #4
 80062c0:	2100      	movs	r1, #0
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 fd28 	bl	8006d18 <RCCEx_PLL2_Config>
 80062c8:	4603      	mov	r3, r0
 80062ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80062cc:	e012      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3324      	adds	r3, #36	; 0x24
 80062d2:	2102      	movs	r1, #2
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 fdd1 	bl	8006e7c <RCCEx_PLL3_Config>
 80062da:	4603      	mov	r3, r0
 80062dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80062de:	e009      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	75fb      	strb	r3, [r7, #23]
      break;
 80062e4:	e006      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80062e6:	bf00      	nop
 80062e8:	e004      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80062ea:	bf00      	nop
 80062ec:	e002      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80062ee:	bf00      	nop
 80062f0:	e000      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80062f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062f4:	7dfb      	ldrb	r3, [r7, #23]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10a      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062fa:	4b2e      	ldr	r3, [pc, #184]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80062fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006308:	492a      	ldr	r1, [pc, #168]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800630a:	4313      	orrs	r3, r2
 800630c:	654b      	str	r3, [r1, #84]	; 0x54
 800630e:	e001      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006310:	7dfb      	ldrb	r3, [r7, #23]
 8006312:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631c:	2b00      	cmp	r3, #0
 800631e:	d04d      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006326:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800632a:	d02e      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800632c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006330:	d828      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006336:	d02a      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633c:	d822      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800633e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006342:	d026      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006344:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006348:	d81c      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800634a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800634e:	d010      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006354:	d816      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006356:	2b00      	cmp	r3, #0
 8006358:	d01d      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800635a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800635e:	d111      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3304      	adds	r3, #4
 8006364:	2100      	movs	r1, #0
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fcd6 	bl	8006d18 <RCCEx_PLL2_Config>
 800636c:	4603      	mov	r3, r0
 800636e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006370:	e012      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3324      	adds	r3, #36	; 0x24
 8006376:	2102      	movs	r1, #2
 8006378:	4618      	mov	r0, r3
 800637a:	f000 fd7f 	bl	8006e7c <RCCEx_PLL3_Config>
 800637e:	4603      	mov	r3, r0
 8006380:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006382:	e009      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	75fb      	strb	r3, [r7, #23]
      break;
 8006388:	e006      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800638a:	bf00      	nop
 800638c:	e004      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800638e:	bf00      	nop
 8006390:	e002      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006392:	bf00      	nop
 8006394:	e000      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10c      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800639e:	4b05      	ldr	r3, [pc, #20]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80063a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063ac:	4901      	ldr	r1, [pc, #4]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	658b      	str	r3, [r1, #88]	; 0x58
 80063b2:	e003      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80063b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
 80063ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d04b      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80063d2:	d02e      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80063d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80063d8:	d828      	bhi.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80063da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063de:	d02a      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80063e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063e4:	d822      	bhi.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80063e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80063ea:	d026      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80063ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80063f0:	d81c      	bhi.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80063f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063f6:	d010      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80063f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063fc:	d816      	bhi.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d01d      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006406:	d111      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3304      	adds	r3, #4
 800640c:	2100      	movs	r1, #0
 800640e:	4618      	mov	r0, r3
 8006410:	f000 fc82 	bl	8006d18 <RCCEx_PLL2_Config>
 8006414:	4603      	mov	r3, r0
 8006416:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006418:	e012      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	3324      	adds	r3, #36	; 0x24
 800641e:	2102      	movs	r1, #2
 8006420:	4618      	mov	r0, r3
 8006422:	f000 fd2b 	bl	8006e7c <RCCEx_PLL3_Config>
 8006426:	4603      	mov	r3, r0
 8006428:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800642a:	e009      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	75fb      	strb	r3, [r7, #23]
      break;
 8006430:	e006      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006432:	bf00      	nop
 8006434:	e004      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006436:	bf00      	nop
 8006438:	e002      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800643a:	bf00      	nop
 800643c:	e000      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800643e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006440:	7dfb      	ldrb	r3, [r7, #23]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10a      	bne.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006446:	4b9d      	ldr	r3, [pc, #628]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006454:	4999      	ldr	r1, [pc, #612]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006456:	4313      	orrs	r3, r2
 8006458:	658b      	str	r3, [r1, #88]	; 0x58
 800645a:	e001      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800645c:	7dfb      	ldrb	r3, [r7, #23]
 800645e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	2b00      	cmp	r3, #0
 800646a:	d01a      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006476:	d10a      	bne.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3324      	adds	r3, #36	; 0x24
 800647c:	2102      	movs	r1, #2
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fcfc 	bl	8006e7c <RCCEx_PLL3_Config>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800648e:	4b8b      	ldr	r3, [pc, #556]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006492:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800649c:	4987      	ldr	r1, [pc, #540]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0310 	and.w	r3, r3, #16
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d01a      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064b8:	d10a      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	3324      	adds	r3, #36	; 0x24
 80064be:	2102      	movs	r1, #2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 fcdb 	bl	8006e7c <RCCEx_PLL3_Config>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064d0:	4b7a      	ldr	r3, [pc, #488]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80064d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064de:	4977      	ldr	r1, [pc, #476]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d034      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064fa:	d01d      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80064fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006500:	d817      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800650a:	d009      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800650c:	e011      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3304      	adds	r3, #4
 8006512:	2100      	movs	r1, #0
 8006514:	4618      	mov	r0, r3
 8006516:	f000 fbff 	bl	8006d18 <RCCEx_PLL2_Config>
 800651a:	4603      	mov	r3, r0
 800651c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800651e:	e00c      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3324      	adds	r3, #36	; 0x24
 8006524:	2102      	movs	r1, #2
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fca8 	bl	8006e7c <RCCEx_PLL3_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006530:	e003      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	75fb      	strb	r3, [r7, #23]
      break;
 8006536:	e000      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800653a:	7dfb      	ldrb	r3, [r7, #23]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10a      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006540:	4b5e      	ldr	r3, [pc, #376]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006544:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800654e:	495b      	ldr	r1, [pc, #364]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006550:	4313      	orrs	r3, r2
 8006552:	658b      	str	r3, [r1, #88]	; 0x58
 8006554:	e001      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006556:	7dfb      	ldrb	r3, [r7, #23]
 8006558:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d033      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800656c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006570:	d01c      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006572:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006576:	d816      	bhi.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800657c:	d003      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800657e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006582:	d007      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006584:	e00f      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006586:	4b4d      	ldr	r3, [pc, #308]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658a:	4a4c      	ldr	r2, [pc, #304]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800658c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006590:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006592:	e00c      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3324      	adds	r3, #36	; 0x24
 8006598:	2101      	movs	r1, #1
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fc6e 	bl	8006e7c <RCCEx_PLL3_Config>
 80065a0:	4603      	mov	r3, r0
 80065a2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80065a4:	e003      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	75fb      	strb	r3, [r7, #23]
      break;
 80065aa:	e000      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80065ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065ae:	7dfb      	ldrb	r3, [r7, #23]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065b4:	4b41      	ldr	r3, [pc, #260]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065c2:	493e      	ldr	r1, [pc, #248]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	654b      	str	r3, [r1, #84]	; 0x54
 80065c8:	e001      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d029      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80065e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e6:	d007      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80065e8:	e00f      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ea:	4b34      	ldr	r3, [pc, #208]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ee:	4a33      	ldr	r2, [pc, #204]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80065f6:	e00b      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3304      	adds	r3, #4
 80065fc:	2102      	movs	r1, #2
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fb8a 	bl	8006d18 <RCCEx_PLL2_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006608:	e002      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	75fb      	strb	r3, [r7, #23]
      break;
 800660e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006610:	7dfb      	ldrb	r3, [r7, #23]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d109      	bne.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006616:	4b29      	ldr	r3, [pc, #164]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800661a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006622:	4926      	ldr	r1, [pc, #152]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006624:	4313      	orrs	r3, r2
 8006626:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006628:	e001      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662a:	7dfb      	ldrb	r3, [r7, #23]
 800662c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3324      	adds	r3, #36	; 0x24
 800663e:	2102      	movs	r1, #2
 8006640:	4618      	mov	r0, r3
 8006642:	f000 fc1b 	bl	8006e7c <RCCEx_PLL3_Config>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d033      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006664:	d017      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006666:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800666a:	d811      	bhi.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800666c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006670:	d013      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006676:	d80b      	bhi.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006678:	2b00      	cmp	r3, #0
 800667a:	d010      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800667c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006680:	d106      	bne.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006682:	4b0e      	ldr	r3, [pc, #56]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006686:	4a0d      	ldr	r2, [pc, #52]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800668c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800668e:	e007      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	75fb      	strb	r3, [r7, #23]
      break;
 8006694:	e004      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006696:	bf00      	nop
 8006698:	e002      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800669a:	bf00      	nop
 800669c:	e000      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800669e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066a0:	7dfb      	ldrb	r3, [r7, #23]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10c      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066a6:	4b05      	ldr	r3, [pc, #20]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066b2:	4902      	ldr	r1, [pc, #8]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	654b      	str	r3, [r1, #84]	; 0x54
 80066b8:	e004      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80066ba:	bf00      	nop
 80066bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
 80066c2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d008      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80066d0:	4b31      	ldr	r3, [pc, #196]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066dc:	492e      	ldr	r1, [pc, #184]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d009      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80066ee:	4b2a      	ldr	r3, [pc, #168]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80066fc:	4926      	ldr	r1, [pc, #152]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d008      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800670e:	4b22      	ldr	r3, [pc, #136]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006712:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800671a:	491f      	ldr	r1, [pc, #124]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800671c:	4313      	orrs	r3, r2
 800671e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00d      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800672c:	4b1a      	ldr	r3, [pc, #104]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	4a19      	ldr	r2, [pc, #100]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006732:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006736:	6113      	str	r3, [r2, #16]
 8006738:	4b17      	ldr	r3, [pc, #92]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800673a:	691a      	ldr	r2, [r3, #16]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006742:	4915      	ldr	r1, [pc, #84]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006744:	4313      	orrs	r3, r2
 8006746:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	da08      	bge.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006750:	4b11      	ldr	r3, [pc, #68]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006754:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800675c:	490e      	ldr	r1, [pc, #56]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800675e:	4313      	orrs	r3, r2
 8006760:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d009      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800676e:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006772:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677c:	4906      	ldr	r1, [pc, #24]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800677e:	4313      	orrs	r3, r2
 8006780:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006782:	7dbb      	ldrb	r3, [r7, #22]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	e000      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
}
 800678e:	4618      	mov	r0, r3
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	58024400 	.word	0x58024400

0800679c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80067a0:	f7ff f85a 	bl	8005858 <HAL_RCC_GetHCLKFreq>
 80067a4:	4602      	mov	r2, r0
 80067a6:	4b06      	ldr	r3, [pc, #24]	; (80067c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	091b      	lsrs	r3, r3, #4
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	4904      	ldr	r1, [pc, #16]	; (80067c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80067b2:	5ccb      	ldrb	r3, [r1, r3]
 80067b4:	f003 031f 	and.w	r3, r3, #31
 80067b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80067bc:	4618      	mov	r0, r3
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	58024400 	.word	0x58024400
 80067c4:	0800904c 	.word	0x0800904c

080067c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b089      	sub	sp, #36	; 0x24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067d0:	4ba1      	ldr	r3, [pc, #644]	; (8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d4:	f003 0303 	and.w	r3, r3, #3
 80067d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80067da:	4b9f      	ldr	r3, [pc, #636]	; (8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067de:	0b1b      	lsrs	r3, r3, #12
 80067e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80067e6:	4b9c      	ldr	r3, [pc, #624]	; (8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ea:	091b      	lsrs	r3, r3, #4
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80067f2:	4b99      	ldr	r3, [pc, #612]	; (8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f6:	08db      	lsrs	r3, r3, #3
 80067f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	fb02 f303 	mul.w	r3, r2, r3
 8006802:	ee07 3a90 	vmov	s15, r3
 8006806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 8111 	beq.w	8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	2b02      	cmp	r3, #2
 800681a:	f000 8083 	beq.w	8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	2b02      	cmp	r3, #2
 8006822:	f200 80a1 	bhi.w	8006968 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d056      	beq.n	80068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006832:	e099      	b.n	8006968 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006834:	4b88      	ldr	r3, [pc, #544]	; (8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0320 	and.w	r3, r3, #32
 800683c:	2b00      	cmp	r3, #0
 800683e:	d02d      	beq.n	800689c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006840:	4b85      	ldr	r3, [pc, #532]	; (8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	08db      	lsrs	r3, r3, #3
 8006846:	f003 0303 	and.w	r3, r3, #3
 800684a:	4a84      	ldr	r2, [pc, #528]	; (8006a5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800684c:	fa22 f303 	lsr.w	r3, r2, r3
 8006850:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	ee07 3a90 	vmov	s15, r3
 8006858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	ee07 3a90 	vmov	s15, r3
 8006862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800686a:	4b7b      	ldr	r3, [pc, #492]	; (8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800686c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006872:	ee07 3a90 	vmov	s15, r3
 8006876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800687a:	ed97 6a03 	vldr	s12, [r7, #12]
 800687e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800688a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800688e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006896:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800689a:	e087      	b.n	80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	ee07 3a90 	vmov	s15, r3
 80068a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006a64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80068aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ae:	4b6a      	ldr	r3, [pc, #424]	; (8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068be:	ed97 6a03 	vldr	s12, [r7, #12]
 80068c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068de:	e065      	b.n	80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	ee07 3a90 	vmov	s15, r3
 80068e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068f2:	4b59      	ldr	r3, [pc, #356]	; (8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068fa:	ee07 3a90 	vmov	s15, r3
 80068fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006902:	ed97 6a03 	vldr	s12, [r7, #12]
 8006906:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800690a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800690e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800691a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800691e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006922:	e043      	b.n	80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006936:	4b48      	ldr	r3, [pc, #288]	; (8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693e:	ee07 3a90 	vmov	s15, r3
 8006942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006946:	ed97 6a03 	vldr	s12, [r7, #12]
 800694a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800694e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800695a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800695e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006962:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006966:	e021      	b.n	80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	ee07 3a90 	vmov	s15, r3
 800696e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006972:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800697a:	4b37      	ldr	r3, [pc, #220]	; (8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006982:	ee07 3a90 	vmov	s15, r3
 8006986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800698a:	ed97 6a03 	vldr	s12, [r7, #12]
 800698e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800699a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800699e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80069ac:	4b2a      	ldr	r3, [pc, #168]	; (8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b0:	0a5b      	lsrs	r3, r3, #9
 80069b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069b6:	ee07 3a90 	vmov	s15, r3
 80069ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80069ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069d2:	ee17 2a90 	vmov	r2, s15
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80069da:	4b1f      	ldr	r3, [pc, #124]	; (8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069de:	0c1b      	lsrs	r3, r3, #16
 80069e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069e4:	ee07 3a90 	vmov	s15, r3
 80069e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80069f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a00:	ee17 2a90 	vmov	r2, s15
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006a08:	4b13      	ldr	r3, [pc, #76]	; (8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0c:	0e1b      	lsrs	r3, r3, #24
 8006a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a12:	ee07 3a90 	vmov	s15, r3
 8006a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a22:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a2e:	ee17 2a90 	vmov	r2, s15
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006a36:	e008      	b.n	8006a4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	609a      	str	r2, [r3, #8]
}
 8006a4a:	bf00      	nop
 8006a4c:	3724      	adds	r7, #36	; 0x24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	58024400 	.word	0x58024400
 8006a5c:	03d09000 	.word	0x03d09000
 8006a60:	46000000 	.word	0x46000000
 8006a64:	4c742400 	.word	0x4c742400
 8006a68:	4a742400 	.word	0x4a742400
 8006a6c:	4af42400 	.word	0x4af42400

08006a70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b089      	sub	sp, #36	; 0x24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a78:	4ba1      	ldr	r3, [pc, #644]	; (8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7c:	f003 0303 	and.w	r3, r3, #3
 8006a80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006a82:	4b9f      	ldr	r3, [pc, #636]	; (8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a86:	0d1b      	lsrs	r3, r3, #20
 8006a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a8e:	4b9c      	ldr	r3, [pc, #624]	; (8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a92:	0a1b      	lsrs	r3, r3, #8
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006a9a:	4b99      	ldr	r3, [pc, #612]	; (8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9e:	08db      	lsrs	r3, r3, #3
 8006aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	fb02 f303 	mul.w	r3, r2, r3
 8006aaa:	ee07 3a90 	vmov	s15, r3
 8006aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 8111 	beq.w	8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	f000 8083 	beq.w	8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	f200 80a1 	bhi.w	8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d056      	beq.n	8006b88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006ada:	e099      	b.n	8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006adc:	4b88      	ldr	r3, [pc, #544]	; (8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d02d      	beq.n	8006b44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ae8:	4b85      	ldr	r3, [pc, #532]	; (8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	08db      	lsrs	r3, r3, #3
 8006aee:	f003 0303 	and.w	r3, r3, #3
 8006af2:	4a84      	ldr	r2, [pc, #528]	; (8006d04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006af4:	fa22 f303 	lsr.w	r3, r2, r3
 8006af8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	ee07 3a90 	vmov	s15, r3
 8006b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	ee07 3a90 	vmov	s15, r3
 8006b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b12:	4b7b      	ldr	r3, [pc, #492]	; (8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b1a:	ee07 3a90 	vmov	s15, r3
 8006b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006b42:	e087      	b.n	8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006d0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b56:	4b6a      	ldr	r3, [pc, #424]	; (8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b86:	e065      	b.n	8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b9a:	4b59      	ldr	r3, [pc, #356]	; (8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bca:	e043      	b.n	8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	ee07 3a90 	vmov	s15, r3
 8006bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bde:	4b48      	ldr	r3, [pc, #288]	; (8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c0e:	e021      	b.n	8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c22:	4b37      	ldr	r3, [pc, #220]	; (8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006c54:	4b2a      	ldr	r3, [pc, #168]	; (8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c58:	0a5b      	lsrs	r3, r3, #9
 8006c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c5e:	ee07 3a90 	vmov	s15, r3
 8006c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c7a:	ee17 2a90 	vmov	r2, s15
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006c82:	4b1f      	ldr	r3, [pc, #124]	; (8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	0c1b      	lsrs	r3, r3, #16
 8006c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c8c:	ee07 3a90 	vmov	s15, r3
 8006c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ca8:	ee17 2a90 	vmov	r2, s15
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006cb0:	4b13      	ldr	r3, [pc, #76]	; (8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb4:	0e1b      	lsrs	r3, r3, #24
 8006cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cca:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cd6:	ee17 2a90 	vmov	r2, s15
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006cde:	e008      	b.n	8006cf2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	609a      	str	r2, [r3, #8]
}
 8006cf2:	bf00      	nop
 8006cf4:	3724      	adds	r7, #36	; 0x24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	58024400 	.word	0x58024400
 8006d04:	03d09000 	.word	0x03d09000
 8006d08:	46000000 	.word	0x46000000
 8006d0c:	4c742400 	.word	0x4c742400
 8006d10:	4a742400 	.word	0x4a742400
 8006d14:	4af42400 	.word	0x4af42400

08006d18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d26:	4b53      	ldr	r3, [pc, #332]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2a:	f003 0303 	and.w	r3, r3, #3
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d101      	bne.n	8006d36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e099      	b.n	8006e6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d36:	4b4f      	ldr	r3, [pc, #316]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a4e      	ldr	r2, [pc, #312]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006d3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d42:	f7fa faa3 	bl	800128c <HAL_GetTick>
 8006d46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d48:	e008      	b.n	8006d5c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006d4a:	f7fa fa9f 	bl	800128c <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d901      	bls.n	8006d5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e086      	b.n	8006e6a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d5c:	4b45      	ldr	r3, [pc, #276]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1f0      	bne.n	8006d4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006d68:	4b42      	ldr	r3, [pc, #264]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	031b      	lsls	r3, r3, #12
 8006d76:	493f      	ldr	r1, [pc, #252]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	628b      	str	r3, [r1, #40]	; 0x28
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	025b      	lsls	r3, r3, #9
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	431a      	orrs	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	3b01      	subs	r3, #1
 8006d98:	041b      	lsls	r3, r3, #16
 8006d9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	3b01      	subs	r3, #1
 8006da6:	061b      	lsls	r3, r3, #24
 8006da8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006dac:	4931      	ldr	r1, [pc, #196]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006db2:	4b30      	ldr	r3, [pc, #192]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	492d      	ldr	r1, [pc, #180]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006dc4:	4b2b      	ldr	r3, [pc, #172]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc8:	f023 0220 	bic.w	r2, r3, #32
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	4928      	ldr	r1, [pc, #160]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006dd6:	4b27      	ldr	r3, [pc, #156]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dda:	4a26      	ldr	r2, [pc, #152]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006ddc:	f023 0310 	bic.w	r3, r3, #16
 8006de0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006de2:	4b24      	ldr	r3, [pc, #144]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006de4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006de6:	4b24      	ldr	r3, [pc, #144]	; (8006e78 <RCCEx_PLL2_Config+0x160>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	69d2      	ldr	r2, [r2, #28]
 8006dee:	00d2      	lsls	r2, r2, #3
 8006df0:	4920      	ldr	r1, [pc, #128]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006df6:	4b1f      	ldr	r3, [pc, #124]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfa:	4a1e      	ldr	r2, [pc, #120]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006dfc:	f043 0310 	orr.w	r3, r3, #16
 8006e00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d106      	bne.n	8006e16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e08:	4b1a      	ldr	r3, [pc, #104]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0c:	4a19      	ldr	r2, [pc, #100]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006e0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e14:	e00f      	b.n	8006e36 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d106      	bne.n	8006e2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e1c:	4b15      	ldr	r3, [pc, #84]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e20:	4a14      	ldr	r2, [pc, #80]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e28:	e005      	b.n	8006e36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e2a:	4b12      	ldr	r3, [pc, #72]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	4a11      	ldr	r2, [pc, #68]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006e30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e36:	4b0f      	ldr	r3, [pc, #60]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a0e      	ldr	r2, [pc, #56]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006e3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e42:	f7fa fa23 	bl	800128c <HAL_GetTick>
 8006e46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e48:	e008      	b.n	8006e5c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006e4a:	f7fa fa1f 	bl	800128c <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d901      	bls.n	8006e5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e006      	b.n	8006e6a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e5c:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <RCCEx_PLL2_Config+0x15c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0f0      	beq.n	8006e4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	58024400 	.word	0x58024400
 8006e78:	ffff0007 	.word	0xffff0007

08006e7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e8a:	4b53      	ldr	r3, [pc, #332]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d101      	bne.n	8006e9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e099      	b.n	8006fce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e9a:	4b4f      	ldr	r3, [pc, #316]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a4e      	ldr	r2, [pc, #312]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ea6:	f7fa f9f1 	bl	800128c <HAL_GetTick>
 8006eaa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006eac:	e008      	b.n	8006ec0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006eae:	f7fa f9ed 	bl	800128c <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d901      	bls.n	8006ec0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e086      	b.n	8006fce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ec0:	4b45      	ldr	r3, [pc, #276]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1f0      	bne.n	8006eae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006ecc:	4b42      	ldr	r3, [pc, #264]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	051b      	lsls	r3, r3, #20
 8006eda:	493f      	ldr	r1, [pc, #252]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	628b      	str	r3, [r1, #40]	; 0x28
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	025b      	lsls	r3, r3, #9
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	041b      	lsls	r3, r3, #16
 8006efe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f02:	431a      	orrs	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	061b      	lsls	r3, r3, #24
 8006f0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f10:	4931      	ldr	r1, [pc, #196]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f16:	4b30      	ldr	r3, [pc, #192]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	492d      	ldr	r1, [pc, #180]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f28:	4b2b      	ldr	r3, [pc, #172]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	4928      	ldr	r1, [pc, #160]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f3a:	4b27      	ldr	r3, [pc, #156]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3e:	4a26      	ldr	r2, [pc, #152]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006f46:	4b24      	ldr	r3, [pc, #144]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f4a:	4b24      	ldr	r3, [pc, #144]	; (8006fdc <RCCEx_PLL3_Config+0x160>)
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	69d2      	ldr	r2, [r2, #28]
 8006f52:	00d2      	lsls	r2, r2, #3
 8006f54:	4920      	ldr	r1, [pc, #128]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f5a:	4b1f      	ldr	r3, [pc, #124]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5e:	4a1e      	ldr	r2, [pc, #120]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d106      	bne.n	8006f7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f6c:	4b1a      	ldr	r3, [pc, #104]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	4a19      	ldr	r2, [pc, #100]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006f72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f78:	e00f      	b.n	8006f9a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d106      	bne.n	8006f8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f80:	4b15      	ldr	r3, [pc, #84]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f84:	4a14      	ldr	r2, [pc, #80]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006f86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f8c:	e005      	b.n	8006f9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f8e:	4b12      	ldr	r3, [pc, #72]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f92:	4a11      	ldr	r2, [pc, #68]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006f94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f9a:	4b0f      	ldr	r3, [pc, #60]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a0e      	ldr	r2, [pc, #56]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fa6:	f7fa f971 	bl	800128c <HAL_GetTick>
 8006faa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006fac:	e008      	b.n	8006fc0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006fae:	f7fa f96d 	bl	800128c <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d901      	bls.n	8006fc0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e006      	b.n	8006fce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006fc0:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <RCCEx_PLL3_Config+0x15c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d0f0      	beq.n	8006fae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	58024400 	.word	0x58024400
 8006fdc:	ffff0007 	.word	0xffff0007

08006fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e042      	b.n	8007078 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d106      	bne.n	800700a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7f9 fee9 	bl	8000ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2224      	movs	r2, #36	; 0x24
 800700e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f022 0201 	bic.w	r2, r2, #1
 8007020:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fbea 	bl	80077fc <UART_SetConfig>
 8007028:	4603      	mov	r3, r0
 800702a:	2b01      	cmp	r3, #1
 800702c:	d101      	bne.n	8007032 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e022      	b.n	8007078 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f001 f946 	bl	80082cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800704e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	689a      	ldr	r2, [r3, #8]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800705e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0201 	orr.w	r2, r2, #1
 800706e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f001 f9cd 	bl	8008410 <UART_CheckIdleState>
 8007076:	4603      	mov	r3, r0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b0ba      	sub	sp, #232	; 0xe8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80070a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80070aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80070ae:	4013      	ands	r3, r2
 80070b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80070b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d11b      	bne.n	80070f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80070bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c0:	f003 0320 	and.w	r3, r3, #32
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d015      	beq.n	80070f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80070c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070cc:	f003 0320 	and.w	r3, r3, #32
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d105      	bne.n	80070e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80070d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d009      	beq.n	80070f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 835a 	beq.w	800779e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	4798      	blx	r3
      }
      return;
 80070f2:	e354      	b.n	800779e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80070f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 811f 	beq.w	800733c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80070fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007102:	4b8b      	ldr	r3, [pc, #556]	; (8007330 <HAL_UART_IRQHandler+0x2b0>)
 8007104:	4013      	ands	r3, r2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d106      	bne.n	8007118 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800710a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800710e:	4b89      	ldr	r3, [pc, #548]	; (8007334 <HAL_UART_IRQHandler+0x2b4>)
 8007110:	4013      	ands	r3, r2
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 8112 	beq.w	800733c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b00      	cmp	r3, #0
 8007122:	d011      	beq.n	8007148 <HAL_UART_IRQHandler+0xc8>
 8007124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00b      	beq.n	8007148 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2201      	movs	r2, #1
 8007136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800713e:	f043 0201 	orr.w	r2, r3, #1
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d011      	beq.n	8007178 <HAL_UART_IRQHandler+0xf8>
 8007154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00b      	beq.n	8007178 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2202      	movs	r2, #2
 8007166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800716e:	f043 0204 	orr.w	r2, r3, #4
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717c:	f003 0304 	and.w	r3, r3, #4
 8007180:	2b00      	cmp	r3, #0
 8007182:	d011      	beq.n	80071a8 <HAL_UART_IRQHandler+0x128>
 8007184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00b      	beq.n	80071a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2204      	movs	r2, #4
 8007196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800719e:	f043 0202 	orr.w	r2, r3, #2
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ac:	f003 0308 	and.w	r3, r3, #8
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d017      	beq.n	80071e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80071b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b8:	f003 0320 	and.w	r3, r3, #32
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d105      	bne.n	80071cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80071c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80071c4:	4b5a      	ldr	r3, [pc, #360]	; (8007330 <HAL_UART_IRQHandler+0x2b0>)
 80071c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00b      	beq.n	80071e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2208      	movs	r2, #8
 80071d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071da:	f043 0208 	orr.w	r2, r3, #8
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d012      	beq.n	8007216 <HAL_UART_IRQHandler+0x196>
 80071f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00c      	beq.n	8007216 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007204:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800720c:	f043 0220 	orr.w	r2, r3, #32
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 82c0 	beq.w	80077a2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007226:	f003 0320 	and.w	r3, r3, #32
 800722a:	2b00      	cmp	r3, #0
 800722c:	d013      	beq.n	8007256 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800722e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007232:	f003 0320 	and.w	r3, r3, #32
 8007236:	2b00      	cmp	r3, #0
 8007238:	d105      	bne.n	8007246 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800723a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800723e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d007      	beq.n	8007256 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800725c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726a:	2b40      	cmp	r3, #64	; 0x40
 800726c:	d005      	beq.n	800727a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800726e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007272:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007276:	2b00      	cmp	r3, #0
 8007278:	d04f      	beq.n	800731a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f001 f9dc 	bl	8008638 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728a:	2b40      	cmp	r3, #64	; 0x40
 800728c:	d141      	bne.n	8007312 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3308      	adds	r3, #8
 8007294:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	3308      	adds	r3, #8
 80072b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072ca:	e841 2300 	strex	r3, r2, [r1]
 80072ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1d9      	bne.n	800728e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d013      	beq.n	800730a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072e6:	4a14      	ldr	r2, [pc, #80]	; (8007338 <HAL_UART_IRQHandler+0x2b8>)
 80072e8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fa ffa6 	bl	8002240 <HAL_DMA_Abort_IT>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d017      	beq.n	800732a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007304:	4610      	mov	r0, r2
 8007306:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007308:	e00f      	b.n	800732a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fa60 	bl	80077d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007310:	e00b      	b.n	800732a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fa5c 	bl	80077d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007318:	e007      	b.n	800732a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fa58 	bl	80077d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007328:	e23b      	b.n	80077a2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800732a:	bf00      	nop
    return;
 800732c:	e239      	b.n	80077a2 <HAL_UART_IRQHandler+0x722>
 800732e:	bf00      	nop
 8007330:	10000001 	.word	0x10000001
 8007334:	04000120 	.word	0x04000120
 8007338:	08008705 	.word	0x08008705

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007340:	2b01      	cmp	r3, #1
 8007342:	f040 81ce 	bne.w	80076e2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800734a:	f003 0310 	and.w	r3, r3, #16
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 81c7 	beq.w	80076e2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007358:	f003 0310 	and.w	r3, r3, #16
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 81c0 	beq.w	80076e2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2210      	movs	r2, #16
 8007368:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007374:	2b40      	cmp	r3, #64	; 0x40
 8007376:	f040 813b 	bne.w	80075f0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a8b      	ldr	r2, [pc, #556]	; (80075b0 <HAL_UART_IRQHandler+0x530>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d059      	beq.n	800743a <HAL_UART_IRQHandler+0x3ba>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a89      	ldr	r2, [pc, #548]	; (80075b4 <HAL_UART_IRQHandler+0x534>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d053      	beq.n	800743a <HAL_UART_IRQHandler+0x3ba>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a87      	ldr	r2, [pc, #540]	; (80075b8 <HAL_UART_IRQHandler+0x538>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d04d      	beq.n	800743a <HAL_UART_IRQHandler+0x3ba>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a85      	ldr	r2, [pc, #532]	; (80075bc <HAL_UART_IRQHandler+0x53c>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d047      	beq.n	800743a <HAL_UART_IRQHandler+0x3ba>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a83      	ldr	r2, [pc, #524]	; (80075c0 <HAL_UART_IRQHandler+0x540>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d041      	beq.n	800743a <HAL_UART_IRQHandler+0x3ba>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a81      	ldr	r2, [pc, #516]	; (80075c4 <HAL_UART_IRQHandler+0x544>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d03b      	beq.n	800743a <HAL_UART_IRQHandler+0x3ba>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a7f      	ldr	r2, [pc, #508]	; (80075c8 <HAL_UART_IRQHandler+0x548>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d035      	beq.n	800743a <HAL_UART_IRQHandler+0x3ba>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a7d      	ldr	r2, [pc, #500]	; (80075cc <HAL_UART_IRQHandler+0x54c>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d02f      	beq.n	800743a <HAL_UART_IRQHandler+0x3ba>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a7b      	ldr	r2, [pc, #492]	; (80075d0 <HAL_UART_IRQHandler+0x550>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d029      	beq.n	800743a <HAL_UART_IRQHandler+0x3ba>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a79      	ldr	r2, [pc, #484]	; (80075d4 <HAL_UART_IRQHandler+0x554>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d023      	beq.n	800743a <HAL_UART_IRQHandler+0x3ba>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a77      	ldr	r2, [pc, #476]	; (80075d8 <HAL_UART_IRQHandler+0x558>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d01d      	beq.n	800743a <HAL_UART_IRQHandler+0x3ba>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a75      	ldr	r2, [pc, #468]	; (80075dc <HAL_UART_IRQHandler+0x55c>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d017      	beq.n	800743a <HAL_UART_IRQHandler+0x3ba>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a73      	ldr	r2, [pc, #460]	; (80075e0 <HAL_UART_IRQHandler+0x560>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d011      	beq.n	800743a <HAL_UART_IRQHandler+0x3ba>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a71      	ldr	r2, [pc, #452]	; (80075e4 <HAL_UART_IRQHandler+0x564>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00b      	beq.n	800743a <HAL_UART_IRQHandler+0x3ba>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a6f      	ldr	r2, [pc, #444]	; (80075e8 <HAL_UART_IRQHandler+0x568>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d005      	beq.n	800743a <HAL_UART_IRQHandler+0x3ba>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a6d      	ldr	r2, [pc, #436]	; (80075ec <HAL_UART_IRQHandler+0x56c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d105      	bne.n	8007446 <HAL_UART_IRQHandler+0x3c6>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	b29b      	uxth	r3, r3
 8007444:	e004      	b.n	8007450 <HAL_UART_IRQHandler+0x3d0>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	b29b      	uxth	r3, r3
 8007450:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007454:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 81a4 	beq.w	80077a6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007464:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007468:	429a      	cmp	r2, r3
 800746a:	f080 819c 	bcs.w	80077a6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007474:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007482:	f000 8086 	beq.w	8007592 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007492:	e853 3f00 	ldrex	r3, [r3]
 8007496:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800749a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800749e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80074b4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80074c0:	e841 2300 	strex	r3, r2, [r1]
 80074c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80074c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1da      	bne.n	8007486 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3308      	adds	r3, #8
 80074d6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074da:	e853 3f00 	ldrex	r3, [r3]
 80074de:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80074e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074e2:	f023 0301 	bic.w	r3, r3, #1
 80074e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3308      	adds	r3, #8
 80074f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007500:	e841 2300 	strex	r3, r2, [r1]
 8007504:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007506:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1e1      	bne.n	80074d0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3308      	adds	r3, #8
 8007512:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007514:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007516:	e853 3f00 	ldrex	r3, [r3]
 800751a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800751c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800751e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007522:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3308      	adds	r3, #8
 800752c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007530:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007532:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007534:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007536:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007538:	e841 2300 	strex	r3, r2, [r1]
 800753c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800753e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1e3      	bne.n	800750c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2220      	movs	r2, #32
 8007548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800755a:	e853 3f00 	ldrex	r3, [r3]
 800755e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007562:	f023 0310 	bic.w	r3, r3, #16
 8007566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	461a      	mov	r2, r3
 8007570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007574:	65bb      	str	r3, [r7, #88]	; 0x58
 8007576:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007578:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800757a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800757c:	e841 2300 	strex	r3, r2, [r1]
 8007580:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1e4      	bne.n	8007552 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800758c:	4618      	mov	r0, r3
 800758e:	f7fa fb39 	bl	8001c04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800759e:	b29b      	uxth	r3, r3
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f91c 	bl	80077e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075ac:	e0fb      	b.n	80077a6 <HAL_UART_IRQHandler+0x726>
 80075ae:	bf00      	nop
 80075b0:	40020010 	.word	0x40020010
 80075b4:	40020028 	.word	0x40020028
 80075b8:	40020040 	.word	0x40020040
 80075bc:	40020058 	.word	0x40020058
 80075c0:	40020070 	.word	0x40020070
 80075c4:	40020088 	.word	0x40020088
 80075c8:	400200a0 	.word	0x400200a0
 80075cc:	400200b8 	.word	0x400200b8
 80075d0:	40020410 	.word	0x40020410
 80075d4:	40020428 	.word	0x40020428
 80075d8:	40020440 	.word	0x40020440
 80075dc:	40020458 	.word	0x40020458
 80075e0:	40020470 	.word	0x40020470
 80075e4:	40020488 	.word	0x40020488
 80075e8:	400204a0 	.word	0x400204a0
 80075ec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800760a:	b29b      	uxth	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 80cc 	beq.w	80077aa <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8007612:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007616:	2b00      	cmp	r3, #0
 8007618:	f000 80c7 	beq.w	80077aa <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007624:	e853 3f00 	ldrex	r3, [r3]
 8007628:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800762a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007630:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800763e:	647b      	str	r3, [r7, #68]	; 0x44
 8007640:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007642:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007644:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007646:	e841 2300 	strex	r3, r2, [r1]
 800764a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800764c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1e4      	bne.n	800761c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3308      	adds	r3, #8
 8007658:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	e853 3f00 	ldrex	r3, [r3]
 8007660:	623b      	str	r3, [r7, #32]
   return(result);
 8007662:	6a3a      	ldr	r2, [r7, #32]
 8007664:	4b54      	ldr	r3, [pc, #336]	; (80077b8 <HAL_UART_IRQHandler+0x738>)
 8007666:	4013      	ands	r3, r2
 8007668:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3308      	adds	r3, #8
 8007672:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007676:	633a      	str	r2, [r7, #48]	; 0x30
 8007678:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800767c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800767e:	e841 2300 	strex	r3, r2, [r1]
 8007682:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1e3      	bne.n	8007652 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2220      	movs	r2, #32
 800768e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f023 0310 	bic.w	r3, r3, #16
 80076b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076c0:	61fb      	str	r3, [r7, #28]
 80076c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	69b9      	ldr	r1, [r7, #24]
 80076c6:	69fa      	ldr	r2, [r7, #28]
 80076c8:	e841 2300 	strex	r3, r2, [r1]
 80076cc:	617b      	str	r3, [r7, #20]
   return(result);
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1e4      	bne.n	800769e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f882 	bl	80077e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076e0:	e063      	b.n	80077aa <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80076e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00e      	beq.n	800770c <HAL_UART_IRQHandler+0x68c>
 80076ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d008      	beq.n	800770c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007702:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 f83e 	bl	8008786 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800770a:	e051      	b.n	80077b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800770c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007714:	2b00      	cmp	r3, #0
 8007716:	d014      	beq.n	8007742 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800771c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007720:	2b00      	cmp	r3, #0
 8007722:	d105      	bne.n	8007730 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007728:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d008      	beq.n	8007742 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007734:	2b00      	cmp	r3, #0
 8007736:	d03a      	beq.n	80077ae <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	4798      	blx	r3
    }
    return;
 8007740:	e035      	b.n	80077ae <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774a:	2b00      	cmp	r3, #0
 800774c:	d009      	beq.n	8007762 <HAL_UART_IRQHandler+0x6e2>
 800774e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007756:	2b00      	cmp	r3, #0
 8007758:	d003      	beq.n	8007762 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 ffe8 	bl	8008730 <UART_EndTransmit_IT>
    return;
 8007760:	e026      	b.n	80077b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d009      	beq.n	8007782 <HAL_UART_IRQHandler+0x702>
 800776e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007772:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f001 f817 	bl	80087ae <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007780:	e016      	b.n	80077b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007786:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d010      	beq.n	80077b0 <HAL_UART_IRQHandler+0x730>
 800778e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007792:	2b00      	cmp	r3, #0
 8007794:	da0c      	bge.n	80077b0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 ffff 	bl	800879a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800779c:	e008      	b.n	80077b0 <HAL_UART_IRQHandler+0x730>
      return;
 800779e:	bf00      	nop
 80077a0:	e006      	b.n	80077b0 <HAL_UART_IRQHandler+0x730>
    return;
 80077a2:	bf00      	nop
 80077a4:	e004      	b.n	80077b0 <HAL_UART_IRQHandler+0x730>
      return;
 80077a6:	bf00      	nop
 80077a8:	e002      	b.n	80077b0 <HAL_UART_IRQHandler+0x730>
      return;
 80077aa:	bf00      	nop
 80077ac:	e000      	b.n	80077b0 <HAL_UART_IRQHandler+0x730>
    return;
 80077ae:	bf00      	nop
  }
}
 80077b0:	37e8      	adds	r7, #232	; 0xe8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	effffffe 	.word	0xeffffffe

080077bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007800:	b092      	sub	sp, #72	; 0x48
 8007802:	af00      	add	r7, sp, #0
 8007804:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	689a      	ldr	r2, [r3, #8]
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	431a      	orrs	r2, r3
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	431a      	orrs	r2, r3
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	4313      	orrs	r3, r2
 8007822:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	4bbe      	ldr	r3, [pc, #760]	; (8007b24 <UART_SetConfig+0x328>)
 800782c:	4013      	ands	r3, r2
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	6812      	ldr	r2, [r2, #0]
 8007832:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007834:	430b      	orrs	r3, r1
 8007836:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4ab3      	ldr	r2, [pc, #716]	; (8007b28 <UART_SetConfig+0x32c>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d004      	beq.n	8007868 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007864:	4313      	orrs	r3, r2
 8007866:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	689a      	ldr	r2, [r3, #8]
 800786e:	4baf      	ldr	r3, [pc, #700]	; (8007b2c <UART_SetConfig+0x330>)
 8007870:	4013      	ands	r3, r2
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	6812      	ldr	r2, [r2, #0]
 8007876:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007878:	430b      	orrs	r3, r1
 800787a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007882:	f023 010f 	bic.w	r1, r3, #15
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4aa6      	ldr	r2, [pc, #664]	; (8007b30 <UART_SetConfig+0x334>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d177      	bne.n	800798c <UART_SetConfig+0x190>
 800789c:	4ba5      	ldr	r3, [pc, #660]	; (8007b34 <UART_SetConfig+0x338>)
 800789e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078a4:	2b28      	cmp	r3, #40	; 0x28
 80078a6:	d86d      	bhi.n	8007984 <UART_SetConfig+0x188>
 80078a8:	a201      	add	r2, pc, #4	; (adr r2, 80078b0 <UART_SetConfig+0xb4>)
 80078aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ae:	bf00      	nop
 80078b0:	08007955 	.word	0x08007955
 80078b4:	08007985 	.word	0x08007985
 80078b8:	08007985 	.word	0x08007985
 80078bc:	08007985 	.word	0x08007985
 80078c0:	08007985 	.word	0x08007985
 80078c4:	08007985 	.word	0x08007985
 80078c8:	08007985 	.word	0x08007985
 80078cc:	08007985 	.word	0x08007985
 80078d0:	0800795d 	.word	0x0800795d
 80078d4:	08007985 	.word	0x08007985
 80078d8:	08007985 	.word	0x08007985
 80078dc:	08007985 	.word	0x08007985
 80078e0:	08007985 	.word	0x08007985
 80078e4:	08007985 	.word	0x08007985
 80078e8:	08007985 	.word	0x08007985
 80078ec:	08007985 	.word	0x08007985
 80078f0:	08007965 	.word	0x08007965
 80078f4:	08007985 	.word	0x08007985
 80078f8:	08007985 	.word	0x08007985
 80078fc:	08007985 	.word	0x08007985
 8007900:	08007985 	.word	0x08007985
 8007904:	08007985 	.word	0x08007985
 8007908:	08007985 	.word	0x08007985
 800790c:	08007985 	.word	0x08007985
 8007910:	0800796d 	.word	0x0800796d
 8007914:	08007985 	.word	0x08007985
 8007918:	08007985 	.word	0x08007985
 800791c:	08007985 	.word	0x08007985
 8007920:	08007985 	.word	0x08007985
 8007924:	08007985 	.word	0x08007985
 8007928:	08007985 	.word	0x08007985
 800792c:	08007985 	.word	0x08007985
 8007930:	08007975 	.word	0x08007975
 8007934:	08007985 	.word	0x08007985
 8007938:	08007985 	.word	0x08007985
 800793c:	08007985 	.word	0x08007985
 8007940:	08007985 	.word	0x08007985
 8007944:	08007985 	.word	0x08007985
 8007948:	08007985 	.word	0x08007985
 800794c:	08007985 	.word	0x08007985
 8007950:	0800797d 	.word	0x0800797d
 8007954:	2301      	movs	r3, #1
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800795a:	e222      	b.n	8007da2 <UART_SetConfig+0x5a6>
 800795c:	2304      	movs	r3, #4
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007962:	e21e      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007964:	2308      	movs	r3, #8
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800796a:	e21a      	b.n	8007da2 <UART_SetConfig+0x5a6>
 800796c:	2310      	movs	r3, #16
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007972:	e216      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007974:	2320      	movs	r3, #32
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800797a:	e212      	b.n	8007da2 <UART_SetConfig+0x5a6>
 800797c:	2340      	movs	r3, #64	; 0x40
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007982:	e20e      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007984:	2380      	movs	r3, #128	; 0x80
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800798a:	e20a      	b.n	8007da2 <UART_SetConfig+0x5a6>
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a69      	ldr	r2, [pc, #420]	; (8007b38 <UART_SetConfig+0x33c>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d130      	bne.n	80079f8 <UART_SetConfig+0x1fc>
 8007996:	4b67      	ldr	r3, [pc, #412]	; (8007b34 <UART_SetConfig+0x338>)
 8007998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800799a:	f003 0307 	and.w	r3, r3, #7
 800799e:	2b05      	cmp	r3, #5
 80079a0:	d826      	bhi.n	80079f0 <UART_SetConfig+0x1f4>
 80079a2:	a201      	add	r2, pc, #4	; (adr r2, 80079a8 <UART_SetConfig+0x1ac>)
 80079a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a8:	080079c1 	.word	0x080079c1
 80079ac:	080079c9 	.word	0x080079c9
 80079b0:	080079d1 	.word	0x080079d1
 80079b4:	080079d9 	.word	0x080079d9
 80079b8:	080079e1 	.word	0x080079e1
 80079bc:	080079e9 	.word	0x080079e9
 80079c0:	2300      	movs	r3, #0
 80079c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079c6:	e1ec      	b.n	8007da2 <UART_SetConfig+0x5a6>
 80079c8:	2304      	movs	r3, #4
 80079ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ce:	e1e8      	b.n	8007da2 <UART_SetConfig+0x5a6>
 80079d0:	2308      	movs	r3, #8
 80079d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079d6:	e1e4      	b.n	8007da2 <UART_SetConfig+0x5a6>
 80079d8:	2310      	movs	r3, #16
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079de:	e1e0      	b.n	8007da2 <UART_SetConfig+0x5a6>
 80079e0:	2320      	movs	r3, #32
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079e6:	e1dc      	b.n	8007da2 <UART_SetConfig+0x5a6>
 80079e8:	2340      	movs	r3, #64	; 0x40
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ee:	e1d8      	b.n	8007da2 <UART_SetConfig+0x5a6>
 80079f0:	2380      	movs	r3, #128	; 0x80
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079f6:	e1d4      	b.n	8007da2 <UART_SetConfig+0x5a6>
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a4f      	ldr	r2, [pc, #316]	; (8007b3c <UART_SetConfig+0x340>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d130      	bne.n	8007a64 <UART_SetConfig+0x268>
 8007a02:	4b4c      	ldr	r3, [pc, #304]	; (8007b34 <UART_SetConfig+0x338>)
 8007a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a06:	f003 0307 	and.w	r3, r3, #7
 8007a0a:	2b05      	cmp	r3, #5
 8007a0c:	d826      	bhi.n	8007a5c <UART_SetConfig+0x260>
 8007a0e:	a201      	add	r2, pc, #4	; (adr r2, 8007a14 <UART_SetConfig+0x218>)
 8007a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a14:	08007a2d 	.word	0x08007a2d
 8007a18:	08007a35 	.word	0x08007a35
 8007a1c:	08007a3d 	.word	0x08007a3d
 8007a20:	08007a45 	.word	0x08007a45
 8007a24:	08007a4d 	.word	0x08007a4d
 8007a28:	08007a55 	.word	0x08007a55
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a32:	e1b6      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007a34:	2304      	movs	r3, #4
 8007a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a3a:	e1b2      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007a3c:	2308      	movs	r3, #8
 8007a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a42:	e1ae      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007a44:	2310      	movs	r3, #16
 8007a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a4a:	e1aa      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007a4c:	2320      	movs	r3, #32
 8007a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a52:	e1a6      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007a54:	2340      	movs	r3, #64	; 0x40
 8007a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a5a:	e1a2      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007a5c:	2380      	movs	r3, #128	; 0x80
 8007a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a62:	e19e      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a35      	ldr	r2, [pc, #212]	; (8007b40 <UART_SetConfig+0x344>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d130      	bne.n	8007ad0 <UART_SetConfig+0x2d4>
 8007a6e:	4b31      	ldr	r3, [pc, #196]	; (8007b34 <UART_SetConfig+0x338>)
 8007a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	2b05      	cmp	r3, #5
 8007a78:	d826      	bhi.n	8007ac8 <UART_SetConfig+0x2cc>
 8007a7a:	a201      	add	r2, pc, #4	; (adr r2, 8007a80 <UART_SetConfig+0x284>)
 8007a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a80:	08007a99 	.word	0x08007a99
 8007a84:	08007aa1 	.word	0x08007aa1
 8007a88:	08007aa9 	.word	0x08007aa9
 8007a8c:	08007ab1 	.word	0x08007ab1
 8007a90:	08007ab9 	.word	0x08007ab9
 8007a94:	08007ac1 	.word	0x08007ac1
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a9e:	e180      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007aa0:	2304      	movs	r3, #4
 8007aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aa6:	e17c      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007aa8:	2308      	movs	r3, #8
 8007aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aae:	e178      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007ab0:	2310      	movs	r3, #16
 8007ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ab6:	e174      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007ab8:	2320      	movs	r3, #32
 8007aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007abe:	e170      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007ac0:	2340      	movs	r3, #64	; 0x40
 8007ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ac6:	e16c      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007ac8:	2380      	movs	r3, #128	; 0x80
 8007aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ace:	e168      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a1b      	ldr	r2, [pc, #108]	; (8007b44 <UART_SetConfig+0x348>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d142      	bne.n	8007b60 <UART_SetConfig+0x364>
 8007ada:	4b16      	ldr	r3, [pc, #88]	; (8007b34 <UART_SetConfig+0x338>)
 8007adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ade:	f003 0307 	and.w	r3, r3, #7
 8007ae2:	2b05      	cmp	r3, #5
 8007ae4:	d838      	bhi.n	8007b58 <UART_SetConfig+0x35c>
 8007ae6:	a201      	add	r2, pc, #4	; (adr r2, 8007aec <UART_SetConfig+0x2f0>)
 8007ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aec:	08007b05 	.word	0x08007b05
 8007af0:	08007b0d 	.word	0x08007b0d
 8007af4:	08007b15 	.word	0x08007b15
 8007af8:	08007b1d 	.word	0x08007b1d
 8007afc:	08007b49 	.word	0x08007b49
 8007b00:	08007b51 	.word	0x08007b51
 8007b04:	2300      	movs	r3, #0
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b0a:	e14a      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007b0c:	2304      	movs	r3, #4
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b12:	e146      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007b14:	2308      	movs	r3, #8
 8007b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b1a:	e142      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007b1c:	2310      	movs	r3, #16
 8007b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b22:	e13e      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007b24:	cfff69f3 	.word	0xcfff69f3
 8007b28:	58000c00 	.word	0x58000c00
 8007b2c:	11fff4ff 	.word	0x11fff4ff
 8007b30:	40011000 	.word	0x40011000
 8007b34:	58024400 	.word	0x58024400
 8007b38:	40004400 	.word	0x40004400
 8007b3c:	40004800 	.word	0x40004800
 8007b40:	40004c00 	.word	0x40004c00
 8007b44:	40005000 	.word	0x40005000
 8007b48:	2320      	movs	r3, #32
 8007b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b4e:	e128      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007b50:	2340      	movs	r3, #64	; 0x40
 8007b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b56:	e124      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007b58:	2380      	movs	r3, #128	; 0x80
 8007b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b5e:	e120      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4acb      	ldr	r2, [pc, #812]	; (8007e94 <UART_SetConfig+0x698>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d176      	bne.n	8007c58 <UART_SetConfig+0x45c>
 8007b6a:	4bcb      	ldr	r3, [pc, #812]	; (8007e98 <UART_SetConfig+0x69c>)
 8007b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b72:	2b28      	cmp	r3, #40	; 0x28
 8007b74:	d86c      	bhi.n	8007c50 <UART_SetConfig+0x454>
 8007b76:	a201      	add	r2, pc, #4	; (adr r2, 8007b7c <UART_SetConfig+0x380>)
 8007b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7c:	08007c21 	.word	0x08007c21
 8007b80:	08007c51 	.word	0x08007c51
 8007b84:	08007c51 	.word	0x08007c51
 8007b88:	08007c51 	.word	0x08007c51
 8007b8c:	08007c51 	.word	0x08007c51
 8007b90:	08007c51 	.word	0x08007c51
 8007b94:	08007c51 	.word	0x08007c51
 8007b98:	08007c51 	.word	0x08007c51
 8007b9c:	08007c29 	.word	0x08007c29
 8007ba0:	08007c51 	.word	0x08007c51
 8007ba4:	08007c51 	.word	0x08007c51
 8007ba8:	08007c51 	.word	0x08007c51
 8007bac:	08007c51 	.word	0x08007c51
 8007bb0:	08007c51 	.word	0x08007c51
 8007bb4:	08007c51 	.word	0x08007c51
 8007bb8:	08007c51 	.word	0x08007c51
 8007bbc:	08007c31 	.word	0x08007c31
 8007bc0:	08007c51 	.word	0x08007c51
 8007bc4:	08007c51 	.word	0x08007c51
 8007bc8:	08007c51 	.word	0x08007c51
 8007bcc:	08007c51 	.word	0x08007c51
 8007bd0:	08007c51 	.word	0x08007c51
 8007bd4:	08007c51 	.word	0x08007c51
 8007bd8:	08007c51 	.word	0x08007c51
 8007bdc:	08007c39 	.word	0x08007c39
 8007be0:	08007c51 	.word	0x08007c51
 8007be4:	08007c51 	.word	0x08007c51
 8007be8:	08007c51 	.word	0x08007c51
 8007bec:	08007c51 	.word	0x08007c51
 8007bf0:	08007c51 	.word	0x08007c51
 8007bf4:	08007c51 	.word	0x08007c51
 8007bf8:	08007c51 	.word	0x08007c51
 8007bfc:	08007c41 	.word	0x08007c41
 8007c00:	08007c51 	.word	0x08007c51
 8007c04:	08007c51 	.word	0x08007c51
 8007c08:	08007c51 	.word	0x08007c51
 8007c0c:	08007c51 	.word	0x08007c51
 8007c10:	08007c51 	.word	0x08007c51
 8007c14:	08007c51 	.word	0x08007c51
 8007c18:	08007c51 	.word	0x08007c51
 8007c1c:	08007c49 	.word	0x08007c49
 8007c20:	2301      	movs	r3, #1
 8007c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c26:	e0bc      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007c28:	2304      	movs	r3, #4
 8007c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c2e:	e0b8      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007c30:	2308      	movs	r3, #8
 8007c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c36:	e0b4      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007c38:	2310      	movs	r3, #16
 8007c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c3e:	e0b0      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007c40:	2320      	movs	r3, #32
 8007c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c46:	e0ac      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007c48:	2340      	movs	r3, #64	; 0x40
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c4e:	e0a8      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007c50:	2380      	movs	r3, #128	; 0x80
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c56:	e0a4      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a8f      	ldr	r2, [pc, #572]	; (8007e9c <UART_SetConfig+0x6a0>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d130      	bne.n	8007cc4 <UART_SetConfig+0x4c8>
 8007c62:	4b8d      	ldr	r3, [pc, #564]	; (8007e98 <UART_SetConfig+0x69c>)
 8007c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c66:	f003 0307 	and.w	r3, r3, #7
 8007c6a:	2b05      	cmp	r3, #5
 8007c6c:	d826      	bhi.n	8007cbc <UART_SetConfig+0x4c0>
 8007c6e:	a201      	add	r2, pc, #4	; (adr r2, 8007c74 <UART_SetConfig+0x478>)
 8007c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c74:	08007c8d 	.word	0x08007c8d
 8007c78:	08007c95 	.word	0x08007c95
 8007c7c:	08007c9d 	.word	0x08007c9d
 8007c80:	08007ca5 	.word	0x08007ca5
 8007c84:	08007cad 	.word	0x08007cad
 8007c88:	08007cb5 	.word	0x08007cb5
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c92:	e086      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007c94:	2304      	movs	r3, #4
 8007c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c9a:	e082      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007c9c:	2308      	movs	r3, #8
 8007c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ca2:	e07e      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007ca4:	2310      	movs	r3, #16
 8007ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007caa:	e07a      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007cac:	2320      	movs	r3, #32
 8007cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cb2:	e076      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007cb4:	2340      	movs	r3, #64	; 0x40
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cba:	e072      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007cbc:	2380      	movs	r3, #128	; 0x80
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cc2:	e06e      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a75      	ldr	r2, [pc, #468]	; (8007ea0 <UART_SetConfig+0x6a4>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d130      	bne.n	8007d30 <UART_SetConfig+0x534>
 8007cce:	4b72      	ldr	r3, [pc, #456]	; (8007e98 <UART_SetConfig+0x69c>)
 8007cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	2b05      	cmp	r3, #5
 8007cd8:	d826      	bhi.n	8007d28 <UART_SetConfig+0x52c>
 8007cda:	a201      	add	r2, pc, #4	; (adr r2, 8007ce0 <UART_SetConfig+0x4e4>)
 8007cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce0:	08007cf9 	.word	0x08007cf9
 8007ce4:	08007d01 	.word	0x08007d01
 8007ce8:	08007d09 	.word	0x08007d09
 8007cec:	08007d11 	.word	0x08007d11
 8007cf0:	08007d19 	.word	0x08007d19
 8007cf4:	08007d21 	.word	0x08007d21
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cfe:	e050      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007d00:	2304      	movs	r3, #4
 8007d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d06:	e04c      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007d08:	2308      	movs	r3, #8
 8007d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d0e:	e048      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007d10:	2310      	movs	r3, #16
 8007d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d16:	e044      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007d18:	2320      	movs	r3, #32
 8007d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d1e:	e040      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007d20:	2340      	movs	r3, #64	; 0x40
 8007d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d26:	e03c      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007d28:	2380      	movs	r3, #128	; 0x80
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2e:	e038      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a5b      	ldr	r2, [pc, #364]	; (8007ea4 <UART_SetConfig+0x6a8>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d130      	bne.n	8007d9c <UART_SetConfig+0x5a0>
 8007d3a:	4b57      	ldr	r3, [pc, #348]	; (8007e98 <UART_SetConfig+0x69c>)
 8007d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d3e:	f003 0307 	and.w	r3, r3, #7
 8007d42:	2b05      	cmp	r3, #5
 8007d44:	d826      	bhi.n	8007d94 <UART_SetConfig+0x598>
 8007d46:	a201      	add	r2, pc, #4	; (adr r2, 8007d4c <UART_SetConfig+0x550>)
 8007d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4c:	08007d65 	.word	0x08007d65
 8007d50:	08007d6d 	.word	0x08007d6d
 8007d54:	08007d75 	.word	0x08007d75
 8007d58:	08007d7d 	.word	0x08007d7d
 8007d5c:	08007d85 	.word	0x08007d85
 8007d60:	08007d8d 	.word	0x08007d8d
 8007d64:	2302      	movs	r3, #2
 8007d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d6a:	e01a      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007d6c:	2304      	movs	r3, #4
 8007d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d72:	e016      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007d74:	2308      	movs	r3, #8
 8007d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d7a:	e012      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007d7c:	2310      	movs	r3, #16
 8007d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d82:	e00e      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007d84:	2320      	movs	r3, #32
 8007d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d8a:	e00a      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007d8c:	2340      	movs	r3, #64	; 0x40
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d92:	e006      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007d94:	2380      	movs	r3, #128	; 0x80
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d9a:	e002      	b.n	8007da2 <UART_SetConfig+0x5a6>
 8007d9c:	2380      	movs	r3, #128	; 0x80
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a3f      	ldr	r2, [pc, #252]	; (8007ea4 <UART_SetConfig+0x6a8>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	f040 80f8 	bne.w	8007f9e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007dae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	dc46      	bgt.n	8007e44 <UART_SetConfig+0x648>
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	f2c0 8082 	blt.w	8007ec0 <UART_SetConfig+0x6c4>
 8007dbc:	3b02      	subs	r3, #2
 8007dbe:	2b1e      	cmp	r3, #30
 8007dc0:	d87e      	bhi.n	8007ec0 <UART_SetConfig+0x6c4>
 8007dc2:	a201      	add	r2, pc, #4	; (adr r2, 8007dc8 <UART_SetConfig+0x5cc>)
 8007dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc8:	08007e4b 	.word	0x08007e4b
 8007dcc:	08007ec1 	.word	0x08007ec1
 8007dd0:	08007e53 	.word	0x08007e53
 8007dd4:	08007ec1 	.word	0x08007ec1
 8007dd8:	08007ec1 	.word	0x08007ec1
 8007ddc:	08007ec1 	.word	0x08007ec1
 8007de0:	08007e63 	.word	0x08007e63
 8007de4:	08007ec1 	.word	0x08007ec1
 8007de8:	08007ec1 	.word	0x08007ec1
 8007dec:	08007ec1 	.word	0x08007ec1
 8007df0:	08007ec1 	.word	0x08007ec1
 8007df4:	08007ec1 	.word	0x08007ec1
 8007df8:	08007ec1 	.word	0x08007ec1
 8007dfc:	08007ec1 	.word	0x08007ec1
 8007e00:	08007e73 	.word	0x08007e73
 8007e04:	08007ec1 	.word	0x08007ec1
 8007e08:	08007ec1 	.word	0x08007ec1
 8007e0c:	08007ec1 	.word	0x08007ec1
 8007e10:	08007ec1 	.word	0x08007ec1
 8007e14:	08007ec1 	.word	0x08007ec1
 8007e18:	08007ec1 	.word	0x08007ec1
 8007e1c:	08007ec1 	.word	0x08007ec1
 8007e20:	08007ec1 	.word	0x08007ec1
 8007e24:	08007ec1 	.word	0x08007ec1
 8007e28:	08007ec1 	.word	0x08007ec1
 8007e2c:	08007ec1 	.word	0x08007ec1
 8007e30:	08007ec1 	.word	0x08007ec1
 8007e34:	08007ec1 	.word	0x08007ec1
 8007e38:	08007ec1 	.word	0x08007ec1
 8007e3c:	08007ec1 	.word	0x08007ec1
 8007e40:	08007eb3 	.word	0x08007eb3
 8007e44:	2b40      	cmp	r3, #64	; 0x40
 8007e46:	d037      	beq.n	8007eb8 <UART_SetConfig+0x6bc>
 8007e48:	e03a      	b.n	8007ec0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007e4a:	f7fe fca7 	bl	800679c <HAL_RCCEx_GetD3PCLK1Freq>
 8007e4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e50:	e03c      	b.n	8007ecc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe fcb6 	bl	80067c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e60:	e034      	b.n	8007ecc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e62:	f107 0318 	add.w	r3, r7, #24
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fe fe02 	bl	8006a70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e70:	e02c      	b.n	8007ecc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e72:	4b09      	ldr	r3, [pc, #36]	; (8007e98 <UART_SetConfig+0x69c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0320 	and.w	r3, r3, #32
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d016      	beq.n	8007eac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e7e:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <UART_SetConfig+0x69c>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	08db      	lsrs	r3, r3, #3
 8007e84:	f003 0303 	and.w	r3, r3, #3
 8007e88:	4a07      	ldr	r2, [pc, #28]	; (8007ea8 <UART_SetConfig+0x6ac>)
 8007e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e90:	e01c      	b.n	8007ecc <UART_SetConfig+0x6d0>
 8007e92:	bf00      	nop
 8007e94:	40011400 	.word	0x40011400
 8007e98:	58024400 	.word	0x58024400
 8007e9c:	40007800 	.word	0x40007800
 8007ea0:	40007c00 	.word	0x40007c00
 8007ea4:	58000c00 	.word	0x58000c00
 8007ea8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007eac:	4b9d      	ldr	r3, [pc, #628]	; (8008124 <UART_SetConfig+0x928>)
 8007eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eb0:	e00c      	b.n	8007ecc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007eb2:	4b9d      	ldr	r3, [pc, #628]	; (8008128 <UART_SetConfig+0x92c>)
 8007eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eb6:	e009      	b.n	8007ecc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ebe:	e005      	b.n	8007ecc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007eca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 81de 	beq.w	8008290 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed8:	4a94      	ldr	r2, [pc, #592]	; (800812c <UART_SetConfig+0x930>)
 8007eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ee2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ee6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	4613      	mov	r3, r2
 8007eee:	005b      	lsls	r3, r3, #1
 8007ef0:	4413      	add	r3, r2
 8007ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d305      	bcc.n	8007f04 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d903      	bls.n	8007f0c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007f0a:	e1c1      	b.n	8008290 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f0e:	2200      	movs	r2, #0
 8007f10:	60bb      	str	r3, [r7, #8]
 8007f12:	60fa      	str	r2, [r7, #12]
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	4a84      	ldr	r2, [pc, #528]	; (800812c <UART_SetConfig+0x930>)
 8007f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	2200      	movs	r2, #0
 8007f22:	603b      	str	r3, [r7, #0]
 8007f24:	607a      	str	r2, [r7, #4]
 8007f26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f2e:	f7f8 f9d3 	bl	80002d8 <__aeabi_uldivmod>
 8007f32:	4602      	mov	r2, r0
 8007f34:	460b      	mov	r3, r1
 8007f36:	4610      	mov	r0, r2
 8007f38:	4619      	mov	r1, r3
 8007f3a:	f04f 0200 	mov.w	r2, #0
 8007f3e:	f04f 0300 	mov.w	r3, #0
 8007f42:	020b      	lsls	r3, r1, #8
 8007f44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f48:	0202      	lsls	r2, r0, #8
 8007f4a:	6979      	ldr	r1, [r7, #20]
 8007f4c:	6849      	ldr	r1, [r1, #4]
 8007f4e:	0849      	lsrs	r1, r1, #1
 8007f50:	2000      	movs	r0, #0
 8007f52:	460c      	mov	r4, r1
 8007f54:	4605      	mov	r5, r0
 8007f56:	eb12 0804 	adds.w	r8, r2, r4
 8007f5a:	eb43 0905 	adc.w	r9, r3, r5
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	469a      	mov	sl, r3
 8007f66:	4693      	mov	fp, r2
 8007f68:	4652      	mov	r2, sl
 8007f6a:	465b      	mov	r3, fp
 8007f6c:	4640      	mov	r0, r8
 8007f6e:	4649      	mov	r1, r9
 8007f70:	f7f8 f9b2 	bl	80002d8 <__aeabi_uldivmod>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	4613      	mov	r3, r2
 8007f7a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f82:	d308      	bcc.n	8007f96 <UART_SetConfig+0x79a>
 8007f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f8a:	d204      	bcs.n	8007f96 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f92:	60da      	str	r2, [r3, #12]
 8007f94:	e17c      	b.n	8008290 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007f9c:	e178      	b.n	8008290 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fa6:	f040 80c5 	bne.w	8008134 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007faa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007fae:	2b20      	cmp	r3, #32
 8007fb0:	dc48      	bgt.n	8008044 <UART_SetConfig+0x848>
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	db7b      	blt.n	80080ae <UART_SetConfig+0x8b2>
 8007fb6:	2b20      	cmp	r3, #32
 8007fb8:	d879      	bhi.n	80080ae <UART_SetConfig+0x8b2>
 8007fba:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <UART_SetConfig+0x7c4>)
 8007fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc0:	0800804b 	.word	0x0800804b
 8007fc4:	08008053 	.word	0x08008053
 8007fc8:	080080af 	.word	0x080080af
 8007fcc:	080080af 	.word	0x080080af
 8007fd0:	0800805b 	.word	0x0800805b
 8007fd4:	080080af 	.word	0x080080af
 8007fd8:	080080af 	.word	0x080080af
 8007fdc:	080080af 	.word	0x080080af
 8007fe0:	0800806b 	.word	0x0800806b
 8007fe4:	080080af 	.word	0x080080af
 8007fe8:	080080af 	.word	0x080080af
 8007fec:	080080af 	.word	0x080080af
 8007ff0:	080080af 	.word	0x080080af
 8007ff4:	080080af 	.word	0x080080af
 8007ff8:	080080af 	.word	0x080080af
 8007ffc:	080080af 	.word	0x080080af
 8008000:	0800807b 	.word	0x0800807b
 8008004:	080080af 	.word	0x080080af
 8008008:	080080af 	.word	0x080080af
 800800c:	080080af 	.word	0x080080af
 8008010:	080080af 	.word	0x080080af
 8008014:	080080af 	.word	0x080080af
 8008018:	080080af 	.word	0x080080af
 800801c:	080080af 	.word	0x080080af
 8008020:	080080af 	.word	0x080080af
 8008024:	080080af 	.word	0x080080af
 8008028:	080080af 	.word	0x080080af
 800802c:	080080af 	.word	0x080080af
 8008030:	080080af 	.word	0x080080af
 8008034:	080080af 	.word	0x080080af
 8008038:	080080af 	.word	0x080080af
 800803c:	080080af 	.word	0x080080af
 8008040:	080080a1 	.word	0x080080a1
 8008044:	2b40      	cmp	r3, #64	; 0x40
 8008046:	d02e      	beq.n	80080a6 <UART_SetConfig+0x8aa>
 8008048:	e031      	b.n	80080ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800804a:	f7fd fc35 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 800804e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008050:	e033      	b.n	80080ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008052:	f7fd fc47 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 8008056:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008058:	e02f      	b.n	80080ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800805a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800805e:	4618      	mov	r0, r3
 8008060:	f7fe fbb2 	bl	80067c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008068:	e027      	b.n	80080ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800806a:	f107 0318 	add.w	r3, r7, #24
 800806e:	4618      	mov	r0, r3
 8008070:	f7fe fcfe 	bl	8006a70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008078:	e01f      	b.n	80080ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800807a:	4b2d      	ldr	r3, [pc, #180]	; (8008130 <UART_SetConfig+0x934>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 0320 	and.w	r3, r3, #32
 8008082:	2b00      	cmp	r3, #0
 8008084:	d009      	beq.n	800809a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008086:	4b2a      	ldr	r3, [pc, #168]	; (8008130 <UART_SetConfig+0x934>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	08db      	lsrs	r3, r3, #3
 800808c:	f003 0303 	and.w	r3, r3, #3
 8008090:	4a24      	ldr	r2, [pc, #144]	; (8008124 <UART_SetConfig+0x928>)
 8008092:	fa22 f303 	lsr.w	r3, r2, r3
 8008096:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008098:	e00f      	b.n	80080ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800809a:	4b22      	ldr	r3, [pc, #136]	; (8008124 <UART_SetConfig+0x928>)
 800809c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800809e:	e00c      	b.n	80080ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80080a0:	4b21      	ldr	r3, [pc, #132]	; (8008128 <UART_SetConfig+0x92c>)
 80080a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080a4:	e009      	b.n	80080ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080ac:	e005      	b.n	80080ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80080b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 80e7 	beq.w	8008290 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c6:	4a19      	ldr	r2, [pc, #100]	; (800812c <UART_SetConfig+0x930>)
 80080c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080cc:	461a      	mov	r2, r3
 80080ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80080d4:	005a      	lsls	r2, r3, #1
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	085b      	lsrs	r3, r3, #1
 80080dc:	441a      	add	r2, r3
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ea:	2b0f      	cmp	r3, #15
 80080ec:	d916      	bls.n	800811c <UART_SetConfig+0x920>
 80080ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080f4:	d212      	bcs.n	800811c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	f023 030f 	bic.w	r3, r3, #15
 80080fe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	085b      	lsrs	r3, r3, #1
 8008104:	b29b      	uxth	r3, r3
 8008106:	f003 0307 	and.w	r3, r3, #7
 800810a:	b29a      	uxth	r2, r3
 800810c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800810e:	4313      	orrs	r3, r2
 8008110:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008118:	60da      	str	r2, [r3, #12]
 800811a:	e0b9      	b.n	8008290 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008122:	e0b5      	b.n	8008290 <UART_SetConfig+0xa94>
 8008124:	03d09000 	.word	0x03d09000
 8008128:	003d0900 	.word	0x003d0900
 800812c:	08009064 	.word	0x08009064
 8008130:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008134:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008138:	2b20      	cmp	r3, #32
 800813a:	dc49      	bgt.n	80081d0 <UART_SetConfig+0x9d4>
 800813c:	2b00      	cmp	r3, #0
 800813e:	db7c      	blt.n	800823a <UART_SetConfig+0xa3e>
 8008140:	2b20      	cmp	r3, #32
 8008142:	d87a      	bhi.n	800823a <UART_SetConfig+0xa3e>
 8008144:	a201      	add	r2, pc, #4	; (adr r2, 800814c <UART_SetConfig+0x950>)
 8008146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814a:	bf00      	nop
 800814c:	080081d7 	.word	0x080081d7
 8008150:	080081df 	.word	0x080081df
 8008154:	0800823b 	.word	0x0800823b
 8008158:	0800823b 	.word	0x0800823b
 800815c:	080081e7 	.word	0x080081e7
 8008160:	0800823b 	.word	0x0800823b
 8008164:	0800823b 	.word	0x0800823b
 8008168:	0800823b 	.word	0x0800823b
 800816c:	080081f7 	.word	0x080081f7
 8008170:	0800823b 	.word	0x0800823b
 8008174:	0800823b 	.word	0x0800823b
 8008178:	0800823b 	.word	0x0800823b
 800817c:	0800823b 	.word	0x0800823b
 8008180:	0800823b 	.word	0x0800823b
 8008184:	0800823b 	.word	0x0800823b
 8008188:	0800823b 	.word	0x0800823b
 800818c:	08008207 	.word	0x08008207
 8008190:	0800823b 	.word	0x0800823b
 8008194:	0800823b 	.word	0x0800823b
 8008198:	0800823b 	.word	0x0800823b
 800819c:	0800823b 	.word	0x0800823b
 80081a0:	0800823b 	.word	0x0800823b
 80081a4:	0800823b 	.word	0x0800823b
 80081a8:	0800823b 	.word	0x0800823b
 80081ac:	0800823b 	.word	0x0800823b
 80081b0:	0800823b 	.word	0x0800823b
 80081b4:	0800823b 	.word	0x0800823b
 80081b8:	0800823b 	.word	0x0800823b
 80081bc:	0800823b 	.word	0x0800823b
 80081c0:	0800823b 	.word	0x0800823b
 80081c4:	0800823b 	.word	0x0800823b
 80081c8:	0800823b 	.word	0x0800823b
 80081cc:	0800822d 	.word	0x0800822d
 80081d0:	2b40      	cmp	r3, #64	; 0x40
 80081d2:	d02e      	beq.n	8008232 <UART_SetConfig+0xa36>
 80081d4:	e031      	b.n	800823a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081d6:	f7fd fb6f 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 80081da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80081dc:	e033      	b.n	8008246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081de:	f7fd fb81 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 80081e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80081e4:	e02f      	b.n	8008246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7fe faec 	bl	80067c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80081f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081f4:	e027      	b.n	8008246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081f6:	f107 0318 	add.w	r3, r7, #24
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fe fc38 	bl	8006a70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008204:	e01f      	b.n	8008246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008206:	4b2d      	ldr	r3, [pc, #180]	; (80082bc <UART_SetConfig+0xac0>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0320 	and.w	r3, r3, #32
 800820e:	2b00      	cmp	r3, #0
 8008210:	d009      	beq.n	8008226 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008212:	4b2a      	ldr	r3, [pc, #168]	; (80082bc <UART_SetConfig+0xac0>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	08db      	lsrs	r3, r3, #3
 8008218:	f003 0303 	and.w	r3, r3, #3
 800821c:	4a28      	ldr	r2, [pc, #160]	; (80082c0 <UART_SetConfig+0xac4>)
 800821e:	fa22 f303 	lsr.w	r3, r2, r3
 8008222:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008224:	e00f      	b.n	8008246 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008226:	4b26      	ldr	r3, [pc, #152]	; (80082c0 <UART_SetConfig+0xac4>)
 8008228:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800822a:	e00c      	b.n	8008246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800822c:	4b25      	ldr	r3, [pc, #148]	; (80082c4 <UART_SetConfig+0xac8>)
 800822e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008230:	e009      	b.n	8008246 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008238:	e005      	b.n	8008246 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800823a:	2300      	movs	r3, #0
 800823c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008244:	bf00      	nop
    }

    if (pclk != 0U)
 8008246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008248:	2b00      	cmp	r3, #0
 800824a:	d021      	beq.n	8008290 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008250:	4a1d      	ldr	r2, [pc, #116]	; (80082c8 <UART_SetConfig+0xacc>)
 8008252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008256:	461a      	mov	r2, r3
 8008258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800825a:	fbb3 f2f2 	udiv	r2, r3, r2
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	085b      	lsrs	r3, r3, #1
 8008264:	441a      	add	r2, r3
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	fbb2 f3f3 	udiv	r3, r2, r3
 800826e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008272:	2b0f      	cmp	r3, #15
 8008274:	d909      	bls.n	800828a <UART_SetConfig+0xa8e>
 8008276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800827c:	d205      	bcs.n	800828a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800827e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008280:	b29a      	uxth	r2, r3
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	60da      	str	r2, [r3, #12]
 8008288:	e002      	b.n	8008290 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	2201      	movs	r2, #1
 8008294:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	2201      	movs	r2, #1
 800829c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	2200      	movs	r2, #0
 80082a4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	2200      	movs	r2, #0
 80082aa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80082ac:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3748      	adds	r7, #72	; 0x48
 80082b4:	46bd      	mov	sp, r7
 80082b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082ba:	bf00      	nop
 80082bc:	58024400 	.word	0x58024400
 80082c0:	03d09000 	.word	0x03d09000
 80082c4:	003d0900 	.word	0x003d0900
 80082c8:	08009064 	.word	0x08009064

080082cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00a      	beq.n	80082f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	430a      	orrs	r2, r1
 80082f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00a      	beq.n	8008318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	430a      	orrs	r2, r1
 8008316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00a      	beq.n	800833a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	430a      	orrs	r2, r1
 8008338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833e:	f003 0308 	and.w	r3, r3, #8
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00a      	beq.n	800835c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	430a      	orrs	r2, r1
 800835a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008360:	f003 0310 	and.w	r3, r3, #16
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00a      	beq.n	800837e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	430a      	orrs	r2, r1
 800837c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008382:	f003 0320 	and.w	r3, r3, #32
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	430a      	orrs	r2, r1
 800839e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d01a      	beq.n	80083e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083ca:	d10a      	bne.n	80083e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	430a      	orrs	r2, r1
 80083e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00a      	beq.n	8008404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	430a      	orrs	r2, r1
 8008402:	605a      	str	r2, [r3, #4]
  }
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af02      	add	r7, sp, #8
 8008416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008420:	f7f8 ff34 	bl	800128c <HAL_GetTick>
 8008424:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 0308 	and.w	r3, r3, #8
 8008430:	2b08      	cmp	r3, #8
 8008432:	d10e      	bne.n	8008452 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f82f 	bl	80084a6 <UART_WaitOnFlagUntilTimeout>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800844e:	2303      	movs	r3, #3
 8008450:	e025      	b.n	800849e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0304 	and.w	r3, r3, #4
 800845c:	2b04      	cmp	r3, #4
 800845e:	d10e      	bne.n	800847e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f819 	bl	80084a6 <UART_WaitOnFlagUntilTimeout>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e00f      	b.n	800849e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2220      	movs	r2, #32
 8008482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2220      	movs	r2, #32
 800848a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b09c      	sub	sp, #112	; 0x70
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	60f8      	str	r0, [r7, #12]
 80084ae:	60b9      	str	r1, [r7, #8]
 80084b0:	603b      	str	r3, [r7, #0]
 80084b2:	4613      	mov	r3, r2
 80084b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084b6:	e0a9      	b.n	800860c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084be:	f000 80a5 	beq.w	800860c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084c2:	f7f8 fee3 	bl	800128c <HAL_GetTick>
 80084c6:	4602      	mov	r2, r0
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	1ad3      	subs	r3, r2, r3
 80084cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d302      	bcc.n	80084d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80084d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d140      	bne.n	800855a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084e0:	e853 3f00 	ldrex	r3, [r3]
 80084e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80084e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80084ec:	667b      	str	r3, [r7, #100]	; 0x64
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80084fe:	e841 2300 	strex	r3, r2, [r1]
 8008502:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e6      	bne.n	80084d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3308      	adds	r3, #8
 8008510:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008514:	e853 3f00 	ldrex	r3, [r3]
 8008518:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800851a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851c:	f023 0301 	bic.w	r3, r3, #1
 8008520:	663b      	str	r3, [r7, #96]	; 0x60
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3308      	adds	r3, #8
 8008528:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800852a:	64ba      	str	r2, [r7, #72]	; 0x48
 800852c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008530:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008532:	e841 2300 	strex	r3, r2, [r1]
 8008536:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1e5      	bne.n	800850a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2220      	movs	r2, #32
 8008542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2220      	movs	r2, #32
 800854a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	e069      	b.n	800862e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0304 	and.w	r3, r3, #4
 8008564:	2b00      	cmp	r3, #0
 8008566:	d051      	beq.n	800860c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	69db      	ldr	r3, [r3, #28]
 800856e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008576:	d149      	bne.n	800860c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008580:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858a:	e853 3f00 	ldrex	r3, [r3]
 800858e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008596:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	461a      	mov	r2, r3
 800859e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085a0:	637b      	str	r3, [r7, #52]	; 0x34
 80085a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085a8:	e841 2300 	strex	r3, r2, [r1]
 80085ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1e6      	bne.n	8008582 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	3308      	adds	r3, #8
 80085ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	e853 3f00 	ldrex	r3, [r3]
 80085c2:	613b      	str	r3, [r7, #16]
   return(result);
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	f023 0301 	bic.w	r3, r3, #1
 80085ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	3308      	adds	r3, #8
 80085d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80085d4:	623a      	str	r2, [r7, #32]
 80085d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d8:	69f9      	ldr	r1, [r7, #28]
 80085da:	6a3a      	ldr	r2, [r7, #32]
 80085dc:	e841 2300 	strex	r3, r2, [r1]
 80085e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1e5      	bne.n	80085b4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2220      	movs	r2, #32
 80085ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2220      	movs	r2, #32
 80085f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2220      	movs	r2, #32
 80085fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008608:	2303      	movs	r3, #3
 800860a:	e010      	b.n	800862e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	69da      	ldr	r2, [r3, #28]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	4013      	ands	r3, r2
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	429a      	cmp	r2, r3
 800861a:	bf0c      	ite	eq
 800861c:	2301      	moveq	r3, #1
 800861e:	2300      	movne	r3, #0
 8008620:	b2db      	uxtb	r3, r3
 8008622:	461a      	mov	r2, r3
 8008624:	79fb      	ldrb	r3, [r7, #7]
 8008626:	429a      	cmp	r2, r3
 8008628:	f43f af46 	beq.w	80084b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3770      	adds	r7, #112	; 0x70
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
	...

08008638 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008638:	b480      	push	{r7}
 800863a:	b095      	sub	sp, #84	; 0x54
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800864e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008650:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008654:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800865e:	643b      	str	r3, [r7, #64]	; 0x40
 8008660:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008664:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008666:	e841 2300 	strex	r3, r2, [r1]
 800866a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800866c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1e6      	bne.n	8008640 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	3308      	adds	r3, #8
 8008678:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867a:	6a3b      	ldr	r3, [r7, #32]
 800867c:	e853 3f00 	ldrex	r3, [r3]
 8008680:	61fb      	str	r3, [r7, #28]
   return(result);
 8008682:	69fa      	ldr	r2, [r7, #28]
 8008684:	4b1e      	ldr	r3, [pc, #120]	; (8008700 <UART_EndRxTransfer+0xc8>)
 8008686:	4013      	ands	r3, r2
 8008688:	64bb      	str	r3, [r7, #72]	; 0x48
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3308      	adds	r3, #8
 8008690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008692:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008694:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008696:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800869a:	e841 2300 	strex	r3, r2, [r1]
 800869e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1e5      	bne.n	8008672 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d118      	bne.n	80086e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	e853 3f00 	ldrex	r3, [r3]
 80086ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	f023 0310 	bic.w	r3, r3, #16
 80086c2:	647b      	str	r3, [r7, #68]	; 0x44
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	461a      	mov	r2, r3
 80086ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086cc:	61bb      	str	r3, [r7, #24]
 80086ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d0:	6979      	ldr	r1, [r7, #20]
 80086d2:	69ba      	ldr	r2, [r7, #24]
 80086d4:	e841 2300 	strex	r3, r2, [r1]
 80086d8:	613b      	str	r3, [r7, #16]
   return(result);
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1e6      	bne.n	80086ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2220      	movs	r2, #32
 80086e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80086f4:	bf00      	nop
 80086f6:	3754      	adds	r7, #84	; 0x54
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	effffffe 	.word	0xeffffffe

08008704 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008710:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f7ff f854 	bl	80077d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008728:	bf00      	nop
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b088      	sub	sp, #32
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	e853 3f00 	ldrex	r3, [r3]
 8008744:	60bb      	str	r3, [r7, #8]
   return(result);
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800874c:	61fb      	str	r3, [r7, #28]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	461a      	mov	r2, r3
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	61bb      	str	r3, [r7, #24]
 8008758:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875a:	6979      	ldr	r1, [r7, #20]
 800875c:	69ba      	ldr	r2, [r7, #24]
 800875e:	e841 2300 	strex	r3, r2, [r1]
 8008762:	613b      	str	r3, [r7, #16]
   return(result);
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1e6      	bne.n	8008738 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2220      	movs	r2, #32
 800876e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7ff f81f 	bl	80077bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800877e:	bf00      	nop
 8008780:	3720      	adds	r7, #32
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008786:	b480      	push	{r7}
 8008788:	b083      	sub	sp, #12
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800879a:	b480      	push	{r7}
 800879c:	b083      	sub	sp, #12
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80087a2:	bf00      	nop
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr

080087ae <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80087b6:	bf00      	nop
 80087b8:	370c      	adds	r7, #12
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b085      	sub	sp, #20
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d101      	bne.n	80087d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80087d4:	2302      	movs	r3, #2
 80087d6:	e027      	b.n	8008828 <HAL_UARTEx_DisableFifoMode+0x66>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2224      	movs	r2, #36	; 0x24
 80087e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f022 0201 	bic.w	r2, r2, #1
 80087fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008806:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2220      	movs	r2, #32
 800881a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3714      	adds	r7, #20
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008844:	2b01      	cmp	r3, #1
 8008846:	d101      	bne.n	800884c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008848:	2302      	movs	r3, #2
 800884a:	e02d      	b.n	80088a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2224      	movs	r2, #36	; 0x24
 8008858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f022 0201 	bic.w	r2, r2, #1
 8008872:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f84f 	bl	800892c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2220      	movs	r2, #32
 800889a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d101      	bne.n	80088c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088c4:	2302      	movs	r3, #2
 80088c6:	e02d      	b.n	8008924 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2224      	movs	r2, #36	; 0x24
 80088d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f022 0201 	bic.w	r2, r2, #1
 80088ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	430a      	orrs	r2, r1
 8008902:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f811 	bl	800892c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2220      	movs	r2, #32
 8008916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008938:	2b00      	cmp	r3, #0
 800893a:	d108      	bne.n	800894e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800894c:	e031      	b.n	80089b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800894e:	2310      	movs	r3, #16
 8008950:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008952:	2310      	movs	r3, #16
 8008954:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	0e5b      	lsrs	r3, r3, #25
 800895e:	b2db      	uxtb	r3, r3
 8008960:	f003 0307 	and.w	r3, r3, #7
 8008964:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	0f5b      	lsrs	r3, r3, #29
 800896e:	b2db      	uxtb	r3, r3
 8008970:	f003 0307 	and.w	r3, r3, #7
 8008974:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008976:	7bbb      	ldrb	r3, [r7, #14]
 8008978:	7b3a      	ldrb	r2, [r7, #12]
 800897a:	4911      	ldr	r1, [pc, #68]	; (80089c0 <UARTEx_SetNbDataToProcess+0x94>)
 800897c:	5c8a      	ldrb	r2, [r1, r2]
 800897e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008982:	7b3a      	ldrb	r2, [r7, #12]
 8008984:	490f      	ldr	r1, [pc, #60]	; (80089c4 <UARTEx_SetNbDataToProcess+0x98>)
 8008986:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008988:	fb93 f3f2 	sdiv	r3, r3, r2
 800898c:	b29a      	uxth	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	7b7a      	ldrb	r2, [r7, #13]
 8008998:	4909      	ldr	r1, [pc, #36]	; (80089c0 <UARTEx_SetNbDataToProcess+0x94>)
 800899a:	5c8a      	ldrb	r2, [r1, r2]
 800899c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80089a0:	7b7a      	ldrb	r2, [r7, #13]
 80089a2:	4908      	ldr	r1, [pc, #32]	; (80089c4 <UARTEx_SetNbDataToProcess+0x98>)
 80089a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80089b2:	bf00      	nop
 80089b4:	3714      	adds	r7, #20
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	0800907c 	.word	0x0800907c
 80089c4:	08009084 	.word	0x08009084

080089c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089c8:	b084      	sub	sp, #16
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	f107 001c 	add.w	r0, r7, #28
 80089d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d120      	bne.n	8008a22 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68da      	ldr	r2, [r3, #12]
 80089f0:	4b2a      	ldr	r3, [pc, #168]	; (8008a9c <USB_CoreInit+0xd4>)
 80089f2:	4013      	ands	r3, r2
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d105      	bne.n	8008a16 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 faac 	bl	8008f74 <USB_CoreReset>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73fb      	strb	r3, [r7, #15]
 8008a20:	e01a      	b.n	8008a58 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 faa0 	bl	8008f74 <USB_CoreReset>
 8008a34:	4603      	mov	r3, r0
 8008a36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d106      	bne.n	8008a4c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	639a      	str	r2, [r3, #56]	; 0x38
 8008a4a:	e005      	b.n	8008a58 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d116      	bne.n	8008a8c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a6c:	4b0c      	ldr	r3, [pc, #48]	; (8008aa0 <USB_CoreInit+0xd8>)
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	f043 0206 	orr.w	r2, r3, #6
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f043 0220 	orr.w	r2, r3, #32
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a98:	b004      	add	sp, #16
 8008a9a:	4770      	bx	lr
 8008a9c:	ffbdffbf 	.word	0xffbdffbf
 8008aa0:	03ee0000 	.word	0x03ee0000

08008aa4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f023 0201 	bic.w	r2, r3, #1
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b084      	sub	sp, #16
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	460b      	mov	r3, r1
 8008ad0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ae2:	78fb      	ldrb	r3, [r7, #3]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d115      	bne.n	8008b14 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008af4:	2001      	movs	r0, #1
 8008af6:	f7f8 fbd5 	bl	80012a4 <HAL_Delay>
      ms++;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	3301      	adds	r3, #1
 8008afe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fa29 	bl	8008f58 <USB_GetMode>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d01e      	beq.n	8008b4a <USB_SetCurrentMode+0x84>
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2b31      	cmp	r3, #49	; 0x31
 8008b10:	d9f0      	bls.n	8008af4 <USB_SetCurrentMode+0x2e>
 8008b12:	e01a      	b.n	8008b4a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b14:	78fb      	ldrb	r3, [r7, #3]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d115      	bne.n	8008b46 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b26:	2001      	movs	r0, #1
 8008b28:	f7f8 fbbc 	bl	80012a4 <HAL_Delay>
      ms++;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fa10 	bl	8008f58 <USB_GetMode>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d005      	beq.n	8008b4a <USB_SetCurrentMode+0x84>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2b31      	cmp	r3, #49	; 0x31
 8008b42:	d9f0      	bls.n	8008b26 <USB_SetCurrentMode+0x60>
 8008b44:	e001      	b.n	8008b4a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e005      	b.n	8008b56 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2b32      	cmp	r3, #50	; 0x32
 8008b4e:	d101      	bne.n	8008b54 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e000      	b.n	8008b56 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
	...

08008b60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b60:	b084      	sub	sp, #16
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b086      	sub	sp, #24
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	613b      	str	r3, [r7, #16]
 8008b7e:	e009      	b.n	8008b94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	3340      	adds	r3, #64	; 0x40
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	3301      	adds	r3, #1
 8008b92:	613b      	str	r3, [r7, #16]
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	2b0e      	cmp	r3, #14
 8008b98:	d9f2      	bls.n	8008b80 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d11c      	bne.n	8008bda <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bae:	f043 0302 	orr.w	r3, r3, #2
 8008bb2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	e005      	b.n	8008be6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bde:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bec:	461a      	mov	r2, r3
 8008bee:	2300      	movs	r3, #0
 8008bf0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c00:	461a      	mov	r2, r3
 8008c02:	680b      	ldr	r3, [r1, #0]
 8008c04:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d10c      	bne.n	8008c26 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d104      	bne.n	8008c1c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c12:	2100      	movs	r1, #0
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f965 	bl	8008ee4 <USB_SetDevSpeed>
 8008c1a:	e008      	b.n	8008c2e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f960 	bl	8008ee4 <USB_SetDevSpeed>
 8008c24:	e003      	b.n	8008c2e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008c26:	2103      	movs	r1, #3
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f95b 	bl	8008ee4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c2e:	2110      	movs	r1, #16
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f8f3 	bl	8008e1c <USB_FlushTxFifo>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f91f 	bl	8008e84 <USB_FlushRxFifo>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d001      	beq.n	8008c50 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c56:	461a      	mov	r2, r3
 8008c58:	2300      	movs	r3, #0
 8008c5a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c62:	461a      	mov	r2, r3
 8008c64:	2300      	movs	r3, #0
 8008c66:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c6e:	461a      	mov	r2, r3
 8008c70:	2300      	movs	r3, #0
 8008c72:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c74:	2300      	movs	r3, #0
 8008c76:	613b      	str	r3, [r7, #16]
 8008c78:	e043      	b.n	8008d02 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	015a      	lsls	r2, r3, #5
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	4413      	add	r3, r2
 8008c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c90:	d118      	bne.n	8008cc4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10a      	bne.n	8008cae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	015a      	lsls	r2, r3, #5
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008caa:	6013      	str	r3, [r2, #0]
 8008cac:	e013      	b.n	8008cd6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	015a      	lsls	r2, r3, #5
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cba:	461a      	mov	r2, r3
 8008cbc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cc0:	6013      	str	r3, [r2, #0]
 8008cc2:	e008      	b.n	8008cd6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	015a      	lsls	r2, r3, #5
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	015a      	lsls	r2, r3, #5
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008cfa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	613b      	str	r3, [r7, #16]
 8008d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d3b7      	bcc.n	8008c7a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	613b      	str	r3, [r7, #16]
 8008d0e:	e043      	b.n	8008d98 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	015a      	lsls	r2, r3, #5
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d26:	d118      	bne.n	8008d5a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10a      	bne.n	8008d44 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d40:	6013      	str	r3, [r2, #0]
 8008d42:	e013      	b.n	8008d6c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	015a      	lsls	r2, r3, #5
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d50:	461a      	mov	r2, r3
 8008d52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	e008      	b.n	8008d6c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d66:	461a      	mov	r2, r3
 8008d68:	2300      	movs	r3, #0
 8008d6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	015a      	lsls	r2, r3, #5
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	4413      	add	r3, r2
 8008d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d78:	461a      	mov	r2, r3
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	3301      	adds	r3, #1
 8008d96:	613b      	str	r3, [r7, #16]
 8008d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d3b7      	bcc.n	8008d10 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008db2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008dc0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d105      	bne.n	8008dd4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	f043 0210 	orr.w	r2, r3, #16
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	699a      	ldr	r2, [r3, #24]
 8008dd8:	4b0e      	ldr	r3, [pc, #56]	; (8008e14 <USB_DevInit+0x2b4>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d005      	beq.n	8008df2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	f043 0208 	orr.w	r2, r3, #8
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d105      	bne.n	8008e04 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	699a      	ldr	r2, [r3, #24]
 8008dfc:	4b06      	ldr	r3, [pc, #24]	; (8008e18 <USB_DevInit+0x2b8>)
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3718      	adds	r7, #24
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e10:	b004      	add	sp, #16
 8008e12:	4770      	bx	lr
 8008e14:	803c3800 	.word	0x803c3800
 8008e18:	40000004 	.word	0x40000004

08008e1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e26:	2300      	movs	r3, #0
 8008e28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4a13      	ldr	r2, [pc, #76]	; (8008e80 <USB_FlushTxFifo+0x64>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d901      	bls.n	8008e3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e01b      	b.n	8008e74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	daf2      	bge.n	8008e2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e44:	2300      	movs	r3, #0
 8008e46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	019b      	lsls	r3, r3, #6
 8008e4c:	f043 0220 	orr.w	r2, r3, #32
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	3301      	adds	r3, #1
 8008e58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	4a08      	ldr	r2, [pc, #32]	; (8008e80 <USB_FlushTxFifo+0x64>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d901      	bls.n	8008e66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e006      	b.n	8008e74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	f003 0320 	and.w	r3, r3, #32
 8008e6e:	2b20      	cmp	r3, #32
 8008e70:	d0f0      	beq.n	8008e54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	00030d40 	.word	0x00030d40

08008e84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3301      	adds	r3, #1
 8008e94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	4a11      	ldr	r2, [pc, #68]	; (8008ee0 <USB_FlushRxFifo+0x5c>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d901      	bls.n	8008ea2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e018      	b.n	8008ed4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	daf2      	bge.n	8008e90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2210      	movs	r2, #16
 8008eb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	4a08      	ldr	r2, [pc, #32]	; (8008ee0 <USB_FlushRxFifo+0x5c>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d901      	bls.n	8008ec6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e006      	b.n	8008ed4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	f003 0310 	and.w	r3, r3, #16
 8008ece:	2b10      	cmp	r3, #16
 8008ed0:	d0f0      	beq.n	8008eb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3714      	adds	r7, #20
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr
 8008ee0:	00030d40 	.word	0x00030d40

08008ee4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	78fb      	ldrb	r3, [r7, #3]
 8008efe:	68f9      	ldr	r1, [r7, #12]
 8008f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f04:	4313      	orrs	r3, r2
 8008f06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3714      	adds	r7, #20
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f16:	b480      	push	{r7}
 8008f18:	b085      	sub	sp, #20
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f30:	f023 0303 	bic.w	r3, r3, #3
 8008f34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f44:	f043 0302 	orr.w	r3, r3, #2
 8008f48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3714      	adds	r7, #20
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	695b      	ldr	r3, [r3, #20]
 8008f64:	f003 0301 	and.w	r3, r3, #1
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	3301      	adds	r3, #1
 8008f84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	4a13      	ldr	r2, [pc, #76]	; (8008fd8 <USB_CoreReset+0x64>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d901      	bls.n	8008f92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e01b      	b.n	8008fca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	daf2      	bge.n	8008f80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	f043 0201 	orr.w	r2, r3, #1
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3301      	adds	r3, #1
 8008fae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	4a09      	ldr	r2, [pc, #36]	; (8008fd8 <USB_CoreReset+0x64>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d901      	bls.n	8008fbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e006      	b.n	8008fca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d0f0      	beq.n	8008faa <USB_CoreReset+0x36>

  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	00030d40 	.word	0x00030d40

08008fdc <__libc_init_array>:
 8008fdc:	b570      	push	{r4, r5, r6, lr}
 8008fde:	4d0d      	ldr	r5, [pc, #52]	; (8009014 <__libc_init_array+0x38>)
 8008fe0:	4c0d      	ldr	r4, [pc, #52]	; (8009018 <__libc_init_array+0x3c>)
 8008fe2:	1b64      	subs	r4, r4, r5
 8008fe4:	10a4      	asrs	r4, r4, #2
 8008fe6:	2600      	movs	r6, #0
 8008fe8:	42a6      	cmp	r6, r4
 8008fea:	d109      	bne.n	8009000 <__libc_init_array+0x24>
 8008fec:	4d0b      	ldr	r5, [pc, #44]	; (800901c <__libc_init_array+0x40>)
 8008fee:	4c0c      	ldr	r4, [pc, #48]	; (8009020 <__libc_init_array+0x44>)
 8008ff0:	f000 f820 	bl	8009034 <_init>
 8008ff4:	1b64      	subs	r4, r4, r5
 8008ff6:	10a4      	asrs	r4, r4, #2
 8008ff8:	2600      	movs	r6, #0
 8008ffa:	42a6      	cmp	r6, r4
 8008ffc:	d105      	bne.n	800900a <__libc_init_array+0x2e>
 8008ffe:	bd70      	pop	{r4, r5, r6, pc}
 8009000:	f855 3b04 	ldr.w	r3, [r5], #4
 8009004:	4798      	blx	r3
 8009006:	3601      	adds	r6, #1
 8009008:	e7ee      	b.n	8008fe8 <__libc_init_array+0xc>
 800900a:	f855 3b04 	ldr.w	r3, [r5], #4
 800900e:	4798      	blx	r3
 8009010:	3601      	adds	r6, #1
 8009012:	e7f2      	b.n	8008ffa <__libc_init_array+0x1e>
 8009014:	08009094 	.word	0x08009094
 8009018:	08009094 	.word	0x08009094
 800901c:	08009094 	.word	0x08009094
 8009020:	08009098 	.word	0x08009098

08009024 <memset>:
 8009024:	4402      	add	r2, r0
 8009026:	4603      	mov	r3, r0
 8009028:	4293      	cmp	r3, r2
 800902a:	d100      	bne.n	800902e <memset+0xa>
 800902c:	4770      	bx	lr
 800902e:	f803 1b01 	strb.w	r1, [r3], #1
 8009032:	e7f9      	b.n	8009028 <memset+0x4>

08009034 <_init>:
 8009034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009036:	bf00      	nop
 8009038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903a:	bc08      	pop	{r3}
 800903c:	469e      	mov	lr, r3
 800903e:	4770      	bx	lr

08009040 <_fini>:
 8009040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009042:	bf00      	nop
 8009044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009046:	bc08      	pop	{r3}
 8009048:	469e      	mov	lr, r3
 800904a:	4770      	bx	lr
