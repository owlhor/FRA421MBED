
H745_STAMPR_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009514  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  081097b4  081097b4  000197b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08109924  08109924  00019924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810992c  0810992c  0001992c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08109930  08109930  00019930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  10000000  08109934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000410  10000078  081099a8  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  10000488  081099a8  00020488  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022dd8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000373e  00000000  00000000  00042e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001958  00000000  00000000  000465c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001800  00000000  00000000  00047f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e603  00000000  00000000  00049718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022760  00000000  00000000  00087d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00198438  00000000  00000000  000aa47b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002428b3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000070dc  00000000  00000000  00242904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000078 	.word	0x10000078
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810979c 	.word	0x0810979c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000007c 	.word	0x1000007c
 81002dc:	0810979c 	.word	0x0810979c

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_uldivmod>:
 8100390:	b953      	cbnz	r3, 81003a8 <__aeabi_uldivmod+0x18>
 8100392:	b94a      	cbnz	r2, 81003a8 <__aeabi_uldivmod+0x18>
 8100394:	2900      	cmp	r1, #0
 8100396:	bf08      	it	eq
 8100398:	2800      	cmpeq	r0, #0
 810039a:	bf1c      	itt	ne
 810039c:	f04f 31ff 	movne.w	r1, #4294967295
 81003a0:	f04f 30ff 	movne.w	r0, #4294967295
 81003a4:	f000 b974 	b.w	8100690 <__aeabi_idiv0>
 81003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 81003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003b0:	f000 f806 	bl	81003c0 <__udivmoddi4>
 81003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003bc:	b004      	add	sp, #16
 81003be:	4770      	bx	lr

081003c0 <__udivmoddi4>:
 81003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003c4:	9d08      	ldr	r5, [sp, #32]
 81003c6:	4604      	mov	r4, r0
 81003c8:	468e      	mov	lr, r1
 81003ca:	2b00      	cmp	r3, #0
 81003cc:	d14d      	bne.n	810046a <__udivmoddi4+0xaa>
 81003ce:	428a      	cmp	r2, r1
 81003d0:	4694      	mov	ip, r2
 81003d2:	d969      	bls.n	81004a8 <__udivmoddi4+0xe8>
 81003d4:	fab2 f282 	clz	r2, r2
 81003d8:	b152      	cbz	r2, 81003f0 <__udivmoddi4+0x30>
 81003da:	fa01 f302 	lsl.w	r3, r1, r2
 81003de:	f1c2 0120 	rsb	r1, r2, #32
 81003e2:	fa20 f101 	lsr.w	r1, r0, r1
 81003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 81003ea:	ea41 0e03 	orr.w	lr, r1, r3
 81003ee:	4094      	lsls	r4, r2
 81003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81003f4:	0c21      	lsrs	r1, r4, #16
 81003f6:	fbbe f6f8 	udiv	r6, lr, r8
 81003fa:	fa1f f78c 	uxth.w	r7, ip
 81003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8100402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100406:	fb06 f107 	mul.w	r1, r6, r7
 810040a:	4299      	cmp	r1, r3
 810040c:	d90a      	bls.n	8100424 <__udivmoddi4+0x64>
 810040e:	eb1c 0303 	adds.w	r3, ip, r3
 8100412:	f106 30ff 	add.w	r0, r6, #4294967295
 8100416:	f080 811f 	bcs.w	8100658 <__udivmoddi4+0x298>
 810041a:	4299      	cmp	r1, r3
 810041c:	f240 811c 	bls.w	8100658 <__udivmoddi4+0x298>
 8100420:	3e02      	subs	r6, #2
 8100422:	4463      	add	r3, ip
 8100424:	1a5b      	subs	r3, r3, r1
 8100426:	b2a4      	uxth	r4, r4
 8100428:	fbb3 f0f8 	udiv	r0, r3, r8
 810042c:	fb08 3310 	mls	r3, r8, r0, r3
 8100430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100434:	fb00 f707 	mul.w	r7, r0, r7
 8100438:	42a7      	cmp	r7, r4
 810043a:	d90a      	bls.n	8100452 <__udivmoddi4+0x92>
 810043c:	eb1c 0404 	adds.w	r4, ip, r4
 8100440:	f100 33ff 	add.w	r3, r0, #4294967295
 8100444:	f080 810a 	bcs.w	810065c <__udivmoddi4+0x29c>
 8100448:	42a7      	cmp	r7, r4
 810044a:	f240 8107 	bls.w	810065c <__udivmoddi4+0x29c>
 810044e:	4464      	add	r4, ip
 8100450:	3802      	subs	r0, #2
 8100452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100456:	1be4      	subs	r4, r4, r7
 8100458:	2600      	movs	r6, #0
 810045a:	b11d      	cbz	r5, 8100464 <__udivmoddi4+0xa4>
 810045c:	40d4      	lsrs	r4, r2
 810045e:	2300      	movs	r3, #0
 8100460:	e9c5 4300 	strd	r4, r3, [r5]
 8100464:	4631      	mov	r1, r6
 8100466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810046a:	428b      	cmp	r3, r1
 810046c:	d909      	bls.n	8100482 <__udivmoddi4+0xc2>
 810046e:	2d00      	cmp	r5, #0
 8100470:	f000 80ef 	beq.w	8100652 <__udivmoddi4+0x292>
 8100474:	2600      	movs	r6, #0
 8100476:	e9c5 0100 	strd	r0, r1, [r5]
 810047a:	4630      	mov	r0, r6
 810047c:	4631      	mov	r1, r6
 810047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100482:	fab3 f683 	clz	r6, r3
 8100486:	2e00      	cmp	r6, #0
 8100488:	d14a      	bne.n	8100520 <__udivmoddi4+0x160>
 810048a:	428b      	cmp	r3, r1
 810048c:	d302      	bcc.n	8100494 <__udivmoddi4+0xd4>
 810048e:	4282      	cmp	r2, r0
 8100490:	f200 80f9 	bhi.w	8100686 <__udivmoddi4+0x2c6>
 8100494:	1a84      	subs	r4, r0, r2
 8100496:	eb61 0303 	sbc.w	r3, r1, r3
 810049a:	2001      	movs	r0, #1
 810049c:	469e      	mov	lr, r3
 810049e:	2d00      	cmp	r5, #0
 81004a0:	d0e0      	beq.n	8100464 <__udivmoddi4+0xa4>
 81004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 81004a6:	e7dd      	b.n	8100464 <__udivmoddi4+0xa4>
 81004a8:	b902      	cbnz	r2, 81004ac <__udivmoddi4+0xec>
 81004aa:	deff      	udf	#255	; 0xff
 81004ac:	fab2 f282 	clz	r2, r2
 81004b0:	2a00      	cmp	r2, #0
 81004b2:	f040 8092 	bne.w	81005da <__udivmoddi4+0x21a>
 81004b6:	eba1 010c 	sub.w	r1, r1, ip
 81004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 81004be:	fa1f fe8c 	uxth.w	lr, ip
 81004c2:	2601      	movs	r6, #1
 81004c4:	0c20      	lsrs	r0, r4, #16
 81004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 81004ca:	fb07 1113 	mls	r1, r7, r3, r1
 81004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 81004d2:	fb0e f003 	mul.w	r0, lr, r3
 81004d6:	4288      	cmp	r0, r1
 81004d8:	d908      	bls.n	81004ec <__udivmoddi4+0x12c>
 81004da:	eb1c 0101 	adds.w	r1, ip, r1
 81004de:	f103 38ff 	add.w	r8, r3, #4294967295
 81004e2:	d202      	bcs.n	81004ea <__udivmoddi4+0x12a>
 81004e4:	4288      	cmp	r0, r1
 81004e6:	f200 80cb 	bhi.w	8100680 <__udivmoddi4+0x2c0>
 81004ea:	4643      	mov	r3, r8
 81004ec:	1a09      	subs	r1, r1, r0
 81004ee:	b2a4      	uxth	r4, r4
 81004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 81004f4:	fb07 1110 	mls	r1, r7, r0, r1
 81004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 81004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8100500:	45a6      	cmp	lr, r4
 8100502:	d908      	bls.n	8100516 <__udivmoddi4+0x156>
 8100504:	eb1c 0404 	adds.w	r4, ip, r4
 8100508:	f100 31ff 	add.w	r1, r0, #4294967295
 810050c:	d202      	bcs.n	8100514 <__udivmoddi4+0x154>
 810050e:	45a6      	cmp	lr, r4
 8100510:	f200 80bb 	bhi.w	810068a <__udivmoddi4+0x2ca>
 8100514:	4608      	mov	r0, r1
 8100516:	eba4 040e 	sub.w	r4, r4, lr
 810051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 810051e:	e79c      	b.n	810045a <__udivmoddi4+0x9a>
 8100520:	f1c6 0720 	rsb	r7, r6, #32
 8100524:	40b3      	lsls	r3, r6
 8100526:	fa22 fc07 	lsr.w	ip, r2, r7
 810052a:	ea4c 0c03 	orr.w	ip, ip, r3
 810052e:	fa20 f407 	lsr.w	r4, r0, r7
 8100532:	fa01 f306 	lsl.w	r3, r1, r6
 8100536:	431c      	orrs	r4, r3
 8100538:	40f9      	lsrs	r1, r7
 810053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 810053e:	fa00 f306 	lsl.w	r3, r0, r6
 8100542:	fbb1 f8f9 	udiv	r8, r1, r9
 8100546:	0c20      	lsrs	r0, r4, #16
 8100548:	fa1f fe8c 	uxth.w	lr, ip
 810054c:	fb09 1118 	mls	r1, r9, r8, r1
 8100550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100554:	fb08 f00e 	mul.w	r0, r8, lr
 8100558:	4288      	cmp	r0, r1
 810055a:	fa02 f206 	lsl.w	r2, r2, r6
 810055e:	d90b      	bls.n	8100578 <__udivmoddi4+0x1b8>
 8100560:	eb1c 0101 	adds.w	r1, ip, r1
 8100564:	f108 3aff 	add.w	sl, r8, #4294967295
 8100568:	f080 8088 	bcs.w	810067c <__udivmoddi4+0x2bc>
 810056c:	4288      	cmp	r0, r1
 810056e:	f240 8085 	bls.w	810067c <__udivmoddi4+0x2bc>
 8100572:	f1a8 0802 	sub.w	r8, r8, #2
 8100576:	4461      	add	r1, ip
 8100578:	1a09      	subs	r1, r1, r0
 810057a:	b2a4      	uxth	r4, r4
 810057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8100580:	fb09 1110 	mls	r1, r9, r0, r1
 8100584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100588:	fb00 fe0e 	mul.w	lr, r0, lr
 810058c:	458e      	cmp	lr, r1
 810058e:	d908      	bls.n	81005a2 <__udivmoddi4+0x1e2>
 8100590:	eb1c 0101 	adds.w	r1, ip, r1
 8100594:	f100 34ff 	add.w	r4, r0, #4294967295
 8100598:	d26c      	bcs.n	8100674 <__udivmoddi4+0x2b4>
 810059a:	458e      	cmp	lr, r1
 810059c:	d96a      	bls.n	8100674 <__udivmoddi4+0x2b4>
 810059e:	3802      	subs	r0, #2
 81005a0:	4461      	add	r1, ip
 81005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 81005a6:	fba0 9402 	umull	r9, r4, r0, r2
 81005aa:	eba1 010e 	sub.w	r1, r1, lr
 81005ae:	42a1      	cmp	r1, r4
 81005b0:	46c8      	mov	r8, r9
 81005b2:	46a6      	mov	lr, r4
 81005b4:	d356      	bcc.n	8100664 <__udivmoddi4+0x2a4>
 81005b6:	d053      	beq.n	8100660 <__udivmoddi4+0x2a0>
 81005b8:	b15d      	cbz	r5, 81005d2 <__udivmoddi4+0x212>
 81005ba:	ebb3 0208 	subs.w	r2, r3, r8
 81005be:	eb61 010e 	sbc.w	r1, r1, lr
 81005c2:	fa01 f707 	lsl.w	r7, r1, r7
 81005c6:	fa22 f306 	lsr.w	r3, r2, r6
 81005ca:	40f1      	lsrs	r1, r6
 81005cc:	431f      	orrs	r7, r3
 81005ce:	e9c5 7100 	strd	r7, r1, [r5]
 81005d2:	2600      	movs	r6, #0
 81005d4:	4631      	mov	r1, r6
 81005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81005da:	f1c2 0320 	rsb	r3, r2, #32
 81005de:	40d8      	lsrs	r0, r3
 81005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 81005e4:	fa21 f303 	lsr.w	r3, r1, r3
 81005e8:	4091      	lsls	r1, r2
 81005ea:	4301      	orrs	r1, r0
 81005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 81005f0:	fa1f fe8c 	uxth.w	lr, ip
 81005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 81005f8:	fb07 3610 	mls	r6, r7, r0, r3
 81005fc:	0c0b      	lsrs	r3, r1, #16
 81005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8100602:	fb00 f60e 	mul.w	r6, r0, lr
 8100606:	429e      	cmp	r6, r3
 8100608:	fa04 f402 	lsl.w	r4, r4, r2
 810060c:	d908      	bls.n	8100620 <__udivmoddi4+0x260>
 810060e:	eb1c 0303 	adds.w	r3, ip, r3
 8100612:	f100 38ff 	add.w	r8, r0, #4294967295
 8100616:	d22f      	bcs.n	8100678 <__udivmoddi4+0x2b8>
 8100618:	429e      	cmp	r6, r3
 810061a:	d92d      	bls.n	8100678 <__udivmoddi4+0x2b8>
 810061c:	3802      	subs	r0, #2
 810061e:	4463      	add	r3, ip
 8100620:	1b9b      	subs	r3, r3, r6
 8100622:	b289      	uxth	r1, r1
 8100624:	fbb3 f6f7 	udiv	r6, r3, r7
 8100628:	fb07 3316 	mls	r3, r7, r6, r3
 810062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100630:	fb06 f30e 	mul.w	r3, r6, lr
 8100634:	428b      	cmp	r3, r1
 8100636:	d908      	bls.n	810064a <__udivmoddi4+0x28a>
 8100638:	eb1c 0101 	adds.w	r1, ip, r1
 810063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8100640:	d216      	bcs.n	8100670 <__udivmoddi4+0x2b0>
 8100642:	428b      	cmp	r3, r1
 8100644:	d914      	bls.n	8100670 <__udivmoddi4+0x2b0>
 8100646:	3e02      	subs	r6, #2
 8100648:	4461      	add	r1, ip
 810064a:	1ac9      	subs	r1, r1, r3
 810064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8100650:	e738      	b.n	81004c4 <__udivmoddi4+0x104>
 8100652:	462e      	mov	r6, r5
 8100654:	4628      	mov	r0, r5
 8100656:	e705      	b.n	8100464 <__udivmoddi4+0xa4>
 8100658:	4606      	mov	r6, r0
 810065a:	e6e3      	b.n	8100424 <__udivmoddi4+0x64>
 810065c:	4618      	mov	r0, r3
 810065e:	e6f8      	b.n	8100452 <__udivmoddi4+0x92>
 8100660:	454b      	cmp	r3, r9
 8100662:	d2a9      	bcs.n	81005b8 <__udivmoddi4+0x1f8>
 8100664:	ebb9 0802 	subs.w	r8, r9, r2
 8100668:	eb64 0e0c 	sbc.w	lr, r4, ip
 810066c:	3801      	subs	r0, #1
 810066e:	e7a3      	b.n	81005b8 <__udivmoddi4+0x1f8>
 8100670:	4646      	mov	r6, r8
 8100672:	e7ea      	b.n	810064a <__udivmoddi4+0x28a>
 8100674:	4620      	mov	r0, r4
 8100676:	e794      	b.n	81005a2 <__udivmoddi4+0x1e2>
 8100678:	4640      	mov	r0, r8
 810067a:	e7d1      	b.n	8100620 <__udivmoddi4+0x260>
 810067c:	46d0      	mov	r8, sl
 810067e:	e77b      	b.n	8100578 <__udivmoddi4+0x1b8>
 8100680:	3b02      	subs	r3, #2
 8100682:	4461      	add	r1, ip
 8100684:	e732      	b.n	81004ec <__udivmoddi4+0x12c>
 8100686:	4630      	mov	r0, r6
 8100688:	e709      	b.n	810049e <__udivmoddi4+0xde>
 810068a:	4464      	add	r4, ip
 810068c:	3802      	subs	r0, #2
 810068e:	e742      	b.n	8100516 <__udivmoddi4+0x156>

08100690 <__aeabi_idiv0>:
 8100690:	4770      	bx	lr
 8100692:	bf00      	nop

08100694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100694:	b480      	push	{r7}
 8100696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100698:	4b09      	ldr	r3, [pc, #36]	; (81006c0 <SystemInit+0x2c>)
 810069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810069e:	4a08      	ldr	r2, [pc, #32]	; (81006c0 <SystemInit+0x2c>)
 81006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81006a8:	4b05      	ldr	r3, [pc, #20]	; (81006c0 <SystemInit+0x2c>)
 81006aa:	691b      	ldr	r3, [r3, #16]
 81006ac:	4a04      	ldr	r2, [pc, #16]	; (81006c0 <SystemInit+0x2c>)
 81006ae:	f043 0310 	orr.w	r3, r3, #16
 81006b2:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81006b4:	bf00      	nop
 81006b6:	46bd      	mov	sp, r7
 81006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006bc:	4770      	bx	lr
 81006be:	bf00      	nop
 81006c0:	e000ed00 	.word	0xe000ed00

081006c4 <DS3231_Read>:
#ifdef ExRTC_IS_DS3231

DS3231_RG_Strc ERTC_lg;


void DS3231_Read(I2C_HandleTypeDef *hi2c){
 81006c4:	b580      	push	{r7, lr}
 81006c6:	b086      	sub	sp, #24
 81006c8:	af04      	add	r7, sp, #16
 81006ca:	6078      	str	r0, [r7, #4]
	/* Check by use "ERTC_lg" in live expression
	 * ex. S3231_Read(&hi2c2);
	 * */
	if(hi2c->State == HAL_I2C_STATE_READY){
 81006cc:	687b      	ldr	r3, [r7, #4]
 81006ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81006d2:	b2db      	uxtb	r3, r3
 81006d4:	2b20      	cmp	r3, #32
 81006d6:	d10b      	bne.n	81006f0 <DS3231_Read+0x2c>
		HAL_I2C_Mem_Read(hi2c, DS_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT,
 81006d8:	2364      	movs	r3, #100	; 0x64
 81006da:	9302      	str	r3, [sp, #8]
 81006dc:	2313      	movs	r3, #19
 81006de:	9301      	str	r3, [sp, #4]
 81006e0:	4b05      	ldr	r3, [pc, #20]	; (81006f8 <DS3231_Read+0x34>)
 81006e2:	9300      	str	r3, [sp, #0]
 81006e4:	2301      	movs	r3, #1
 81006e6:	2200      	movs	r2, #0
 81006e8:	21d0      	movs	r1, #208	; 0xd0
 81006ea:	6878      	ldr	r0, [r7, #4]
 81006ec:	f003 fb98 	bl	8103e20 <HAL_I2C_Mem_Read>
				&ERTC_lg.D8[0], 19, 100);
	}

}
 81006f0:	bf00      	nop
 81006f2:	3708      	adds	r7, #8
 81006f4:	46bd      	mov	sp, r7
 81006f6:	bd80      	pop	{r7, pc}
 81006f8:	10000094 	.word	0x10000094

081006fc <EXIN_RTC_SYNC>:


//// Sync timevalue when boot(in case Vbat is not powered)
void EXIN_RTC_SYNC(I2C_HandleTypeDef *hi2c, RTC_HandleTypeDef *hrtc){
 81006fc:	b580      	push	{r7, lr}
 81006fe:	b088      	sub	sp, #32
 8100700:	af00      	add	r7, sp, #0
 8100702:	6078      	str	r0, [r7, #4]
 8100704:	6039      	str	r1, [r7, #0]
	DS3231_Read(hi2c);
 8100706:	6878      	ldr	r0, [r7, #4]
 8100708:	f7ff ffdc 	bl	81006c4 <DS3231_Read>

	RTC_TimeTypeDef sTime={0};
 810070c:	f107 030c 	add.w	r3, r7, #12
 8100710:	2200      	movs	r2, #0
 8100712:	601a      	str	r2, [r3, #0]
 8100714:	605a      	str	r2, [r3, #4]
 8100716:	609a      	str	r2, [r3, #8]
 8100718:	60da      	str	r2, [r3, #12]
 810071a:	611a      	str	r2, [r3, #16]
	sTime.Hours = ERTC_lg.DS3231RG.hour; //
 810071c:	4b18      	ldr	r3, [pc, #96]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 810071e:	789b      	ldrb	r3, [r3, #2]
 8100720:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8100724:	b2db      	uxtb	r3, r3
 8100726:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ERTC_lg.DS3231RG.min;
 8100728:	4b15      	ldr	r3, [pc, #84]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 810072a:	785b      	ldrb	r3, [r3, #1]
 810072c:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ERTC_lg.DS3231RG.sec;
 810072e:	4b14      	ldr	r3, [pc, #80]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 8100730:	781b      	ldrb	r3, [r3, #0]
 8100732:	73bb      	strb	r3, [r7, #14]

	HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BCD);
 8100734:	f107 030c 	add.w	r3, r7, #12
 8100738:	2201      	movs	r2, #1
 810073a:	4619      	mov	r1, r3
 810073c:	6838      	ldr	r0, [r7, #0]
 810073e:	f005 fdb3 	bl	81062a8 <HAL_RTC_SetTime>

	RTC_DateTypeDef sDate ={0};
 8100742:	2300      	movs	r3, #0
 8100744:	60bb      	str	r3, [r7, #8]
	sDate.Date = ERTC_lg.DS3231RG.date;
 8100746:	4b0e      	ldr	r3, [pc, #56]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 8100748:	791b      	ldrb	r3, [r3, #4]
 810074a:	72bb      	strb	r3, [r7, #10]
	sDate.Month = ERTC_lg.DS3231RG.month;
 810074c:	4b0c      	ldr	r3, [pc, #48]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 810074e:	795b      	ldrb	r3, [r3, #5]
 8100750:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8100754:	b2db      	uxtb	r3, r3
 8100756:	727b      	strb	r3, [r7, #9]
	sDate.WeekDay = ERTC_lg.DS3231RG.wkday;
 8100758:	4b09      	ldr	r3, [pc, #36]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 810075a:	78db      	ldrb	r3, [r3, #3]
 810075c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8100760:	b2db      	uxtb	r3, r3
 8100762:	723b      	strb	r3, [r7, #8]
	sDate.Year = ERTC_lg.DS3231RG.year;
 8100764:	4b06      	ldr	r3, [pc, #24]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 8100766:	799b      	ldrb	r3, [r3, #6]
 8100768:	72fb      	strb	r3, [r7, #11]

	HAL_RTC_SetDate(hrtc, &sDate, RTC_FORMAT_BCD);
 810076a:	f107 0308 	add.w	r3, r7, #8
 810076e:	2201      	movs	r2, #1
 8100770:	4619      	mov	r1, r3
 8100772:	6838      	ldr	r0, [r7, #0]
 8100774:	f005 fe91 	bl	810649a <HAL_RTC_SetDate>
}
 8100778:	bf00      	nop
 810077a:	3720      	adds	r7, #32
 810077c:	46bd      	mov	sp, r7
 810077e:	bd80      	pop	{r7, pc}
 8100780:	10000094 	.word	0x10000094

08100784 <Write_MFRC522>:
 * Function Nameï¼šWrite_MFRC5200
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parametersï¼šaddr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(u_char addr, u_char val) {
 8100784:	b580      	push	{r7, lr}
 8100786:	b084      	sub	sp, #16
 8100788:	af00      	add	r7, sp, #0
 810078a:	4603      	mov	r3, r0
 810078c:	460a      	mov	r2, r1
 810078e:	71fb      	strb	r3, [r7, #7]
 8100790:	4613      	mov	r3, r2
 8100792:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	  u_char addr_bits = (((addr<<1) & 0x7E)); //// 8.1.2.3 read = 1/ write = 0[1] + addr[6] + 0[1]
 8100794:	79fb      	ldrb	r3, [r7, #7]
 8100796:	005b      	lsls	r3, r3, #1
 8100798:	b2db      	uxtb	r3, r3
 810079a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 810079e:	b2db      	uxtb	r3, r3
 81007a0:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;

#ifdef MFRC522_SPI_HWOUT_NSS_DIS
////  set the select line so we can start transferring
////  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 81007a2:	2200      	movs	r2, #0
 81007a4:	2110      	movs	r1, #16
 81007a6:	480d      	ldr	r0, [pc, #52]	; (81007dc <Write_MFRC522+0x58>)
 81007a8:	f003 fa12 	bl	8103bd0 <HAL_GPIO_WritePin>
   - bottom 8 bits are the data bits being sent for that address, we send
     them as is
   */
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi2, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&MFRC522_SPI_PORT, &addr_bits, 1, 500);
 81007ac:	f107 010f 	add.w	r1, r7, #15
 81007b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 81007b4:	2201      	movs	r2, #1
 81007b6:	480a      	ldr	r0, [pc, #40]	; (81007e0 <Write_MFRC522+0x5c>)
 81007b8:	f006 f95e 	bl	8106a78 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&MFRC522_SPI_PORT, &val, 1, 500);
 81007bc:	1db9      	adds	r1, r7, #6
 81007be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 81007c2:	2201      	movs	r2, #1
 81007c4:	4806      	ldr	r0, [pc, #24]	; (81007e0 <Write_MFRC522+0x5c>)
 81007c6:	f006 f957 	bl	8106a78 <HAL_SPI_Transmit>
  //HAL_SPI_TransmitReceive(&MFRC522_SPI_PORT, pTxData, pRxData, Size, Timeout);

#ifdef MFRC522_SPI_HWOUT_NSS_DIS
  //// clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 81007ca:	2201      	movs	r2, #1
 81007cc:	2110      	movs	r1, #16
 81007ce:	4803      	ldr	r0, [pc, #12]	; (81007dc <Write_MFRC522+0x58>)
 81007d0:	f003 f9fe 	bl	8103bd0 <HAL_GPIO_WritePin>
#endif
  //// burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 81007d4:	bf00      	nop
 81007d6:	3710      	adds	r7, #16
 81007d8:	46bd      	mov	sp, r7
 81007da:	bd80      	pop	{r7, pc}
 81007dc:	58021000 	.word	0x58021000
 81007e0:	10000164 	.word	0x10000164

081007e4 <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 81007e4:	b580      	push	{r7, lr}
 81007e6:	b084      	sub	sp, #16
 81007e8:	af00      	add	r7, sp, #0
 81007ea:	4603      	mov	r3, r0
 81007ec:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80); ////  8.1.2.3  read = 1/ write = 0[1] + addr[6] + 0[1]
 81007ee:	79fb      	ldrb	r3, [r7, #7]
 81007f0:	005b      	lsls	r3, r3, #1
 81007f2:	b25b      	sxtb	r3, r3
 81007f4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 81007f8:	b25b      	sxtb	r3, r3
 81007fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81007fe:	b25b      	sxtb	r3, r3
 8100800:	b2db      	uxtb	r3, r3
 8100802:	73bb      	strb	r3, [r7, #14]

#ifdef MFRC522_SPI_HWOUT_NSS_DIS
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8100804:	2200      	movs	r2, #0
 8100806:	2110      	movs	r1, #16
 8100808:	480e      	ldr	r0, [pc, #56]	; (8100844 <Read_MFRC522+0x60>)
 810080a:	f003 f9e1 	bl	8103bd0 <HAL_GPIO_WritePin>
  //// - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
  */
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi2, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi2, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
  HAL_SPI_Transmit(&MFRC522_SPI_PORT, &addr_bits, 1, 500);
 810080e:	f107 010e 	add.w	r1, r7, #14
 8100812:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8100816:	2201      	movs	r2, #1
 8100818:	480b      	ldr	r0, [pc, #44]	; (8100848 <Read_MFRC522+0x64>)
 810081a:	f006 f92d 	bl	8106a78 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&MFRC522_SPI_PORT, &rx_bits, 1, 500);
 810081e:	f107 010f 	add.w	r1, r7, #15
 8100822:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8100826:	2201      	movs	r2, #1
 8100828:	4807      	ldr	r0, [pc, #28]	; (8100848 <Read_MFRC522+0x64>)
 810082a:	f006 fb13 	bl	8106e54 <HAL_SPI_Receive>
  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
#ifdef MFRC522_SPI_HWOUT_NSS_DIS
  //// NSS pin trig using Hardware output NSS signal / setting at ioc
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 810082e:	2201      	movs	r2, #1
 8100830:	2110      	movs	r1, #16
 8100832:	4804      	ldr	r0, [pc, #16]	; (8100844 <Read_MFRC522+0x60>)
 8100834:	f003 f9cc 	bl	8103bd0 <HAL_GPIO_WritePin>
#endif
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8100838:	7bfb      	ldrb	r3, [r7, #15]
}
 810083a:	4618      	mov	r0, r3
 810083c:	3710      	adds	r7, #16
 810083e:	46bd      	mov	sp, r7
 8100840:	bd80      	pop	{r7, pc}
 8100842:	bf00      	nop
 8100844:	58021000 	.word	0x58021000
 8100848:	10000164 	.word	0x10000164

0810084c <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 810084c:	b580      	push	{r7, lr}
 810084e:	b084      	sub	sp, #16
 8100850:	af00      	add	r7, sp, #0
 8100852:	4603      	mov	r3, r0
 8100854:	460a      	mov	r2, r1
 8100856:	71fb      	strb	r3, [r7, #7]
 8100858:	4613      	mov	r3, r2
 810085a:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 810085c:	79fb      	ldrb	r3, [r7, #7]
 810085e:	4618      	mov	r0, r3
 8100860:	f7ff ffc0 	bl	81007e4 <Read_MFRC522>
 8100864:	4603      	mov	r3, r0
 8100866:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8100868:	7bfa      	ldrb	r2, [r7, #15]
 810086a:	79bb      	ldrb	r3, [r7, #6]
 810086c:	4313      	orrs	r3, r2
 810086e:	b2da      	uxtb	r2, r3
 8100870:	79fb      	ldrb	r3, [r7, #7]
 8100872:	4611      	mov	r1, r2
 8100874:	4618      	mov	r0, r3
 8100876:	f7ff ff85 	bl	8100784 <Write_MFRC522>
}
 810087a:	bf00      	nop
 810087c:	3710      	adds	r7, #16
 810087e:	46bd      	mov	sp, r7
 8100880:	bd80      	pop	{r7, pc}

08100882 <ClearBitMask>:
 * 				read current bit then add preferred bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 8100882:	b580      	push	{r7, lr}
 8100884:	b084      	sub	sp, #16
 8100886:	af00      	add	r7, sp, #0
 8100888:	4603      	mov	r3, r0
 810088a:	460a      	mov	r2, r1
 810088c:	71fb      	strb	r3, [r7, #7]
 810088e:	4613      	mov	r3, r2
 8100890:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 8100892:	79fb      	ldrb	r3, [r7, #7]
 8100894:	4618      	mov	r0, r3
 8100896:	f7ff ffa5 	bl	81007e4 <Read_MFRC522>
 810089a:	4603      	mov	r3, r0
 810089c:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 810089e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 81008a2:	43db      	mvns	r3, r3
 81008a4:	b25a      	sxtb	r2, r3
 81008a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81008aa:	4013      	ands	r3, r2
 81008ac:	b25b      	sxtb	r3, r3
 81008ae:	b2da      	uxtb	r2, r3
 81008b0:	79fb      	ldrb	r3, [r7, #7]
 81008b2:	4611      	mov	r1, r2
 81008b4:	4618      	mov	r0, r3
 81008b6:	f7ff ff65 	bl	8100784 <Write_MFRC522>
}
 81008ba:	bf00      	nop
 81008bc:	3710      	adds	r7, #16
 81008be:	46bd      	mov	sp, r7
 81008c0:	bd80      	pop	{r7, pc}

081008c2 <AntennaOn>:
 * 				Set 1 to Tx1RFEn, Tx2RFEn
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 81008c2:	b580      	push	{r7, lr}
 81008c4:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 81008c6:	2103      	movs	r1, #3
 81008c8:	2014      	movs	r0, #20
 81008ca:	f7ff ffbf 	bl	810084c <SetBitMask>
}
 81008ce:	bf00      	nop
 81008d0:	bd80      	pop	{r7, pc}

081008d2 <MFRC522_Reset>:
 * 				Soft reset, 10.3 Table 149
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 81008d2:	b580      	push	{r7, lr}
 81008d4:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 81008d6:	210f      	movs	r1, #15
 81008d8:	2001      	movs	r0, #1
 81008da:	f7ff ff53 	bl	8100784 <Write_MFRC522>
}
 81008de:	bf00      	nop
 81008e0:	bd80      	pop	{r7, pc}

081008e2 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 81008e2:	b580      	push	{r7, lr}
 81008e4:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  MFRC522_Reset();
 81008e6:	f7ff fff4 	bl	81008d2 <MFRC522_Reset>

  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto = 1; f(Timer) = 6.78MHz/TPreScaler
 81008ea:	2180      	movs	r1, #128	; 0x80
 81008ec:	202a      	movs	r0, #42	; 0x2a
 81008ee:	f7ff ff49 	bl	8100784 <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 81008f2:	21a9      	movs	r1, #169	; 0xa9
 81008f4:	202b      	movs	r0, #43	; 0x2b
 81008f6:	f7ff ff45 	bl	8100784 <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 81008fa:	2103      	movs	r1, #3
 81008fc:	202d      	movs	r0, #45	; 0x2d
 81008fe:	f7ff ff41 	bl	8100784 <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 8100902:	21e8      	movs	r1, #232	; 0xe8
 8100904:	202c      	movs	r0, #44	; 0x2c
 8100906:	f7ff ff3d 	bl	8100784 <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 810090a:	2140      	movs	r1, #64	; 0x40
 810090c:	2015      	movs	r0, #21
 810090e:	f7ff ff39 	bl	8100784 <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 8100912:	213d      	movs	r1, #61	; 0x3d
 8100914:	2011      	movs	r0, #17
 8100916:	f7ff ff35 	bl	8100784 <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 810091a:	f7ff ffd2 	bl	81008c2 <AntennaOn>
}
 810091e:	bf00      	nop
 8100920:	bd80      	pop	{r7, pc}

08100922 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 8100922:	b580      	push	{r7, lr}
 8100924:	b086      	sub	sp, #24
 8100926:	af02      	add	r7, sp, #8
 8100928:	4603      	mov	r3, r0
 810092a:	6039      	str	r1, [r7, #0]
 810092c:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 810092e:	2107      	movs	r1, #7
 8100930:	200d      	movs	r0, #13
 8100932:	f7ff ff27 	bl	8100784 <Write_MFRC522>

  TagType[0] = reqMode;
 8100936:	683b      	ldr	r3, [r7, #0]
 8100938:	79fa      	ldrb	r2, [r7, #7]
 810093a:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 810093c:	f107 0308 	add.w	r3, r7, #8
 8100940:	9300      	str	r3, [sp, #0]
 8100942:	683b      	ldr	r3, [r7, #0]
 8100944:	2201      	movs	r2, #1
 8100946:	6839      	ldr	r1, [r7, #0]
 8100948:	200c      	movs	r0, #12
 810094a:	f000 f80f 	bl	810096c <MFRC522_ToCard>
 810094e:	4603      	mov	r3, r0
 8100950:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 8100952:	7bfb      	ldrb	r3, [r7, #15]
 8100954:	2b00      	cmp	r3, #0
 8100956:	d102      	bne.n	810095e <MFRC522_Request+0x3c>
 8100958:	68bb      	ldr	r3, [r7, #8]
 810095a:	2b10      	cmp	r3, #16
 810095c:	d001      	beq.n	8100962 <MFRC522_Request+0x40>
    status = MI_ERR;
 810095e:	2302      	movs	r3, #2
 8100960:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8100962:	7bfb      	ldrb	r3, [r7, #15]
}
 8100964:	4618      	mov	r0, r3
 8100966:	3710      	adds	r7, #16
 8100968:	46bd      	mov	sp, r7
 810096a:	bd80      	pop	{r7, pc}

0810096c <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 810096c:	b590      	push	{r4, r7, lr}
 810096e:	b089      	sub	sp, #36	; 0x24
 8100970:	af00      	add	r7, sp, #0
 8100972:	60b9      	str	r1, [r7, #8]
 8100974:	607b      	str	r3, [r7, #4]
 8100976:	4603      	mov	r3, r0
 8100978:	73fb      	strb	r3, [r7, #15]
 810097a:	4613      	mov	r3, r2
 810097c:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 810097e:	2302      	movs	r3, #2
 8100980:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 8100982:	2300      	movs	r3, #0
 8100984:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 8100986:	2300      	movs	r3, #0
 8100988:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 810098a:	7bfb      	ldrb	r3, [r7, #15]
 810098c:	2b0c      	cmp	r3, #12
 810098e:	d006      	beq.n	810099e <MFRC522_ToCard+0x32>
 8100990:	2b0e      	cmp	r3, #14
 8100992:	d109      	bne.n	81009a8 <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 8100994:	2312      	movs	r3, #18
 8100996:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 8100998:	2310      	movs	r3, #16
 810099a:	777b      	strb	r3, [r7, #29]
        break;
 810099c:	e005      	b.n	81009aa <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 810099e:	2377      	movs	r3, #119	; 0x77
 81009a0:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 81009a2:	2330      	movs	r3, #48	; 0x30
 81009a4:	777b      	strb	r3, [r7, #29]
        break;
 81009a6:	e000      	b.n	81009aa <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 81009a8:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 81009aa:	7fbb      	ldrb	r3, [r7, #30]
 81009ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81009b0:	b2db      	uxtb	r3, r3
 81009b2:	4619      	mov	r1, r3
 81009b4:	2002      	movs	r0, #2
 81009b6:	f7ff fee5 	bl	8100784 <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 81009ba:	2180      	movs	r1, #128	; 0x80
 81009bc:	2004      	movs	r0, #4
 81009be:	f7ff ff60 	bl	8100882 <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 81009c2:	2180      	movs	r1, #128	; 0x80
 81009c4:	200a      	movs	r0, #10
 81009c6:	f7ff ff41 	bl	810084c <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 81009ca:	2100      	movs	r1, #0
 81009cc:	2001      	movs	r0, #1
 81009ce:	f7ff fed9 	bl	8100784 <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 81009d2:	2300      	movs	r3, #0
 81009d4:	61bb      	str	r3, [r7, #24]
 81009d6:	e00a      	b.n	81009ee <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 81009d8:	68ba      	ldr	r2, [r7, #8]
 81009da:	69bb      	ldr	r3, [r7, #24]
 81009dc:	4413      	add	r3, r2
 81009de:	781b      	ldrb	r3, [r3, #0]
 81009e0:	4619      	mov	r1, r3
 81009e2:	2009      	movs	r0, #9
 81009e4:	f7ff fece 	bl	8100784 <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 81009e8:	69bb      	ldr	r3, [r7, #24]
 81009ea:	3301      	adds	r3, #1
 81009ec:	61bb      	str	r3, [r7, #24]
 81009ee:	7bbb      	ldrb	r3, [r7, #14]
 81009f0:	69ba      	ldr	r2, [r7, #24]
 81009f2:	429a      	cmp	r2, r3
 81009f4:	d3f0      	bcc.n	81009d8 <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 81009f6:	7bfb      	ldrb	r3, [r7, #15]
 81009f8:	4619      	mov	r1, r3
 81009fa:	2001      	movs	r0, #1
 81009fc:	f7ff fec2 	bl	8100784 <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 8100a00:	7bfb      	ldrb	r3, [r7, #15]
 8100a02:	2b0c      	cmp	r3, #12
 8100a04:	d103      	bne.n	8100a0e <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 8100a06:	2180      	movs	r1, #128	; 0x80
 8100a08:	200d      	movs	r0, #13
 8100a0a:	f7ff ff1f 	bl	810084c <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8100a0e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8100a12:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 8100a14:	2004      	movs	r0, #4
 8100a16:	f7ff fee5 	bl	81007e4 <Read_MFRC522>
 8100a1a:	4603      	mov	r3, r0
 8100a1c:	773b      	strb	r3, [r7, #28]
    i--;
 8100a1e:	69bb      	ldr	r3, [r7, #24]
 8100a20:	3b01      	subs	r3, #1
 8100a22:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8100a24:	69bb      	ldr	r3, [r7, #24]
 8100a26:	2b00      	cmp	r3, #0
 8100a28:	d00a      	beq.n	8100a40 <MFRC522_ToCard+0xd4>
 8100a2a:	7f3b      	ldrb	r3, [r7, #28]
 8100a2c:	f003 0301 	and.w	r3, r3, #1
 8100a30:	2b00      	cmp	r3, #0
 8100a32:	d105      	bne.n	8100a40 <MFRC522_ToCard+0xd4>
 8100a34:	7f3a      	ldrb	r2, [r7, #28]
 8100a36:	7f7b      	ldrb	r3, [r7, #29]
 8100a38:	4013      	ands	r3, r2
 8100a3a:	b2db      	uxtb	r3, r3
 8100a3c:	2b00      	cmp	r3, #0
 8100a3e:	d0e9      	beq.n	8100a14 <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 8100a40:	2180      	movs	r1, #128	; 0x80
 8100a42:	200d      	movs	r0, #13
 8100a44:	f7ff ff1d 	bl	8100882 <ClearBitMask>

  if (i != 0)
 8100a48:	69bb      	ldr	r3, [r7, #24]
 8100a4a:	2b00      	cmp	r3, #0
 8100a4c:	d052      	beq.n	8100af4 <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 8100a4e:	2006      	movs	r0, #6
 8100a50:	f7ff fec8 	bl	81007e4 <Read_MFRC522>
 8100a54:	4603      	mov	r3, r0
 8100a56:	f003 031b 	and.w	r3, r3, #27
 8100a5a:	2b00      	cmp	r3, #0
 8100a5c:	d148      	bne.n	8100af0 <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 8100a5e:	2300      	movs	r3, #0
 8100a60:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 8100a62:	7f3a      	ldrb	r2, [r7, #28]
 8100a64:	7fbb      	ldrb	r3, [r7, #30]
 8100a66:	4013      	ands	r3, r2
 8100a68:	b2db      	uxtb	r3, r3
 8100a6a:	f003 0301 	and.w	r3, r3, #1
 8100a6e:	2b00      	cmp	r3, #0
 8100a70:	d001      	beq.n	8100a76 <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 8100a72:	2301      	movs	r3, #1
 8100a74:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 8100a76:	7bfb      	ldrb	r3, [r7, #15]
 8100a78:	2b0c      	cmp	r3, #12
 8100a7a:	d13b      	bne.n	8100af4 <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 8100a7c:	200a      	movs	r0, #10
 8100a7e:	f7ff feb1 	bl	81007e4 <Read_MFRC522>
 8100a82:	4603      	mov	r3, r0
 8100a84:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8100a86:	200c      	movs	r0, #12
 8100a88:	f7ff feac 	bl	81007e4 <Read_MFRC522>
 8100a8c:	4603      	mov	r3, r0
 8100a8e:	f003 0307 	and.w	r3, r3, #7
 8100a92:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 8100a94:	7dfb      	ldrb	r3, [r7, #23]
 8100a96:	2b00      	cmp	r3, #0
 8100a98:	d008      	beq.n	8100aac <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 8100a9a:	7f3b      	ldrb	r3, [r7, #28]
 8100a9c:	3b01      	subs	r3, #1
 8100a9e:	00da      	lsls	r2, r3, #3
 8100aa0:	7dfb      	ldrb	r3, [r7, #23]
 8100aa2:	4413      	add	r3, r2
 8100aa4:	461a      	mov	r2, r3
 8100aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100aa8:	601a      	str	r2, [r3, #0]
 8100aaa:	e004      	b.n	8100ab6 <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 8100aac:	7f3b      	ldrb	r3, [r7, #28]
 8100aae:	00db      	lsls	r3, r3, #3
 8100ab0:	461a      	mov	r2, r3
 8100ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100ab4:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 8100ab6:	7f3b      	ldrb	r3, [r7, #28]
 8100ab8:	2b00      	cmp	r3, #0
 8100aba:	d101      	bne.n	8100ac0 <MFRC522_ToCard+0x154>
        {
          n = 1;
 8100abc:	2301      	movs	r3, #1
 8100abe:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 8100ac0:	7f3b      	ldrb	r3, [r7, #28]
 8100ac2:	2b10      	cmp	r3, #16
 8100ac4:	d901      	bls.n	8100aca <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 8100ac6:	2310      	movs	r3, #16
 8100ac8:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 8100aca:	2300      	movs	r3, #0
 8100acc:	61bb      	str	r3, [r7, #24]
 8100ace:	e00a      	b.n	8100ae6 <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 8100ad0:	687a      	ldr	r2, [r7, #4]
 8100ad2:	69bb      	ldr	r3, [r7, #24]
 8100ad4:	18d4      	adds	r4, r2, r3
 8100ad6:	2009      	movs	r0, #9
 8100ad8:	f7ff fe84 	bl	81007e4 <Read_MFRC522>
 8100adc:	4603      	mov	r3, r0
 8100ade:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 8100ae0:	69bb      	ldr	r3, [r7, #24]
 8100ae2:	3301      	adds	r3, #1
 8100ae4:	61bb      	str	r3, [r7, #24]
 8100ae6:	7f3b      	ldrb	r3, [r7, #28]
 8100ae8:	69ba      	ldr	r2, [r7, #24]
 8100aea:	429a      	cmp	r2, r3
 8100aec:	d3f0      	bcc.n	8100ad0 <MFRC522_ToCard+0x164>
 8100aee:	e001      	b.n	8100af4 <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 8100af0:	2302      	movs	r3, #2
 8100af2:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 8100af4:	7ffb      	ldrb	r3, [r7, #31]
}
 8100af6:	4618      	mov	r0, r3
 8100af8:	3724      	adds	r7, #36	; 0x24
 8100afa:	46bd      	mov	sp, r7
 8100afc:	bd90      	pop	{r4, r7, pc}

08100afe <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 8100afe:	b580      	push	{r7, lr}
 8100b00:	b086      	sub	sp, #24
 8100b02:	af02      	add	r7, sp, #8
 8100b04:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 8100b06:	2300      	movs	r3, #0
 8100b08:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8100b0a:	2100      	movs	r1, #0
 8100b0c:	200d      	movs	r0, #13
 8100b0e:	f7ff fe39 	bl	8100784 <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 8100b12:	687b      	ldr	r3, [r7, #4]
 8100b14:	2293      	movs	r2, #147	; 0x93
 8100b16:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 8100b18:	687b      	ldr	r3, [r7, #4]
 8100b1a:	3301      	adds	r3, #1
 8100b1c:	2220      	movs	r2, #32
 8100b1e:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8100b20:	f107 0308 	add.w	r3, r7, #8
 8100b24:	9300      	str	r3, [sp, #0]
 8100b26:	687b      	ldr	r3, [r7, #4]
 8100b28:	2202      	movs	r2, #2
 8100b2a:	6879      	ldr	r1, [r7, #4]
 8100b2c:	200c      	movs	r0, #12
 8100b2e:	f7ff ff1d 	bl	810096c <MFRC522_ToCard>
 8100b32:	4603      	mov	r3, r0
 8100b34:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 8100b36:	7bfb      	ldrb	r3, [r7, #15]
 8100b38:	2b00      	cmp	r3, #0
 8100b3a:	d118      	bne.n	8100b6e <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 8100b3c:	2300      	movs	r3, #0
 8100b3e:	73bb      	strb	r3, [r7, #14]
 8100b40:	e009      	b.n	8100b56 <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 8100b42:	7bbb      	ldrb	r3, [r7, #14]
 8100b44:	687a      	ldr	r2, [r7, #4]
 8100b46:	4413      	add	r3, r2
 8100b48:	781a      	ldrb	r2, [r3, #0]
 8100b4a:	7b7b      	ldrb	r3, [r7, #13]
 8100b4c:	4053      	eors	r3, r2
 8100b4e:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 8100b50:	7bbb      	ldrb	r3, [r7, #14]
 8100b52:	3301      	adds	r3, #1
 8100b54:	73bb      	strb	r3, [r7, #14]
 8100b56:	7bbb      	ldrb	r3, [r7, #14]
 8100b58:	2b03      	cmp	r3, #3
 8100b5a:	d9f2      	bls.n	8100b42 <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 8100b5c:	7bbb      	ldrb	r3, [r7, #14]
 8100b5e:	687a      	ldr	r2, [r7, #4]
 8100b60:	4413      	add	r3, r2
 8100b62:	781b      	ldrb	r3, [r3, #0]
 8100b64:	7b7a      	ldrb	r2, [r7, #13]
 8100b66:	429a      	cmp	r2, r3
 8100b68:	d001      	beq.n	8100b6e <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 8100b6a:	2302      	movs	r3, #2
 8100b6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 8100b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8100b70:	4618      	mov	r0, r3
 8100b72:	3710      	adds	r7, #16
 8100b74:	46bd      	mov	sp, r7
 8100b76:	bd80      	pop	{r7, pc}

08100b78 <MFRC522_HardResetSet>:
	// Clear MFCrypto1On bit
	ClearBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
} // End PCD_StopCrypto1()

////------------owl_hor-------owl_hor---------owl_hor----------
void MFRC522_HardResetSet(void){
 8100b78:	b580      	push	{r7, lr}
 8100b7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_RESET);
 8100b7c:	2200      	movs	r2, #0
 8100b7e:	2108      	movs	r1, #8
 8100b80:	4806      	ldr	r0, [pc, #24]	; (8100b9c <MFRC522_HardResetSet+0x24>)
 8100b82:	f003 f825 	bl	8103bd0 <HAL_GPIO_WritePin>
	HAL_Delay(1); //// don't reset too long -> module won't read
 8100b86:	2001      	movs	r0, #1
 8100b88:	f001 f86a 	bl	8101c60 <HAL_Delay>
	HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 8100b8c:	2201      	movs	r2, #1
 8100b8e:	2108      	movs	r1, #8
 8100b90:	4802      	ldr	r0, [pc, #8]	; (8100b9c <MFRC522_HardResetSet+0x24>)
 8100b92:	f003 f81d 	bl	8103bd0 <HAL_GPIO_WritePin>
}
 8100b96:	bf00      	nop
 8100b98:	bd80      	pop	{r7, pc}
 8100b9a:	bf00      	nop
 8100b9c:	58021000 	.word	0x58021000

08100ba0 <MFRC522_SelfTest>:

uint8_t FIFOBuffex522[75]; //// Read FIFO buffer test
void MFRC522_SelfTest(void){
 8100ba0:	b580      	push	{r7, lr}
 8100ba2:	b082      	sub	sp, #8
 8100ba4:	af00      	add	r7, sp, #0
			5Dh, 48h, 76h, D5h, 71h, 061h, 21h, A9h,
			86h, 96h, 83h, 38h, CFh, 9Dh, 5Bh, 6Dh,
			DCh, 15h, BAh, 3Eh, 7Dh, 95h, 03Bh, 2Fh
	 * */
	//// 1. Soft reset -> send 1111 to 01h
	Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8100ba6:	210f      	movs	r1, #15
 8100ba8:	2001      	movs	r0, #1
 8100baa:	f7ff fdeb 	bl	8100784 <Write_MFRC522>

	//// 2. Write 00h to FIFO 25x times
	for(int i = 0;i < 25; i++){
 8100bae:	2300      	movs	r3, #0
 8100bb0:	607b      	str	r3, [r7, #4]
 8100bb2:	e002      	b.n	8100bba <MFRC522_SelfTest+0x1a>
 8100bb4:	687b      	ldr	r3, [r7, #4]
 8100bb6:	3301      	adds	r3, #1
 8100bb8:	607b      	str	r3, [r7, #4]
 8100bba:	687b      	ldr	r3, [r7, #4]
 8100bbc:	2b18      	cmp	r3, #24
 8100bbe:	ddf9      	ble.n	8100bb4 <MFRC522_SelfTest+0x14>
		//Write_MFRC522(FIFODataReg, Reserved00); // use reserved bc it equals to 00h
	}
	//// 3. write 09h to AutoTest
	Write_MFRC522(AutoTestReg, PCD_SELFTSTEN);
 8100bc0:	2109      	movs	r1, #9
 8100bc2:	2036      	movs	r0, #54	; 0x36
 8100bc4:	f7ff fdde 	bl	8100784 <Write_MFRC522>

	//// 4. Write 00h to the FIFO buffer again
	Write_MFRC522(FIFODataReg, Reserved00);
 8100bc8:	2100      	movs	r1, #0
 8100bca:	2009      	movs	r0, #9
 8100bcc:	f7ff fdda 	bl	8100784 <Write_MFRC522>

	FIFOBuffex522[0] = Read_MFRC522(FIFOLevelReg); //// FIFO Check
 8100bd0:	200a      	movs	r0, #10
 8100bd2:	f7ff fe07 	bl	81007e4 <Read_MFRC522>
 8100bd6:	4603      	mov	r3, r0
 8100bd8:	461a      	mov	r2, r3
 8100bda:	4b14      	ldr	r3, [pc, #80]	; (8100c2c <MFRC522_SelfTest+0x8c>)
 8100bdc:	701a      	strb	r2, [r3, #0]
	//// 5. CalcCRC -> Write 0011 to 01h
	Write_MFRC522(CommandReg, PCD_CALCCRC);
 8100bde:	2103      	movs	r1, #3
 8100be0:	2001      	movs	r0, #1
 8100be2:	f7ff fdcf 	bl	8100784 <Write_MFRC522>

	//// 6. Self test enable, wait for calculation/ must have!!!
	HAL_Delay(1);
 8100be6:	2001      	movs	r0, #1
 8100be8:	f001 f83a 	bl	8101c60 <HAL_Delay>

	FIFOBuffex522[1] = Read_MFRC522(FIFOLevelReg);  //// FIFO Check
 8100bec:	200a      	movs	r0, #10
 8100bee:	f7ff fdf9 	bl	81007e4 <Read_MFRC522>
 8100bf2:	4603      	mov	r3, r0
 8100bf4:	461a      	mov	r2, r3
 8100bf6:	4b0d      	ldr	r3, [pc, #52]	; (8100c2c <MFRC522_SelfTest+0x8c>)
 8100bf8:	705a      	strb	r2, [r3, #1]

	//// 7. Read 64 buffer FIFO
	for(uint j = 2;j < 73; j++){
 8100bfa:	2302      	movs	r3, #2
 8100bfc:	603b      	str	r3, [r7, #0]
 8100bfe:	e00c      	b.n	8100c1a <MFRC522_SelfTest+0x7a>
	FIFOBuffex522[j] = Read_MFRC522(FIFODataReg);
 8100c00:	2009      	movs	r0, #9
 8100c02:	f7ff fdef 	bl	81007e4 <Read_MFRC522>
 8100c06:	4603      	mov	r3, r0
 8100c08:	4619      	mov	r1, r3
 8100c0a:	4a08      	ldr	r2, [pc, #32]	; (8100c2c <MFRC522_SelfTest+0x8c>)
 8100c0c:	683b      	ldr	r3, [r7, #0]
 8100c0e:	4413      	add	r3, r2
 8100c10:	460a      	mov	r2, r1
 8100c12:	701a      	strb	r2, [r3, #0]
	for(uint j = 2;j < 73; j++){
 8100c14:	683b      	ldr	r3, [r7, #0]
 8100c16:	3301      	adds	r3, #1
 8100c18:	603b      	str	r3, [r7, #0]
 8100c1a:	683b      	ldr	r3, [r7, #0]
 8100c1c:	2b48      	cmp	r3, #72	; 0x48
 8100c1e:	d9ef      	bls.n	8100c00 <MFRC522_SelfTest+0x60>
	}
}
 8100c20:	bf00      	nop
 8100c22:	bf00      	nop
 8100c24:	3708      	adds	r7, #8
 8100c26:	46bd      	mov	sp, r7
 8100c28:	bd80      	pop	{r7, pc}
 8100c2a:	bf00      	nop
 8100c2c:	100000a8 	.word	0x100000a8

08100c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8100c32:	b0af      	sub	sp, #188	; 0xbc
 8100c34:	af04      	add	r7, sp, #16

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100c36:	4b14      	ldr	r3, [pc, #80]	; (8100c88 <main+0x58>)
 8100c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c3c:	4a12      	ldr	r2, [pc, #72]	; (8100c88 <main+0x58>)
 8100c3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c46:	4b10      	ldr	r3, [pc, #64]	; (8100c88 <main+0x58>)
 8100c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100c50:	607b      	str	r3, [r7, #4]
 8100c52:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100c54:	2001      	movs	r0, #1
 8100c56:	f003 f841 	bl	8103cdc <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100c5a:	f003 fd5f 	bl	810471c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100c5e:	2201      	movs	r2, #1
 8100c60:	2102      	movs	r1, #2
 8100c62:	2000      	movs	r0, #0
 8100c64:	f003 fce0 	bl	8104628 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100c68:	4b08      	ldr	r3, [pc, #32]	; (8100c8c <main+0x5c>)
 8100c6a:	681b      	ldr	r3, [r3, #0]
 8100c6c:	091b      	lsrs	r3, r3, #4
 8100c6e:	f003 030f 	and.w	r3, r3, #15
 8100c72:	2b07      	cmp	r3, #7
 8100c74:	d10e      	bne.n	8100c94 <main+0x64>
 8100c76:	4b06      	ldr	r3, [pc, #24]	; (8100c90 <main+0x60>)
 8100c78:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100c7c:	4a04      	ldr	r2, [pc, #16]	; (8100c90 <main+0x60>)
 8100c7e:	f043 0301 	orr.w	r3, r3, #1
 8100c82:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100c86:	e00d      	b.n	8100ca4 <main+0x74>
 8100c88:	58024400 	.word	0x58024400
 8100c8c:	e000ed00 	.word	0xe000ed00
 8100c90:	58026400 	.word	0x58026400
 8100c94:	4bb3      	ldr	r3, [pc, #716]	; (8100f64 <main+0x334>)
 8100c96:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100c9a:	4ab2      	ldr	r2, [pc, #712]	; (8100f64 <main+0x334>)
 8100c9c:	f043 0301 	orr.w	r3, r3, #1
 8100ca0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100ca4:	f000 ff28 	bl	8101af8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100ca8:	f000 fb5e 	bl	8101368 <MX_GPIO_Init>
  MX_TIM17_Init();
 8100cac:	f000 fac0 	bl	8101230 <MX_TIM17_Init>
  MX_RTC_Init();
 8100cb0:	f000 fa02 	bl	81010b8 <MX_RTC_Init>
  MX_I2C2_Init();
 8100cb4:	f000 f9c0 	bl	8101038 <MX_I2C2_Init>
  MX_DMA_Init();
 8100cb8:	f000 fb2e 	bl	8101318 <MX_DMA_Init>
  MX_SPI4_Init();
 8100cbc:	f000 fa62 	bl	8101184 <MX_SPI4_Init>
  MX_USART3_UART_Init();
 8100cc0:	f000 fade 	bl	8101280 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim17);

  //// Start sync EXIN RTC
  DS3231_Read(&hi2c2);
 8100cc4:	48a8      	ldr	r0, [pc, #672]	; (8100f68 <main+0x338>)
 8100cc6:	f7ff fcfd 	bl	81006c4 <DS3231_Read>
  EXIN_RTC_SYNC(&hi2c2,&hrtc);
 8100cca:	49a8      	ldr	r1, [pc, #672]	; (8100f6c <main+0x33c>)
 8100ccc:	48a6      	ldr	r0, [pc, #664]	; (8100f68 <main+0x338>)
 8100cce:	f7ff fd15 	bl	81006fc <EXIN_RTC_SYNC>
  MFRC522_HardResetSet();
 8100cd2:	f7ff ff51 	bl	8100b78 <MFRC522_HardResetSet>
  MFRC522_Init();
 8100cd6:	f7ff fe04 	bl	81008e2 <MFRC522_Init>
  //// MFRC522 version 2.0 software version is: 92h
  rc522_version = Read_MFRC522(VersionReg);
 8100cda:	2037      	movs	r0, #55	; 0x37
 8100cdc:	f7ff fd82 	bl	81007e4 <Read_MFRC522>
 8100ce0:	4603      	mov	r3, r0
 8100ce2:	461a      	mov	r2, r3
 8100ce4:	4ba2      	ldr	r3, [pc, #648]	; (8100f70 <main+0x340>)
 8100ce6:	701a      	strb	r2, [r3, #0]

  //HAL_WWDG_Refresh(&hwwdg2);

#define Huart3
#ifdef Huart3
  HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 8100ce8:	2201      	movs	r2, #1
 8100cea:	49a2      	ldr	r1, [pc, #648]	; (8100f74 <main+0x344>)
 8100cec:	489f      	ldr	r0, [pc, #636]	; (8100f6c <main+0x33c>)
 8100cee:	f005 fb78 	bl	81063e2 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 8100cf2:	2201      	movs	r2, #1
 8100cf4:	49a0      	ldr	r1, [pc, #640]	; (8100f78 <main+0x348>)
 8100cf6:	489d      	ldr	r0, [pc, #628]	; (8100f6c <main+0x33c>)
 8100cf8:	f005 fc56 	bl	81065a8 <HAL_RTC_GetDate>

  char temp[]="----------------- H745_STAMPR_CM4 --------------------\r\n";
 8100cfc:	4b9f      	ldr	r3, [pc, #636]	; (8100f7c <main+0x34c>)
 8100cfe:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8100d02:	461d      	mov	r5, r3
 8100d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100d10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8100d14:	c403      	stmia	r4!, {r0, r1}
 8100d16:	7022      	strb	r2, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)temp, strlen(temp),10); // strlen = length of str -> config length of data
 8100d18:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8100d1c:	4618      	mov	r0, r3
 8100d1e:	f7ff fadf 	bl	81002e0 <strlen>
 8100d22:	4603      	mov	r3, r0
 8100d24:	b29a      	uxth	r2, r3
 8100d26:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8100d2a:	230a      	movs	r3, #10
 8100d2c:	4894      	ldr	r0, [pc, #592]	; (8100f80 <main+0x350>)
 8100d2e:	f006 ffdf 	bl	8107cf0 <HAL_UART_Transmit>
  char temp2[100];
  sprintf(temp2, "Date: %02X/%02X/%02X  Time: %02X:%02X:%02X \r\n",
		  NowDate.Date, NowDate.Month, NowDate.Year,
 8100d32:	4b91      	ldr	r3, [pc, #580]	; (8100f78 <main+0x348>)
 8100d34:	789b      	ldrb	r3, [r3, #2]
  sprintf(temp2, "Date: %02X/%02X/%02X  Time: %02X:%02X:%02X \r\n",
 8100d36:	461d      	mov	r5, r3
		  NowDate.Date, NowDate.Month, NowDate.Year,
 8100d38:	4b8f      	ldr	r3, [pc, #572]	; (8100f78 <main+0x348>)
 8100d3a:	785b      	ldrb	r3, [r3, #1]
  sprintf(temp2, "Date: %02X/%02X/%02X  Time: %02X:%02X:%02X \r\n",
 8100d3c:	461e      	mov	r6, r3
		  NowDate.Date, NowDate.Month, NowDate.Year,
 8100d3e:	4b8e      	ldr	r3, [pc, #568]	; (8100f78 <main+0x348>)
 8100d40:	78db      	ldrb	r3, [r3, #3]
  sprintf(temp2, "Date: %02X/%02X/%02X  Time: %02X:%02X:%02X \r\n",
 8100d42:	461a      	mov	r2, r3
		  NowTime.Hours,NowTime.Minutes, NowTime.Seconds);
 8100d44:	4b8b      	ldr	r3, [pc, #556]	; (8100f74 <main+0x344>)
 8100d46:	781b      	ldrb	r3, [r3, #0]
  sprintf(temp2, "Date: %02X/%02X/%02X  Time: %02X:%02X:%02X \r\n",
 8100d48:	4619      	mov	r1, r3
		  NowTime.Hours,NowTime.Minutes, NowTime.Seconds);
 8100d4a:	4b8a      	ldr	r3, [pc, #552]	; (8100f74 <main+0x344>)
 8100d4c:	785b      	ldrb	r3, [r3, #1]
  sprintf(temp2, "Date: %02X/%02X/%02X  Time: %02X:%02X:%02X \r\n",
 8100d4e:	461c      	mov	r4, r3
		  NowTime.Hours,NowTime.Minutes, NowTime.Seconds);
 8100d50:	4b88      	ldr	r3, [pc, #544]	; (8100f74 <main+0x344>)
 8100d52:	789b      	ldrb	r3, [r3, #2]
  sprintf(temp2, "Date: %02X/%02X/%02X  Time: %02X:%02X:%02X \r\n",
 8100d54:	f107 0008 	add.w	r0, r7, #8
 8100d58:	9303      	str	r3, [sp, #12]
 8100d5a:	9402      	str	r4, [sp, #8]
 8100d5c:	9101      	str	r1, [sp, #4]
 8100d5e:	9200      	str	r2, [sp, #0]
 8100d60:	4633      	mov	r3, r6
 8100d62:	462a      	mov	r2, r5
 8100d64:	4987      	ldr	r1, [pc, #540]	; (8100f84 <main+0x354>)
 8100d66:	f008 f8ab 	bl	8108ec0 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)temp2, strlen(temp2),30);
 8100d6a:	f107 0308 	add.w	r3, r7, #8
 8100d6e:	4618      	mov	r0, r3
 8100d70:	f7ff fab6 	bl	81002e0 <strlen>
 8100d74:	4603      	mov	r3, r0
 8100d76:	b29a      	uxth	r2, r3
 8100d78:	f107 0108 	add.w	r1, r7, #8
 8100d7c:	231e      	movs	r3, #30
 8100d7e:	4880      	ldr	r0, [pc, #512]	; (8100f80 <main+0x350>)
 8100d80:	f006 ffb6 	bl	8107cf0 <HAL_UART_Transmit>

  status_522 = Read_MFRC522(VersionReg);
 8100d84:	2037      	movs	r0, #55	; 0x37
 8100d86:	f7ff fd2d 	bl	81007e4 <Read_MFRC522>
 8100d8a:	4603      	mov	r3, r0
 8100d8c:	461a      	mov	r2, r3
 8100d8e:	4b7e      	ldr	r3, [pc, #504]	; (8100f88 <main+0x358>)
 8100d90:	701a      	strb	r2, [r3, #0]
  sprintf(txtUARTBF, "Version  %xh \r\n",status_522);
 8100d92:	4b7d      	ldr	r3, [pc, #500]	; (8100f88 <main+0x358>)
 8100d94:	781b      	ldrb	r3, [r3, #0]
 8100d96:	461a      	mov	r2, r3
 8100d98:	497c      	ldr	r1, [pc, #496]	; (8100f8c <main+0x35c>)
 8100d9a:	487d      	ldr	r0, [pc, #500]	; (8100f90 <main+0x360>)
 8100d9c:	f008 f890 	bl	8108ec0 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),10);
 8100da0:	487b      	ldr	r0, [pc, #492]	; (8100f90 <main+0x360>)
 8100da2:	f7ff fa9d 	bl	81002e0 <strlen>
 8100da6:	4603      	mov	r3, r0
 8100da8:	b29a      	uxth	r2, r3
 8100daa:	230a      	movs	r3, #10
 8100dac:	4978      	ldr	r1, [pc, #480]	; (8100f90 <main+0x360>)
 8100dae:	4874      	ldr	r0, [pc, #464]	; (8100f80 <main+0x350>)
 8100db0:	f006 ff9e 	bl	8107cf0 <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //// DS3231
	  if(HAL_GetTick() - timestamp_one >= 500){
 8100db4:	f000 ff48 	bl	8101c48 <HAL_GetTick>
 8100db8:	4602      	mov	r2, r0
 8100dba:	4b76      	ldr	r3, [pc, #472]	; (8100f94 <main+0x364>)
 8100dbc:	681b      	ldr	r3, [r3, #0]
 8100dbe:	1ad3      	subs	r3, r2, r3
 8100dc0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8100dc4:	d32e      	bcc.n	8100e24 <main+0x1f4>
		  timestamp_one = HAL_GetTick();
 8100dc6:	f000 ff3f 	bl	8101c48 <HAL_GetTick>
 8100dca:	4603      	mov	r3, r0
 8100dcc:	4a71      	ldr	r2, [pc, #452]	; (8100f94 <main+0x364>)
 8100dce:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8100dd0:	2102      	movs	r1, #2
 8100dd2:	4871      	ldr	r0, [pc, #452]	; (8100f98 <main+0x368>)
 8100dd4:	f002 ff15 	bl	8103c02 <HAL_GPIO_TogglePin>

		  DS3231_Read(&hi2c2);
 8100dd8:	4863      	ldr	r0, [pc, #396]	; (8100f68 <main+0x338>)
 8100dda:	f7ff fc73 	bl	81006c4 <DS3231_Read>
		  if(HAL_HSEM_Take(1, 1) == HAL_OK){
 8100dde:	2101      	movs	r1, #1
 8100de0:	2001      	movs	r0, #1
 8100de2:	f002 ff43 	bl	8103c6c <HAL_HSEM_Take>
 8100de6:	4603      	mov	r3, r0
 8100de8:	2b00      	cmp	r3, #0
 8100dea:	d11b      	bne.n	8100e24 <main+0x1f4>
		  //read RTC NEED TO READ BOTH IN OTHER
		  HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 8100dec:	2201      	movs	r2, #1
 8100dee:	4961      	ldr	r1, [pc, #388]	; (8100f74 <main+0x344>)
 8100df0:	485e      	ldr	r0, [pc, #376]	; (8100f6c <main+0x33c>)
 8100df2:	f005 faf6 	bl	81063e2 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 8100df6:	2201      	movs	r2, #1
 8100df8:	495f      	ldr	r1, [pc, #380]	; (8100f78 <main+0x348>)
 8100dfa:	485c      	ldr	r0, [pc, #368]	; (8100f6c <main+0x33c>)
 8100dfc:	f005 fbd4 	bl	81065a8 <HAL_RTC_GetDate>
		  SRAM4->NowTimes = NowTime;
 8100e00:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8100e04:	4a5b      	ldr	r2, [pc, #364]	; (8100f74 <main+0x344>)
 8100e06:	1d1c      	adds	r4, r3, #4
 8100e08:	4615      	mov	r5, r2
 8100e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100e0e:	682b      	ldr	r3, [r5, #0]
 8100e10:	6023      	str	r3, [r4, #0]
		  SRAM4->NowDates = NowDate;
 8100e12:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 8100e16:	4b58      	ldr	r3, [pc, #352]	; (8100f78 <main+0x348>)
 8100e18:	681b      	ldr	r3, [r3, #0]
 8100e1a:	6193      	str	r3, [r2, #24]
		  HAL_HSEM_Release(1, 1);
 8100e1c:	2101      	movs	r1, #1
 8100e1e:	2001      	movs	r0, #1
 8100e20:	f002 ff48 	bl	8103cb4 <HAL_HSEM_Release>
//	  	  timestamp_wwdg2 = HAL_GetTick();
//		  HAL_WWDG_Refresh(&hwwdg2);
//	  }

	  //// MFRC522
	  if(HAL_GetTick() - timestamp_two >= 1000){
 8100e24:	f000 ff10 	bl	8101c48 <HAL_GetTick>
 8100e28:	4602      	mov	r2, r0
 8100e2a:	4b5c      	ldr	r3, [pc, #368]	; (8100f9c <main+0x36c>)
 8100e2c:	681b      	ldr	r3, [r3, #0]
 8100e2e:	1ad3      	subs	r3, r2, r3
 8100e30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8100e34:	f0c0 80e0 	bcc.w	8100ff8 <main+0x3c8>
		  timestamp_two = HAL_GetTick();
 8100e38:	f000 ff06 	bl	8101c48 <HAL_GetTick>
 8100e3c:	4603      	mov	r3, r0
 8100e3e:	4a57      	ldr	r2, [pc, #348]	; (8100f9c <main+0x36c>)
 8100e40:	6013      	str	r3, [r2, #0]
//		  HAL_Delay(500);
//		  //// SPI test-------------------------


		  // Find cards
		  status_5221 = MFRC522_Request(PICC_REQIDL, &bufferMM[1]);//bufferMM
 8100e42:	4957      	ldr	r1, [pc, #348]	; (8100fa0 <main+0x370>)
 8100e44:	2026      	movs	r0, #38	; 0x26
 8100e46:	f7ff fd6c 	bl	8100922 <MFRC522_Request>
 8100e4a:	4603      	mov	r3, r0
 8100e4c:	b29a      	uxth	r2, r3
 8100e4e:	4b55      	ldr	r3, [pc, #340]	; (8100fa4 <main+0x374>)
 8100e50:	801a      	strh	r2, [r3, #0]
		  bufferMM[3] = Read_MFRC522(FIFODataReg);
 8100e52:	2009      	movs	r0, #9
 8100e54:	f7ff fcc6 	bl	81007e4 <Read_MFRC522>
 8100e58:	4603      	mov	r3, r0
 8100e5a:	461a      	mov	r2, r3
 8100e5c:	4b52      	ldr	r3, [pc, #328]	; (8100fa8 <main+0x378>)
 8100e5e:	70da      	strb	r2, [r3, #3]
		  status_522 = MFRC522_Anticoll(&cardstr[0]);
 8100e60:	4852      	ldr	r0, [pc, #328]	; (8100fac <main+0x37c>)
 8100e62:	f7ff fe4c 	bl	8100afe <MFRC522_Anticoll>
 8100e66:	4603      	mov	r3, r0
 8100e68:	461a      	mov	r2, r3
 8100e6a:	4b47      	ldr	r3, [pc, #284]	; (8100f88 <main+0x358>)
 8100e6c:	701a      	strb	r2, [r3, #0]

		  sprintf(txtUARTBF, "Find Cards %x  %x  %x  %x \r\n",status_5221 ,status_522, bufferMM[1], bufferMM[3]);
 8100e6e:	4b4d      	ldr	r3, [pc, #308]	; (8100fa4 <main+0x374>)
 8100e70:	881b      	ldrh	r3, [r3, #0]
 8100e72:	4619      	mov	r1, r3
 8100e74:	4b44      	ldr	r3, [pc, #272]	; (8100f88 <main+0x358>)
 8100e76:	781b      	ldrb	r3, [r3, #0]
 8100e78:	4618      	mov	r0, r3
 8100e7a:	4b4b      	ldr	r3, [pc, #300]	; (8100fa8 <main+0x378>)
 8100e7c:	785b      	ldrb	r3, [r3, #1]
 8100e7e:	461a      	mov	r2, r3
 8100e80:	4b49      	ldr	r3, [pc, #292]	; (8100fa8 <main+0x378>)
 8100e82:	78db      	ldrb	r3, [r3, #3]
 8100e84:	9301      	str	r3, [sp, #4]
 8100e86:	9200      	str	r2, [sp, #0]
 8100e88:	4603      	mov	r3, r0
 8100e8a:	460a      	mov	r2, r1
 8100e8c:	4948      	ldr	r1, [pc, #288]	; (8100fb0 <main+0x380>)
 8100e8e:	4840      	ldr	r0, [pc, #256]	; (8100f90 <main+0x360>)
 8100e90:	f008 f816 	bl	8108ec0 <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),10);
 8100e94:	483e      	ldr	r0, [pc, #248]	; (8100f90 <main+0x360>)
 8100e96:	f7ff fa23 	bl	81002e0 <strlen>
 8100e9a:	4603      	mov	r3, r0
 8100e9c:	b29a      	uxth	r2, r3
 8100e9e:	230a      	movs	r3, #10
 8100ea0:	493b      	ldr	r1, [pc, #236]	; (8100f90 <main+0x360>)
 8100ea2:	4837      	ldr	r0, [pc, #220]	; (8100f80 <main+0x350>)
 8100ea4:	f006 ff24 	bl	8107cf0 <HAL_UART_Transmit>

		  if(status_522 == MI_OK) {
 8100ea8:	4b37      	ldr	r3, [pc, #220]	; (8100f88 <main+0x358>)
 8100eaa:	781b      	ldrb	r3, [r3, #0]
 8100eac:	2b00      	cmp	r3, #0
 8100eae:	f040 809e 	bne.w	8100fee <main+0x3be>
			  printUART("Anticoll OK \r\n", 10);
 8100eb2:	210a      	movs	r1, #10
 8100eb4:	483f      	ldr	r0, [pc, #252]	; (8100fb4 <main+0x384>)
 8100eb6:	f000 faeb 	bl	8101490 <printUART>
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8100eba:	2201      	movs	r2, #1
 8100ebc:	2101      	movs	r1, #1
 8100ebe:	483e      	ldr	r0, [pc, #248]	; (8100fb8 <main+0x388>)
 8100ec0:	f002 fe86 	bl	8103bd0 <HAL_GPIO_WritePin>
			  result++;
 8100ec4:	4b3d      	ldr	r3, [pc, #244]	; (8100fbc <main+0x38c>)
 8100ec6:	881b      	ldrh	r3, [r3, #0]
 8100ec8:	3301      	adds	r3, #1
 8100eca:	b29a      	uxth	r2, r3
 8100ecc:	4b3b      	ldr	r3, [pc, #236]	; (8100fbc <main+0x38c>)
 8100ece:	801a      	strh	r2, [r3, #0]
			  sprintf(txtUARTBF,"UID: %02X %02X %02X %02X \r\n", cardstr[0], cardstr[1], cardstr[2], cardstr[3]);
 8100ed0:	4b36      	ldr	r3, [pc, #216]	; (8100fac <main+0x37c>)
 8100ed2:	781b      	ldrb	r3, [r3, #0]
 8100ed4:	4619      	mov	r1, r3
 8100ed6:	4b35      	ldr	r3, [pc, #212]	; (8100fac <main+0x37c>)
 8100ed8:	785b      	ldrb	r3, [r3, #1]
 8100eda:	4618      	mov	r0, r3
 8100edc:	4b33      	ldr	r3, [pc, #204]	; (8100fac <main+0x37c>)
 8100ede:	789b      	ldrb	r3, [r3, #2]
 8100ee0:	461a      	mov	r2, r3
 8100ee2:	4b32      	ldr	r3, [pc, #200]	; (8100fac <main+0x37c>)
 8100ee4:	78db      	ldrb	r3, [r3, #3]
 8100ee6:	9301      	str	r3, [sp, #4]
 8100ee8:	9200      	str	r2, [sp, #0]
 8100eea:	4603      	mov	r3, r0
 8100eec:	460a      	mov	r2, r1
 8100eee:	4934      	ldr	r1, [pc, #208]	; (8100fc0 <main+0x390>)
 8100ef0:	4827      	ldr	r0, [pc, #156]	; (8100f90 <main+0x360>)
 8100ef2:	f007 ffe5 	bl	8108ec0 <siprintf>
			  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),10);
 8100ef6:	4826      	ldr	r0, [pc, #152]	; (8100f90 <main+0x360>)
 8100ef8:	f7ff f9f2 	bl	81002e0 <strlen>
 8100efc:	4603      	mov	r3, r0
 8100efe:	b29a      	uxth	r2, r3
 8100f00:	230a      	movs	r3, #10
 8100f02:	4923      	ldr	r1, [pc, #140]	; (8100f90 <main+0x360>)
 8100f04:	481e      	ldr	r0, [pc, #120]	; (8100f80 <main+0x350>)
 8100f06:	f006 fef3 	bl	8107cf0 <HAL_UART_Transmit>
			  UID[0] = cardstr[0];
 8100f0a:	4b28      	ldr	r3, [pc, #160]	; (8100fac <main+0x37c>)
 8100f0c:	781a      	ldrb	r2, [r3, #0]
 8100f0e:	4b2d      	ldr	r3, [pc, #180]	; (8100fc4 <main+0x394>)
 8100f10:	701a      	strb	r2, [r3, #0]
			  UID[1] = cardstr[1];
 8100f12:	4b26      	ldr	r3, [pc, #152]	; (8100fac <main+0x37c>)
 8100f14:	785a      	ldrb	r2, [r3, #1]
 8100f16:	4b2b      	ldr	r3, [pc, #172]	; (8100fc4 <main+0x394>)
 8100f18:	705a      	strb	r2, [r3, #1]
			  UID[2] = cardstr[2];
 8100f1a:	4b24      	ldr	r3, [pc, #144]	; (8100fac <main+0x37c>)
 8100f1c:	789a      	ldrb	r2, [r3, #2]
 8100f1e:	4b29      	ldr	r3, [pc, #164]	; (8100fc4 <main+0x394>)
 8100f20:	709a      	strb	r2, [r3, #2]
			  UID[3] = cardstr[3];
 8100f22:	4b22      	ldr	r3, [pc, #136]	; (8100fac <main+0x37c>)
 8100f24:	78da      	ldrb	r2, [r3, #3]
 8100f26:	4b27      	ldr	r3, [pc, #156]	; (8100fc4 <main+0x394>)
 8100f28:	70da      	strb	r2, [r3, #3]
			  UID[4] = cardstr[4];
 8100f2a:	4b20      	ldr	r3, [pc, #128]	; (8100fac <main+0x37c>)
 8100f2c:	791a      	ldrb	r2, [r3, #4]
 8100f2e:	4b25      	ldr	r3, [pc, #148]	; (8100fc4 <main+0x394>)
 8100f30:	711a      	strb	r2, [r3, #4]

			  //// send read ID to CM7
			  if(HAL_HSEM_Take(2, 1) == HAL_OK){
 8100f32:	2101      	movs	r1, #1
 8100f34:	2002      	movs	r0, #2
 8100f36:	f002 fe99 	bl	8103c6c <HAL_HSEM_Take>
 8100f3a:	4603      	mov	r3, r0
 8100f3c:	2b00      	cmp	r3, #0
 8100f3e:	d15b      	bne.n	8100ff8 <main+0x3c8>
				  SRAM4->UUID[0] = UID[0];
 8100f40:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8100f44:	4a1f      	ldr	r2, [pc, #124]	; (8100fc4 <main+0x394>)
 8100f46:	7812      	ldrb	r2, [r2, #0]
 8100f48:	775a      	strb	r2, [r3, #29]
				  SRAM4->UUID[1] = UID[1];
 8100f4a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8100f4e:	4a1d      	ldr	r2, [pc, #116]	; (8100fc4 <main+0x394>)
 8100f50:	7852      	ldrb	r2, [r2, #1]
 8100f52:	779a      	strb	r2, [r3, #30]
				  SRAM4->UUID[2] = UID[2];
 8100f54:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8100f58:	4a1a      	ldr	r2, [pc, #104]	; (8100fc4 <main+0x394>)
 8100f5a:	7892      	ldrb	r2, [r2, #2]
 8100f5c:	77da      	strb	r2, [r3, #31]
				  SRAM4->UUID[3] = UID[3];
 8100f5e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8100f62:	e031      	b.n	8100fc8 <main+0x398>
 8100f64:	58026400 	.word	0x58026400
 8100f68:	100000f4 	.word	0x100000f4
 8100f6c:	10000140 	.word	0x10000140
 8100f70:	1000044c 	.word	0x1000044c
 8100f74:	100003c8 	.word	0x100003c8
 8100f78:	100003dc 	.word	0x100003dc
 8100f7c:	08109874 	.word	0x08109874
 8100f80:	10000238 	.word	0x10000238
 8100f84:	081097b4 	.word	0x081097b4
 8100f88:	10000459 	.word	0x10000459
 8100f8c:	081097e4 	.word	0x081097e4
 8100f90:	100003e0 	.word	0x100003e0
 8100f94:	100003c0 	.word	0x100003c0
 8100f98:	58021000 	.word	0x58021000
 8100f9c:	100003c4 	.word	0x100003c4
 8100fa0:	10000445 	.word	0x10000445
 8100fa4:	1000044e 	.word	0x1000044e
 8100fa8:	10000444 	.word	0x10000444
 8100fac:	1000045c 	.word	0x1000045c
 8100fb0:	081097f4 	.word	0x081097f4
 8100fb4:	08109814 	.word	0x08109814
 8100fb8:	58020400 	.word	0x58020400
 8100fbc:	1000046e 	.word	0x1000046e
 8100fc0:	08109824 	.word	0x08109824
 8100fc4:	10000454 	.word	0x10000454
 8100fc8:	4a16      	ldr	r2, [pc, #88]	; (8101024 <main+0x3f4>)
 8100fca:	78d2      	ldrb	r2, [r2, #3]
 8100fcc:	f883 2020 	strb.w	r2, [r3, #32]
				  SRAM4->UUID[4] = UID[4];
 8100fd0:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8100fd4:	4a13      	ldr	r2, [pc, #76]	; (8101024 <main+0x3f4>)
 8100fd6:	7912      	ldrb	r2, [r2, #4]
 8100fd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				  SRAM4->flag_UID = 1;
 8100fdc:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8100fe0:	2201      	movs	r2, #1
 8100fe2:	771a      	strb	r2, [r3, #28]
			  	  HAL_HSEM_Release(2, 1);
 8100fe4:	2101      	movs	r1, #1
 8100fe6:	2002      	movs	r0, #2
 8100fe8:	f002 fe64 	bl	8103cb4 <HAL_HSEM_Release>
 8100fec:	e004      	b.n	8100ff8 <main+0x3c8>
			  	}
		  }else{
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8100fee:	2200      	movs	r2, #0
 8100ff0:	2101      	movs	r1, #1
 8100ff2:	480d      	ldr	r0, [pc, #52]	; (8101028 <main+0x3f8>)
 8100ff4:	f002 fdec 	bl	8103bd0 <HAL_GPIO_WritePin>
		  }

	  } //// timestamp_two loop

	  if(flag_one == 3){
 8100ff8:	4b0c      	ldr	r3, [pc, #48]	; (810102c <main+0x3fc>)
 8100ffa:	781b      	ldrb	r3, [r3, #0]
 8100ffc:	2b03      	cmp	r3, #3
 8100ffe:	f47f aed9 	bne.w	8100db4 <main+0x184>

		  MFRC522_SelfTest();
 8101002:	f7ff fdcd 	bl	8100ba0 <MFRC522_SelfTest>
		  printUART("RC522 Self test\r\n", 10);
 8101006:	210a      	movs	r1, #10
 8101008:	4809      	ldr	r0, [pc, #36]	; (8101030 <main+0x400>)
 810100a:	f000 fa41 	bl	8101490 <printUART>
		  printUART("Please Reset Board After ok\r\n", 10);
 810100e:	210a      	movs	r1, #10
 8101010:	4808      	ldr	r0, [pc, #32]	; (8101034 <main+0x404>)
 8101012:	f000 fa3d 	bl	8101490 <printUART>
		  MFRC522_HardResetSet();
 8101016:	f7ff fdaf 	bl	8100b78 <MFRC522_HardResetSet>
		  flag_one = 0;
 810101a:	4b04      	ldr	r3, [pc, #16]	; (810102c <main+0x3fc>)
 810101c:	2200      	movs	r2, #0
 810101e:	701a      	strb	r2, [r3, #0]
	  if(HAL_GetTick() - timestamp_one >= 500){
 8101020:	e6c8      	b.n	8100db4 <main+0x184>
 8101022:	bf00      	nop
 8101024:	10000454 	.word	0x10000454
 8101028:	58020400 	.word	0x58020400
 810102c:	10000450 	.word	0x10000450
 8101030:	08109840 	.word	0x08109840
 8101034:	08109854 	.word	0x08109854

08101038 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8101038:	b580      	push	{r7, lr}
 810103a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 810103c:	4b1b      	ldr	r3, [pc, #108]	; (81010ac <MX_I2C2_Init+0x74>)
 810103e:	4a1c      	ldr	r2, [pc, #112]	; (81010b0 <MX_I2C2_Init+0x78>)
 8101040:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8101042:	4b1a      	ldr	r3, [pc, #104]	; (81010ac <MX_I2C2_Init+0x74>)
 8101044:	4a1b      	ldr	r2, [pc, #108]	; (81010b4 <MX_I2C2_Init+0x7c>)
 8101046:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8101048:	4b18      	ldr	r3, [pc, #96]	; (81010ac <MX_I2C2_Init+0x74>)
 810104a:	2200      	movs	r2, #0
 810104c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810104e:	4b17      	ldr	r3, [pc, #92]	; (81010ac <MX_I2C2_Init+0x74>)
 8101050:	2201      	movs	r2, #1
 8101052:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101054:	4b15      	ldr	r3, [pc, #84]	; (81010ac <MX_I2C2_Init+0x74>)
 8101056:	2200      	movs	r2, #0
 8101058:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 810105a:	4b14      	ldr	r3, [pc, #80]	; (81010ac <MX_I2C2_Init+0x74>)
 810105c:	2200      	movs	r2, #0
 810105e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101060:	4b12      	ldr	r3, [pc, #72]	; (81010ac <MX_I2C2_Init+0x74>)
 8101062:	2200      	movs	r2, #0
 8101064:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101066:	4b11      	ldr	r3, [pc, #68]	; (81010ac <MX_I2C2_Init+0x74>)
 8101068:	2200      	movs	r2, #0
 810106a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 810106c:	4b0f      	ldr	r3, [pc, #60]	; (81010ac <MX_I2C2_Init+0x74>)
 810106e:	2200      	movs	r2, #0
 8101070:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8101072:	480e      	ldr	r0, [pc, #56]	; (81010ac <MX_I2C2_Init+0x74>)
 8101074:	f002 fe44 	bl	8103d00 <HAL_I2C_Init>
 8101078:	4603      	mov	r3, r0
 810107a:	2b00      	cmp	r3, #0
 810107c:	d001      	beq.n	8101082 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 810107e:	f000 fa53 	bl	8101528 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101082:	2100      	movs	r1, #0
 8101084:	4809      	ldr	r0, [pc, #36]	; (81010ac <MX_I2C2_Init+0x74>)
 8101086:	f003 fa37 	bl	81044f8 <HAL_I2CEx_ConfigAnalogFilter>
 810108a:	4603      	mov	r3, r0
 810108c:	2b00      	cmp	r3, #0
 810108e:	d001      	beq.n	8101094 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8101090:	f000 fa4a 	bl	8101528 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8101094:	2100      	movs	r1, #0
 8101096:	4805      	ldr	r0, [pc, #20]	; (81010ac <MX_I2C2_Init+0x74>)
 8101098:	f003 fa79 	bl	810458e <HAL_I2CEx_ConfigDigitalFilter>
 810109c:	4603      	mov	r3, r0
 810109e:	2b00      	cmp	r3, #0
 81010a0:	d001      	beq.n	81010a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 81010a2:	f000 fa41 	bl	8101528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 81010a6:	bf00      	nop
 81010a8:	bd80      	pop	{r7, pc}
 81010aa:	bf00      	nop
 81010ac:	100000f4 	.word	0x100000f4
 81010b0:	40005800 	.word	0x40005800
 81010b4:	00b03fdb 	.word	0x00b03fdb

081010b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 81010b8:	b580      	push	{r7, lr}
 81010ba:	b086      	sub	sp, #24
 81010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 81010be:	1d3b      	adds	r3, r7, #4
 81010c0:	2200      	movs	r2, #0
 81010c2:	601a      	str	r2, [r3, #0]
 81010c4:	605a      	str	r2, [r3, #4]
 81010c6:	609a      	str	r2, [r3, #8]
 81010c8:	60da      	str	r2, [r3, #12]
 81010ca:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 81010cc:	2300      	movs	r3, #0
 81010ce:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 81010d0:	4b2a      	ldr	r3, [pc, #168]	; (810117c <MX_RTC_Init+0xc4>)
 81010d2:	4a2b      	ldr	r2, [pc, #172]	; (8101180 <MX_RTC_Init+0xc8>)
 81010d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 81010d6:	4b29      	ldr	r3, [pc, #164]	; (810117c <MX_RTC_Init+0xc4>)
 81010d8:	2200      	movs	r2, #0
 81010da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 81010dc:	4b27      	ldr	r3, [pc, #156]	; (810117c <MX_RTC_Init+0xc4>)
 81010de:	227f      	movs	r2, #127	; 0x7f
 81010e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 81010e2:	4b26      	ldr	r3, [pc, #152]	; (810117c <MX_RTC_Init+0xc4>)
 81010e4:	22ff      	movs	r2, #255	; 0xff
 81010e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 81010e8:	4b24      	ldr	r3, [pc, #144]	; (810117c <MX_RTC_Init+0xc4>)
 81010ea:	2200      	movs	r2, #0
 81010ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 81010ee:	4b23      	ldr	r3, [pc, #140]	; (810117c <MX_RTC_Init+0xc4>)
 81010f0:	2200      	movs	r2, #0
 81010f2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 81010f4:	4b21      	ldr	r3, [pc, #132]	; (810117c <MX_RTC_Init+0xc4>)
 81010f6:	2200      	movs	r2, #0
 81010f8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 81010fa:	4b20      	ldr	r3, [pc, #128]	; (810117c <MX_RTC_Init+0xc4>)
 81010fc:	2200      	movs	r2, #0
 81010fe:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8101100:	481e      	ldr	r0, [pc, #120]	; (810117c <MX_RTC_Init+0xc4>)
 8101102:	f005 f859 	bl	81061b8 <HAL_RTC_Init>
 8101106:	4603      	mov	r3, r0
 8101108:	2b00      	cmp	r3, #0
 810110a:	d001      	beq.n	8101110 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 810110c:	f000 fa0c 	bl	8101528 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8101110:	2300      	movs	r3, #0
 8101112:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 8101114:	2330      	movs	r3, #48	; 0x30
 8101116:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8101118:	2300      	movs	r3, #0
 810111a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 810111c:	2300      	movs	r3, #0
 810111e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_SET;
 8101120:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8101124:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8101126:	1d3b      	adds	r3, r7, #4
 8101128:	2201      	movs	r2, #1
 810112a:	4619      	mov	r1, r3
 810112c:	4813      	ldr	r0, [pc, #76]	; (810117c <MX_RTC_Init+0xc4>)
 810112e:	f005 f8bb 	bl	81062a8 <HAL_RTC_SetTime>
 8101132:	4603      	mov	r3, r0
 8101134:	2b00      	cmp	r3, #0
 8101136:	d001      	beq.n	810113c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8101138:	f000 f9f6 	bl	8101528 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 810113c:	2306      	movs	r3, #6
 810113e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8101140:	2311      	movs	r3, #17
 8101142:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 8101144:	2312      	movs	r3, #18
 8101146:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8101148:	2322      	movs	r3, #34	; 0x22
 810114a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 810114c:	463b      	mov	r3, r7
 810114e:	2201      	movs	r2, #1
 8101150:	4619      	mov	r1, r3
 8101152:	480a      	ldr	r0, [pc, #40]	; (810117c <MX_RTC_Init+0xc4>)
 8101154:	f005 f9a1 	bl	810649a <HAL_RTC_SetDate>
 8101158:	4603      	mov	r3, r0
 810115a:	2b00      	cmp	r3, #0
 810115c:	d001      	beq.n	8101162 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 810115e:	f000 f9e3 	bl	8101528 <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8101162:	4806      	ldr	r0, [pc, #24]	; (810117c <MX_RTC_Init+0xc4>)
 8101164:	f005 fb3e 	bl	81067e4 <HAL_RTCEx_SetRefClock>
 8101168:	4603      	mov	r3, r0
 810116a:	2b00      	cmp	r3, #0
 810116c:	d001      	beq.n	8101172 <MX_RTC_Init+0xba>
  {
    Error_Handler();
 810116e:	f000 f9db 	bl	8101528 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8101172:	bf00      	nop
 8101174:	3718      	adds	r7, #24
 8101176:	46bd      	mov	sp, r7
 8101178:	bd80      	pop	{r7, pc}
 810117a:	bf00      	nop
 810117c:	10000140 	.word	0x10000140
 8101180:	58004000 	.word	0x58004000

08101184 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8101184:	b580      	push	{r7, lr}
 8101186:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8101188:	4b27      	ldr	r3, [pc, #156]	; (8101228 <MX_SPI4_Init+0xa4>)
 810118a:	4a28      	ldr	r2, [pc, #160]	; (810122c <MX_SPI4_Init+0xa8>)
 810118c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 810118e:	4b26      	ldr	r3, [pc, #152]	; (8101228 <MX_SPI4_Init+0xa4>)
 8101190:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101194:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8101196:	4b24      	ldr	r3, [pc, #144]	; (8101228 <MX_SPI4_Init+0xa4>)
 8101198:	2200      	movs	r2, #0
 810119a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 810119c:	4b22      	ldr	r3, [pc, #136]	; (8101228 <MX_SPI4_Init+0xa4>)
 810119e:	2207      	movs	r2, #7
 81011a0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 81011a2:	4b21      	ldr	r3, [pc, #132]	; (8101228 <MX_SPI4_Init+0xa4>)
 81011a4:	2200      	movs	r2, #0
 81011a6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 81011a8:	4b1f      	ldr	r3, [pc, #124]	; (8101228 <MX_SPI4_Init+0xa4>)
 81011aa:	2200      	movs	r2, #0
 81011ac:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 81011ae:	4b1e      	ldr	r3, [pc, #120]	; (8101228 <MX_SPI4_Init+0xa4>)
 81011b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 81011b4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 81011b6:	4b1c      	ldr	r3, [pc, #112]	; (8101228 <MX_SPI4_Init+0xa4>)
 81011b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 81011bc:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 81011be:	4b1a      	ldr	r3, [pc, #104]	; (8101228 <MX_SPI4_Init+0xa4>)
 81011c0:	2200      	movs	r2, #0
 81011c2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 81011c4:	4b18      	ldr	r3, [pc, #96]	; (8101228 <MX_SPI4_Init+0xa4>)
 81011c6:	2200      	movs	r2, #0
 81011c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81011ca:	4b17      	ldr	r3, [pc, #92]	; (8101228 <MX_SPI4_Init+0xa4>)
 81011cc:	2200      	movs	r2, #0
 81011ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 81011d0:	4b15      	ldr	r3, [pc, #84]	; (8101228 <MX_SPI4_Init+0xa4>)
 81011d2:	2200      	movs	r2, #0
 81011d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 81011d6:	4b14      	ldr	r3, [pc, #80]	; (8101228 <MX_SPI4_Init+0xa4>)
 81011d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81011dc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 81011de:	4b12      	ldr	r3, [pc, #72]	; (8101228 <MX_SPI4_Init+0xa4>)
 81011e0:	2200      	movs	r2, #0
 81011e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 81011e4:	4b10      	ldr	r3, [pc, #64]	; (8101228 <MX_SPI4_Init+0xa4>)
 81011e6:	2200      	movs	r2, #0
 81011e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81011ea:	4b0f      	ldr	r3, [pc, #60]	; (8101228 <MX_SPI4_Init+0xa4>)
 81011ec:	2200      	movs	r2, #0
 81011ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81011f0:	4b0d      	ldr	r3, [pc, #52]	; (8101228 <MX_SPI4_Init+0xa4>)
 81011f2:	2200      	movs	r2, #0
 81011f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 81011f6:	4b0c      	ldr	r3, [pc, #48]	; (8101228 <MX_SPI4_Init+0xa4>)
 81011f8:	2200      	movs	r2, #0
 81011fa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81011fc:	4b0a      	ldr	r3, [pc, #40]	; (8101228 <MX_SPI4_Init+0xa4>)
 81011fe:	2200      	movs	r2, #0
 8101200:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101202:	4b09      	ldr	r3, [pc, #36]	; (8101228 <MX_SPI4_Init+0xa4>)
 8101204:	2200      	movs	r2, #0
 8101206:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101208:	4b07      	ldr	r3, [pc, #28]	; (8101228 <MX_SPI4_Init+0xa4>)
 810120a:	2200      	movs	r2, #0
 810120c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810120e:	4b06      	ldr	r3, [pc, #24]	; (8101228 <MX_SPI4_Init+0xa4>)
 8101210:	2200      	movs	r2, #0
 8101212:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8101214:	4804      	ldr	r0, [pc, #16]	; (8101228 <MX_SPI4_Init+0xa4>)
 8101216:	f005 fb29 	bl	810686c <HAL_SPI_Init>
 810121a:	4603      	mov	r3, r0
 810121c:	2b00      	cmp	r3, #0
 810121e:	d001      	beq.n	8101224 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8101220:	f000 f982 	bl	8101528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8101224:	bf00      	nop
 8101226:	bd80      	pop	{r7, pc}
 8101228:	10000164 	.word	0x10000164
 810122c:	40013400 	.word	0x40013400

08101230 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8101230:	b580      	push	{r7, lr}
 8101232:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8101234:	4b10      	ldr	r3, [pc, #64]	; (8101278 <MX_TIM17_Init+0x48>)
 8101236:	4a11      	ldr	r2, [pc, #68]	; (810127c <MX_TIM17_Init+0x4c>)
 8101238:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 479;
 810123a:	4b0f      	ldr	r3, [pc, #60]	; (8101278 <MX_TIM17_Init+0x48>)
 810123c:	f240 12df 	movw	r2, #479	; 0x1df
 8101240:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101242:	4b0d      	ldr	r3, [pc, #52]	; (8101278 <MX_TIM17_Init+0x48>)
 8101244:	2200      	movs	r2, #0
 8101246:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8101248:	4b0b      	ldr	r3, [pc, #44]	; (8101278 <MX_TIM17_Init+0x48>)
 810124a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810124e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101250:	4b09      	ldr	r3, [pc, #36]	; (8101278 <MX_TIM17_Init+0x48>)
 8101252:	2200      	movs	r2, #0
 8101254:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8101256:	4b08      	ldr	r3, [pc, #32]	; (8101278 <MX_TIM17_Init+0x48>)
 8101258:	2200      	movs	r2, #0
 810125a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810125c:	4b06      	ldr	r3, [pc, #24]	; (8101278 <MX_TIM17_Init+0x48>)
 810125e:	2200      	movs	r2, #0
 8101260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8101262:	4805      	ldr	r0, [pc, #20]	; (8101278 <MX_TIM17_Init+0x48>)
 8101264:	f006 fa9e 	bl	81077a4 <HAL_TIM_Base_Init>
 8101268:	4603      	mov	r3, r0
 810126a:	2b00      	cmp	r3, #0
 810126c:	d001      	beq.n	8101272 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 810126e:	f000 f95b 	bl	8101528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8101272:	bf00      	nop
 8101274:	bd80      	pop	{r7, pc}
 8101276:	bf00      	nop
 8101278:	100001ec 	.word	0x100001ec
 810127c:	40014800 	.word	0x40014800

08101280 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8101280:	b580      	push	{r7, lr}
 8101282:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101284:	4b22      	ldr	r3, [pc, #136]	; (8101310 <MX_USART3_UART_Init+0x90>)
 8101286:	4a23      	ldr	r2, [pc, #140]	; (8101314 <MX_USART3_UART_Init+0x94>)
 8101288:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 810128a:	4b21      	ldr	r3, [pc, #132]	; (8101310 <MX_USART3_UART_Init+0x90>)
 810128c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101290:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101292:	4b1f      	ldr	r3, [pc, #124]	; (8101310 <MX_USART3_UART_Init+0x90>)
 8101294:	2200      	movs	r2, #0
 8101296:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101298:	4b1d      	ldr	r3, [pc, #116]	; (8101310 <MX_USART3_UART_Init+0x90>)
 810129a:	2200      	movs	r2, #0
 810129c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 810129e:	4b1c      	ldr	r3, [pc, #112]	; (8101310 <MX_USART3_UART_Init+0x90>)
 81012a0:	2200      	movs	r2, #0
 81012a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 81012a4:	4b1a      	ldr	r3, [pc, #104]	; (8101310 <MX_USART3_UART_Init+0x90>)
 81012a6:	220c      	movs	r2, #12
 81012a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81012aa:	4b19      	ldr	r3, [pc, #100]	; (8101310 <MX_USART3_UART_Init+0x90>)
 81012ac:	2200      	movs	r2, #0
 81012ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81012b0:	4b17      	ldr	r3, [pc, #92]	; (8101310 <MX_USART3_UART_Init+0x90>)
 81012b2:	2200      	movs	r2, #0
 81012b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81012b6:	4b16      	ldr	r3, [pc, #88]	; (8101310 <MX_USART3_UART_Init+0x90>)
 81012b8:	2200      	movs	r2, #0
 81012ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81012bc:	4b14      	ldr	r3, [pc, #80]	; (8101310 <MX_USART3_UART_Init+0x90>)
 81012be:	2200      	movs	r2, #0
 81012c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81012c2:	4b13      	ldr	r3, [pc, #76]	; (8101310 <MX_USART3_UART_Init+0x90>)
 81012c4:	2200      	movs	r2, #0
 81012c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81012c8:	4811      	ldr	r0, [pc, #68]	; (8101310 <MX_USART3_UART_Init+0x90>)
 81012ca:	f006 fcc1 	bl	8107c50 <HAL_UART_Init>
 81012ce:	4603      	mov	r3, r0
 81012d0:	2b00      	cmp	r3, #0
 81012d2:	d001      	beq.n	81012d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81012d4:	f000 f928 	bl	8101528 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81012d8:	2100      	movs	r1, #0
 81012da:	480d      	ldr	r0, [pc, #52]	; (8101310 <MX_USART3_UART_Init+0x90>)
 81012dc:	f007 fcf4 	bl	8108cc8 <HAL_UARTEx_SetTxFifoThreshold>
 81012e0:	4603      	mov	r3, r0
 81012e2:	2b00      	cmp	r3, #0
 81012e4:	d001      	beq.n	81012ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81012e6:	f000 f91f 	bl	8101528 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81012ea:	2100      	movs	r1, #0
 81012ec:	4808      	ldr	r0, [pc, #32]	; (8101310 <MX_USART3_UART_Init+0x90>)
 81012ee:	f007 fd29 	bl	8108d44 <HAL_UARTEx_SetRxFifoThreshold>
 81012f2:	4603      	mov	r3, r0
 81012f4:	2b00      	cmp	r3, #0
 81012f6:	d001      	beq.n	81012fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81012f8:	f000 f916 	bl	8101528 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81012fc:	4804      	ldr	r0, [pc, #16]	; (8101310 <MX_USART3_UART_Init+0x90>)
 81012fe:	f007 fcaa 	bl	8108c56 <HAL_UARTEx_DisableFifoMode>
 8101302:	4603      	mov	r3, r0
 8101304:	2b00      	cmp	r3, #0
 8101306:	d001      	beq.n	810130c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101308:	f000 f90e 	bl	8101528 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 810130c:	bf00      	nop
 810130e:	bd80      	pop	{r7, pc}
 8101310:	10000238 	.word	0x10000238
 8101314:	40004800 	.word	0x40004800

08101318 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8101318:	b580      	push	{r7, lr}
 810131a:	b082      	sub	sp, #8
 810131c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 810131e:	4b11      	ldr	r3, [pc, #68]	; (8101364 <MX_DMA_Init+0x4c>)
 8101320:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101324:	4a0f      	ldr	r2, [pc, #60]	; (8101364 <MX_DMA_Init+0x4c>)
 8101326:	f043 0301 	orr.w	r3, r3, #1
 810132a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810132e:	4b0d      	ldr	r3, [pc, #52]	; (8101364 <MX_DMA_Init+0x4c>)
 8101330:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101334:	f003 0301 	and.w	r3, r3, #1
 8101338:	607b      	str	r3, [r7, #4]
 810133a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 810133c:	2200      	movs	r2, #0
 810133e:	2100      	movs	r1, #0
 8101340:	200b      	movs	r0, #11
 8101342:	f000 fd8c 	bl	8101e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101346:	200b      	movs	r0, #11
 8101348:	f000 fda3 	bl	8101e92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 810134c:	2200      	movs	r2, #0
 810134e:	2100      	movs	r1, #0
 8101350:	200c      	movs	r0, #12
 8101352:	f000 fd84 	bl	8101e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8101356:	200c      	movs	r0, #12
 8101358:	f000 fd9b 	bl	8101e92 <HAL_NVIC_EnableIRQ>

}
 810135c:	bf00      	nop
 810135e:	3708      	adds	r7, #8
 8101360:	46bd      	mov	sp, r7
 8101362:	bd80      	pop	{r7, pc}
 8101364:	58024400 	.word	0x58024400

08101368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101368:	b580      	push	{r7, lr}
 810136a:	b08a      	sub	sp, #40	; 0x28
 810136c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810136e:	f107 0314 	add.w	r3, r7, #20
 8101372:	2200      	movs	r2, #0
 8101374:	601a      	str	r2, [r3, #0]
 8101376:	605a      	str	r2, [r3, #4]
 8101378:	609a      	str	r2, [r3, #8]
 810137a:	60da      	str	r2, [r3, #12]
 810137c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810137e:	4b40      	ldr	r3, [pc, #256]	; (8101480 <MX_GPIO_Init+0x118>)
 8101380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101384:	4a3e      	ldr	r2, [pc, #248]	; (8101480 <MX_GPIO_Init+0x118>)
 8101386:	f043 0310 	orr.w	r3, r3, #16
 810138a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810138e:	4b3c      	ldr	r3, [pc, #240]	; (8101480 <MX_GPIO_Init+0x118>)
 8101390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101394:	f003 0310 	and.w	r3, r3, #16
 8101398:	613b      	str	r3, [r7, #16]
 810139a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 810139c:	4b38      	ldr	r3, [pc, #224]	; (8101480 <MX_GPIO_Init+0x118>)
 810139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013a2:	4a37      	ldr	r2, [pc, #220]	; (8101480 <MX_GPIO_Init+0x118>)
 81013a4:	f043 0304 	orr.w	r3, r3, #4
 81013a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013ac:	4b34      	ldr	r3, [pc, #208]	; (8101480 <MX_GPIO_Init+0x118>)
 81013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013b2:	f003 0304 	and.w	r3, r3, #4
 81013b6:	60fb      	str	r3, [r7, #12]
 81013b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81013ba:	4b31      	ldr	r3, [pc, #196]	; (8101480 <MX_GPIO_Init+0x118>)
 81013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013c0:	4a2f      	ldr	r2, [pc, #188]	; (8101480 <MX_GPIO_Init+0x118>)
 81013c2:	f043 0302 	orr.w	r3, r3, #2
 81013c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013ca:	4b2d      	ldr	r3, [pc, #180]	; (8101480 <MX_GPIO_Init+0x118>)
 81013cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013d0:	f003 0302 	and.w	r3, r3, #2
 81013d4:	60bb      	str	r3, [r7, #8]
 81013d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81013d8:	4b29      	ldr	r3, [pc, #164]	; (8101480 <MX_GPIO_Init+0x118>)
 81013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013de:	4a28      	ldr	r2, [pc, #160]	; (8101480 <MX_GPIO_Init+0x118>)
 81013e0:	f043 0308 	orr.w	r3, r3, #8
 81013e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013e8:	4b25      	ldr	r3, [pc, #148]	; (8101480 <MX_GPIO_Init+0x118>)
 81013ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013ee:	f003 0308 	and.w	r3, r3, #8
 81013f2:	607b      	str	r3, [r7, #4]
 81013f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RC522_Rst_Pin|RC522_SPI4_NSS_Pin, GPIO_PIN_SET);
 81013f6:	2201      	movs	r2, #1
 81013f8:	2118      	movs	r1, #24
 81013fa:	4822      	ldr	r0, [pc, #136]	; (8101484 <MX_GPIO_Init+0x11c>)
 81013fc:	f002 fbe8 	bl	8103bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8101400:	2200      	movs	r2, #0
 8101402:	2101      	movs	r1, #1
 8101404:	4820      	ldr	r0, [pc, #128]	; (8101488 <MX_GPIO_Init+0x120>)
 8101406:	f002 fbe3 	bl	8103bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 810140a:	2200      	movs	r2, #0
 810140c:	2102      	movs	r1, #2
 810140e:	481d      	ldr	r0, [pc, #116]	; (8101484 <MX_GPIO_Init+0x11c>)
 8101410:	f002 fbde 	bl	8103bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RC522_Rst_Pin RC522_SPI4_NSS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = RC522_Rst_Pin|RC522_SPI4_NSS_Pin|LD2_Pin;
 8101414:	231a      	movs	r3, #26
 8101416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101418:	2301      	movs	r3, #1
 810141a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810141c:	2300      	movs	r3, #0
 810141e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101420:	2300      	movs	r3, #0
 8101422:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101424:	f107 0314 	add.w	r3, r7, #20
 8101428:	4619      	mov	r1, r3
 810142a:	4816      	ldr	r0, [pc, #88]	; (8101484 <MX_GPIO_Init+0x11c>)
 810142c:	f002 fa20 	bl	8103870 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8101430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8101436:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 810143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810143c:	2300      	movs	r3, #0
 810143e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8101440:	f107 0314 	add.w	r3, r7, #20
 8101444:	4619      	mov	r1, r3
 8101446:	4811      	ldr	r0, [pc, #68]	; (810148c <MX_GPIO_Init+0x124>)
 8101448:	f002 fa12 	bl	8103870 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 810144c:	2301      	movs	r3, #1
 810144e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101450:	2301      	movs	r3, #1
 8101452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101454:	2300      	movs	r3, #0
 8101456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101458:	2300      	movs	r3, #0
 810145a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 810145c:	f107 0314 	add.w	r3, r7, #20
 8101460:	4619      	mov	r1, r3
 8101462:	4809      	ldr	r0, [pc, #36]	; (8101488 <MX_GPIO_Init+0x120>)
 8101464:	f002 fa04 	bl	8103870 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8101468:	2200      	movs	r2, #0
 810146a:	2100      	movs	r1, #0
 810146c:	2028      	movs	r0, #40	; 0x28
 810146e:	f000 fcf6 	bl	8101e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8101472:	2028      	movs	r0, #40	; 0x28
 8101474:	f000 fd0d 	bl	8101e92 <HAL_NVIC_EnableIRQ>

}
 8101478:	bf00      	nop
 810147a:	3728      	adds	r7, #40	; 0x28
 810147c:	46bd      	mov	sp, r7
 810147e:	bd80      	pop	{r7, pc}
 8101480:	58024400 	.word	0x58024400
 8101484:	58021000 	.word	0x58021000
 8101488:	58020400 	.word	0x58020400
 810148c:	58020800 	.word	0x58020800

08101490 <printUART>:

/* USER CODE BEGIN 4 */
void printUART(char* texts, uint8_t timeoutc){
 8101490:	b580      	push	{r7, lr}
 8101492:	b082      	sub	sp, #8
 8101494:	af00      	add	r7, sp, #0
 8101496:	6078      	str	r0, [r7, #4]
 8101498:	460b      	mov	r3, r1
 810149a:	70fb      	strb	r3, [r7, #3]
	sprintf(txtUARTBF, texts);
 810149c:	6879      	ldr	r1, [r7, #4]
 810149e:	4808      	ldr	r0, [pc, #32]	; (81014c0 <printUART+0x30>)
 81014a0:	f007 fd0e 	bl	8108ec0 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),timeoutc);
 81014a4:	4806      	ldr	r0, [pc, #24]	; (81014c0 <printUART+0x30>)
 81014a6:	f7fe ff1b 	bl	81002e0 <strlen>
 81014aa:	4603      	mov	r3, r0
 81014ac:	b29a      	uxth	r2, r3
 81014ae:	78fb      	ldrb	r3, [r7, #3]
 81014b0:	4903      	ldr	r1, [pc, #12]	; (81014c0 <printUART+0x30>)
 81014b2:	4804      	ldr	r0, [pc, #16]	; (81014c4 <printUART+0x34>)
 81014b4:	f006 fc1c 	bl	8107cf0 <HAL_UART_Transmit>
}
 81014b8:	bf00      	nop
 81014ba:	3708      	adds	r7, #8
 81014bc:	46bd      	mov	sp, r7
 81014be:	bd80      	pop	{r7, pc}
 81014c0:	100003e0 	.word	0x100003e0
 81014c4:	10000238 	.word	0x10000238

081014c8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 81014c8:	b480      	push	{r7}
 81014ca:	b083      	sub	sp, #12
 81014cc:	af00      	add	r7, sp, #0
 81014ce:	4603      	mov	r3, r0
 81014d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 81014d2:	88fb      	ldrh	r3, [r7, #6]
 81014d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81014d8:	d104      	bne.n	81014e4 <HAL_GPIO_EXTI_Callback+0x1c>
		//flag_one = 3;   ////MFRC522_SelfTest();
		SRAM4->flag_blue_btn = 1;
 81014da:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 81014de:	2201      	movs	r2, #1
 81014e0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		//SRAM4->flag_dis_wwdg = 12;
		}
}
 81014e4:	bf00      	nop
 81014e6:	370c      	adds	r7, #12
 81014e8:	46bd      	mov	sp, r7
 81014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014ee:	4770      	bx	lr

081014f0 <HAL_TIM_PeriodElapsedCallback>:

uint64_t micros()
{return _micros + htim17.Instance->CNT;}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 81014f0:	b4b0      	push	{r4, r5, r7}
 81014f2:	b083      	sub	sp, #12
 81014f4:	af00      	add	r7, sp, #0
 81014f6:	6078      	str	r0, [r7, #4]
 if(htim == &htim17)
 81014f8:	687b      	ldr	r3, [r7, #4]
 81014fa:	4a09      	ldr	r2, [pc, #36]	; (8101520 <HAL_TIM_PeriodElapsedCallback+0x30>)
 81014fc:	4293      	cmp	r3, r2
 81014fe:	d10a      	bne.n	8101516 <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 8101500:	4b08      	ldr	r3, [pc, #32]	; (8101524 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8101502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101506:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810150a:	1854      	adds	r4, r2, r1
 810150c:	f143 0500 	adc.w	r5, r3, #0
 8101510:	4b04      	ldr	r3, [pc, #16]	; (8101524 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8101512:	e9c3 4500 	strd	r4, r5, [r3]
}
 8101516:	bf00      	nop
 8101518:	370c      	adds	r7, #12
 810151a:	46bd      	mov	sp, r7
 810151c:	bcb0      	pop	{r4, r5, r7}
 810151e:	4770      	bx	lr
 8101520:	100001ec 	.word	0x100001ec
 8101524:	100003b8 	.word	0x100003b8

08101528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101528:	b480      	push	{r7}
 810152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810152c:	b672      	cpsid	i
}
 810152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101530:	e7fe      	b.n	8101530 <Error_Handler+0x8>
	...

08101534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101534:	b480      	push	{r7}
 8101536:	b083      	sub	sp, #12
 8101538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810153a:	4b0a      	ldr	r3, [pc, #40]	; (8101564 <HAL_MspInit+0x30>)
 810153c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101540:	4a08      	ldr	r2, [pc, #32]	; (8101564 <HAL_MspInit+0x30>)
 8101542:	f043 0302 	orr.w	r3, r3, #2
 8101546:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810154a:	4b06      	ldr	r3, [pc, #24]	; (8101564 <HAL_MspInit+0x30>)
 810154c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101550:	f003 0302 	and.w	r3, r3, #2
 8101554:	607b      	str	r3, [r7, #4]
 8101556:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101558:	bf00      	nop
 810155a:	370c      	adds	r7, #12
 810155c:	46bd      	mov	sp, r7
 810155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101562:	4770      	bx	lr
 8101564:	58024400 	.word	0x58024400

08101568 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8101568:	b580      	push	{r7, lr}
 810156a:	b0b8      	sub	sp, #224	; 0xe0
 810156c:	af00      	add	r7, sp, #0
 810156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101570:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101574:	2200      	movs	r2, #0
 8101576:	601a      	str	r2, [r3, #0]
 8101578:	605a      	str	r2, [r3, #4]
 810157a:	609a      	str	r2, [r3, #8]
 810157c:	60da      	str	r2, [r3, #12]
 810157e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101580:	f107 0310 	add.w	r3, r7, #16
 8101584:	22bc      	movs	r2, #188	; 0xbc
 8101586:	2100      	movs	r1, #0
 8101588:	4618      	mov	r0, r3
 810158a:	f007 fc91 	bl	8108eb0 <memset>
  if(hi2c->Instance==I2C2)
 810158e:	687b      	ldr	r3, [r7, #4]
 8101590:	681b      	ldr	r3, [r3, #0]
 8101592:	4a25      	ldr	r2, [pc, #148]	; (8101628 <HAL_I2C_MspInit+0xc0>)
 8101594:	4293      	cmp	r3, r2
 8101596:	d142      	bne.n	810161e <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8101598:	2308      	movs	r3, #8
 810159a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 810159c:	2300      	movs	r3, #0
 810159e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81015a2:	f107 0310 	add.w	r3, r7, #16
 81015a6:	4618      	mov	r0, r3
 81015a8:	f003 fa9e 	bl	8104ae8 <HAL_RCCEx_PeriphCLKConfig>
 81015ac:	4603      	mov	r3, r0
 81015ae:	2b00      	cmp	r3, #0
 81015b0:	d001      	beq.n	81015b6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 81015b2:	f7ff ffb9 	bl	8101528 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81015b6:	4b1d      	ldr	r3, [pc, #116]	; (810162c <HAL_I2C_MspInit+0xc4>)
 81015b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015bc:	4a1b      	ldr	r2, [pc, #108]	; (810162c <HAL_I2C_MspInit+0xc4>)
 81015be:	f043 0302 	orr.w	r3, r3, #2
 81015c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015c6:	4b19      	ldr	r3, [pc, #100]	; (810162c <HAL_I2C_MspInit+0xc4>)
 81015c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015cc:	f003 0302 	and.w	r3, r3, #2
 81015d0:	60fb      	str	r3, [r7, #12]
 81015d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 81015d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81015d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81015dc:	2312      	movs	r3, #18
 81015de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015e2:	2300      	movs	r3, #0
 81015e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015e8:	2300      	movs	r3, #0
 81015ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 81015ee:	2304      	movs	r3, #4
 81015f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81015f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81015f8:	4619      	mov	r1, r3
 81015fa:	480d      	ldr	r0, [pc, #52]	; (8101630 <HAL_I2C_MspInit+0xc8>)
 81015fc:	f002 f938 	bl	8103870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8101600:	4b0a      	ldr	r3, [pc, #40]	; (810162c <HAL_I2C_MspInit+0xc4>)
 8101602:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101606:	4a09      	ldr	r2, [pc, #36]	; (810162c <HAL_I2C_MspInit+0xc4>)
 8101608:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810160c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101610:	4b06      	ldr	r3, [pc, #24]	; (810162c <HAL_I2C_MspInit+0xc4>)
 8101612:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810161a:	60bb      	str	r3, [r7, #8]
 810161c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 810161e:	bf00      	nop
 8101620:	37e0      	adds	r7, #224	; 0xe0
 8101622:	46bd      	mov	sp, r7
 8101624:	bd80      	pop	{r7, pc}
 8101626:	bf00      	nop
 8101628:	40005800 	.word	0x40005800
 810162c:	58024400 	.word	0x58024400
 8101630:	58020400 	.word	0x58020400

08101634 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8101634:	b580      	push	{r7, lr}
 8101636:	b0b8      	sub	sp, #224	; 0xe0
 8101638:	af00      	add	r7, sp, #0
 810163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810163c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101640:	2200      	movs	r2, #0
 8101642:	601a      	str	r2, [r3, #0]
 8101644:	605a      	str	r2, [r3, #4]
 8101646:	609a      	str	r2, [r3, #8]
 8101648:	60da      	str	r2, [r3, #12]
 810164a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810164c:	f107 0310 	add.w	r3, r7, #16
 8101650:	22bc      	movs	r2, #188	; 0xbc
 8101652:	2100      	movs	r1, #0
 8101654:	4618      	mov	r0, r3
 8101656:	f007 fc2b 	bl	8108eb0 <memset>
  if(hrtc->Instance==RTC)
 810165a:	687b      	ldr	r3, [r7, #4]
 810165c:	681b      	ldr	r3, [r3, #0]
 810165e:	4a21      	ldr	r2, [pc, #132]	; (81016e4 <HAL_RTC_MspInit+0xb0>)
 8101660:	4293      	cmp	r3, r2
 8101662:	d13b      	bne.n	81016dc <HAL_RTC_MspInit+0xa8>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8101664:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8101668:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 810166a:	f44f 7300 	mov.w	r3, #512	; 0x200
 810166e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101672:	f107 0310 	add.w	r3, r7, #16
 8101676:	4618      	mov	r0, r3
 8101678:	f003 fa36 	bl	8104ae8 <HAL_RCCEx_PeriphCLKConfig>
 810167c:	4603      	mov	r3, r0
 810167e:	2b00      	cmp	r3, #0
 8101680:	d001      	beq.n	8101686 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 8101682:	f7ff ff51 	bl	8101528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8101686:	4b18      	ldr	r3, [pc, #96]	; (81016e8 <HAL_RTC_MspInit+0xb4>)
 8101688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810168a:	4a17      	ldr	r2, [pc, #92]	; (81016e8 <HAL_RTC_MspInit+0xb4>)
 810168c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101690:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101692:	4b15      	ldr	r3, [pc, #84]	; (81016e8 <HAL_RTC_MspInit+0xb4>)
 8101694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101698:	4a13      	ldr	r2, [pc, #76]	; (81016e8 <HAL_RTC_MspInit+0xb4>)
 810169a:	f043 0302 	orr.w	r3, r3, #2
 810169e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81016a2:	4b11      	ldr	r3, [pc, #68]	; (81016e8 <HAL_RTC_MspInit+0xb4>)
 81016a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016a8:	f003 0302 	and.w	r3, r3, #2
 81016ac:	60fb      	str	r3, [r7, #12]
 81016ae:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 81016b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81016b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81016b8:	2302      	movs	r3, #2
 81016ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016be:	2300      	movs	r3, #0
 81016c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81016c4:	2300      	movs	r3, #0
 81016c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 81016ca:	2300      	movs	r3, #0
 81016cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81016d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81016d4:	4619      	mov	r1, r3
 81016d6:	4805      	ldr	r0, [pc, #20]	; (81016ec <HAL_RTC_MspInit+0xb8>)
 81016d8:	f002 f8ca 	bl	8103870 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 81016dc:	bf00      	nop
 81016de:	37e0      	adds	r7, #224	; 0xe0
 81016e0:	46bd      	mov	sp, r7
 81016e2:	bd80      	pop	{r7, pc}
 81016e4:	58004000 	.word	0x58004000
 81016e8:	58024400 	.word	0x58024400
 81016ec:	58020400 	.word	0x58020400

081016f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 81016f0:	b580      	push	{r7, lr}
 81016f2:	b0b8      	sub	sp, #224	; 0xe0
 81016f4:	af00      	add	r7, sp, #0
 81016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81016f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81016fc:	2200      	movs	r2, #0
 81016fe:	601a      	str	r2, [r3, #0]
 8101700:	605a      	str	r2, [r3, #4]
 8101702:	609a      	str	r2, [r3, #8]
 8101704:	60da      	str	r2, [r3, #12]
 8101706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101708:	f107 0310 	add.w	r3, r7, #16
 810170c:	22bc      	movs	r2, #188	; 0xbc
 810170e:	2100      	movs	r1, #0
 8101710:	4618      	mov	r0, r3
 8101712:	f007 fbcd 	bl	8108eb0 <memset>
  if(hspi->Instance==SPI4)
 8101716:	687b      	ldr	r3, [r7, #4]
 8101718:	681b      	ldr	r3, [r3, #0]
 810171a:	4a24      	ldr	r2, [pc, #144]	; (81017ac <HAL_SPI_MspInit+0xbc>)
 810171c:	4293      	cmp	r3, r2
 810171e:	d141      	bne.n	81017a4 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8101720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101724:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8101726:	2300      	movs	r3, #0
 8101728:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810172a:	f107 0310 	add.w	r3, r7, #16
 810172e:	4618      	mov	r0, r3
 8101730:	f003 f9da 	bl	8104ae8 <HAL_RCCEx_PeriphCLKConfig>
 8101734:	4603      	mov	r3, r0
 8101736:	2b00      	cmp	r3, #0
 8101738:	d001      	beq.n	810173e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 810173a:	f7ff fef5 	bl	8101528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 810173e:	4b1c      	ldr	r3, [pc, #112]	; (81017b0 <HAL_SPI_MspInit+0xc0>)
 8101740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101744:	4a1a      	ldr	r2, [pc, #104]	; (81017b0 <HAL_SPI_MspInit+0xc0>)
 8101746:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 810174a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810174e:	4b18      	ldr	r3, [pc, #96]	; (81017b0 <HAL_SPI_MspInit+0xc0>)
 8101750:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101758:	60fb      	str	r3, [r7, #12]
 810175a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 810175c:	4b14      	ldr	r3, [pc, #80]	; (81017b0 <HAL_SPI_MspInit+0xc0>)
 810175e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101762:	4a13      	ldr	r2, [pc, #76]	; (81017b0 <HAL_SPI_MspInit+0xc0>)
 8101764:	f043 0310 	orr.w	r3, r3, #16
 8101768:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810176c:	4b10      	ldr	r3, [pc, #64]	; (81017b0 <HAL_SPI_MspInit+0xc0>)
 810176e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101772:	f003 0310 	and.w	r3, r3, #16
 8101776:	60bb      	str	r3, [r7, #8]
 8101778:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 810177a:	2364      	movs	r3, #100	; 0x64
 810177c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101780:	2302      	movs	r3, #2
 8101782:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101786:	2300      	movs	r3, #0
 8101788:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810178c:	2300      	movs	r3, #0
 810178e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8101792:	2305      	movs	r3, #5
 8101794:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101798:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810179c:	4619      	mov	r1, r3
 810179e:	4805      	ldr	r0, [pc, #20]	; (81017b4 <HAL_SPI_MspInit+0xc4>)
 81017a0:	f002 f866 	bl	8103870 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 81017a4:	bf00      	nop
 81017a6:	37e0      	adds	r7, #224	; 0xe0
 81017a8:	46bd      	mov	sp, r7
 81017aa:	bd80      	pop	{r7, pc}
 81017ac:	40013400 	.word	0x40013400
 81017b0:	58024400 	.word	0x58024400
 81017b4:	58021000 	.word	0x58021000

081017b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 81017b8:	b580      	push	{r7, lr}
 81017ba:	b084      	sub	sp, #16
 81017bc:	af00      	add	r7, sp, #0
 81017be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 81017c0:	687b      	ldr	r3, [r7, #4]
 81017c2:	681b      	ldr	r3, [r3, #0]
 81017c4:	4a0e      	ldr	r2, [pc, #56]	; (8101800 <HAL_TIM_Base_MspInit+0x48>)
 81017c6:	4293      	cmp	r3, r2
 81017c8:	d116      	bne.n	81017f8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 81017ca:	4b0e      	ldr	r3, [pc, #56]	; (8101804 <HAL_TIM_Base_MspInit+0x4c>)
 81017cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81017d0:	4a0c      	ldr	r2, [pc, #48]	; (8101804 <HAL_TIM_Base_MspInit+0x4c>)
 81017d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81017d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81017da:	4b0a      	ldr	r3, [pc, #40]	; (8101804 <HAL_TIM_Base_MspInit+0x4c>)
 81017dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81017e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81017e4:	60fb      	str	r3, [r7, #12]
 81017e6:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 81017e8:	2200      	movs	r2, #0
 81017ea:	2100      	movs	r1, #0
 81017ec:	2076      	movs	r0, #118	; 0x76
 81017ee:	f000 fb36 	bl	8101e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 81017f2:	2076      	movs	r0, #118	; 0x76
 81017f4:	f000 fb4d 	bl	8101e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 81017f8:	bf00      	nop
 81017fa:	3710      	adds	r7, #16
 81017fc:	46bd      	mov	sp, r7
 81017fe:	bd80      	pop	{r7, pc}
 8101800:	40014800 	.word	0x40014800
 8101804:	58024400 	.word	0x58024400

08101808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101808:	b580      	push	{r7, lr}
 810180a:	b0b8      	sub	sp, #224	; 0xe0
 810180c:	af00      	add	r7, sp, #0
 810180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101810:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101814:	2200      	movs	r2, #0
 8101816:	601a      	str	r2, [r3, #0]
 8101818:	605a      	str	r2, [r3, #4]
 810181a:	609a      	str	r2, [r3, #8]
 810181c:	60da      	str	r2, [r3, #12]
 810181e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101820:	f107 0310 	add.w	r3, r7, #16
 8101824:	22bc      	movs	r2, #188	; 0xbc
 8101826:	2100      	movs	r1, #0
 8101828:	4618      	mov	r0, r3
 810182a:	f007 fb41 	bl	8108eb0 <memset>
  if(huart->Instance==USART3)
 810182e:	687b      	ldr	r3, [r7, #4]
 8101830:	681b      	ldr	r3, [r3, #0]
 8101832:	4a52      	ldr	r2, [pc, #328]	; (810197c <HAL_UART_MspInit+0x174>)
 8101834:	4293      	cmp	r3, r2
 8101836:	f040 809d 	bne.w	8101974 <HAL_UART_MspInit+0x16c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 810183a:	2302      	movs	r3, #2
 810183c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 810183e:	2300      	movs	r3, #0
 8101840:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101844:	f107 0310 	add.w	r3, r7, #16
 8101848:	4618      	mov	r0, r3
 810184a:	f003 f94d 	bl	8104ae8 <HAL_RCCEx_PeriphCLKConfig>
 810184e:	4603      	mov	r3, r0
 8101850:	2b00      	cmp	r3, #0
 8101852:	d001      	beq.n	8101858 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8101854:	f7ff fe68 	bl	8101528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101858:	4b49      	ldr	r3, [pc, #292]	; (8101980 <HAL_UART_MspInit+0x178>)
 810185a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810185e:	4a48      	ldr	r2, [pc, #288]	; (8101980 <HAL_UART_MspInit+0x178>)
 8101860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101864:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101868:	4b45      	ldr	r3, [pc, #276]	; (8101980 <HAL_UART_MspInit+0x178>)
 810186a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810186e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101872:	60fb      	str	r3, [r7, #12]
 8101874:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101876:	4b42      	ldr	r3, [pc, #264]	; (8101980 <HAL_UART_MspInit+0x178>)
 8101878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810187c:	4a40      	ldr	r2, [pc, #256]	; (8101980 <HAL_UART_MspInit+0x178>)
 810187e:	f043 0308 	orr.w	r3, r3, #8
 8101882:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101886:	4b3e      	ldr	r3, [pc, #248]	; (8101980 <HAL_UART_MspInit+0x178>)
 8101888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810188c:	f003 0308 	and.w	r3, r3, #8
 8101890:	60bb      	str	r3, [r7, #8]
 8101892:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8101894:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101898:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810189c:	2302      	movs	r3, #2
 810189e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018a2:	2300      	movs	r3, #0
 81018a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81018a8:	2300      	movs	r3, #0
 81018aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81018ae:	2307      	movs	r3, #7
 81018b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81018b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81018b8:	4619      	mov	r1, r3
 81018ba:	4832      	ldr	r0, [pc, #200]	; (8101984 <HAL_UART_MspInit+0x17c>)
 81018bc:	f001 ffd8 	bl	8103870 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 81018c0:	4b31      	ldr	r3, [pc, #196]	; (8101988 <HAL_UART_MspInit+0x180>)
 81018c2:	4a32      	ldr	r2, [pc, #200]	; (810198c <HAL_UART_MspInit+0x184>)
 81018c4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 81018c6:	4b30      	ldr	r3, [pc, #192]	; (8101988 <HAL_UART_MspInit+0x180>)
 81018c8:	222d      	movs	r2, #45	; 0x2d
 81018ca:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 81018cc:	4b2e      	ldr	r3, [pc, #184]	; (8101988 <HAL_UART_MspInit+0x180>)
 81018ce:	2200      	movs	r2, #0
 81018d0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 81018d2:	4b2d      	ldr	r3, [pc, #180]	; (8101988 <HAL_UART_MspInit+0x180>)
 81018d4:	2200      	movs	r2, #0
 81018d6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 81018d8:	4b2b      	ldr	r3, [pc, #172]	; (8101988 <HAL_UART_MspInit+0x180>)
 81018da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81018de:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81018e0:	4b29      	ldr	r3, [pc, #164]	; (8101988 <HAL_UART_MspInit+0x180>)
 81018e2:	2200      	movs	r2, #0
 81018e4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81018e6:	4b28      	ldr	r3, [pc, #160]	; (8101988 <HAL_UART_MspInit+0x180>)
 81018e8:	2200      	movs	r2, #0
 81018ea:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 81018ec:	4b26      	ldr	r3, [pc, #152]	; (8101988 <HAL_UART_MspInit+0x180>)
 81018ee:	2200      	movs	r2, #0
 81018f0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 81018f2:	4b25      	ldr	r3, [pc, #148]	; (8101988 <HAL_UART_MspInit+0x180>)
 81018f4:	2200      	movs	r2, #0
 81018f6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81018f8:	4b23      	ldr	r3, [pc, #140]	; (8101988 <HAL_UART_MspInit+0x180>)
 81018fa:	2200      	movs	r2, #0
 81018fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 81018fe:	4822      	ldr	r0, [pc, #136]	; (8101988 <HAL_UART_MspInit+0x180>)
 8101900:	f000 faf6 	bl	8101ef0 <HAL_DMA_Init>
 8101904:	4603      	mov	r3, r0
 8101906:	2b00      	cmp	r3, #0
 8101908:	d001      	beq.n	810190e <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 810190a:	f7ff fe0d 	bl	8101528 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 810190e:	687b      	ldr	r3, [r7, #4]
 8101910:	4a1d      	ldr	r2, [pc, #116]	; (8101988 <HAL_UART_MspInit+0x180>)
 8101912:	67da      	str	r2, [r3, #124]	; 0x7c
 8101914:	4a1c      	ldr	r2, [pc, #112]	; (8101988 <HAL_UART_MspInit+0x180>)
 8101916:	687b      	ldr	r3, [r7, #4]
 8101918:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 810191a:	4b1d      	ldr	r3, [pc, #116]	; (8101990 <HAL_UART_MspInit+0x188>)
 810191c:	4a1d      	ldr	r2, [pc, #116]	; (8101994 <HAL_UART_MspInit+0x18c>)
 810191e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8101920:	4b1b      	ldr	r3, [pc, #108]	; (8101990 <HAL_UART_MspInit+0x188>)
 8101922:	222e      	movs	r2, #46	; 0x2e
 8101924:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101926:	4b1a      	ldr	r3, [pc, #104]	; (8101990 <HAL_UART_MspInit+0x188>)
 8101928:	2240      	movs	r2, #64	; 0x40
 810192a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 810192c:	4b18      	ldr	r3, [pc, #96]	; (8101990 <HAL_UART_MspInit+0x188>)
 810192e:	2200      	movs	r2, #0
 8101930:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101932:	4b17      	ldr	r3, [pc, #92]	; (8101990 <HAL_UART_MspInit+0x188>)
 8101934:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101938:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810193a:	4b15      	ldr	r3, [pc, #84]	; (8101990 <HAL_UART_MspInit+0x188>)
 810193c:	2200      	movs	r2, #0
 810193e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101940:	4b13      	ldr	r3, [pc, #76]	; (8101990 <HAL_UART_MspInit+0x188>)
 8101942:	2200      	movs	r2, #0
 8101944:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8101946:	4b12      	ldr	r3, [pc, #72]	; (8101990 <HAL_UART_MspInit+0x188>)
 8101948:	2200      	movs	r2, #0
 810194a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 810194c:	4b10      	ldr	r3, [pc, #64]	; (8101990 <HAL_UART_MspInit+0x188>)
 810194e:	2200      	movs	r2, #0
 8101950:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101952:	4b0f      	ldr	r3, [pc, #60]	; (8101990 <HAL_UART_MspInit+0x188>)
 8101954:	2200      	movs	r2, #0
 8101956:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8101958:	480d      	ldr	r0, [pc, #52]	; (8101990 <HAL_UART_MspInit+0x188>)
 810195a:	f000 fac9 	bl	8101ef0 <HAL_DMA_Init>
 810195e:	4603      	mov	r3, r0
 8101960:	2b00      	cmp	r3, #0
 8101962:	d001      	beq.n	8101968 <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 8101964:	f7ff fde0 	bl	8101528 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8101968:	687b      	ldr	r3, [r7, #4]
 810196a:	4a09      	ldr	r2, [pc, #36]	; (8101990 <HAL_UART_MspInit+0x188>)
 810196c:	679a      	str	r2, [r3, #120]	; 0x78
 810196e:	4a08      	ldr	r2, [pc, #32]	; (8101990 <HAL_UART_MspInit+0x188>)
 8101970:	687b      	ldr	r3, [r7, #4]
 8101972:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8101974:	bf00      	nop
 8101976:	37e0      	adds	r7, #224	; 0xe0
 8101978:	46bd      	mov	sp, r7
 810197a:	bd80      	pop	{r7, pc}
 810197c:	40004800 	.word	0x40004800
 8101980:	58024400 	.word	0x58024400
 8101984:	58020c00 	.word	0x58020c00
 8101988:	100002c8 	.word	0x100002c8
 810198c:	40020010 	.word	0x40020010
 8101990:	10000340 	.word	0x10000340
 8101994:	40020028 	.word	0x40020028

08101998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101998:	b480      	push	{r7}
 810199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 810199c:	e7fe      	b.n	810199c <NMI_Handler+0x4>

0810199e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810199e:	b480      	push	{r7}
 81019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81019a2:	e7fe      	b.n	81019a2 <HardFault_Handler+0x4>

081019a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81019a4:	b480      	push	{r7}
 81019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81019a8:	e7fe      	b.n	81019a8 <MemManage_Handler+0x4>

081019aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81019aa:	b480      	push	{r7}
 81019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81019ae:	e7fe      	b.n	81019ae <BusFault_Handler+0x4>

081019b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81019b0:	b480      	push	{r7}
 81019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81019b4:	e7fe      	b.n	81019b4 <UsageFault_Handler+0x4>

081019b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81019b6:	b480      	push	{r7}
 81019b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81019ba:	bf00      	nop
 81019bc:	46bd      	mov	sp, r7
 81019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019c2:	4770      	bx	lr

081019c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81019c4:	b480      	push	{r7}
 81019c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81019c8:	bf00      	nop
 81019ca:	46bd      	mov	sp, r7
 81019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019d0:	4770      	bx	lr

081019d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81019d2:	b480      	push	{r7}
 81019d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81019d6:	bf00      	nop
 81019d8:	46bd      	mov	sp, r7
 81019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019de:	4770      	bx	lr

081019e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81019e0:	b580      	push	{r7, lr}
 81019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81019e4:	f000 f91c 	bl	8101c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81019e8:	bf00      	nop
 81019ea:	bd80      	pop	{r7, pc}

081019ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 81019ec:	b580      	push	{r7, lr}
 81019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 81019f0:	4802      	ldr	r0, [pc, #8]	; (81019fc <DMA1_Stream0_IRQHandler+0x10>)
 81019f2:	f000 fdd7 	bl	81025a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 81019f6:	bf00      	nop
 81019f8:	bd80      	pop	{r7, pc}
 81019fa:	bf00      	nop
 81019fc:	100002c8 	.word	0x100002c8

08101a00 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8101a00:	b580      	push	{r7, lr}
 8101a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8101a04:	4802      	ldr	r0, [pc, #8]	; (8101a10 <DMA1_Stream1_IRQHandler+0x10>)
 8101a06:	f000 fdcd 	bl	81025a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8101a0a:	bf00      	nop
 8101a0c:	bd80      	pop	{r7, pc}
 8101a0e:	bf00      	nop
 8101a10:	10000340 	.word	0x10000340

08101a14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8101a14:	b580      	push	{r7, lr}
 8101a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8101a18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8101a1c:	f002 f90b 	bl	8103c36 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8101a20:	bf00      	nop
 8101a22:	bd80      	pop	{r7, pc}

08101a24 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8101a24:	b580      	push	{r7, lr}
 8101a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8101a28:	4802      	ldr	r0, [pc, #8]	; (8101a34 <TIM17_IRQHandler+0x10>)
 8101a2a:	f005 ff12 	bl	8107852 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8101a2e:	bf00      	nop
 8101a30:	bd80      	pop	{r7, pc}
 8101a32:	bf00      	nop
 8101a34:	100001ec 	.word	0x100001ec

08101a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101a38:	b580      	push	{r7, lr}
 8101a3a:	b086      	sub	sp, #24
 8101a3c:	af00      	add	r7, sp, #0
 8101a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101a40:	4a14      	ldr	r2, [pc, #80]	; (8101a94 <_sbrk+0x5c>)
 8101a42:	4b15      	ldr	r3, [pc, #84]	; (8101a98 <_sbrk+0x60>)
 8101a44:	1ad3      	subs	r3, r2, r3
 8101a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101a48:	697b      	ldr	r3, [r7, #20]
 8101a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101a4c:	4b13      	ldr	r3, [pc, #76]	; (8101a9c <_sbrk+0x64>)
 8101a4e:	681b      	ldr	r3, [r3, #0]
 8101a50:	2b00      	cmp	r3, #0
 8101a52:	d102      	bne.n	8101a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101a54:	4b11      	ldr	r3, [pc, #68]	; (8101a9c <_sbrk+0x64>)
 8101a56:	4a12      	ldr	r2, [pc, #72]	; (8101aa0 <_sbrk+0x68>)
 8101a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101a5a:	4b10      	ldr	r3, [pc, #64]	; (8101a9c <_sbrk+0x64>)
 8101a5c:	681a      	ldr	r2, [r3, #0]
 8101a5e:	687b      	ldr	r3, [r7, #4]
 8101a60:	4413      	add	r3, r2
 8101a62:	693a      	ldr	r2, [r7, #16]
 8101a64:	429a      	cmp	r2, r3
 8101a66:	d207      	bcs.n	8101a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101a68:	f007 f9f8 	bl	8108e5c <__errno>
 8101a6c:	4603      	mov	r3, r0
 8101a6e:	220c      	movs	r2, #12
 8101a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101a72:	f04f 33ff 	mov.w	r3, #4294967295
 8101a76:	e009      	b.n	8101a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101a78:	4b08      	ldr	r3, [pc, #32]	; (8101a9c <_sbrk+0x64>)
 8101a7a:	681b      	ldr	r3, [r3, #0]
 8101a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101a7e:	4b07      	ldr	r3, [pc, #28]	; (8101a9c <_sbrk+0x64>)
 8101a80:	681a      	ldr	r2, [r3, #0]
 8101a82:	687b      	ldr	r3, [r7, #4]
 8101a84:	4413      	add	r3, r2
 8101a86:	4a05      	ldr	r2, [pc, #20]	; (8101a9c <_sbrk+0x64>)
 8101a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101a8a:	68fb      	ldr	r3, [r7, #12]
}
 8101a8c:	4618      	mov	r0, r3
 8101a8e:	3718      	adds	r7, #24
 8101a90:	46bd      	mov	sp, r7
 8101a92:	bd80      	pop	{r7, pc}
 8101a94:	10048000 	.word	0x10048000
 8101a98:	00000400 	.word	0x00000400
 8101a9c:	10000470 	.word	0x10000470
 8101aa0:	10000488 	.word	0x10000488

08101aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101adc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101aa8:	f7fe fdf4 	bl	8100694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101aac:	480c      	ldr	r0, [pc, #48]	; (8101ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101aae:	490d      	ldr	r1, [pc, #52]	; (8101ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101ab0:	4a0d      	ldr	r2, [pc, #52]	; (8101ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101ab4:	e002      	b.n	8101abc <LoopCopyDataInit>

08101ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101aba:	3304      	adds	r3, #4

08101abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101ac0:	d3f9      	bcc.n	8101ab6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101ac2:	4a0a      	ldr	r2, [pc, #40]	; (8101aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101ac4:	4c0a      	ldr	r4, [pc, #40]	; (8101af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101ac8:	e001      	b.n	8101ace <LoopFillZerobss>

08101aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101acc:	3204      	adds	r2, #4

08101ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101ad0:	d3fb      	bcc.n	8101aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101ad2:	f007 f9c9 	bl	8108e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101ad6:	f7ff f8ab 	bl	8100c30 <main>
  bx  lr
 8101ada:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101adc:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101ae0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101ae4:	10000074 	.word	0x10000074
  ldr r2, =_sidata
 8101ae8:	08109934 	.word	0x08109934
  ldr r2, =_sbss
 8101aec:	10000078 	.word	0x10000078
  ldr r4, =_ebss
 8101af0:	10000488 	.word	0x10000488

08101af4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101af4:	e7fe      	b.n	8101af4 <ADC3_IRQHandler>
	...

08101af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101af8:	b580      	push	{r7, lr}
 8101afa:	b082      	sub	sp, #8
 8101afc:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101afe:	4b28      	ldr	r3, [pc, #160]	; (8101ba0 <HAL_Init+0xa8>)
 8101b00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b04:	4a26      	ldr	r2, [pc, #152]	; (8101ba0 <HAL_Init+0xa8>)
 8101b06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101b0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101b0e:	4b24      	ldr	r3, [pc, #144]	; (8101ba0 <HAL_Init+0xa8>)
 8101b10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101b18:	603b      	str	r3, [r7, #0]
 8101b1a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101b1c:	4b21      	ldr	r3, [pc, #132]	; (8101ba4 <HAL_Init+0xac>)
 8101b1e:	681b      	ldr	r3, [r3, #0]
 8101b20:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101b24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101b28:	4a1e      	ldr	r2, [pc, #120]	; (8101ba4 <HAL_Init+0xac>)
 8101b2a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101b2e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101b30:	4b1c      	ldr	r3, [pc, #112]	; (8101ba4 <HAL_Init+0xac>)
 8101b32:	681b      	ldr	r3, [r3, #0]
 8101b34:	4a1b      	ldr	r2, [pc, #108]	; (8101ba4 <HAL_Init+0xac>)
 8101b36:	f043 0301 	orr.w	r3, r3, #1
 8101b3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101b3c:	2003      	movs	r0, #3
 8101b3e:	f000 f983 	bl	8101e48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101b42:	f002 fdf9 	bl	8104738 <HAL_RCC_GetSysClockFreq>
 8101b46:	4602      	mov	r2, r0
 8101b48:	4b15      	ldr	r3, [pc, #84]	; (8101ba0 <HAL_Init+0xa8>)
 8101b4a:	699b      	ldr	r3, [r3, #24]
 8101b4c:	0a1b      	lsrs	r3, r3, #8
 8101b4e:	f003 030f 	and.w	r3, r3, #15
 8101b52:	4915      	ldr	r1, [pc, #84]	; (8101ba8 <HAL_Init+0xb0>)
 8101b54:	5ccb      	ldrb	r3, [r1, r3]
 8101b56:	f003 031f 	and.w	r3, r3, #31
 8101b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8101b5e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101b60:	4b0f      	ldr	r3, [pc, #60]	; (8101ba0 <HAL_Init+0xa8>)
 8101b62:	699b      	ldr	r3, [r3, #24]
 8101b64:	f003 030f 	and.w	r3, r3, #15
 8101b68:	4a0f      	ldr	r2, [pc, #60]	; (8101ba8 <HAL_Init+0xb0>)
 8101b6a:	5cd3      	ldrb	r3, [r2, r3]
 8101b6c:	f003 031f 	and.w	r3, r3, #31
 8101b70:	687a      	ldr	r2, [r7, #4]
 8101b72:	fa22 f303 	lsr.w	r3, r2, r3
 8101b76:	4a0d      	ldr	r2, [pc, #52]	; (8101bac <HAL_Init+0xb4>)
 8101b78:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101b7a:	4b0c      	ldr	r3, [pc, #48]	; (8101bac <HAL_Init+0xb4>)
 8101b7c:	681b      	ldr	r3, [r3, #0]
 8101b7e:	4a0c      	ldr	r2, [pc, #48]	; (8101bb0 <HAL_Init+0xb8>)
 8101b80:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101b82:	2000      	movs	r0, #0
 8101b84:	f000 f816 	bl	8101bb4 <HAL_InitTick>
 8101b88:	4603      	mov	r3, r0
 8101b8a:	2b00      	cmp	r3, #0
 8101b8c:	d001      	beq.n	8101b92 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101b8e:	2301      	movs	r3, #1
 8101b90:	e002      	b.n	8101b98 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101b92:	f7ff fccf 	bl	8101534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101b96:	2300      	movs	r3, #0
}
 8101b98:	4618      	mov	r0, r3
 8101b9a:	3708      	adds	r7, #8
 8101b9c:	46bd      	mov	sp, r7
 8101b9e:	bd80      	pop	{r7, pc}
 8101ba0:	58024400 	.word	0x58024400
 8101ba4:	40024400 	.word	0x40024400
 8101ba8:	081098b0 	.word	0x081098b0
 8101bac:	10000004 	.word	0x10000004
 8101bb0:	10000000 	.word	0x10000000

08101bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101bb4:	b580      	push	{r7, lr}
 8101bb6:	b082      	sub	sp, #8
 8101bb8:	af00      	add	r7, sp, #0
 8101bba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101bbc:	4b15      	ldr	r3, [pc, #84]	; (8101c14 <HAL_InitTick+0x60>)
 8101bbe:	781b      	ldrb	r3, [r3, #0]
 8101bc0:	2b00      	cmp	r3, #0
 8101bc2:	d101      	bne.n	8101bc8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101bc4:	2301      	movs	r3, #1
 8101bc6:	e021      	b.n	8101c0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101bc8:	4b13      	ldr	r3, [pc, #76]	; (8101c18 <HAL_InitTick+0x64>)
 8101bca:	681a      	ldr	r2, [r3, #0]
 8101bcc:	4b11      	ldr	r3, [pc, #68]	; (8101c14 <HAL_InitTick+0x60>)
 8101bce:	781b      	ldrb	r3, [r3, #0]
 8101bd0:	4619      	mov	r1, r3
 8101bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8101bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8101bde:	4618      	mov	r0, r3
 8101be0:	f000 f965 	bl	8101eae <HAL_SYSTICK_Config>
 8101be4:	4603      	mov	r3, r0
 8101be6:	2b00      	cmp	r3, #0
 8101be8:	d001      	beq.n	8101bee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101bea:	2301      	movs	r3, #1
 8101bec:	e00e      	b.n	8101c0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101bee:	687b      	ldr	r3, [r7, #4]
 8101bf0:	2b0f      	cmp	r3, #15
 8101bf2:	d80a      	bhi.n	8101c0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101bf4:	2200      	movs	r2, #0
 8101bf6:	6879      	ldr	r1, [r7, #4]
 8101bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8101bfc:	f000 f92f 	bl	8101e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101c00:	4a06      	ldr	r2, [pc, #24]	; (8101c1c <HAL_InitTick+0x68>)
 8101c02:	687b      	ldr	r3, [r7, #4]
 8101c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101c06:	2300      	movs	r3, #0
 8101c08:	e000      	b.n	8101c0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101c0a:	2301      	movs	r3, #1
}
 8101c0c:	4618      	mov	r0, r3
 8101c0e:	3708      	adds	r7, #8
 8101c10:	46bd      	mov	sp, r7
 8101c12:	bd80      	pop	{r7, pc}
 8101c14:	1000000c 	.word	0x1000000c
 8101c18:	10000000 	.word	0x10000000
 8101c1c:	10000008 	.word	0x10000008

08101c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101c20:	b480      	push	{r7}
 8101c22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101c24:	4b06      	ldr	r3, [pc, #24]	; (8101c40 <HAL_IncTick+0x20>)
 8101c26:	781b      	ldrb	r3, [r3, #0]
 8101c28:	461a      	mov	r2, r3
 8101c2a:	4b06      	ldr	r3, [pc, #24]	; (8101c44 <HAL_IncTick+0x24>)
 8101c2c:	681b      	ldr	r3, [r3, #0]
 8101c2e:	4413      	add	r3, r2
 8101c30:	4a04      	ldr	r2, [pc, #16]	; (8101c44 <HAL_IncTick+0x24>)
 8101c32:	6013      	str	r3, [r2, #0]
}
 8101c34:	bf00      	nop
 8101c36:	46bd      	mov	sp, r7
 8101c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c3c:	4770      	bx	lr
 8101c3e:	bf00      	nop
 8101c40:	1000000c 	.word	0x1000000c
 8101c44:	10000474 	.word	0x10000474

08101c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101c48:	b480      	push	{r7}
 8101c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8101c4c:	4b03      	ldr	r3, [pc, #12]	; (8101c5c <HAL_GetTick+0x14>)
 8101c4e:	681b      	ldr	r3, [r3, #0]
}
 8101c50:	4618      	mov	r0, r3
 8101c52:	46bd      	mov	sp, r7
 8101c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c58:	4770      	bx	lr
 8101c5a:	bf00      	nop
 8101c5c:	10000474 	.word	0x10000474

08101c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101c60:	b580      	push	{r7, lr}
 8101c62:	b084      	sub	sp, #16
 8101c64:	af00      	add	r7, sp, #0
 8101c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101c68:	f7ff ffee 	bl	8101c48 <HAL_GetTick>
 8101c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101c6e:	687b      	ldr	r3, [r7, #4]
 8101c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101c72:	68fb      	ldr	r3, [r7, #12]
 8101c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101c78:	d005      	beq.n	8101c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101c7a:	4b0a      	ldr	r3, [pc, #40]	; (8101ca4 <HAL_Delay+0x44>)
 8101c7c:	781b      	ldrb	r3, [r3, #0]
 8101c7e:	461a      	mov	r2, r3
 8101c80:	68fb      	ldr	r3, [r7, #12]
 8101c82:	4413      	add	r3, r2
 8101c84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101c86:	bf00      	nop
 8101c88:	f7ff ffde 	bl	8101c48 <HAL_GetTick>
 8101c8c:	4602      	mov	r2, r0
 8101c8e:	68bb      	ldr	r3, [r7, #8]
 8101c90:	1ad3      	subs	r3, r2, r3
 8101c92:	68fa      	ldr	r2, [r7, #12]
 8101c94:	429a      	cmp	r2, r3
 8101c96:	d8f7      	bhi.n	8101c88 <HAL_Delay+0x28>
  {
  }
}
 8101c98:	bf00      	nop
 8101c9a:	bf00      	nop
 8101c9c:	3710      	adds	r7, #16
 8101c9e:	46bd      	mov	sp, r7
 8101ca0:	bd80      	pop	{r7, pc}
 8101ca2:	bf00      	nop
 8101ca4:	1000000c 	.word	0x1000000c

08101ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101ca8:	b480      	push	{r7}
 8101caa:	b085      	sub	sp, #20
 8101cac:	af00      	add	r7, sp, #0
 8101cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101cb0:	687b      	ldr	r3, [r7, #4]
 8101cb2:	f003 0307 	and.w	r3, r3, #7
 8101cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101cb8:	4b0c      	ldr	r3, [pc, #48]	; (8101cec <__NVIC_SetPriorityGrouping+0x44>)
 8101cba:	68db      	ldr	r3, [r3, #12]
 8101cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101cbe:	68ba      	ldr	r2, [r7, #8]
 8101cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101cc4:	4013      	ands	r3, r2
 8101cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101cc8:	68fb      	ldr	r3, [r7, #12]
 8101cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101ccc:	68bb      	ldr	r3, [r7, #8]
 8101cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101cda:	4a04      	ldr	r2, [pc, #16]	; (8101cec <__NVIC_SetPriorityGrouping+0x44>)
 8101cdc:	68bb      	ldr	r3, [r7, #8]
 8101cde:	60d3      	str	r3, [r2, #12]
}
 8101ce0:	bf00      	nop
 8101ce2:	3714      	adds	r7, #20
 8101ce4:	46bd      	mov	sp, r7
 8101ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cea:	4770      	bx	lr
 8101cec:	e000ed00 	.word	0xe000ed00

08101cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101cf0:	b480      	push	{r7}
 8101cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101cf4:	4b04      	ldr	r3, [pc, #16]	; (8101d08 <__NVIC_GetPriorityGrouping+0x18>)
 8101cf6:	68db      	ldr	r3, [r3, #12]
 8101cf8:	0a1b      	lsrs	r3, r3, #8
 8101cfa:	f003 0307 	and.w	r3, r3, #7
}
 8101cfe:	4618      	mov	r0, r3
 8101d00:	46bd      	mov	sp, r7
 8101d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d06:	4770      	bx	lr
 8101d08:	e000ed00 	.word	0xe000ed00

08101d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101d0c:	b480      	push	{r7}
 8101d0e:	b083      	sub	sp, #12
 8101d10:	af00      	add	r7, sp, #0
 8101d12:	4603      	mov	r3, r0
 8101d14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101d1a:	2b00      	cmp	r3, #0
 8101d1c:	db0b      	blt.n	8101d36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101d1e:	88fb      	ldrh	r3, [r7, #6]
 8101d20:	f003 021f 	and.w	r2, r3, #31
 8101d24:	4907      	ldr	r1, [pc, #28]	; (8101d44 <__NVIC_EnableIRQ+0x38>)
 8101d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101d2a:	095b      	lsrs	r3, r3, #5
 8101d2c:	2001      	movs	r0, #1
 8101d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8101d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101d36:	bf00      	nop
 8101d38:	370c      	adds	r7, #12
 8101d3a:	46bd      	mov	sp, r7
 8101d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d40:	4770      	bx	lr
 8101d42:	bf00      	nop
 8101d44:	e000e100 	.word	0xe000e100

08101d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101d48:	b480      	push	{r7}
 8101d4a:	b083      	sub	sp, #12
 8101d4c:	af00      	add	r7, sp, #0
 8101d4e:	4603      	mov	r3, r0
 8101d50:	6039      	str	r1, [r7, #0]
 8101d52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101d54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101d58:	2b00      	cmp	r3, #0
 8101d5a:	db0a      	blt.n	8101d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101d5c:	683b      	ldr	r3, [r7, #0]
 8101d5e:	b2da      	uxtb	r2, r3
 8101d60:	490c      	ldr	r1, [pc, #48]	; (8101d94 <__NVIC_SetPriority+0x4c>)
 8101d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101d66:	0112      	lsls	r2, r2, #4
 8101d68:	b2d2      	uxtb	r2, r2
 8101d6a:	440b      	add	r3, r1
 8101d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101d70:	e00a      	b.n	8101d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101d72:	683b      	ldr	r3, [r7, #0]
 8101d74:	b2da      	uxtb	r2, r3
 8101d76:	4908      	ldr	r1, [pc, #32]	; (8101d98 <__NVIC_SetPriority+0x50>)
 8101d78:	88fb      	ldrh	r3, [r7, #6]
 8101d7a:	f003 030f 	and.w	r3, r3, #15
 8101d7e:	3b04      	subs	r3, #4
 8101d80:	0112      	lsls	r2, r2, #4
 8101d82:	b2d2      	uxtb	r2, r2
 8101d84:	440b      	add	r3, r1
 8101d86:	761a      	strb	r2, [r3, #24]
}
 8101d88:	bf00      	nop
 8101d8a:	370c      	adds	r7, #12
 8101d8c:	46bd      	mov	sp, r7
 8101d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d92:	4770      	bx	lr
 8101d94:	e000e100 	.word	0xe000e100
 8101d98:	e000ed00 	.word	0xe000ed00

08101d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101d9c:	b480      	push	{r7}
 8101d9e:	b089      	sub	sp, #36	; 0x24
 8101da0:	af00      	add	r7, sp, #0
 8101da2:	60f8      	str	r0, [r7, #12]
 8101da4:	60b9      	str	r1, [r7, #8]
 8101da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101da8:	68fb      	ldr	r3, [r7, #12]
 8101daa:	f003 0307 	and.w	r3, r3, #7
 8101dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101db0:	69fb      	ldr	r3, [r7, #28]
 8101db2:	f1c3 0307 	rsb	r3, r3, #7
 8101db6:	2b04      	cmp	r3, #4
 8101db8:	bf28      	it	cs
 8101dba:	2304      	movcs	r3, #4
 8101dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101dbe:	69fb      	ldr	r3, [r7, #28]
 8101dc0:	3304      	adds	r3, #4
 8101dc2:	2b06      	cmp	r3, #6
 8101dc4:	d902      	bls.n	8101dcc <NVIC_EncodePriority+0x30>
 8101dc6:	69fb      	ldr	r3, [r7, #28]
 8101dc8:	3b03      	subs	r3, #3
 8101dca:	e000      	b.n	8101dce <NVIC_EncodePriority+0x32>
 8101dcc:	2300      	movs	r3, #0
 8101dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8101dd4:	69bb      	ldr	r3, [r7, #24]
 8101dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8101dda:	43da      	mvns	r2, r3
 8101ddc:	68bb      	ldr	r3, [r7, #8]
 8101dde:	401a      	ands	r2, r3
 8101de0:	697b      	ldr	r3, [r7, #20]
 8101de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101de4:	f04f 31ff 	mov.w	r1, #4294967295
 8101de8:	697b      	ldr	r3, [r7, #20]
 8101dea:	fa01 f303 	lsl.w	r3, r1, r3
 8101dee:	43d9      	mvns	r1, r3
 8101df0:	687b      	ldr	r3, [r7, #4]
 8101df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101df4:	4313      	orrs	r3, r2
         );
}
 8101df6:	4618      	mov	r0, r3
 8101df8:	3724      	adds	r7, #36	; 0x24
 8101dfa:	46bd      	mov	sp, r7
 8101dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e00:	4770      	bx	lr
	...

08101e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101e04:	b580      	push	{r7, lr}
 8101e06:	b082      	sub	sp, #8
 8101e08:	af00      	add	r7, sp, #0
 8101e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101e0c:	687b      	ldr	r3, [r7, #4]
 8101e0e:	3b01      	subs	r3, #1
 8101e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101e14:	d301      	bcc.n	8101e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101e16:	2301      	movs	r3, #1
 8101e18:	e00f      	b.n	8101e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101e1a:	4a0a      	ldr	r2, [pc, #40]	; (8101e44 <SysTick_Config+0x40>)
 8101e1c:	687b      	ldr	r3, [r7, #4]
 8101e1e:	3b01      	subs	r3, #1
 8101e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101e22:	210f      	movs	r1, #15
 8101e24:	f04f 30ff 	mov.w	r0, #4294967295
 8101e28:	f7ff ff8e 	bl	8101d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101e2c:	4b05      	ldr	r3, [pc, #20]	; (8101e44 <SysTick_Config+0x40>)
 8101e2e:	2200      	movs	r2, #0
 8101e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101e32:	4b04      	ldr	r3, [pc, #16]	; (8101e44 <SysTick_Config+0x40>)
 8101e34:	2207      	movs	r2, #7
 8101e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101e38:	2300      	movs	r3, #0
}
 8101e3a:	4618      	mov	r0, r3
 8101e3c:	3708      	adds	r7, #8
 8101e3e:	46bd      	mov	sp, r7
 8101e40:	bd80      	pop	{r7, pc}
 8101e42:	bf00      	nop
 8101e44:	e000e010 	.word	0xe000e010

08101e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101e48:	b580      	push	{r7, lr}
 8101e4a:	b082      	sub	sp, #8
 8101e4c:	af00      	add	r7, sp, #0
 8101e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101e50:	6878      	ldr	r0, [r7, #4]
 8101e52:	f7ff ff29 	bl	8101ca8 <__NVIC_SetPriorityGrouping>
}
 8101e56:	bf00      	nop
 8101e58:	3708      	adds	r7, #8
 8101e5a:	46bd      	mov	sp, r7
 8101e5c:	bd80      	pop	{r7, pc}

08101e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101e5e:	b580      	push	{r7, lr}
 8101e60:	b086      	sub	sp, #24
 8101e62:	af00      	add	r7, sp, #0
 8101e64:	4603      	mov	r3, r0
 8101e66:	60b9      	str	r1, [r7, #8]
 8101e68:	607a      	str	r2, [r7, #4]
 8101e6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101e6c:	f7ff ff40 	bl	8101cf0 <__NVIC_GetPriorityGrouping>
 8101e70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101e72:	687a      	ldr	r2, [r7, #4]
 8101e74:	68b9      	ldr	r1, [r7, #8]
 8101e76:	6978      	ldr	r0, [r7, #20]
 8101e78:	f7ff ff90 	bl	8101d9c <NVIC_EncodePriority>
 8101e7c:	4602      	mov	r2, r0
 8101e7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101e82:	4611      	mov	r1, r2
 8101e84:	4618      	mov	r0, r3
 8101e86:	f7ff ff5f 	bl	8101d48 <__NVIC_SetPriority>
}
 8101e8a:	bf00      	nop
 8101e8c:	3718      	adds	r7, #24
 8101e8e:	46bd      	mov	sp, r7
 8101e90:	bd80      	pop	{r7, pc}

08101e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101e92:	b580      	push	{r7, lr}
 8101e94:	b082      	sub	sp, #8
 8101e96:	af00      	add	r7, sp, #0
 8101e98:	4603      	mov	r3, r0
 8101e9a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101e9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101ea0:	4618      	mov	r0, r3
 8101ea2:	f7ff ff33 	bl	8101d0c <__NVIC_EnableIRQ>
}
 8101ea6:	bf00      	nop
 8101ea8:	3708      	adds	r7, #8
 8101eaa:	46bd      	mov	sp, r7
 8101eac:	bd80      	pop	{r7, pc}

08101eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101eae:	b580      	push	{r7, lr}
 8101eb0:	b082      	sub	sp, #8
 8101eb2:	af00      	add	r7, sp, #0
 8101eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101eb6:	6878      	ldr	r0, [r7, #4]
 8101eb8:	f7ff ffa4 	bl	8101e04 <SysTick_Config>
 8101ebc:	4603      	mov	r3, r0
}
 8101ebe:	4618      	mov	r0, r3
 8101ec0:	3708      	adds	r7, #8
 8101ec2:	46bd      	mov	sp, r7
 8101ec4:	bd80      	pop	{r7, pc}
	...

08101ec8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101ec8:	b480      	push	{r7}
 8101eca:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101ecc:	4b07      	ldr	r3, [pc, #28]	; (8101eec <HAL_GetCurrentCPUID+0x24>)
 8101ece:	681b      	ldr	r3, [r3, #0]
 8101ed0:	091b      	lsrs	r3, r3, #4
 8101ed2:	f003 030f 	and.w	r3, r3, #15
 8101ed6:	2b07      	cmp	r3, #7
 8101ed8:	d101      	bne.n	8101ede <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101eda:	2303      	movs	r3, #3
 8101edc:	e000      	b.n	8101ee0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101ede:	2301      	movs	r3, #1
  }
}
 8101ee0:	4618      	mov	r0, r3
 8101ee2:	46bd      	mov	sp, r7
 8101ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ee8:	4770      	bx	lr
 8101eea:	bf00      	nop
 8101eec:	e000ed00 	.word	0xe000ed00

08101ef0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8101ef0:	b580      	push	{r7, lr}
 8101ef2:	b086      	sub	sp, #24
 8101ef4:	af00      	add	r7, sp, #0
 8101ef6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8101ef8:	f7ff fea6 	bl	8101c48 <HAL_GetTick>
 8101efc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8101efe:	687b      	ldr	r3, [r7, #4]
 8101f00:	2b00      	cmp	r3, #0
 8101f02:	d101      	bne.n	8101f08 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8101f04:	2301      	movs	r3, #1
 8101f06:	e314      	b.n	8102532 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101f08:	687b      	ldr	r3, [r7, #4]
 8101f0a:	681b      	ldr	r3, [r3, #0]
 8101f0c:	4a66      	ldr	r2, [pc, #408]	; (81020a8 <HAL_DMA_Init+0x1b8>)
 8101f0e:	4293      	cmp	r3, r2
 8101f10:	d04a      	beq.n	8101fa8 <HAL_DMA_Init+0xb8>
 8101f12:	687b      	ldr	r3, [r7, #4]
 8101f14:	681b      	ldr	r3, [r3, #0]
 8101f16:	4a65      	ldr	r2, [pc, #404]	; (81020ac <HAL_DMA_Init+0x1bc>)
 8101f18:	4293      	cmp	r3, r2
 8101f1a:	d045      	beq.n	8101fa8 <HAL_DMA_Init+0xb8>
 8101f1c:	687b      	ldr	r3, [r7, #4]
 8101f1e:	681b      	ldr	r3, [r3, #0]
 8101f20:	4a63      	ldr	r2, [pc, #396]	; (81020b0 <HAL_DMA_Init+0x1c0>)
 8101f22:	4293      	cmp	r3, r2
 8101f24:	d040      	beq.n	8101fa8 <HAL_DMA_Init+0xb8>
 8101f26:	687b      	ldr	r3, [r7, #4]
 8101f28:	681b      	ldr	r3, [r3, #0]
 8101f2a:	4a62      	ldr	r2, [pc, #392]	; (81020b4 <HAL_DMA_Init+0x1c4>)
 8101f2c:	4293      	cmp	r3, r2
 8101f2e:	d03b      	beq.n	8101fa8 <HAL_DMA_Init+0xb8>
 8101f30:	687b      	ldr	r3, [r7, #4]
 8101f32:	681b      	ldr	r3, [r3, #0]
 8101f34:	4a60      	ldr	r2, [pc, #384]	; (81020b8 <HAL_DMA_Init+0x1c8>)
 8101f36:	4293      	cmp	r3, r2
 8101f38:	d036      	beq.n	8101fa8 <HAL_DMA_Init+0xb8>
 8101f3a:	687b      	ldr	r3, [r7, #4]
 8101f3c:	681b      	ldr	r3, [r3, #0]
 8101f3e:	4a5f      	ldr	r2, [pc, #380]	; (81020bc <HAL_DMA_Init+0x1cc>)
 8101f40:	4293      	cmp	r3, r2
 8101f42:	d031      	beq.n	8101fa8 <HAL_DMA_Init+0xb8>
 8101f44:	687b      	ldr	r3, [r7, #4]
 8101f46:	681b      	ldr	r3, [r3, #0]
 8101f48:	4a5d      	ldr	r2, [pc, #372]	; (81020c0 <HAL_DMA_Init+0x1d0>)
 8101f4a:	4293      	cmp	r3, r2
 8101f4c:	d02c      	beq.n	8101fa8 <HAL_DMA_Init+0xb8>
 8101f4e:	687b      	ldr	r3, [r7, #4]
 8101f50:	681b      	ldr	r3, [r3, #0]
 8101f52:	4a5c      	ldr	r2, [pc, #368]	; (81020c4 <HAL_DMA_Init+0x1d4>)
 8101f54:	4293      	cmp	r3, r2
 8101f56:	d027      	beq.n	8101fa8 <HAL_DMA_Init+0xb8>
 8101f58:	687b      	ldr	r3, [r7, #4]
 8101f5a:	681b      	ldr	r3, [r3, #0]
 8101f5c:	4a5a      	ldr	r2, [pc, #360]	; (81020c8 <HAL_DMA_Init+0x1d8>)
 8101f5e:	4293      	cmp	r3, r2
 8101f60:	d022      	beq.n	8101fa8 <HAL_DMA_Init+0xb8>
 8101f62:	687b      	ldr	r3, [r7, #4]
 8101f64:	681b      	ldr	r3, [r3, #0]
 8101f66:	4a59      	ldr	r2, [pc, #356]	; (81020cc <HAL_DMA_Init+0x1dc>)
 8101f68:	4293      	cmp	r3, r2
 8101f6a:	d01d      	beq.n	8101fa8 <HAL_DMA_Init+0xb8>
 8101f6c:	687b      	ldr	r3, [r7, #4]
 8101f6e:	681b      	ldr	r3, [r3, #0]
 8101f70:	4a57      	ldr	r2, [pc, #348]	; (81020d0 <HAL_DMA_Init+0x1e0>)
 8101f72:	4293      	cmp	r3, r2
 8101f74:	d018      	beq.n	8101fa8 <HAL_DMA_Init+0xb8>
 8101f76:	687b      	ldr	r3, [r7, #4]
 8101f78:	681b      	ldr	r3, [r3, #0]
 8101f7a:	4a56      	ldr	r2, [pc, #344]	; (81020d4 <HAL_DMA_Init+0x1e4>)
 8101f7c:	4293      	cmp	r3, r2
 8101f7e:	d013      	beq.n	8101fa8 <HAL_DMA_Init+0xb8>
 8101f80:	687b      	ldr	r3, [r7, #4]
 8101f82:	681b      	ldr	r3, [r3, #0]
 8101f84:	4a54      	ldr	r2, [pc, #336]	; (81020d8 <HAL_DMA_Init+0x1e8>)
 8101f86:	4293      	cmp	r3, r2
 8101f88:	d00e      	beq.n	8101fa8 <HAL_DMA_Init+0xb8>
 8101f8a:	687b      	ldr	r3, [r7, #4]
 8101f8c:	681b      	ldr	r3, [r3, #0]
 8101f8e:	4a53      	ldr	r2, [pc, #332]	; (81020dc <HAL_DMA_Init+0x1ec>)
 8101f90:	4293      	cmp	r3, r2
 8101f92:	d009      	beq.n	8101fa8 <HAL_DMA_Init+0xb8>
 8101f94:	687b      	ldr	r3, [r7, #4]
 8101f96:	681b      	ldr	r3, [r3, #0]
 8101f98:	4a51      	ldr	r2, [pc, #324]	; (81020e0 <HAL_DMA_Init+0x1f0>)
 8101f9a:	4293      	cmp	r3, r2
 8101f9c:	d004      	beq.n	8101fa8 <HAL_DMA_Init+0xb8>
 8101f9e:	687b      	ldr	r3, [r7, #4]
 8101fa0:	681b      	ldr	r3, [r3, #0]
 8101fa2:	4a50      	ldr	r2, [pc, #320]	; (81020e4 <HAL_DMA_Init+0x1f4>)
 8101fa4:	4293      	cmp	r3, r2
 8101fa6:	d101      	bne.n	8101fac <HAL_DMA_Init+0xbc>
 8101fa8:	2301      	movs	r3, #1
 8101faa:	e000      	b.n	8101fae <HAL_DMA_Init+0xbe>
 8101fac:	2300      	movs	r3, #0
 8101fae:	2b00      	cmp	r3, #0
 8101fb0:	f000 813b 	beq.w	810222a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8101fb4:	687b      	ldr	r3, [r7, #4]
 8101fb6:	2202      	movs	r2, #2
 8101fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8101fbc:	687b      	ldr	r3, [r7, #4]
 8101fbe:	2200      	movs	r2, #0
 8101fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8101fc4:	687b      	ldr	r3, [r7, #4]
 8101fc6:	681b      	ldr	r3, [r3, #0]
 8101fc8:	4a37      	ldr	r2, [pc, #220]	; (81020a8 <HAL_DMA_Init+0x1b8>)
 8101fca:	4293      	cmp	r3, r2
 8101fcc:	d04a      	beq.n	8102064 <HAL_DMA_Init+0x174>
 8101fce:	687b      	ldr	r3, [r7, #4]
 8101fd0:	681b      	ldr	r3, [r3, #0]
 8101fd2:	4a36      	ldr	r2, [pc, #216]	; (81020ac <HAL_DMA_Init+0x1bc>)
 8101fd4:	4293      	cmp	r3, r2
 8101fd6:	d045      	beq.n	8102064 <HAL_DMA_Init+0x174>
 8101fd8:	687b      	ldr	r3, [r7, #4]
 8101fda:	681b      	ldr	r3, [r3, #0]
 8101fdc:	4a34      	ldr	r2, [pc, #208]	; (81020b0 <HAL_DMA_Init+0x1c0>)
 8101fde:	4293      	cmp	r3, r2
 8101fe0:	d040      	beq.n	8102064 <HAL_DMA_Init+0x174>
 8101fe2:	687b      	ldr	r3, [r7, #4]
 8101fe4:	681b      	ldr	r3, [r3, #0]
 8101fe6:	4a33      	ldr	r2, [pc, #204]	; (81020b4 <HAL_DMA_Init+0x1c4>)
 8101fe8:	4293      	cmp	r3, r2
 8101fea:	d03b      	beq.n	8102064 <HAL_DMA_Init+0x174>
 8101fec:	687b      	ldr	r3, [r7, #4]
 8101fee:	681b      	ldr	r3, [r3, #0]
 8101ff0:	4a31      	ldr	r2, [pc, #196]	; (81020b8 <HAL_DMA_Init+0x1c8>)
 8101ff2:	4293      	cmp	r3, r2
 8101ff4:	d036      	beq.n	8102064 <HAL_DMA_Init+0x174>
 8101ff6:	687b      	ldr	r3, [r7, #4]
 8101ff8:	681b      	ldr	r3, [r3, #0]
 8101ffa:	4a30      	ldr	r2, [pc, #192]	; (81020bc <HAL_DMA_Init+0x1cc>)
 8101ffc:	4293      	cmp	r3, r2
 8101ffe:	d031      	beq.n	8102064 <HAL_DMA_Init+0x174>
 8102000:	687b      	ldr	r3, [r7, #4]
 8102002:	681b      	ldr	r3, [r3, #0]
 8102004:	4a2e      	ldr	r2, [pc, #184]	; (81020c0 <HAL_DMA_Init+0x1d0>)
 8102006:	4293      	cmp	r3, r2
 8102008:	d02c      	beq.n	8102064 <HAL_DMA_Init+0x174>
 810200a:	687b      	ldr	r3, [r7, #4]
 810200c:	681b      	ldr	r3, [r3, #0]
 810200e:	4a2d      	ldr	r2, [pc, #180]	; (81020c4 <HAL_DMA_Init+0x1d4>)
 8102010:	4293      	cmp	r3, r2
 8102012:	d027      	beq.n	8102064 <HAL_DMA_Init+0x174>
 8102014:	687b      	ldr	r3, [r7, #4]
 8102016:	681b      	ldr	r3, [r3, #0]
 8102018:	4a2b      	ldr	r2, [pc, #172]	; (81020c8 <HAL_DMA_Init+0x1d8>)
 810201a:	4293      	cmp	r3, r2
 810201c:	d022      	beq.n	8102064 <HAL_DMA_Init+0x174>
 810201e:	687b      	ldr	r3, [r7, #4]
 8102020:	681b      	ldr	r3, [r3, #0]
 8102022:	4a2a      	ldr	r2, [pc, #168]	; (81020cc <HAL_DMA_Init+0x1dc>)
 8102024:	4293      	cmp	r3, r2
 8102026:	d01d      	beq.n	8102064 <HAL_DMA_Init+0x174>
 8102028:	687b      	ldr	r3, [r7, #4]
 810202a:	681b      	ldr	r3, [r3, #0]
 810202c:	4a28      	ldr	r2, [pc, #160]	; (81020d0 <HAL_DMA_Init+0x1e0>)
 810202e:	4293      	cmp	r3, r2
 8102030:	d018      	beq.n	8102064 <HAL_DMA_Init+0x174>
 8102032:	687b      	ldr	r3, [r7, #4]
 8102034:	681b      	ldr	r3, [r3, #0]
 8102036:	4a27      	ldr	r2, [pc, #156]	; (81020d4 <HAL_DMA_Init+0x1e4>)
 8102038:	4293      	cmp	r3, r2
 810203a:	d013      	beq.n	8102064 <HAL_DMA_Init+0x174>
 810203c:	687b      	ldr	r3, [r7, #4]
 810203e:	681b      	ldr	r3, [r3, #0]
 8102040:	4a25      	ldr	r2, [pc, #148]	; (81020d8 <HAL_DMA_Init+0x1e8>)
 8102042:	4293      	cmp	r3, r2
 8102044:	d00e      	beq.n	8102064 <HAL_DMA_Init+0x174>
 8102046:	687b      	ldr	r3, [r7, #4]
 8102048:	681b      	ldr	r3, [r3, #0]
 810204a:	4a24      	ldr	r2, [pc, #144]	; (81020dc <HAL_DMA_Init+0x1ec>)
 810204c:	4293      	cmp	r3, r2
 810204e:	d009      	beq.n	8102064 <HAL_DMA_Init+0x174>
 8102050:	687b      	ldr	r3, [r7, #4]
 8102052:	681b      	ldr	r3, [r3, #0]
 8102054:	4a22      	ldr	r2, [pc, #136]	; (81020e0 <HAL_DMA_Init+0x1f0>)
 8102056:	4293      	cmp	r3, r2
 8102058:	d004      	beq.n	8102064 <HAL_DMA_Init+0x174>
 810205a:	687b      	ldr	r3, [r7, #4]
 810205c:	681b      	ldr	r3, [r3, #0]
 810205e:	4a21      	ldr	r2, [pc, #132]	; (81020e4 <HAL_DMA_Init+0x1f4>)
 8102060:	4293      	cmp	r3, r2
 8102062:	d108      	bne.n	8102076 <HAL_DMA_Init+0x186>
 8102064:	687b      	ldr	r3, [r7, #4]
 8102066:	681b      	ldr	r3, [r3, #0]
 8102068:	681a      	ldr	r2, [r3, #0]
 810206a:	687b      	ldr	r3, [r7, #4]
 810206c:	681b      	ldr	r3, [r3, #0]
 810206e:	f022 0201 	bic.w	r2, r2, #1
 8102072:	601a      	str	r2, [r3, #0]
 8102074:	e007      	b.n	8102086 <HAL_DMA_Init+0x196>
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	681b      	ldr	r3, [r3, #0]
 810207a:	681a      	ldr	r2, [r3, #0]
 810207c:	687b      	ldr	r3, [r7, #4]
 810207e:	681b      	ldr	r3, [r3, #0]
 8102080:	f022 0201 	bic.w	r2, r2, #1
 8102084:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102086:	e02f      	b.n	81020e8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8102088:	f7ff fdde 	bl	8101c48 <HAL_GetTick>
 810208c:	4602      	mov	r2, r0
 810208e:	693b      	ldr	r3, [r7, #16]
 8102090:	1ad3      	subs	r3, r2, r3
 8102092:	2b05      	cmp	r3, #5
 8102094:	d928      	bls.n	81020e8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8102096:	687b      	ldr	r3, [r7, #4]
 8102098:	2220      	movs	r2, #32
 810209a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 810209c:	687b      	ldr	r3, [r7, #4]
 810209e:	2203      	movs	r2, #3
 81020a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 81020a4:	2301      	movs	r3, #1
 81020a6:	e244      	b.n	8102532 <HAL_DMA_Init+0x642>
 81020a8:	40020010 	.word	0x40020010
 81020ac:	40020028 	.word	0x40020028
 81020b0:	40020040 	.word	0x40020040
 81020b4:	40020058 	.word	0x40020058
 81020b8:	40020070 	.word	0x40020070
 81020bc:	40020088 	.word	0x40020088
 81020c0:	400200a0 	.word	0x400200a0
 81020c4:	400200b8 	.word	0x400200b8
 81020c8:	40020410 	.word	0x40020410
 81020cc:	40020428 	.word	0x40020428
 81020d0:	40020440 	.word	0x40020440
 81020d4:	40020458 	.word	0x40020458
 81020d8:	40020470 	.word	0x40020470
 81020dc:	40020488 	.word	0x40020488
 81020e0:	400204a0 	.word	0x400204a0
 81020e4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81020e8:	687b      	ldr	r3, [r7, #4]
 81020ea:	681b      	ldr	r3, [r3, #0]
 81020ec:	681b      	ldr	r3, [r3, #0]
 81020ee:	f003 0301 	and.w	r3, r3, #1
 81020f2:	2b00      	cmp	r3, #0
 81020f4:	d1c8      	bne.n	8102088 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 81020f6:	687b      	ldr	r3, [r7, #4]
 81020f8:	681b      	ldr	r3, [r3, #0]
 81020fa:	681b      	ldr	r3, [r3, #0]
 81020fc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 81020fe:	697a      	ldr	r2, [r7, #20]
 8102100:	4b84      	ldr	r3, [pc, #528]	; (8102314 <HAL_DMA_Init+0x424>)
 8102102:	4013      	ands	r3, r2
 8102104:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8102106:	687b      	ldr	r3, [r7, #4]
 8102108:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810210a:	687b      	ldr	r3, [r7, #4]
 810210c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 810210e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102110:	687b      	ldr	r3, [r7, #4]
 8102112:	691b      	ldr	r3, [r3, #16]
 8102114:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102116:	687b      	ldr	r3, [r7, #4]
 8102118:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810211a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810211c:	687b      	ldr	r3, [r7, #4]
 810211e:	699b      	ldr	r3, [r3, #24]
 8102120:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102122:	687b      	ldr	r3, [r7, #4]
 8102124:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102126:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102128:	687b      	ldr	r3, [r7, #4]
 810212a:	6a1b      	ldr	r3, [r3, #32]
 810212c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 810212e:	697a      	ldr	r2, [r7, #20]
 8102130:	4313      	orrs	r3, r2
 8102132:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102134:	687b      	ldr	r3, [r7, #4]
 8102136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102138:	2b04      	cmp	r3, #4
 810213a:	d107      	bne.n	810214c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 810213c:	687b      	ldr	r3, [r7, #4]
 810213e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102140:	687b      	ldr	r3, [r7, #4]
 8102142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102144:	4313      	orrs	r3, r2
 8102146:	697a      	ldr	r2, [r7, #20]
 8102148:	4313      	orrs	r3, r2
 810214a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 810214c:	4b72      	ldr	r3, [pc, #456]	; (8102318 <HAL_DMA_Init+0x428>)
 810214e:	681b      	ldr	r3, [r3, #0]
 8102150:	0c1b      	lsrs	r3, r3, #16
 8102152:	041b      	lsls	r3, r3, #16
 8102154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102158:	d328      	bcc.n	81021ac <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 810215a:	687b      	ldr	r3, [r7, #4]
 810215c:	685b      	ldr	r3, [r3, #4]
 810215e:	2b28      	cmp	r3, #40	; 0x28
 8102160:	d903      	bls.n	810216a <HAL_DMA_Init+0x27a>
 8102162:	687b      	ldr	r3, [r7, #4]
 8102164:	685b      	ldr	r3, [r3, #4]
 8102166:	2b2e      	cmp	r3, #46	; 0x2e
 8102168:	d917      	bls.n	810219a <HAL_DMA_Init+0x2aa>
 810216a:	687b      	ldr	r3, [r7, #4]
 810216c:	685b      	ldr	r3, [r3, #4]
 810216e:	2b3e      	cmp	r3, #62	; 0x3e
 8102170:	d903      	bls.n	810217a <HAL_DMA_Init+0x28a>
 8102172:	687b      	ldr	r3, [r7, #4]
 8102174:	685b      	ldr	r3, [r3, #4]
 8102176:	2b42      	cmp	r3, #66	; 0x42
 8102178:	d90f      	bls.n	810219a <HAL_DMA_Init+0x2aa>
 810217a:	687b      	ldr	r3, [r7, #4]
 810217c:	685b      	ldr	r3, [r3, #4]
 810217e:	2b46      	cmp	r3, #70	; 0x46
 8102180:	d903      	bls.n	810218a <HAL_DMA_Init+0x29a>
 8102182:	687b      	ldr	r3, [r7, #4]
 8102184:	685b      	ldr	r3, [r3, #4]
 8102186:	2b48      	cmp	r3, #72	; 0x48
 8102188:	d907      	bls.n	810219a <HAL_DMA_Init+0x2aa>
 810218a:	687b      	ldr	r3, [r7, #4]
 810218c:	685b      	ldr	r3, [r3, #4]
 810218e:	2b4e      	cmp	r3, #78	; 0x4e
 8102190:	d905      	bls.n	810219e <HAL_DMA_Init+0x2ae>
 8102192:	687b      	ldr	r3, [r7, #4]
 8102194:	685b      	ldr	r3, [r3, #4]
 8102196:	2b52      	cmp	r3, #82	; 0x52
 8102198:	d801      	bhi.n	810219e <HAL_DMA_Init+0x2ae>
 810219a:	2301      	movs	r3, #1
 810219c:	e000      	b.n	81021a0 <HAL_DMA_Init+0x2b0>
 810219e:	2300      	movs	r3, #0
 81021a0:	2b00      	cmp	r3, #0
 81021a2:	d003      	beq.n	81021ac <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 81021a4:	697b      	ldr	r3, [r7, #20]
 81021a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81021aa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 81021ac:	687b      	ldr	r3, [r7, #4]
 81021ae:	681b      	ldr	r3, [r3, #0]
 81021b0:	697a      	ldr	r2, [r7, #20]
 81021b2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 81021b4:	687b      	ldr	r3, [r7, #4]
 81021b6:	681b      	ldr	r3, [r3, #0]
 81021b8:	695b      	ldr	r3, [r3, #20]
 81021ba:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 81021bc:	697b      	ldr	r3, [r7, #20]
 81021be:	f023 0307 	bic.w	r3, r3, #7
 81021c2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 81021c4:	687b      	ldr	r3, [r7, #4]
 81021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81021c8:	697a      	ldr	r2, [r7, #20]
 81021ca:	4313      	orrs	r3, r2
 81021cc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81021ce:	687b      	ldr	r3, [r7, #4]
 81021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81021d2:	2b04      	cmp	r3, #4
 81021d4:	d117      	bne.n	8102206 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 81021d6:	687b      	ldr	r3, [r7, #4]
 81021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81021da:	697a      	ldr	r2, [r7, #20]
 81021dc:	4313      	orrs	r3, r2
 81021de:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81021e0:	687b      	ldr	r3, [r7, #4]
 81021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81021e4:	2b00      	cmp	r3, #0
 81021e6:	d00e      	beq.n	8102206 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 81021e8:	6878      	ldr	r0, [r7, #4]
 81021ea:	f001 f9b7 	bl	810355c <DMA_CheckFifoParam>
 81021ee:	4603      	mov	r3, r0
 81021f0:	2b00      	cmp	r3, #0
 81021f2:	d008      	beq.n	8102206 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81021f4:	687b      	ldr	r3, [r7, #4]
 81021f6:	2240      	movs	r2, #64	; 0x40
 81021f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81021fa:	687b      	ldr	r3, [r7, #4]
 81021fc:	2201      	movs	r2, #1
 81021fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8102202:	2301      	movs	r3, #1
 8102204:	e195      	b.n	8102532 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8102206:	687b      	ldr	r3, [r7, #4]
 8102208:	681b      	ldr	r3, [r3, #0]
 810220a:	697a      	ldr	r2, [r7, #20]
 810220c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 810220e:	6878      	ldr	r0, [r7, #4]
 8102210:	f001 f8f2 	bl	81033f8 <DMA_CalcBaseAndBitshift>
 8102214:	4603      	mov	r3, r0
 8102216:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102218:	687b      	ldr	r3, [r7, #4]
 810221a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810221c:	f003 031f 	and.w	r3, r3, #31
 8102220:	223f      	movs	r2, #63	; 0x3f
 8102222:	409a      	lsls	r2, r3
 8102224:	68bb      	ldr	r3, [r7, #8]
 8102226:	609a      	str	r2, [r3, #8]
 8102228:	e0cb      	b.n	81023c2 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 810222a:	687b      	ldr	r3, [r7, #4]
 810222c:	681b      	ldr	r3, [r3, #0]
 810222e:	4a3b      	ldr	r2, [pc, #236]	; (810231c <HAL_DMA_Init+0x42c>)
 8102230:	4293      	cmp	r3, r2
 8102232:	d022      	beq.n	810227a <HAL_DMA_Init+0x38a>
 8102234:	687b      	ldr	r3, [r7, #4]
 8102236:	681b      	ldr	r3, [r3, #0]
 8102238:	4a39      	ldr	r2, [pc, #228]	; (8102320 <HAL_DMA_Init+0x430>)
 810223a:	4293      	cmp	r3, r2
 810223c:	d01d      	beq.n	810227a <HAL_DMA_Init+0x38a>
 810223e:	687b      	ldr	r3, [r7, #4]
 8102240:	681b      	ldr	r3, [r3, #0]
 8102242:	4a38      	ldr	r2, [pc, #224]	; (8102324 <HAL_DMA_Init+0x434>)
 8102244:	4293      	cmp	r3, r2
 8102246:	d018      	beq.n	810227a <HAL_DMA_Init+0x38a>
 8102248:	687b      	ldr	r3, [r7, #4]
 810224a:	681b      	ldr	r3, [r3, #0]
 810224c:	4a36      	ldr	r2, [pc, #216]	; (8102328 <HAL_DMA_Init+0x438>)
 810224e:	4293      	cmp	r3, r2
 8102250:	d013      	beq.n	810227a <HAL_DMA_Init+0x38a>
 8102252:	687b      	ldr	r3, [r7, #4]
 8102254:	681b      	ldr	r3, [r3, #0]
 8102256:	4a35      	ldr	r2, [pc, #212]	; (810232c <HAL_DMA_Init+0x43c>)
 8102258:	4293      	cmp	r3, r2
 810225a:	d00e      	beq.n	810227a <HAL_DMA_Init+0x38a>
 810225c:	687b      	ldr	r3, [r7, #4]
 810225e:	681b      	ldr	r3, [r3, #0]
 8102260:	4a33      	ldr	r2, [pc, #204]	; (8102330 <HAL_DMA_Init+0x440>)
 8102262:	4293      	cmp	r3, r2
 8102264:	d009      	beq.n	810227a <HAL_DMA_Init+0x38a>
 8102266:	687b      	ldr	r3, [r7, #4]
 8102268:	681b      	ldr	r3, [r3, #0]
 810226a:	4a32      	ldr	r2, [pc, #200]	; (8102334 <HAL_DMA_Init+0x444>)
 810226c:	4293      	cmp	r3, r2
 810226e:	d004      	beq.n	810227a <HAL_DMA_Init+0x38a>
 8102270:	687b      	ldr	r3, [r7, #4]
 8102272:	681b      	ldr	r3, [r3, #0]
 8102274:	4a30      	ldr	r2, [pc, #192]	; (8102338 <HAL_DMA_Init+0x448>)
 8102276:	4293      	cmp	r3, r2
 8102278:	d101      	bne.n	810227e <HAL_DMA_Init+0x38e>
 810227a:	2301      	movs	r3, #1
 810227c:	e000      	b.n	8102280 <HAL_DMA_Init+0x390>
 810227e:	2300      	movs	r3, #0
 8102280:	2b00      	cmp	r3, #0
 8102282:	f000 8095 	beq.w	81023b0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102286:	687b      	ldr	r3, [r7, #4]
 8102288:	681b      	ldr	r3, [r3, #0]
 810228a:	4a24      	ldr	r2, [pc, #144]	; (810231c <HAL_DMA_Init+0x42c>)
 810228c:	4293      	cmp	r3, r2
 810228e:	d021      	beq.n	81022d4 <HAL_DMA_Init+0x3e4>
 8102290:	687b      	ldr	r3, [r7, #4]
 8102292:	681b      	ldr	r3, [r3, #0]
 8102294:	4a22      	ldr	r2, [pc, #136]	; (8102320 <HAL_DMA_Init+0x430>)
 8102296:	4293      	cmp	r3, r2
 8102298:	d01c      	beq.n	81022d4 <HAL_DMA_Init+0x3e4>
 810229a:	687b      	ldr	r3, [r7, #4]
 810229c:	681b      	ldr	r3, [r3, #0]
 810229e:	4a21      	ldr	r2, [pc, #132]	; (8102324 <HAL_DMA_Init+0x434>)
 81022a0:	4293      	cmp	r3, r2
 81022a2:	d017      	beq.n	81022d4 <HAL_DMA_Init+0x3e4>
 81022a4:	687b      	ldr	r3, [r7, #4]
 81022a6:	681b      	ldr	r3, [r3, #0]
 81022a8:	4a1f      	ldr	r2, [pc, #124]	; (8102328 <HAL_DMA_Init+0x438>)
 81022aa:	4293      	cmp	r3, r2
 81022ac:	d012      	beq.n	81022d4 <HAL_DMA_Init+0x3e4>
 81022ae:	687b      	ldr	r3, [r7, #4]
 81022b0:	681b      	ldr	r3, [r3, #0]
 81022b2:	4a1e      	ldr	r2, [pc, #120]	; (810232c <HAL_DMA_Init+0x43c>)
 81022b4:	4293      	cmp	r3, r2
 81022b6:	d00d      	beq.n	81022d4 <HAL_DMA_Init+0x3e4>
 81022b8:	687b      	ldr	r3, [r7, #4]
 81022ba:	681b      	ldr	r3, [r3, #0]
 81022bc:	4a1c      	ldr	r2, [pc, #112]	; (8102330 <HAL_DMA_Init+0x440>)
 81022be:	4293      	cmp	r3, r2
 81022c0:	d008      	beq.n	81022d4 <HAL_DMA_Init+0x3e4>
 81022c2:	687b      	ldr	r3, [r7, #4]
 81022c4:	681b      	ldr	r3, [r3, #0]
 81022c6:	4a1b      	ldr	r2, [pc, #108]	; (8102334 <HAL_DMA_Init+0x444>)
 81022c8:	4293      	cmp	r3, r2
 81022ca:	d003      	beq.n	81022d4 <HAL_DMA_Init+0x3e4>
 81022cc:	687b      	ldr	r3, [r7, #4]
 81022ce:	681b      	ldr	r3, [r3, #0]
 81022d0:	4a19      	ldr	r2, [pc, #100]	; (8102338 <HAL_DMA_Init+0x448>)
 81022d2:	4293      	cmp	r3, r2
 81022d4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81022d6:	687b      	ldr	r3, [r7, #4]
 81022d8:	2202      	movs	r2, #2
 81022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81022de:	687b      	ldr	r3, [r7, #4]
 81022e0:	2200      	movs	r2, #0
 81022e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 81022e6:	687b      	ldr	r3, [r7, #4]
 81022e8:	681b      	ldr	r3, [r3, #0]
 81022ea:	681b      	ldr	r3, [r3, #0]
 81022ec:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81022ee:	697b      	ldr	r3, [r7, #20]
 81022f0:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 81022f4:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 81022f8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81022fa:	687b      	ldr	r3, [r7, #4]
 81022fc:	689b      	ldr	r3, [r3, #8]
 81022fe:	2b40      	cmp	r3, #64	; 0x40
 8102300:	d01c      	beq.n	810233c <HAL_DMA_Init+0x44c>
 8102302:	687b      	ldr	r3, [r7, #4]
 8102304:	689b      	ldr	r3, [r3, #8]
 8102306:	2b80      	cmp	r3, #128	; 0x80
 8102308:	d102      	bne.n	8102310 <HAL_DMA_Init+0x420>
 810230a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810230e:	e016      	b.n	810233e <HAL_DMA_Init+0x44e>
 8102310:	2300      	movs	r3, #0
 8102312:	e014      	b.n	810233e <HAL_DMA_Init+0x44e>
 8102314:	fe10803f 	.word	0xfe10803f
 8102318:	5c001000 	.word	0x5c001000
 810231c:	58025408 	.word	0x58025408
 8102320:	5802541c 	.word	0x5802541c
 8102324:	58025430 	.word	0x58025430
 8102328:	58025444 	.word	0x58025444
 810232c:	58025458 	.word	0x58025458
 8102330:	5802546c 	.word	0x5802546c
 8102334:	58025480 	.word	0x58025480
 8102338:	58025494 	.word	0x58025494
 810233c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 810233e:	687a      	ldr	r2, [r7, #4]
 8102340:	68d2      	ldr	r2, [r2, #12]
 8102342:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102344:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102346:	687b      	ldr	r3, [r7, #4]
 8102348:	691b      	ldr	r3, [r3, #16]
 810234a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 810234c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 810234e:	687b      	ldr	r3, [r7, #4]
 8102350:	695b      	ldr	r3, [r3, #20]
 8102352:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102354:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102356:	687b      	ldr	r3, [r7, #4]
 8102358:	699b      	ldr	r3, [r3, #24]
 810235a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 810235c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 810235e:	687b      	ldr	r3, [r7, #4]
 8102360:	69db      	ldr	r3, [r3, #28]
 8102362:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102364:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8102366:	687b      	ldr	r3, [r7, #4]
 8102368:	6a1b      	ldr	r3, [r3, #32]
 810236a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 810236c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810236e:	697a      	ldr	r2, [r7, #20]
 8102370:	4313      	orrs	r3, r2
 8102372:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8102374:	687b      	ldr	r3, [r7, #4]
 8102376:	681b      	ldr	r3, [r3, #0]
 8102378:	697a      	ldr	r2, [r7, #20]
 810237a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 810237c:	687b      	ldr	r3, [r7, #4]
 810237e:	681b      	ldr	r3, [r3, #0]
 8102380:	461a      	mov	r2, r3
 8102382:	4b6e      	ldr	r3, [pc, #440]	; (810253c <HAL_DMA_Init+0x64c>)
 8102384:	4413      	add	r3, r2
 8102386:	4a6e      	ldr	r2, [pc, #440]	; (8102540 <HAL_DMA_Init+0x650>)
 8102388:	fba2 2303 	umull	r2, r3, r2, r3
 810238c:	091b      	lsrs	r3, r3, #4
 810238e:	009a      	lsls	r2, r3, #2
 8102390:	687b      	ldr	r3, [r7, #4]
 8102392:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102394:	6878      	ldr	r0, [r7, #4]
 8102396:	f001 f82f 	bl	81033f8 <DMA_CalcBaseAndBitshift>
 810239a:	4603      	mov	r3, r0
 810239c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810239e:	687b      	ldr	r3, [r7, #4]
 81023a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81023a2:	f003 031f 	and.w	r3, r3, #31
 81023a6:	2201      	movs	r2, #1
 81023a8:	409a      	lsls	r2, r3
 81023aa:	68fb      	ldr	r3, [r7, #12]
 81023ac:	605a      	str	r2, [r3, #4]
 81023ae:	e008      	b.n	81023c2 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81023b0:	687b      	ldr	r3, [r7, #4]
 81023b2:	2240      	movs	r2, #64	; 0x40
 81023b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 81023b6:	687b      	ldr	r3, [r7, #4]
 81023b8:	2203      	movs	r2, #3
 81023ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 81023be:	2301      	movs	r3, #1
 81023c0:	e0b7      	b.n	8102532 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81023c2:	687b      	ldr	r3, [r7, #4]
 81023c4:	681b      	ldr	r3, [r3, #0]
 81023c6:	4a5f      	ldr	r2, [pc, #380]	; (8102544 <HAL_DMA_Init+0x654>)
 81023c8:	4293      	cmp	r3, r2
 81023ca:	d072      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 81023cc:	687b      	ldr	r3, [r7, #4]
 81023ce:	681b      	ldr	r3, [r3, #0]
 81023d0:	4a5d      	ldr	r2, [pc, #372]	; (8102548 <HAL_DMA_Init+0x658>)
 81023d2:	4293      	cmp	r3, r2
 81023d4:	d06d      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 81023d6:	687b      	ldr	r3, [r7, #4]
 81023d8:	681b      	ldr	r3, [r3, #0]
 81023da:	4a5c      	ldr	r2, [pc, #368]	; (810254c <HAL_DMA_Init+0x65c>)
 81023dc:	4293      	cmp	r3, r2
 81023de:	d068      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 81023e0:	687b      	ldr	r3, [r7, #4]
 81023e2:	681b      	ldr	r3, [r3, #0]
 81023e4:	4a5a      	ldr	r2, [pc, #360]	; (8102550 <HAL_DMA_Init+0x660>)
 81023e6:	4293      	cmp	r3, r2
 81023e8:	d063      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 81023ea:	687b      	ldr	r3, [r7, #4]
 81023ec:	681b      	ldr	r3, [r3, #0]
 81023ee:	4a59      	ldr	r2, [pc, #356]	; (8102554 <HAL_DMA_Init+0x664>)
 81023f0:	4293      	cmp	r3, r2
 81023f2:	d05e      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 81023f4:	687b      	ldr	r3, [r7, #4]
 81023f6:	681b      	ldr	r3, [r3, #0]
 81023f8:	4a57      	ldr	r2, [pc, #348]	; (8102558 <HAL_DMA_Init+0x668>)
 81023fa:	4293      	cmp	r3, r2
 81023fc:	d059      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 81023fe:	687b      	ldr	r3, [r7, #4]
 8102400:	681b      	ldr	r3, [r3, #0]
 8102402:	4a56      	ldr	r2, [pc, #344]	; (810255c <HAL_DMA_Init+0x66c>)
 8102404:	4293      	cmp	r3, r2
 8102406:	d054      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 8102408:	687b      	ldr	r3, [r7, #4]
 810240a:	681b      	ldr	r3, [r3, #0]
 810240c:	4a54      	ldr	r2, [pc, #336]	; (8102560 <HAL_DMA_Init+0x670>)
 810240e:	4293      	cmp	r3, r2
 8102410:	d04f      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 8102412:	687b      	ldr	r3, [r7, #4]
 8102414:	681b      	ldr	r3, [r3, #0]
 8102416:	4a53      	ldr	r2, [pc, #332]	; (8102564 <HAL_DMA_Init+0x674>)
 8102418:	4293      	cmp	r3, r2
 810241a:	d04a      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 810241c:	687b      	ldr	r3, [r7, #4]
 810241e:	681b      	ldr	r3, [r3, #0]
 8102420:	4a51      	ldr	r2, [pc, #324]	; (8102568 <HAL_DMA_Init+0x678>)
 8102422:	4293      	cmp	r3, r2
 8102424:	d045      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 8102426:	687b      	ldr	r3, [r7, #4]
 8102428:	681b      	ldr	r3, [r3, #0]
 810242a:	4a50      	ldr	r2, [pc, #320]	; (810256c <HAL_DMA_Init+0x67c>)
 810242c:	4293      	cmp	r3, r2
 810242e:	d040      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 8102430:	687b      	ldr	r3, [r7, #4]
 8102432:	681b      	ldr	r3, [r3, #0]
 8102434:	4a4e      	ldr	r2, [pc, #312]	; (8102570 <HAL_DMA_Init+0x680>)
 8102436:	4293      	cmp	r3, r2
 8102438:	d03b      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 810243a:	687b      	ldr	r3, [r7, #4]
 810243c:	681b      	ldr	r3, [r3, #0]
 810243e:	4a4d      	ldr	r2, [pc, #308]	; (8102574 <HAL_DMA_Init+0x684>)
 8102440:	4293      	cmp	r3, r2
 8102442:	d036      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 8102444:	687b      	ldr	r3, [r7, #4]
 8102446:	681b      	ldr	r3, [r3, #0]
 8102448:	4a4b      	ldr	r2, [pc, #300]	; (8102578 <HAL_DMA_Init+0x688>)
 810244a:	4293      	cmp	r3, r2
 810244c:	d031      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 810244e:	687b      	ldr	r3, [r7, #4]
 8102450:	681b      	ldr	r3, [r3, #0]
 8102452:	4a4a      	ldr	r2, [pc, #296]	; (810257c <HAL_DMA_Init+0x68c>)
 8102454:	4293      	cmp	r3, r2
 8102456:	d02c      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 8102458:	687b      	ldr	r3, [r7, #4]
 810245a:	681b      	ldr	r3, [r3, #0]
 810245c:	4a48      	ldr	r2, [pc, #288]	; (8102580 <HAL_DMA_Init+0x690>)
 810245e:	4293      	cmp	r3, r2
 8102460:	d027      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 8102462:	687b      	ldr	r3, [r7, #4]
 8102464:	681b      	ldr	r3, [r3, #0]
 8102466:	4a47      	ldr	r2, [pc, #284]	; (8102584 <HAL_DMA_Init+0x694>)
 8102468:	4293      	cmp	r3, r2
 810246a:	d022      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 810246c:	687b      	ldr	r3, [r7, #4]
 810246e:	681b      	ldr	r3, [r3, #0]
 8102470:	4a45      	ldr	r2, [pc, #276]	; (8102588 <HAL_DMA_Init+0x698>)
 8102472:	4293      	cmp	r3, r2
 8102474:	d01d      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 8102476:	687b      	ldr	r3, [r7, #4]
 8102478:	681b      	ldr	r3, [r3, #0]
 810247a:	4a44      	ldr	r2, [pc, #272]	; (810258c <HAL_DMA_Init+0x69c>)
 810247c:	4293      	cmp	r3, r2
 810247e:	d018      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 8102480:	687b      	ldr	r3, [r7, #4]
 8102482:	681b      	ldr	r3, [r3, #0]
 8102484:	4a42      	ldr	r2, [pc, #264]	; (8102590 <HAL_DMA_Init+0x6a0>)
 8102486:	4293      	cmp	r3, r2
 8102488:	d013      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 810248a:	687b      	ldr	r3, [r7, #4]
 810248c:	681b      	ldr	r3, [r3, #0]
 810248e:	4a41      	ldr	r2, [pc, #260]	; (8102594 <HAL_DMA_Init+0x6a4>)
 8102490:	4293      	cmp	r3, r2
 8102492:	d00e      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 8102494:	687b      	ldr	r3, [r7, #4]
 8102496:	681b      	ldr	r3, [r3, #0]
 8102498:	4a3f      	ldr	r2, [pc, #252]	; (8102598 <HAL_DMA_Init+0x6a8>)
 810249a:	4293      	cmp	r3, r2
 810249c:	d009      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 810249e:	687b      	ldr	r3, [r7, #4]
 81024a0:	681b      	ldr	r3, [r3, #0]
 81024a2:	4a3e      	ldr	r2, [pc, #248]	; (810259c <HAL_DMA_Init+0x6ac>)
 81024a4:	4293      	cmp	r3, r2
 81024a6:	d004      	beq.n	81024b2 <HAL_DMA_Init+0x5c2>
 81024a8:	687b      	ldr	r3, [r7, #4]
 81024aa:	681b      	ldr	r3, [r3, #0]
 81024ac:	4a3c      	ldr	r2, [pc, #240]	; (81025a0 <HAL_DMA_Init+0x6b0>)
 81024ae:	4293      	cmp	r3, r2
 81024b0:	d101      	bne.n	81024b6 <HAL_DMA_Init+0x5c6>
 81024b2:	2301      	movs	r3, #1
 81024b4:	e000      	b.n	81024b8 <HAL_DMA_Init+0x5c8>
 81024b6:	2300      	movs	r3, #0
 81024b8:	2b00      	cmp	r3, #0
 81024ba:	d032      	beq.n	8102522 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 81024bc:	6878      	ldr	r0, [r7, #4]
 81024be:	f001 f8c9 	bl	8103654 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 81024c2:	687b      	ldr	r3, [r7, #4]
 81024c4:	689b      	ldr	r3, [r3, #8]
 81024c6:	2b80      	cmp	r3, #128	; 0x80
 81024c8:	d102      	bne.n	81024d0 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81024ca:	687b      	ldr	r3, [r7, #4]
 81024cc:	2200      	movs	r2, #0
 81024ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81024d0:	687b      	ldr	r3, [r7, #4]
 81024d2:	685a      	ldr	r2, [r3, #4]
 81024d4:	687b      	ldr	r3, [r7, #4]
 81024d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81024d8:	b2d2      	uxtb	r2, r2
 81024da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81024dc:	687b      	ldr	r3, [r7, #4]
 81024de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81024e0:	687a      	ldr	r2, [r7, #4]
 81024e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81024e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 81024e6:	687b      	ldr	r3, [r7, #4]
 81024e8:	685b      	ldr	r3, [r3, #4]
 81024ea:	2b00      	cmp	r3, #0
 81024ec:	d010      	beq.n	8102510 <HAL_DMA_Init+0x620>
 81024ee:	687b      	ldr	r3, [r7, #4]
 81024f0:	685b      	ldr	r3, [r3, #4]
 81024f2:	2b08      	cmp	r3, #8
 81024f4:	d80c      	bhi.n	8102510 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 81024f6:	6878      	ldr	r0, [r7, #4]
 81024f8:	f001 f946 	bl	8103788 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 81024fc:	687b      	ldr	r3, [r7, #4]
 81024fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102500:	2200      	movs	r2, #0
 8102502:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102504:	687b      	ldr	r3, [r7, #4]
 8102506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102508:	687a      	ldr	r2, [r7, #4]
 810250a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810250c:	605a      	str	r2, [r3, #4]
 810250e:	e008      	b.n	8102522 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8102510:	687b      	ldr	r3, [r7, #4]
 8102512:	2200      	movs	r2, #0
 8102514:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8102516:	687b      	ldr	r3, [r7, #4]
 8102518:	2200      	movs	r2, #0
 810251a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 810251c:	687b      	ldr	r3, [r7, #4]
 810251e:	2200      	movs	r2, #0
 8102520:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102522:	687b      	ldr	r3, [r7, #4]
 8102524:	2200      	movs	r2, #0
 8102526:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8102528:	687b      	ldr	r3, [r7, #4]
 810252a:	2201      	movs	r2, #1
 810252c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8102530:	2300      	movs	r3, #0
}
 8102532:	4618      	mov	r0, r3
 8102534:	3718      	adds	r7, #24
 8102536:	46bd      	mov	sp, r7
 8102538:	bd80      	pop	{r7, pc}
 810253a:	bf00      	nop
 810253c:	a7fdabf8 	.word	0xa7fdabf8
 8102540:	cccccccd 	.word	0xcccccccd
 8102544:	40020010 	.word	0x40020010
 8102548:	40020028 	.word	0x40020028
 810254c:	40020040 	.word	0x40020040
 8102550:	40020058 	.word	0x40020058
 8102554:	40020070 	.word	0x40020070
 8102558:	40020088 	.word	0x40020088
 810255c:	400200a0 	.word	0x400200a0
 8102560:	400200b8 	.word	0x400200b8
 8102564:	40020410 	.word	0x40020410
 8102568:	40020428 	.word	0x40020428
 810256c:	40020440 	.word	0x40020440
 8102570:	40020458 	.word	0x40020458
 8102574:	40020470 	.word	0x40020470
 8102578:	40020488 	.word	0x40020488
 810257c:	400204a0 	.word	0x400204a0
 8102580:	400204b8 	.word	0x400204b8
 8102584:	58025408 	.word	0x58025408
 8102588:	5802541c 	.word	0x5802541c
 810258c:	58025430 	.word	0x58025430
 8102590:	58025444 	.word	0x58025444
 8102594:	58025458 	.word	0x58025458
 8102598:	5802546c 	.word	0x5802546c
 810259c:	58025480 	.word	0x58025480
 81025a0:	58025494 	.word	0x58025494

081025a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 81025a4:	b580      	push	{r7, lr}
 81025a6:	b08a      	sub	sp, #40	; 0x28
 81025a8:	af00      	add	r7, sp, #0
 81025aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 81025ac:	2300      	movs	r3, #0
 81025ae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 81025b0:	4b67      	ldr	r3, [pc, #412]	; (8102750 <HAL_DMA_IRQHandler+0x1ac>)
 81025b2:	681b      	ldr	r3, [r3, #0]
 81025b4:	4a67      	ldr	r2, [pc, #412]	; (8102754 <HAL_DMA_IRQHandler+0x1b0>)
 81025b6:	fba2 2303 	umull	r2, r3, r2, r3
 81025ba:	0a9b      	lsrs	r3, r3, #10
 81025bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81025be:	687b      	ldr	r3, [r7, #4]
 81025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81025c2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81025c4:	687b      	ldr	r3, [r7, #4]
 81025c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81025c8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 81025ca:	6a3b      	ldr	r3, [r7, #32]
 81025cc:	681b      	ldr	r3, [r3, #0]
 81025ce:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 81025d0:	69fb      	ldr	r3, [r7, #28]
 81025d2:	681b      	ldr	r3, [r3, #0]
 81025d4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 81025d6:	687b      	ldr	r3, [r7, #4]
 81025d8:	681b      	ldr	r3, [r3, #0]
 81025da:	4a5f      	ldr	r2, [pc, #380]	; (8102758 <HAL_DMA_IRQHandler+0x1b4>)
 81025dc:	4293      	cmp	r3, r2
 81025de:	d04a      	beq.n	8102676 <HAL_DMA_IRQHandler+0xd2>
 81025e0:	687b      	ldr	r3, [r7, #4]
 81025e2:	681b      	ldr	r3, [r3, #0]
 81025e4:	4a5d      	ldr	r2, [pc, #372]	; (810275c <HAL_DMA_IRQHandler+0x1b8>)
 81025e6:	4293      	cmp	r3, r2
 81025e8:	d045      	beq.n	8102676 <HAL_DMA_IRQHandler+0xd2>
 81025ea:	687b      	ldr	r3, [r7, #4]
 81025ec:	681b      	ldr	r3, [r3, #0]
 81025ee:	4a5c      	ldr	r2, [pc, #368]	; (8102760 <HAL_DMA_IRQHandler+0x1bc>)
 81025f0:	4293      	cmp	r3, r2
 81025f2:	d040      	beq.n	8102676 <HAL_DMA_IRQHandler+0xd2>
 81025f4:	687b      	ldr	r3, [r7, #4]
 81025f6:	681b      	ldr	r3, [r3, #0]
 81025f8:	4a5a      	ldr	r2, [pc, #360]	; (8102764 <HAL_DMA_IRQHandler+0x1c0>)
 81025fa:	4293      	cmp	r3, r2
 81025fc:	d03b      	beq.n	8102676 <HAL_DMA_IRQHandler+0xd2>
 81025fe:	687b      	ldr	r3, [r7, #4]
 8102600:	681b      	ldr	r3, [r3, #0]
 8102602:	4a59      	ldr	r2, [pc, #356]	; (8102768 <HAL_DMA_IRQHandler+0x1c4>)
 8102604:	4293      	cmp	r3, r2
 8102606:	d036      	beq.n	8102676 <HAL_DMA_IRQHandler+0xd2>
 8102608:	687b      	ldr	r3, [r7, #4]
 810260a:	681b      	ldr	r3, [r3, #0]
 810260c:	4a57      	ldr	r2, [pc, #348]	; (810276c <HAL_DMA_IRQHandler+0x1c8>)
 810260e:	4293      	cmp	r3, r2
 8102610:	d031      	beq.n	8102676 <HAL_DMA_IRQHandler+0xd2>
 8102612:	687b      	ldr	r3, [r7, #4]
 8102614:	681b      	ldr	r3, [r3, #0]
 8102616:	4a56      	ldr	r2, [pc, #344]	; (8102770 <HAL_DMA_IRQHandler+0x1cc>)
 8102618:	4293      	cmp	r3, r2
 810261a:	d02c      	beq.n	8102676 <HAL_DMA_IRQHandler+0xd2>
 810261c:	687b      	ldr	r3, [r7, #4]
 810261e:	681b      	ldr	r3, [r3, #0]
 8102620:	4a54      	ldr	r2, [pc, #336]	; (8102774 <HAL_DMA_IRQHandler+0x1d0>)
 8102622:	4293      	cmp	r3, r2
 8102624:	d027      	beq.n	8102676 <HAL_DMA_IRQHandler+0xd2>
 8102626:	687b      	ldr	r3, [r7, #4]
 8102628:	681b      	ldr	r3, [r3, #0]
 810262a:	4a53      	ldr	r2, [pc, #332]	; (8102778 <HAL_DMA_IRQHandler+0x1d4>)
 810262c:	4293      	cmp	r3, r2
 810262e:	d022      	beq.n	8102676 <HAL_DMA_IRQHandler+0xd2>
 8102630:	687b      	ldr	r3, [r7, #4]
 8102632:	681b      	ldr	r3, [r3, #0]
 8102634:	4a51      	ldr	r2, [pc, #324]	; (810277c <HAL_DMA_IRQHandler+0x1d8>)
 8102636:	4293      	cmp	r3, r2
 8102638:	d01d      	beq.n	8102676 <HAL_DMA_IRQHandler+0xd2>
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	681b      	ldr	r3, [r3, #0]
 810263e:	4a50      	ldr	r2, [pc, #320]	; (8102780 <HAL_DMA_IRQHandler+0x1dc>)
 8102640:	4293      	cmp	r3, r2
 8102642:	d018      	beq.n	8102676 <HAL_DMA_IRQHandler+0xd2>
 8102644:	687b      	ldr	r3, [r7, #4]
 8102646:	681b      	ldr	r3, [r3, #0]
 8102648:	4a4e      	ldr	r2, [pc, #312]	; (8102784 <HAL_DMA_IRQHandler+0x1e0>)
 810264a:	4293      	cmp	r3, r2
 810264c:	d013      	beq.n	8102676 <HAL_DMA_IRQHandler+0xd2>
 810264e:	687b      	ldr	r3, [r7, #4]
 8102650:	681b      	ldr	r3, [r3, #0]
 8102652:	4a4d      	ldr	r2, [pc, #308]	; (8102788 <HAL_DMA_IRQHandler+0x1e4>)
 8102654:	4293      	cmp	r3, r2
 8102656:	d00e      	beq.n	8102676 <HAL_DMA_IRQHandler+0xd2>
 8102658:	687b      	ldr	r3, [r7, #4]
 810265a:	681b      	ldr	r3, [r3, #0]
 810265c:	4a4b      	ldr	r2, [pc, #300]	; (810278c <HAL_DMA_IRQHandler+0x1e8>)
 810265e:	4293      	cmp	r3, r2
 8102660:	d009      	beq.n	8102676 <HAL_DMA_IRQHandler+0xd2>
 8102662:	687b      	ldr	r3, [r7, #4]
 8102664:	681b      	ldr	r3, [r3, #0]
 8102666:	4a4a      	ldr	r2, [pc, #296]	; (8102790 <HAL_DMA_IRQHandler+0x1ec>)
 8102668:	4293      	cmp	r3, r2
 810266a:	d004      	beq.n	8102676 <HAL_DMA_IRQHandler+0xd2>
 810266c:	687b      	ldr	r3, [r7, #4]
 810266e:	681b      	ldr	r3, [r3, #0]
 8102670:	4a48      	ldr	r2, [pc, #288]	; (8102794 <HAL_DMA_IRQHandler+0x1f0>)
 8102672:	4293      	cmp	r3, r2
 8102674:	d101      	bne.n	810267a <HAL_DMA_IRQHandler+0xd6>
 8102676:	2301      	movs	r3, #1
 8102678:	e000      	b.n	810267c <HAL_DMA_IRQHandler+0xd8>
 810267a:	2300      	movs	r3, #0
 810267c:	2b00      	cmp	r3, #0
 810267e:	f000 842b 	beq.w	8102ed8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102682:	687b      	ldr	r3, [r7, #4]
 8102684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102686:	f003 031f 	and.w	r3, r3, #31
 810268a:	2208      	movs	r2, #8
 810268c:	409a      	lsls	r2, r3
 810268e:	69bb      	ldr	r3, [r7, #24]
 8102690:	4013      	ands	r3, r2
 8102692:	2b00      	cmp	r3, #0
 8102694:	f000 80a2 	beq.w	81027dc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8102698:	687b      	ldr	r3, [r7, #4]
 810269a:	681b      	ldr	r3, [r3, #0]
 810269c:	4a2e      	ldr	r2, [pc, #184]	; (8102758 <HAL_DMA_IRQHandler+0x1b4>)
 810269e:	4293      	cmp	r3, r2
 81026a0:	d04a      	beq.n	8102738 <HAL_DMA_IRQHandler+0x194>
 81026a2:	687b      	ldr	r3, [r7, #4]
 81026a4:	681b      	ldr	r3, [r3, #0]
 81026a6:	4a2d      	ldr	r2, [pc, #180]	; (810275c <HAL_DMA_IRQHandler+0x1b8>)
 81026a8:	4293      	cmp	r3, r2
 81026aa:	d045      	beq.n	8102738 <HAL_DMA_IRQHandler+0x194>
 81026ac:	687b      	ldr	r3, [r7, #4]
 81026ae:	681b      	ldr	r3, [r3, #0]
 81026b0:	4a2b      	ldr	r2, [pc, #172]	; (8102760 <HAL_DMA_IRQHandler+0x1bc>)
 81026b2:	4293      	cmp	r3, r2
 81026b4:	d040      	beq.n	8102738 <HAL_DMA_IRQHandler+0x194>
 81026b6:	687b      	ldr	r3, [r7, #4]
 81026b8:	681b      	ldr	r3, [r3, #0]
 81026ba:	4a2a      	ldr	r2, [pc, #168]	; (8102764 <HAL_DMA_IRQHandler+0x1c0>)
 81026bc:	4293      	cmp	r3, r2
 81026be:	d03b      	beq.n	8102738 <HAL_DMA_IRQHandler+0x194>
 81026c0:	687b      	ldr	r3, [r7, #4]
 81026c2:	681b      	ldr	r3, [r3, #0]
 81026c4:	4a28      	ldr	r2, [pc, #160]	; (8102768 <HAL_DMA_IRQHandler+0x1c4>)
 81026c6:	4293      	cmp	r3, r2
 81026c8:	d036      	beq.n	8102738 <HAL_DMA_IRQHandler+0x194>
 81026ca:	687b      	ldr	r3, [r7, #4]
 81026cc:	681b      	ldr	r3, [r3, #0]
 81026ce:	4a27      	ldr	r2, [pc, #156]	; (810276c <HAL_DMA_IRQHandler+0x1c8>)
 81026d0:	4293      	cmp	r3, r2
 81026d2:	d031      	beq.n	8102738 <HAL_DMA_IRQHandler+0x194>
 81026d4:	687b      	ldr	r3, [r7, #4]
 81026d6:	681b      	ldr	r3, [r3, #0]
 81026d8:	4a25      	ldr	r2, [pc, #148]	; (8102770 <HAL_DMA_IRQHandler+0x1cc>)
 81026da:	4293      	cmp	r3, r2
 81026dc:	d02c      	beq.n	8102738 <HAL_DMA_IRQHandler+0x194>
 81026de:	687b      	ldr	r3, [r7, #4]
 81026e0:	681b      	ldr	r3, [r3, #0]
 81026e2:	4a24      	ldr	r2, [pc, #144]	; (8102774 <HAL_DMA_IRQHandler+0x1d0>)
 81026e4:	4293      	cmp	r3, r2
 81026e6:	d027      	beq.n	8102738 <HAL_DMA_IRQHandler+0x194>
 81026e8:	687b      	ldr	r3, [r7, #4]
 81026ea:	681b      	ldr	r3, [r3, #0]
 81026ec:	4a22      	ldr	r2, [pc, #136]	; (8102778 <HAL_DMA_IRQHandler+0x1d4>)
 81026ee:	4293      	cmp	r3, r2
 81026f0:	d022      	beq.n	8102738 <HAL_DMA_IRQHandler+0x194>
 81026f2:	687b      	ldr	r3, [r7, #4]
 81026f4:	681b      	ldr	r3, [r3, #0]
 81026f6:	4a21      	ldr	r2, [pc, #132]	; (810277c <HAL_DMA_IRQHandler+0x1d8>)
 81026f8:	4293      	cmp	r3, r2
 81026fa:	d01d      	beq.n	8102738 <HAL_DMA_IRQHandler+0x194>
 81026fc:	687b      	ldr	r3, [r7, #4]
 81026fe:	681b      	ldr	r3, [r3, #0]
 8102700:	4a1f      	ldr	r2, [pc, #124]	; (8102780 <HAL_DMA_IRQHandler+0x1dc>)
 8102702:	4293      	cmp	r3, r2
 8102704:	d018      	beq.n	8102738 <HAL_DMA_IRQHandler+0x194>
 8102706:	687b      	ldr	r3, [r7, #4]
 8102708:	681b      	ldr	r3, [r3, #0]
 810270a:	4a1e      	ldr	r2, [pc, #120]	; (8102784 <HAL_DMA_IRQHandler+0x1e0>)
 810270c:	4293      	cmp	r3, r2
 810270e:	d013      	beq.n	8102738 <HAL_DMA_IRQHandler+0x194>
 8102710:	687b      	ldr	r3, [r7, #4]
 8102712:	681b      	ldr	r3, [r3, #0]
 8102714:	4a1c      	ldr	r2, [pc, #112]	; (8102788 <HAL_DMA_IRQHandler+0x1e4>)
 8102716:	4293      	cmp	r3, r2
 8102718:	d00e      	beq.n	8102738 <HAL_DMA_IRQHandler+0x194>
 810271a:	687b      	ldr	r3, [r7, #4]
 810271c:	681b      	ldr	r3, [r3, #0]
 810271e:	4a1b      	ldr	r2, [pc, #108]	; (810278c <HAL_DMA_IRQHandler+0x1e8>)
 8102720:	4293      	cmp	r3, r2
 8102722:	d009      	beq.n	8102738 <HAL_DMA_IRQHandler+0x194>
 8102724:	687b      	ldr	r3, [r7, #4]
 8102726:	681b      	ldr	r3, [r3, #0]
 8102728:	4a19      	ldr	r2, [pc, #100]	; (8102790 <HAL_DMA_IRQHandler+0x1ec>)
 810272a:	4293      	cmp	r3, r2
 810272c:	d004      	beq.n	8102738 <HAL_DMA_IRQHandler+0x194>
 810272e:	687b      	ldr	r3, [r7, #4]
 8102730:	681b      	ldr	r3, [r3, #0]
 8102732:	4a18      	ldr	r2, [pc, #96]	; (8102794 <HAL_DMA_IRQHandler+0x1f0>)
 8102734:	4293      	cmp	r3, r2
 8102736:	d12f      	bne.n	8102798 <HAL_DMA_IRQHandler+0x1f4>
 8102738:	687b      	ldr	r3, [r7, #4]
 810273a:	681b      	ldr	r3, [r3, #0]
 810273c:	681b      	ldr	r3, [r3, #0]
 810273e:	f003 0304 	and.w	r3, r3, #4
 8102742:	2b00      	cmp	r3, #0
 8102744:	bf14      	ite	ne
 8102746:	2301      	movne	r3, #1
 8102748:	2300      	moveq	r3, #0
 810274a:	b2db      	uxtb	r3, r3
 810274c:	e02e      	b.n	81027ac <HAL_DMA_IRQHandler+0x208>
 810274e:	bf00      	nop
 8102750:	10000000 	.word	0x10000000
 8102754:	1b4e81b5 	.word	0x1b4e81b5
 8102758:	40020010 	.word	0x40020010
 810275c:	40020028 	.word	0x40020028
 8102760:	40020040 	.word	0x40020040
 8102764:	40020058 	.word	0x40020058
 8102768:	40020070 	.word	0x40020070
 810276c:	40020088 	.word	0x40020088
 8102770:	400200a0 	.word	0x400200a0
 8102774:	400200b8 	.word	0x400200b8
 8102778:	40020410 	.word	0x40020410
 810277c:	40020428 	.word	0x40020428
 8102780:	40020440 	.word	0x40020440
 8102784:	40020458 	.word	0x40020458
 8102788:	40020470 	.word	0x40020470
 810278c:	40020488 	.word	0x40020488
 8102790:	400204a0 	.word	0x400204a0
 8102794:	400204b8 	.word	0x400204b8
 8102798:	687b      	ldr	r3, [r7, #4]
 810279a:	681b      	ldr	r3, [r3, #0]
 810279c:	681b      	ldr	r3, [r3, #0]
 810279e:	f003 0308 	and.w	r3, r3, #8
 81027a2:	2b00      	cmp	r3, #0
 81027a4:	bf14      	ite	ne
 81027a6:	2301      	movne	r3, #1
 81027a8:	2300      	moveq	r3, #0
 81027aa:	b2db      	uxtb	r3, r3
 81027ac:	2b00      	cmp	r3, #0
 81027ae:	d015      	beq.n	81027dc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 81027b0:	687b      	ldr	r3, [r7, #4]
 81027b2:	681b      	ldr	r3, [r3, #0]
 81027b4:	681a      	ldr	r2, [r3, #0]
 81027b6:	687b      	ldr	r3, [r7, #4]
 81027b8:	681b      	ldr	r3, [r3, #0]
 81027ba:	f022 0204 	bic.w	r2, r2, #4
 81027be:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81027c0:	687b      	ldr	r3, [r7, #4]
 81027c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81027c4:	f003 031f 	and.w	r3, r3, #31
 81027c8:	2208      	movs	r2, #8
 81027ca:	409a      	lsls	r2, r3
 81027cc:	6a3b      	ldr	r3, [r7, #32]
 81027ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 81027d0:	687b      	ldr	r3, [r7, #4]
 81027d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81027d4:	f043 0201 	orr.w	r2, r3, #1
 81027d8:	687b      	ldr	r3, [r7, #4]
 81027da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81027dc:	687b      	ldr	r3, [r7, #4]
 81027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81027e0:	f003 031f 	and.w	r3, r3, #31
 81027e4:	69ba      	ldr	r2, [r7, #24]
 81027e6:	fa22 f303 	lsr.w	r3, r2, r3
 81027ea:	f003 0301 	and.w	r3, r3, #1
 81027ee:	2b00      	cmp	r3, #0
 81027f0:	d06e      	beq.n	81028d0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 81027f2:	687b      	ldr	r3, [r7, #4]
 81027f4:	681b      	ldr	r3, [r3, #0]
 81027f6:	4a69      	ldr	r2, [pc, #420]	; (810299c <HAL_DMA_IRQHandler+0x3f8>)
 81027f8:	4293      	cmp	r3, r2
 81027fa:	d04a      	beq.n	8102892 <HAL_DMA_IRQHandler+0x2ee>
 81027fc:	687b      	ldr	r3, [r7, #4]
 81027fe:	681b      	ldr	r3, [r3, #0]
 8102800:	4a67      	ldr	r2, [pc, #412]	; (81029a0 <HAL_DMA_IRQHandler+0x3fc>)
 8102802:	4293      	cmp	r3, r2
 8102804:	d045      	beq.n	8102892 <HAL_DMA_IRQHandler+0x2ee>
 8102806:	687b      	ldr	r3, [r7, #4]
 8102808:	681b      	ldr	r3, [r3, #0]
 810280a:	4a66      	ldr	r2, [pc, #408]	; (81029a4 <HAL_DMA_IRQHandler+0x400>)
 810280c:	4293      	cmp	r3, r2
 810280e:	d040      	beq.n	8102892 <HAL_DMA_IRQHandler+0x2ee>
 8102810:	687b      	ldr	r3, [r7, #4]
 8102812:	681b      	ldr	r3, [r3, #0]
 8102814:	4a64      	ldr	r2, [pc, #400]	; (81029a8 <HAL_DMA_IRQHandler+0x404>)
 8102816:	4293      	cmp	r3, r2
 8102818:	d03b      	beq.n	8102892 <HAL_DMA_IRQHandler+0x2ee>
 810281a:	687b      	ldr	r3, [r7, #4]
 810281c:	681b      	ldr	r3, [r3, #0]
 810281e:	4a63      	ldr	r2, [pc, #396]	; (81029ac <HAL_DMA_IRQHandler+0x408>)
 8102820:	4293      	cmp	r3, r2
 8102822:	d036      	beq.n	8102892 <HAL_DMA_IRQHandler+0x2ee>
 8102824:	687b      	ldr	r3, [r7, #4]
 8102826:	681b      	ldr	r3, [r3, #0]
 8102828:	4a61      	ldr	r2, [pc, #388]	; (81029b0 <HAL_DMA_IRQHandler+0x40c>)
 810282a:	4293      	cmp	r3, r2
 810282c:	d031      	beq.n	8102892 <HAL_DMA_IRQHandler+0x2ee>
 810282e:	687b      	ldr	r3, [r7, #4]
 8102830:	681b      	ldr	r3, [r3, #0]
 8102832:	4a60      	ldr	r2, [pc, #384]	; (81029b4 <HAL_DMA_IRQHandler+0x410>)
 8102834:	4293      	cmp	r3, r2
 8102836:	d02c      	beq.n	8102892 <HAL_DMA_IRQHandler+0x2ee>
 8102838:	687b      	ldr	r3, [r7, #4]
 810283a:	681b      	ldr	r3, [r3, #0]
 810283c:	4a5e      	ldr	r2, [pc, #376]	; (81029b8 <HAL_DMA_IRQHandler+0x414>)
 810283e:	4293      	cmp	r3, r2
 8102840:	d027      	beq.n	8102892 <HAL_DMA_IRQHandler+0x2ee>
 8102842:	687b      	ldr	r3, [r7, #4]
 8102844:	681b      	ldr	r3, [r3, #0]
 8102846:	4a5d      	ldr	r2, [pc, #372]	; (81029bc <HAL_DMA_IRQHandler+0x418>)
 8102848:	4293      	cmp	r3, r2
 810284a:	d022      	beq.n	8102892 <HAL_DMA_IRQHandler+0x2ee>
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	681b      	ldr	r3, [r3, #0]
 8102850:	4a5b      	ldr	r2, [pc, #364]	; (81029c0 <HAL_DMA_IRQHandler+0x41c>)
 8102852:	4293      	cmp	r3, r2
 8102854:	d01d      	beq.n	8102892 <HAL_DMA_IRQHandler+0x2ee>
 8102856:	687b      	ldr	r3, [r7, #4]
 8102858:	681b      	ldr	r3, [r3, #0]
 810285a:	4a5a      	ldr	r2, [pc, #360]	; (81029c4 <HAL_DMA_IRQHandler+0x420>)
 810285c:	4293      	cmp	r3, r2
 810285e:	d018      	beq.n	8102892 <HAL_DMA_IRQHandler+0x2ee>
 8102860:	687b      	ldr	r3, [r7, #4]
 8102862:	681b      	ldr	r3, [r3, #0]
 8102864:	4a58      	ldr	r2, [pc, #352]	; (81029c8 <HAL_DMA_IRQHandler+0x424>)
 8102866:	4293      	cmp	r3, r2
 8102868:	d013      	beq.n	8102892 <HAL_DMA_IRQHandler+0x2ee>
 810286a:	687b      	ldr	r3, [r7, #4]
 810286c:	681b      	ldr	r3, [r3, #0]
 810286e:	4a57      	ldr	r2, [pc, #348]	; (81029cc <HAL_DMA_IRQHandler+0x428>)
 8102870:	4293      	cmp	r3, r2
 8102872:	d00e      	beq.n	8102892 <HAL_DMA_IRQHandler+0x2ee>
 8102874:	687b      	ldr	r3, [r7, #4]
 8102876:	681b      	ldr	r3, [r3, #0]
 8102878:	4a55      	ldr	r2, [pc, #340]	; (81029d0 <HAL_DMA_IRQHandler+0x42c>)
 810287a:	4293      	cmp	r3, r2
 810287c:	d009      	beq.n	8102892 <HAL_DMA_IRQHandler+0x2ee>
 810287e:	687b      	ldr	r3, [r7, #4]
 8102880:	681b      	ldr	r3, [r3, #0]
 8102882:	4a54      	ldr	r2, [pc, #336]	; (81029d4 <HAL_DMA_IRQHandler+0x430>)
 8102884:	4293      	cmp	r3, r2
 8102886:	d004      	beq.n	8102892 <HAL_DMA_IRQHandler+0x2ee>
 8102888:	687b      	ldr	r3, [r7, #4]
 810288a:	681b      	ldr	r3, [r3, #0]
 810288c:	4a52      	ldr	r2, [pc, #328]	; (81029d8 <HAL_DMA_IRQHandler+0x434>)
 810288e:	4293      	cmp	r3, r2
 8102890:	d10a      	bne.n	81028a8 <HAL_DMA_IRQHandler+0x304>
 8102892:	687b      	ldr	r3, [r7, #4]
 8102894:	681b      	ldr	r3, [r3, #0]
 8102896:	695b      	ldr	r3, [r3, #20]
 8102898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810289c:	2b00      	cmp	r3, #0
 810289e:	bf14      	ite	ne
 81028a0:	2301      	movne	r3, #1
 81028a2:	2300      	moveq	r3, #0
 81028a4:	b2db      	uxtb	r3, r3
 81028a6:	e003      	b.n	81028b0 <HAL_DMA_IRQHandler+0x30c>
 81028a8:	687b      	ldr	r3, [r7, #4]
 81028aa:	681b      	ldr	r3, [r3, #0]
 81028ac:	681b      	ldr	r3, [r3, #0]
 81028ae:	2300      	movs	r3, #0
 81028b0:	2b00      	cmp	r3, #0
 81028b2:	d00d      	beq.n	81028d0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81028b4:	687b      	ldr	r3, [r7, #4]
 81028b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81028b8:	f003 031f 	and.w	r3, r3, #31
 81028bc:	2201      	movs	r2, #1
 81028be:	409a      	lsls	r2, r3
 81028c0:	6a3b      	ldr	r3, [r7, #32]
 81028c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 81028c4:	687b      	ldr	r3, [r7, #4]
 81028c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81028c8:	f043 0202 	orr.w	r2, r3, #2
 81028cc:	687b      	ldr	r3, [r7, #4]
 81028ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81028d0:	687b      	ldr	r3, [r7, #4]
 81028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81028d4:	f003 031f 	and.w	r3, r3, #31
 81028d8:	2204      	movs	r2, #4
 81028da:	409a      	lsls	r2, r3
 81028dc:	69bb      	ldr	r3, [r7, #24]
 81028de:	4013      	ands	r3, r2
 81028e0:	2b00      	cmp	r3, #0
 81028e2:	f000 808f 	beq.w	8102a04 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 81028e6:	687b      	ldr	r3, [r7, #4]
 81028e8:	681b      	ldr	r3, [r3, #0]
 81028ea:	4a2c      	ldr	r2, [pc, #176]	; (810299c <HAL_DMA_IRQHandler+0x3f8>)
 81028ec:	4293      	cmp	r3, r2
 81028ee:	d04a      	beq.n	8102986 <HAL_DMA_IRQHandler+0x3e2>
 81028f0:	687b      	ldr	r3, [r7, #4]
 81028f2:	681b      	ldr	r3, [r3, #0]
 81028f4:	4a2a      	ldr	r2, [pc, #168]	; (81029a0 <HAL_DMA_IRQHandler+0x3fc>)
 81028f6:	4293      	cmp	r3, r2
 81028f8:	d045      	beq.n	8102986 <HAL_DMA_IRQHandler+0x3e2>
 81028fa:	687b      	ldr	r3, [r7, #4]
 81028fc:	681b      	ldr	r3, [r3, #0]
 81028fe:	4a29      	ldr	r2, [pc, #164]	; (81029a4 <HAL_DMA_IRQHandler+0x400>)
 8102900:	4293      	cmp	r3, r2
 8102902:	d040      	beq.n	8102986 <HAL_DMA_IRQHandler+0x3e2>
 8102904:	687b      	ldr	r3, [r7, #4]
 8102906:	681b      	ldr	r3, [r3, #0]
 8102908:	4a27      	ldr	r2, [pc, #156]	; (81029a8 <HAL_DMA_IRQHandler+0x404>)
 810290a:	4293      	cmp	r3, r2
 810290c:	d03b      	beq.n	8102986 <HAL_DMA_IRQHandler+0x3e2>
 810290e:	687b      	ldr	r3, [r7, #4]
 8102910:	681b      	ldr	r3, [r3, #0]
 8102912:	4a26      	ldr	r2, [pc, #152]	; (81029ac <HAL_DMA_IRQHandler+0x408>)
 8102914:	4293      	cmp	r3, r2
 8102916:	d036      	beq.n	8102986 <HAL_DMA_IRQHandler+0x3e2>
 8102918:	687b      	ldr	r3, [r7, #4]
 810291a:	681b      	ldr	r3, [r3, #0]
 810291c:	4a24      	ldr	r2, [pc, #144]	; (81029b0 <HAL_DMA_IRQHandler+0x40c>)
 810291e:	4293      	cmp	r3, r2
 8102920:	d031      	beq.n	8102986 <HAL_DMA_IRQHandler+0x3e2>
 8102922:	687b      	ldr	r3, [r7, #4]
 8102924:	681b      	ldr	r3, [r3, #0]
 8102926:	4a23      	ldr	r2, [pc, #140]	; (81029b4 <HAL_DMA_IRQHandler+0x410>)
 8102928:	4293      	cmp	r3, r2
 810292a:	d02c      	beq.n	8102986 <HAL_DMA_IRQHandler+0x3e2>
 810292c:	687b      	ldr	r3, [r7, #4]
 810292e:	681b      	ldr	r3, [r3, #0]
 8102930:	4a21      	ldr	r2, [pc, #132]	; (81029b8 <HAL_DMA_IRQHandler+0x414>)
 8102932:	4293      	cmp	r3, r2
 8102934:	d027      	beq.n	8102986 <HAL_DMA_IRQHandler+0x3e2>
 8102936:	687b      	ldr	r3, [r7, #4]
 8102938:	681b      	ldr	r3, [r3, #0]
 810293a:	4a20      	ldr	r2, [pc, #128]	; (81029bc <HAL_DMA_IRQHandler+0x418>)
 810293c:	4293      	cmp	r3, r2
 810293e:	d022      	beq.n	8102986 <HAL_DMA_IRQHandler+0x3e2>
 8102940:	687b      	ldr	r3, [r7, #4]
 8102942:	681b      	ldr	r3, [r3, #0]
 8102944:	4a1e      	ldr	r2, [pc, #120]	; (81029c0 <HAL_DMA_IRQHandler+0x41c>)
 8102946:	4293      	cmp	r3, r2
 8102948:	d01d      	beq.n	8102986 <HAL_DMA_IRQHandler+0x3e2>
 810294a:	687b      	ldr	r3, [r7, #4]
 810294c:	681b      	ldr	r3, [r3, #0]
 810294e:	4a1d      	ldr	r2, [pc, #116]	; (81029c4 <HAL_DMA_IRQHandler+0x420>)
 8102950:	4293      	cmp	r3, r2
 8102952:	d018      	beq.n	8102986 <HAL_DMA_IRQHandler+0x3e2>
 8102954:	687b      	ldr	r3, [r7, #4]
 8102956:	681b      	ldr	r3, [r3, #0]
 8102958:	4a1b      	ldr	r2, [pc, #108]	; (81029c8 <HAL_DMA_IRQHandler+0x424>)
 810295a:	4293      	cmp	r3, r2
 810295c:	d013      	beq.n	8102986 <HAL_DMA_IRQHandler+0x3e2>
 810295e:	687b      	ldr	r3, [r7, #4]
 8102960:	681b      	ldr	r3, [r3, #0]
 8102962:	4a1a      	ldr	r2, [pc, #104]	; (81029cc <HAL_DMA_IRQHandler+0x428>)
 8102964:	4293      	cmp	r3, r2
 8102966:	d00e      	beq.n	8102986 <HAL_DMA_IRQHandler+0x3e2>
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	681b      	ldr	r3, [r3, #0]
 810296c:	4a18      	ldr	r2, [pc, #96]	; (81029d0 <HAL_DMA_IRQHandler+0x42c>)
 810296e:	4293      	cmp	r3, r2
 8102970:	d009      	beq.n	8102986 <HAL_DMA_IRQHandler+0x3e2>
 8102972:	687b      	ldr	r3, [r7, #4]
 8102974:	681b      	ldr	r3, [r3, #0]
 8102976:	4a17      	ldr	r2, [pc, #92]	; (81029d4 <HAL_DMA_IRQHandler+0x430>)
 8102978:	4293      	cmp	r3, r2
 810297a:	d004      	beq.n	8102986 <HAL_DMA_IRQHandler+0x3e2>
 810297c:	687b      	ldr	r3, [r7, #4]
 810297e:	681b      	ldr	r3, [r3, #0]
 8102980:	4a15      	ldr	r2, [pc, #84]	; (81029d8 <HAL_DMA_IRQHandler+0x434>)
 8102982:	4293      	cmp	r3, r2
 8102984:	d12a      	bne.n	81029dc <HAL_DMA_IRQHandler+0x438>
 8102986:	687b      	ldr	r3, [r7, #4]
 8102988:	681b      	ldr	r3, [r3, #0]
 810298a:	681b      	ldr	r3, [r3, #0]
 810298c:	f003 0302 	and.w	r3, r3, #2
 8102990:	2b00      	cmp	r3, #0
 8102992:	bf14      	ite	ne
 8102994:	2301      	movne	r3, #1
 8102996:	2300      	moveq	r3, #0
 8102998:	b2db      	uxtb	r3, r3
 810299a:	e023      	b.n	81029e4 <HAL_DMA_IRQHandler+0x440>
 810299c:	40020010 	.word	0x40020010
 81029a0:	40020028 	.word	0x40020028
 81029a4:	40020040 	.word	0x40020040
 81029a8:	40020058 	.word	0x40020058
 81029ac:	40020070 	.word	0x40020070
 81029b0:	40020088 	.word	0x40020088
 81029b4:	400200a0 	.word	0x400200a0
 81029b8:	400200b8 	.word	0x400200b8
 81029bc:	40020410 	.word	0x40020410
 81029c0:	40020428 	.word	0x40020428
 81029c4:	40020440 	.word	0x40020440
 81029c8:	40020458 	.word	0x40020458
 81029cc:	40020470 	.word	0x40020470
 81029d0:	40020488 	.word	0x40020488
 81029d4:	400204a0 	.word	0x400204a0
 81029d8:	400204b8 	.word	0x400204b8
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	681b      	ldr	r3, [r3, #0]
 81029e0:	681b      	ldr	r3, [r3, #0]
 81029e2:	2300      	movs	r3, #0
 81029e4:	2b00      	cmp	r3, #0
 81029e6:	d00d      	beq.n	8102a04 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81029e8:	687b      	ldr	r3, [r7, #4]
 81029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81029ec:	f003 031f 	and.w	r3, r3, #31
 81029f0:	2204      	movs	r2, #4
 81029f2:	409a      	lsls	r2, r3
 81029f4:	6a3b      	ldr	r3, [r7, #32]
 81029f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 81029f8:	687b      	ldr	r3, [r7, #4]
 81029fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81029fc:	f043 0204 	orr.w	r2, r3, #4
 8102a00:	687b      	ldr	r3, [r7, #4]
 8102a02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102a04:	687b      	ldr	r3, [r7, #4]
 8102a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102a08:	f003 031f 	and.w	r3, r3, #31
 8102a0c:	2210      	movs	r2, #16
 8102a0e:	409a      	lsls	r2, r3
 8102a10:	69bb      	ldr	r3, [r7, #24]
 8102a12:	4013      	ands	r3, r2
 8102a14:	2b00      	cmp	r3, #0
 8102a16:	f000 80a6 	beq.w	8102b66 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8102a1a:	687b      	ldr	r3, [r7, #4]
 8102a1c:	681b      	ldr	r3, [r3, #0]
 8102a1e:	4a85      	ldr	r2, [pc, #532]	; (8102c34 <HAL_DMA_IRQHandler+0x690>)
 8102a20:	4293      	cmp	r3, r2
 8102a22:	d04a      	beq.n	8102aba <HAL_DMA_IRQHandler+0x516>
 8102a24:	687b      	ldr	r3, [r7, #4]
 8102a26:	681b      	ldr	r3, [r3, #0]
 8102a28:	4a83      	ldr	r2, [pc, #524]	; (8102c38 <HAL_DMA_IRQHandler+0x694>)
 8102a2a:	4293      	cmp	r3, r2
 8102a2c:	d045      	beq.n	8102aba <HAL_DMA_IRQHandler+0x516>
 8102a2e:	687b      	ldr	r3, [r7, #4]
 8102a30:	681b      	ldr	r3, [r3, #0]
 8102a32:	4a82      	ldr	r2, [pc, #520]	; (8102c3c <HAL_DMA_IRQHandler+0x698>)
 8102a34:	4293      	cmp	r3, r2
 8102a36:	d040      	beq.n	8102aba <HAL_DMA_IRQHandler+0x516>
 8102a38:	687b      	ldr	r3, [r7, #4]
 8102a3a:	681b      	ldr	r3, [r3, #0]
 8102a3c:	4a80      	ldr	r2, [pc, #512]	; (8102c40 <HAL_DMA_IRQHandler+0x69c>)
 8102a3e:	4293      	cmp	r3, r2
 8102a40:	d03b      	beq.n	8102aba <HAL_DMA_IRQHandler+0x516>
 8102a42:	687b      	ldr	r3, [r7, #4]
 8102a44:	681b      	ldr	r3, [r3, #0]
 8102a46:	4a7f      	ldr	r2, [pc, #508]	; (8102c44 <HAL_DMA_IRQHandler+0x6a0>)
 8102a48:	4293      	cmp	r3, r2
 8102a4a:	d036      	beq.n	8102aba <HAL_DMA_IRQHandler+0x516>
 8102a4c:	687b      	ldr	r3, [r7, #4]
 8102a4e:	681b      	ldr	r3, [r3, #0]
 8102a50:	4a7d      	ldr	r2, [pc, #500]	; (8102c48 <HAL_DMA_IRQHandler+0x6a4>)
 8102a52:	4293      	cmp	r3, r2
 8102a54:	d031      	beq.n	8102aba <HAL_DMA_IRQHandler+0x516>
 8102a56:	687b      	ldr	r3, [r7, #4]
 8102a58:	681b      	ldr	r3, [r3, #0]
 8102a5a:	4a7c      	ldr	r2, [pc, #496]	; (8102c4c <HAL_DMA_IRQHandler+0x6a8>)
 8102a5c:	4293      	cmp	r3, r2
 8102a5e:	d02c      	beq.n	8102aba <HAL_DMA_IRQHandler+0x516>
 8102a60:	687b      	ldr	r3, [r7, #4]
 8102a62:	681b      	ldr	r3, [r3, #0]
 8102a64:	4a7a      	ldr	r2, [pc, #488]	; (8102c50 <HAL_DMA_IRQHandler+0x6ac>)
 8102a66:	4293      	cmp	r3, r2
 8102a68:	d027      	beq.n	8102aba <HAL_DMA_IRQHandler+0x516>
 8102a6a:	687b      	ldr	r3, [r7, #4]
 8102a6c:	681b      	ldr	r3, [r3, #0]
 8102a6e:	4a79      	ldr	r2, [pc, #484]	; (8102c54 <HAL_DMA_IRQHandler+0x6b0>)
 8102a70:	4293      	cmp	r3, r2
 8102a72:	d022      	beq.n	8102aba <HAL_DMA_IRQHandler+0x516>
 8102a74:	687b      	ldr	r3, [r7, #4]
 8102a76:	681b      	ldr	r3, [r3, #0]
 8102a78:	4a77      	ldr	r2, [pc, #476]	; (8102c58 <HAL_DMA_IRQHandler+0x6b4>)
 8102a7a:	4293      	cmp	r3, r2
 8102a7c:	d01d      	beq.n	8102aba <HAL_DMA_IRQHandler+0x516>
 8102a7e:	687b      	ldr	r3, [r7, #4]
 8102a80:	681b      	ldr	r3, [r3, #0]
 8102a82:	4a76      	ldr	r2, [pc, #472]	; (8102c5c <HAL_DMA_IRQHandler+0x6b8>)
 8102a84:	4293      	cmp	r3, r2
 8102a86:	d018      	beq.n	8102aba <HAL_DMA_IRQHandler+0x516>
 8102a88:	687b      	ldr	r3, [r7, #4]
 8102a8a:	681b      	ldr	r3, [r3, #0]
 8102a8c:	4a74      	ldr	r2, [pc, #464]	; (8102c60 <HAL_DMA_IRQHandler+0x6bc>)
 8102a8e:	4293      	cmp	r3, r2
 8102a90:	d013      	beq.n	8102aba <HAL_DMA_IRQHandler+0x516>
 8102a92:	687b      	ldr	r3, [r7, #4]
 8102a94:	681b      	ldr	r3, [r3, #0]
 8102a96:	4a73      	ldr	r2, [pc, #460]	; (8102c64 <HAL_DMA_IRQHandler+0x6c0>)
 8102a98:	4293      	cmp	r3, r2
 8102a9a:	d00e      	beq.n	8102aba <HAL_DMA_IRQHandler+0x516>
 8102a9c:	687b      	ldr	r3, [r7, #4]
 8102a9e:	681b      	ldr	r3, [r3, #0]
 8102aa0:	4a71      	ldr	r2, [pc, #452]	; (8102c68 <HAL_DMA_IRQHandler+0x6c4>)
 8102aa2:	4293      	cmp	r3, r2
 8102aa4:	d009      	beq.n	8102aba <HAL_DMA_IRQHandler+0x516>
 8102aa6:	687b      	ldr	r3, [r7, #4]
 8102aa8:	681b      	ldr	r3, [r3, #0]
 8102aaa:	4a70      	ldr	r2, [pc, #448]	; (8102c6c <HAL_DMA_IRQHandler+0x6c8>)
 8102aac:	4293      	cmp	r3, r2
 8102aae:	d004      	beq.n	8102aba <HAL_DMA_IRQHandler+0x516>
 8102ab0:	687b      	ldr	r3, [r7, #4]
 8102ab2:	681b      	ldr	r3, [r3, #0]
 8102ab4:	4a6e      	ldr	r2, [pc, #440]	; (8102c70 <HAL_DMA_IRQHandler+0x6cc>)
 8102ab6:	4293      	cmp	r3, r2
 8102ab8:	d10a      	bne.n	8102ad0 <HAL_DMA_IRQHandler+0x52c>
 8102aba:	687b      	ldr	r3, [r7, #4]
 8102abc:	681b      	ldr	r3, [r3, #0]
 8102abe:	681b      	ldr	r3, [r3, #0]
 8102ac0:	f003 0308 	and.w	r3, r3, #8
 8102ac4:	2b00      	cmp	r3, #0
 8102ac6:	bf14      	ite	ne
 8102ac8:	2301      	movne	r3, #1
 8102aca:	2300      	moveq	r3, #0
 8102acc:	b2db      	uxtb	r3, r3
 8102ace:	e009      	b.n	8102ae4 <HAL_DMA_IRQHandler+0x540>
 8102ad0:	687b      	ldr	r3, [r7, #4]
 8102ad2:	681b      	ldr	r3, [r3, #0]
 8102ad4:	681b      	ldr	r3, [r3, #0]
 8102ad6:	f003 0304 	and.w	r3, r3, #4
 8102ada:	2b00      	cmp	r3, #0
 8102adc:	bf14      	ite	ne
 8102ade:	2301      	movne	r3, #1
 8102ae0:	2300      	moveq	r3, #0
 8102ae2:	b2db      	uxtb	r3, r3
 8102ae4:	2b00      	cmp	r3, #0
 8102ae6:	d03e      	beq.n	8102b66 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102ae8:	687b      	ldr	r3, [r7, #4]
 8102aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102aec:	f003 031f 	and.w	r3, r3, #31
 8102af0:	2210      	movs	r2, #16
 8102af2:	409a      	lsls	r2, r3
 8102af4:	6a3b      	ldr	r3, [r7, #32]
 8102af6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8102af8:	687b      	ldr	r3, [r7, #4]
 8102afa:	681b      	ldr	r3, [r3, #0]
 8102afc:	681b      	ldr	r3, [r3, #0]
 8102afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102b02:	2b00      	cmp	r3, #0
 8102b04:	d018      	beq.n	8102b38 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8102b06:	687b      	ldr	r3, [r7, #4]
 8102b08:	681b      	ldr	r3, [r3, #0]
 8102b0a:	681b      	ldr	r3, [r3, #0]
 8102b0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102b10:	2b00      	cmp	r3, #0
 8102b12:	d108      	bne.n	8102b26 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8102b14:	687b      	ldr	r3, [r7, #4]
 8102b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102b18:	2b00      	cmp	r3, #0
 8102b1a:	d024      	beq.n	8102b66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8102b1c:	687b      	ldr	r3, [r7, #4]
 8102b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102b20:	6878      	ldr	r0, [r7, #4]
 8102b22:	4798      	blx	r3
 8102b24:	e01f      	b.n	8102b66 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8102b26:	687b      	ldr	r3, [r7, #4]
 8102b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102b2a:	2b00      	cmp	r3, #0
 8102b2c:	d01b      	beq.n	8102b66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8102b2e:	687b      	ldr	r3, [r7, #4]
 8102b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102b32:	6878      	ldr	r0, [r7, #4]
 8102b34:	4798      	blx	r3
 8102b36:	e016      	b.n	8102b66 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8102b38:	687b      	ldr	r3, [r7, #4]
 8102b3a:	681b      	ldr	r3, [r3, #0]
 8102b3c:	681b      	ldr	r3, [r3, #0]
 8102b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102b42:	2b00      	cmp	r3, #0
 8102b44:	d107      	bne.n	8102b56 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8102b46:	687b      	ldr	r3, [r7, #4]
 8102b48:	681b      	ldr	r3, [r3, #0]
 8102b4a:	681a      	ldr	r2, [r3, #0]
 8102b4c:	687b      	ldr	r3, [r7, #4]
 8102b4e:	681b      	ldr	r3, [r3, #0]
 8102b50:	f022 0208 	bic.w	r2, r2, #8
 8102b54:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8102b56:	687b      	ldr	r3, [r7, #4]
 8102b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102b5a:	2b00      	cmp	r3, #0
 8102b5c:	d003      	beq.n	8102b66 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8102b5e:	687b      	ldr	r3, [r7, #4]
 8102b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102b62:	6878      	ldr	r0, [r7, #4]
 8102b64:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102b66:	687b      	ldr	r3, [r7, #4]
 8102b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102b6a:	f003 031f 	and.w	r3, r3, #31
 8102b6e:	2220      	movs	r2, #32
 8102b70:	409a      	lsls	r2, r3
 8102b72:	69bb      	ldr	r3, [r7, #24]
 8102b74:	4013      	ands	r3, r2
 8102b76:	2b00      	cmp	r3, #0
 8102b78:	f000 8110 	beq.w	8102d9c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8102b7c:	687b      	ldr	r3, [r7, #4]
 8102b7e:	681b      	ldr	r3, [r3, #0]
 8102b80:	4a2c      	ldr	r2, [pc, #176]	; (8102c34 <HAL_DMA_IRQHandler+0x690>)
 8102b82:	4293      	cmp	r3, r2
 8102b84:	d04a      	beq.n	8102c1c <HAL_DMA_IRQHandler+0x678>
 8102b86:	687b      	ldr	r3, [r7, #4]
 8102b88:	681b      	ldr	r3, [r3, #0]
 8102b8a:	4a2b      	ldr	r2, [pc, #172]	; (8102c38 <HAL_DMA_IRQHandler+0x694>)
 8102b8c:	4293      	cmp	r3, r2
 8102b8e:	d045      	beq.n	8102c1c <HAL_DMA_IRQHandler+0x678>
 8102b90:	687b      	ldr	r3, [r7, #4]
 8102b92:	681b      	ldr	r3, [r3, #0]
 8102b94:	4a29      	ldr	r2, [pc, #164]	; (8102c3c <HAL_DMA_IRQHandler+0x698>)
 8102b96:	4293      	cmp	r3, r2
 8102b98:	d040      	beq.n	8102c1c <HAL_DMA_IRQHandler+0x678>
 8102b9a:	687b      	ldr	r3, [r7, #4]
 8102b9c:	681b      	ldr	r3, [r3, #0]
 8102b9e:	4a28      	ldr	r2, [pc, #160]	; (8102c40 <HAL_DMA_IRQHandler+0x69c>)
 8102ba0:	4293      	cmp	r3, r2
 8102ba2:	d03b      	beq.n	8102c1c <HAL_DMA_IRQHandler+0x678>
 8102ba4:	687b      	ldr	r3, [r7, #4]
 8102ba6:	681b      	ldr	r3, [r3, #0]
 8102ba8:	4a26      	ldr	r2, [pc, #152]	; (8102c44 <HAL_DMA_IRQHandler+0x6a0>)
 8102baa:	4293      	cmp	r3, r2
 8102bac:	d036      	beq.n	8102c1c <HAL_DMA_IRQHandler+0x678>
 8102bae:	687b      	ldr	r3, [r7, #4]
 8102bb0:	681b      	ldr	r3, [r3, #0]
 8102bb2:	4a25      	ldr	r2, [pc, #148]	; (8102c48 <HAL_DMA_IRQHandler+0x6a4>)
 8102bb4:	4293      	cmp	r3, r2
 8102bb6:	d031      	beq.n	8102c1c <HAL_DMA_IRQHandler+0x678>
 8102bb8:	687b      	ldr	r3, [r7, #4]
 8102bba:	681b      	ldr	r3, [r3, #0]
 8102bbc:	4a23      	ldr	r2, [pc, #140]	; (8102c4c <HAL_DMA_IRQHandler+0x6a8>)
 8102bbe:	4293      	cmp	r3, r2
 8102bc0:	d02c      	beq.n	8102c1c <HAL_DMA_IRQHandler+0x678>
 8102bc2:	687b      	ldr	r3, [r7, #4]
 8102bc4:	681b      	ldr	r3, [r3, #0]
 8102bc6:	4a22      	ldr	r2, [pc, #136]	; (8102c50 <HAL_DMA_IRQHandler+0x6ac>)
 8102bc8:	4293      	cmp	r3, r2
 8102bca:	d027      	beq.n	8102c1c <HAL_DMA_IRQHandler+0x678>
 8102bcc:	687b      	ldr	r3, [r7, #4]
 8102bce:	681b      	ldr	r3, [r3, #0]
 8102bd0:	4a20      	ldr	r2, [pc, #128]	; (8102c54 <HAL_DMA_IRQHandler+0x6b0>)
 8102bd2:	4293      	cmp	r3, r2
 8102bd4:	d022      	beq.n	8102c1c <HAL_DMA_IRQHandler+0x678>
 8102bd6:	687b      	ldr	r3, [r7, #4]
 8102bd8:	681b      	ldr	r3, [r3, #0]
 8102bda:	4a1f      	ldr	r2, [pc, #124]	; (8102c58 <HAL_DMA_IRQHandler+0x6b4>)
 8102bdc:	4293      	cmp	r3, r2
 8102bde:	d01d      	beq.n	8102c1c <HAL_DMA_IRQHandler+0x678>
 8102be0:	687b      	ldr	r3, [r7, #4]
 8102be2:	681b      	ldr	r3, [r3, #0]
 8102be4:	4a1d      	ldr	r2, [pc, #116]	; (8102c5c <HAL_DMA_IRQHandler+0x6b8>)
 8102be6:	4293      	cmp	r3, r2
 8102be8:	d018      	beq.n	8102c1c <HAL_DMA_IRQHandler+0x678>
 8102bea:	687b      	ldr	r3, [r7, #4]
 8102bec:	681b      	ldr	r3, [r3, #0]
 8102bee:	4a1c      	ldr	r2, [pc, #112]	; (8102c60 <HAL_DMA_IRQHandler+0x6bc>)
 8102bf0:	4293      	cmp	r3, r2
 8102bf2:	d013      	beq.n	8102c1c <HAL_DMA_IRQHandler+0x678>
 8102bf4:	687b      	ldr	r3, [r7, #4]
 8102bf6:	681b      	ldr	r3, [r3, #0]
 8102bf8:	4a1a      	ldr	r2, [pc, #104]	; (8102c64 <HAL_DMA_IRQHandler+0x6c0>)
 8102bfa:	4293      	cmp	r3, r2
 8102bfc:	d00e      	beq.n	8102c1c <HAL_DMA_IRQHandler+0x678>
 8102bfe:	687b      	ldr	r3, [r7, #4]
 8102c00:	681b      	ldr	r3, [r3, #0]
 8102c02:	4a19      	ldr	r2, [pc, #100]	; (8102c68 <HAL_DMA_IRQHandler+0x6c4>)
 8102c04:	4293      	cmp	r3, r2
 8102c06:	d009      	beq.n	8102c1c <HAL_DMA_IRQHandler+0x678>
 8102c08:	687b      	ldr	r3, [r7, #4]
 8102c0a:	681b      	ldr	r3, [r3, #0]
 8102c0c:	4a17      	ldr	r2, [pc, #92]	; (8102c6c <HAL_DMA_IRQHandler+0x6c8>)
 8102c0e:	4293      	cmp	r3, r2
 8102c10:	d004      	beq.n	8102c1c <HAL_DMA_IRQHandler+0x678>
 8102c12:	687b      	ldr	r3, [r7, #4]
 8102c14:	681b      	ldr	r3, [r3, #0]
 8102c16:	4a16      	ldr	r2, [pc, #88]	; (8102c70 <HAL_DMA_IRQHandler+0x6cc>)
 8102c18:	4293      	cmp	r3, r2
 8102c1a:	d12b      	bne.n	8102c74 <HAL_DMA_IRQHandler+0x6d0>
 8102c1c:	687b      	ldr	r3, [r7, #4]
 8102c1e:	681b      	ldr	r3, [r3, #0]
 8102c20:	681b      	ldr	r3, [r3, #0]
 8102c22:	f003 0310 	and.w	r3, r3, #16
 8102c26:	2b00      	cmp	r3, #0
 8102c28:	bf14      	ite	ne
 8102c2a:	2301      	movne	r3, #1
 8102c2c:	2300      	moveq	r3, #0
 8102c2e:	b2db      	uxtb	r3, r3
 8102c30:	e02a      	b.n	8102c88 <HAL_DMA_IRQHandler+0x6e4>
 8102c32:	bf00      	nop
 8102c34:	40020010 	.word	0x40020010
 8102c38:	40020028 	.word	0x40020028
 8102c3c:	40020040 	.word	0x40020040
 8102c40:	40020058 	.word	0x40020058
 8102c44:	40020070 	.word	0x40020070
 8102c48:	40020088 	.word	0x40020088
 8102c4c:	400200a0 	.word	0x400200a0
 8102c50:	400200b8 	.word	0x400200b8
 8102c54:	40020410 	.word	0x40020410
 8102c58:	40020428 	.word	0x40020428
 8102c5c:	40020440 	.word	0x40020440
 8102c60:	40020458 	.word	0x40020458
 8102c64:	40020470 	.word	0x40020470
 8102c68:	40020488 	.word	0x40020488
 8102c6c:	400204a0 	.word	0x400204a0
 8102c70:	400204b8 	.word	0x400204b8
 8102c74:	687b      	ldr	r3, [r7, #4]
 8102c76:	681b      	ldr	r3, [r3, #0]
 8102c78:	681b      	ldr	r3, [r3, #0]
 8102c7a:	f003 0302 	and.w	r3, r3, #2
 8102c7e:	2b00      	cmp	r3, #0
 8102c80:	bf14      	ite	ne
 8102c82:	2301      	movne	r3, #1
 8102c84:	2300      	moveq	r3, #0
 8102c86:	b2db      	uxtb	r3, r3
 8102c88:	2b00      	cmp	r3, #0
 8102c8a:	f000 8087 	beq.w	8102d9c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102c8e:	687b      	ldr	r3, [r7, #4]
 8102c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102c92:	f003 031f 	and.w	r3, r3, #31
 8102c96:	2220      	movs	r2, #32
 8102c98:	409a      	lsls	r2, r3
 8102c9a:	6a3b      	ldr	r3, [r7, #32]
 8102c9c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8102c9e:	687b      	ldr	r3, [r7, #4]
 8102ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102ca4:	b2db      	uxtb	r3, r3
 8102ca6:	2b04      	cmp	r3, #4
 8102ca8:	d139      	bne.n	8102d1e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8102caa:	687b      	ldr	r3, [r7, #4]
 8102cac:	681b      	ldr	r3, [r3, #0]
 8102cae:	681a      	ldr	r2, [r3, #0]
 8102cb0:	687b      	ldr	r3, [r7, #4]
 8102cb2:	681b      	ldr	r3, [r3, #0]
 8102cb4:	f022 0216 	bic.w	r2, r2, #22
 8102cb8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102cba:	687b      	ldr	r3, [r7, #4]
 8102cbc:	681b      	ldr	r3, [r3, #0]
 8102cbe:	695a      	ldr	r2, [r3, #20]
 8102cc0:	687b      	ldr	r3, [r7, #4]
 8102cc2:	681b      	ldr	r3, [r3, #0]
 8102cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8102cc8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8102cca:	687b      	ldr	r3, [r7, #4]
 8102ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102cce:	2b00      	cmp	r3, #0
 8102cd0:	d103      	bne.n	8102cda <HAL_DMA_IRQHandler+0x736>
 8102cd2:	687b      	ldr	r3, [r7, #4]
 8102cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102cd6:	2b00      	cmp	r3, #0
 8102cd8:	d007      	beq.n	8102cea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8102cda:	687b      	ldr	r3, [r7, #4]
 8102cdc:	681b      	ldr	r3, [r3, #0]
 8102cde:	681a      	ldr	r2, [r3, #0]
 8102ce0:	687b      	ldr	r3, [r7, #4]
 8102ce2:	681b      	ldr	r3, [r3, #0]
 8102ce4:	f022 0208 	bic.w	r2, r2, #8
 8102ce8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102cea:	687b      	ldr	r3, [r7, #4]
 8102cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102cee:	f003 031f 	and.w	r3, r3, #31
 8102cf2:	223f      	movs	r2, #63	; 0x3f
 8102cf4:	409a      	lsls	r2, r3
 8102cf6:	6a3b      	ldr	r3, [r7, #32]
 8102cf8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8102cfa:	687b      	ldr	r3, [r7, #4]
 8102cfc:	2201      	movs	r2, #1
 8102cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8102d02:	687b      	ldr	r3, [r7, #4]
 8102d04:	2200      	movs	r2, #0
 8102d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8102d0a:	687b      	ldr	r3, [r7, #4]
 8102d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102d0e:	2b00      	cmp	r3, #0
 8102d10:	f000 834a 	beq.w	81033a8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8102d14:	687b      	ldr	r3, [r7, #4]
 8102d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102d18:	6878      	ldr	r0, [r7, #4]
 8102d1a:	4798      	blx	r3
          }
          return;
 8102d1c:	e344      	b.n	81033a8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8102d1e:	687b      	ldr	r3, [r7, #4]
 8102d20:	681b      	ldr	r3, [r3, #0]
 8102d22:	681b      	ldr	r3, [r3, #0]
 8102d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102d28:	2b00      	cmp	r3, #0
 8102d2a:	d018      	beq.n	8102d5e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8102d2c:	687b      	ldr	r3, [r7, #4]
 8102d2e:	681b      	ldr	r3, [r3, #0]
 8102d30:	681b      	ldr	r3, [r3, #0]
 8102d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102d36:	2b00      	cmp	r3, #0
 8102d38:	d108      	bne.n	8102d4c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8102d3a:	687b      	ldr	r3, [r7, #4]
 8102d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102d3e:	2b00      	cmp	r3, #0
 8102d40:	d02c      	beq.n	8102d9c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8102d42:	687b      	ldr	r3, [r7, #4]
 8102d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102d46:	6878      	ldr	r0, [r7, #4]
 8102d48:	4798      	blx	r3
 8102d4a:	e027      	b.n	8102d9c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8102d4c:	687b      	ldr	r3, [r7, #4]
 8102d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102d50:	2b00      	cmp	r3, #0
 8102d52:	d023      	beq.n	8102d9c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8102d54:	687b      	ldr	r3, [r7, #4]
 8102d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102d58:	6878      	ldr	r0, [r7, #4]
 8102d5a:	4798      	blx	r3
 8102d5c:	e01e      	b.n	8102d9c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8102d5e:	687b      	ldr	r3, [r7, #4]
 8102d60:	681b      	ldr	r3, [r3, #0]
 8102d62:	681b      	ldr	r3, [r3, #0]
 8102d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102d68:	2b00      	cmp	r3, #0
 8102d6a:	d10f      	bne.n	8102d8c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8102d6c:	687b      	ldr	r3, [r7, #4]
 8102d6e:	681b      	ldr	r3, [r3, #0]
 8102d70:	681a      	ldr	r2, [r3, #0]
 8102d72:	687b      	ldr	r3, [r7, #4]
 8102d74:	681b      	ldr	r3, [r3, #0]
 8102d76:	f022 0210 	bic.w	r2, r2, #16
 8102d7a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8102d7c:	687b      	ldr	r3, [r7, #4]
 8102d7e:	2201      	movs	r2, #1
 8102d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8102d84:	687b      	ldr	r3, [r7, #4]
 8102d86:	2200      	movs	r2, #0
 8102d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8102d8c:	687b      	ldr	r3, [r7, #4]
 8102d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102d90:	2b00      	cmp	r3, #0
 8102d92:	d003      	beq.n	8102d9c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8102d94:	687b      	ldr	r3, [r7, #4]
 8102d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102d98:	6878      	ldr	r0, [r7, #4]
 8102d9a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8102d9c:	687b      	ldr	r3, [r7, #4]
 8102d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102da0:	2b00      	cmp	r3, #0
 8102da2:	f000 8306 	beq.w	81033b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8102da6:	687b      	ldr	r3, [r7, #4]
 8102da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102daa:	f003 0301 	and.w	r3, r3, #1
 8102dae:	2b00      	cmp	r3, #0
 8102db0:	f000 8088 	beq.w	8102ec4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8102db4:	687b      	ldr	r3, [r7, #4]
 8102db6:	2204      	movs	r2, #4
 8102db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8102dbc:	687b      	ldr	r3, [r7, #4]
 8102dbe:	681b      	ldr	r3, [r3, #0]
 8102dc0:	4a7a      	ldr	r2, [pc, #488]	; (8102fac <HAL_DMA_IRQHandler+0xa08>)
 8102dc2:	4293      	cmp	r3, r2
 8102dc4:	d04a      	beq.n	8102e5c <HAL_DMA_IRQHandler+0x8b8>
 8102dc6:	687b      	ldr	r3, [r7, #4]
 8102dc8:	681b      	ldr	r3, [r3, #0]
 8102dca:	4a79      	ldr	r2, [pc, #484]	; (8102fb0 <HAL_DMA_IRQHandler+0xa0c>)
 8102dcc:	4293      	cmp	r3, r2
 8102dce:	d045      	beq.n	8102e5c <HAL_DMA_IRQHandler+0x8b8>
 8102dd0:	687b      	ldr	r3, [r7, #4]
 8102dd2:	681b      	ldr	r3, [r3, #0]
 8102dd4:	4a77      	ldr	r2, [pc, #476]	; (8102fb4 <HAL_DMA_IRQHandler+0xa10>)
 8102dd6:	4293      	cmp	r3, r2
 8102dd8:	d040      	beq.n	8102e5c <HAL_DMA_IRQHandler+0x8b8>
 8102dda:	687b      	ldr	r3, [r7, #4]
 8102ddc:	681b      	ldr	r3, [r3, #0]
 8102dde:	4a76      	ldr	r2, [pc, #472]	; (8102fb8 <HAL_DMA_IRQHandler+0xa14>)
 8102de0:	4293      	cmp	r3, r2
 8102de2:	d03b      	beq.n	8102e5c <HAL_DMA_IRQHandler+0x8b8>
 8102de4:	687b      	ldr	r3, [r7, #4]
 8102de6:	681b      	ldr	r3, [r3, #0]
 8102de8:	4a74      	ldr	r2, [pc, #464]	; (8102fbc <HAL_DMA_IRQHandler+0xa18>)
 8102dea:	4293      	cmp	r3, r2
 8102dec:	d036      	beq.n	8102e5c <HAL_DMA_IRQHandler+0x8b8>
 8102dee:	687b      	ldr	r3, [r7, #4]
 8102df0:	681b      	ldr	r3, [r3, #0]
 8102df2:	4a73      	ldr	r2, [pc, #460]	; (8102fc0 <HAL_DMA_IRQHandler+0xa1c>)
 8102df4:	4293      	cmp	r3, r2
 8102df6:	d031      	beq.n	8102e5c <HAL_DMA_IRQHandler+0x8b8>
 8102df8:	687b      	ldr	r3, [r7, #4]
 8102dfa:	681b      	ldr	r3, [r3, #0]
 8102dfc:	4a71      	ldr	r2, [pc, #452]	; (8102fc4 <HAL_DMA_IRQHandler+0xa20>)
 8102dfe:	4293      	cmp	r3, r2
 8102e00:	d02c      	beq.n	8102e5c <HAL_DMA_IRQHandler+0x8b8>
 8102e02:	687b      	ldr	r3, [r7, #4]
 8102e04:	681b      	ldr	r3, [r3, #0]
 8102e06:	4a70      	ldr	r2, [pc, #448]	; (8102fc8 <HAL_DMA_IRQHandler+0xa24>)
 8102e08:	4293      	cmp	r3, r2
 8102e0a:	d027      	beq.n	8102e5c <HAL_DMA_IRQHandler+0x8b8>
 8102e0c:	687b      	ldr	r3, [r7, #4]
 8102e0e:	681b      	ldr	r3, [r3, #0]
 8102e10:	4a6e      	ldr	r2, [pc, #440]	; (8102fcc <HAL_DMA_IRQHandler+0xa28>)
 8102e12:	4293      	cmp	r3, r2
 8102e14:	d022      	beq.n	8102e5c <HAL_DMA_IRQHandler+0x8b8>
 8102e16:	687b      	ldr	r3, [r7, #4]
 8102e18:	681b      	ldr	r3, [r3, #0]
 8102e1a:	4a6d      	ldr	r2, [pc, #436]	; (8102fd0 <HAL_DMA_IRQHandler+0xa2c>)
 8102e1c:	4293      	cmp	r3, r2
 8102e1e:	d01d      	beq.n	8102e5c <HAL_DMA_IRQHandler+0x8b8>
 8102e20:	687b      	ldr	r3, [r7, #4]
 8102e22:	681b      	ldr	r3, [r3, #0]
 8102e24:	4a6b      	ldr	r2, [pc, #428]	; (8102fd4 <HAL_DMA_IRQHandler+0xa30>)
 8102e26:	4293      	cmp	r3, r2
 8102e28:	d018      	beq.n	8102e5c <HAL_DMA_IRQHandler+0x8b8>
 8102e2a:	687b      	ldr	r3, [r7, #4]
 8102e2c:	681b      	ldr	r3, [r3, #0]
 8102e2e:	4a6a      	ldr	r2, [pc, #424]	; (8102fd8 <HAL_DMA_IRQHandler+0xa34>)
 8102e30:	4293      	cmp	r3, r2
 8102e32:	d013      	beq.n	8102e5c <HAL_DMA_IRQHandler+0x8b8>
 8102e34:	687b      	ldr	r3, [r7, #4]
 8102e36:	681b      	ldr	r3, [r3, #0]
 8102e38:	4a68      	ldr	r2, [pc, #416]	; (8102fdc <HAL_DMA_IRQHandler+0xa38>)
 8102e3a:	4293      	cmp	r3, r2
 8102e3c:	d00e      	beq.n	8102e5c <HAL_DMA_IRQHandler+0x8b8>
 8102e3e:	687b      	ldr	r3, [r7, #4]
 8102e40:	681b      	ldr	r3, [r3, #0]
 8102e42:	4a67      	ldr	r2, [pc, #412]	; (8102fe0 <HAL_DMA_IRQHandler+0xa3c>)
 8102e44:	4293      	cmp	r3, r2
 8102e46:	d009      	beq.n	8102e5c <HAL_DMA_IRQHandler+0x8b8>
 8102e48:	687b      	ldr	r3, [r7, #4]
 8102e4a:	681b      	ldr	r3, [r3, #0]
 8102e4c:	4a65      	ldr	r2, [pc, #404]	; (8102fe4 <HAL_DMA_IRQHandler+0xa40>)
 8102e4e:	4293      	cmp	r3, r2
 8102e50:	d004      	beq.n	8102e5c <HAL_DMA_IRQHandler+0x8b8>
 8102e52:	687b      	ldr	r3, [r7, #4]
 8102e54:	681b      	ldr	r3, [r3, #0]
 8102e56:	4a64      	ldr	r2, [pc, #400]	; (8102fe8 <HAL_DMA_IRQHandler+0xa44>)
 8102e58:	4293      	cmp	r3, r2
 8102e5a:	d108      	bne.n	8102e6e <HAL_DMA_IRQHandler+0x8ca>
 8102e5c:	687b      	ldr	r3, [r7, #4]
 8102e5e:	681b      	ldr	r3, [r3, #0]
 8102e60:	681a      	ldr	r2, [r3, #0]
 8102e62:	687b      	ldr	r3, [r7, #4]
 8102e64:	681b      	ldr	r3, [r3, #0]
 8102e66:	f022 0201 	bic.w	r2, r2, #1
 8102e6a:	601a      	str	r2, [r3, #0]
 8102e6c:	e007      	b.n	8102e7e <HAL_DMA_IRQHandler+0x8da>
 8102e6e:	687b      	ldr	r3, [r7, #4]
 8102e70:	681b      	ldr	r3, [r3, #0]
 8102e72:	681a      	ldr	r2, [r3, #0]
 8102e74:	687b      	ldr	r3, [r7, #4]
 8102e76:	681b      	ldr	r3, [r3, #0]
 8102e78:	f022 0201 	bic.w	r2, r2, #1
 8102e7c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8102e7e:	68fb      	ldr	r3, [r7, #12]
 8102e80:	3301      	adds	r3, #1
 8102e82:	60fb      	str	r3, [r7, #12]
 8102e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102e86:	429a      	cmp	r2, r3
 8102e88:	d307      	bcc.n	8102e9a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8102e8a:	687b      	ldr	r3, [r7, #4]
 8102e8c:	681b      	ldr	r3, [r3, #0]
 8102e8e:	681b      	ldr	r3, [r3, #0]
 8102e90:	f003 0301 	and.w	r3, r3, #1
 8102e94:	2b00      	cmp	r3, #0
 8102e96:	d1f2      	bne.n	8102e7e <HAL_DMA_IRQHandler+0x8da>
 8102e98:	e000      	b.n	8102e9c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8102e9a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102e9c:	687b      	ldr	r3, [r7, #4]
 8102e9e:	681b      	ldr	r3, [r3, #0]
 8102ea0:	681b      	ldr	r3, [r3, #0]
 8102ea2:	f003 0301 	and.w	r3, r3, #1
 8102ea6:	2b00      	cmp	r3, #0
 8102ea8:	d004      	beq.n	8102eb4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8102eaa:	687b      	ldr	r3, [r7, #4]
 8102eac:	2203      	movs	r2, #3
 8102eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8102eb2:	e003      	b.n	8102ebc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8102eb4:	687b      	ldr	r3, [r7, #4]
 8102eb6:	2201      	movs	r2, #1
 8102eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8102ebc:	687b      	ldr	r3, [r7, #4]
 8102ebe:	2200      	movs	r2, #0
 8102ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8102ec4:	687b      	ldr	r3, [r7, #4]
 8102ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102ec8:	2b00      	cmp	r3, #0
 8102eca:	f000 8272 	beq.w	81033b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8102ece:	687b      	ldr	r3, [r7, #4]
 8102ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102ed2:	6878      	ldr	r0, [r7, #4]
 8102ed4:	4798      	blx	r3
 8102ed6:	e26c      	b.n	81033b2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8102ed8:	687b      	ldr	r3, [r7, #4]
 8102eda:	681b      	ldr	r3, [r3, #0]
 8102edc:	4a43      	ldr	r2, [pc, #268]	; (8102fec <HAL_DMA_IRQHandler+0xa48>)
 8102ede:	4293      	cmp	r3, r2
 8102ee0:	d022      	beq.n	8102f28 <HAL_DMA_IRQHandler+0x984>
 8102ee2:	687b      	ldr	r3, [r7, #4]
 8102ee4:	681b      	ldr	r3, [r3, #0]
 8102ee6:	4a42      	ldr	r2, [pc, #264]	; (8102ff0 <HAL_DMA_IRQHandler+0xa4c>)
 8102ee8:	4293      	cmp	r3, r2
 8102eea:	d01d      	beq.n	8102f28 <HAL_DMA_IRQHandler+0x984>
 8102eec:	687b      	ldr	r3, [r7, #4]
 8102eee:	681b      	ldr	r3, [r3, #0]
 8102ef0:	4a40      	ldr	r2, [pc, #256]	; (8102ff4 <HAL_DMA_IRQHandler+0xa50>)
 8102ef2:	4293      	cmp	r3, r2
 8102ef4:	d018      	beq.n	8102f28 <HAL_DMA_IRQHandler+0x984>
 8102ef6:	687b      	ldr	r3, [r7, #4]
 8102ef8:	681b      	ldr	r3, [r3, #0]
 8102efa:	4a3f      	ldr	r2, [pc, #252]	; (8102ff8 <HAL_DMA_IRQHandler+0xa54>)
 8102efc:	4293      	cmp	r3, r2
 8102efe:	d013      	beq.n	8102f28 <HAL_DMA_IRQHandler+0x984>
 8102f00:	687b      	ldr	r3, [r7, #4]
 8102f02:	681b      	ldr	r3, [r3, #0]
 8102f04:	4a3d      	ldr	r2, [pc, #244]	; (8102ffc <HAL_DMA_IRQHandler+0xa58>)
 8102f06:	4293      	cmp	r3, r2
 8102f08:	d00e      	beq.n	8102f28 <HAL_DMA_IRQHandler+0x984>
 8102f0a:	687b      	ldr	r3, [r7, #4]
 8102f0c:	681b      	ldr	r3, [r3, #0]
 8102f0e:	4a3c      	ldr	r2, [pc, #240]	; (8103000 <HAL_DMA_IRQHandler+0xa5c>)
 8102f10:	4293      	cmp	r3, r2
 8102f12:	d009      	beq.n	8102f28 <HAL_DMA_IRQHandler+0x984>
 8102f14:	687b      	ldr	r3, [r7, #4]
 8102f16:	681b      	ldr	r3, [r3, #0]
 8102f18:	4a3a      	ldr	r2, [pc, #232]	; (8103004 <HAL_DMA_IRQHandler+0xa60>)
 8102f1a:	4293      	cmp	r3, r2
 8102f1c:	d004      	beq.n	8102f28 <HAL_DMA_IRQHandler+0x984>
 8102f1e:	687b      	ldr	r3, [r7, #4]
 8102f20:	681b      	ldr	r3, [r3, #0]
 8102f22:	4a39      	ldr	r2, [pc, #228]	; (8103008 <HAL_DMA_IRQHandler+0xa64>)
 8102f24:	4293      	cmp	r3, r2
 8102f26:	d101      	bne.n	8102f2c <HAL_DMA_IRQHandler+0x988>
 8102f28:	2301      	movs	r3, #1
 8102f2a:	e000      	b.n	8102f2e <HAL_DMA_IRQHandler+0x98a>
 8102f2c:	2300      	movs	r3, #0
 8102f2e:	2b00      	cmp	r3, #0
 8102f30:	f000 823f 	beq.w	81033b2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8102f34:	687b      	ldr	r3, [r7, #4]
 8102f36:	681b      	ldr	r3, [r3, #0]
 8102f38:	681b      	ldr	r3, [r3, #0]
 8102f3a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8102f3c:	687b      	ldr	r3, [r7, #4]
 8102f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102f40:	f003 031f 	and.w	r3, r3, #31
 8102f44:	2204      	movs	r2, #4
 8102f46:	409a      	lsls	r2, r3
 8102f48:	697b      	ldr	r3, [r7, #20]
 8102f4a:	4013      	ands	r3, r2
 8102f4c:	2b00      	cmp	r3, #0
 8102f4e:	f000 80cd 	beq.w	81030ec <HAL_DMA_IRQHandler+0xb48>
 8102f52:	693b      	ldr	r3, [r7, #16]
 8102f54:	f003 0304 	and.w	r3, r3, #4
 8102f58:	2b00      	cmp	r3, #0
 8102f5a:	f000 80c7 	beq.w	81030ec <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8102f5e:	687b      	ldr	r3, [r7, #4]
 8102f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102f62:	f003 031f 	and.w	r3, r3, #31
 8102f66:	2204      	movs	r2, #4
 8102f68:	409a      	lsls	r2, r3
 8102f6a:	69fb      	ldr	r3, [r7, #28]
 8102f6c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102f6e:	693b      	ldr	r3, [r7, #16]
 8102f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102f74:	2b00      	cmp	r3, #0
 8102f76:	d049      	beq.n	810300c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8102f78:	693b      	ldr	r3, [r7, #16]
 8102f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102f7e:	2b00      	cmp	r3, #0
 8102f80:	d109      	bne.n	8102f96 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8102f82:	687b      	ldr	r3, [r7, #4]
 8102f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102f86:	2b00      	cmp	r3, #0
 8102f88:	f000 8210 	beq.w	81033ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8102f8c:	687b      	ldr	r3, [r7, #4]
 8102f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102f90:	6878      	ldr	r0, [r7, #4]
 8102f92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102f94:	e20a      	b.n	81033ac <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8102f96:	687b      	ldr	r3, [r7, #4]
 8102f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102f9a:	2b00      	cmp	r3, #0
 8102f9c:	f000 8206 	beq.w	81033ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8102fa0:	687b      	ldr	r3, [r7, #4]
 8102fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102fa4:	6878      	ldr	r0, [r7, #4]
 8102fa6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102fa8:	e200      	b.n	81033ac <HAL_DMA_IRQHandler+0xe08>
 8102faa:	bf00      	nop
 8102fac:	40020010 	.word	0x40020010
 8102fb0:	40020028 	.word	0x40020028
 8102fb4:	40020040 	.word	0x40020040
 8102fb8:	40020058 	.word	0x40020058
 8102fbc:	40020070 	.word	0x40020070
 8102fc0:	40020088 	.word	0x40020088
 8102fc4:	400200a0 	.word	0x400200a0
 8102fc8:	400200b8 	.word	0x400200b8
 8102fcc:	40020410 	.word	0x40020410
 8102fd0:	40020428 	.word	0x40020428
 8102fd4:	40020440 	.word	0x40020440
 8102fd8:	40020458 	.word	0x40020458
 8102fdc:	40020470 	.word	0x40020470
 8102fe0:	40020488 	.word	0x40020488
 8102fe4:	400204a0 	.word	0x400204a0
 8102fe8:	400204b8 	.word	0x400204b8
 8102fec:	58025408 	.word	0x58025408
 8102ff0:	5802541c 	.word	0x5802541c
 8102ff4:	58025430 	.word	0x58025430
 8102ff8:	58025444 	.word	0x58025444
 8102ffc:	58025458 	.word	0x58025458
 8103000:	5802546c 	.word	0x5802546c
 8103004:	58025480 	.word	0x58025480
 8103008:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810300c:	693b      	ldr	r3, [r7, #16]
 810300e:	f003 0320 	and.w	r3, r3, #32
 8103012:	2b00      	cmp	r3, #0
 8103014:	d160      	bne.n	81030d8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8103016:	687b      	ldr	r3, [r7, #4]
 8103018:	681b      	ldr	r3, [r3, #0]
 810301a:	4a7f      	ldr	r2, [pc, #508]	; (8103218 <HAL_DMA_IRQHandler+0xc74>)
 810301c:	4293      	cmp	r3, r2
 810301e:	d04a      	beq.n	81030b6 <HAL_DMA_IRQHandler+0xb12>
 8103020:	687b      	ldr	r3, [r7, #4]
 8103022:	681b      	ldr	r3, [r3, #0]
 8103024:	4a7d      	ldr	r2, [pc, #500]	; (810321c <HAL_DMA_IRQHandler+0xc78>)
 8103026:	4293      	cmp	r3, r2
 8103028:	d045      	beq.n	81030b6 <HAL_DMA_IRQHandler+0xb12>
 810302a:	687b      	ldr	r3, [r7, #4]
 810302c:	681b      	ldr	r3, [r3, #0]
 810302e:	4a7c      	ldr	r2, [pc, #496]	; (8103220 <HAL_DMA_IRQHandler+0xc7c>)
 8103030:	4293      	cmp	r3, r2
 8103032:	d040      	beq.n	81030b6 <HAL_DMA_IRQHandler+0xb12>
 8103034:	687b      	ldr	r3, [r7, #4]
 8103036:	681b      	ldr	r3, [r3, #0]
 8103038:	4a7a      	ldr	r2, [pc, #488]	; (8103224 <HAL_DMA_IRQHandler+0xc80>)
 810303a:	4293      	cmp	r3, r2
 810303c:	d03b      	beq.n	81030b6 <HAL_DMA_IRQHandler+0xb12>
 810303e:	687b      	ldr	r3, [r7, #4]
 8103040:	681b      	ldr	r3, [r3, #0]
 8103042:	4a79      	ldr	r2, [pc, #484]	; (8103228 <HAL_DMA_IRQHandler+0xc84>)
 8103044:	4293      	cmp	r3, r2
 8103046:	d036      	beq.n	81030b6 <HAL_DMA_IRQHandler+0xb12>
 8103048:	687b      	ldr	r3, [r7, #4]
 810304a:	681b      	ldr	r3, [r3, #0]
 810304c:	4a77      	ldr	r2, [pc, #476]	; (810322c <HAL_DMA_IRQHandler+0xc88>)
 810304e:	4293      	cmp	r3, r2
 8103050:	d031      	beq.n	81030b6 <HAL_DMA_IRQHandler+0xb12>
 8103052:	687b      	ldr	r3, [r7, #4]
 8103054:	681b      	ldr	r3, [r3, #0]
 8103056:	4a76      	ldr	r2, [pc, #472]	; (8103230 <HAL_DMA_IRQHandler+0xc8c>)
 8103058:	4293      	cmp	r3, r2
 810305a:	d02c      	beq.n	81030b6 <HAL_DMA_IRQHandler+0xb12>
 810305c:	687b      	ldr	r3, [r7, #4]
 810305e:	681b      	ldr	r3, [r3, #0]
 8103060:	4a74      	ldr	r2, [pc, #464]	; (8103234 <HAL_DMA_IRQHandler+0xc90>)
 8103062:	4293      	cmp	r3, r2
 8103064:	d027      	beq.n	81030b6 <HAL_DMA_IRQHandler+0xb12>
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	681b      	ldr	r3, [r3, #0]
 810306a:	4a73      	ldr	r2, [pc, #460]	; (8103238 <HAL_DMA_IRQHandler+0xc94>)
 810306c:	4293      	cmp	r3, r2
 810306e:	d022      	beq.n	81030b6 <HAL_DMA_IRQHandler+0xb12>
 8103070:	687b      	ldr	r3, [r7, #4]
 8103072:	681b      	ldr	r3, [r3, #0]
 8103074:	4a71      	ldr	r2, [pc, #452]	; (810323c <HAL_DMA_IRQHandler+0xc98>)
 8103076:	4293      	cmp	r3, r2
 8103078:	d01d      	beq.n	81030b6 <HAL_DMA_IRQHandler+0xb12>
 810307a:	687b      	ldr	r3, [r7, #4]
 810307c:	681b      	ldr	r3, [r3, #0]
 810307e:	4a70      	ldr	r2, [pc, #448]	; (8103240 <HAL_DMA_IRQHandler+0xc9c>)
 8103080:	4293      	cmp	r3, r2
 8103082:	d018      	beq.n	81030b6 <HAL_DMA_IRQHandler+0xb12>
 8103084:	687b      	ldr	r3, [r7, #4]
 8103086:	681b      	ldr	r3, [r3, #0]
 8103088:	4a6e      	ldr	r2, [pc, #440]	; (8103244 <HAL_DMA_IRQHandler+0xca0>)
 810308a:	4293      	cmp	r3, r2
 810308c:	d013      	beq.n	81030b6 <HAL_DMA_IRQHandler+0xb12>
 810308e:	687b      	ldr	r3, [r7, #4]
 8103090:	681b      	ldr	r3, [r3, #0]
 8103092:	4a6d      	ldr	r2, [pc, #436]	; (8103248 <HAL_DMA_IRQHandler+0xca4>)
 8103094:	4293      	cmp	r3, r2
 8103096:	d00e      	beq.n	81030b6 <HAL_DMA_IRQHandler+0xb12>
 8103098:	687b      	ldr	r3, [r7, #4]
 810309a:	681b      	ldr	r3, [r3, #0]
 810309c:	4a6b      	ldr	r2, [pc, #428]	; (810324c <HAL_DMA_IRQHandler+0xca8>)
 810309e:	4293      	cmp	r3, r2
 81030a0:	d009      	beq.n	81030b6 <HAL_DMA_IRQHandler+0xb12>
 81030a2:	687b      	ldr	r3, [r7, #4]
 81030a4:	681b      	ldr	r3, [r3, #0]
 81030a6:	4a6a      	ldr	r2, [pc, #424]	; (8103250 <HAL_DMA_IRQHandler+0xcac>)
 81030a8:	4293      	cmp	r3, r2
 81030aa:	d004      	beq.n	81030b6 <HAL_DMA_IRQHandler+0xb12>
 81030ac:	687b      	ldr	r3, [r7, #4]
 81030ae:	681b      	ldr	r3, [r3, #0]
 81030b0:	4a68      	ldr	r2, [pc, #416]	; (8103254 <HAL_DMA_IRQHandler+0xcb0>)
 81030b2:	4293      	cmp	r3, r2
 81030b4:	d108      	bne.n	81030c8 <HAL_DMA_IRQHandler+0xb24>
 81030b6:	687b      	ldr	r3, [r7, #4]
 81030b8:	681b      	ldr	r3, [r3, #0]
 81030ba:	681a      	ldr	r2, [r3, #0]
 81030bc:	687b      	ldr	r3, [r7, #4]
 81030be:	681b      	ldr	r3, [r3, #0]
 81030c0:	f022 0208 	bic.w	r2, r2, #8
 81030c4:	601a      	str	r2, [r3, #0]
 81030c6:	e007      	b.n	81030d8 <HAL_DMA_IRQHandler+0xb34>
 81030c8:	687b      	ldr	r3, [r7, #4]
 81030ca:	681b      	ldr	r3, [r3, #0]
 81030cc:	681a      	ldr	r2, [r3, #0]
 81030ce:	687b      	ldr	r3, [r7, #4]
 81030d0:	681b      	ldr	r3, [r3, #0]
 81030d2:	f022 0204 	bic.w	r2, r2, #4
 81030d6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 81030d8:	687b      	ldr	r3, [r7, #4]
 81030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81030dc:	2b00      	cmp	r3, #0
 81030de:	f000 8165 	beq.w	81033ac <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 81030e2:	687b      	ldr	r3, [r7, #4]
 81030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81030e6:	6878      	ldr	r0, [r7, #4]
 81030e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81030ea:	e15f      	b.n	81033ac <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 81030ec:	687b      	ldr	r3, [r7, #4]
 81030ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81030f0:	f003 031f 	and.w	r3, r3, #31
 81030f4:	2202      	movs	r2, #2
 81030f6:	409a      	lsls	r2, r3
 81030f8:	697b      	ldr	r3, [r7, #20]
 81030fa:	4013      	ands	r3, r2
 81030fc:	2b00      	cmp	r3, #0
 81030fe:	f000 80c5 	beq.w	810328c <HAL_DMA_IRQHandler+0xce8>
 8103102:	693b      	ldr	r3, [r7, #16]
 8103104:	f003 0302 	and.w	r3, r3, #2
 8103108:	2b00      	cmp	r3, #0
 810310a:	f000 80bf 	beq.w	810328c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 810310e:	687b      	ldr	r3, [r7, #4]
 8103110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103112:	f003 031f 	and.w	r3, r3, #31
 8103116:	2202      	movs	r2, #2
 8103118:	409a      	lsls	r2, r3
 810311a:	69fb      	ldr	r3, [r7, #28]
 810311c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810311e:	693b      	ldr	r3, [r7, #16]
 8103120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103124:	2b00      	cmp	r3, #0
 8103126:	d018      	beq.n	810315a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103128:	693b      	ldr	r3, [r7, #16]
 810312a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810312e:	2b00      	cmp	r3, #0
 8103130:	d109      	bne.n	8103146 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8103132:	687b      	ldr	r3, [r7, #4]
 8103134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103136:	2b00      	cmp	r3, #0
 8103138:	f000 813a 	beq.w	81033b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 810313c:	687b      	ldr	r3, [r7, #4]
 810313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103140:	6878      	ldr	r0, [r7, #4]
 8103142:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103144:	e134      	b.n	81033b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8103146:	687b      	ldr	r3, [r7, #4]
 8103148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810314a:	2b00      	cmp	r3, #0
 810314c:	f000 8130 	beq.w	81033b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8103150:	687b      	ldr	r3, [r7, #4]
 8103152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103154:	6878      	ldr	r0, [r7, #4]
 8103156:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103158:	e12a      	b.n	81033b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810315a:	693b      	ldr	r3, [r7, #16]
 810315c:	f003 0320 	and.w	r3, r3, #32
 8103160:	2b00      	cmp	r3, #0
 8103162:	f040 8089 	bne.w	8103278 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8103166:	687b      	ldr	r3, [r7, #4]
 8103168:	681b      	ldr	r3, [r3, #0]
 810316a:	4a2b      	ldr	r2, [pc, #172]	; (8103218 <HAL_DMA_IRQHandler+0xc74>)
 810316c:	4293      	cmp	r3, r2
 810316e:	d04a      	beq.n	8103206 <HAL_DMA_IRQHandler+0xc62>
 8103170:	687b      	ldr	r3, [r7, #4]
 8103172:	681b      	ldr	r3, [r3, #0]
 8103174:	4a29      	ldr	r2, [pc, #164]	; (810321c <HAL_DMA_IRQHandler+0xc78>)
 8103176:	4293      	cmp	r3, r2
 8103178:	d045      	beq.n	8103206 <HAL_DMA_IRQHandler+0xc62>
 810317a:	687b      	ldr	r3, [r7, #4]
 810317c:	681b      	ldr	r3, [r3, #0]
 810317e:	4a28      	ldr	r2, [pc, #160]	; (8103220 <HAL_DMA_IRQHandler+0xc7c>)
 8103180:	4293      	cmp	r3, r2
 8103182:	d040      	beq.n	8103206 <HAL_DMA_IRQHandler+0xc62>
 8103184:	687b      	ldr	r3, [r7, #4]
 8103186:	681b      	ldr	r3, [r3, #0]
 8103188:	4a26      	ldr	r2, [pc, #152]	; (8103224 <HAL_DMA_IRQHandler+0xc80>)
 810318a:	4293      	cmp	r3, r2
 810318c:	d03b      	beq.n	8103206 <HAL_DMA_IRQHandler+0xc62>
 810318e:	687b      	ldr	r3, [r7, #4]
 8103190:	681b      	ldr	r3, [r3, #0]
 8103192:	4a25      	ldr	r2, [pc, #148]	; (8103228 <HAL_DMA_IRQHandler+0xc84>)
 8103194:	4293      	cmp	r3, r2
 8103196:	d036      	beq.n	8103206 <HAL_DMA_IRQHandler+0xc62>
 8103198:	687b      	ldr	r3, [r7, #4]
 810319a:	681b      	ldr	r3, [r3, #0]
 810319c:	4a23      	ldr	r2, [pc, #140]	; (810322c <HAL_DMA_IRQHandler+0xc88>)
 810319e:	4293      	cmp	r3, r2
 81031a0:	d031      	beq.n	8103206 <HAL_DMA_IRQHandler+0xc62>
 81031a2:	687b      	ldr	r3, [r7, #4]
 81031a4:	681b      	ldr	r3, [r3, #0]
 81031a6:	4a22      	ldr	r2, [pc, #136]	; (8103230 <HAL_DMA_IRQHandler+0xc8c>)
 81031a8:	4293      	cmp	r3, r2
 81031aa:	d02c      	beq.n	8103206 <HAL_DMA_IRQHandler+0xc62>
 81031ac:	687b      	ldr	r3, [r7, #4]
 81031ae:	681b      	ldr	r3, [r3, #0]
 81031b0:	4a20      	ldr	r2, [pc, #128]	; (8103234 <HAL_DMA_IRQHandler+0xc90>)
 81031b2:	4293      	cmp	r3, r2
 81031b4:	d027      	beq.n	8103206 <HAL_DMA_IRQHandler+0xc62>
 81031b6:	687b      	ldr	r3, [r7, #4]
 81031b8:	681b      	ldr	r3, [r3, #0]
 81031ba:	4a1f      	ldr	r2, [pc, #124]	; (8103238 <HAL_DMA_IRQHandler+0xc94>)
 81031bc:	4293      	cmp	r3, r2
 81031be:	d022      	beq.n	8103206 <HAL_DMA_IRQHandler+0xc62>
 81031c0:	687b      	ldr	r3, [r7, #4]
 81031c2:	681b      	ldr	r3, [r3, #0]
 81031c4:	4a1d      	ldr	r2, [pc, #116]	; (810323c <HAL_DMA_IRQHandler+0xc98>)
 81031c6:	4293      	cmp	r3, r2
 81031c8:	d01d      	beq.n	8103206 <HAL_DMA_IRQHandler+0xc62>
 81031ca:	687b      	ldr	r3, [r7, #4]
 81031cc:	681b      	ldr	r3, [r3, #0]
 81031ce:	4a1c      	ldr	r2, [pc, #112]	; (8103240 <HAL_DMA_IRQHandler+0xc9c>)
 81031d0:	4293      	cmp	r3, r2
 81031d2:	d018      	beq.n	8103206 <HAL_DMA_IRQHandler+0xc62>
 81031d4:	687b      	ldr	r3, [r7, #4]
 81031d6:	681b      	ldr	r3, [r3, #0]
 81031d8:	4a1a      	ldr	r2, [pc, #104]	; (8103244 <HAL_DMA_IRQHandler+0xca0>)
 81031da:	4293      	cmp	r3, r2
 81031dc:	d013      	beq.n	8103206 <HAL_DMA_IRQHandler+0xc62>
 81031de:	687b      	ldr	r3, [r7, #4]
 81031e0:	681b      	ldr	r3, [r3, #0]
 81031e2:	4a19      	ldr	r2, [pc, #100]	; (8103248 <HAL_DMA_IRQHandler+0xca4>)
 81031e4:	4293      	cmp	r3, r2
 81031e6:	d00e      	beq.n	8103206 <HAL_DMA_IRQHandler+0xc62>
 81031e8:	687b      	ldr	r3, [r7, #4]
 81031ea:	681b      	ldr	r3, [r3, #0]
 81031ec:	4a17      	ldr	r2, [pc, #92]	; (810324c <HAL_DMA_IRQHandler+0xca8>)
 81031ee:	4293      	cmp	r3, r2
 81031f0:	d009      	beq.n	8103206 <HAL_DMA_IRQHandler+0xc62>
 81031f2:	687b      	ldr	r3, [r7, #4]
 81031f4:	681b      	ldr	r3, [r3, #0]
 81031f6:	4a16      	ldr	r2, [pc, #88]	; (8103250 <HAL_DMA_IRQHandler+0xcac>)
 81031f8:	4293      	cmp	r3, r2
 81031fa:	d004      	beq.n	8103206 <HAL_DMA_IRQHandler+0xc62>
 81031fc:	687b      	ldr	r3, [r7, #4]
 81031fe:	681b      	ldr	r3, [r3, #0]
 8103200:	4a14      	ldr	r2, [pc, #80]	; (8103254 <HAL_DMA_IRQHandler+0xcb0>)
 8103202:	4293      	cmp	r3, r2
 8103204:	d128      	bne.n	8103258 <HAL_DMA_IRQHandler+0xcb4>
 8103206:	687b      	ldr	r3, [r7, #4]
 8103208:	681b      	ldr	r3, [r3, #0]
 810320a:	681a      	ldr	r2, [r3, #0]
 810320c:	687b      	ldr	r3, [r7, #4]
 810320e:	681b      	ldr	r3, [r3, #0]
 8103210:	f022 0214 	bic.w	r2, r2, #20
 8103214:	601a      	str	r2, [r3, #0]
 8103216:	e027      	b.n	8103268 <HAL_DMA_IRQHandler+0xcc4>
 8103218:	40020010 	.word	0x40020010
 810321c:	40020028 	.word	0x40020028
 8103220:	40020040 	.word	0x40020040
 8103224:	40020058 	.word	0x40020058
 8103228:	40020070 	.word	0x40020070
 810322c:	40020088 	.word	0x40020088
 8103230:	400200a0 	.word	0x400200a0
 8103234:	400200b8 	.word	0x400200b8
 8103238:	40020410 	.word	0x40020410
 810323c:	40020428 	.word	0x40020428
 8103240:	40020440 	.word	0x40020440
 8103244:	40020458 	.word	0x40020458
 8103248:	40020470 	.word	0x40020470
 810324c:	40020488 	.word	0x40020488
 8103250:	400204a0 	.word	0x400204a0
 8103254:	400204b8 	.word	0x400204b8
 8103258:	687b      	ldr	r3, [r7, #4]
 810325a:	681b      	ldr	r3, [r3, #0]
 810325c:	681a      	ldr	r2, [r3, #0]
 810325e:	687b      	ldr	r3, [r7, #4]
 8103260:	681b      	ldr	r3, [r3, #0]
 8103262:	f022 020a 	bic.w	r2, r2, #10
 8103266:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	2201      	movs	r2, #1
 810326c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8103270:	687b      	ldr	r3, [r7, #4]
 8103272:	2200      	movs	r2, #0
 8103274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8103278:	687b      	ldr	r3, [r7, #4]
 810327a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810327c:	2b00      	cmp	r3, #0
 810327e:	f000 8097 	beq.w	81033b0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8103282:	687b      	ldr	r3, [r7, #4]
 8103284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103286:	6878      	ldr	r0, [r7, #4]
 8103288:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810328a:	e091      	b.n	81033b0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 810328c:	687b      	ldr	r3, [r7, #4]
 810328e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103290:	f003 031f 	and.w	r3, r3, #31
 8103294:	2208      	movs	r2, #8
 8103296:	409a      	lsls	r2, r3
 8103298:	697b      	ldr	r3, [r7, #20]
 810329a:	4013      	ands	r3, r2
 810329c:	2b00      	cmp	r3, #0
 810329e:	f000 8088 	beq.w	81033b2 <HAL_DMA_IRQHandler+0xe0e>
 81032a2:	693b      	ldr	r3, [r7, #16]
 81032a4:	f003 0308 	and.w	r3, r3, #8
 81032a8:	2b00      	cmp	r3, #0
 81032aa:	f000 8082 	beq.w	81033b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 81032ae:	687b      	ldr	r3, [r7, #4]
 81032b0:	681b      	ldr	r3, [r3, #0]
 81032b2:	4a41      	ldr	r2, [pc, #260]	; (81033b8 <HAL_DMA_IRQHandler+0xe14>)
 81032b4:	4293      	cmp	r3, r2
 81032b6:	d04a      	beq.n	810334e <HAL_DMA_IRQHandler+0xdaa>
 81032b8:	687b      	ldr	r3, [r7, #4]
 81032ba:	681b      	ldr	r3, [r3, #0]
 81032bc:	4a3f      	ldr	r2, [pc, #252]	; (81033bc <HAL_DMA_IRQHandler+0xe18>)
 81032be:	4293      	cmp	r3, r2
 81032c0:	d045      	beq.n	810334e <HAL_DMA_IRQHandler+0xdaa>
 81032c2:	687b      	ldr	r3, [r7, #4]
 81032c4:	681b      	ldr	r3, [r3, #0]
 81032c6:	4a3e      	ldr	r2, [pc, #248]	; (81033c0 <HAL_DMA_IRQHandler+0xe1c>)
 81032c8:	4293      	cmp	r3, r2
 81032ca:	d040      	beq.n	810334e <HAL_DMA_IRQHandler+0xdaa>
 81032cc:	687b      	ldr	r3, [r7, #4]
 81032ce:	681b      	ldr	r3, [r3, #0]
 81032d0:	4a3c      	ldr	r2, [pc, #240]	; (81033c4 <HAL_DMA_IRQHandler+0xe20>)
 81032d2:	4293      	cmp	r3, r2
 81032d4:	d03b      	beq.n	810334e <HAL_DMA_IRQHandler+0xdaa>
 81032d6:	687b      	ldr	r3, [r7, #4]
 81032d8:	681b      	ldr	r3, [r3, #0]
 81032da:	4a3b      	ldr	r2, [pc, #236]	; (81033c8 <HAL_DMA_IRQHandler+0xe24>)
 81032dc:	4293      	cmp	r3, r2
 81032de:	d036      	beq.n	810334e <HAL_DMA_IRQHandler+0xdaa>
 81032e0:	687b      	ldr	r3, [r7, #4]
 81032e2:	681b      	ldr	r3, [r3, #0]
 81032e4:	4a39      	ldr	r2, [pc, #228]	; (81033cc <HAL_DMA_IRQHandler+0xe28>)
 81032e6:	4293      	cmp	r3, r2
 81032e8:	d031      	beq.n	810334e <HAL_DMA_IRQHandler+0xdaa>
 81032ea:	687b      	ldr	r3, [r7, #4]
 81032ec:	681b      	ldr	r3, [r3, #0]
 81032ee:	4a38      	ldr	r2, [pc, #224]	; (81033d0 <HAL_DMA_IRQHandler+0xe2c>)
 81032f0:	4293      	cmp	r3, r2
 81032f2:	d02c      	beq.n	810334e <HAL_DMA_IRQHandler+0xdaa>
 81032f4:	687b      	ldr	r3, [r7, #4]
 81032f6:	681b      	ldr	r3, [r3, #0]
 81032f8:	4a36      	ldr	r2, [pc, #216]	; (81033d4 <HAL_DMA_IRQHandler+0xe30>)
 81032fa:	4293      	cmp	r3, r2
 81032fc:	d027      	beq.n	810334e <HAL_DMA_IRQHandler+0xdaa>
 81032fe:	687b      	ldr	r3, [r7, #4]
 8103300:	681b      	ldr	r3, [r3, #0]
 8103302:	4a35      	ldr	r2, [pc, #212]	; (81033d8 <HAL_DMA_IRQHandler+0xe34>)
 8103304:	4293      	cmp	r3, r2
 8103306:	d022      	beq.n	810334e <HAL_DMA_IRQHandler+0xdaa>
 8103308:	687b      	ldr	r3, [r7, #4]
 810330a:	681b      	ldr	r3, [r3, #0]
 810330c:	4a33      	ldr	r2, [pc, #204]	; (81033dc <HAL_DMA_IRQHandler+0xe38>)
 810330e:	4293      	cmp	r3, r2
 8103310:	d01d      	beq.n	810334e <HAL_DMA_IRQHandler+0xdaa>
 8103312:	687b      	ldr	r3, [r7, #4]
 8103314:	681b      	ldr	r3, [r3, #0]
 8103316:	4a32      	ldr	r2, [pc, #200]	; (81033e0 <HAL_DMA_IRQHandler+0xe3c>)
 8103318:	4293      	cmp	r3, r2
 810331a:	d018      	beq.n	810334e <HAL_DMA_IRQHandler+0xdaa>
 810331c:	687b      	ldr	r3, [r7, #4]
 810331e:	681b      	ldr	r3, [r3, #0]
 8103320:	4a30      	ldr	r2, [pc, #192]	; (81033e4 <HAL_DMA_IRQHandler+0xe40>)
 8103322:	4293      	cmp	r3, r2
 8103324:	d013      	beq.n	810334e <HAL_DMA_IRQHandler+0xdaa>
 8103326:	687b      	ldr	r3, [r7, #4]
 8103328:	681b      	ldr	r3, [r3, #0]
 810332a:	4a2f      	ldr	r2, [pc, #188]	; (81033e8 <HAL_DMA_IRQHandler+0xe44>)
 810332c:	4293      	cmp	r3, r2
 810332e:	d00e      	beq.n	810334e <HAL_DMA_IRQHandler+0xdaa>
 8103330:	687b      	ldr	r3, [r7, #4]
 8103332:	681b      	ldr	r3, [r3, #0]
 8103334:	4a2d      	ldr	r2, [pc, #180]	; (81033ec <HAL_DMA_IRQHandler+0xe48>)
 8103336:	4293      	cmp	r3, r2
 8103338:	d009      	beq.n	810334e <HAL_DMA_IRQHandler+0xdaa>
 810333a:	687b      	ldr	r3, [r7, #4]
 810333c:	681b      	ldr	r3, [r3, #0]
 810333e:	4a2c      	ldr	r2, [pc, #176]	; (81033f0 <HAL_DMA_IRQHandler+0xe4c>)
 8103340:	4293      	cmp	r3, r2
 8103342:	d004      	beq.n	810334e <HAL_DMA_IRQHandler+0xdaa>
 8103344:	687b      	ldr	r3, [r7, #4]
 8103346:	681b      	ldr	r3, [r3, #0]
 8103348:	4a2a      	ldr	r2, [pc, #168]	; (81033f4 <HAL_DMA_IRQHandler+0xe50>)
 810334a:	4293      	cmp	r3, r2
 810334c:	d108      	bne.n	8103360 <HAL_DMA_IRQHandler+0xdbc>
 810334e:	687b      	ldr	r3, [r7, #4]
 8103350:	681b      	ldr	r3, [r3, #0]
 8103352:	681a      	ldr	r2, [r3, #0]
 8103354:	687b      	ldr	r3, [r7, #4]
 8103356:	681b      	ldr	r3, [r3, #0]
 8103358:	f022 021c 	bic.w	r2, r2, #28
 810335c:	601a      	str	r2, [r3, #0]
 810335e:	e007      	b.n	8103370 <HAL_DMA_IRQHandler+0xdcc>
 8103360:	687b      	ldr	r3, [r7, #4]
 8103362:	681b      	ldr	r3, [r3, #0]
 8103364:	681a      	ldr	r2, [r3, #0]
 8103366:	687b      	ldr	r3, [r7, #4]
 8103368:	681b      	ldr	r3, [r3, #0]
 810336a:	f022 020e 	bic.w	r2, r2, #14
 810336e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8103370:	687b      	ldr	r3, [r7, #4]
 8103372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103374:	f003 031f 	and.w	r3, r3, #31
 8103378:	2201      	movs	r2, #1
 810337a:	409a      	lsls	r2, r3
 810337c:	69fb      	ldr	r3, [r7, #28]
 810337e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8103380:	687b      	ldr	r3, [r7, #4]
 8103382:	2201      	movs	r2, #1
 8103384:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103386:	687b      	ldr	r3, [r7, #4]
 8103388:	2201      	movs	r2, #1
 810338a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 810338e:	687b      	ldr	r3, [r7, #4]
 8103390:	2200      	movs	r2, #0
 8103392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8103396:	687b      	ldr	r3, [r7, #4]
 8103398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810339a:	2b00      	cmp	r3, #0
 810339c:	d009      	beq.n	81033b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810339e:	687b      	ldr	r3, [r7, #4]
 81033a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81033a2:	6878      	ldr	r0, [r7, #4]
 81033a4:	4798      	blx	r3
 81033a6:	e004      	b.n	81033b2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 81033a8:	bf00      	nop
 81033aa:	e002      	b.n	81033b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81033ac:	bf00      	nop
 81033ae:	e000      	b.n	81033b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81033b0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 81033b2:	3728      	adds	r7, #40	; 0x28
 81033b4:	46bd      	mov	sp, r7
 81033b6:	bd80      	pop	{r7, pc}
 81033b8:	40020010 	.word	0x40020010
 81033bc:	40020028 	.word	0x40020028
 81033c0:	40020040 	.word	0x40020040
 81033c4:	40020058 	.word	0x40020058
 81033c8:	40020070 	.word	0x40020070
 81033cc:	40020088 	.word	0x40020088
 81033d0:	400200a0 	.word	0x400200a0
 81033d4:	400200b8 	.word	0x400200b8
 81033d8:	40020410 	.word	0x40020410
 81033dc:	40020428 	.word	0x40020428
 81033e0:	40020440 	.word	0x40020440
 81033e4:	40020458 	.word	0x40020458
 81033e8:	40020470 	.word	0x40020470
 81033ec:	40020488 	.word	0x40020488
 81033f0:	400204a0 	.word	0x400204a0
 81033f4:	400204b8 	.word	0x400204b8

081033f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 81033f8:	b480      	push	{r7}
 81033fa:	b085      	sub	sp, #20
 81033fc:	af00      	add	r7, sp, #0
 81033fe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103400:	687b      	ldr	r3, [r7, #4]
 8103402:	681b      	ldr	r3, [r3, #0]
 8103404:	4a43      	ldr	r2, [pc, #268]	; (8103514 <DMA_CalcBaseAndBitshift+0x11c>)
 8103406:	4293      	cmp	r3, r2
 8103408:	d04a      	beq.n	81034a0 <DMA_CalcBaseAndBitshift+0xa8>
 810340a:	687b      	ldr	r3, [r7, #4]
 810340c:	681b      	ldr	r3, [r3, #0]
 810340e:	4a42      	ldr	r2, [pc, #264]	; (8103518 <DMA_CalcBaseAndBitshift+0x120>)
 8103410:	4293      	cmp	r3, r2
 8103412:	d045      	beq.n	81034a0 <DMA_CalcBaseAndBitshift+0xa8>
 8103414:	687b      	ldr	r3, [r7, #4]
 8103416:	681b      	ldr	r3, [r3, #0]
 8103418:	4a40      	ldr	r2, [pc, #256]	; (810351c <DMA_CalcBaseAndBitshift+0x124>)
 810341a:	4293      	cmp	r3, r2
 810341c:	d040      	beq.n	81034a0 <DMA_CalcBaseAndBitshift+0xa8>
 810341e:	687b      	ldr	r3, [r7, #4]
 8103420:	681b      	ldr	r3, [r3, #0]
 8103422:	4a3f      	ldr	r2, [pc, #252]	; (8103520 <DMA_CalcBaseAndBitshift+0x128>)
 8103424:	4293      	cmp	r3, r2
 8103426:	d03b      	beq.n	81034a0 <DMA_CalcBaseAndBitshift+0xa8>
 8103428:	687b      	ldr	r3, [r7, #4]
 810342a:	681b      	ldr	r3, [r3, #0]
 810342c:	4a3d      	ldr	r2, [pc, #244]	; (8103524 <DMA_CalcBaseAndBitshift+0x12c>)
 810342e:	4293      	cmp	r3, r2
 8103430:	d036      	beq.n	81034a0 <DMA_CalcBaseAndBitshift+0xa8>
 8103432:	687b      	ldr	r3, [r7, #4]
 8103434:	681b      	ldr	r3, [r3, #0]
 8103436:	4a3c      	ldr	r2, [pc, #240]	; (8103528 <DMA_CalcBaseAndBitshift+0x130>)
 8103438:	4293      	cmp	r3, r2
 810343a:	d031      	beq.n	81034a0 <DMA_CalcBaseAndBitshift+0xa8>
 810343c:	687b      	ldr	r3, [r7, #4]
 810343e:	681b      	ldr	r3, [r3, #0]
 8103440:	4a3a      	ldr	r2, [pc, #232]	; (810352c <DMA_CalcBaseAndBitshift+0x134>)
 8103442:	4293      	cmp	r3, r2
 8103444:	d02c      	beq.n	81034a0 <DMA_CalcBaseAndBitshift+0xa8>
 8103446:	687b      	ldr	r3, [r7, #4]
 8103448:	681b      	ldr	r3, [r3, #0]
 810344a:	4a39      	ldr	r2, [pc, #228]	; (8103530 <DMA_CalcBaseAndBitshift+0x138>)
 810344c:	4293      	cmp	r3, r2
 810344e:	d027      	beq.n	81034a0 <DMA_CalcBaseAndBitshift+0xa8>
 8103450:	687b      	ldr	r3, [r7, #4]
 8103452:	681b      	ldr	r3, [r3, #0]
 8103454:	4a37      	ldr	r2, [pc, #220]	; (8103534 <DMA_CalcBaseAndBitshift+0x13c>)
 8103456:	4293      	cmp	r3, r2
 8103458:	d022      	beq.n	81034a0 <DMA_CalcBaseAndBitshift+0xa8>
 810345a:	687b      	ldr	r3, [r7, #4]
 810345c:	681b      	ldr	r3, [r3, #0]
 810345e:	4a36      	ldr	r2, [pc, #216]	; (8103538 <DMA_CalcBaseAndBitshift+0x140>)
 8103460:	4293      	cmp	r3, r2
 8103462:	d01d      	beq.n	81034a0 <DMA_CalcBaseAndBitshift+0xa8>
 8103464:	687b      	ldr	r3, [r7, #4]
 8103466:	681b      	ldr	r3, [r3, #0]
 8103468:	4a34      	ldr	r2, [pc, #208]	; (810353c <DMA_CalcBaseAndBitshift+0x144>)
 810346a:	4293      	cmp	r3, r2
 810346c:	d018      	beq.n	81034a0 <DMA_CalcBaseAndBitshift+0xa8>
 810346e:	687b      	ldr	r3, [r7, #4]
 8103470:	681b      	ldr	r3, [r3, #0]
 8103472:	4a33      	ldr	r2, [pc, #204]	; (8103540 <DMA_CalcBaseAndBitshift+0x148>)
 8103474:	4293      	cmp	r3, r2
 8103476:	d013      	beq.n	81034a0 <DMA_CalcBaseAndBitshift+0xa8>
 8103478:	687b      	ldr	r3, [r7, #4]
 810347a:	681b      	ldr	r3, [r3, #0]
 810347c:	4a31      	ldr	r2, [pc, #196]	; (8103544 <DMA_CalcBaseAndBitshift+0x14c>)
 810347e:	4293      	cmp	r3, r2
 8103480:	d00e      	beq.n	81034a0 <DMA_CalcBaseAndBitshift+0xa8>
 8103482:	687b      	ldr	r3, [r7, #4]
 8103484:	681b      	ldr	r3, [r3, #0]
 8103486:	4a30      	ldr	r2, [pc, #192]	; (8103548 <DMA_CalcBaseAndBitshift+0x150>)
 8103488:	4293      	cmp	r3, r2
 810348a:	d009      	beq.n	81034a0 <DMA_CalcBaseAndBitshift+0xa8>
 810348c:	687b      	ldr	r3, [r7, #4]
 810348e:	681b      	ldr	r3, [r3, #0]
 8103490:	4a2e      	ldr	r2, [pc, #184]	; (810354c <DMA_CalcBaseAndBitshift+0x154>)
 8103492:	4293      	cmp	r3, r2
 8103494:	d004      	beq.n	81034a0 <DMA_CalcBaseAndBitshift+0xa8>
 8103496:	687b      	ldr	r3, [r7, #4]
 8103498:	681b      	ldr	r3, [r3, #0]
 810349a:	4a2d      	ldr	r2, [pc, #180]	; (8103550 <DMA_CalcBaseAndBitshift+0x158>)
 810349c:	4293      	cmp	r3, r2
 810349e:	d101      	bne.n	81034a4 <DMA_CalcBaseAndBitshift+0xac>
 81034a0:	2301      	movs	r3, #1
 81034a2:	e000      	b.n	81034a6 <DMA_CalcBaseAndBitshift+0xae>
 81034a4:	2300      	movs	r3, #0
 81034a6:	2b00      	cmp	r3, #0
 81034a8:	d026      	beq.n	81034f8 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81034aa:	687b      	ldr	r3, [r7, #4]
 81034ac:	681b      	ldr	r3, [r3, #0]
 81034ae:	b2db      	uxtb	r3, r3
 81034b0:	3b10      	subs	r3, #16
 81034b2:	4a28      	ldr	r2, [pc, #160]	; (8103554 <DMA_CalcBaseAndBitshift+0x15c>)
 81034b4:	fba2 2303 	umull	r2, r3, r2, r3
 81034b8:	091b      	lsrs	r3, r3, #4
 81034ba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 81034bc:	68fb      	ldr	r3, [r7, #12]
 81034be:	f003 0307 	and.w	r3, r3, #7
 81034c2:	4a25      	ldr	r2, [pc, #148]	; (8103558 <DMA_CalcBaseAndBitshift+0x160>)
 81034c4:	5cd3      	ldrb	r3, [r2, r3]
 81034c6:	461a      	mov	r2, r3
 81034c8:	687b      	ldr	r3, [r7, #4]
 81034ca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 81034cc:	68fb      	ldr	r3, [r7, #12]
 81034ce:	2b03      	cmp	r3, #3
 81034d0:	d909      	bls.n	81034e6 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 81034d2:	687b      	ldr	r3, [r7, #4]
 81034d4:	681b      	ldr	r3, [r3, #0]
 81034d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81034da:	f023 0303 	bic.w	r3, r3, #3
 81034de:	1d1a      	adds	r2, r3, #4
 81034e0:	687b      	ldr	r3, [r7, #4]
 81034e2:	659a      	str	r2, [r3, #88]	; 0x58
 81034e4:	e00e      	b.n	8103504 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 81034e6:	687b      	ldr	r3, [r7, #4]
 81034e8:	681b      	ldr	r3, [r3, #0]
 81034ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81034ee:	f023 0303 	bic.w	r3, r3, #3
 81034f2:	687a      	ldr	r2, [r7, #4]
 81034f4:	6593      	str	r3, [r2, #88]	; 0x58
 81034f6:	e005      	b.n	8103504 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 81034f8:	687b      	ldr	r3, [r7, #4]
 81034fa:	681b      	ldr	r3, [r3, #0]
 81034fc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8103500:	687b      	ldr	r3, [r7, #4]
 8103502:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8103504:	687b      	ldr	r3, [r7, #4]
 8103506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8103508:	4618      	mov	r0, r3
 810350a:	3714      	adds	r7, #20
 810350c:	46bd      	mov	sp, r7
 810350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103512:	4770      	bx	lr
 8103514:	40020010 	.word	0x40020010
 8103518:	40020028 	.word	0x40020028
 810351c:	40020040 	.word	0x40020040
 8103520:	40020058 	.word	0x40020058
 8103524:	40020070 	.word	0x40020070
 8103528:	40020088 	.word	0x40020088
 810352c:	400200a0 	.word	0x400200a0
 8103530:	400200b8 	.word	0x400200b8
 8103534:	40020410 	.word	0x40020410
 8103538:	40020428 	.word	0x40020428
 810353c:	40020440 	.word	0x40020440
 8103540:	40020458 	.word	0x40020458
 8103544:	40020470 	.word	0x40020470
 8103548:	40020488 	.word	0x40020488
 810354c:	400204a0 	.word	0x400204a0
 8103550:	400204b8 	.word	0x400204b8
 8103554:	aaaaaaab 	.word	0xaaaaaaab
 8103558:	081098c0 	.word	0x081098c0

0810355c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 810355c:	b480      	push	{r7}
 810355e:	b085      	sub	sp, #20
 8103560:	af00      	add	r7, sp, #0
 8103562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8103564:	2300      	movs	r3, #0
 8103566:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8103568:	687b      	ldr	r3, [r7, #4]
 810356a:	699b      	ldr	r3, [r3, #24]
 810356c:	2b00      	cmp	r3, #0
 810356e:	d120      	bne.n	81035b2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8103570:	687b      	ldr	r3, [r7, #4]
 8103572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103574:	2b03      	cmp	r3, #3
 8103576:	d858      	bhi.n	810362a <DMA_CheckFifoParam+0xce>
 8103578:	a201      	add	r2, pc, #4	; (adr r2, 8103580 <DMA_CheckFifoParam+0x24>)
 810357a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810357e:	bf00      	nop
 8103580:	08103591 	.word	0x08103591
 8103584:	081035a3 	.word	0x081035a3
 8103588:	08103591 	.word	0x08103591
 810358c:	0810362b 	.word	0x0810362b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103590:	687b      	ldr	r3, [r7, #4]
 8103592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103594:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103598:	2b00      	cmp	r3, #0
 810359a:	d048      	beq.n	810362e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 810359c:	2301      	movs	r3, #1
 810359e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81035a0:	e045      	b.n	810362e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81035a2:	687b      	ldr	r3, [r7, #4]
 81035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81035a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81035aa:	d142      	bne.n	8103632 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 81035ac:	2301      	movs	r3, #1
 81035ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81035b0:	e03f      	b.n	8103632 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 81035b2:	687b      	ldr	r3, [r7, #4]
 81035b4:	699b      	ldr	r3, [r3, #24]
 81035b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81035ba:	d123      	bne.n	8103604 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 81035bc:	687b      	ldr	r3, [r7, #4]
 81035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81035c0:	2b03      	cmp	r3, #3
 81035c2:	d838      	bhi.n	8103636 <DMA_CheckFifoParam+0xda>
 81035c4:	a201      	add	r2, pc, #4	; (adr r2, 81035cc <DMA_CheckFifoParam+0x70>)
 81035c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81035ca:	bf00      	nop
 81035cc:	081035dd 	.word	0x081035dd
 81035d0:	081035e3 	.word	0x081035e3
 81035d4:	081035dd 	.word	0x081035dd
 81035d8:	081035f5 	.word	0x081035f5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 81035dc:	2301      	movs	r3, #1
 81035de:	73fb      	strb	r3, [r7, #15]
        break;
 81035e0:	e030      	b.n	8103644 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81035e2:	687b      	ldr	r3, [r7, #4]
 81035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81035e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81035ea:	2b00      	cmp	r3, #0
 81035ec:	d025      	beq.n	810363a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 81035ee:	2301      	movs	r3, #1
 81035f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81035f2:	e022      	b.n	810363a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81035f4:	687b      	ldr	r3, [r7, #4]
 81035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81035f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81035fc:	d11f      	bne.n	810363e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 81035fe:	2301      	movs	r3, #1
 8103600:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103602:	e01c      	b.n	810363e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8103604:	687b      	ldr	r3, [r7, #4]
 8103606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103608:	2b02      	cmp	r3, #2
 810360a:	d902      	bls.n	8103612 <DMA_CheckFifoParam+0xb6>
 810360c:	2b03      	cmp	r3, #3
 810360e:	d003      	beq.n	8103618 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8103610:	e018      	b.n	8103644 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8103612:	2301      	movs	r3, #1
 8103614:	73fb      	strb	r3, [r7, #15]
        break;
 8103616:	e015      	b.n	8103644 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103618:	687b      	ldr	r3, [r7, #4]
 810361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810361c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103620:	2b00      	cmp	r3, #0
 8103622:	d00e      	beq.n	8103642 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8103624:	2301      	movs	r3, #1
 8103626:	73fb      	strb	r3, [r7, #15]
    break;
 8103628:	e00b      	b.n	8103642 <DMA_CheckFifoParam+0xe6>
        break;
 810362a:	bf00      	nop
 810362c:	e00a      	b.n	8103644 <DMA_CheckFifoParam+0xe8>
        break;
 810362e:	bf00      	nop
 8103630:	e008      	b.n	8103644 <DMA_CheckFifoParam+0xe8>
        break;
 8103632:	bf00      	nop
 8103634:	e006      	b.n	8103644 <DMA_CheckFifoParam+0xe8>
        break;
 8103636:	bf00      	nop
 8103638:	e004      	b.n	8103644 <DMA_CheckFifoParam+0xe8>
        break;
 810363a:	bf00      	nop
 810363c:	e002      	b.n	8103644 <DMA_CheckFifoParam+0xe8>
        break;
 810363e:	bf00      	nop
 8103640:	e000      	b.n	8103644 <DMA_CheckFifoParam+0xe8>
    break;
 8103642:	bf00      	nop
    }
  }

  return status;
 8103644:	7bfb      	ldrb	r3, [r7, #15]
}
 8103646:	4618      	mov	r0, r3
 8103648:	3714      	adds	r7, #20
 810364a:	46bd      	mov	sp, r7
 810364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103650:	4770      	bx	lr
 8103652:	bf00      	nop

08103654 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8103654:	b480      	push	{r7}
 8103656:	b085      	sub	sp, #20
 8103658:	af00      	add	r7, sp, #0
 810365a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 810365c:	687b      	ldr	r3, [r7, #4]
 810365e:	681b      	ldr	r3, [r3, #0]
 8103660:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103662:	687b      	ldr	r3, [r7, #4]
 8103664:	681b      	ldr	r3, [r3, #0]
 8103666:	4a3a      	ldr	r2, [pc, #232]	; (8103750 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8103668:	4293      	cmp	r3, r2
 810366a:	d022      	beq.n	81036b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810366c:	687b      	ldr	r3, [r7, #4]
 810366e:	681b      	ldr	r3, [r3, #0]
 8103670:	4a38      	ldr	r2, [pc, #224]	; (8103754 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8103672:	4293      	cmp	r3, r2
 8103674:	d01d      	beq.n	81036b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103676:	687b      	ldr	r3, [r7, #4]
 8103678:	681b      	ldr	r3, [r3, #0]
 810367a:	4a37      	ldr	r2, [pc, #220]	; (8103758 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 810367c:	4293      	cmp	r3, r2
 810367e:	d018      	beq.n	81036b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103680:	687b      	ldr	r3, [r7, #4]
 8103682:	681b      	ldr	r3, [r3, #0]
 8103684:	4a35      	ldr	r2, [pc, #212]	; (810375c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8103686:	4293      	cmp	r3, r2
 8103688:	d013      	beq.n	81036b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810368a:	687b      	ldr	r3, [r7, #4]
 810368c:	681b      	ldr	r3, [r3, #0]
 810368e:	4a34      	ldr	r2, [pc, #208]	; (8103760 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8103690:	4293      	cmp	r3, r2
 8103692:	d00e      	beq.n	81036b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103694:	687b      	ldr	r3, [r7, #4]
 8103696:	681b      	ldr	r3, [r3, #0]
 8103698:	4a32      	ldr	r2, [pc, #200]	; (8103764 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810369a:	4293      	cmp	r3, r2
 810369c:	d009      	beq.n	81036b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810369e:	687b      	ldr	r3, [r7, #4]
 81036a0:	681b      	ldr	r3, [r3, #0]
 81036a2:	4a31      	ldr	r2, [pc, #196]	; (8103768 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 81036a4:	4293      	cmp	r3, r2
 81036a6:	d004      	beq.n	81036b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81036a8:	687b      	ldr	r3, [r7, #4]
 81036aa:	681b      	ldr	r3, [r3, #0]
 81036ac:	4a2f      	ldr	r2, [pc, #188]	; (810376c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 81036ae:	4293      	cmp	r3, r2
 81036b0:	d101      	bne.n	81036b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 81036b2:	2301      	movs	r3, #1
 81036b4:	e000      	b.n	81036b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 81036b6:	2300      	movs	r3, #0
 81036b8:	2b00      	cmp	r3, #0
 81036ba:	d01c      	beq.n	81036f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 81036bc:	687b      	ldr	r3, [r7, #4]
 81036be:	681b      	ldr	r3, [r3, #0]
 81036c0:	b2db      	uxtb	r3, r3
 81036c2:	3b08      	subs	r3, #8
 81036c4:	4a2a      	ldr	r2, [pc, #168]	; (8103770 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 81036c6:	fba2 2303 	umull	r2, r3, r2, r3
 81036ca:	091b      	lsrs	r3, r3, #4
 81036cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 81036ce:	68fb      	ldr	r3, [r7, #12]
 81036d0:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 81036d4:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 81036d8:	009b      	lsls	r3, r3, #2
 81036da:	461a      	mov	r2, r3
 81036dc:	687b      	ldr	r3, [r7, #4]
 81036de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 81036e0:	687b      	ldr	r3, [r7, #4]
 81036e2:	4a24      	ldr	r2, [pc, #144]	; (8103774 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 81036e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81036e6:	68fb      	ldr	r3, [r7, #12]
 81036e8:	f003 031f 	and.w	r3, r3, #31
 81036ec:	2201      	movs	r2, #1
 81036ee:	409a      	lsls	r2, r3
 81036f0:	687b      	ldr	r3, [r7, #4]
 81036f2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 81036f4:	e026      	b.n	8103744 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81036f6:	687b      	ldr	r3, [r7, #4]
 81036f8:	681b      	ldr	r3, [r3, #0]
 81036fa:	b2db      	uxtb	r3, r3
 81036fc:	3b10      	subs	r3, #16
 81036fe:	4a1e      	ldr	r2, [pc, #120]	; (8103778 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8103700:	fba2 2303 	umull	r2, r3, r2, r3
 8103704:	091b      	lsrs	r3, r3, #4
 8103706:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8103708:	68bb      	ldr	r3, [r7, #8]
 810370a:	4a1c      	ldr	r2, [pc, #112]	; (810377c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 810370c:	4293      	cmp	r3, r2
 810370e:	d806      	bhi.n	810371e <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8103710:	68bb      	ldr	r3, [r7, #8]
 8103712:	4a1b      	ldr	r2, [pc, #108]	; (8103780 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8103714:	4293      	cmp	r3, r2
 8103716:	d902      	bls.n	810371e <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8103718:	68fb      	ldr	r3, [r7, #12]
 810371a:	3308      	adds	r3, #8
 810371c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 810371e:	68fb      	ldr	r3, [r7, #12]
 8103720:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8103724:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8103728:	009b      	lsls	r3, r3, #2
 810372a:	461a      	mov	r2, r3
 810372c:	687b      	ldr	r3, [r7, #4]
 810372e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8103730:	687b      	ldr	r3, [r7, #4]
 8103732:	4a14      	ldr	r2, [pc, #80]	; (8103784 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8103734:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103736:	68fb      	ldr	r3, [r7, #12]
 8103738:	f003 031f 	and.w	r3, r3, #31
 810373c:	2201      	movs	r2, #1
 810373e:	409a      	lsls	r2, r3
 8103740:	687b      	ldr	r3, [r7, #4]
 8103742:	669a      	str	r2, [r3, #104]	; 0x68
}
 8103744:	bf00      	nop
 8103746:	3714      	adds	r7, #20
 8103748:	46bd      	mov	sp, r7
 810374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810374e:	4770      	bx	lr
 8103750:	58025408 	.word	0x58025408
 8103754:	5802541c 	.word	0x5802541c
 8103758:	58025430 	.word	0x58025430
 810375c:	58025444 	.word	0x58025444
 8103760:	58025458 	.word	0x58025458
 8103764:	5802546c 	.word	0x5802546c
 8103768:	58025480 	.word	0x58025480
 810376c:	58025494 	.word	0x58025494
 8103770:	cccccccd 	.word	0xcccccccd
 8103774:	58025880 	.word	0x58025880
 8103778:	aaaaaaab 	.word	0xaaaaaaab
 810377c:	400204b8 	.word	0x400204b8
 8103780:	4002040f 	.word	0x4002040f
 8103784:	40020880 	.word	0x40020880

08103788 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8103788:	b480      	push	{r7}
 810378a:	b085      	sub	sp, #20
 810378c:	af00      	add	r7, sp, #0
 810378e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8103790:	687b      	ldr	r3, [r7, #4]
 8103792:	685b      	ldr	r3, [r3, #4]
 8103794:	b2db      	uxtb	r3, r3
 8103796:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8103798:	68fb      	ldr	r3, [r7, #12]
 810379a:	2b00      	cmp	r3, #0
 810379c:	d04a      	beq.n	8103834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 810379e:	68fb      	ldr	r3, [r7, #12]
 81037a0:	2b08      	cmp	r3, #8
 81037a2:	d847      	bhi.n	8103834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81037a4:	687b      	ldr	r3, [r7, #4]
 81037a6:	681b      	ldr	r3, [r3, #0]
 81037a8:	4a25      	ldr	r2, [pc, #148]	; (8103840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 81037aa:	4293      	cmp	r3, r2
 81037ac:	d022      	beq.n	81037f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81037ae:	687b      	ldr	r3, [r7, #4]
 81037b0:	681b      	ldr	r3, [r3, #0]
 81037b2:	4a24      	ldr	r2, [pc, #144]	; (8103844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 81037b4:	4293      	cmp	r3, r2
 81037b6:	d01d      	beq.n	81037f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81037b8:	687b      	ldr	r3, [r7, #4]
 81037ba:	681b      	ldr	r3, [r3, #0]
 81037bc:	4a22      	ldr	r2, [pc, #136]	; (8103848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 81037be:	4293      	cmp	r3, r2
 81037c0:	d018      	beq.n	81037f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81037c2:	687b      	ldr	r3, [r7, #4]
 81037c4:	681b      	ldr	r3, [r3, #0]
 81037c6:	4a21      	ldr	r2, [pc, #132]	; (810384c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 81037c8:	4293      	cmp	r3, r2
 81037ca:	d013      	beq.n	81037f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	681b      	ldr	r3, [r3, #0]
 81037d0:	4a1f      	ldr	r2, [pc, #124]	; (8103850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 81037d2:	4293      	cmp	r3, r2
 81037d4:	d00e      	beq.n	81037f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81037d6:	687b      	ldr	r3, [r7, #4]
 81037d8:	681b      	ldr	r3, [r3, #0]
 81037da:	4a1e      	ldr	r2, [pc, #120]	; (8103854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 81037dc:	4293      	cmp	r3, r2
 81037de:	d009      	beq.n	81037f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81037e0:	687b      	ldr	r3, [r7, #4]
 81037e2:	681b      	ldr	r3, [r3, #0]
 81037e4:	4a1c      	ldr	r2, [pc, #112]	; (8103858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 81037e6:	4293      	cmp	r3, r2
 81037e8:	d004      	beq.n	81037f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81037ea:	687b      	ldr	r3, [r7, #4]
 81037ec:	681b      	ldr	r3, [r3, #0]
 81037ee:	4a1b      	ldr	r2, [pc, #108]	; (810385c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 81037f0:	4293      	cmp	r3, r2
 81037f2:	d101      	bne.n	81037f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 81037f4:	2301      	movs	r3, #1
 81037f6:	e000      	b.n	81037fa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 81037f8:	2300      	movs	r3, #0
 81037fa:	2b00      	cmp	r3, #0
 81037fc:	d00a      	beq.n	8103814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 81037fe:	68fa      	ldr	r2, [r7, #12]
 8103800:	4b17      	ldr	r3, [pc, #92]	; (8103860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8103802:	4413      	add	r3, r2
 8103804:	009b      	lsls	r3, r3, #2
 8103806:	461a      	mov	r2, r3
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 810380c:	687b      	ldr	r3, [r7, #4]
 810380e:	4a15      	ldr	r2, [pc, #84]	; (8103864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8103810:	671a      	str	r2, [r3, #112]	; 0x70
 8103812:	e009      	b.n	8103828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8103814:	68fa      	ldr	r2, [r7, #12]
 8103816:	4b14      	ldr	r3, [pc, #80]	; (8103868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8103818:	4413      	add	r3, r2
 810381a:	009b      	lsls	r3, r3, #2
 810381c:	461a      	mov	r2, r3
 810381e:	687b      	ldr	r3, [r7, #4]
 8103820:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8103822:	687b      	ldr	r3, [r7, #4]
 8103824:	4a11      	ldr	r2, [pc, #68]	; (810386c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8103826:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8103828:	68fb      	ldr	r3, [r7, #12]
 810382a:	3b01      	subs	r3, #1
 810382c:	2201      	movs	r2, #1
 810382e:	409a      	lsls	r2, r3
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8103834:	bf00      	nop
 8103836:	3714      	adds	r7, #20
 8103838:	46bd      	mov	sp, r7
 810383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810383e:	4770      	bx	lr
 8103840:	58025408 	.word	0x58025408
 8103844:	5802541c 	.word	0x5802541c
 8103848:	58025430 	.word	0x58025430
 810384c:	58025444 	.word	0x58025444
 8103850:	58025458 	.word	0x58025458
 8103854:	5802546c 	.word	0x5802546c
 8103858:	58025480 	.word	0x58025480
 810385c:	58025494 	.word	0x58025494
 8103860:	1600963f 	.word	0x1600963f
 8103864:	58025940 	.word	0x58025940
 8103868:	1000823f 	.word	0x1000823f
 810386c:	40020940 	.word	0x40020940

08103870 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103870:	b480      	push	{r7}
 8103872:	b089      	sub	sp, #36	; 0x24
 8103874:	af00      	add	r7, sp, #0
 8103876:	6078      	str	r0, [r7, #4]
 8103878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810387a:	2300      	movs	r3, #0
 810387c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810387e:	4b89      	ldr	r3, [pc, #548]	; (8103aa4 <HAL_GPIO_Init+0x234>)
 8103880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103882:	e194      	b.n	8103bae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103884:	683b      	ldr	r3, [r7, #0]
 8103886:	681a      	ldr	r2, [r3, #0]
 8103888:	2101      	movs	r1, #1
 810388a:	69fb      	ldr	r3, [r7, #28]
 810388c:	fa01 f303 	lsl.w	r3, r1, r3
 8103890:	4013      	ands	r3, r2
 8103892:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103894:	693b      	ldr	r3, [r7, #16]
 8103896:	2b00      	cmp	r3, #0
 8103898:	f000 8186 	beq.w	8103ba8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810389c:	683b      	ldr	r3, [r7, #0]
 810389e:	685b      	ldr	r3, [r3, #4]
 81038a0:	f003 0303 	and.w	r3, r3, #3
 81038a4:	2b01      	cmp	r3, #1
 81038a6:	d005      	beq.n	81038b4 <HAL_GPIO_Init+0x44>
 81038a8:	683b      	ldr	r3, [r7, #0]
 81038aa:	685b      	ldr	r3, [r3, #4]
 81038ac:	f003 0303 	and.w	r3, r3, #3
 81038b0:	2b02      	cmp	r3, #2
 81038b2:	d130      	bne.n	8103916 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81038b4:	687b      	ldr	r3, [r7, #4]
 81038b6:	689b      	ldr	r3, [r3, #8]
 81038b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81038ba:	69fb      	ldr	r3, [r7, #28]
 81038bc:	005b      	lsls	r3, r3, #1
 81038be:	2203      	movs	r2, #3
 81038c0:	fa02 f303 	lsl.w	r3, r2, r3
 81038c4:	43db      	mvns	r3, r3
 81038c6:	69ba      	ldr	r2, [r7, #24]
 81038c8:	4013      	ands	r3, r2
 81038ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81038cc:	683b      	ldr	r3, [r7, #0]
 81038ce:	68da      	ldr	r2, [r3, #12]
 81038d0:	69fb      	ldr	r3, [r7, #28]
 81038d2:	005b      	lsls	r3, r3, #1
 81038d4:	fa02 f303 	lsl.w	r3, r2, r3
 81038d8:	69ba      	ldr	r2, [r7, #24]
 81038da:	4313      	orrs	r3, r2
 81038dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81038de:	687b      	ldr	r3, [r7, #4]
 81038e0:	69ba      	ldr	r2, [r7, #24]
 81038e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81038e4:	687b      	ldr	r3, [r7, #4]
 81038e6:	685b      	ldr	r3, [r3, #4]
 81038e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81038ea:	2201      	movs	r2, #1
 81038ec:	69fb      	ldr	r3, [r7, #28]
 81038ee:	fa02 f303 	lsl.w	r3, r2, r3
 81038f2:	43db      	mvns	r3, r3
 81038f4:	69ba      	ldr	r2, [r7, #24]
 81038f6:	4013      	ands	r3, r2
 81038f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81038fa:	683b      	ldr	r3, [r7, #0]
 81038fc:	685b      	ldr	r3, [r3, #4]
 81038fe:	091b      	lsrs	r3, r3, #4
 8103900:	f003 0201 	and.w	r2, r3, #1
 8103904:	69fb      	ldr	r3, [r7, #28]
 8103906:	fa02 f303 	lsl.w	r3, r2, r3
 810390a:	69ba      	ldr	r2, [r7, #24]
 810390c:	4313      	orrs	r3, r2
 810390e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8103910:	687b      	ldr	r3, [r7, #4]
 8103912:	69ba      	ldr	r2, [r7, #24]
 8103914:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8103916:	683b      	ldr	r3, [r7, #0]
 8103918:	685b      	ldr	r3, [r3, #4]
 810391a:	f003 0303 	and.w	r3, r3, #3
 810391e:	2b03      	cmp	r3, #3
 8103920:	d017      	beq.n	8103952 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8103922:	687b      	ldr	r3, [r7, #4]
 8103924:	68db      	ldr	r3, [r3, #12]
 8103926:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8103928:	69fb      	ldr	r3, [r7, #28]
 810392a:	005b      	lsls	r3, r3, #1
 810392c:	2203      	movs	r2, #3
 810392e:	fa02 f303 	lsl.w	r3, r2, r3
 8103932:	43db      	mvns	r3, r3
 8103934:	69ba      	ldr	r2, [r7, #24]
 8103936:	4013      	ands	r3, r2
 8103938:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810393a:	683b      	ldr	r3, [r7, #0]
 810393c:	689a      	ldr	r2, [r3, #8]
 810393e:	69fb      	ldr	r3, [r7, #28]
 8103940:	005b      	lsls	r3, r3, #1
 8103942:	fa02 f303 	lsl.w	r3, r2, r3
 8103946:	69ba      	ldr	r2, [r7, #24]
 8103948:	4313      	orrs	r3, r2
 810394a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810394c:	687b      	ldr	r3, [r7, #4]
 810394e:	69ba      	ldr	r2, [r7, #24]
 8103950:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8103952:	683b      	ldr	r3, [r7, #0]
 8103954:	685b      	ldr	r3, [r3, #4]
 8103956:	f003 0303 	and.w	r3, r3, #3
 810395a:	2b02      	cmp	r3, #2
 810395c:	d123      	bne.n	81039a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810395e:	69fb      	ldr	r3, [r7, #28]
 8103960:	08da      	lsrs	r2, r3, #3
 8103962:	687b      	ldr	r3, [r7, #4]
 8103964:	3208      	adds	r2, #8
 8103966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810396a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810396c:	69fb      	ldr	r3, [r7, #28]
 810396e:	f003 0307 	and.w	r3, r3, #7
 8103972:	009b      	lsls	r3, r3, #2
 8103974:	220f      	movs	r2, #15
 8103976:	fa02 f303 	lsl.w	r3, r2, r3
 810397a:	43db      	mvns	r3, r3
 810397c:	69ba      	ldr	r2, [r7, #24]
 810397e:	4013      	ands	r3, r2
 8103980:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103982:	683b      	ldr	r3, [r7, #0]
 8103984:	691a      	ldr	r2, [r3, #16]
 8103986:	69fb      	ldr	r3, [r7, #28]
 8103988:	f003 0307 	and.w	r3, r3, #7
 810398c:	009b      	lsls	r3, r3, #2
 810398e:	fa02 f303 	lsl.w	r3, r2, r3
 8103992:	69ba      	ldr	r2, [r7, #24]
 8103994:	4313      	orrs	r3, r2
 8103996:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103998:	69fb      	ldr	r3, [r7, #28]
 810399a:	08da      	lsrs	r2, r3, #3
 810399c:	687b      	ldr	r3, [r7, #4]
 810399e:	3208      	adds	r2, #8
 81039a0:	69b9      	ldr	r1, [r7, #24]
 81039a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81039a6:	687b      	ldr	r3, [r7, #4]
 81039a8:	681b      	ldr	r3, [r3, #0]
 81039aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81039ac:	69fb      	ldr	r3, [r7, #28]
 81039ae:	005b      	lsls	r3, r3, #1
 81039b0:	2203      	movs	r2, #3
 81039b2:	fa02 f303 	lsl.w	r3, r2, r3
 81039b6:	43db      	mvns	r3, r3
 81039b8:	69ba      	ldr	r2, [r7, #24]
 81039ba:	4013      	ands	r3, r2
 81039bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81039be:	683b      	ldr	r3, [r7, #0]
 81039c0:	685b      	ldr	r3, [r3, #4]
 81039c2:	f003 0203 	and.w	r2, r3, #3
 81039c6:	69fb      	ldr	r3, [r7, #28]
 81039c8:	005b      	lsls	r3, r3, #1
 81039ca:	fa02 f303 	lsl.w	r3, r2, r3
 81039ce:	69ba      	ldr	r2, [r7, #24]
 81039d0:	4313      	orrs	r3, r2
 81039d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81039d4:	687b      	ldr	r3, [r7, #4]
 81039d6:	69ba      	ldr	r2, [r7, #24]
 81039d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81039da:	683b      	ldr	r3, [r7, #0]
 81039dc:	685b      	ldr	r3, [r3, #4]
 81039de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81039e2:	2b00      	cmp	r3, #0
 81039e4:	f000 80e0 	beq.w	8103ba8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81039e8:	4b2f      	ldr	r3, [pc, #188]	; (8103aa8 <HAL_GPIO_Init+0x238>)
 81039ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81039ee:	4a2e      	ldr	r2, [pc, #184]	; (8103aa8 <HAL_GPIO_Init+0x238>)
 81039f0:	f043 0302 	orr.w	r3, r3, #2
 81039f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81039f8:	4b2b      	ldr	r3, [pc, #172]	; (8103aa8 <HAL_GPIO_Init+0x238>)
 81039fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81039fe:	f003 0302 	and.w	r3, r3, #2
 8103a02:	60fb      	str	r3, [r7, #12]
 8103a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8103a06:	4a29      	ldr	r2, [pc, #164]	; (8103aac <HAL_GPIO_Init+0x23c>)
 8103a08:	69fb      	ldr	r3, [r7, #28]
 8103a0a:	089b      	lsrs	r3, r3, #2
 8103a0c:	3302      	adds	r3, #2
 8103a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8103a14:	69fb      	ldr	r3, [r7, #28]
 8103a16:	f003 0303 	and.w	r3, r3, #3
 8103a1a:	009b      	lsls	r3, r3, #2
 8103a1c:	220f      	movs	r2, #15
 8103a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8103a22:	43db      	mvns	r3, r3
 8103a24:	69ba      	ldr	r2, [r7, #24]
 8103a26:	4013      	ands	r3, r2
 8103a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8103a2a:	687b      	ldr	r3, [r7, #4]
 8103a2c:	4a20      	ldr	r2, [pc, #128]	; (8103ab0 <HAL_GPIO_Init+0x240>)
 8103a2e:	4293      	cmp	r3, r2
 8103a30:	d052      	beq.n	8103ad8 <HAL_GPIO_Init+0x268>
 8103a32:	687b      	ldr	r3, [r7, #4]
 8103a34:	4a1f      	ldr	r2, [pc, #124]	; (8103ab4 <HAL_GPIO_Init+0x244>)
 8103a36:	4293      	cmp	r3, r2
 8103a38:	d031      	beq.n	8103a9e <HAL_GPIO_Init+0x22e>
 8103a3a:	687b      	ldr	r3, [r7, #4]
 8103a3c:	4a1e      	ldr	r2, [pc, #120]	; (8103ab8 <HAL_GPIO_Init+0x248>)
 8103a3e:	4293      	cmp	r3, r2
 8103a40:	d02b      	beq.n	8103a9a <HAL_GPIO_Init+0x22a>
 8103a42:	687b      	ldr	r3, [r7, #4]
 8103a44:	4a1d      	ldr	r2, [pc, #116]	; (8103abc <HAL_GPIO_Init+0x24c>)
 8103a46:	4293      	cmp	r3, r2
 8103a48:	d025      	beq.n	8103a96 <HAL_GPIO_Init+0x226>
 8103a4a:	687b      	ldr	r3, [r7, #4]
 8103a4c:	4a1c      	ldr	r2, [pc, #112]	; (8103ac0 <HAL_GPIO_Init+0x250>)
 8103a4e:	4293      	cmp	r3, r2
 8103a50:	d01f      	beq.n	8103a92 <HAL_GPIO_Init+0x222>
 8103a52:	687b      	ldr	r3, [r7, #4]
 8103a54:	4a1b      	ldr	r2, [pc, #108]	; (8103ac4 <HAL_GPIO_Init+0x254>)
 8103a56:	4293      	cmp	r3, r2
 8103a58:	d019      	beq.n	8103a8e <HAL_GPIO_Init+0x21e>
 8103a5a:	687b      	ldr	r3, [r7, #4]
 8103a5c:	4a1a      	ldr	r2, [pc, #104]	; (8103ac8 <HAL_GPIO_Init+0x258>)
 8103a5e:	4293      	cmp	r3, r2
 8103a60:	d013      	beq.n	8103a8a <HAL_GPIO_Init+0x21a>
 8103a62:	687b      	ldr	r3, [r7, #4]
 8103a64:	4a19      	ldr	r2, [pc, #100]	; (8103acc <HAL_GPIO_Init+0x25c>)
 8103a66:	4293      	cmp	r3, r2
 8103a68:	d00d      	beq.n	8103a86 <HAL_GPIO_Init+0x216>
 8103a6a:	687b      	ldr	r3, [r7, #4]
 8103a6c:	4a18      	ldr	r2, [pc, #96]	; (8103ad0 <HAL_GPIO_Init+0x260>)
 8103a6e:	4293      	cmp	r3, r2
 8103a70:	d007      	beq.n	8103a82 <HAL_GPIO_Init+0x212>
 8103a72:	687b      	ldr	r3, [r7, #4]
 8103a74:	4a17      	ldr	r2, [pc, #92]	; (8103ad4 <HAL_GPIO_Init+0x264>)
 8103a76:	4293      	cmp	r3, r2
 8103a78:	d101      	bne.n	8103a7e <HAL_GPIO_Init+0x20e>
 8103a7a:	2309      	movs	r3, #9
 8103a7c:	e02d      	b.n	8103ada <HAL_GPIO_Init+0x26a>
 8103a7e:	230a      	movs	r3, #10
 8103a80:	e02b      	b.n	8103ada <HAL_GPIO_Init+0x26a>
 8103a82:	2308      	movs	r3, #8
 8103a84:	e029      	b.n	8103ada <HAL_GPIO_Init+0x26a>
 8103a86:	2307      	movs	r3, #7
 8103a88:	e027      	b.n	8103ada <HAL_GPIO_Init+0x26a>
 8103a8a:	2306      	movs	r3, #6
 8103a8c:	e025      	b.n	8103ada <HAL_GPIO_Init+0x26a>
 8103a8e:	2305      	movs	r3, #5
 8103a90:	e023      	b.n	8103ada <HAL_GPIO_Init+0x26a>
 8103a92:	2304      	movs	r3, #4
 8103a94:	e021      	b.n	8103ada <HAL_GPIO_Init+0x26a>
 8103a96:	2303      	movs	r3, #3
 8103a98:	e01f      	b.n	8103ada <HAL_GPIO_Init+0x26a>
 8103a9a:	2302      	movs	r3, #2
 8103a9c:	e01d      	b.n	8103ada <HAL_GPIO_Init+0x26a>
 8103a9e:	2301      	movs	r3, #1
 8103aa0:	e01b      	b.n	8103ada <HAL_GPIO_Init+0x26a>
 8103aa2:	bf00      	nop
 8103aa4:	580000c0 	.word	0x580000c0
 8103aa8:	58024400 	.word	0x58024400
 8103aac:	58000400 	.word	0x58000400
 8103ab0:	58020000 	.word	0x58020000
 8103ab4:	58020400 	.word	0x58020400
 8103ab8:	58020800 	.word	0x58020800
 8103abc:	58020c00 	.word	0x58020c00
 8103ac0:	58021000 	.word	0x58021000
 8103ac4:	58021400 	.word	0x58021400
 8103ac8:	58021800 	.word	0x58021800
 8103acc:	58021c00 	.word	0x58021c00
 8103ad0:	58022000 	.word	0x58022000
 8103ad4:	58022400 	.word	0x58022400
 8103ad8:	2300      	movs	r3, #0
 8103ada:	69fa      	ldr	r2, [r7, #28]
 8103adc:	f002 0203 	and.w	r2, r2, #3
 8103ae0:	0092      	lsls	r2, r2, #2
 8103ae2:	4093      	lsls	r3, r2
 8103ae4:	69ba      	ldr	r2, [r7, #24]
 8103ae6:	4313      	orrs	r3, r2
 8103ae8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8103aea:	4938      	ldr	r1, [pc, #224]	; (8103bcc <HAL_GPIO_Init+0x35c>)
 8103aec:	69fb      	ldr	r3, [r7, #28]
 8103aee:	089b      	lsrs	r3, r3, #2
 8103af0:	3302      	adds	r3, #2
 8103af2:	69ba      	ldr	r2, [r7, #24]
 8103af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103afc:	681b      	ldr	r3, [r3, #0]
 8103afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103b00:	693b      	ldr	r3, [r7, #16]
 8103b02:	43db      	mvns	r3, r3
 8103b04:	69ba      	ldr	r2, [r7, #24]
 8103b06:	4013      	ands	r3, r2
 8103b08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8103b0a:	683b      	ldr	r3, [r7, #0]
 8103b0c:	685b      	ldr	r3, [r3, #4]
 8103b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103b12:	2b00      	cmp	r3, #0
 8103b14:	d003      	beq.n	8103b1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8103b16:	69ba      	ldr	r2, [r7, #24]
 8103b18:	693b      	ldr	r3, [r7, #16]
 8103b1a:	4313      	orrs	r3, r2
 8103b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103b1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103b22:	69bb      	ldr	r3, [r7, #24]
 8103b24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8103b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103b2a:	685b      	ldr	r3, [r3, #4]
 8103b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103b2e:	693b      	ldr	r3, [r7, #16]
 8103b30:	43db      	mvns	r3, r3
 8103b32:	69ba      	ldr	r2, [r7, #24]
 8103b34:	4013      	ands	r3, r2
 8103b36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103b38:	683b      	ldr	r3, [r7, #0]
 8103b3a:	685b      	ldr	r3, [r3, #4]
 8103b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103b40:	2b00      	cmp	r3, #0
 8103b42:	d003      	beq.n	8103b4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8103b44:	69ba      	ldr	r2, [r7, #24]
 8103b46:	693b      	ldr	r3, [r7, #16]
 8103b48:	4313      	orrs	r3, r2
 8103b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103b4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103b50:	69bb      	ldr	r3, [r7, #24]
 8103b52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8103b54:	697b      	ldr	r3, [r7, #20]
 8103b56:	685b      	ldr	r3, [r3, #4]
 8103b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103b5a:	693b      	ldr	r3, [r7, #16]
 8103b5c:	43db      	mvns	r3, r3
 8103b5e:	69ba      	ldr	r2, [r7, #24]
 8103b60:	4013      	ands	r3, r2
 8103b62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103b64:	683b      	ldr	r3, [r7, #0]
 8103b66:	685b      	ldr	r3, [r3, #4]
 8103b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103b6c:	2b00      	cmp	r3, #0
 8103b6e:	d003      	beq.n	8103b78 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103b70:	69ba      	ldr	r2, [r7, #24]
 8103b72:	693b      	ldr	r3, [r7, #16]
 8103b74:	4313      	orrs	r3, r2
 8103b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103b78:	697b      	ldr	r3, [r7, #20]
 8103b7a:	69ba      	ldr	r2, [r7, #24]
 8103b7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103b7e:	697b      	ldr	r3, [r7, #20]
 8103b80:	681b      	ldr	r3, [r3, #0]
 8103b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103b84:	693b      	ldr	r3, [r7, #16]
 8103b86:	43db      	mvns	r3, r3
 8103b88:	69ba      	ldr	r2, [r7, #24]
 8103b8a:	4013      	ands	r3, r2
 8103b8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8103b8e:	683b      	ldr	r3, [r7, #0]
 8103b90:	685b      	ldr	r3, [r3, #4]
 8103b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103b96:	2b00      	cmp	r3, #0
 8103b98:	d003      	beq.n	8103ba2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8103b9a:	69ba      	ldr	r2, [r7, #24]
 8103b9c:	693b      	ldr	r3, [r7, #16]
 8103b9e:	4313      	orrs	r3, r2
 8103ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103ba2:	697b      	ldr	r3, [r7, #20]
 8103ba4:	69ba      	ldr	r2, [r7, #24]
 8103ba6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103ba8:	69fb      	ldr	r3, [r7, #28]
 8103baa:	3301      	adds	r3, #1
 8103bac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103bae:	683b      	ldr	r3, [r7, #0]
 8103bb0:	681a      	ldr	r2, [r3, #0]
 8103bb2:	69fb      	ldr	r3, [r7, #28]
 8103bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8103bb8:	2b00      	cmp	r3, #0
 8103bba:	f47f ae63 	bne.w	8103884 <HAL_GPIO_Init+0x14>
  }
}
 8103bbe:	bf00      	nop
 8103bc0:	bf00      	nop
 8103bc2:	3724      	adds	r7, #36	; 0x24
 8103bc4:	46bd      	mov	sp, r7
 8103bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bca:	4770      	bx	lr
 8103bcc:	58000400 	.word	0x58000400

08103bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103bd0:	b480      	push	{r7}
 8103bd2:	b083      	sub	sp, #12
 8103bd4:	af00      	add	r7, sp, #0
 8103bd6:	6078      	str	r0, [r7, #4]
 8103bd8:	460b      	mov	r3, r1
 8103bda:	807b      	strh	r3, [r7, #2]
 8103bdc:	4613      	mov	r3, r2
 8103bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103be0:	787b      	ldrb	r3, [r7, #1]
 8103be2:	2b00      	cmp	r3, #0
 8103be4:	d003      	beq.n	8103bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8103be6:	887a      	ldrh	r2, [r7, #2]
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8103bec:	e003      	b.n	8103bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8103bee:	887b      	ldrh	r3, [r7, #2]
 8103bf0:	041a      	lsls	r2, r3, #16
 8103bf2:	687b      	ldr	r3, [r7, #4]
 8103bf4:	619a      	str	r2, [r3, #24]
}
 8103bf6:	bf00      	nop
 8103bf8:	370c      	adds	r7, #12
 8103bfa:	46bd      	mov	sp, r7
 8103bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c00:	4770      	bx	lr

08103c02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8103c02:	b480      	push	{r7}
 8103c04:	b085      	sub	sp, #20
 8103c06:	af00      	add	r7, sp, #0
 8103c08:	6078      	str	r0, [r7, #4]
 8103c0a:	460b      	mov	r3, r1
 8103c0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8103c0e:	687b      	ldr	r3, [r7, #4]
 8103c10:	695b      	ldr	r3, [r3, #20]
 8103c12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8103c14:	887a      	ldrh	r2, [r7, #2]
 8103c16:	68fb      	ldr	r3, [r7, #12]
 8103c18:	4013      	ands	r3, r2
 8103c1a:	041a      	lsls	r2, r3, #16
 8103c1c:	68fb      	ldr	r3, [r7, #12]
 8103c1e:	43d9      	mvns	r1, r3
 8103c20:	887b      	ldrh	r3, [r7, #2]
 8103c22:	400b      	ands	r3, r1
 8103c24:	431a      	orrs	r2, r3
 8103c26:	687b      	ldr	r3, [r7, #4]
 8103c28:	619a      	str	r2, [r3, #24]
}
 8103c2a:	bf00      	nop
 8103c2c:	3714      	adds	r7, #20
 8103c2e:	46bd      	mov	sp, r7
 8103c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c34:	4770      	bx	lr

08103c36 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8103c36:	b580      	push	{r7, lr}
 8103c38:	b082      	sub	sp, #8
 8103c3a:	af00      	add	r7, sp, #0
 8103c3c:	4603      	mov	r3, r0
 8103c3e:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8103c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103c44:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8103c48:	88fb      	ldrh	r3, [r7, #6]
 8103c4a:	4013      	ands	r3, r2
 8103c4c:	2b00      	cmp	r3, #0
 8103c4e:	d008      	beq.n	8103c62 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8103c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103c54:	88fb      	ldrh	r3, [r7, #6]
 8103c56:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8103c5a:	88fb      	ldrh	r3, [r7, #6]
 8103c5c:	4618      	mov	r0, r3
 8103c5e:	f7fd fc33 	bl	81014c8 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8103c62:	bf00      	nop
 8103c64:	3708      	adds	r7, #8
 8103c66:	46bd      	mov	sp, r7
 8103c68:	bd80      	pop	{r7, pc}
	...

08103c6c <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8103c6c:	b480      	push	{r7}
 8103c6e:	b083      	sub	sp, #12
 8103c70:	af00      	add	r7, sp, #0
 8103c72:	6078      	str	r0, [r7, #4]
 8103c74:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8103c76:	490e      	ldr	r1, [pc, #56]	; (8103cb0 <HAL_HSEM_Take+0x44>)
 8103c78:	683b      	ldr	r3, [r7, #0]
 8103c7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8103c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103c82:	687a      	ldr	r2, [r7, #4]
 8103c84:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8103c88:	4a09      	ldr	r2, [pc, #36]	; (8103cb0 <HAL_HSEM_Take+0x44>)
 8103c8a:	687b      	ldr	r3, [r7, #4]
 8103c8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8103c90:	683b      	ldr	r3, [r7, #0]
 8103c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8103c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103c9a:	429a      	cmp	r2, r3
 8103c9c:	d101      	bne.n	8103ca2 <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8103c9e:	2300      	movs	r3, #0
 8103ca0:	e000      	b.n	8103ca4 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8103ca2:	2301      	movs	r3, #1
}
 8103ca4:	4618      	mov	r0, r3
 8103ca6:	370c      	adds	r7, #12
 8103ca8:	46bd      	mov	sp, r7
 8103caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cae:	4770      	bx	lr
 8103cb0:	58026400 	.word	0x58026400

08103cb4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8103cb4:	b480      	push	{r7}
 8103cb6:	b083      	sub	sp, #12
 8103cb8:	af00      	add	r7, sp, #0
 8103cba:	6078      	str	r0, [r7, #4]
 8103cbc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8103cbe:	4906      	ldr	r1, [pc, #24]	; (8103cd8 <HAL_HSEM_Release+0x24>)
 8103cc0:	683b      	ldr	r3, [r7, #0]
 8103cc2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8103cc6:	687b      	ldr	r3, [r7, #4]
 8103cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8103ccc:	bf00      	nop
 8103cce:	370c      	adds	r7, #12
 8103cd0:	46bd      	mov	sp, r7
 8103cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cd6:	4770      	bx	lr
 8103cd8:	58026400 	.word	0x58026400

08103cdc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103cdc:	b480      	push	{r7}
 8103cde:	b083      	sub	sp, #12
 8103ce0:	af00      	add	r7, sp, #0
 8103ce2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103ce4:	4b05      	ldr	r3, [pc, #20]	; (8103cfc <HAL_HSEM_ActivateNotification+0x20>)
 8103ce6:	681a      	ldr	r2, [r3, #0]
 8103ce8:	4904      	ldr	r1, [pc, #16]	; (8103cfc <HAL_HSEM_ActivateNotification+0x20>)
 8103cea:	687b      	ldr	r3, [r7, #4]
 8103cec:	4313      	orrs	r3, r2
 8103cee:	600b      	str	r3, [r1, #0]
#endif
}
 8103cf0:	bf00      	nop
 8103cf2:	370c      	adds	r7, #12
 8103cf4:	46bd      	mov	sp, r7
 8103cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cfa:	4770      	bx	lr
 8103cfc:	58026510 	.word	0x58026510

08103d00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8103d00:	b580      	push	{r7, lr}
 8103d02:	b082      	sub	sp, #8
 8103d04:	af00      	add	r7, sp, #0
 8103d06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8103d08:	687b      	ldr	r3, [r7, #4]
 8103d0a:	2b00      	cmp	r3, #0
 8103d0c:	d101      	bne.n	8103d12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8103d0e:	2301      	movs	r3, #1
 8103d10:	e081      	b.n	8103e16 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8103d12:	687b      	ldr	r3, [r7, #4]
 8103d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103d18:	b2db      	uxtb	r3, r3
 8103d1a:	2b00      	cmp	r3, #0
 8103d1c:	d106      	bne.n	8103d2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8103d1e:	687b      	ldr	r3, [r7, #4]
 8103d20:	2200      	movs	r2, #0
 8103d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8103d26:	6878      	ldr	r0, [r7, #4]
 8103d28:	f7fd fc1e 	bl	8101568 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8103d2c:	687b      	ldr	r3, [r7, #4]
 8103d2e:	2224      	movs	r2, #36	; 0x24
 8103d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8103d34:	687b      	ldr	r3, [r7, #4]
 8103d36:	681b      	ldr	r3, [r3, #0]
 8103d38:	681a      	ldr	r2, [r3, #0]
 8103d3a:	687b      	ldr	r3, [r7, #4]
 8103d3c:	681b      	ldr	r3, [r3, #0]
 8103d3e:	f022 0201 	bic.w	r2, r2, #1
 8103d42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8103d44:	687b      	ldr	r3, [r7, #4]
 8103d46:	685a      	ldr	r2, [r3, #4]
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	681b      	ldr	r3, [r3, #0]
 8103d4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8103d50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8103d52:	687b      	ldr	r3, [r7, #4]
 8103d54:	681b      	ldr	r3, [r3, #0]
 8103d56:	689a      	ldr	r2, [r3, #8]
 8103d58:	687b      	ldr	r3, [r7, #4]
 8103d5a:	681b      	ldr	r3, [r3, #0]
 8103d5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8103d60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8103d62:	687b      	ldr	r3, [r7, #4]
 8103d64:	68db      	ldr	r3, [r3, #12]
 8103d66:	2b01      	cmp	r3, #1
 8103d68:	d107      	bne.n	8103d7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8103d6a:	687b      	ldr	r3, [r7, #4]
 8103d6c:	689a      	ldr	r2, [r3, #8]
 8103d6e:	687b      	ldr	r3, [r7, #4]
 8103d70:	681b      	ldr	r3, [r3, #0]
 8103d72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8103d76:	609a      	str	r2, [r3, #8]
 8103d78:	e006      	b.n	8103d88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8103d7a:	687b      	ldr	r3, [r7, #4]
 8103d7c:	689a      	ldr	r2, [r3, #8]
 8103d7e:	687b      	ldr	r3, [r7, #4]
 8103d80:	681b      	ldr	r3, [r3, #0]
 8103d82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8103d86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8103d88:	687b      	ldr	r3, [r7, #4]
 8103d8a:	68db      	ldr	r3, [r3, #12]
 8103d8c:	2b02      	cmp	r3, #2
 8103d8e:	d104      	bne.n	8103d9a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8103d90:	687b      	ldr	r3, [r7, #4]
 8103d92:	681b      	ldr	r3, [r3, #0]
 8103d94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8103d98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8103d9a:	687b      	ldr	r3, [r7, #4]
 8103d9c:	681b      	ldr	r3, [r3, #0]
 8103d9e:	685b      	ldr	r3, [r3, #4]
 8103da0:	687a      	ldr	r2, [r7, #4]
 8103da2:	6812      	ldr	r2, [r2, #0]
 8103da4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8103dac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8103dae:	687b      	ldr	r3, [r7, #4]
 8103db0:	681b      	ldr	r3, [r3, #0]
 8103db2:	68da      	ldr	r2, [r3, #12]
 8103db4:	687b      	ldr	r3, [r7, #4]
 8103db6:	681b      	ldr	r3, [r3, #0]
 8103db8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8103dbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8103dbe:	687b      	ldr	r3, [r7, #4]
 8103dc0:	691a      	ldr	r2, [r3, #16]
 8103dc2:	687b      	ldr	r3, [r7, #4]
 8103dc4:	695b      	ldr	r3, [r3, #20]
 8103dc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8103dca:	687b      	ldr	r3, [r7, #4]
 8103dcc:	699b      	ldr	r3, [r3, #24]
 8103dce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8103dd0:	687b      	ldr	r3, [r7, #4]
 8103dd2:	681b      	ldr	r3, [r3, #0]
 8103dd4:	430a      	orrs	r2, r1
 8103dd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8103dd8:	687b      	ldr	r3, [r7, #4]
 8103dda:	69d9      	ldr	r1, [r3, #28]
 8103ddc:	687b      	ldr	r3, [r7, #4]
 8103dde:	6a1a      	ldr	r2, [r3, #32]
 8103de0:	687b      	ldr	r3, [r7, #4]
 8103de2:	681b      	ldr	r3, [r3, #0]
 8103de4:	430a      	orrs	r2, r1
 8103de6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8103de8:	687b      	ldr	r3, [r7, #4]
 8103dea:	681b      	ldr	r3, [r3, #0]
 8103dec:	681a      	ldr	r2, [r3, #0]
 8103dee:	687b      	ldr	r3, [r7, #4]
 8103df0:	681b      	ldr	r3, [r3, #0]
 8103df2:	f042 0201 	orr.w	r2, r2, #1
 8103df6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103df8:	687b      	ldr	r3, [r7, #4]
 8103dfa:	2200      	movs	r2, #0
 8103dfc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8103dfe:	687b      	ldr	r3, [r7, #4]
 8103e00:	2220      	movs	r2, #32
 8103e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8103e06:	687b      	ldr	r3, [r7, #4]
 8103e08:	2200      	movs	r2, #0
 8103e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8103e0c:	687b      	ldr	r3, [r7, #4]
 8103e0e:	2200      	movs	r2, #0
 8103e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8103e14:	2300      	movs	r3, #0
}
 8103e16:	4618      	mov	r0, r3
 8103e18:	3708      	adds	r7, #8
 8103e1a:	46bd      	mov	sp, r7
 8103e1c:	bd80      	pop	{r7, pc}
	...

08103e20 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103e20:	b580      	push	{r7, lr}
 8103e22:	b088      	sub	sp, #32
 8103e24:	af02      	add	r7, sp, #8
 8103e26:	60f8      	str	r0, [r7, #12]
 8103e28:	4608      	mov	r0, r1
 8103e2a:	4611      	mov	r1, r2
 8103e2c:	461a      	mov	r2, r3
 8103e2e:	4603      	mov	r3, r0
 8103e30:	817b      	strh	r3, [r7, #10]
 8103e32:	460b      	mov	r3, r1
 8103e34:	813b      	strh	r3, [r7, #8]
 8103e36:	4613      	mov	r3, r2
 8103e38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103e3a:	68fb      	ldr	r3, [r7, #12]
 8103e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103e40:	b2db      	uxtb	r3, r3
 8103e42:	2b20      	cmp	r3, #32
 8103e44:	f040 80fd 	bne.w	8104042 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8103e48:	6a3b      	ldr	r3, [r7, #32]
 8103e4a:	2b00      	cmp	r3, #0
 8103e4c:	d002      	beq.n	8103e54 <HAL_I2C_Mem_Read+0x34>
 8103e4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8103e50:	2b00      	cmp	r3, #0
 8103e52:	d105      	bne.n	8103e60 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8103e54:	68fb      	ldr	r3, [r7, #12]
 8103e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8103e5a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8103e5c:	2301      	movs	r3, #1
 8103e5e:	e0f1      	b.n	8104044 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103e60:	68fb      	ldr	r3, [r7, #12]
 8103e62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103e66:	2b01      	cmp	r3, #1
 8103e68:	d101      	bne.n	8103e6e <HAL_I2C_Mem_Read+0x4e>
 8103e6a:	2302      	movs	r3, #2
 8103e6c:	e0ea      	b.n	8104044 <HAL_I2C_Mem_Read+0x224>
 8103e6e:	68fb      	ldr	r3, [r7, #12]
 8103e70:	2201      	movs	r2, #1
 8103e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8103e76:	f7fd fee7 	bl	8101c48 <HAL_GetTick>
 8103e7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8103e7c:	697b      	ldr	r3, [r7, #20]
 8103e7e:	9300      	str	r3, [sp, #0]
 8103e80:	2319      	movs	r3, #25
 8103e82:	2201      	movs	r2, #1
 8103e84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8103e88:	68f8      	ldr	r0, [r7, #12]
 8103e8a:	f000 f95b 	bl	8104144 <I2C_WaitOnFlagUntilTimeout>
 8103e8e:	4603      	mov	r3, r0
 8103e90:	2b00      	cmp	r3, #0
 8103e92:	d001      	beq.n	8103e98 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8103e94:	2301      	movs	r3, #1
 8103e96:	e0d5      	b.n	8104044 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8103e98:	68fb      	ldr	r3, [r7, #12]
 8103e9a:	2222      	movs	r2, #34	; 0x22
 8103e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8103ea0:	68fb      	ldr	r3, [r7, #12]
 8103ea2:	2240      	movs	r2, #64	; 0x40
 8103ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103ea8:	68fb      	ldr	r3, [r7, #12]
 8103eaa:	2200      	movs	r2, #0
 8103eac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8103eae:	68fb      	ldr	r3, [r7, #12]
 8103eb0:	6a3a      	ldr	r2, [r7, #32]
 8103eb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8103eb4:	68fb      	ldr	r3, [r7, #12]
 8103eb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8103eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8103eba:	68fb      	ldr	r3, [r7, #12]
 8103ebc:	2200      	movs	r2, #0
 8103ebe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8103ec0:	88f8      	ldrh	r0, [r7, #6]
 8103ec2:	893a      	ldrh	r2, [r7, #8]
 8103ec4:	8979      	ldrh	r1, [r7, #10]
 8103ec6:	697b      	ldr	r3, [r7, #20]
 8103ec8:	9301      	str	r3, [sp, #4]
 8103eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103ecc:	9300      	str	r3, [sp, #0]
 8103ece:	4603      	mov	r3, r0
 8103ed0:	68f8      	ldr	r0, [r7, #12]
 8103ed2:	f000 f8bf 	bl	8104054 <I2C_RequestMemoryRead>
 8103ed6:	4603      	mov	r3, r0
 8103ed8:	2b00      	cmp	r3, #0
 8103eda:	d005      	beq.n	8103ee8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8103edc:	68fb      	ldr	r3, [r7, #12]
 8103ede:	2200      	movs	r2, #0
 8103ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8103ee4:	2301      	movs	r3, #1
 8103ee6:	e0ad      	b.n	8104044 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103ee8:	68fb      	ldr	r3, [r7, #12]
 8103eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103eec:	b29b      	uxth	r3, r3
 8103eee:	2bff      	cmp	r3, #255	; 0xff
 8103ef0:	d90e      	bls.n	8103f10 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8103ef2:	68fb      	ldr	r3, [r7, #12]
 8103ef4:	22ff      	movs	r2, #255	; 0xff
 8103ef6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8103ef8:	68fb      	ldr	r3, [r7, #12]
 8103efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103efc:	b2da      	uxtb	r2, r3
 8103efe:	8979      	ldrh	r1, [r7, #10]
 8103f00:	4b52      	ldr	r3, [pc, #328]	; (810404c <HAL_I2C_Mem_Read+0x22c>)
 8103f02:	9300      	str	r3, [sp, #0]
 8103f04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103f08:	68f8      	ldr	r0, [r7, #12]
 8103f0a:	f000 fac3 	bl	8104494 <I2C_TransferConfig>
 8103f0e:	e00f      	b.n	8103f30 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8103f10:	68fb      	ldr	r3, [r7, #12]
 8103f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103f14:	b29a      	uxth	r2, r3
 8103f16:	68fb      	ldr	r3, [r7, #12]
 8103f18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103f1a:	68fb      	ldr	r3, [r7, #12]
 8103f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103f1e:	b2da      	uxtb	r2, r3
 8103f20:	8979      	ldrh	r1, [r7, #10]
 8103f22:	4b4a      	ldr	r3, [pc, #296]	; (810404c <HAL_I2C_Mem_Read+0x22c>)
 8103f24:	9300      	str	r3, [sp, #0]
 8103f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103f2a:	68f8      	ldr	r0, [r7, #12]
 8103f2c:	f000 fab2 	bl	8104494 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8103f30:	697b      	ldr	r3, [r7, #20]
 8103f32:	9300      	str	r3, [sp, #0]
 8103f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103f36:	2200      	movs	r2, #0
 8103f38:	2104      	movs	r1, #4
 8103f3a:	68f8      	ldr	r0, [r7, #12]
 8103f3c:	f000 f902 	bl	8104144 <I2C_WaitOnFlagUntilTimeout>
 8103f40:	4603      	mov	r3, r0
 8103f42:	2b00      	cmp	r3, #0
 8103f44:	d001      	beq.n	8103f4a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8103f46:	2301      	movs	r3, #1
 8103f48:	e07c      	b.n	8104044 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8103f4a:	68fb      	ldr	r3, [r7, #12]
 8103f4c:	681b      	ldr	r3, [r3, #0]
 8103f4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8103f50:	68fb      	ldr	r3, [r7, #12]
 8103f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103f54:	b2d2      	uxtb	r2, r2
 8103f56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103f58:	68fb      	ldr	r3, [r7, #12]
 8103f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103f5c:	1c5a      	adds	r2, r3, #1
 8103f5e:	68fb      	ldr	r3, [r7, #12]
 8103f60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8103f62:	68fb      	ldr	r3, [r7, #12]
 8103f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103f66:	3b01      	subs	r3, #1
 8103f68:	b29a      	uxth	r2, r3
 8103f6a:	68fb      	ldr	r3, [r7, #12]
 8103f6c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8103f6e:	68fb      	ldr	r3, [r7, #12]
 8103f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103f72:	b29b      	uxth	r3, r3
 8103f74:	3b01      	subs	r3, #1
 8103f76:	b29a      	uxth	r2, r3
 8103f78:	68fb      	ldr	r3, [r7, #12]
 8103f7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8103f7c:	68fb      	ldr	r3, [r7, #12]
 8103f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103f80:	b29b      	uxth	r3, r3
 8103f82:	2b00      	cmp	r3, #0
 8103f84:	d034      	beq.n	8103ff0 <HAL_I2C_Mem_Read+0x1d0>
 8103f86:	68fb      	ldr	r3, [r7, #12]
 8103f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103f8a:	2b00      	cmp	r3, #0
 8103f8c:	d130      	bne.n	8103ff0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8103f8e:	697b      	ldr	r3, [r7, #20]
 8103f90:	9300      	str	r3, [sp, #0]
 8103f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103f94:	2200      	movs	r2, #0
 8103f96:	2180      	movs	r1, #128	; 0x80
 8103f98:	68f8      	ldr	r0, [r7, #12]
 8103f9a:	f000 f8d3 	bl	8104144 <I2C_WaitOnFlagUntilTimeout>
 8103f9e:	4603      	mov	r3, r0
 8103fa0:	2b00      	cmp	r3, #0
 8103fa2:	d001      	beq.n	8103fa8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8103fa4:	2301      	movs	r3, #1
 8103fa6:	e04d      	b.n	8104044 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103fa8:	68fb      	ldr	r3, [r7, #12]
 8103faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103fac:	b29b      	uxth	r3, r3
 8103fae:	2bff      	cmp	r3, #255	; 0xff
 8103fb0:	d90e      	bls.n	8103fd0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8103fb2:	68fb      	ldr	r3, [r7, #12]
 8103fb4:	22ff      	movs	r2, #255	; 0xff
 8103fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8103fb8:	68fb      	ldr	r3, [r7, #12]
 8103fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103fbc:	b2da      	uxtb	r2, r3
 8103fbe:	8979      	ldrh	r1, [r7, #10]
 8103fc0:	2300      	movs	r3, #0
 8103fc2:	9300      	str	r3, [sp, #0]
 8103fc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103fc8:	68f8      	ldr	r0, [r7, #12]
 8103fca:	f000 fa63 	bl	8104494 <I2C_TransferConfig>
 8103fce:	e00f      	b.n	8103ff0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8103fd0:	68fb      	ldr	r3, [r7, #12]
 8103fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103fd4:	b29a      	uxth	r2, r3
 8103fd6:	68fb      	ldr	r3, [r7, #12]
 8103fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103fda:	68fb      	ldr	r3, [r7, #12]
 8103fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103fde:	b2da      	uxtb	r2, r3
 8103fe0:	8979      	ldrh	r1, [r7, #10]
 8103fe2:	2300      	movs	r3, #0
 8103fe4:	9300      	str	r3, [sp, #0]
 8103fe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103fea:	68f8      	ldr	r0, [r7, #12]
 8103fec:	f000 fa52 	bl	8104494 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8103ff0:	68fb      	ldr	r3, [r7, #12]
 8103ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103ff4:	b29b      	uxth	r3, r3
 8103ff6:	2b00      	cmp	r3, #0
 8103ff8:	d19a      	bne.n	8103f30 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103ffa:	697a      	ldr	r2, [r7, #20]
 8103ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8103ffe:	68f8      	ldr	r0, [r7, #12]
 8104000:	f000 f920 	bl	8104244 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104004:	4603      	mov	r3, r0
 8104006:	2b00      	cmp	r3, #0
 8104008:	d001      	beq.n	810400e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 810400a:	2301      	movs	r3, #1
 810400c:	e01a      	b.n	8104044 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810400e:	68fb      	ldr	r3, [r7, #12]
 8104010:	681b      	ldr	r3, [r3, #0]
 8104012:	2220      	movs	r2, #32
 8104014:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104016:	68fb      	ldr	r3, [r7, #12]
 8104018:	681b      	ldr	r3, [r3, #0]
 810401a:	6859      	ldr	r1, [r3, #4]
 810401c:	68fb      	ldr	r3, [r7, #12]
 810401e:	681a      	ldr	r2, [r3, #0]
 8104020:	4b0b      	ldr	r3, [pc, #44]	; (8104050 <HAL_I2C_Mem_Read+0x230>)
 8104022:	400b      	ands	r3, r1
 8104024:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8104026:	68fb      	ldr	r3, [r7, #12]
 8104028:	2220      	movs	r2, #32
 810402a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810402e:	68fb      	ldr	r3, [r7, #12]
 8104030:	2200      	movs	r2, #0
 8104032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104036:	68fb      	ldr	r3, [r7, #12]
 8104038:	2200      	movs	r2, #0
 810403a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810403e:	2300      	movs	r3, #0
 8104040:	e000      	b.n	8104044 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8104042:	2302      	movs	r3, #2
  }
}
 8104044:	4618      	mov	r0, r3
 8104046:	3718      	adds	r7, #24
 8104048:	46bd      	mov	sp, r7
 810404a:	bd80      	pop	{r7, pc}
 810404c:	80002400 	.word	0x80002400
 8104050:	fe00e800 	.word	0xfe00e800

08104054 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8104054:	b580      	push	{r7, lr}
 8104056:	b086      	sub	sp, #24
 8104058:	af02      	add	r7, sp, #8
 810405a:	60f8      	str	r0, [r7, #12]
 810405c:	4608      	mov	r0, r1
 810405e:	4611      	mov	r1, r2
 8104060:	461a      	mov	r2, r3
 8104062:	4603      	mov	r3, r0
 8104064:	817b      	strh	r3, [r7, #10]
 8104066:	460b      	mov	r3, r1
 8104068:	813b      	strh	r3, [r7, #8]
 810406a:	4613      	mov	r3, r2
 810406c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 810406e:	88fb      	ldrh	r3, [r7, #6]
 8104070:	b2da      	uxtb	r2, r3
 8104072:	8979      	ldrh	r1, [r7, #10]
 8104074:	4b20      	ldr	r3, [pc, #128]	; (81040f8 <I2C_RequestMemoryRead+0xa4>)
 8104076:	9300      	str	r3, [sp, #0]
 8104078:	2300      	movs	r3, #0
 810407a:	68f8      	ldr	r0, [r7, #12]
 810407c:	f000 fa0a 	bl	8104494 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104080:	69fa      	ldr	r2, [r7, #28]
 8104082:	69b9      	ldr	r1, [r7, #24]
 8104084:	68f8      	ldr	r0, [r7, #12]
 8104086:	f000 f89d 	bl	81041c4 <I2C_WaitOnTXISFlagUntilTimeout>
 810408a:	4603      	mov	r3, r0
 810408c:	2b00      	cmp	r3, #0
 810408e:	d001      	beq.n	8104094 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8104090:	2301      	movs	r3, #1
 8104092:	e02c      	b.n	81040ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8104094:	88fb      	ldrh	r3, [r7, #6]
 8104096:	2b01      	cmp	r3, #1
 8104098:	d105      	bne.n	81040a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810409a:	893b      	ldrh	r3, [r7, #8]
 810409c:	b2da      	uxtb	r2, r3
 810409e:	68fb      	ldr	r3, [r7, #12]
 81040a0:	681b      	ldr	r3, [r3, #0]
 81040a2:	629a      	str	r2, [r3, #40]	; 0x28
 81040a4:	e015      	b.n	81040d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81040a6:	893b      	ldrh	r3, [r7, #8]
 81040a8:	0a1b      	lsrs	r3, r3, #8
 81040aa:	b29b      	uxth	r3, r3
 81040ac:	b2da      	uxtb	r2, r3
 81040ae:	68fb      	ldr	r3, [r7, #12]
 81040b0:	681b      	ldr	r3, [r3, #0]
 81040b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81040b4:	69fa      	ldr	r2, [r7, #28]
 81040b6:	69b9      	ldr	r1, [r7, #24]
 81040b8:	68f8      	ldr	r0, [r7, #12]
 81040ba:	f000 f883 	bl	81041c4 <I2C_WaitOnTXISFlagUntilTimeout>
 81040be:	4603      	mov	r3, r0
 81040c0:	2b00      	cmp	r3, #0
 81040c2:	d001      	beq.n	81040c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 81040c4:	2301      	movs	r3, #1
 81040c6:	e012      	b.n	81040ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81040c8:	893b      	ldrh	r3, [r7, #8]
 81040ca:	b2da      	uxtb	r2, r3
 81040cc:	68fb      	ldr	r3, [r7, #12]
 81040ce:	681b      	ldr	r3, [r3, #0]
 81040d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 81040d2:	69fb      	ldr	r3, [r7, #28]
 81040d4:	9300      	str	r3, [sp, #0]
 81040d6:	69bb      	ldr	r3, [r7, #24]
 81040d8:	2200      	movs	r2, #0
 81040da:	2140      	movs	r1, #64	; 0x40
 81040dc:	68f8      	ldr	r0, [r7, #12]
 81040de:	f000 f831 	bl	8104144 <I2C_WaitOnFlagUntilTimeout>
 81040e2:	4603      	mov	r3, r0
 81040e4:	2b00      	cmp	r3, #0
 81040e6:	d001      	beq.n	81040ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 81040e8:	2301      	movs	r3, #1
 81040ea:	e000      	b.n	81040ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 81040ec:	2300      	movs	r3, #0
}
 81040ee:	4618      	mov	r0, r3
 81040f0:	3710      	adds	r7, #16
 81040f2:	46bd      	mov	sp, r7
 81040f4:	bd80      	pop	{r7, pc}
 81040f6:	bf00      	nop
 81040f8:	80002000 	.word	0x80002000

081040fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81040fc:	b480      	push	{r7}
 81040fe:	b083      	sub	sp, #12
 8104100:	af00      	add	r7, sp, #0
 8104102:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8104104:	687b      	ldr	r3, [r7, #4]
 8104106:	681b      	ldr	r3, [r3, #0]
 8104108:	699b      	ldr	r3, [r3, #24]
 810410a:	f003 0302 	and.w	r3, r3, #2
 810410e:	2b02      	cmp	r3, #2
 8104110:	d103      	bne.n	810411a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8104112:	687b      	ldr	r3, [r7, #4]
 8104114:	681b      	ldr	r3, [r3, #0]
 8104116:	2200      	movs	r2, #0
 8104118:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810411a:	687b      	ldr	r3, [r7, #4]
 810411c:	681b      	ldr	r3, [r3, #0]
 810411e:	699b      	ldr	r3, [r3, #24]
 8104120:	f003 0301 	and.w	r3, r3, #1
 8104124:	2b01      	cmp	r3, #1
 8104126:	d007      	beq.n	8104138 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8104128:	687b      	ldr	r3, [r7, #4]
 810412a:	681b      	ldr	r3, [r3, #0]
 810412c:	699a      	ldr	r2, [r3, #24]
 810412e:	687b      	ldr	r3, [r7, #4]
 8104130:	681b      	ldr	r3, [r3, #0]
 8104132:	f042 0201 	orr.w	r2, r2, #1
 8104136:	619a      	str	r2, [r3, #24]
  }
}
 8104138:	bf00      	nop
 810413a:	370c      	adds	r7, #12
 810413c:	46bd      	mov	sp, r7
 810413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104142:	4770      	bx	lr

08104144 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8104144:	b580      	push	{r7, lr}
 8104146:	b084      	sub	sp, #16
 8104148:	af00      	add	r7, sp, #0
 810414a:	60f8      	str	r0, [r7, #12]
 810414c:	60b9      	str	r1, [r7, #8]
 810414e:	603b      	str	r3, [r7, #0]
 8104150:	4613      	mov	r3, r2
 8104152:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104154:	e022      	b.n	810419c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8104156:	683b      	ldr	r3, [r7, #0]
 8104158:	f1b3 3fff 	cmp.w	r3, #4294967295
 810415c:	d01e      	beq.n	810419c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810415e:	f7fd fd73 	bl	8101c48 <HAL_GetTick>
 8104162:	4602      	mov	r2, r0
 8104164:	69bb      	ldr	r3, [r7, #24]
 8104166:	1ad3      	subs	r3, r2, r3
 8104168:	683a      	ldr	r2, [r7, #0]
 810416a:	429a      	cmp	r2, r3
 810416c:	d302      	bcc.n	8104174 <I2C_WaitOnFlagUntilTimeout+0x30>
 810416e:	683b      	ldr	r3, [r7, #0]
 8104170:	2b00      	cmp	r3, #0
 8104172:	d113      	bne.n	810419c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104174:	68fb      	ldr	r3, [r7, #12]
 8104176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104178:	f043 0220 	orr.w	r2, r3, #32
 810417c:	68fb      	ldr	r3, [r7, #12]
 810417e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104180:	68fb      	ldr	r3, [r7, #12]
 8104182:	2220      	movs	r2, #32
 8104184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104188:	68fb      	ldr	r3, [r7, #12]
 810418a:	2200      	movs	r2, #0
 810418c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104190:	68fb      	ldr	r3, [r7, #12]
 8104192:	2200      	movs	r2, #0
 8104194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8104198:	2301      	movs	r3, #1
 810419a:	e00f      	b.n	81041bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810419c:	68fb      	ldr	r3, [r7, #12]
 810419e:	681b      	ldr	r3, [r3, #0]
 81041a0:	699a      	ldr	r2, [r3, #24]
 81041a2:	68bb      	ldr	r3, [r7, #8]
 81041a4:	4013      	ands	r3, r2
 81041a6:	68ba      	ldr	r2, [r7, #8]
 81041a8:	429a      	cmp	r2, r3
 81041aa:	bf0c      	ite	eq
 81041ac:	2301      	moveq	r3, #1
 81041ae:	2300      	movne	r3, #0
 81041b0:	b2db      	uxtb	r3, r3
 81041b2:	461a      	mov	r2, r3
 81041b4:	79fb      	ldrb	r3, [r7, #7]
 81041b6:	429a      	cmp	r2, r3
 81041b8:	d0cd      	beq.n	8104156 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 81041ba:	2300      	movs	r3, #0
}
 81041bc:	4618      	mov	r0, r3
 81041be:	3710      	adds	r7, #16
 81041c0:	46bd      	mov	sp, r7
 81041c2:	bd80      	pop	{r7, pc}

081041c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81041c4:	b580      	push	{r7, lr}
 81041c6:	b084      	sub	sp, #16
 81041c8:	af00      	add	r7, sp, #0
 81041ca:	60f8      	str	r0, [r7, #12]
 81041cc:	60b9      	str	r1, [r7, #8]
 81041ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81041d0:	e02c      	b.n	810422c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81041d2:	687a      	ldr	r2, [r7, #4]
 81041d4:	68b9      	ldr	r1, [r7, #8]
 81041d6:	68f8      	ldr	r0, [r7, #12]
 81041d8:	f000 f870 	bl	81042bc <I2C_IsErrorOccurred>
 81041dc:	4603      	mov	r3, r0
 81041de:	2b00      	cmp	r3, #0
 81041e0:	d001      	beq.n	81041e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81041e2:	2301      	movs	r3, #1
 81041e4:	e02a      	b.n	810423c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81041e6:	68bb      	ldr	r3, [r7, #8]
 81041e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81041ec:	d01e      	beq.n	810422c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81041ee:	f7fd fd2b 	bl	8101c48 <HAL_GetTick>
 81041f2:	4602      	mov	r2, r0
 81041f4:	687b      	ldr	r3, [r7, #4]
 81041f6:	1ad3      	subs	r3, r2, r3
 81041f8:	68ba      	ldr	r2, [r7, #8]
 81041fa:	429a      	cmp	r2, r3
 81041fc:	d302      	bcc.n	8104204 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 81041fe:	68bb      	ldr	r3, [r7, #8]
 8104200:	2b00      	cmp	r3, #0
 8104202:	d113      	bne.n	810422c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104204:	68fb      	ldr	r3, [r7, #12]
 8104206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104208:	f043 0220 	orr.w	r2, r3, #32
 810420c:	68fb      	ldr	r3, [r7, #12]
 810420e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104210:	68fb      	ldr	r3, [r7, #12]
 8104212:	2220      	movs	r2, #32
 8104214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104218:	68fb      	ldr	r3, [r7, #12]
 810421a:	2200      	movs	r2, #0
 810421c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104220:	68fb      	ldr	r3, [r7, #12]
 8104222:	2200      	movs	r2, #0
 8104224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8104228:	2301      	movs	r3, #1
 810422a:	e007      	b.n	810423c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810422c:	68fb      	ldr	r3, [r7, #12]
 810422e:	681b      	ldr	r3, [r3, #0]
 8104230:	699b      	ldr	r3, [r3, #24]
 8104232:	f003 0302 	and.w	r3, r3, #2
 8104236:	2b02      	cmp	r3, #2
 8104238:	d1cb      	bne.n	81041d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 810423a:	2300      	movs	r3, #0
}
 810423c:	4618      	mov	r0, r3
 810423e:	3710      	adds	r7, #16
 8104240:	46bd      	mov	sp, r7
 8104242:	bd80      	pop	{r7, pc}

08104244 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8104244:	b580      	push	{r7, lr}
 8104246:	b084      	sub	sp, #16
 8104248:	af00      	add	r7, sp, #0
 810424a:	60f8      	str	r0, [r7, #12]
 810424c:	60b9      	str	r1, [r7, #8]
 810424e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104250:	e028      	b.n	81042a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8104252:	687a      	ldr	r2, [r7, #4]
 8104254:	68b9      	ldr	r1, [r7, #8]
 8104256:	68f8      	ldr	r0, [r7, #12]
 8104258:	f000 f830 	bl	81042bc <I2C_IsErrorOccurred>
 810425c:	4603      	mov	r3, r0
 810425e:	2b00      	cmp	r3, #0
 8104260:	d001      	beq.n	8104266 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8104262:	2301      	movs	r3, #1
 8104264:	e026      	b.n	81042b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104266:	f7fd fcef 	bl	8101c48 <HAL_GetTick>
 810426a:	4602      	mov	r2, r0
 810426c:	687b      	ldr	r3, [r7, #4]
 810426e:	1ad3      	subs	r3, r2, r3
 8104270:	68ba      	ldr	r2, [r7, #8]
 8104272:	429a      	cmp	r2, r3
 8104274:	d302      	bcc.n	810427c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8104276:	68bb      	ldr	r3, [r7, #8]
 8104278:	2b00      	cmp	r3, #0
 810427a:	d113      	bne.n	81042a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810427c:	68fb      	ldr	r3, [r7, #12]
 810427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104280:	f043 0220 	orr.w	r2, r3, #32
 8104284:	68fb      	ldr	r3, [r7, #12]
 8104286:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8104288:	68fb      	ldr	r3, [r7, #12]
 810428a:	2220      	movs	r2, #32
 810428c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8104290:	68fb      	ldr	r3, [r7, #12]
 8104292:	2200      	movs	r2, #0
 8104294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8104298:	68fb      	ldr	r3, [r7, #12]
 810429a:	2200      	movs	r2, #0
 810429c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81042a0:	2301      	movs	r3, #1
 81042a2:	e007      	b.n	81042b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81042a4:	68fb      	ldr	r3, [r7, #12]
 81042a6:	681b      	ldr	r3, [r3, #0]
 81042a8:	699b      	ldr	r3, [r3, #24]
 81042aa:	f003 0320 	and.w	r3, r3, #32
 81042ae:	2b20      	cmp	r3, #32
 81042b0:	d1cf      	bne.n	8104252 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 81042b2:	2300      	movs	r3, #0
}
 81042b4:	4618      	mov	r0, r3
 81042b6:	3710      	adds	r7, #16
 81042b8:	46bd      	mov	sp, r7
 81042ba:	bd80      	pop	{r7, pc}

081042bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81042bc:	b580      	push	{r7, lr}
 81042be:	b08a      	sub	sp, #40	; 0x28
 81042c0:	af00      	add	r7, sp, #0
 81042c2:	60f8      	str	r0, [r7, #12]
 81042c4:	60b9      	str	r1, [r7, #8]
 81042c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81042c8:	2300      	movs	r3, #0
 81042ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 81042ce:	68fb      	ldr	r3, [r7, #12]
 81042d0:	681b      	ldr	r3, [r3, #0]
 81042d2:	699b      	ldr	r3, [r3, #24]
 81042d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 81042d6:	2300      	movs	r3, #0
 81042d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 81042da:	687b      	ldr	r3, [r7, #4]
 81042dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 81042de:	69bb      	ldr	r3, [r7, #24]
 81042e0:	f003 0310 	and.w	r3, r3, #16
 81042e4:	2b00      	cmp	r3, #0
 81042e6:	d075      	beq.n	81043d4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81042e8:	68fb      	ldr	r3, [r7, #12]
 81042ea:	681b      	ldr	r3, [r3, #0]
 81042ec:	2210      	movs	r2, #16
 81042ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81042f0:	e056      	b.n	81043a0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81042f2:	68bb      	ldr	r3, [r7, #8]
 81042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81042f8:	d052      	beq.n	81043a0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 81042fa:	f7fd fca5 	bl	8101c48 <HAL_GetTick>
 81042fe:	4602      	mov	r2, r0
 8104300:	69fb      	ldr	r3, [r7, #28]
 8104302:	1ad3      	subs	r3, r2, r3
 8104304:	68ba      	ldr	r2, [r7, #8]
 8104306:	429a      	cmp	r2, r3
 8104308:	d302      	bcc.n	8104310 <I2C_IsErrorOccurred+0x54>
 810430a:	68bb      	ldr	r3, [r7, #8]
 810430c:	2b00      	cmp	r3, #0
 810430e:	d147      	bne.n	81043a0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8104310:	68fb      	ldr	r3, [r7, #12]
 8104312:	681b      	ldr	r3, [r3, #0]
 8104314:	685b      	ldr	r3, [r3, #4]
 8104316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810431a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 810431c:	68fb      	ldr	r3, [r7, #12]
 810431e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8104322:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8104324:	68fb      	ldr	r3, [r7, #12]
 8104326:	681b      	ldr	r3, [r3, #0]
 8104328:	699b      	ldr	r3, [r3, #24]
 810432a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810432e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104332:	d12e      	bne.n	8104392 <I2C_IsErrorOccurred+0xd6>
 8104334:	697b      	ldr	r3, [r7, #20]
 8104336:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810433a:	d02a      	beq.n	8104392 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 810433c:	7cfb      	ldrb	r3, [r7, #19]
 810433e:	2b20      	cmp	r3, #32
 8104340:	d027      	beq.n	8104392 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8104342:	68fb      	ldr	r3, [r7, #12]
 8104344:	681b      	ldr	r3, [r3, #0]
 8104346:	685a      	ldr	r2, [r3, #4]
 8104348:	68fb      	ldr	r3, [r7, #12]
 810434a:	681b      	ldr	r3, [r3, #0]
 810434c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8104350:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8104352:	f7fd fc79 	bl	8101c48 <HAL_GetTick>
 8104356:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104358:	e01b      	b.n	8104392 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 810435a:	f7fd fc75 	bl	8101c48 <HAL_GetTick>
 810435e:	4602      	mov	r2, r0
 8104360:	69fb      	ldr	r3, [r7, #28]
 8104362:	1ad3      	subs	r3, r2, r3
 8104364:	2b19      	cmp	r3, #25
 8104366:	d914      	bls.n	8104392 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104368:	68fb      	ldr	r3, [r7, #12]
 810436a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810436c:	f043 0220 	orr.w	r2, r3, #32
 8104370:	68fb      	ldr	r3, [r7, #12]
 8104372:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8104374:	68fb      	ldr	r3, [r7, #12]
 8104376:	2220      	movs	r2, #32
 8104378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 810437c:	68fb      	ldr	r3, [r7, #12]
 810437e:	2200      	movs	r2, #0
 8104380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8104384:	68fb      	ldr	r3, [r7, #12]
 8104386:	2200      	movs	r2, #0
 8104388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 810438c:	2301      	movs	r3, #1
 810438e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104392:	68fb      	ldr	r3, [r7, #12]
 8104394:	681b      	ldr	r3, [r3, #0]
 8104396:	699b      	ldr	r3, [r3, #24]
 8104398:	f003 0320 	and.w	r3, r3, #32
 810439c:	2b20      	cmp	r3, #32
 810439e:	d1dc      	bne.n	810435a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81043a0:	68fb      	ldr	r3, [r7, #12]
 81043a2:	681b      	ldr	r3, [r3, #0]
 81043a4:	699b      	ldr	r3, [r3, #24]
 81043a6:	f003 0320 	and.w	r3, r3, #32
 81043aa:	2b20      	cmp	r3, #32
 81043ac:	d003      	beq.n	81043b6 <I2C_IsErrorOccurred+0xfa>
 81043ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81043b2:	2b00      	cmp	r3, #0
 81043b4:	d09d      	beq.n	81042f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 81043b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81043ba:	2b00      	cmp	r3, #0
 81043bc:	d103      	bne.n	81043c6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81043be:	68fb      	ldr	r3, [r7, #12]
 81043c0:	681b      	ldr	r3, [r3, #0]
 81043c2:	2220      	movs	r2, #32
 81043c4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 81043c6:	6a3b      	ldr	r3, [r7, #32]
 81043c8:	f043 0304 	orr.w	r3, r3, #4
 81043cc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 81043ce:	2301      	movs	r3, #1
 81043d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 81043d4:	68fb      	ldr	r3, [r7, #12]
 81043d6:	681b      	ldr	r3, [r3, #0]
 81043d8:	699b      	ldr	r3, [r3, #24]
 81043da:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 81043dc:	69bb      	ldr	r3, [r7, #24]
 81043de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81043e2:	2b00      	cmp	r3, #0
 81043e4:	d00b      	beq.n	81043fe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 81043e6:	6a3b      	ldr	r3, [r7, #32]
 81043e8:	f043 0301 	orr.w	r3, r3, #1
 81043ec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 81043ee:	68fb      	ldr	r3, [r7, #12]
 81043f0:	681b      	ldr	r3, [r3, #0]
 81043f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 81043f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81043f8:	2301      	movs	r3, #1
 81043fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 81043fe:	69bb      	ldr	r3, [r7, #24]
 8104400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8104404:	2b00      	cmp	r3, #0
 8104406:	d00b      	beq.n	8104420 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8104408:	6a3b      	ldr	r3, [r7, #32]
 810440a:	f043 0308 	orr.w	r3, r3, #8
 810440e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8104410:	68fb      	ldr	r3, [r7, #12]
 8104412:	681b      	ldr	r3, [r3, #0]
 8104414:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8104418:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810441a:	2301      	movs	r3, #1
 810441c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8104420:	69bb      	ldr	r3, [r7, #24]
 8104422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104426:	2b00      	cmp	r3, #0
 8104428:	d00b      	beq.n	8104442 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 810442a:	6a3b      	ldr	r3, [r7, #32]
 810442c:	f043 0302 	orr.w	r3, r3, #2
 8104430:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8104432:	68fb      	ldr	r3, [r7, #12]
 8104434:	681b      	ldr	r3, [r3, #0]
 8104436:	f44f 7200 	mov.w	r2, #512	; 0x200
 810443a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810443c:	2301      	movs	r3, #1
 810443e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8104442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8104446:	2b00      	cmp	r3, #0
 8104448:	d01c      	beq.n	8104484 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 810444a:	68f8      	ldr	r0, [r7, #12]
 810444c:	f7ff fe56 	bl	81040fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104450:	68fb      	ldr	r3, [r7, #12]
 8104452:	681b      	ldr	r3, [r3, #0]
 8104454:	6859      	ldr	r1, [r3, #4]
 8104456:	68fb      	ldr	r3, [r7, #12]
 8104458:	681a      	ldr	r2, [r3, #0]
 810445a:	4b0d      	ldr	r3, [pc, #52]	; (8104490 <I2C_IsErrorOccurred+0x1d4>)
 810445c:	400b      	ands	r3, r1
 810445e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8104460:	68fb      	ldr	r3, [r7, #12]
 8104462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8104464:	6a3b      	ldr	r3, [r7, #32]
 8104466:	431a      	orrs	r2, r3
 8104468:	68fb      	ldr	r3, [r7, #12]
 810446a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 810446c:	68fb      	ldr	r3, [r7, #12]
 810446e:	2220      	movs	r2, #32
 8104470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8104474:	68fb      	ldr	r3, [r7, #12]
 8104476:	2200      	movs	r2, #0
 8104478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810447c:	68fb      	ldr	r3, [r7, #12]
 810447e:	2200      	movs	r2, #0
 8104480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8104484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8104488:	4618      	mov	r0, r3
 810448a:	3728      	adds	r7, #40	; 0x28
 810448c:	46bd      	mov	sp, r7
 810448e:	bd80      	pop	{r7, pc}
 8104490:	fe00e800 	.word	0xfe00e800

08104494 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8104494:	b480      	push	{r7}
 8104496:	b087      	sub	sp, #28
 8104498:	af00      	add	r7, sp, #0
 810449a:	60f8      	str	r0, [r7, #12]
 810449c:	607b      	str	r3, [r7, #4]
 810449e:	460b      	mov	r3, r1
 81044a0:	817b      	strh	r3, [r7, #10]
 81044a2:	4613      	mov	r3, r2
 81044a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81044a6:	897b      	ldrh	r3, [r7, #10]
 81044a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81044ac:	7a7b      	ldrb	r3, [r7, #9]
 81044ae:	041b      	lsls	r3, r3, #16
 81044b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81044b4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81044b6:	687b      	ldr	r3, [r7, #4]
 81044b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81044ba:	6a3b      	ldr	r3, [r7, #32]
 81044bc:	4313      	orrs	r3, r2
 81044be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81044c2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 81044c4:	68fb      	ldr	r3, [r7, #12]
 81044c6:	681b      	ldr	r3, [r3, #0]
 81044c8:	685a      	ldr	r2, [r3, #4]
 81044ca:	6a3b      	ldr	r3, [r7, #32]
 81044cc:	0d5b      	lsrs	r3, r3, #21
 81044ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 81044d2:	4b08      	ldr	r3, [pc, #32]	; (81044f4 <I2C_TransferConfig+0x60>)
 81044d4:	430b      	orrs	r3, r1
 81044d6:	43db      	mvns	r3, r3
 81044d8:	ea02 0103 	and.w	r1, r2, r3
 81044dc:	68fb      	ldr	r3, [r7, #12]
 81044de:	681b      	ldr	r3, [r3, #0]
 81044e0:	697a      	ldr	r2, [r7, #20]
 81044e2:	430a      	orrs	r2, r1
 81044e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 81044e6:	bf00      	nop
 81044e8:	371c      	adds	r7, #28
 81044ea:	46bd      	mov	sp, r7
 81044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044f0:	4770      	bx	lr
 81044f2:	bf00      	nop
 81044f4:	03ff63ff 	.word	0x03ff63ff

081044f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81044f8:	b480      	push	{r7}
 81044fa:	b083      	sub	sp, #12
 81044fc:	af00      	add	r7, sp, #0
 81044fe:	6078      	str	r0, [r7, #4]
 8104500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104502:	687b      	ldr	r3, [r7, #4]
 8104504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104508:	b2db      	uxtb	r3, r3
 810450a:	2b20      	cmp	r3, #32
 810450c:	d138      	bne.n	8104580 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810450e:	687b      	ldr	r3, [r7, #4]
 8104510:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104514:	2b01      	cmp	r3, #1
 8104516:	d101      	bne.n	810451c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8104518:	2302      	movs	r3, #2
 810451a:	e032      	b.n	8104582 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 810451c:	687b      	ldr	r3, [r7, #4]
 810451e:	2201      	movs	r2, #1
 8104520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104524:	687b      	ldr	r3, [r7, #4]
 8104526:	2224      	movs	r2, #36	; 0x24
 8104528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810452c:	687b      	ldr	r3, [r7, #4]
 810452e:	681b      	ldr	r3, [r3, #0]
 8104530:	681a      	ldr	r2, [r3, #0]
 8104532:	687b      	ldr	r3, [r7, #4]
 8104534:	681b      	ldr	r3, [r3, #0]
 8104536:	f022 0201 	bic.w	r2, r2, #1
 810453a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	681b      	ldr	r3, [r3, #0]
 8104540:	681a      	ldr	r2, [r3, #0]
 8104542:	687b      	ldr	r3, [r7, #4]
 8104544:	681b      	ldr	r3, [r3, #0]
 8104546:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810454a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 810454c:	687b      	ldr	r3, [r7, #4]
 810454e:	681b      	ldr	r3, [r3, #0]
 8104550:	6819      	ldr	r1, [r3, #0]
 8104552:	687b      	ldr	r3, [r7, #4]
 8104554:	681b      	ldr	r3, [r3, #0]
 8104556:	683a      	ldr	r2, [r7, #0]
 8104558:	430a      	orrs	r2, r1
 810455a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810455c:	687b      	ldr	r3, [r7, #4]
 810455e:	681b      	ldr	r3, [r3, #0]
 8104560:	681a      	ldr	r2, [r3, #0]
 8104562:	687b      	ldr	r3, [r7, #4]
 8104564:	681b      	ldr	r3, [r3, #0]
 8104566:	f042 0201 	orr.w	r2, r2, #1
 810456a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810456c:	687b      	ldr	r3, [r7, #4]
 810456e:	2220      	movs	r2, #32
 8104570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104574:	687b      	ldr	r3, [r7, #4]
 8104576:	2200      	movs	r2, #0
 8104578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810457c:	2300      	movs	r3, #0
 810457e:	e000      	b.n	8104582 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8104580:	2302      	movs	r3, #2
  }
}
 8104582:	4618      	mov	r0, r3
 8104584:	370c      	adds	r7, #12
 8104586:	46bd      	mov	sp, r7
 8104588:	f85d 7b04 	ldr.w	r7, [sp], #4
 810458c:	4770      	bx	lr

0810458e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810458e:	b480      	push	{r7}
 8104590:	b085      	sub	sp, #20
 8104592:	af00      	add	r7, sp, #0
 8104594:	6078      	str	r0, [r7, #4]
 8104596:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104598:	687b      	ldr	r3, [r7, #4]
 810459a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810459e:	b2db      	uxtb	r3, r3
 81045a0:	2b20      	cmp	r3, #32
 81045a2:	d139      	bne.n	8104618 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81045a4:	687b      	ldr	r3, [r7, #4]
 81045a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81045aa:	2b01      	cmp	r3, #1
 81045ac:	d101      	bne.n	81045b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81045ae:	2302      	movs	r3, #2
 81045b0:	e033      	b.n	810461a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81045b2:	687b      	ldr	r3, [r7, #4]
 81045b4:	2201      	movs	r2, #1
 81045b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81045ba:	687b      	ldr	r3, [r7, #4]
 81045bc:	2224      	movs	r2, #36	; 0x24
 81045be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81045c2:	687b      	ldr	r3, [r7, #4]
 81045c4:	681b      	ldr	r3, [r3, #0]
 81045c6:	681a      	ldr	r2, [r3, #0]
 81045c8:	687b      	ldr	r3, [r7, #4]
 81045ca:	681b      	ldr	r3, [r3, #0]
 81045cc:	f022 0201 	bic.w	r2, r2, #1
 81045d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81045d2:	687b      	ldr	r3, [r7, #4]
 81045d4:	681b      	ldr	r3, [r3, #0]
 81045d6:	681b      	ldr	r3, [r3, #0]
 81045d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81045da:	68fb      	ldr	r3, [r7, #12]
 81045dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81045e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81045e2:	683b      	ldr	r3, [r7, #0]
 81045e4:	021b      	lsls	r3, r3, #8
 81045e6:	68fa      	ldr	r2, [r7, #12]
 81045e8:	4313      	orrs	r3, r2
 81045ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81045ec:	687b      	ldr	r3, [r7, #4]
 81045ee:	681b      	ldr	r3, [r3, #0]
 81045f0:	68fa      	ldr	r2, [r7, #12]
 81045f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81045f4:	687b      	ldr	r3, [r7, #4]
 81045f6:	681b      	ldr	r3, [r3, #0]
 81045f8:	681a      	ldr	r2, [r3, #0]
 81045fa:	687b      	ldr	r3, [r7, #4]
 81045fc:	681b      	ldr	r3, [r3, #0]
 81045fe:	f042 0201 	orr.w	r2, r2, #1
 8104602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8104604:	687b      	ldr	r3, [r7, #4]
 8104606:	2220      	movs	r2, #32
 8104608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810460c:	687b      	ldr	r3, [r7, #4]
 810460e:	2200      	movs	r2, #0
 8104610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104614:	2300      	movs	r3, #0
 8104616:	e000      	b.n	810461a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8104618:	2302      	movs	r3, #2
  }
}
 810461a:	4618      	mov	r0, r3
 810461c:	3714      	adds	r7, #20
 810461e:	46bd      	mov	sp, r7
 8104620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104624:	4770      	bx	lr
	...

08104628 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104628:	b580      	push	{r7, lr}
 810462a:	b084      	sub	sp, #16
 810462c:	af00      	add	r7, sp, #0
 810462e:	60f8      	str	r0, [r7, #12]
 8104630:	460b      	mov	r3, r1
 8104632:	607a      	str	r2, [r7, #4]
 8104634:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104636:	4b37      	ldr	r3, [pc, #220]	; (8104714 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104638:	681b      	ldr	r3, [r3, #0]
 810463a:	f023 0201 	bic.w	r2, r3, #1
 810463e:	4935      	ldr	r1, [pc, #212]	; (8104714 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104640:	68fb      	ldr	r3, [r7, #12]
 8104642:	4313      	orrs	r3, r2
 8104644:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8104646:	687b      	ldr	r3, [r7, #4]
 8104648:	2b00      	cmp	r3, #0
 810464a:	d123      	bne.n	8104694 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810464c:	f7fd fc3c 	bl	8101ec8 <HAL_GetCurrentCPUID>
 8104650:	4603      	mov	r3, r0
 8104652:	2b03      	cmp	r3, #3
 8104654:	d158      	bne.n	8104708 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8104656:	4b2f      	ldr	r3, [pc, #188]	; (8104714 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104658:	691b      	ldr	r3, [r3, #16]
 810465a:	4a2e      	ldr	r2, [pc, #184]	; (8104714 <HAL_PWREx_EnterSTOPMode+0xec>)
 810465c:	f023 0301 	bic.w	r3, r3, #1
 8104660:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104662:	4b2d      	ldr	r3, [pc, #180]	; (8104718 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104664:	691b      	ldr	r3, [r3, #16]
 8104666:	4a2c      	ldr	r2, [pc, #176]	; (8104718 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104668:	f043 0304 	orr.w	r3, r3, #4
 810466c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810466e:	f3bf 8f4f 	dsb	sy
}
 8104672:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104674:	f3bf 8f6f 	isb	sy
}
 8104678:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810467a:	7afb      	ldrb	r3, [r7, #11]
 810467c:	2b01      	cmp	r3, #1
 810467e:	d101      	bne.n	8104684 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104680:	bf30      	wfi
 8104682:	e000      	b.n	8104686 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104684:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104686:	4b24      	ldr	r3, [pc, #144]	; (8104718 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104688:	691b      	ldr	r3, [r3, #16]
 810468a:	4a23      	ldr	r2, [pc, #140]	; (8104718 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810468c:	f023 0304 	bic.w	r3, r3, #4
 8104690:	6113      	str	r3, [r2, #16]
 8104692:	e03c      	b.n	810470e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8104694:	687b      	ldr	r3, [r7, #4]
 8104696:	2b01      	cmp	r3, #1
 8104698:	d123      	bne.n	81046e2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810469a:	f7fd fc15 	bl	8101ec8 <HAL_GetCurrentCPUID>
 810469e:	4603      	mov	r3, r0
 81046a0:	2b01      	cmp	r3, #1
 81046a2:	d133      	bne.n	810470c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81046a4:	4b1b      	ldr	r3, [pc, #108]	; (8104714 <HAL_PWREx_EnterSTOPMode+0xec>)
 81046a6:	695b      	ldr	r3, [r3, #20]
 81046a8:	4a1a      	ldr	r2, [pc, #104]	; (8104714 <HAL_PWREx_EnterSTOPMode+0xec>)
 81046aa:	f023 0302 	bic.w	r3, r3, #2
 81046ae:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81046b0:	4b19      	ldr	r3, [pc, #100]	; (8104718 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81046b2:	691b      	ldr	r3, [r3, #16]
 81046b4:	4a18      	ldr	r2, [pc, #96]	; (8104718 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81046b6:	f043 0304 	orr.w	r3, r3, #4
 81046ba:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81046bc:	f3bf 8f4f 	dsb	sy
}
 81046c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81046c2:	f3bf 8f6f 	isb	sy
}
 81046c6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81046c8:	7afb      	ldrb	r3, [r7, #11]
 81046ca:	2b01      	cmp	r3, #1
 81046cc:	d101      	bne.n	81046d2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81046ce:	bf30      	wfi
 81046d0:	e000      	b.n	81046d4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81046d2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81046d4:	4b10      	ldr	r3, [pc, #64]	; (8104718 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81046d6:	691b      	ldr	r3, [r3, #16]
 81046d8:	4a0f      	ldr	r2, [pc, #60]	; (8104718 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81046da:	f023 0304 	bic.w	r3, r3, #4
 81046de:	6113      	str	r3, [r2, #16]
 81046e0:	e015      	b.n	810470e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81046e2:	f7fd fbf1 	bl	8101ec8 <HAL_GetCurrentCPUID>
 81046e6:	4603      	mov	r3, r0
 81046e8:	2b03      	cmp	r3, #3
 81046ea:	d106      	bne.n	81046fa <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81046ec:	4b09      	ldr	r3, [pc, #36]	; (8104714 <HAL_PWREx_EnterSTOPMode+0xec>)
 81046ee:	691b      	ldr	r3, [r3, #16]
 81046f0:	4a08      	ldr	r2, [pc, #32]	; (8104714 <HAL_PWREx_EnterSTOPMode+0xec>)
 81046f2:	f023 0304 	bic.w	r3, r3, #4
 81046f6:	6113      	str	r3, [r2, #16]
 81046f8:	e009      	b.n	810470e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81046fa:	4b06      	ldr	r3, [pc, #24]	; (8104714 <HAL_PWREx_EnterSTOPMode+0xec>)
 81046fc:	695b      	ldr	r3, [r3, #20]
 81046fe:	4a05      	ldr	r2, [pc, #20]	; (8104714 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104700:	f023 0304 	bic.w	r3, r3, #4
 8104704:	6153      	str	r3, [r2, #20]
 8104706:	e002      	b.n	810470e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104708:	bf00      	nop
 810470a:	e000      	b.n	810470e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810470c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810470e:	3710      	adds	r7, #16
 8104710:	46bd      	mov	sp, r7
 8104712:	bd80      	pop	{r7, pc}
 8104714:	58024800 	.word	0x58024800
 8104718:	e000ed00 	.word	0xe000ed00

0810471c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810471c:	b580      	push	{r7, lr}
 810471e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104720:	f7fd fbd2 	bl	8101ec8 <HAL_GetCurrentCPUID>
 8104724:	4603      	mov	r3, r0
 8104726:	2b03      	cmp	r3, #3
 8104728:	d101      	bne.n	810472e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810472a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810472c:	e001      	b.n	8104732 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810472e:	bf40      	sev
    __WFE ();
 8104730:	bf20      	wfe
}
 8104732:	bf00      	nop
 8104734:	bd80      	pop	{r7, pc}
	...

08104738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8104738:	b480      	push	{r7}
 810473a:	b089      	sub	sp, #36	; 0x24
 810473c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810473e:	4bb3      	ldr	r3, [pc, #716]	; (8104a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104740:	691b      	ldr	r3, [r3, #16]
 8104742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104746:	2b18      	cmp	r3, #24
 8104748:	f200 8155 	bhi.w	81049f6 <HAL_RCC_GetSysClockFreq+0x2be>
 810474c:	a201      	add	r2, pc, #4	; (adr r2, 8104754 <HAL_RCC_GetSysClockFreq+0x1c>)
 810474e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104752:	bf00      	nop
 8104754:	081047b9 	.word	0x081047b9
 8104758:	081049f7 	.word	0x081049f7
 810475c:	081049f7 	.word	0x081049f7
 8104760:	081049f7 	.word	0x081049f7
 8104764:	081049f7 	.word	0x081049f7
 8104768:	081049f7 	.word	0x081049f7
 810476c:	081049f7 	.word	0x081049f7
 8104770:	081049f7 	.word	0x081049f7
 8104774:	081047df 	.word	0x081047df
 8104778:	081049f7 	.word	0x081049f7
 810477c:	081049f7 	.word	0x081049f7
 8104780:	081049f7 	.word	0x081049f7
 8104784:	081049f7 	.word	0x081049f7
 8104788:	081049f7 	.word	0x081049f7
 810478c:	081049f7 	.word	0x081049f7
 8104790:	081049f7 	.word	0x081049f7
 8104794:	081047e5 	.word	0x081047e5
 8104798:	081049f7 	.word	0x081049f7
 810479c:	081049f7 	.word	0x081049f7
 81047a0:	081049f7 	.word	0x081049f7
 81047a4:	081049f7 	.word	0x081049f7
 81047a8:	081049f7 	.word	0x081049f7
 81047ac:	081049f7 	.word	0x081049f7
 81047b0:	081049f7 	.word	0x081049f7
 81047b4:	081047eb 	.word	0x081047eb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81047b8:	4b94      	ldr	r3, [pc, #592]	; (8104a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81047ba:	681b      	ldr	r3, [r3, #0]
 81047bc:	f003 0320 	and.w	r3, r3, #32
 81047c0:	2b00      	cmp	r3, #0
 81047c2:	d009      	beq.n	81047d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81047c4:	4b91      	ldr	r3, [pc, #580]	; (8104a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81047c6:	681b      	ldr	r3, [r3, #0]
 81047c8:	08db      	lsrs	r3, r3, #3
 81047ca:	f003 0303 	and.w	r3, r3, #3
 81047ce:	4a90      	ldr	r2, [pc, #576]	; (8104a10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81047d0:	fa22 f303 	lsr.w	r3, r2, r3
 81047d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81047d6:	e111      	b.n	81049fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81047d8:	4b8d      	ldr	r3, [pc, #564]	; (8104a10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81047da:	61bb      	str	r3, [r7, #24]
    break;
 81047dc:	e10e      	b.n	81049fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81047de:	4b8d      	ldr	r3, [pc, #564]	; (8104a14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81047e0:	61bb      	str	r3, [r7, #24]
    break;
 81047e2:	e10b      	b.n	81049fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81047e4:	4b8c      	ldr	r3, [pc, #560]	; (8104a18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81047e6:	61bb      	str	r3, [r7, #24]
    break;
 81047e8:	e108      	b.n	81049fc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81047ea:	4b88      	ldr	r3, [pc, #544]	; (8104a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81047ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81047ee:	f003 0303 	and.w	r3, r3, #3
 81047f2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81047f4:	4b85      	ldr	r3, [pc, #532]	; (8104a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81047f8:	091b      	lsrs	r3, r3, #4
 81047fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81047fe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104800:	4b82      	ldr	r3, [pc, #520]	; (8104a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104804:	f003 0301 	and.w	r3, r3, #1
 8104808:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810480a:	4b80      	ldr	r3, [pc, #512]	; (8104a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810480c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810480e:	08db      	lsrs	r3, r3, #3
 8104810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104814:	68fa      	ldr	r2, [r7, #12]
 8104816:	fb02 f303 	mul.w	r3, r2, r3
 810481a:	ee07 3a90 	vmov	s15, r3
 810481e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104822:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8104826:	693b      	ldr	r3, [r7, #16]
 8104828:	2b00      	cmp	r3, #0
 810482a:	f000 80e1 	beq.w	81049f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 810482e:	697b      	ldr	r3, [r7, #20]
 8104830:	2b02      	cmp	r3, #2
 8104832:	f000 8083 	beq.w	810493c <HAL_RCC_GetSysClockFreq+0x204>
 8104836:	697b      	ldr	r3, [r7, #20]
 8104838:	2b02      	cmp	r3, #2
 810483a:	f200 80a1 	bhi.w	8104980 <HAL_RCC_GetSysClockFreq+0x248>
 810483e:	697b      	ldr	r3, [r7, #20]
 8104840:	2b00      	cmp	r3, #0
 8104842:	d003      	beq.n	810484c <HAL_RCC_GetSysClockFreq+0x114>
 8104844:	697b      	ldr	r3, [r7, #20]
 8104846:	2b01      	cmp	r3, #1
 8104848:	d056      	beq.n	81048f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 810484a:	e099      	b.n	8104980 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810484c:	4b6f      	ldr	r3, [pc, #444]	; (8104a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810484e:	681b      	ldr	r3, [r3, #0]
 8104850:	f003 0320 	and.w	r3, r3, #32
 8104854:	2b00      	cmp	r3, #0
 8104856:	d02d      	beq.n	81048b4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104858:	4b6c      	ldr	r3, [pc, #432]	; (8104a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810485a:	681b      	ldr	r3, [r3, #0]
 810485c:	08db      	lsrs	r3, r3, #3
 810485e:	f003 0303 	and.w	r3, r3, #3
 8104862:	4a6b      	ldr	r2, [pc, #428]	; (8104a10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104864:	fa22 f303 	lsr.w	r3, r2, r3
 8104868:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810486a:	687b      	ldr	r3, [r7, #4]
 810486c:	ee07 3a90 	vmov	s15, r3
 8104870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104874:	693b      	ldr	r3, [r7, #16]
 8104876:	ee07 3a90 	vmov	s15, r3
 810487a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810487e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104882:	4b62      	ldr	r3, [pc, #392]	; (8104a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810488a:	ee07 3a90 	vmov	s15, r3
 810488e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104892:	ed97 6a02 	vldr	s12, [r7, #8]
 8104896:	eddf 5a61 	vldr	s11, [pc, #388]	; 8104a1c <HAL_RCC_GetSysClockFreq+0x2e4>
 810489a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810489e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81048a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81048a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81048aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81048ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81048b2:	e087      	b.n	81049c4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81048b4:	693b      	ldr	r3, [r7, #16]
 81048b6:	ee07 3a90 	vmov	s15, r3
 81048ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81048be:	eddf 6a58 	vldr	s13, [pc, #352]	; 8104a20 <HAL_RCC_GetSysClockFreq+0x2e8>
 81048c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81048c6:	4b51      	ldr	r3, [pc, #324]	; (8104a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81048ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81048ce:	ee07 3a90 	vmov	s15, r3
 81048d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81048d6:	ed97 6a02 	vldr	s12, [r7, #8]
 81048da:	eddf 5a50 	vldr	s11, [pc, #320]	; 8104a1c <HAL_RCC_GetSysClockFreq+0x2e4>
 81048de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81048e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81048e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81048ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81048ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81048f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81048f6:	e065      	b.n	81049c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81048f8:	693b      	ldr	r3, [r7, #16]
 81048fa:	ee07 3a90 	vmov	s15, r3
 81048fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104902:	eddf 6a48 	vldr	s13, [pc, #288]	; 8104a24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810490a:	4b40      	ldr	r3, [pc, #256]	; (8104a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810490e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104912:	ee07 3a90 	vmov	s15, r3
 8104916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810491a:	ed97 6a02 	vldr	s12, [r7, #8]
 810491e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8104a1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8104922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810492a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810492e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810493a:	e043      	b.n	81049c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810493c:	693b      	ldr	r3, [r7, #16]
 810493e:	ee07 3a90 	vmov	s15, r3
 8104942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104946:	eddf 6a38 	vldr	s13, [pc, #224]	; 8104a28 <HAL_RCC_GetSysClockFreq+0x2f0>
 810494a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810494e:	4b2f      	ldr	r3, [pc, #188]	; (8104a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104956:	ee07 3a90 	vmov	s15, r3
 810495a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810495e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104962:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8104a1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8104966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810496a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810496e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104976:	ee67 7a27 	vmul.f32	s15, s14, s15
 810497a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810497e:	e021      	b.n	81049c4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104980:	693b      	ldr	r3, [r7, #16]
 8104982:	ee07 3a90 	vmov	s15, r3
 8104986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810498a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8104a24 <HAL_RCC_GetSysClockFreq+0x2ec>
 810498e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104992:	4b1e      	ldr	r3, [pc, #120]	; (8104a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810499a:	ee07 3a90 	vmov	s15, r3
 810499e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81049a2:	ed97 6a02 	vldr	s12, [r7, #8]
 81049a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8104a1c <HAL_RCC_GetSysClockFreq+0x2e4>
 81049aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81049ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81049b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81049b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81049ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81049be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81049c2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81049c4:	4b11      	ldr	r3, [pc, #68]	; (8104a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81049c8:	0a5b      	lsrs	r3, r3, #9
 81049ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81049ce:	3301      	adds	r3, #1
 81049d0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81049d2:	683b      	ldr	r3, [r7, #0]
 81049d4:	ee07 3a90 	vmov	s15, r3
 81049d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81049dc:	edd7 6a07 	vldr	s13, [r7, #28]
 81049e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81049e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81049e8:	ee17 3a90 	vmov	r3, s15
 81049ec:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81049ee:	e005      	b.n	81049fc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81049f0:	2300      	movs	r3, #0
 81049f2:	61bb      	str	r3, [r7, #24]
    break;
 81049f4:	e002      	b.n	81049fc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81049f6:	4b07      	ldr	r3, [pc, #28]	; (8104a14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81049f8:	61bb      	str	r3, [r7, #24]
    break;
 81049fa:	bf00      	nop
  }

  return sysclockfreq;
 81049fc:	69bb      	ldr	r3, [r7, #24]
}
 81049fe:	4618      	mov	r0, r3
 8104a00:	3724      	adds	r7, #36	; 0x24
 8104a02:	46bd      	mov	sp, r7
 8104a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a08:	4770      	bx	lr
 8104a0a:	bf00      	nop
 8104a0c:	58024400 	.word	0x58024400
 8104a10:	03d09000 	.word	0x03d09000
 8104a14:	003d0900 	.word	0x003d0900
 8104a18:	007a1200 	.word	0x007a1200
 8104a1c:	46000000 	.word	0x46000000
 8104a20:	4c742400 	.word	0x4c742400
 8104a24:	4a742400 	.word	0x4a742400
 8104a28:	4af42400 	.word	0x4af42400

08104a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104a2c:	b580      	push	{r7, lr}
 8104a2e:	b082      	sub	sp, #8
 8104a30:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104a32:	f7ff fe81 	bl	8104738 <HAL_RCC_GetSysClockFreq>
 8104a36:	4602      	mov	r2, r0
 8104a38:	4b11      	ldr	r3, [pc, #68]	; (8104a80 <HAL_RCC_GetHCLKFreq+0x54>)
 8104a3a:	699b      	ldr	r3, [r3, #24]
 8104a3c:	0a1b      	lsrs	r3, r3, #8
 8104a3e:	f003 030f 	and.w	r3, r3, #15
 8104a42:	4910      	ldr	r1, [pc, #64]	; (8104a84 <HAL_RCC_GetHCLKFreq+0x58>)
 8104a44:	5ccb      	ldrb	r3, [r1, r3]
 8104a46:	f003 031f 	and.w	r3, r3, #31
 8104a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8104a4e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104a50:	4b0b      	ldr	r3, [pc, #44]	; (8104a80 <HAL_RCC_GetHCLKFreq+0x54>)
 8104a52:	699b      	ldr	r3, [r3, #24]
 8104a54:	f003 030f 	and.w	r3, r3, #15
 8104a58:	4a0a      	ldr	r2, [pc, #40]	; (8104a84 <HAL_RCC_GetHCLKFreq+0x58>)
 8104a5a:	5cd3      	ldrb	r3, [r2, r3]
 8104a5c:	f003 031f 	and.w	r3, r3, #31
 8104a60:	687a      	ldr	r2, [r7, #4]
 8104a62:	fa22 f303 	lsr.w	r3, r2, r3
 8104a66:	4a08      	ldr	r2, [pc, #32]	; (8104a88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104a68:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104a6a:	4b07      	ldr	r3, [pc, #28]	; (8104a88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104a6c:	681b      	ldr	r3, [r3, #0]
 8104a6e:	4a07      	ldr	r2, [pc, #28]	; (8104a8c <HAL_RCC_GetHCLKFreq+0x60>)
 8104a70:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8104a72:	4b05      	ldr	r3, [pc, #20]	; (8104a88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104a74:	681b      	ldr	r3, [r3, #0]
}
 8104a76:	4618      	mov	r0, r3
 8104a78:	3708      	adds	r7, #8
 8104a7a:	46bd      	mov	sp, r7
 8104a7c:	bd80      	pop	{r7, pc}
 8104a7e:	bf00      	nop
 8104a80:	58024400 	.word	0x58024400
 8104a84:	081098b0 	.word	0x081098b0
 8104a88:	10000004 	.word	0x10000004
 8104a8c:	10000000 	.word	0x10000000

08104a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8104a90:	b580      	push	{r7, lr}
 8104a92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8104a94:	f7ff ffca 	bl	8104a2c <HAL_RCC_GetHCLKFreq>
 8104a98:	4602      	mov	r2, r0
 8104a9a:	4b06      	ldr	r3, [pc, #24]	; (8104ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8104a9c:	69db      	ldr	r3, [r3, #28]
 8104a9e:	091b      	lsrs	r3, r3, #4
 8104aa0:	f003 0307 	and.w	r3, r3, #7
 8104aa4:	4904      	ldr	r1, [pc, #16]	; (8104ab8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8104aa6:	5ccb      	ldrb	r3, [r1, r3]
 8104aa8:	f003 031f 	and.w	r3, r3, #31
 8104aac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8104ab0:	4618      	mov	r0, r3
 8104ab2:	bd80      	pop	{r7, pc}
 8104ab4:	58024400 	.word	0x58024400
 8104ab8:	081098b0 	.word	0x081098b0

08104abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8104abc:	b580      	push	{r7, lr}
 8104abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8104ac0:	f7ff ffb4 	bl	8104a2c <HAL_RCC_GetHCLKFreq>
 8104ac4:	4602      	mov	r2, r0
 8104ac6:	4b06      	ldr	r3, [pc, #24]	; (8104ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8104ac8:	69db      	ldr	r3, [r3, #28]
 8104aca:	0a1b      	lsrs	r3, r3, #8
 8104acc:	f003 0307 	and.w	r3, r3, #7
 8104ad0:	4904      	ldr	r1, [pc, #16]	; (8104ae4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8104ad2:	5ccb      	ldrb	r3, [r1, r3]
 8104ad4:	f003 031f 	and.w	r3, r3, #31
 8104ad8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8104adc:	4618      	mov	r0, r3
 8104ade:	bd80      	pop	{r7, pc}
 8104ae0:	58024400 	.word	0x58024400
 8104ae4:	081098b0 	.word	0x081098b0

08104ae8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8104ae8:	b580      	push	{r7, lr}
 8104aea:	b086      	sub	sp, #24
 8104aec:	af00      	add	r7, sp, #0
 8104aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8104af0:	2300      	movs	r3, #0
 8104af2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8104af4:	2300      	movs	r3, #0
 8104af6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8104af8:	687b      	ldr	r3, [r7, #4]
 8104afa:	681b      	ldr	r3, [r3, #0]
 8104afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104b00:	2b00      	cmp	r3, #0
 8104b02:	d03f      	beq.n	8104b84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8104b04:	687b      	ldr	r3, [r7, #4]
 8104b06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104b08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104b0c:	d02a      	beq.n	8104b64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8104b0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104b12:	d824      	bhi.n	8104b5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8104b14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104b18:	d018      	beq.n	8104b4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8104b1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104b1e:	d81e      	bhi.n	8104b5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8104b20:	2b00      	cmp	r3, #0
 8104b22:	d003      	beq.n	8104b2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8104b24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104b28:	d007      	beq.n	8104b3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8104b2a:	e018      	b.n	8104b5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104b2c:	4ba3      	ldr	r3, [pc, #652]	; (8104dbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b30:	4aa2      	ldr	r2, [pc, #648]	; (8104dbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104b36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104b38:	e015      	b.n	8104b66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104b3a:	687b      	ldr	r3, [r7, #4]
 8104b3c:	3304      	adds	r3, #4
 8104b3e:	2102      	movs	r1, #2
 8104b40:	4618      	mov	r0, r3
 8104b42:	f001 f9d5 	bl	8105ef0 <RCCEx_PLL2_Config>
 8104b46:	4603      	mov	r3, r0
 8104b48:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104b4a:	e00c      	b.n	8104b66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104b4c:	687b      	ldr	r3, [r7, #4]
 8104b4e:	3324      	adds	r3, #36	; 0x24
 8104b50:	2102      	movs	r1, #2
 8104b52:	4618      	mov	r0, r3
 8104b54:	f001 fa7e 	bl	8106054 <RCCEx_PLL3_Config>
 8104b58:	4603      	mov	r3, r0
 8104b5a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104b5c:	e003      	b.n	8104b66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104b5e:	2301      	movs	r3, #1
 8104b60:	75fb      	strb	r3, [r7, #23]
      break;
 8104b62:	e000      	b.n	8104b66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8104b64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104b66:	7dfb      	ldrb	r3, [r7, #23]
 8104b68:	2b00      	cmp	r3, #0
 8104b6a:	d109      	bne.n	8104b80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8104b6c:	4b93      	ldr	r3, [pc, #588]	; (8104dbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104b70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8104b74:	687b      	ldr	r3, [r7, #4]
 8104b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104b78:	4990      	ldr	r1, [pc, #576]	; (8104dbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104b7a:	4313      	orrs	r3, r2
 8104b7c:	650b      	str	r3, [r1, #80]	; 0x50
 8104b7e:	e001      	b.n	8104b84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b80:	7dfb      	ldrb	r3, [r7, #23]
 8104b82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104b84:	687b      	ldr	r3, [r7, #4]
 8104b86:	681b      	ldr	r3, [r3, #0]
 8104b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104b8c:	2b00      	cmp	r3, #0
 8104b8e:	d03d      	beq.n	8104c0c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8104b90:	687b      	ldr	r3, [r7, #4]
 8104b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104b94:	2b04      	cmp	r3, #4
 8104b96:	d826      	bhi.n	8104be6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8104b98:	a201      	add	r2, pc, #4	; (adr r2, 8104ba0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8104b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104b9e:	bf00      	nop
 8104ba0:	08104bb5 	.word	0x08104bb5
 8104ba4:	08104bc3 	.word	0x08104bc3
 8104ba8:	08104bd5 	.word	0x08104bd5
 8104bac:	08104bed 	.word	0x08104bed
 8104bb0:	08104bed 	.word	0x08104bed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104bb4:	4b81      	ldr	r3, [pc, #516]	; (8104dbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104bb8:	4a80      	ldr	r2, [pc, #512]	; (8104dbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104bc0:	e015      	b.n	8104bee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104bc2:	687b      	ldr	r3, [r7, #4]
 8104bc4:	3304      	adds	r3, #4
 8104bc6:	2100      	movs	r1, #0
 8104bc8:	4618      	mov	r0, r3
 8104bca:	f001 f991 	bl	8105ef0 <RCCEx_PLL2_Config>
 8104bce:	4603      	mov	r3, r0
 8104bd0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104bd2:	e00c      	b.n	8104bee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104bd4:	687b      	ldr	r3, [r7, #4]
 8104bd6:	3324      	adds	r3, #36	; 0x24
 8104bd8:	2100      	movs	r1, #0
 8104bda:	4618      	mov	r0, r3
 8104bdc:	f001 fa3a 	bl	8106054 <RCCEx_PLL3_Config>
 8104be0:	4603      	mov	r3, r0
 8104be2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104be4:	e003      	b.n	8104bee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104be6:	2301      	movs	r3, #1
 8104be8:	75fb      	strb	r3, [r7, #23]
      break;
 8104bea:	e000      	b.n	8104bee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8104bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104bee:	7dfb      	ldrb	r3, [r7, #23]
 8104bf0:	2b00      	cmp	r3, #0
 8104bf2:	d109      	bne.n	8104c08 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8104bf4:	4b71      	ldr	r3, [pc, #452]	; (8104dbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104bf8:	f023 0207 	bic.w	r2, r3, #7
 8104bfc:	687b      	ldr	r3, [r7, #4]
 8104bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104c00:	496e      	ldr	r1, [pc, #440]	; (8104dbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104c02:	4313      	orrs	r3, r2
 8104c04:	650b      	str	r3, [r1, #80]	; 0x50
 8104c06:	e001      	b.n	8104c0c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c08:	7dfb      	ldrb	r3, [r7, #23]
 8104c0a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8104c0c:	687b      	ldr	r3, [r7, #4]
 8104c0e:	681b      	ldr	r3, [r3, #0]
 8104c10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104c14:	2b00      	cmp	r3, #0
 8104c16:	d042      	beq.n	8104c9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8104c18:	687b      	ldr	r3, [r7, #4]
 8104c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104c20:	d02b      	beq.n	8104c7a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8104c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104c26:	d825      	bhi.n	8104c74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104c28:	2bc0      	cmp	r3, #192	; 0xc0
 8104c2a:	d028      	beq.n	8104c7e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8104c2c:	2bc0      	cmp	r3, #192	; 0xc0
 8104c2e:	d821      	bhi.n	8104c74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104c30:	2b80      	cmp	r3, #128	; 0x80
 8104c32:	d016      	beq.n	8104c62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8104c34:	2b80      	cmp	r3, #128	; 0x80
 8104c36:	d81d      	bhi.n	8104c74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104c38:	2b00      	cmp	r3, #0
 8104c3a:	d002      	beq.n	8104c42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8104c3c:	2b40      	cmp	r3, #64	; 0x40
 8104c3e:	d007      	beq.n	8104c50 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8104c40:	e018      	b.n	8104c74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104c42:	4b5e      	ldr	r3, [pc, #376]	; (8104dbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104c46:	4a5d      	ldr	r2, [pc, #372]	; (8104dbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104c4e:	e017      	b.n	8104c80 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104c50:	687b      	ldr	r3, [r7, #4]
 8104c52:	3304      	adds	r3, #4
 8104c54:	2100      	movs	r1, #0
 8104c56:	4618      	mov	r0, r3
 8104c58:	f001 f94a 	bl	8105ef0 <RCCEx_PLL2_Config>
 8104c5c:	4603      	mov	r3, r0
 8104c5e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104c60:	e00e      	b.n	8104c80 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104c62:	687b      	ldr	r3, [r7, #4]
 8104c64:	3324      	adds	r3, #36	; 0x24
 8104c66:	2100      	movs	r1, #0
 8104c68:	4618      	mov	r0, r3
 8104c6a:	f001 f9f3 	bl	8106054 <RCCEx_PLL3_Config>
 8104c6e:	4603      	mov	r3, r0
 8104c70:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104c72:	e005      	b.n	8104c80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104c74:	2301      	movs	r3, #1
 8104c76:	75fb      	strb	r3, [r7, #23]
      break;
 8104c78:	e002      	b.n	8104c80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8104c7a:	bf00      	nop
 8104c7c:	e000      	b.n	8104c80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8104c7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104c80:	7dfb      	ldrb	r3, [r7, #23]
 8104c82:	2b00      	cmp	r3, #0
 8104c84:	d109      	bne.n	8104c9a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8104c86:	4b4d      	ldr	r3, [pc, #308]	; (8104dbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104c8a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8104c8e:	687b      	ldr	r3, [r7, #4]
 8104c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104c92:	494a      	ldr	r1, [pc, #296]	; (8104dbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104c94:	4313      	orrs	r3, r2
 8104c96:	650b      	str	r3, [r1, #80]	; 0x50
 8104c98:	e001      	b.n	8104c9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c9a:	7dfb      	ldrb	r3, [r7, #23]
 8104c9c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104c9e:	687b      	ldr	r3, [r7, #4]
 8104ca0:	681b      	ldr	r3, [r3, #0]
 8104ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8104ca6:	2b00      	cmp	r3, #0
 8104ca8:	d049      	beq.n	8104d3e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8104caa:	687b      	ldr	r3, [r7, #4]
 8104cac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104cb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104cb4:	d030      	beq.n	8104d18 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8104cb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104cba:	d82a      	bhi.n	8104d12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104cbc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104cc0:	d02c      	beq.n	8104d1c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8104cc2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104cc6:	d824      	bhi.n	8104d12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104cc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104ccc:	d018      	beq.n	8104d00 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8104cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104cd2:	d81e      	bhi.n	8104d12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104cd4:	2b00      	cmp	r3, #0
 8104cd6:	d003      	beq.n	8104ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8104cd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104cdc:	d007      	beq.n	8104cee <HAL_RCCEx_PeriphCLKConfig+0x206>
 8104cde:	e018      	b.n	8104d12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104ce0:	4b36      	ldr	r3, [pc, #216]	; (8104dbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ce4:	4a35      	ldr	r2, [pc, #212]	; (8104dbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104cea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104cec:	e017      	b.n	8104d1e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104cee:	687b      	ldr	r3, [r7, #4]
 8104cf0:	3304      	adds	r3, #4
 8104cf2:	2100      	movs	r1, #0
 8104cf4:	4618      	mov	r0, r3
 8104cf6:	f001 f8fb 	bl	8105ef0 <RCCEx_PLL2_Config>
 8104cfa:	4603      	mov	r3, r0
 8104cfc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8104cfe:	e00e      	b.n	8104d1e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104d00:	687b      	ldr	r3, [r7, #4]
 8104d02:	3324      	adds	r3, #36	; 0x24
 8104d04:	2100      	movs	r1, #0
 8104d06:	4618      	mov	r0, r3
 8104d08:	f001 f9a4 	bl	8106054 <RCCEx_PLL3_Config>
 8104d0c:	4603      	mov	r3, r0
 8104d0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104d10:	e005      	b.n	8104d1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8104d12:	2301      	movs	r3, #1
 8104d14:	75fb      	strb	r3, [r7, #23]
      break;
 8104d16:	e002      	b.n	8104d1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8104d18:	bf00      	nop
 8104d1a:	e000      	b.n	8104d1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8104d1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104d1e:	7dfb      	ldrb	r3, [r7, #23]
 8104d20:	2b00      	cmp	r3, #0
 8104d22:	d10a      	bne.n	8104d3a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8104d24:	4b25      	ldr	r3, [pc, #148]	; (8104dbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104d28:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8104d2c:	687b      	ldr	r3, [r7, #4]
 8104d2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104d32:	4922      	ldr	r1, [pc, #136]	; (8104dbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104d34:	4313      	orrs	r3, r2
 8104d36:	658b      	str	r3, [r1, #88]	; 0x58
 8104d38:	e001      	b.n	8104d3e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d3a:	7dfb      	ldrb	r3, [r7, #23]
 8104d3c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8104d3e:	687b      	ldr	r3, [r7, #4]
 8104d40:	681b      	ldr	r3, [r3, #0]
 8104d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8104d46:	2b00      	cmp	r3, #0
 8104d48:	d04b      	beq.n	8104de2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8104d4a:	687b      	ldr	r3, [r7, #4]
 8104d4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104d50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104d54:	d030      	beq.n	8104db8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8104d56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104d5a:	d82a      	bhi.n	8104db2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104d5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104d60:	d02e      	beq.n	8104dc0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8104d62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104d66:	d824      	bhi.n	8104db2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104d68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104d6c:	d018      	beq.n	8104da0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8104d6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104d72:	d81e      	bhi.n	8104db2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104d74:	2b00      	cmp	r3, #0
 8104d76:	d003      	beq.n	8104d80 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8104d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104d7c:	d007      	beq.n	8104d8e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8104d7e:	e018      	b.n	8104db2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104d80:	4b0e      	ldr	r3, [pc, #56]	; (8104dbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d84:	4a0d      	ldr	r2, [pc, #52]	; (8104dbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104d8c:	e019      	b.n	8104dc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104d8e:	687b      	ldr	r3, [r7, #4]
 8104d90:	3304      	adds	r3, #4
 8104d92:	2100      	movs	r1, #0
 8104d94:	4618      	mov	r0, r3
 8104d96:	f001 f8ab 	bl	8105ef0 <RCCEx_PLL2_Config>
 8104d9a:	4603      	mov	r3, r0
 8104d9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8104d9e:	e010      	b.n	8104dc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104da0:	687b      	ldr	r3, [r7, #4]
 8104da2:	3324      	adds	r3, #36	; 0x24
 8104da4:	2100      	movs	r1, #0
 8104da6:	4618      	mov	r0, r3
 8104da8:	f001 f954 	bl	8106054 <RCCEx_PLL3_Config>
 8104dac:	4603      	mov	r3, r0
 8104dae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104db0:	e007      	b.n	8104dc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8104db2:	2301      	movs	r3, #1
 8104db4:	75fb      	strb	r3, [r7, #23]
      break;
 8104db6:	e004      	b.n	8104dc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8104db8:	bf00      	nop
 8104dba:	e002      	b.n	8104dc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8104dbc:	58024400 	.word	0x58024400
      break;
 8104dc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104dc2:	7dfb      	ldrb	r3, [r7, #23]
 8104dc4:	2b00      	cmp	r3, #0
 8104dc6:	d10a      	bne.n	8104dde <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8104dc8:	4b99      	ldr	r3, [pc, #612]	; (8105030 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104dcc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8104dd0:	687b      	ldr	r3, [r7, #4]
 8104dd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104dd6:	4996      	ldr	r1, [pc, #600]	; (8105030 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104dd8:	4313      	orrs	r3, r2
 8104dda:	658b      	str	r3, [r1, #88]	; 0x58
 8104ddc:	e001      	b.n	8104de2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104dde:	7dfb      	ldrb	r3, [r7, #23]
 8104de0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8104de2:	687b      	ldr	r3, [r7, #4]
 8104de4:	681b      	ldr	r3, [r3, #0]
 8104de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104dea:	2b00      	cmp	r3, #0
 8104dec:	d032      	beq.n	8104e54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8104dee:	687b      	ldr	r3, [r7, #4]
 8104df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104df2:	2b30      	cmp	r3, #48	; 0x30
 8104df4:	d01c      	beq.n	8104e30 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8104df6:	2b30      	cmp	r3, #48	; 0x30
 8104df8:	d817      	bhi.n	8104e2a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8104dfa:	2b20      	cmp	r3, #32
 8104dfc:	d00c      	beq.n	8104e18 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8104dfe:	2b20      	cmp	r3, #32
 8104e00:	d813      	bhi.n	8104e2a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8104e02:	2b00      	cmp	r3, #0
 8104e04:	d016      	beq.n	8104e34 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8104e06:	2b10      	cmp	r3, #16
 8104e08:	d10f      	bne.n	8104e2a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104e0a:	4b89      	ldr	r3, [pc, #548]	; (8105030 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e0e:	4a88      	ldr	r2, [pc, #544]	; (8105030 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104e14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8104e16:	e00e      	b.n	8104e36 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104e18:	687b      	ldr	r3, [r7, #4]
 8104e1a:	3304      	adds	r3, #4
 8104e1c:	2102      	movs	r1, #2
 8104e1e:	4618      	mov	r0, r3
 8104e20:	f001 f866 	bl	8105ef0 <RCCEx_PLL2_Config>
 8104e24:	4603      	mov	r3, r0
 8104e26:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8104e28:	e005      	b.n	8104e36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8104e2a:	2301      	movs	r3, #1
 8104e2c:	75fb      	strb	r3, [r7, #23]
      break;
 8104e2e:	e002      	b.n	8104e36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8104e30:	bf00      	nop
 8104e32:	e000      	b.n	8104e36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8104e34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104e36:	7dfb      	ldrb	r3, [r7, #23]
 8104e38:	2b00      	cmp	r3, #0
 8104e3a:	d109      	bne.n	8104e50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8104e3c:	4b7c      	ldr	r3, [pc, #496]	; (8105030 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104e40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8104e44:	687b      	ldr	r3, [r7, #4]
 8104e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104e48:	4979      	ldr	r1, [pc, #484]	; (8105030 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104e4a:	4313      	orrs	r3, r2
 8104e4c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104e4e:	e001      	b.n	8104e54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e50:	7dfb      	ldrb	r3, [r7, #23]
 8104e52:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8104e54:	687b      	ldr	r3, [r7, #4]
 8104e56:	681b      	ldr	r3, [r3, #0]
 8104e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8104e5c:	2b00      	cmp	r3, #0
 8104e5e:	d047      	beq.n	8104ef0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8104e60:	687b      	ldr	r3, [r7, #4]
 8104e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104e64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104e68:	d030      	beq.n	8104ecc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8104e6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104e6e:	d82a      	bhi.n	8104ec6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8104e70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104e74:	d02c      	beq.n	8104ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8104e76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104e7a:	d824      	bhi.n	8104ec6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8104e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104e80:	d018      	beq.n	8104eb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8104e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104e86:	d81e      	bhi.n	8104ec6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8104e88:	2b00      	cmp	r3, #0
 8104e8a:	d003      	beq.n	8104e94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8104e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104e90:	d007      	beq.n	8104ea2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8104e92:	e018      	b.n	8104ec6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104e94:	4b66      	ldr	r3, [pc, #408]	; (8105030 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e98:	4a65      	ldr	r2, [pc, #404]	; (8105030 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104ea0:	e017      	b.n	8104ed2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104ea2:	687b      	ldr	r3, [r7, #4]
 8104ea4:	3304      	adds	r3, #4
 8104ea6:	2100      	movs	r1, #0
 8104ea8:	4618      	mov	r0, r3
 8104eaa:	f001 f821 	bl	8105ef0 <RCCEx_PLL2_Config>
 8104eae:	4603      	mov	r3, r0
 8104eb0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104eb2:	e00e      	b.n	8104ed2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104eb4:	687b      	ldr	r3, [r7, #4]
 8104eb6:	3324      	adds	r3, #36	; 0x24
 8104eb8:	2100      	movs	r1, #0
 8104eba:	4618      	mov	r0, r3
 8104ebc:	f001 f8ca 	bl	8106054 <RCCEx_PLL3_Config>
 8104ec0:	4603      	mov	r3, r0
 8104ec2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104ec4:	e005      	b.n	8104ed2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104ec6:	2301      	movs	r3, #1
 8104ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8104eca:	e002      	b.n	8104ed2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8104ecc:	bf00      	nop
 8104ece:	e000      	b.n	8104ed2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8104ed0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104ed2:	7dfb      	ldrb	r3, [r7, #23]
 8104ed4:	2b00      	cmp	r3, #0
 8104ed6:	d109      	bne.n	8104eec <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8104ed8:	4b55      	ldr	r3, [pc, #340]	; (8105030 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104edc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8104ee0:	687b      	ldr	r3, [r7, #4]
 8104ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104ee4:	4952      	ldr	r1, [pc, #328]	; (8105030 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104ee6:	4313      	orrs	r3, r2
 8104ee8:	650b      	str	r3, [r1, #80]	; 0x50
 8104eea:	e001      	b.n	8104ef0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104eec:	7dfb      	ldrb	r3, [r7, #23]
 8104eee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8104ef0:	687b      	ldr	r3, [r7, #4]
 8104ef2:	681b      	ldr	r3, [r3, #0]
 8104ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8104ef8:	2b00      	cmp	r3, #0
 8104efa:	d049      	beq.n	8104f90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8104efc:	687b      	ldr	r3, [r7, #4]
 8104efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104f04:	d02e      	beq.n	8104f64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8104f06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104f0a:	d828      	bhi.n	8104f5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104f0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104f10:	d02a      	beq.n	8104f68 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8104f12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104f16:	d822      	bhi.n	8104f5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104f18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104f1c:	d026      	beq.n	8104f6c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8104f1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104f22:	d81c      	bhi.n	8104f5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104f24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104f28:	d010      	beq.n	8104f4c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8104f2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104f2e:	d816      	bhi.n	8104f5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104f30:	2b00      	cmp	r3, #0
 8104f32:	d01d      	beq.n	8104f70 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8104f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104f38:	d111      	bne.n	8104f5e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104f3a:	687b      	ldr	r3, [r7, #4]
 8104f3c:	3304      	adds	r3, #4
 8104f3e:	2101      	movs	r1, #1
 8104f40:	4618      	mov	r0, r3
 8104f42:	f000 ffd5 	bl	8105ef0 <RCCEx_PLL2_Config>
 8104f46:	4603      	mov	r3, r0
 8104f48:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8104f4a:	e012      	b.n	8104f72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104f4c:	687b      	ldr	r3, [r7, #4]
 8104f4e:	3324      	adds	r3, #36	; 0x24
 8104f50:	2101      	movs	r1, #1
 8104f52:	4618      	mov	r0, r3
 8104f54:	f001 f87e 	bl	8106054 <RCCEx_PLL3_Config>
 8104f58:	4603      	mov	r3, r0
 8104f5a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8104f5c:	e009      	b.n	8104f72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104f5e:	2301      	movs	r3, #1
 8104f60:	75fb      	strb	r3, [r7, #23]
      break;
 8104f62:	e006      	b.n	8104f72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104f64:	bf00      	nop
 8104f66:	e004      	b.n	8104f72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104f68:	bf00      	nop
 8104f6a:	e002      	b.n	8104f72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104f6c:	bf00      	nop
 8104f6e:	e000      	b.n	8104f72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104f72:	7dfb      	ldrb	r3, [r7, #23]
 8104f74:	2b00      	cmp	r3, #0
 8104f76:	d109      	bne.n	8104f8c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8104f78:	4b2d      	ldr	r3, [pc, #180]	; (8105030 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104f7c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8104f80:	687b      	ldr	r3, [r7, #4]
 8104f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104f84:	492a      	ldr	r1, [pc, #168]	; (8105030 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104f86:	4313      	orrs	r3, r2
 8104f88:	650b      	str	r3, [r1, #80]	; 0x50
 8104f8a:	e001      	b.n	8104f90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f8c:	7dfb      	ldrb	r3, [r7, #23]
 8104f8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8104f90:	687b      	ldr	r3, [r7, #4]
 8104f92:	681b      	ldr	r3, [r3, #0]
 8104f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8104f98:	2b00      	cmp	r3, #0
 8104f9a:	d04d      	beq.n	8105038 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8104f9c:	687b      	ldr	r3, [r7, #4]
 8104f9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8104fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104fa6:	d02e      	beq.n	8105006 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8104fa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104fac:	d828      	bhi.n	8105000 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8104fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104fb2:	d02a      	beq.n	810500a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8104fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104fb8:	d822      	bhi.n	8105000 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8104fba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104fbe:	d026      	beq.n	810500e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8104fc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104fc4:	d81c      	bhi.n	8105000 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8104fc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104fca:	d010      	beq.n	8104fee <HAL_RCCEx_PeriphCLKConfig+0x506>
 8104fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104fd0:	d816      	bhi.n	8105000 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8104fd2:	2b00      	cmp	r3, #0
 8104fd4:	d01d      	beq.n	8105012 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8104fd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104fda:	d111      	bne.n	8105000 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104fdc:	687b      	ldr	r3, [r7, #4]
 8104fde:	3304      	adds	r3, #4
 8104fe0:	2101      	movs	r1, #1
 8104fe2:	4618      	mov	r0, r3
 8104fe4:	f000 ff84 	bl	8105ef0 <RCCEx_PLL2_Config>
 8104fe8:	4603      	mov	r3, r0
 8104fea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8104fec:	e012      	b.n	8105014 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104fee:	687b      	ldr	r3, [r7, #4]
 8104ff0:	3324      	adds	r3, #36	; 0x24
 8104ff2:	2101      	movs	r1, #1
 8104ff4:	4618      	mov	r0, r3
 8104ff6:	f001 f82d 	bl	8106054 <RCCEx_PLL3_Config>
 8104ffa:	4603      	mov	r3, r0
 8104ffc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8104ffe:	e009      	b.n	8105014 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8105000:	2301      	movs	r3, #1
 8105002:	75fb      	strb	r3, [r7, #23]
      break;
 8105004:	e006      	b.n	8105014 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105006:	bf00      	nop
 8105008:	e004      	b.n	8105014 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810500a:	bf00      	nop
 810500c:	e002      	b.n	8105014 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810500e:	bf00      	nop
 8105010:	e000      	b.n	8105014 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105012:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105014:	7dfb      	ldrb	r3, [r7, #23]
 8105016:	2b00      	cmp	r3, #0
 8105018:	d10c      	bne.n	8105034 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810501a:	4b05      	ldr	r3, [pc, #20]	; (8105030 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810501c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810501e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8105022:	687b      	ldr	r3, [r7, #4]
 8105024:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105028:	4901      	ldr	r1, [pc, #4]	; (8105030 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810502a:	4313      	orrs	r3, r2
 810502c:	658b      	str	r3, [r1, #88]	; 0x58
 810502e:	e003      	b.n	8105038 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8105030:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105034:	7dfb      	ldrb	r3, [r7, #23]
 8105036:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105038:	687b      	ldr	r3, [r7, #4]
 810503a:	681b      	ldr	r3, [r3, #0]
 810503c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105040:	2b00      	cmp	r3, #0
 8105042:	d02f      	beq.n	81050a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8105044:	687b      	ldr	r3, [r7, #4]
 8105046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810504c:	d00e      	beq.n	810506c <HAL_RCCEx_PeriphCLKConfig+0x584>
 810504e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105052:	d814      	bhi.n	810507e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8105054:	2b00      	cmp	r3, #0
 8105056:	d015      	beq.n	8105084 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8105058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810505c:	d10f      	bne.n	810507e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810505e:	4bb0      	ldr	r3, [pc, #704]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105062:	4aaf      	ldr	r2, [pc, #700]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105068:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810506a:	e00c      	b.n	8105086 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810506c:	687b      	ldr	r3, [r7, #4]
 810506e:	3304      	adds	r3, #4
 8105070:	2101      	movs	r1, #1
 8105072:	4618      	mov	r0, r3
 8105074:	f000 ff3c 	bl	8105ef0 <RCCEx_PLL2_Config>
 8105078:	4603      	mov	r3, r0
 810507a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810507c:	e003      	b.n	8105086 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810507e:	2301      	movs	r3, #1
 8105080:	75fb      	strb	r3, [r7, #23]
      break;
 8105082:	e000      	b.n	8105086 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8105084:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105086:	7dfb      	ldrb	r3, [r7, #23]
 8105088:	2b00      	cmp	r3, #0
 810508a:	d109      	bne.n	81050a0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810508c:	4ba4      	ldr	r3, [pc, #656]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810508e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105090:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8105094:	687b      	ldr	r3, [r7, #4]
 8105096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105098:	49a1      	ldr	r1, [pc, #644]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810509a:	4313      	orrs	r3, r2
 810509c:	650b      	str	r3, [r1, #80]	; 0x50
 810509e:	e001      	b.n	81050a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81050a0:	7dfb      	ldrb	r3, [r7, #23]
 81050a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81050a4:	687b      	ldr	r3, [r7, #4]
 81050a6:	681b      	ldr	r3, [r3, #0]
 81050a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81050ac:	2b00      	cmp	r3, #0
 81050ae:	d032      	beq.n	8105116 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 81050b0:	687b      	ldr	r3, [r7, #4]
 81050b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81050b4:	2b03      	cmp	r3, #3
 81050b6:	d81b      	bhi.n	81050f0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 81050b8:	a201      	add	r2, pc, #4	; (adr r2, 81050c0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 81050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81050be:	bf00      	nop
 81050c0:	081050f7 	.word	0x081050f7
 81050c4:	081050d1 	.word	0x081050d1
 81050c8:	081050df 	.word	0x081050df
 81050cc:	081050f7 	.word	0x081050f7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81050d0:	4b93      	ldr	r3, [pc, #588]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81050d4:	4a92      	ldr	r2, [pc, #584]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81050d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81050da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81050dc:	e00c      	b.n	81050f8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81050de:	687b      	ldr	r3, [r7, #4]
 81050e0:	3304      	adds	r3, #4
 81050e2:	2102      	movs	r1, #2
 81050e4:	4618      	mov	r0, r3
 81050e6:	f000 ff03 	bl	8105ef0 <RCCEx_PLL2_Config>
 81050ea:	4603      	mov	r3, r0
 81050ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81050ee:	e003      	b.n	81050f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81050f0:	2301      	movs	r3, #1
 81050f2:	75fb      	strb	r3, [r7, #23]
      break;
 81050f4:	e000      	b.n	81050f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 81050f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81050f8:	7dfb      	ldrb	r3, [r7, #23]
 81050fa:	2b00      	cmp	r3, #0
 81050fc:	d109      	bne.n	8105112 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81050fe:	4b88      	ldr	r3, [pc, #544]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105102:	f023 0203 	bic.w	r2, r3, #3
 8105106:	687b      	ldr	r3, [r7, #4]
 8105108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810510a:	4985      	ldr	r1, [pc, #532]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810510c:	4313      	orrs	r3, r2
 810510e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105110:	e001      	b.n	8105116 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105112:	7dfb      	ldrb	r3, [r7, #23]
 8105114:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105116:	687b      	ldr	r3, [r7, #4]
 8105118:	681b      	ldr	r3, [r3, #0]
 810511a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810511e:	2b00      	cmp	r3, #0
 8105120:	f000 8088 	beq.w	8105234 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8105124:	4b7f      	ldr	r3, [pc, #508]	; (8105324 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8105126:	681b      	ldr	r3, [r3, #0]
 8105128:	4a7e      	ldr	r2, [pc, #504]	; (8105324 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810512a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810512e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8105130:	f7fc fd8a 	bl	8101c48 <HAL_GetTick>
 8105134:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105136:	e009      	b.n	810514c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105138:	f7fc fd86 	bl	8101c48 <HAL_GetTick>
 810513c:	4602      	mov	r2, r0
 810513e:	693b      	ldr	r3, [r7, #16]
 8105140:	1ad3      	subs	r3, r2, r3
 8105142:	2b64      	cmp	r3, #100	; 0x64
 8105144:	d902      	bls.n	810514c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8105146:	2303      	movs	r3, #3
 8105148:	75fb      	strb	r3, [r7, #23]
        break;
 810514a:	e005      	b.n	8105158 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810514c:	4b75      	ldr	r3, [pc, #468]	; (8105324 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810514e:	681b      	ldr	r3, [r3, #0]
 8105150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105154:	2b00      	cmp	r3, #0
 8105156:	d0ef      	beq.n	8105138 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8105158:	7dfb      	ldrb	r3, [r7, #23]
 810515a:	2b00      	cmp	r3, #0
 810515c:	d168      	bne.n	8105230 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810515e:	4b70      	ldr	r3, [pc, #448]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105160:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105162:	687b      	ldr	r3, [r7, #4]
 8105164:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105168:	4053      	eors	r3, r2
 810516a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810516e:	2b00      	cmp	r3, #0
 8105170:	d013      	beq.n	810519a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8105172:	4b6b      	ldr	r3, [pc, #428]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810517a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810517c:	4b68      	ldr	r3, [pc, #416]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810517e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105180:	4a67      	ldr	r2, [pc, #412]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8105186:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8105188:	4b65      	ldr	r3, [pc, #404]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810518a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810518c:	4a64      	ldr	r2, [pc, #400]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810518e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105192:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8105194:	4a62      	ldr	r2, [pc, #392]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105196:	68fb      	ldr	r3, [r7, #12]
 8105198:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810519a:	687b      	ldr	r3, [r7, #4]
 810519c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81051a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81051a4:	d115      	bne.n	81051d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81051a6:	f7fc fd4f 	bl	8101c48 <HAL_GetTick>
 81051aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81051ac:	e00b      	b.n	81051c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81051ae:	f7fc fd4b 	bl	8101c48 <HAL_GetTick>
 81051b2:	4602      	mov	r2, r0
 81051b4:	693b      	ldr	r3, [r7, #16]
 81051b6:	1ad3      	subs	r3, r2, r3
 81051b8:	f241 3288 	movw	r2, #5000	; 0x1388
 81051bc:	4293      	cmp	r3, r2
 81051be:	d902      	bls.n	81051c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81051c0:	2303      	movs	r3, #3
 81051c2:	75fb      	strb	r3, [r7, #23]
            break;
 81051c4:	e005      	b.n	81051d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81051c6:	4b56      	ldr	r3, [pc, #344]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81051c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81051ca:	f003 0302 	and.w	r3, r3, #2
 81051ce:	2b00      	cmp	r3, #0
 81051d0:	d0ed      	beq.n	81051ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81051d2:	7dfb      	ldrb	r3, [r7, #23]
 81051d4:	2b00      	cmp	r3, #0
 81051d6:	d128      	bne.n	810522a <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81051d8:	687b      	ldr	r3, [r7, #4]
 81051da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81051de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81051e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81051e6:	d10f      	bne.n	8105208 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81051e8:	4b4d      	ldr	r3, [pc, #308]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81051ea:	691b      	ldr	r3, [r3, #16]
 81051ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81051f0:	687b      	ldr	r3, [r7, #4]
 81051f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81051f6:	091b      	lsrs	r3, r3, #4
 81051f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81051fc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8105200:	4947      	ldr	r1, [pc, #284]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105202:	4313      	orrs	r3, r2
 8105204:	610b      	str	r3, [r1, #16]
 8105206:	e005      	b.n	8105214 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8105208:	4b45      	ldr	r3, [pc, #276]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810520a:	691b      	ldr	r3, [r3, #16]
 810520c:	4a44      	ldr	r2, [pc, #272]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810520e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8105212:	6113      	str	r3, [r2, #16]
 8105214:	4b42      	ldr	r3, [pc, #264]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105216:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105218:	687b      	ldr	r3, [r7, #4]
 810521a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810521e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8105222:	493f      	ldr	r1, [pc, #252]	; (8105320 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105224:	4313      	orrs	r3, r2
 8105226:	670b      	str	r3, [r1, #112]	; 0x70
 8105228:	e004      	b.n	8105234 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810522a:	7dfb      	ldrb	r3, [r7, #23]
 810522c:	75bb      	strb	r3, [r7, #22]
 810522e:	e001      	b.n	8105234 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105230:	7dfb      	ldrb	r3, [r7, #23]
 8105232:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105234:	687b      	ldr	r3, [r7, #4]
 8105236:	681b      	ldr	r3, [r3, #0]
 8105238:	f003 0301 	and.w	r3, r3, #1
 810523c:	2b00      	cmp	r3, #0
 810523e:	f000 8083 	beq.w	8105348 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8105242:	687b      	ldr	r3, [r7, #4]
 8105244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105246:	2b28      	cmp	r3, #40	; 0x28
 8105248:	d866      	bhi.n	8105318 <HAL_RCCEx_PeriphCLKConfig+0x830>
 810524a:	a201      	add	r2, pc, #4	; (adr r2, 8105250 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 810524c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105250:	08105329 	.word	0x08105329
 8105254:	08105319 	.word	0x08105319
 8105258:	08105319 	.word	0x08105319
 810525c:	08105319 	.word	0x08105319
 8105260:	08105319 	.word	0x08105319
 8105264:	08105319 	.word	0x08105319
 8105268:	08105319 	.word	0x08105319
 810526c:	08105319 	.word	0x08105319
 8105270:	081052f5 	.word	0x081052f5
 8105274:	08105319 	.word	0x08105319
 8105278:	08105319 	.word	0x08105319
 810527c:	08105319 	.word	0x08105319
 8105280:	08105319 	.word	0x08105319
 8105284:	08105319 	.word	0x08105319
 8105288:	08105319 	.word	0x08105319
 810528c:	08105319 	.word	0x08105319
 8105290:	08105307 	.word	0x08105307
 8105294:	08105319 	.word	0x08105319
 8105298:	08105319 	.word	0x08105319
 810529c:	08105319 	.word	0x08105319
 81052a0:	08105319 	.word	0x08105319
 81052a4:	08105319 	.word	0x08105319
 81052a8:	08105319 	.word	0x08105319
 81052ac:	08105319 	.word	0x08105319
 81052b0:	08105329 	.word	0x08105329
 81052b4:	08105319 	.word	0x08105319
 81052b8:	08105319 	.word	0x08105319
 81052bc:	08105319 	.word	0x08105319
 81052c0:	08105319 	.word	0x08105319
 81052c4:	08105319 	.word	0x08105319
 81052c8:	08105319 	.word	0x08105319
 81052cc:	08105319 	.word	0x08105319
 81052d0:	08105329 	.word	0x08105329
 81052d4:	08105319 	.word	0x08105319
 81052d8:	08105319 	.word	0x08105319
 81052dc:	08105319 	.word	0x08105319
 81052e0:	08105319 	.word	0x08105319
 81052e4:	08105319 	.word	0x08105319
 81052e8:	08105319 	.word	0x08105319
 81052ec:	08105319 	.word	0x08105319
 81052f0:	08105329 	.word	0x08105329
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81052f4:	687b      	ldr	r3, [r7, #4]
 81052f6:	3304      	adds	r3, #4
 81052f8:	2101      	movs	r1, #1
 81052fa:	4618      	mov	r0, r3
 81052fc:	f000 fdf8 	bl	8105ef0 <RCCEx_PLL2_Config>
 8105300:	4603      	mov	r3, r0
 8105302:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8105304:	e011      	b.n	810532a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105306:	687b      	ldr	r3, [r7, #4]
 8105308:	3324      	adds	r3, #36	; 0x24
 810530a:	2101      	movs	r1, #1
 810530c:	4618      	mov	r0, r3
 810530e:	f000 fea1 	bl	8106054 <RCCEx_PLL3_Config>
 8105312:	4603      	mov	r3, r0
 8105314:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8105316:	e008      	b.n	810532a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105318:	2301      	movs	r3, #1
 810531a:	75fb      	strb	r3, [r7, #23]
      break;
 810531c:	e005      	b.n	810532a <HAL_RCCEx_PeriphCLKConfig+0x842>
 810531e:	bf00      	nop
 8105320:	58024400 	.word	0x58024400
 8105324:	58024800 	.word	0x58024800
      break;
 8105328:	bf00      	nop
    }

    if(ret == HAL_OK)
 810532a:	7dfb      	ldrb	r3, [r7, #23]
 810532c:	2b00      	cmp	r3, #0
 810532e:	d109      	bne.n	8105344 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8105330:	4b96      	ldr	r3, [pc, #600]	; (810558c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105334:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8105338:	687b      	ldr	r3, [r7, #4]
 810533a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810533c:	4993      	ldr	r1, [pc, #588]	; (810558c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810533e:	4313      	orrs	r3, r2
 8105340:	654b      	str	r3, [r1, #84]	; 0x54
 8105342:	e001      	b.n	8105348 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105344:	7dfb      	ldrb	r3, [r7, #23]
 8105346:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8105348:	687b      	ldr	r3, [r7, #4]
 810534a:	681b      	ldr	r3, [r3, #0]
 810534c:	f003 0302 	and.w	r3, r3, #2
 8105350:	2b00      	cmp	r3, #0
 8105352:	d038      	beq.n	81053c6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8105354:	687b      	ldr	r3, [r7, #4]
 8105356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8105358:	2b05      	cmp	r3, #5
 810535a:	d821      	bhi.n	81053a0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 810535c:	a201      	add	r2, pc, #4	; (adr r2, 8105364 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 810535e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105362:	bf00      	nop
 8105364:	081053a7 	.word	0x081053a7
 8105368:	0810537d 	.word	0x0810537d
 810536c:	0810538f 	.word	0x0810538f
 8105370:	081053a7 	.word	0x081053a7
 8105374:	081053a7 	.word	0x081053a7
 8105378:	081053a7 	.word	0x081053a7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810537c:	687b      	ldr	r3, [r7, #4]
 810537e:	3304      	adds	r3, #4
 8105380:	2101      	movs	r1, #1
 8105382:	4618      	mov	r0, r3
 8105384:	f000 fdb4 	bl	8105ef0 <RCCEx_PLL2_Config>
 8105388:	4603      	mov	r3, r0
 810538a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810538c:	e00c      	b.n	81053a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810538e:	687b      	ldr	r3, [r7, #4]
 8105390:	3324      	adds	r3, #36	; 0x24
 8105392:	2101      	movs	r1, #1
 8105394:	4618      	mov	r0, r3
 8105396:	f000 fe5d 	bl	8106054 <RCCEx_PLL3_Config>
 810539a:	4603      	mov	r3, r0
 810539c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810539e:	e003      	b.n	81053a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81053a0:	2301      	movs	r3, #1
 81053a2:	75fb      	strb	r3, [r7, #23]
      break;
 81053a4:	e000      	b.n	81053a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 81053a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81053a8:	7dfb      	ldrb	r3, [r7, #23]
 81053aa:	2b00      	cmp	r3, #0
 81053ac:	d109      	bne.n	81053c2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81053ae:	4b77      	ldr	r3, [pc, #476]	; (810558c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81053b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81053b2:	f023 0207 	bic.w	r2, r3, #7
 81053b6:	687b      	ldr	r3, [r7, #4]
 81053b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81053ba:	4974      	ldr	r1, [pc, #464]	; (810558c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81053bc:	4313      	orrs	r3, r2
 81053be:	654b      	str	r3, [r1, #84]	; 0x54
 81053c0:	e001      	b.n	81053c6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81053c2:	7dfb      	ldrb	r3, [r7, #23]
 81053c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81053c6:	687b      	ldr	r3, [r7, #4]
 81053c8:	681b      	ldr	r3, [r3, #0]
 81053ca:	f003 0304 	and.w	r3, r3, #4
 81053ce:	2b00      	cmp	r3, #0
 81053d0:	d03a      	beq.n	8105448 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81053d2:	687b      	ldr	r3, [r7, #4]
 81053d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81053d8:	2b05      	cmp	r3, #5
 81053da:	d821      	bhi.n	8105420 <HAL_RCCEx_PeriphCLKConfig+0x938>
 81053dc:	a201      	add	r2, pc, #4	; (adr r2, 81053e4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 81053de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81053e2:	bf00      	nop
 81053e4:	08105427 	.word	0x08105427
 81053e8:	081053fd 	.word	0x081053fd
 81053ec:	0810540f 	.word	0x0810540f
 81053f0:	08105427 	.word	0x08105427
 81053f4:	08105427 	.word	0x08105427
 81053f8:	08105427 	.word	0x08105427
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81053fc:	687b      	ldr	r3, [r7, #4]
 81053fe:	3304      	adds	r3, #4
 8105400:	2101      	movs	r1, #1
 8105402:	4618      	mov	r0, r3
 8105404:	f000 fd74 	bl	8105ef0 <RCCEx_PLL2_Config>
 8105408:	4603      	mov	r3, r0
 810540a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810540c:	e00c      	b.n	8105428 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810540e:	687b      	ldr	r3, [r7, #4]
 8105410:	3324      	adds	r3, #36	; 0x24
 8105412:	2101      	movs	r1, #1
 8105414:	4618      	mov	r0, r3
 8105416:	f000 fe1d 	bl	8106054 <RCCEx_PLL3_Config>
 810541a:	4603      	mov	r3, r0
 810541c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810541e:	e003      	b.n	8105428 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105420:	2301      	movs	r3, #1
 8105422:	75fb      	strb	r3, [r7, #23]
      break;
 8105424:	e000      	b.n	8105428 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8105426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105428:	7dfb      	ldrb	r3, [r7, #23]
 810542a:	2b00      	cmp	r3, #0
 810542c:	d10a      	bne.n	8105444 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810542e:	4b57      	ldr	r3, [pc, #348]	; (810558c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105432:	f023 0207 	bic.w	r2, r3, #7
 8105436:	687b      	ldr	r3, [r7, #4]
 8105438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810543c:	4953      	ldr	r1, [pc, #332]	; (810558c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810543e:	4313      	orrs	r3, r2
 8105440:	658b      	str	r3, [r1, #88]	; 0x58
 8105442:	e001      	b.n	8105448 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105444:	7dfb      	ldrb	r3, [r7, #23]
 8105446:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8105448:	687b      	ldr	r3, [r7, #4]
 810544a:	681b      	ldr	r3, [r3, #0]
 810544c:	f003 0320 	and.w	r3, r3, #32
 8105450:	2b00      	cmp	r3, #0
 8105452:	d04b      	beq.n	81054ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8105454:	687b      	ldr	r3, [r7, #4]
 8105456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810545a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810545e:	d02e      	beq.n	81054be <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8105460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105464:	d828      	bhi.n	81054b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8105466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810546a:	d02a      	beq.n	81054c2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 810546c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105470:	d822      	bhi.n	81054b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8105472:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105476:	d026      	beq.n	81054c6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8105478:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810547c:	d81c      	bhi.n	81054b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810547e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105482:	d010      	beq.n	81054a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8105484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105488:	d816      	bhi.n	81054b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810548a:	2b00      	cmp	r3, #0
 810548c:	d01d      	beq.n	81054ca <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 810548e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105492:	d111      	bne.n	81054b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105494:	687b      	ldr	r3, [r7, #4]
 8105496:	3304      	adds	r3, #4
 8105498:	2100      	movs	r1, #0
 810549a:	4618      	mov	r0, r3
 810549c:	f000 fd28 	bl	8105ef0 <RCCEx_PLL2_Config>
 81054a0:	4603      	mov	r3, r0
 81054a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81054a4:	e012      	b.n	81054cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81054a6:	687b      	ldr	r3, [r7, #4]
 81054a8:	3324      	adds	r3, #36	; 0x24
 81054aa:	2102      	movs	r1, #2
 81054ac:	4618      	mov	r0, r3
 81054ae:	f000 fdd1 	bl	8106054 <RCCEx_PLL3_Config>
 81054b2:	4603      	mov	r3, r0
 81054b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81054b6:	e009      	b.n	81054cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81054b8:	2301      	movs	r3, #1
 81054ba:	75fb      	strb	r3, [r7, #23]
      break;
 81054bc:	e006      	b.n	81054cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81054be:	bf00      	nop
 81054c0:	e004      	b.n	81054cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81054c2:	bf00      	nop
 81054c4:	e002      	b.n	81054cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81054c6:	bf00      	nop
 81054c8:	e000      	b.n	81054cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81054ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 81054cc:	7dfb      	ldrb	r3, [r7, #23]
 81054ce:	2b00      	cmp	r3, #0
 81054d0:	d10a      	bne.n	81054e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81054d2:	4b2e      	ldr	r3, [pc, #184]	; (810558c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81054d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81054d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81054da:	687b      	ldr	r3, [r7, #4]
 81054dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81054e0:	492a      	ldr	r1, [pc, #168]	; (810558c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81054e2:	4313      	orrs	r3, r2
 81054e4:	654b      	str	r3, [r1, #84]	; 0x54
 81054e6:	e001      	b.n	81054ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81054e8:	7dfb      	ldrb	r3, [r7, #23]
 81054ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81054ec:	687b      	ldr	r3, [r7, #4]
 81054ee:	681b      	ldr	r3, [r3, #0]
 81054f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81054f4:	2b00      	cmp	r3, #0
 81054f6:	d04d      	beq.n	8105594 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81054f8:	687b      	ldr	r3, [r7, #4]
 81054fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81054fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8105502:	d02e      	beq.n	8105562 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8105504:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8105508:	d828      	bhi.n	810555c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810550a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810550e:	d02a      	beq.n	8105566 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8105510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105514:	d822      	bhi.n	810555c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8105516:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810551a:	d026      	beq.n	810556a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810551c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8105520:	d81c      	bhi.n	810555c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8105522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105526:	d010      	beq.n	810554a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8105528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810552c:	d816      	bhi.n	810555c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810552e:	2b00      	cmp	r3, #0
 8105530:	d01d      	beq.n	810556e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8105532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8105536:	d111      	bne.n	810555c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105538:	687b      	ldr	r3, [r7, #4]
 810553a:	3304      	adds	r3, #4
 810553c:	2100      	movs	r1, #0
 810553e:	4618      	mov	r0, r3
 8105540:	f000 fcd6 	bl	8105ef0 <RCCEx_PLL2_Config>
 8105544:	4603      	mov	r3, r0
 8105546:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8105548:	e012      	b.n	8105570 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810554a:	687b      	ldr	r3, [r7, #4]
 810554c:	3324      	adds	r3, #36	; 0x24
 810554e:	2102      	movs	r1, #2
 8105550:	4618      	mov	r0, r3
 8105552:	f000 fd7f 	bl	8106054 <RCCEx_PLL3_Config>
 8105556:	4603      	mov	r3, r0
 8105558:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810555a:	e009      	b.n	8105570 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810555c:	2301      	movs	r3, #1
 810555e:	75fb      	strb	r3, [r7, #23]
      break;
 8105560:	e006      	b.n	8105570 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8105562:	bf00      	nop
 8105564:	e004      	b.n	8105570 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8105566:	bf00      	nop
 8105568:	e002      	b.n	8105570 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810556a:	bf00      	nop
 810556c:	e000      	b.n	8105570 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810556e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105570:	7dfb      	ldrb	r3, [r7, #23]
 8105572:	2b00      	cmp	r3, #0
 8105574:	d10c      	bne.n	8105590 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8105576:	4b05      	ldr	r3, [pc, #20]	; (810558c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810557a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810557e:	687b      	ldr	r3, [r7, #4]
 8105580:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8105584:	4901      	ldr	r1, [pc, #4]	; (810558c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105586:	4313      	orrs	r3, r2
 8105588:	658b      	str	r3, [r1, #88]	; 0x58
 810558a:	e003      	b.n	8105594 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 810558c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105590:	7dfb      	ldrb	r3, [r7, #23]
 8105592:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8105594:	687b      	ldr	r3, [r7, #4]
 8105596:	681b      	ldr	r3, [r3, #0]
 8105598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810559c:	2b00      	cmp	r3, #0
 810559e:	d04b      	beq.n	8105638 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81055a0:	687b      	ldr	r3, [r7, #4]
 81055a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81055a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81055aa:	d02e      	beq.n	810560a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81055ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81055b0:	d828      	bhi.n	8105604 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81055b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81055b6:	d02a      	beq.n	810560e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81055b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81055bc:	d822      	bhi.n	8105604 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81055be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81055c2:	d026      	beq.n	8105612 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 81055c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81055c8:	d81c      	bhi.n	8105604 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81055ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81055ce:	d010      	beq.n	81055f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 81055d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81055d4:	d816      	bhi.n	8105604 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81055d6:	2b00      	cmp	r3, #0
 81055d8:	d01d      	beq.n	8105616 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 81055da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81055de:	d111      	bne.n	8105604 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81055e0:	687b      	ldr	r3, [r7, #4]
 81055e2:	3304      	adds	r3, #4
 81055e4:	2100      	movs	r1, #0
 81055e6:	4618      	mov	r0, r3
 81055e8:	f000 fc82 	bl	8105ef0 <RCCEx_PLL2_Config>
 81055ec:	4603      	mov	r3, r0
 81055ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81055f0:	e012      	b.n	8105618 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81055f2:	687b      	ldr	r3, [r7, #4]
 81055f4:	3324      	adds	r3, #36	; 0x24
 81055f6:	2102      	movs	r1, #2
 81055f8:	4618      	mov	r0, r3
 81055fa:	f000 fd2b 	bl	8106054 <RCCEx_PLL3_Config>
 81055fe:	4603      	mov	r3, r0
 8105600:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8105602:	e009      	b.n	8105618 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105604:	2301      	movs	r3, #1
 8105606:	75fb      	strb	r3, [r7, #23]
      break;
 8105608:	e006      	b.n	8105618 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810560a:	bf00      	nop
 810560c:	e004      	b.n	8105618 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810560e:	bf00      	nop
 8105610:	e002      	b.n	8105618 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8105612:	bf00      	nop
 8105614:	e000      	b.n	8105618 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8105616:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105618:	7dfb      	ldrb	r3, [r7, #23]
 810561a:	2b00      	cmp	r3, #0
 810561c:	d10a      	bne.n	8105634 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810561e:	4b9d      	ldr	r3, [pc, #628]	; (8105894 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8105626:	687b      	ldr	r3, [r7, #4]
 8105628:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810562c:	4999      	ldr	r1, [pc, #612]	; (8105894 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810562e:	4313      	orrs	r3, r2
 8105630:	658b      	str	r3, [r1, #88]	; 0x58
 8105632:	e001      	b.n	8105638 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105634:	7dfb      	ldrb	r3, [r7, #23]
 8105636:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8105638:	687b      	ldr	r3, [r7, #4]
 810563a:	681b      	ldr	r3, [r3, #0]
 810563c:	f003 0308 	and.w	r3, r3, #8
 8105640:	2b00      	cmp	r3, #0
 8105642:	d01a      	beq.n	810567a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8105644:	687b      	ldr	r3, [r7, #4]
 8105646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810564a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810564e:	d10a      	bne.n	8105666 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8105650:	687b      	ldr	r3, [r7, #4]
 8105652:	3324      	adds	r3, #36	; 0x24
 8105654:	2102      	movs	r1, #2
 8105656:	4618      	mov	r0, r3
 8105658:	f000 fcfc 	bl	8106054 <RCCEx_PLL3_Config>
 810565c:	4603      	mov	r3, r0
 810565e:	2b00      	cmp	r3, #0
 8105660:	d001      	beq.n	8105666 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8105662:	2301      	movs	r3, #1
 8105664:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8105666:	4b8b      	ldr	r3, [pc, #556]	; (8105894 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810566a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810566e:	687b      	ldr	r3, [r7, #4]
 8105670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8105674:	4987      	ldr	r1, [pc, #540]	; (8105894 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105676:	4313      	orrs	r3, r2
 8105678:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810567a:	687b      	ldr	r3, [r7, #4]
 810567c:	681b      	ldr	r3, [r3, #0]
 810567e:	f003 0310 	and.w	r3, r3, #16
 8105682:	2b00      	cmp	r3, #0
 8105684:	d01a      	beq.n	81056bc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8105686:	687b      	ldr	r3, [r7, #4]
 8105688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810568c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105690:	d10a      	bne.n	81056a8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8105692:	687b      	ldr	r3, [r7, #4]
 8105694:	3324      	adds	r3, #36	; 0x24
 8105696:	2102      	movs	r1, #2
 8105698:	4618      	mov	r0, r3
 810569a:	f000 fcdb 	bl	8106054 <RCCEx_PLL3_Config>
 810569e:	4603      	mov	r3, r0
 81056a0:	2b00      	cmp	r3, #0
 81056a2:	d001      	beq.n	81056a8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 81056a4:	2301      	movs	r3, #1
 81056a6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81056a8:	4b7a      	ldr	r3, [pc, #488]	; (8105894 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81056aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81056ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81056b0:	687b      	ldr	r3, [r7, #4]
 81056b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81056b6:	4977      	ldr	r1, [pc, #476]	; (8105894 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81056b8:	4313      	orrs	r3, r2
 81056ba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81056bc:	687b      	ldr	r3, [r7, #4]
 81056be:	681b      	ldr	r3, [r3, #0]
 81056c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81056c4:	2b00      	cmp	r3, #0
 81056c6:	d034      	beq.n	8105732 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81056c8:	687b      	ldr	r3, [r7, #4]
 81056ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81056ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81056d2:	d01d      	beq.n	8105710 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 81056d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81056d8:	d817      	bhi.n	810570a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 81056da:	2b00      	cmp	r3, #0
 81056dc:	d003      	beq.n	81056e6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 81056de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81056e2:	d009      	beq.n	81056f8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 81056e4:	e011      	b.n	810570a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81056e6:	687b      	ldr	r3, [r7, #4]
 81056e8:	3304      	adds	r3, #4
 81056ea:	2100      	movs	r1, #0
 81056ec:	4618      	mov	r0, r3
 81056ee:	f000 fbff 	bl	8105ef0 <RCCEx_PLL2_Config>
 81056f2:	4603      	mov	r3, r0
 81056f4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81056f6:	e00c      	b.n	8105712 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81056f8:	687b      	ldr	r3, [r7, #4]
 81056fa:	3324      	adds	r3, #36	; 0x24
 81056fc:	2102      	movs	r1, #2
 81056fe:	4618      	mov	r0, r3
 8105700:	f000 fca8 	bl	8106054 <RCCEx_PLL3_Config>
 8105704:	4603      	mov	r3, r0
 8105706:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8105708:	e003      	b.n	8105712 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810570a:	2301      	movs	r3, #1
 810570c:	75fb      	strb	r3, [r7, #23]
      break;
 810570e:	e000      	b.n	8105712 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8105710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105712:	7dfb      	ldrb	r3, [r7, #23]
 8105714:	2b00      	cmp	r3, #0
 8105716:	d10a      	bne.n	810572e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8105718:	4b5e      	ldr	r3, [pc, #376]	; (8105894 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810571a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810571c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8105720:	687b      	ldr	r3, [r7, #4]
 8105722:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8105726:	495b      	ldr	r1, [pc, #364]	; (8105894 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105728:	4313      	orrs	r3, r2
 810572a:	658b      	str	r3, [r1, #88]	; 0x58
 810572c:	e001      	b.n	8105732 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810572e:	7dfb      	ldrb	r3, [r7, #23]
 8105730:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8105732:	687b      	ldr	r3, [r7, #4]
 8105734:	681b      	ldr	r3, [r3, #0]
 8105736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810573a:	2b00      	cmp	r3, #0
 810573c:	d033      	beq.n	81057a6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810573e:	687b      	ldr	r3, [r7, #4]
 8105740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105744:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105748:	d01c      	beq.n	8105784 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 810574a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810574e:	d816      	bhi.n	810577e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8105750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105754:	d003      	beq.n	810575e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8105756:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810575a:	d007      	beq.n	810576c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 810575c:	e00f      	b.n	810577e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810575e:	4b4d      	ldr	r3, [pc, #308]	; (8105894 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105762:	4a4c      	ldr	r2, [pc, #304]	; (8105894 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105768:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810576a:	e00c      	b.n	8105786 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810576c:	687b      	ldr	r3, [r7, #4]
 810576e:	3324      	adds	r3, #36	; 0x24
 8105770:	2101      	movs	r1, #1
 8105772:	4618      	mov	r0, r3
 8105774:	f000 fc6e 	bl	8106054 <RCCEx_PLL3_Config>
 8105778:	4603      	mov	r3, r0
 810577a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 810577c:	e003      	b.n	8105786 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810577e:	2301      	movs	r3, #1
 8105780:	75fb      	strb	r3, [r7, #23]
      break;
 8105782:	e000      	b.n	8105786 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8105784:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105786:	7dfb      	ldrb	r3, [r7, #23]
 8105788:	2b00      	cmp	r3, #0
 810578a:	d10a      	bne.n	81057a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810578c:	4b41      	ldr	r3, [pc, #260]	; (8105894 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810578e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105790:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8105794:	687b      	ldr	r3, [r7, #4]
 8105796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810579a:	493e      	ldr	r1, [pc, #248]	; (8105894 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810579c:	4313      	orrs	r3, r2
 810579e:	654b      	str	r3, [r1, #84]	; 0x54
 81057a0:	e001      	b.n	81057a6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81057a2:	7dfb      	ldrb	r3, [r7, #23]
 81057a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81057a6:	687b      	ldr	r3, [r7, #4]
 81057a8:	681b      	ldr	r3, [r3, #0]
 81057aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81057ae:	2b00      	cmp	r3, #0
 81057b0:	d029      	beq.n	8105806 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81057b2:	687b      	ldr	r3, [r7, #4]
 81057b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81057b6:	2b00      	cmp	r3, #0
 81057b8:	d003      	beq.n	81057c2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 81057ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81057be:	d007      	beq.n	81057d0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 81057c0:	e00f      	b.n	81057e2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81057c2:	4b34      	ldr	r3, [pc, #208]	; (8105894 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81057c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81057c6:	4a33      	ldr	r2, [pc, #204]	; (8105894 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81057c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81057cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81057ce:	e00b      	b.n	81057e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81057d0:	687b      	ldr	r3, [r7, #4]
 81057d2:	3304      	adds	r3, #4
 81057d4:	2102      	movs	r1, #2
 81057d6:	4618      	mov	r0, r3
 81057d8:	f000 fb8a 	bl	8105ef0 <RCCEx_PLL2_Config>
 81057dc:	4603      	mov	r3, r0
 81057de:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81057e0:	e002      	b.n	81057e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 81057e2:	2301      	movs	r3, #1
 81057e4:	75fb      	strb	r3, [r7, #23]
      break;
 81057e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81057e8:	7dfb      	ldrb	r3, [r7, #23]
 81057ea:	2b00      	cmp	r3, #0
 81057ec:	d109      	bne.n	8105802 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81057ee:	4b29      	ldr	r3, [pc, #164]	; (8105894 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81057f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81057f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81057f6:	687b      	ldr	r3, [r7, #4]
 81057f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81057fa:	4926      	ldr	r1, [pc, #152]	; (8105894 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81057fc:	4313      	orrs	r3, r2
 81057fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105800:	e001      	b.n	8105806 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105802:	7dfb      	ldrb	r3, [r7, #23]
 8105804:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8105806:	687b      	ldr	r3, [r7, #4]
 8105808:	681b      	ldr	r3, [r3, #0]
 810580a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810580e:	2b00      	cmp	r3, #0
 8105810:	d00a      	beq.n	8105828 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8105812:	687b      	ldr	r3, [r7, #4]
 8105814:	3324      	adds	r3, #36	; 0x24
 8105816:	2102      	movs	r1, #2
 8105818:	4618      	mov	r0, r3
 810581a:	f000 fc1b 	bl	8106054 <RCCEx_PLL3_Config>
 810581e:	4603      	mov	r3, r0
 8105820:	2b00      	cmp	r3, #0
 8105822:	d001      	beq.n	8105828 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8105824:	2301      	movs	r3, #1
 8105826:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8105828:	687b      	ldr	r3, [r7, #4]
 810582a:	681b      	ldr	r3, [r3, #0]
 810582c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105830:	2b00      	cmp	r3, #0
 8105832:	d033      	beq.n	810589c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8105834:	687b      	ldr	r3, [r7, #4]
 8105836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105838:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810583c:	d017      	beq.n	810586e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810583e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105842:	d811      	bhi.n	8105868 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8105844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105848:	d013      	beq.n	8105872 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810584a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810584e:	d80b      	bhi.n	8105868 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8105850:	2b00      	cmp	r3, #0
 8105852:	d010      	beq.n	8105876 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8105854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105858:	d106      	bne.n	8105868 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810585a:	4b0e      	ldr	r3, [pc, #56]	; (8105894 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810585c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810585e:	4a0d      	ldr	r2, [pc, #52]	; (8105894 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105864:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8105866:	e007      	b.n	8105878 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105868:	2301      	movs	r3, #1
 810586a:	75fb      	strb	r3, [r7, #23]
      break;
 810586c:	e004      	b.n	8105878 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810586e:	bf00      	nop
 8105870:	e002      	b.n	8105878 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8105872:	bf00      	nop
 8105874:	e000      	b.n	8105878 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8105876:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105878:	7dfb      	ldrb	r3, [r7, #23]
 810587a:	2b00      	cmp	r3, #0
 810587c:	d10c      	bne.n	8105898 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810587e:	4b05      	ldr	r3, [pc, #20]	; (8105894 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105882:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8105886:	687b      	ldr	r3, [r7, #4]
 8105888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810588a:	4902      	ldr	r1, [pc, #8]	; (8105894 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810588c:	4313      	orrs	r3, r2
 810588e:	654b      	str	r3, [r1, #84]	; 0x54
 8105890:	e004      	b.n	810589c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8105892:	bf00      	nop
 8105894:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105898:	7dfb      	ldrb	r3, [r7, #23]
 810589a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810589c:	687b      	ldr	r3, [r7, #4]
 810589e:	681b      	ldr	r3, [r3, #0]
 81058a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81058a4:	2b00      	cmp	r3, #0
 81058a6:	d008      	beq.n	81058ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81058a8:	4b31      	ldr	r3, [pc, #196]	; (8105970 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81058aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81058ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81058b0:	687b      	ldr	r3, [r7, #4]
 81058b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81058b4:	492e      	ldr	r1, [pc, #184]	; (8105970 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81058b6:	4313      	orrs	r3, r2
 81058b8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81058ba:	687b      	ldr	r3, [r7, #4]
 81058bc:	681b      	ldr	r3, [r3, #0]
 81058be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81058c2:	2b00      	cmp	r3, #0
 81058c4:	d009      	beq.n	81058da <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81058c6:	4b2a      	ldr	r3, [pc, #168]	; (8105970 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81058c8:	691b      	ldr	r3, [r3, #16]
 81058ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81058ce:	687b      	ldr	r3, [r7, #4]
 81058d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81058d4:	4926      	ldr	r1, [pc, #152]	; (8105970 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81058d6:	4313      	orrs	r3, r2
 81058d8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81058da:	687b      	ldr	r3, [r7, #4]
 81058dc:	681b      	ldr	r3, [r3, #0]
 81058de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81058e2:	2b00      	cmp	r3, #0
 81058e4:	d008      	beq.n	81058f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81058e6:	4b22      	ldr	r3, [pc, #136]	; (8105970 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81058e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81058ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81058ee:	687b      	ldr	r3, [r7, #4]
 81058f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81058f2:	491f      	ldr	r1, [pc, #124]	; (8105970 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81058f4:	4313      	orrs	r3, r2
 81058f6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81058f8:	687b      	ldr	r3, [r7, #4]
 81058fa:	681b      	ldr	r3, [r3, #0]
 81058fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8105900:	2b00      	cmp	r3, #0
 8105902:	d00d      	beq.n	8105920 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8105904:	4b1a      	ldr	r3, [pc, #104]	; (8105970 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105906:	691b      	ldr	r3, [r3, #16]
 8105908:	4a19      	ldr	r2, [pc, #100]	; (8105970 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810590a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810590e:	6113      	str	r3, [r2, #16]
 8105910:	4b17      	ldr	r3, [pc, #92]	; (8105970 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105912:	691a      	ldr	r2, [r3, #16]
 8105914:	687b      	ldr	r3, [r7, #4]
 8105916:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810591a:	4915      	ldr	r1, [pc, #84]	; (8105970 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810591c:	4313      	orrs	r3, r2
 810591e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8105920:	687b      	ldr	r3, [r7, #4]
 8105922:	681b      	ldr	r3, [r3, #0]
 8105924:	2b00      	cmp	r3, #0
 8105926:	da08      	bge.n	810593a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8105928:	4b11      	ldr	r3, [pc, #68]	; (8105970 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810592a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810592c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8105930:	687b      	ldr	r3, [r7, #4]
 8105932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105934:	490e      	ldr	r1, [pc, #56]	; (8105970 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105936:	4313      	orrs	r3, r2
 8105938:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810593a:	687b      	ldr	r3, [r7, #4]
 810593c:	681b      	ldr	r3, [r3, #0]
 810593e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8105942:	2b00      	cmp	r3, #0
 8105944:	d009      	beq.n	810595a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8105946:	4b0a      	ldr	r3, [pc, #40]	; (8105970 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810594a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 810594e:	687b      	ldr	r3, [r7, #4]
 8105950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105954:	4906      	ldr	r1, [pc, #24]	; (8105970 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105956:	4313      	orrs	r3, r2
 8105958:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 810595a:	7dbb      	ldrb	r3, [r7, #22]
 810595c:	2b00      	cmp	r3, #0
 810595e:	d101      	bne.n	8105964 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8105960:	2300      	movs	r3, #0
 8105962:	e000      	b.n	8105966 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8105964:	2301      	movs	r3, #1
}
 8105966:	4618      	mov	r0, r3
 8105968:	3718      	adds	r7, #24
 810596a:	46bd      	mov	sp, r7
 810596c:	bd80      	pop	{r7, pc}
 810596e:	bf00      	nop
 8105970:	58024400 	.word	0x58024400

08105974 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8105974:	b580      	push	{r7, lr}
 8105976:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8105978:	f7ff f858 	bl	8104a2c <HAL_RCC_GetHCLKFreq>
 810597c:	4602      	mov	r2, r0
 810597e:	4b06      	ldr	r3, [pc, #24]	; (8105998 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8105980:	6a1b      	ldr	r3, [r3, #32]
 8105982:	091b      	lsrs	r3, r3, #4
 8105984:	f003 0307 	and.w	r3, r3, #7
 8105988:	4904      	ldr	r1, [pc, #16]	; (810599c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810598a:	5ccb      	ldrb	r3, [r1, r3]
 810598c:	f003 031f 	and.w	r3, r3, #31
 8105990:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8105994:	4618      	mov	r0, r3
 8105996:	bd80      	pop	{r7, pc}
 8105998:	58024400 	.word	0x58024400
 810599c:	081098b0 	.word	0x081098b0

081059a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 81059a0:	b480      	push	{r7}
 81059a2:	b089      	sub	sp, #36	; 0x24
 81059a4:	af00      	add	r7, sp, #0
 81059a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81059a8:	4ba1      	ldr	r3, [pc, #644]	; (8105c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81059aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81059ac:	f003 0303 	and.w	r3, r3, #3
 81059b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81059b2:	4b9f      	ldr	r3, [pc, #636]	; (8105c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81059b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81059b6:	0b1b      	lsrs	r3, r3, #12
 81059b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81059bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81059be:	4b9c      	ldr	r3, [pc, #624]	; (8105c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81059c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81059c2:	091b      	lsrs	r3, r3, #4
 81059c4:	f003 0301 	and.w	r3, r3, #1
 81059c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81059ca:	4b99      	ldr	r3, [pc, #612]	; (8105c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81059cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81059ce:	08db      	lsrs	r3, r3, #3
 81059d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81059d4:	693a      	ldr	r2, [r7, #16]
 81059d6:	fb02 f303 	mul.w	r3, r2, r3
 81059da:	ee07 3a90 	vmov	s15, r3
 81059de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81059e6:	697b      	ldr	r3, [r7, #20]
 81059e8:	2b00      	cmp	r3, #0
 81059ea:	f000 8111 	beq.w	8105c10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81059ee:	69bb      	ldr	r3, [r7, #24]
 81059f0:	2b02      	cmp	r3, #2
 81059f2:	f000 8083 	beq.w	8105afc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81059f6:	69bb      	ldr	r3, [r7, #24]
 81059f8:	2b02      	cmp	r3, #2
 81059fa:	f200 80a1 	bhi.w	8105b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81059fe:	69bb      	ldr	r3, [r7, #24]
 8105a00:	2b00      	cmp	r3, #0
 8105a02:	d003      	beq.n	8105a0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8105a04:	69bb      	ldr	r3, [r7, #24]
 8105a06:	2b01      	cmp	r3, #1
 8105a08:	d056      	beq.n	8105ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8105a0a:	e099      	b.n	8105b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105a0c:	4b88      	ldr	r3, [pc, #544]	; (8105c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a0e:	681b      	ldr	r3, [r3, #0]
 8105a10:	f003 0320 	and.w	r3, r3, #32
 8105a14:	2b00      	cmp	r3, #0
 8105a16:	d02d      	beq.n	8105a74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105a18:	4b85      	ldr	r3, [pc, #532]	; (8105c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a1a:	681b      	ldr	r3, [r3, #0]
 8105a1c:	08db      	lsrs	r3, r3, #3
 8105a1e:	f003 0303 	and.w	r3, r3, #3
 8105a22:	4a84      	ldr	r2, [pc, #528]	; (8105c34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8105a24:	fa22 f303 	lsr.w	r3, r2, r3
 8105a28:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105a2a:	68bb      	ldr	r3, [r7, #8]
 8105a2c:	ee07 3a90 	vmov	s15, r3
 8105a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a34:	697b      	ldr	r3, [r7, #20]
 8105a36:	ee07 3a90 	vmov	s15, r3
 8105a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105a42:	4b7b      	ldr	r3, [pc, #492]	; (8105c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a4a:	ee07 3a90 	vmov	s15, r3
 8105a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8105a56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105c38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105a6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8105a72:	e087      	b.n	8105b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105a74:	697b      	ldr	r3, [r7, #20]
 8105a76:	ee07 3a90 	vmov	s15, r3
 8105a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105c3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8105a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105a86:	4b6a      	ldr	r3, [pc, #424]	; (8105c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a8e:	ee07 3a90 	vmov	s15, r3
 8105a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8105a9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105c38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105ab2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105ab6:	e065      	b.n	8105b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105ab8:	697b      	ldr	r3, [r7, #20]
 8105aba:	ee07 3a90 	vmov	s15, r3
 8105abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ac2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105c40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105aca:	4b59      	ldr	r3, [pc, #356]	; (8105c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105ad2:	ee07 3a90 	vmov	s15, r3
 8105ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8105ade:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105c38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105af6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105afa:	e043      	b.n	8105b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105afc:	697b      	ldr	r3, [r7, #20]
 8105afe:	ee07 3a90 	vmov	s15, r3
 8105b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105c44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8105b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b0e:	4b48      	ldr	r3, [pc, #288]	; (8105c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b16:	ee07 3a90 	vmov	s15, r3
 8105b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105b22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105c38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105b3e:	e021      	b.n	8105b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105b40:	697b      	ldr	r3, [r7, #20]
 8105b42:	ee07 3a90 	vmov	s15, r3
 8105b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105c40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b52:	4b37      	ldr	r3, [pc, #220]	; (8105c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b5a:	ee07 3a90 	vmov	s15, r3
 8105b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8105b66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105c38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105b82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8105b84:	4b2a      	ldr	r3, [pc, #168]	; (8105c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105b88:	0a5b      	lsrs	r3, r3, #9
 8105b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105b8e:	ee07 3a90 	vmov	s15, r3
 8105b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105b9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105baa:	ee17 2a90 	vmov	r2, s15
 8105bae:	687b      	ldr	r3, [r7, #4]
 8105bb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8105bb2:	4b1f      	ldr	r3, [pc, #124]	; (8105c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105bb6:	0c1b      	lsrs	r3, r3, #16
 8105bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105bbc:	ee07 3a90 	vmov	s15, r3
 8105bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105bc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105bc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105bcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8105bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105bd8:	ee17 2a90 	vmov	r2, s15
 8105bdc:	687b      	ldr	r3, [r7, #4]
 8105bde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8105be0:	4b13      	ldr	r3, [pc, #76]	; (8105c30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105be4:	0e1b      	lsrs	r3, r3, #24
 8105be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105bea:	ee07 3a90 	vmov	s15, r3
 8105bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105bf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105bf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105bfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8105bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105c06:	ee17 2a90 	vmov	r2, s15
 8105c0a:	687b      	ldr	r3, [r7, #4]
 8105c0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105c0e:	e008      	b.n	8105c22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105c10:	687b      	ldr	r3, [r7, #4]
 8105c12:	2200      	movs	r2, #0
 8105c14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8105c16:	687b      	ldr	r3, [r7, #4]
 8105c18:	2200      	movs	r2, #0
 8105c1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105c1c:	687b      	ldr	r3, [r7, #4]
 8105c1e:	2200      	movs	r2, #0
 8105c20:	609a      	str	r2, [r3, #8]
}
 8105c22:	bf00      	nop
 8105c24:	3724      	adds	r7, #36	; 0x24
 8105c26:	46bd      	mov	sp, r7
 8105c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c2c:	4770      	bx	lr
 8105c2e:	bf00      	nop
 8105c30:	58024400 	.word	0x58024400
 8105c34:	03d09000 	.word	0x03d09000
 8105c38:	46000000 	.word	0x46000000
 8105c3c:	4c742400 	.word	0x4c742400
 8105c40:	4a742400 	.word	0x4a742400
 8105c44:	4af42400 	.word	0x4af42400

08105c48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8105c48:	b480      	push	{r7}
 8105c4a:	b089      	sub	sp, #36	; 0x24
 8105c4c:	af00      	add	r7, sp, #0
 8105c4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105c50:	4ba1      	ldr	r3, [pc, #644]	; (8105ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105c54:	f003 0303 	and.w	r3, r3, #3
 8105c58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8105c5a:	4b9f      	ldr	r3, [pc, #636]	; (8105ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105c5e:	0d1b      	lsrs	r3, r3, #20
 8105c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105c64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105c66:	4b9c      	ldr	r3, [pc, #624]	; (8105ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c6a:	0a1b      	lsrs	r3, r3, #8
 8105c6c:	f003 0301 	and.w	r3, r3, #1
 8105c70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8105c72:	4b99      	ldr	r3, [pc, #612]	; (8105ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105c76:	08db      	lsrs	r3, r3, #3
 8105c78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105c7c:	693a      	ldr	r2, [r7, #16]
 8105c7e:	fb02 f303 	mul.w	r3, r2, r3
 8105c82:	ee07 3a90 	vmov	s15, r3
 8105c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105c8e:	697b      	ldr	r3, [r7, #20]
 8105c90:	2b00      	cmp	r3, #0
 8105c92:	f000 8111 	beq.w	8105eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8105c96:	69bb      	ldr	r3, [r7, #24]
 8105c98:	2b02      	cmp	r3, #2
 8105c9a:	f000 8083 	beq.w	8105da4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8105c9e:	69bb      	ldr	r3, [r7, #24]
 8105ca0:	2b02      	cmp	r3, #2
 8105ca2:	f200 80a1 	bhi.w	8105de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8105ca6:	69bb      	ldr	r3, [r7, #24]
 8105ca8:	2b00      	cmp	r3, #0
 8105caa:	d003      	beq.n	8105cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8105cac:	69bb      	ldr	r3, [r7, #24]
 8105cae:	2b01      	cmp	r3, #1
 8105cb0:	d056      	beq.n	8105d60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8105cb2:	e099      	b.n	8105de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105cb4:	4b88      	ldr	r3, [pc, #544]	; (8105ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105cb6:	681b      	ldr	r3, [r3, #0]
 8105cb8:	f003 0320 	and.w	r3, r3, #32
 8105cbc:	2b00      	cmp	r3, #0
 8105cbe:	d02d      	beq.n	8105d1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105cc0:	4b85      	ldr	r3, [pc, #532]	; (8105ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105cc2:	681b      	ldr	r3, [r3, #0]
 8105cc4:	08db      	lsrs	r3, r3, #3
 8105cc6:	f003 0303 	and.w	r3, r3, #3
 8105cca:	4a84      	ldr	r2, [pc, #528]	; (8105edc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8105cd0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105cd2:	68bb      	ldr	r3, [r7, #8]
 8105cd4:	ee07 3a90 	vmov	s15, r3
 8105cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105cdc:	697b      	ldr	r3, [r7, #20]
 8105cde:	ee07 3a90 	vmov	s15, r3
 8105ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105cea:	4b7b      	ldr	r3, [pc, #492]	; (8105ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105cf2:	ee07 3a90 	vmov	s15, r3
 8105cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8105cfe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105d16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8105d1a:	e087      	b.n	8105e2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105d1c:	697b      	ldr	r3, [r7, #20]
 8105d1e:	ee07 3a90 	vmov	s15, r3
 8105d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8105d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105d2e:	4b6a      	ldr	r3, [pc, #424]	; (8105ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105d36:	ee07 3a90 	vmov	s15, r3
 8105d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105d42:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105d5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105d5e:	e065      	b.n	8105e2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105d60:	697b      	ldr	r3, [r7, #20]
 8105d62:	ee07 3a90 	vmov	s15, r3
 8105d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105d72:	4b59      	ldr	r3, [pc, #356]	; (8105ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105d7a:	ee07 3a90 	vmov	s15, r3
 8105d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8105d86:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105d9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105da2:	e043      	b.n	8105e2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105da4:	697b      	ldr	r3, [r7, #20]
 8105da6:	ee07 3a90 	vmov	s15, r3
 8105daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105dae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105eec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8105db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105db6:	4b48      	ldr	r3, [pc, #288]	; (8105ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105dbe:	ee07 3a90 	vmov	s15, r3
 8105dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8105dca:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105de2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105de6:	e021      	b.n	8105e2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105de8:	697b      	ldr	r3, [r7, #20]
 8105dea:	ee07 3a90 	vmov	s15, r3
 8105dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105df2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105dfa:	4b37      	ldr	r3, [pc, #220]	; (8105ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105e02:	ee07 3a90 	vmov	s15, r3
 8105e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8105e0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105e26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105e2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8105e2c:	4b2a      	ldr	r3, [pc, #168]	; (8105ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105e30:	0a5b      	lsrs	r3, r3, #9
 8105e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105e36:	ee07 3a90 	vmov	s15, r3
 8105e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8105e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105e52:	ee17 2a90 	vmov	r2, s15
 8105e56:	687b      	ldr	r3, [r7, #4]
 8105e58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8105e5a:	4b1f      	ldr	r3, [pc, #124]	; (8105ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105e5e:	0c1b      	lsrs	r3, r3, #16
 8105e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105e64:	ee07 3a90 	vmov	s15, r3
 8105e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105e70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105e74:	edd7 6a07 	vldr	s13, [r7, #28]
 8105e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105e80:	ee17 2a90 	vmov	r2, s15
 8105e84:	687b      	ldr	r3, [r7, #4]
 8105e86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8105e88:	4b13      	ldr	r3, [pc, #76]	; (8105ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105e8c:	0e1b      	lsrs	r3, r3, #24
 8105e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105e92:	ee07 3a90 	vmov	s15, r3
 8105e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105e9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105ea2:	edd7 6a07 	vldr	s13, [r7, #28]
 8105ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105eae:	ee17 2a90 	vmov	r2, s15
 8105eb2:	687b      	ldr	r3, [r7, #4]
 8105eb4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8105eb6:	e008      	b.n	8105eca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105eb8:	687b      	ldr	r3, [r7, #4]
 8105eba:	2200      	movs	r2, #0
 8105ebc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105ebe:	687b      	ldr	r3, [r7, #4]
 8105ec0:	2200      	movs	r2, #0
 8105ec2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105ec4:	687b      	ldr	r3, [r7, #4]
 8105ec6:	2200      	movs	r2, #0
 8105ec8:	609a      	str	r2, [r3, #8]
}
 8105eca:	bf00      	nop
 8105ecc:	3724      	adds	r7, #36	; 0x24
 8105ece:	46bd      	mov	sp, r7
 8105ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ed4:	4770      	bx	lr
 8105ed6:	bf00      	nop
 8105ed8:	58024400 	.word	0x58024400
 8105edc:	03d09000 	.word	0x03d09000
 8105ee0:	46000000 	.word	0x46000000
 8105ee4:	4c742400 	.word	0x4c742400
 8105ee8:	4a742400 	.word	0x4a742400
 8105eec:	4af42400 	.word	0x4af42400

08105ef0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8105ef0:	b580      	push	{r7, lr}
 8105ef2:	b084      	sub	sp, #16
 8105ef4:	af00      	add	r7, sp, #0
 8105ef6:	6078      	str	r0, [r7, #4]
 8105ef8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105efa:	2300      	movs	r3, #0
 8105efc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105efe:	4b54      	ldr	r3, [pc, #336]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105f02:	f003 0303 	and.w	r3, r3, #3
 8105f06:	2b03      	cmp	r3, #3
 8105f08:	d101      	bne.n	8105f0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8105f0a:	2301      	movs	r3, #1
 8105f0c:	e09b      	b.n	8106046 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8105f0e:	4b50      	ldr	r3, [pc, #320]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105f10:	681b      	ldr	r3, [r3, #0]
 8105f12:	4a4f      	ldr	r2, [pc, #316]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105f14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8105f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105f1a:	f7fb fe95 	bl	8101c48 <HAL_GetTick>
 8105f1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105f20:	e008      	b.n	8105f34 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8105f22:	f7fb fe91 	bl	8101c48 <HAL_GetTick>
 8105f26:	4602      	mov	r2, r0
 8105f28:	68bb      	ldr	r3, [r7, #8]
 8105f2a:	1ad3      	subs	r3, r2, r3
 8105f2c:	2b02      	cmp	r3, #2
 8105f2e:	d901      	bls.n	8105f34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105f30:	2303      	movs	r3, #3
 8105f32:	e088      	b.n	8106046 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105f34:	4b46      	ldr	r3, [pc, #280]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105f36:	681b      	ldr	r3, [r3, #0]
 8105f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105f3c:	2b00      	cmp	r3, #0
 8105f3e:	d1f0      	bne.n	8105f22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8105f40:	4b43      	ldr	r3, [pc, #268]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105f44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8105f48:	687b      	ldr	r3, [r7, #4]
 8105f4a:	681b      	ldr	r3, [r3, #0]
 8105f4c:	031b      	lsls	r3, r3, #12
 8105f4e:	4940      	ldr	r1, [pc, #256]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105f50:	4313      	orrs	r3, r2
 8105f52:	628b      	str	r3, [r1, #40]	; 0x28
 8105f54:	687b      	ldr	r3, [r7, #4]
 8105f56:	685b      	ldr	r3, [r3, #4]
 8105f58:	3b01      	subs	r3, #1
 8105f5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105f5e:	687b      	ldr	r3, [r7, #4]
 8105f60:	689b      	ldr	r3, [r3, #8]
 8105f62:	3b01      	subs	r3, #1
 8105f64:	025b      	lsls	r3, r3, #9
 8105f66:	b29b      	uxth	r3, r3
 8105f68:	431a      	orrs	r2, r3
 8105f6a:	687b      	ldr	r3, [r7, #4]
 8105f6c:	68db      	ldr	r3, [r3, #12]
 8105f6e:	3b01      	subs	r3, #1
 8105f70:	041b      	lsls	r3, r3, #16
 8105f72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105f76:	431a      	orrs	r2, r3
 8105f78:	687b      	ldr	r3, [r7, #4]
 8105f7a:	691b      	ldr	r3, [r3, #16]
 8105f7c:	3b01      	subs	r3, #1
 8105f7e:	061b      	lsls	r3, r3, #24
 8105f80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105f84:	4932      	ldr	r1, [pc, #200]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105f86:	4313      	orrs	r3, r2
 8105f88:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8105f8a:	4b31      	ldr	r3, [pc, #196]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8105f92:	687b      	ldr	r3, [r7, #4]
 8105f94:	695b      	ldr	r3, [r3, #20]
 8105f96:	492e      	ldr	r1, [pc, #184]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105f98:	4313      	orrs	r3, r2
 8105f9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8105f9c:	4b2c      	ldr	r3, [pc, #176]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105fa0:	f023 0220 	bic.w	r2, r3, #32
 8105fa4:	687b      	ldr	r3, [r7, #4]
 8105fa6:	699b      	ldr	r3, [r3, #24]
 8105fa8:	4929      	ldr	r1, [pc, #164]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105faa:	4313      	orrs	r3, r2
 8105fac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8105fae:	4b28      	ldr	r3, [pc, #160]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105fb2:	4a27      	ldr	r2, [pc, #156]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105fb4:	f023 0310 	bic.w	r3, r3, #16
 8105fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8105fba:	4b25      	ldr	r3, [pc, #148]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105fc2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105fc6:	687a      	ldr	r2, [r7, #4]
 8105fc8:	69d2      	ldr	r2, [r2, #28]
 8105fca:	00d2      	lsls	r2, r2, #3
 8105fcc:	4920      	ldr	r1, [pc, #128]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105fce:	4313      	orrs	r3, r2
 8105fd0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8105fd2:	4b1f      	ldr	r3, [pc, #124]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105fd6:	4a1e      	ldr	r2, [pc, #120]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105fd8:	f043 0310 	orr.w	r3, r3, #16
 8105fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8105fde:	683b      	ldr	r3, [r7, #0]
 8105fe0:	2b00      	cmp	r3, #0
 8105fe2:	d106      	bne.n	8105ff2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8105fe4:	4b1a      	ldr	r3, [pc, #104]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105fe8:	4a19      	ldr	r2, [pc, #100]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105fea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8105fee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105ff0:	e00f      	b.n	8106012 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8105ff2:	683b      	ldr	r3, [r7, #0]
 8105ff4:	2b01      	cmp	r3, #1
 8105ff6:	d106      	bne.n	8106006 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105ff8:	4b15      	ldr	r3, [pc, #84]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ffc:	4a14      	ldr	r2, [pc, #80]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8105ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8106002:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106004:	e005      	b.n	8106012 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8106006:	4b12      	ldr	r3, [pc, #72]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8106008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810600a:	4a11      	ldr	r2, [pc, #68]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 810600c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8106010:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8106012:	4b0f      	ldr	r3, [pc, #60]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8106014:	681b      	ldr	r3, [r3, #0]
 8106016:	4a0e      	ldr	r2, [pc, #56]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 8106018:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 810601c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810601e:	f7fb fe13 	bl	8101c48 <HAL_GetTick>
 8106022:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106024:	e008      	b.n	8106038 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8106026:	f7fb fe0f 	bl	8101c48 <HAL_GetTick>
 810602a:	4602      	mov	r2, r0
 810602c:	68bb      	ldr	r3, [r7, #8]
 810602e:	1ad3      	subs	r3, r2, r3
 8106030:	2b02      	cmp	r3, #2
 8106032:	d901      	bls.n	8106038 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106034:	2303      	movs	r3, #3
 8106036:	e006      	b.n	8106046 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106038:	4b05      	ldr	r3, [pc, #20]	; (8106050 <RCCEx_PLL2_Config+0x160>)
 810603a:	681b      	ldr	r3, [r3, #0]
 810603c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106040:	2b00      	cmp	r3, #0
 8106042:	d0f0      	beq.n	8106026 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8106044:	7bfb      	ldrb	r3, [r7, #15]
}
 8106046:	4618      	mov	r0, r3
 8106048:	3710      	adds	r7, #16
 810604a:	46bd      	mov	sp, r7
 810604c:	bd80      	pop	{r7, pc}
 810604e:	bf00      	nop
 8106050:	58024400 	.word	0x58024400

08106054 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8106054:	b580      	push	{r7, lr}
 8106056:	b084      	sub	sp, #16
 8106058:	af00      	add	r7, sp, #0
 810605a:	6078      	str	r0, [r7, #4]
 810605c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810605e:	2300      	movs	r3, #0
 8106060:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106062:	4b54      	ldr	r3, [pc, #336]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 8106064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106066:	f003 0303 	and.w	r3, r3, #3
 810606a:	2b03      	cmp	r3, #3
 810606c:	d101      	bne.n	8106072 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810606e:	2301      	movs	r3, #1
 8106070:	e09b      	b.n	81061aa <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8106072:	4b50      	ldr	r3, [pc, #320]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 8106074:	681b      	ldr	r3, [r3, #0]
 8106076:	4a4f      	ldr	r2, [pc, #316]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 8106078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810607c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810607e:	f7fb fde3 	bl	8101c48 <HAL_GetTick>
 8106082:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106084:	e008      	b.n	8106098 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8106086:	f7fb fddf 	bl	8101c48 <HAL_GetTick>
 810608a:	4602      	mov	r2, r0
 810608c:	68bb      	ldr	r3, [r7, #8]
 810608e:	1ad3      	subs	r3, r2, r3
 8106090:	2b02      	cmp	r3, #2
 8106092:	d901      	bls.n	8106098 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106094:	2303      	movs	r3, #3
 8106096:	e088      	b.n	81061aa <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106098:	4b46      	ldr	r3, [pc, #280]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 810609a:	681b      	ldr	r3, [r3, #0]
 810609c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81060a0:	2b00      	cmp	r3, #0
 81060a2:	d1f0      	bne.n	8106086 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81060a4:	4b43      	ldr	r3, [pc, #268]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 81060a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81060a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81060ac:	687b      	ldr	r3, [r7, #4]
 81060ae:	681b      	ldr	r3, [r3, #0]
 81060b0:	051b      	lsls	r3, r3, #20
 81060b2:	4940      	ldr	r1, [pc, #256]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 81060b4:	4313      	orrs	r3, r2
 81060b6:	628b      	str	r3, [r1, #40]	; 0x28
 81060b8:	687b      	ldr	r3, [r7, #4]
 81060ba:	685b      	ldr	r3, [r3, #4]
 81060bc:	3b01      	subs	r3, #1
 81060be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81060c2:	687b      	ldr	r3, [r7, #4]
 81060c4:	689b      	ldr	r3, [r3, #8]
 81060c6:	3b01      	subs	r3, #1
 81060c8:	025b      	lsls	r3, r3, #9
 81060ca:	b29b      	uxth	r3, r3
 81060cc:	431a      	orrs	r2, r3
 81060ce:	687b      	ldr	r3, [r7, #4]
 81060d0:	68db      	ldr	r3, [r3, #12]
 81060d2:	3b01      	subs	r3, #1
 81060d4:	041b      	lsls	r3, r3, #16
 81060d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81060da:	431a      	orrs	r2, r3
 81060dc:	687b      	ldr	r3, [r7, #4]
 81060de:	691b      	ldr	r3, [r3, #16]
 81060e0:	3b01      	subs	r3, #1
 81060e2:	061b      	lsls	r3, r3, #24
 81060e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81060e8:	4932      	ldr	r1, [pc, #200]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 81060ea:	4313      	orrs	r3, r2
 81060ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81060ee:	4b31      	ldr	r3, [pc, #196]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 81060f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81060f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81060f6:	687b      	ldr	r3, [r7, #4]
 81060f8:	695b      	ldr	r3, [r3, #20]
 81060fa:	492e      	ldr	r1, [pc, #184]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 81060fc:	4313      	orrs	r3, r2
 81060fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8106100:	4b2c      	ldr	r3, [pc, #176]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 8106102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106104:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8106108:	687b      	ldr	r3, [r7, #4]
 810610a:	699b      	ldr	r3, [r3, #24]
 810610c:	4929      	ldr	r1, [pc, #164]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 810610e:	4313      	orrs	r3, r2
 8106110:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8106112:	4b28      	ldr	r3, [pc, #160]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 8106114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106116:	4a27      	ldr	r2, [pc, #156]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 8106118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810611c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810611e:	4b25      	ldr	r3, [pc, #148]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 8106120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106126:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810612a:	687a      	ldr	r2, [r7, #4]
 810612c:	69d2      	ldr	r2, [r2, #28]
 810612e:	00d2      	lsls	r2, r2, #3
 8106130:	4920      	ldr	r1, [pc, #128]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 8106132:	4313      	orrs	r3, r2
 8106134:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8106136:	4b1f      	ldr	r3, [pc, #124]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 8106138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810613a:	4a1e      	ldr	r2, [pc, #120]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 810613c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8106140:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8106142:	683b      	ldr	r3, [r7, #0]
 8106144:	2b00      	cmp	r3, #0
 8106146:	d106      	bne.n	8106156 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8106148:	4b1a      	ldr	r3, [pc, #104]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 810614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810614c:	4a19      	ldr	r2, [pc, #100]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 810614e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8106152:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106154:	e00f      	b.n	8106176 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8106156:	683b      	ldr	r3, [r7, #0]
 8106158:	2b01      	cmp	r3, #1
 810615a:	d106      	bne.n	810616a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810615c:	4b15      	ldr	r3, [pc, #84]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 810615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106160:	4a14      	ldr	r2, [pc, #80]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 8106162:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8106166:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106168:	e005      	b.n	8106176 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810616a:	4b12      	ldr	r3, [pc, #72]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 810616c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810616e:	4a11      	ldr	r2, [pc, #68]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 8106170:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8106174:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8106176:	4b0f      	ldr	r3, [pc, #60]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 8106178:	681b      	ldr	r3, [r3, #0]
 810617a:	4a0e      	ldr	r2, [pc, #56]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 810617c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8106180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106182:	f7fb fd61 	bl	8101c48 <HAL_GetTick>
 8106186:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106188:	e008      	b.n	810619c <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810618a:	f7fb fd5d 	bl	8101c48 <HAL_GetTick>
 810618e:	4602      	mov	r2, r0
 8106190:	68bb      	ldr	r3, [r7, #8]
 8106192:	1ad3      	subs	r3, r2, r3
 8106194:	2b02      	cmp	r3, #2
 8106196:	d901      	bls.n	810619c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106198:	2303      	movs	r3, #3
 810619a:	e006      	b.n	81061aa <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810619c:	4b05      	ldr	r3, [pc, #20]	; (81061b4 <RCCEx_PLL3_Config+0x160>)
 810619e:	681b      	ldr	r3, [r3, #0]
 81061a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81061a4:	2b00      	cmp	r3, #0
 81061a6:	d0f0      	beq.n	810618a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81061a8:	7bfb      	ldrb	r3, [r7, #15]
}
 81061aa:	4618      	mov	r0, r3
 81061ac:	3710      	adds	r7, #16
 81061ae:	46bd      	mov	sp, r7
 81061b0:	bd80      	pop	{r7, pc}
 81061b2:	bf00      	nop
 81061b4:	58024400 	.word	0x58024400

081061b8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 81061b8:	b580      	push	{r7, lr}
 81061ba:	b084      	sub	sp, #16
 81061bc:	af00      	add	r7, sp, #0
 81061be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 81061c0:	2301      	movs	r3, #1
 81061c2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 81061c4:	687b      	ldr	r3, [r7, #4]
 81061c6:	2b00      	cmp	r3, #0
 81061c8:	d069      	beq.n	810629e <HAL_RTC_Init+0xe6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 81061ca:	687b      	ldr	r3, [r7, #4]
 81061cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 81061d0:	b2db      	uxtb	r3, r3
 81061d2:	2b00      	cmp	r3, #0
 81061d4:	d106      	bne.n	81061e4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 81061d6:	687b      	ldr	r3, [r7, #4]
 81061d8:	2200      	movs	r2, #0
 81061da:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 81061de:	6878      	ldr	r0, [r7, #4]
 81061e0:	f7fb fa28 	bl	8101634 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 81061e4:	687b      	ldr	r3, [r7, #4]
 81061e6:	2202      	movs	r2, #2
 81061e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 81061ec:	687b      	ldr	r3, [r7, #4]
 81061ee:	681b      	ldr	r3, [r3, #0]
 81061f0:	22ca      	movs	r2, #202	; 0xca
 81061f2:	625a      	str	r2, [r3, #36]	; 0x24
 81061f4:	687b      	ldr	r3, [r7, #4]
 81061f6:	681b      	ldr	r3, [r3, #0]
 81061f8:	2253      	movs	r2, #83	; 0x53
 81061fa:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 81061fc:	6878      	ldr	r0, [r7, #4]
 81061fe:	f000 fa46 	bl	810668e <RTC_EnterInitMode>
 8106202:	4603      	mov	r3, r0
 8106204:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8106206:	7bfb      	ldrb	r3, [r7, #15]
 8106208:	2b00      	cmp	r3, #0
 810620a:	d13d      	bne.n	8106288 <HAL_RTC_Init+0xd0>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 810620c:	687b      	ldr	r3, [r7, #4]
 810620e:	681b      	ldr	r3, [r3, #0]
 8106210:	689b      	ldr	r3, [r3, #8]
 8106212:	687a      	ldr	r2, [r7, #4]
 8106214:	6812      	ldr	r2, [r2, #0]
 8106216:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810621a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810621e:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8106220:	687b      	ldr	r3, [r7, #4]
 8106222:	681b      	ldr	r3, [r3, #0]
 8106224:	6899      	ldr	r1, [r3, #8]
 8106226:	687b      	ldr	r3, [r7, #4]
 8106228:	685a      	ldr	r2, [r3, #4]
 810622a:	687b      	ldr	r3, [r7, #4]
 810622c:	691b      	ldr	r3, [r3, #16]
 810622e:	431a      	orrs	r2, r3
 8106230:	687b      	ldr	r3, [r7, #4]
 8106232:	699b      	ldr	r3, [r3, #24]
 8106234:	431a      	orrs	r2, r3
 8106236:	687b      	ldr	r3, [r7, #4]
 8106238:	681b      	ldr	r3, [r3, #0]
 810623a:	430a      	orrs	r2, r1
 810623c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 810623e:	687b      	ldr	r3, [r7, #4]
 8106240:	689b      	ldr	r3, [r3, #8]
 8106242:	0419      	lsls	r1, r3, #16
 8106244:	687b      	ldr	r3, [r7, #4]
 8106246:	68da      	ldr	r2, [r3, #12]
 8106248:	687b      	ldr	r3, [r7, #4]
 810624a:	681b      	ldr	r3, [r3, #0]
 810624c:	430a      	orrs	r2, r1
 810624e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8106250:	6878      	ldr	r0, [r7, #4]
 8106252:	f000 fa4f 	bl	81066f4 <RTC_ExitInitMode>
 8106256:	4603      	mov	r3, r0
 8106258:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 810625a:	7bfb      	ldrb	r3, [r7, #15]
 810625c:	2b00      	cmp	r3, #0
 810625e:	d113      	bne.n	8106288 <HAL_RTC_Init+0xd0>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8106260:	687b      	ldr	r3, [r7, #4]
 8106262:	681b      	ldr	r3, [r3, #0]
 8106264:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8106266:	687b      	ldr	r3, [r7, #4]
 8106268:	681b      	ldr	r3, [r3, #0]
 810626a:	f022 0203 	bic.w	r2, r2, #3
 810626e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8106270:	687b      	ldr	r3, [r7, #4]
 8106272:	681b      	ldr	r3, [r3, #0]
 8106274:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8106276:	687b      	ldr	r3, [r7, #4]
 8106278:	69da      	ldr	r2, [r3, #28]
 810627a:	687b      	ldr	r3, [r7, #4]
 810627c:	695b      	ldr	r3, [r3, #20]
 810627e:	431a      	orrs	r2, r3
 8106280:	687b      	ldr	r3, [r7, #4]
 8106282:	681b      	ldr	r3, [r3, #0]
 8106284:	430a      	orrs	r2, r1
 8106286:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8106288:	687b      	ldr	r3, [r7, #4]
 810628a:	681b      	ldr	r3, [r3, #0]
 810628c:	22ff      	movs	r2, #255	; 0xff
 810628e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8106290:	7bfb      	ldrb	r3, [r7, #15]
 8106292:	2b00      	cmp	r3, #0
 8106294:	d103      	bne.n	810629e <HAL_RTC_Init+0xe6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8106296:	687b      	ldr	r3, [r7, #4]
 8106298:	2201      	movs	r2, #1
 810629a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 810629e:	7bfb      	ldrb	r3, [r7, #15]
}
 81062a0:	4618      	mov	r0, r3
 81062a2:	3710      	adds	r7, #16
 81062a4:	46bd      	mov	sp, r7
 81062a6:	bd80      	pop	{r7, pc}

081062a8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 81062a8:	b590      	push	{r4, r7, lr}
 81062aa:	b087      	sub	sp, #28
 81062ac:	af00      	add	r7, sp, #0
 81062ae:	60f8      	str	r0, [r7, #12]
 81062b0:	60b9      	str	r1, [r7, #8]
 81062b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 81062b4:	68fb      	ldr	r3, [r7, #12]
 81062b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 81062ba:	2b01      	cmp	r3, #1
 81062bc:	d101      	bne.n	81062c2 <HAL_RTC_SetTime+0x1a>
 81062be:	2302      	movs	r3, #2
 81062c0:	e08b      	b.n	81063da <HAL_RTC_SetTime+0x132>
 81062c2:	68fb      	ldr	r3, [r7, #12]
 81062c4:	2201      	movs	r2, #1
 81062c6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 81062ca:	68fb      	ldr	r3, [r7, #12]
 81062cc:	2202      	movs	r2, #2
 81062ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 81062d2:	68fb      	ldr	r3, [r7, #12]
 81062d4:	681b      	ldr	r3, [r3, #0]
 81062d6:	22ca      	movs	r2, #202	; 0xca
 81062d8:	625a      	str	r2, [r3, #36]	; 0x24
 81062da:	68fb      	ldr	r3, [r7, #12]
 81062dc:	681b      	ldr	r3, [r3, #0]
 81062de:	2253      	movs	r2, #83	; 0x53
 81062e0:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 81062e2:	68f8      	ldr	r0, [r7, #12]
 81062e4:	f000 f9d3 	bl	810668e <RTC_EnterInitMode>
 81062e8:	4603      	mov	r3, r0
 81062ea:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 81062ec:	7cfb      	ldrb	r3, [r7, #19]
 81062ee:	2b00      	cmp	r3, #0
 81062f0:	d163      	bne.n	81063ba <HAL_RTC_SetTime+0x112>
  {
    if(Format == RTC_FORMAT_BIN)
 81062f2:	687b      	ldr	r3, [r7, #4]
 81062f4:	2b00      	cmp	r3, #0
 81062f6:	d126      	bne.n	8106346 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 81062f8:	68fb      	ldr	r3, [r7, #12]
 81062fa:	681b      	ldr	r3, [r3, #0]
 81062fc:	689b      	ldr	r3, [r3, #8]
 81062fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106302:	2b00      	cmp	r3, #0
 8106304:	d102      	bne.n	810630c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8106306:	68bb      	ldr	r3, [r7, #8]
 8106308:	2200      	movs	r2, #0
 810630a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 810630c:	68bb      	ldr	r3, [r7, #8]
 810630e:	781b      	ldrb	r3, [r3, #0]
 8106310:	4618      	mov	r0, r3
 8106312:	f000 fa2d 	bl	8106770 <RTC_ByteToBcd2>
 8106316:	4603      	mov	r3, r0
 8106318:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 810631a:	68bb      	ldr	r3, [r7, #8]
 810631c:	785b      	ldrb	r3, [r3, #1]
 810631e:	4618      	mov	r0, r3
 8106320:	f000 fa26 	bl	8106770 <RTC_ByteToBcd2>
 8106324:	4603      	mov	r3, r0
 8106326:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8106328:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 810632a:	68bb      	ldr	r3, [r7, #8]
 810632c:	789b      	ldrb	r3, [r3, #2]
 810632e:	4618      	mov	r0, r3
 8106330:	f000 fa1e 	bl	8106770 <RTC_ByteToBcd2>
 8106334:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8106336:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 810633a:	68bb      	ldr	r3, [r7, #8]
 810633c:	78db      	ldrb	r3, [r3, #3]
 810633e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8106340:	4313      	orrs	r3, r2
 8106342:	617b      	str	r3, [r7, #20]
 8106344:	e018      	b.n	8106378 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8106346:	68fb      	ldr	r3, [r7, #12]
 8106348:	681b      	ldr	r3, [r3, #0]
 810634a:	689b      	ldr	r3, [r3, #8]
 810634c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106350:	2b00      	cmp	r3, #0
 8106352:	d102      	bne.n	810635a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8106354:	68bb      	ldr	r3, [r7, #8]
 8106356:	2200      	movs	r2, #0
 8106358:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 810635a:	68bb      	ldr	r3, [r7, #8]
 810635c:	781b      	ldrb	r3, [r3, #0]
 810635e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8106360:	68bb      	ldr	r3, [r7, #8]
 8106362:	785b      	ldrb	r3, [r3, #1]
 8106364:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8106366:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8106368:	68ba      	ldr	r2, [r7, #8]
 810636a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 810636c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 810636e:	68bb      	ldr	r3, [r7, #8]
 8106370:	78db      	ldrb	r3, [r3, #3]
 8106372:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8106374:	4313      	orrs	r3, r2
 8106376:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8106378:	68fb      	ldr	r3, [r7, #12]
 810637a:	681a      	ldr	r2, [r3, #0]
 810637c:	697b      	ldr	r3, [r7, #20]
 810637e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8106382:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8106386:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8106388:	68fb      	ldr	r3, [r7, #12]
 810638a:	681b      	ldr	r3, [r3, #0]
 810638c:	689a      	ldr	r2, [r3, #8]
 810638e:	68fb      	ldr	r3, [r7, #12]
 8106390:	681b      	ldr	r3, [r3, #0]
 8106392:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8106396:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8106398:	68fb      	ldr	r3, [r7, #12]
 810639a:	681b      	ldr	r3, [r3, #0]
 810639c:	6899      	ldr	r1, [r3, #8]
 810639e:	68bb      	ldr	r3, [r7, #8]
 81063a0:	68da      	ldr	r2, [r3, #12]
 81063a2:	68bb      	ldr	r3, [r7, #8]
 81063a4:	691b      	ldr	r3, [r3, #16]
 81063a6:	431a      	orrs	r2, r3
 81063a8:	68fb      	ldr	r3, [r7, #12]
 81063aa:	681b      	ldr	r3, [r3, #0]
 81063ac:	430a      	orrs	r2, r1
 81063ae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 81063b0:	68f8      	ldr	r0, [r7, #12]
 81063b2:	f000 f99f 	bl	81066f4 <RTC_ExitInitMode>
 81063b6:	4603      	mov	r3, r0
 81063b8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 81063ba:	68fb      	ldr	r3, [r7, #12]
 81063bc:	681b      	ldr	r3, [r3, #0]
 81063be:	22ff      	movs	r2, #255	; 0xff
 81063c0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 81063c2:	7cfb      	ldrb	r3, [r7, #19]
 81063c4:	2b00      	cmp	r3, #0
 81063c6:	d103      	bne.n	81063d0 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 81063c8:	68fb      	ldr	r3, [r7, #12]
 81063ca:	2201      	movs	r2, #1
 81063cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 81063d0:	68fb      	ldr	r3, [r7, #12]
 81063d2:	2200      	movs	r2, #0
 81063d4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 81063d8:	7cfb      	ldrb	r3, [r7, #19]
}
 81063da:	4618      	mov	r0, r3
 81063dc:	371c      	adds	r7, #28
 81063de:	46bd      	mov	sp, r7
 81063e0:	bd90      	pop	{r4, r7, pc}

081063e2 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 81063e2:	b580      	push	{r7, lr}
 81063e4:	b086      	sub	sp, #24
 81063e6:	af00      	add	r7, sp, #0
 81063e8:	60f8      	str	r0, [r7, #12]
 81063ea:	60b9      	str	r1, [r7, #8]
 81063ec:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 81063ee:	68fb      	ldr	r3, [r7, #12]
 81063f0:	681b      	ldr	r3, [r3, #0]
 81063f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 81063f4:	68bb      	ldr	r3, [r7, #8]
 81063f6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 81063f8:	68fb      	ldr	r3, [r7, #12]
 81063fa:	681b      	ldr	r3, [r3, #0]
 81063fc:	691b      	ldr	r3, [r3, #16]
 81063fe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8106402:	68bb      	ldr	r3, [r7, #8]
 8106404:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8106406:	68fb      	ldr	r3, [r7, #12]
 8106408:	681b      	ldr	r3, [r3, #0]
 810640a:	681b      	ldr	r3, [r3, #0]
 810640c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8106410:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8106414:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8106416:	697b      	ldr	r3, [r7, #20]
 8106418:	0c1b      	lsrs	r3, r3, #16
 810641a:	b2db      	uxtb	r3, r3
 810641c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106420:	b2da      	uxtb	r2, r3
 8106422:	68bb      	ldr	r3, [r7, #8]
 8106424:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8106426:	697b      	ldr	r3, [r7, #20]
 8106428:	0a1b      	lsrs	r3, r3, #8
 810642a:	b2db      	uxtb	r3, r3
 810642c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106430:	b2da      	uxtb	r2, r3
 8106432:	68bb      	ldr	r3, [r7, #8]
 8106434:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8106436:	697b      	ldr	r3, [r7, #20]
 8106438:	b2db      	uxtb	r3, r3
 810643a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810643e:	b2da      	uxtb	r2, r3
 8106440:	68bb      	ldr	r3, [r7, #8]
 8106442:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8106444:	697b      	ldr	r3, [r7, #20]
 8106446:	0d9b      	lsrs	r3, r3, #22
 8106448:	b2db      	uxtb	r3, r3
 810644a:	f003 0301 	and.w	r3, r3, #1
 810644e:	b2da      	uxtb	r2, r3
 8106450:	68bb      	ldr	r3, [r7, #8]
 8106452:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8106454:	687b      	ldr	r3, [r7, #4]
 8106456:	2b00      	cmp	r3, #0
 8106458:	d11a      	bne.n	8106490 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 810645a:	68bb      	ldr	r3, [r7, #8]
 810645c:	781b      	ldrb	r3, [r3, #0]
 810645e:	4618      	mov	r0, r3
 8106460:	f000 f9a6 	bl	81067b0 <RTC_Bcd2ToByte>
 8106464:	4603      	mov	r3, r0
 8106466:	461a      	mov	r2, r3
 8106468:	68bb      	ldr	r3, [r7, #8]
 810646a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 810646c:	68bb      	ldr	r3, [r7, #8]
 810646e:	785b      	ldrb	r3, [r3, #1]
 8106470:	4618      	mov	r0, r3
 8106472:	f000 f99d 	bl	81067b0 <RTC_Bcd2ToByte>
 8106476:	4603      	mov	r3, r0
 8106478:	461a      	mov	r2, r3
 810647a:	68bb      	ldr	r3, [r7, #8]
 810647c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 810647e:	68bb      	ldr	r3, [r7, #8]
 8106480:	789b      	ldrb	r3, [r3, #2]
 8106482:	4618      	mov	r0, r3
 8106484:	f000 f994 	bl	81067b0 <RTC_Bcd2ToByte>
 8106488:	4603      	mov	r3, r0
 810648a:	461a      	mov	r2, r3
 810648c:	68bb      	ldr	r3, [r7, #8]
 810648e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8106490:	2300      	movs	r3, #0
}
 8106492:	4618      	mov	r0, r3
 8106494:	3718      	adds	r7, #24
 8106496:	46bd      	mov	sp, r7
 8106498:	bd80      	pop	{r7, pc}

0810649a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 810649a:	b590      	push	{r4, r7, lr}
 810649c:	b087      	sub	sp, #28
 810649e:	af00      	add	r7, sp, #0
 81064a0:	60f8      	str	r0, [r7, #12]
 81064a2:	60b9      	str	r1, [r7, #8]
 81064a4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 81064a6:	68fb      	ldr	r3, [r7, #12]
 81064a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 81064ac:	2b01      	cmp	r3, #1
 81064ae:	d101      	bne.n	81064b4 <HAL_RTC_SetDate+0x1a>
 81064b0:	2302      	movs	r3, #2
 81064b2:	e075      	b.n	81065a0 <HAL_RTC_SetDate+0x106>
 81064b4:	68fb      	ldr	r3, [r7, #12]
 81064b6:	2201      	movs	r2, #1
 81064b8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 81064bc:	68fb      	ldr	r3, [r7, #12]
 81064be:	2202      	movs	r2, #2
 81064c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 81064c4:	687b      	ldr	r3, [r7, #4]
 81064c6:	2b00      	cmp	r3, #0
 81064c8:	d10e      	bne.n	81064e8 <HAL_RTC_SetDate+0x4e>
 81064ca:	68bb      	ldr	r3, [r7, #8]
 81064cc:	785b      	ldrb	r3, [r3, #1]
 81064ce:	f003 0310 	and.w	r3, r3, #16
 81064d2:	2b00      	cmp	r3, #0
 81064d4:	d008      	beq.n	81064e8 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 81064d6:	68bb      	ldr	r3, [r7, #8]
 81064d8:	785b      	ldrb	r3, [r3, #1]
 81064da:	f023 0310 	bic.w	r3, r3, #16
 81064de:	b2db      	uxtb	r3, r3
 81064e0:	330a      	adds	r3, #10
 81064e2:	b2da      	uxtb	r2, r3
 81064e4:	68bb      	ldr	r3, [r7, #8]
 81064e6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 81064e8:	687b      	ldr	r3, [r7, #4]
 81064ea:	2b00      	cmp	r3, #0
 81064ec:	d11c      	bne.n	8106528 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 81064ee:	68bb      	ldr	r3, [r7, #8]
 81064f0:	78db      	ldrb	r3, [r3, #3]
 81064f2:	4618      	mov	r0, r3
 81064f4:	f000 f93c 	bl	8106770 <RTC_ByteToBcd2>
 81064f8:	4603      	mov	r3, r0
 81064fa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 81064fc:	68bb      	ldr	r3, [r7, #8]
 81064fe:	785b      	ldrb	r3, [r3, #1]
 8106500:	4618      	mov	r0, r3
 8106502:	f000 f935 	bl	8106770 <RTC_ByteToBcd2>
 8106506:	4603      	mov	r3, r0
 8106508:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 810650a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 810650c:	68bb      	ldr	r3, [r7, #8]
 810650e:	789b      	ldrb	r3, [r3, #2]
 8106510:	4618      	mov	r0, r3
 8106512:	f000 f92d 	bl	8106770 <RTC_ByteToBcd2>
 8106516:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8106518:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 810651c:	68bb      	ldr	r3, [r7, #8]
 810651e:	781b      	ldrb	r3, [r3, #0]
 8106520:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8106522:	4313      	orrs	r3, r2
 8106524:	617b      	str	r3, [r7, #20]
 8106526:	e00e      	b.n	8106546 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8106528:	68bb      	ldr	r3, [r7, #8]
 810652a:	78db      	ldrb	r3, [r3, #3]
 810652c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 810652e:	68bb      	ldr	r3, [r7, #8]
 8106530:	785b      	ldrb	r3, [r3, #1]
 8106532:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8106534:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8106536:	68ba      	ldr	r2, [r7, #8]
 8106538:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 810653a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 810653c:	68bb      	ldr	r3, [r7, #8]
 810653e:	781b      	ldrb	r3, [r3, #0]
 8106540:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8106542:	4313      	orrs	r3, r2
 8106544:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8106546:	68fb      	ldr	r3, [r7, #12]
 8106548:	681b      	ldr	r3, [r3, #0]
 810654a:	22ca      	movs	r2, #202	; 0xca
 810654c:	625a      	str	r2, [r3, #36]	; 0x24
 810654e:	68fb      	ldr	r3, [r7, #12]
 8106550:	681b      	ldr	r3, [r3, #0]
 8106552:	2253      	movs	r2, #83	; 0x53
 8106554:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8106556:	68f8      	ldr	r0, [r7, #12]
 8106558:	f000 f899 	bl	810668e <RTC_EnterInitMode>
 810655c:	4603      	mov	r3, r0
 810655e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8106560:	7cfb      	ldrb	r3, [r7, #19]
 8106562:	2b00      	cmp	r3, #0
 8106564:	d10c      	bne.n	8106580 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8106566:	68fb      	ldr	r3, [r7, #12]
 8106568:	681a      	ldr	r2, [r3, #0]
 810656a:	697b      	ldr	r3, [r7, #20]
 810656c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8106570:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8106574:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8106576:	68f8      	ldr	r0, [r7, #12]
 8106578:	f000 f8bc 	bl	81066f4 <RTC_ExitInitMode>
 810657c:	4603      	mov	r3, r0
 810657e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8106580:	68fb      	ldr	r3, [r7, #12]
 8106582:	681b      	ldr	r3, [r3, #0]
 8106584:	22ff      	movs	r2, #255	; 0xff
 8106586:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8106588:	7cfb      	ldrb	r3, [r7, #19]
 810658a:	2b00      	cmp	r3, #0
 810658c:	d103      	bne.n	8106596 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 810658e:	68fb      	ldr	r3, [r7, #12]
 8106590:	2201      	movs	r2, #1
 8106592:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8106596:	68fb      	ldr	r3, [r7, #12]
 8106598:	2200      	movs	r2, #0
 810659a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 810659e:	7cfb      	ldrb	r3, [r7, #19]


}
 81065a0:	4618      	mov	r0, r3
 81065a2:	371c      	adds	r7, #28
 81065a4:	46bd      	mov	sp, r7
 81065a6:	bd90      	pop	{r4, r7, pc}

081065a8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 81065a8:	b580      	push	{r7, lr}
 81065aa:	b086      	sub	sp, #24
 81065ac:	af00      	add	r7, sp, #0
 81065ae:	60f8      	str	r0, [r7, #12]
 81065b0:	60b9      	str	r1, [r7, #8]
 81065b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 81065b4:	68fb      	ldr	r3, [r7, #12]
 81065b6:	681b      	ldr	r3, [r3, #0]
 81065b8:	685b      	ldr	r3, [r3, #4]
 81065ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81065be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 81065c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 81065c4:	697b      	ldr	r3, [r7, #20]
 81065c6:	0c1b      	lsrs	r3, r3, #16
 81065c8:	b2da      	uxtb	r2, r3
 81065ca:	68bb      	ldr	r3, [r7, #8]
 81065cc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 81065ce:	697b      	ldr	r3, [r7, #20]
 81065d0:	0a1b      	lsrs	r3, r3, #8
 81065d2:	b2db      	uxtb	r3, r3
 81065d4:	f003 031f 	and.w	r3, r3, #31
 81065d8:	b2da      	uxtb	r2, r3
 81065da:	68bb      	ldr	r3, [r7, #8]
 81065dc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 81065de:	697b      	ldr	r3, [r7, #20]
 81065e0:	b2db      	uxtb	r3, r3
 81065e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81065e6:	b2da      	uxtb	r2, r3
 81065e8:	68bb      	ldr	r3, [r7, #8]
 81065ea:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 81065ec:	697b      	ldr	r3, [r7, #20]
 81065ee:	0b5b      	lsrs	r3, r3, #13
 81065f0:	b2db      	uxtb	r3, r3
 81065f2:	f003 0307 	and.w	r3, r3, #7
 81065f6:	b2da      	uxtb	r2, r3
 81065f8:	68bb      	ldr	r3, [r7, #8]
 81065fa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 81065fc:	687b      	ldr	r3, [r7, #4]
 81065fe:	2b00      	cmp	r3, #0
 8106600:	d11a      	bne.n	8106638 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8106602:	68bb      	ldr	r3, [r7, #8]
 8106604:	78db      	ldrb	r3, [r3, #3]
 8106606:	4618      	mov	r0, r3
 8106608:	f000 f8d2 	bl	81067b0 <RTC_Bcd2ToByte>
 810660c:	4603      	mov	r3, r0
 810660e:	461a      	mov	r2, r3
 8106610:	68bb      	ldr	r3, [r7, #8]
 8106612:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8106614:	68bb      	ldr	r3, [r7, #8]
 8106616:	785b      	ldrb	r3, [r3, #1]
 8106618:	4618      	mov	r0, r3
 810661a:	f000 f8c9 	bl	81067b0 <RTC_Bcd2ToByte>
 810661e:	4603      	mov	r3, r0
 8106620:	461a      	mov	r2, r3
 8106622:	68bb      	ldr	r3, [r7, #8]
 8106624:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8106626:	68bb      	ldr	r3, [r7, #8]
 8106628:	789b      	ldrb	r3, [r3, #2]
 810662a:	4618      	mov	r0, r3
 810662c:	f000 f8c0 	bl	81067b0 <RTC_Bcd2ToByte>
 8106630:	4603      	mov	r3, r0
 8106632:	461a      	mov	r2, r3
 8106634:	68bb      	ldr	r3, [r7, #8]
 8106636:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8106638:	2300      	movs	r3, #0
}
 810663a:	4618      	mov	r0, r3
 810663c:	3718      	adds	r7, #24
 810663e:	46bd      	mov	sp, r7
 8106640:	bd80      	pop	{r7, pc}

08106642 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8106642:	b580      	push	{r7, lr}
 8106644:	b084      	sub	sp, #16
 8106646:	af00      	add	r7, sp, #0
 8106648:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 810664a:	687b      	ldr	r3, [r7, #4]
 810664c:	681b      	ldr	r3, [r3, #0]
 810664e:	68da      	ldr	r2, [r3, #12]
 8106650:	687b      	ldr	r3, [r7, #4]
 8106652:	681b      	ldr	r3, [r3, #0]
 8106654:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8106658:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 810665a:	f7fb faf5 	bl	8101c48 <HAL_GetTick>
 810665e:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8106660:	e009      	b.n	8106676 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8106662:	f7fb faf1 	bl	8101c48 <HAL_GetTick>
 8106666:	4602      	mov	r2, r0
 8106668:	68fb      	ldr	r3, [r7, #12]
 810666a:	1ad3      	subs	r3, r2, r3
 810666c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8106670:	d901      	bls.n	8106676 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8106672:	2303      	movs	r3, #3
 8106674:	e007      	b.n	8106686 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8106676:	687b      	ldr	r3, [r7, #4]
 8106678:	681b      	ldr	r3, [r3, #0]
 810667a:	68db      	ldr	r3, [r3, #12]
 810667c:	f003 0320 	and.w	r3, r3, #32
 8106680:	2b00      	cmp	r3, #0
 8106682:	d0ee      	beq.n	8106662 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8106684:	2300      	movs	r3, #0
}
 8106686:	4618      	mov	r0, r3
 8106688:	3710      	adds	r7, #16
 810668a:	46bd      	mov	sp, r7
 810668c:	bd80      	pop	{r7, pc}

0810668e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 810668e:	b580      	push	{r7, lr}
 8106690:	b084      	sub	sp, #16
 8106692:	af00      	add	r7, sp, #0
 8106694:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106696:	2300      	movs	r3, #0
 8106698:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 810669a:	687b      	ldr	r3, [r7, #4]
 810669c:	681b      	ldr	r3, [r3, #0]
 810669e:	68db      	ldr	r3, [r3, #12]
 81066a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81066a4:	2b00      	cmp	r3, #0
 81066a6:	d120      	bne.n	81066ea <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 81066a8:	687b      	ldr	r3, [r7, #4]
 81066aa:	681b      	ldr	r3, [r3, #0]
 81066ac:	f04f 32ff 	mov.w	r2, #4294967295
 81066b0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 81066b2:	f7fb fac9 	bl	8101c48 <HAL_GetTick>
 81066b6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 81066b8:	e00d      	b.n	81066d6 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 81066ba:	f7fb fac5 	bl	8101c48 <HAL_GetTick>
 81066be:	4602      	mov	r2, r0
 81066c0:	68bb      	ldr	r3, [r7, #8]
 81066c2:	1ad3      	subs	r3, r2, r3
 81066c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 81066c8:	d905      	bls.n	81066d6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 81066ca:	2303      	movs	r3, #3
 81066cc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81066ce:	687b      	ldr	r3, [r7, #4]
 81066d0:	2203      	movs	r2, #3
 81066d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 81066d6:	687b      	ldr	r3, [r7, #4]
 81066d8:	681b      	ldr	r3, [r3, #0]
 81066da:	68db      	ldr	r3, [r3, #12]
 81066dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81066e0:	2b00      	cmp	r3, #0
 81066e2:	d102      	bne.n	81066ea <RTC_EnterInitMode+0x5c>
 81066e4:	7bfb      	ldrb	r3, [r7, #15]
 81066e6:	2b03      	cmp	r3, #3
 81066e8:	d1e7      	bne.n	81066ba <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 81066ea:	7bfb      	ldrb	r3, [r7, #15]
}
 81066ec:	4618      	mov	r0, r3
 81066ee:	3710      	adds	r7, #16
 81066f0:	46bd      	mov	sp, r7
 81066f2:	bd80      	pop	{r7, pc}

081066f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 81066f4:	b580      	push	{r7, lr}
 81066f6:	b084      	sub	sp, #16
 81066f8:	af00      	add	r7, sp, #0
 81066fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81066fc:	2300      	movs	r3, #0
 81066fe:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8106700:	4b1a      	ldr	r3, [pc, #104]	; (810676c <RTC_ExitInitMode+0x78>)
 8106702:	68db      	ldr	r3, [r3, #12]
 8106704:	4a19      	ldr	r2, [pc, #100]	; (810676c <RTC_ExitInitMode+0x78>)
 8106706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810670a:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 810670c:	4b17      	ldr	r3, [pc, #92]	; (810676c <RTC_ExitInitMode+0x78>)
 810670e:	689b      	ldr	r3, [r3, #8]
 8106710:	f003 0320 	and.w	r3, r3, #32
 8106714:	2b00      	cmp	r3, #0
 8106716:	d10c      	bne.n	8106732 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8106718:	6878      	ldr	r0, [r7, #4]
 810671a:	f7ff ff92 	bl	8106642 <HAL_RTC_WaitForSynchro>
 810671e:	4603      	mov	r3, r0
 8106720:	2b00      	cmp	r3, #0
 8106722:	d01e      	beq.n	8106762 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8106724:	687b      	ldr	r3, [r7, #4]
 8106726:	2203      	movs	r2, #3
 8106728:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 810672c:	2303      	movs	r3, #3
 810672e:	73fb      	strb	r3, [r7, #15]
 8106730:	e017      	b.n	8106762 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8106732:	4b0e      	ldr	r3, [pc, #56]	; (810676c <RTC_ExitInitMode+0x78>)
 8106734:	689b      	ldr	r3, [r3, #8]
 8106736:	4a0d      	ldr	r2, [pc, #52]	; (810676c <RTC_ExitInitMode+0x78>)
 8106738:	f023 0320 	bic.w	r3, r3, #32
 810673c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 810673e:	6878      	ldr	r0, [r7, #4]
 8106740:	f7ff ff7f 	bl	8106642 <HAL_RTC_WaitForSynchro>
 8106744:	4603      	mov	r3, r0
 8106746:	2b00      	cmp	r3, #0
 8106748:	d005      	beq.n	8106756 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 810674a:	687b      	ldr	r3, [r7, #4]
 810674c:	2203      	movs	r2, #3
 810674e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8106752:	2303      	movs	r3, #3
 8106754:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8106756:	4b05      	ldr	r3, [pc, #20]	; (810676c <RTC_ExitInitMode+0x78>)
 8106758:	689b      	ldr	r3, [r3, #8]
 810675a:	4a04      	ldr	r2, [pc, #16]	; (810676c <RTC_ExitInitMode+0x78>)
 810675c:	f043 0320 	orr.w	r3, r3, #32
 8106760:	6093      	str	r3, [r2, #8]
  }

  return status;
 8106762:	7bfb      	ldrb	r3, [r7, #15]
}
 8106764:	4618      	mov	r0, r3
 8106766:	3710      	adds	r7, #16
 8106768:	46bd      	mov	sp, r7
 810676a:	bd80      	pop	{r7, pc}
 810676c:	58004000 	.word	0x58004000

08106770 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8106770:	b480      	push	{r7}
 8106772:	b085      	sub	sp, #20
 8106774:	af00      	add	r7, sp, #0
 8106776:	4603      	mov	r3, r0
 8106778:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 810677a:	2300      	movs	r3, #0
 810677c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 810677e:	79fb      	ldrb	r3, [r7, #7]
 8106780:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8106782:	e005      	b.n	8106790 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8106784:	68fb      	ldr	r3, [r7, #12]
 8106786:	3301      	adds	r3, #1
 8106788:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 810678a:	7afb      	ldrb	r3, [r7, #11]
 810678c:	3b0a      	subs	r3, #10
 810678e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8106790:	7afb      	ldrb	r3, [r7, #11]
 8106792:	2b09      	cmp	r3, #9
 8106794:	d8f6      	bhi.n	8106784 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8106796:	68fb      	ldr	r3, [r7, #12]
 8106798:	b2db      	uxtb	r3, r3
 810679a:	011b      	lsls	r3, r3, #4
 810679c:	b2da      	uxtb	r2, r3
 810679e:	7afb      	ldrb	r3, [r7, #11]
 81067a0:	4313      	orrs	r3, r2
 81067a2:	b2db      	uxtb	r3, r3
}
 81067a4:	4618      	mov	r0, r3
 81067a6:	3714      	adds	r7, #20
 81067a8:	46bd      	mov	sp, r7
 81067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067ae:	4770      	bx	lr

081067b0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 81067b0:	b480      	push	{r7}
 81067b2:	b085      	sub	sp, #20
 81067b4:	af00      	add	r7, sp, #0
 81067b6:	4603      	mov	r3, r0
 81067b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 81067ba:	79fb      	ldrb	r3, [r7, #7]
 81067bc:	091b      	lsrs	r3, r3, #4
 81067be:	b2db      	uxtb	r3, r3
 81067c0:	461a      	mov	r2, r3
 81067c2:	0092      	lsls	r2, r2, #2
 81067c4:	4413      	add	r3, r2
 81067c6:	005b      	lsls	r3, r3, #1
 81067c8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 81067ca:	79fb      	ldrb	r3, [r7, #7]
 81067cc:	f003 030f 	and.w	r3, r3, #15
 81067d0:	b2da      	uxtb	r2, r3
 81067d2:	7bfb      	ldrb	r3, [r7, #15]
 81067d4:	4413      	add	r3, r2
 81067d6:	b2db      	uxtb	r3, r3
}
 81067d8:	4618      	mov	r0, r3
 81067da:	3714      	adds	r7, #20
 81067dc:	46bd      	mov	sp, r7
 81067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067e2:	4770      	bx	lr

081067e4 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef * hrtc)
{
 81067e4:	b580      	push	{r7, lr}
 81067e6:	b084      	sub	sp, #16
 81067e8:	af00      	add	r7, sp, #0
 81067ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  /* Process Locked */
  __HAL_LOCK(hrtc);
 81067ec:	687b      	ldr	r3, [r7, #4]
 81067ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 81067f2:	2b01      	cmp	r3, #1
 81067f4:	d101      	bne.n	81067fa <HAL_RTCEx_SetRefClock+0x16>
 81067f6:	2302      	movs	r3, #2
 81067f8:	e034      	b.n	8106864 <HAL_RTCEx_SetRefClock+0x80>
 81067fa:	687b      	ldr	r3, [r7, #4]
 81067fc:	2201      	movs	r2, #1
 81067fe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8106802:	687b      	ldr	r3, [r7, #4]
 8106804:	2202      	movs	r2, #2
 8106806:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 810680a:	687b      	ldr	r3, [r7, #4]
 810680c:	681b      	ldr	r3, [r3, #0]
 810680e:	22ca      	movs	r2, #202	; 0xca
 8106810:	625a      	str	r2, [r3, #36]	; 0x24
 8106812:	687b      	ldr	r3, [r7, #4]
 8106814:	681b      	ldr	r3, [r3, #0]
 8106816:	2253      	movs	r2, #83	; 0x53
 8106818:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 810681a:	6878      	ldr	r0, [r7, #4]
 810681c:	f7ff ff37 	bl	810668e <RTC_EnterInitMode>
 8106820:	4603      	mov	r3, r0
 8106822:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 8106824:	7bfb      	ldrb	r3, [r7, #15]
 8106826:	2b00      	cmp	r3, #0
 8106828:	d10c      	bne.n	8106844 <HAL_RTCEx_SetRefClock+0x60>
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 810682a:	687b      	ldr	r3, [r7, #4]
 810682c:	681b      	ldr	r3, [r3, #0]
 810682e:	689a      	ldr	r2, [r3, #8]
 8106830:	687b      	ldr	r3, [r7, #4]
 8106832:	681b      	ldr	r3, [r3, #0]
 8106834:	f042 0210 	orr.w	r2, r2, #16
 8106838:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 810683a:	6878      	ldr	r0, [r7, #4]
 810683c:	f7ff ff5a 	bl	81066f4 <RTC_ExitInitMode>
 8106840:	4603      	mov	r3, r0
 8106842:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8106844:	687b      	ldr	r3, [r7, #4]
 8106846:	681b      	ldr	r3, [r3, #0]
 8106848:	22ff      	movs	r2, #255	; 0xff
 810684a:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 810684c:	7bfb      	ldrb	r3, [r7, #15]
 810684e:	2b00      	cmp	r3, #0
 8106850:	d103      	bne.n	810685a <HAL_RTCEx_SetRefClock+0x76>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8106852:	687b      	ldr	r3, [r7, #4]
 8106854:	2201      	movs	r2, #1
 8106856:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 810685a:	687b      	ldr	r3, [r7, #4]
 810685c:	2200      	movs	r2, #0
 810685e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8106862:	2300      	movs	r3, #0
}
 8106864:	4618      	mov	r0, r3
 8106866:	3710      	adds	r7, #16
 8106868:	46bd      	mov	sp, r7
 810686a:	bd80      	pop	{r7, pc}

0810686c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810686c:	b580      	push	{r7, lr}
 810686e:	b084      	sub	sp, #16
 8106870:	af00      	add	r7, sp, #0
 8106872:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8106874:	687b      	ldr	r3, [r7, #4]
 8106876:	2b00      	cmp	r3, #0
 8106878:	d101      	bne.n	810687e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 810687a:	2301      	movs	r3, #1
 810687c:	e0f1      	b.n	8106a62 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810687e:	687b      	ldr	r3, [r7, #4]
 8106880:	2200      	movs	r2, #0
 8106882:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8106884:	687b      	ldr	r3, [r7, #4]
 8106886:	681b      	ldr	r3, [r3, #0]
 8106888:	4a78      	ldr	r2, [pc, #480]	; (8106a6c <HAL_SPI_Init+0x200>)
 810688a:	4293      	cmp	r3, r2
 810688c:	d00f      	beq.n	81068ae <HAL_SPI_Init+0x42>
 810688e:	687b      	ldr	r3, [r7, #4]
 8106890:	681b      	ldr	r3, [r3, #0]
 8106892:	4a77      	ldr	r2, [pc, #476]	; (8106a70 <HAL_SPI_Init+0x204>)
 8106894:	4293      	cmp	r3, r2
 8106896:	d00a      	beq.n	81068ae <HAL_SPI_Init+0x42>
 8106898:	687b      	ldr	r3, [r7, #4]
 810689a:	681b      	ldr	r3, [r3, #0]
 810689c:	4a75      	ldr	r2, [pc, #468]	; (8106a74 <HAL_SPI_Init+0x208>)
 810689e:	4293      	cmp	r3, r2
 81068a0:	d005      	beq.n	81068ae <HAL_SPI_Init+0x42>
 81068a2:	687b      	ldr	r3, [r7, #4]
 81068a4:	68db      	ldr	r3, [r3, #12]
 81068a6:	2b0f      	cmp	r3, #15
 81068a8:	d901      	bls.n	81068ae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 81068aa:	2301      	movs	r3, #1
 81068ac:	e0d9      	b.n	8106a62 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 81068ae:	6878      	ldr	r0, [r7, #4]
 81068b0:	f000 ff5d 	bl	810776e <SPI_GetPacketSize>
 81068b4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81068b6:	687b      	ldr	r3, [r7, #4]
 81068b8:	681b      	ldr	r3, [r3, #0]
 81068ba:	4a6c      	ldr	r2, [pc, #432]	; (8106a6c <HAL_SPI_Init+0x200>)
 81068bc:	4293      	cmp	r3, r2
 81068be:	d00c      	beq.n	81068da <HAL_SPI_Init+0x6e>
 81068c0:	687b      	ldr	r3, [r7, #4]
 81068c2:	681b      	ldr	r3, [r3, #0]
 81068c4:	4a6a      	ldr	r2, [pc, #424]	; (8106a70 <HAL_SPI_Init+0x204>)
 81068c6:	4293      	cmp	r3, r2
 81068c8:	d007      	beq.n	81068da <HAL_SPI_Init+0x6e>
 81068ca:	687b      	ldr	r3, [r7, #4]
 81068cc:	681b      	ldr	r3, [r3, #0]
 81068ce:	4a69      	ldr	r2, [pc, #420]	; (8106a74 <HAL_SPI_Init+0x208>)
 81068d0:	4293      	cmp	r3, r2
 81068d2:	d002      	beq.n	81068da <HAL_SPI_Init+0x6e>
 81068d4:	68fb      	ldr	r3, [r7, #12]
 81068d6:	2b08      	cmp	r3, #8
 81068d8:	d811      	bhi.n	81068fe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81068da:	687b      	ldr	r3, [r7, #4]
 81068dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81068de:	4a63      	ldr	r2, [pc, #396]	; (8106a6c <HAL_SPI_Init+0x200>)
 81068e0:	4293      	cmp	r3, r2
 81068e2:	d009      	beq.n	81068f8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81068e4:	687b      	ldr	r3, [r7, #4]
 81068e6:	681b      	ldr	r3, [r3, #0]
 81068e8:	4a61      	ldr	r2, [pc, #388]	; (8106a70 <HAL_SPI_Init+0x204>)
 81068ea:	4293      	cmp	r3, r2
 81068ec:	d004      	beq.n	81068f8 <HAL_SPI_Init+0x8c>
 81068ee:	687b      	ldr	r3, [r7, #4]
 81068f0:	681b      	ldr	r3, [r3, #0]
 81068f2:	4a60      	ldr	r2, [pc, #384]	; (8106a74 <HAL_SPI_Init+0x208>)
 81068f4:	4293      	cmp	r3, r2
 81068f6:	d104      	bne.n	8106902 <HAL_SPI_Init+0x96>
 81068f8:	68fb      	ldr	r3, [r7, #12]
 81068fa:	2b10      	cmp	r3, #16
 81068fc:	d901      	bls.n	8106902 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 81068fe:	2301      	movs	r3, #1
 8106900:	e0af      	b.n	8106a62 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8106902:	687b      	ldr	r3, [r7, #4]
 8106904:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106908:	b2db      	uxtb	r3, r3
 810690a:	2b00      	cmp	r3, #0
 810690c:	d106      	bne.n	810691c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810690e:	687b      	ldr	r3, [r7, #4]
 8106910:	2200      	movs	r2, #0
 8106912:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8106916:	6878      	ldr	r0, [r7, #4]
 8106918:	f7fa feea 	bl	81016f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810691c:	687b      	ldr	r3, [r7, #4]
 810691e:	2202      	movs	r2, #2
 8106920:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8106924:	687b      	ldr	r3, [r7, #4]
 8106926:	681b      	ldr	r3, [r3, #0]
 8106928:	681a      	ldr	r2, [r3, #0]
 810692a:	687b      	ldr	r3, [r7, #4]
 810692c:	681b      	ldr	r3, [r3, #0]
 810692e:	f022 0201 	bic.w	r2, r2, #1
 8106932:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8106934:	687b      	ldr	r3, [r7, #4]
 8106936:	681b      	ldr	r3, [r3, #0]
 8106938:	689b      	ldr	r3, [r3, #8]
 810693a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 810693e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8106940:	687b      	ldr	r3, [r7, #4]
 8106942:	699b      	ldr	r3, [r3, #24]
 8106944:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106948:	d119      	bne.n	810697e <HAL_SPI_Init+0x112>
 810694a:	687b      	ldr	r3, [r7, #4]
 810694c:	685b      	ldr	r3, [r3, #4]
 810694e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106952:	d103      	bne.n	810695c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8106954:	687b      	ldr	r3, [r7, #4]
 8106956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8106958:	2b00      	cmp	r3, #0
 810695a:	d008      	beq.n	810696e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 810695c:	687b      	ldr	r3, [r7, #4]
 810695e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8106960:	2b00      	cmp	r3, #0
 8106962:	d10c      	bne.n	810697e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8106964:	687b      	ldr	r3, [r7, #4]
 8106966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8106968:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810696c:	d107      	bne.n	810697e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810696e:	687b      	ldr	r3, [r7, #4]
 8106970:	681b      	ldr	r3, [r3, #0]
 8106972:	681a      	ldr	r2, [r3, #0]
 8106974:	687b      	ldr	r3, [r7, #4]
 8106976:	681b      	ldr	r3, [r3, #0]
 8106978:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 810697c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810697e:	687b      	ldr	r3, [r7, #4]
 8106980:	69da      	ldr	r2, [r3, #28]
 8106982:	687b      	ldr	r3, [r7, #4]
 8106984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106986:	431a      	orrs	r2, r3
 8106988:	68bb      	ldr	r3, [r7, #8]
 810698a:	431a      	orrs	r2, r3
 810698c:	687b      	ldr	r3, [r7, #4]
 810698e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106990:	ea42 0103 	orr.w	r1, r2, r3
 8106994:	687b      	ldr	r3, [r7, #4]
 8106996:	68da      	ldr	r2, [r3, #12]
 8106998:	687b      	ldr	r3, [r7, #4]
 810699a:	681b      	ldr	r3, [r3, #0]
 810699c:	430a      	orrs	r2, r1
 810699e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 81069a0:	687b      	ldr	r3, [r7, #4]
 81069a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81069a4:	687b      	ldr	r3, [r7, #4]
 81069a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81069a8:	431a      	orrs	r2, r3
 81069aa:	687b      	ldr	r3, [r7, #4]
 81069ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81069ae:	431a      	orrs	r2, r3
 81069b0:	687b      	ldr	r3, [r7, #4]
 81069b2:	699b      	ldr	r3, [r3, #24]
 81069b4:	431a      	orrs	r2, r3
 81069b6:	687b      	ldr	r3, [r7, #4]
 81069b8:	691b      	ldr	r3, [r3, #16]
 81069ba:	431a      	orrs	r2, r3
 81069bc:	687b      	ldr	r3, [r7, #4]
 81069be:	695b      	ldr	r3, [r3, #20]
 81069c0:	431a      	orrs	r2, r3
 81069c2:	687b      	ldr	r3, [r7, #4]
 81069c4:	6a1b      	ldr	r3, [r3, #32]
 81069c6:	431a      	orrs	r2, r3
 81069c8:	687b      	ldr	r3, [r7, #4]
 81069ca:	685b      	ldr	r3, [r3, #4]
 81069cc:	431a      	orrs	r2, r3
 81069ce:	687b      	ldr	r3, [r7, #4]
 81069d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81069d2:	431a      	orrs	r2, r3
 81069d4:	687b      	ldr	r3, [r7, #4]
 81069d6:	689b      	ldr	r3, [r3, #8]
 81069d8:	431a      	orrs	r2, r3
 81069da:	687b      	ldr	r3, [r7, #4]
 81069dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81069de:	ea42 0103 	orr.w	r1, r2, r3
 81069e2:	687b      	ldr	r3, [r7, #4]
 81069e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 81069e6:	687b      	ldr	r3, [r7, #4]
 81069e8:	681b      	ldr	r3, [r3, #0]
 81069ea:	430a      	orrs	r2, r1
 81069ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 81069ee:	687b      	ldr	r3, [r7, #4]
 81069f0:	685b      	ldr	r3, [r3, #4]
 81069f2:	2b00      	cmp	r3, #0
 81069f4:	d113      	bne.n	8106a1e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 81069f6:	687b      	ldr	r3, [r7, #4]
 81069f8:	681b      	ldr	r3, [r3, #0]
 81069fa:	689b      	ldr	r3, [r3, #8]
 81069fc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8106a00:	687b      	ldr	r3, [r7, #4]
 8106a02:	681b      	ldr	r3, [r3, #0]
 8106a04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106a08:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8106a0a:	687b      	ldr	r3, [r7, #4]
 8106a0c:	681b      	ldr	r3, [r3, #0]
 8106a0e:	689b      	ldr	r3, [r3, #8]
 8106a10:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8106a14:	687b      	ldr	r3, [r7, #4]
 8106a16:	681b      	ldr	r3, [r3, #0]
 8106a18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8106a1c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8106a1e:	687b      	ldr	r3, [r7, #4]
 8106a20:	681b      	ldr	r3, [r3, #0]
 8106a22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8106a24:	687b      	ldr	r3, [r7, #4]
 8106a26:	681b      	ldr	r3, [r3, #0]
 8106a28:	f022 0201 	bic.w	r2, r2, #1
 8106a2c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8106a2e:	687b      	ldr	r3, [r7, #4]
 8106a30:	685b      	ldr	r3, [r3, #4]
 8106a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8106a36:	2b00      	cmp	r3, #0
 8106a38:	d00a      	beq.n	8106a50 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8106a3a:	687b      	ldr	r3, [r7, #4]
 8106a3c:	681b      	ldr	r3, [r3, #0]
 8106a3e:	68db      	ldr	r3, [r3, #12]
 8106a40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8106a44:	687b      	ldr	r3, [r7, #4]
 8106a46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8106a48:	687b      	ldr	r3, [r7, #4]
 8106a4a:	681b      	ldr	r3, [r3, #0]
 8106a4c:	430a      	orrs	r2, r1
 8106a4e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8106a50:	687b      	ldr	r3, [r7, #4]
 8106a52:	2200      	movs	r2, #0
 8106a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8106a58:	687b      	ldr	r3, [r7, #4]
 8106a5a:	2201      	movs	r2, #1
 8106a5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8106a60:	2300      	movs	r3, #0
}
 8106a62:	4618      	mov	r0, r3
 8106a64:	3710      	adds	r7, #16
 8106a66:	46bd      	mov	sp, r7
 8106a68:	bd80      	pop	{r7, pc}
 8106a6a:	bf00      	nop
 8106a6c:	40013000 	.word	0x40013000
 8106a70:	40003800 	.word	0x40003800
 8106a74:	40003c00 	.word	0x40003c00

08106a78 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106a78:	b580      	push	{r7, lr}
 8106a7a:	b08a      	sub	sp, #40	; 0x28
 8106a7c:	af02      	add	r7, sp, #8
 8106a7e:	60f8      	str	r0, [r7, #12]
 8106a80:	60b9      	str	r1, [r7, #8]
 8106a82:	603b      	str	r3, [r7, #0]
 8106a84:	4613      	mov	r3, r2
 8106a86:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8106a88:	68fb      	ldr	r3, [r7, #12]
 8106a8a:	681b      	ldr	r3, [r3, #0]
 8106a8c:	3320      	adds	r3, #32
 8106a8e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8106a90:	2300      	movs	r3, #0
 8106a92:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8106a94:	68fb      	ldr	r3, [r7, #12]
 8106a96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106a9a:	2b01      	cmp	r3, #1
 8106a9c:	d101      	bne.n	8106aa2 <HAL_SPI_Transmit+0x2a>
 8106a9e:	2302      	movs	r3, #2
 8106aa0:	e1d4      	b.n	8106e4c <HAL_SPI_Transmit+0x3d4>
 8106aa2:	68fb      	ldr	r3, [r7, #12]
 8106aa4:	2201      	movs	r2, #1
 8106aa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8106aaa:	f7fb f8cd 	bl	8101c48 <HAL_GetTick>
 8106aae:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8106ab0:	68fb      	ldr	r3, [r7, #12]
 8106ab2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106ab6:	b2db      	uxtb	r3, r3
 8106ab8:	2b01      	cmp	r3, #1
 8106aba:	d007      	beq.n	8106acc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8106abc:	2302      	movs	r3, #2
 8106abe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8106ac0:	68fb      	ldr	r3, [r7, #12]
 8106ac2:	2200      	movs	r2, #0
 8106ac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8106ac8:	7efb      	ldrb	r3, [r7, #27]
 8106aca:	e1bf      	b.n	8106e4c <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 8106acc:	68bb      	ldr	r3, [r7, #8]
 8106ace:	2b00      	cmp	r3, #0
 8106ad0:	d002      	beq.n	8106ad8 <HAL_SPI_Transmit+0x60>
 8106ad2:	88fb      	ldrh	r3, [r7, #6]
 8106ad4:	2b00      	cmp	r3, #0
 8106ad6:	d107      	bne.n	8106ae8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8106ad8:	2301      	movs	r3, #1
 8106ada:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8106adc:	68fb      	ldr	r3, [r7, #12]
 8106ade:	2200      	movs	r2, #0
 8106ae0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8106ae4:	7efb      	ldrb	r3, [r7, #27]
 8106ae6:	e1b1      	b.n	8106e4c <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8106ae8:	68fb      	ldr	r3, [r7, #12]
 8106aea:	2203      	movs	r2, #3
 8106aec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8106af0:	68fb      	ldr	r3, [r7, #12]
 8106af2:	2200      	movs	r2, #0
 8106af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8106af8:	68fb      	ldr	r3, [r7, #12]
 8106afa:	68ba      	ldr	r2, [r7, #8]
 8106afc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8106afe:	68fb      	ldr	r3, [r7, #12]
 8106b00:	88fa      	ldrh	r2, [r7, #6]
 8106b02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8106b06:	68fb      	ldr	r3, [r7, #12]
 8106b08:	88fa      	ldrh	r2, [r7, #6]
 8106b0a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8106b0e:	68fb      	ldr	r3, [r7, #12]
 8106b10:	2200      	movs	r2, #0
 8106b12:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8106b14:	68fb      	ldr	r3, [r7, #12]
 8106b16:	2200      	movs	r2, #0
 8106b18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8106b1c:	68fb      	ldr	r3, [r7, #12]
 8106b1e:	2200      	movs	r2, #0
 8106b20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8106b24:	68fb      	ldr	r3, [r7, #12]
 8106b26:	2200      	movs	r2, #0
 8106b28:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8106b2a:	68fb      	ldr	r3, [r7, #12]
 8106b2c:	2200      	movs	r2, #0
 8106b2e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8106b30:	68fb      	ldr	r3, [r7, #12]
 8106b32:	689b      	ldr	r3, [r3, #8]
 8106b34:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8106b38:	d107      	bne.n	8106b4a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8106b3a:	68fb      	ldr	r3, [r7, #12]
 8106b3c:	681b      	ldr	r3, [r3, #0]
 8106b3e:	681a      	ldr	r2, [r3, #0]
 8106b40:	68fb      	ldr	r3, [r7, #12]
 8106b42:	681b      	ldr	r3, [r3, #0]
 8106b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106b48:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8106b4a:	68fb      	ldr	r3, [r7, #12]
 8106b4c:	681b      	ldr	r3, [r3, #0]
 8106b4e:	685b      	ldr	r3, [r3, #4]
 8106b50:	0c1b      	lsrs	r3, r3, #16
 8106b52:	041b      	lsls	r3, r3, #16
 8106b54:	88f9      	ldrh	r1, [r7, #6]
 8106b56:	68fa      	ldr	r2, [r7, #12]
 8106b58:	6812      	ldr	r2, [r2, #0]
 8106b5a:	430b      	orrs	r3, r1
 8106b5c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8106b5e:	68fb      	ldr	r3, [r7, #12]
 8106b60:	681b      	ldr	r3, [r3, #0]
 8106b62:	681a      	ldr	r2, [r3, #0]
 8106b64:	68fb      	ldr	r3, [r7, #12]
 8106b66:	681b      	ldr	r3, [r3, #0]
 8106b68:	f042 0201 	orr.w	r2, r2, #1
 8106b6c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8106b6e:	68fb      	ldr	r3, [r7, #12]
 8106b70:	685b      	ldr	r3, [r3, #4]
 8106b72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106b76:	d107      	bne.n	8106b88 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8106b78:	68fb      	ldr	r3, [r7, #12]
 8106b7a:	681b      	ldr	r3, [r3, #0]
 8106b7c:	681a      	ldr	r2, [r3, #0]
 8106b7e:	68fb      	ldr	r3, [r7, #12]
 8106b80:	681b      	ldr	r3, [r3, #0]
 8106b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8106b86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8106b88:	68fb      	ldr	r3, [r7, #12]
 8106b8a:	68db      	ldr	r3, [r3, #12]
 8106b8c:	2b0f      	cmp	r3, #15
 8106b8e:	d947      	bls.n	8106c20 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8106b90:	e03f      	b.n	8106c12 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8106b92:	68fb      	ldr	r3, [r7, #12]
 8106b94:	681b      	ldr	r3, [r3, #0]
 8106b96:	695b      	ldr	r3, [r3, #20]
 8106b98:	f003 0302 	and.w	r3, r3, #2
 8106b9c:	2b02      	cmp	r3, #2
 8106b9e:	d114      	bne.n	8106bca <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8106ba0:	68fb      	ldr	r3, [r7, #12]
 8106ba2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8106ba4:	68fb      	ldr	r3, [r7, #12]
 8106ba6:	681b      	ldr	r3, [r3, #0]
 8106ba8:	6812      	ldr	r2, [r2, #0]
 8106baa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8106bac:	68fb      	ldr	r3, [r7, #12]
 8106bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106bb0:	1d1a      	adds	r2, r3, #4
 8106bb2:	68fb      	ldr	r3, [r7, #12]
 8106bb4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8106bb6:	68fb      	ldr	r3, [r7, #12]
 8106bb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106bbc:	b29b      	uxth	r3, r3
 8106bbe:	3b01      	subs	r3, #1
 8106bc0:	b29a      	uxth	r2, r3
 8106bc2:	68fb      	ldr	r3, [r7, #12]
 8106bc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8106bc8:	e023      	b.n	8106c12 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106bca:	f7fb f83d 	bl	8101c48 <HAL_GetTick>
 8106bce:	4602      	mov	r2, r0
 8106bd0:	697b      	ldr	r3, [r7, #20]
 8106bd2:	1ad3      	subs	r3, r2, r3
 8106bd4:	683a      	ldr	r2, [r7, #0]
 8106bd6:	429a      	cmp	r2, r3
 8106bd8:	d803      	bhi.n	8106be2 <HAL_SPI_Transmit+0x16a>
 8106bda:	683b      	ldr	r3, [r7, #0]
 8106bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106be0:	d102      	bne.n	8106be8 <HAL_SPI_Transmit+0x170>
 8106be2:	683b      	ldr	r3, [r7, #0]
 8106be4:	2b00      	cmp	r3, #0
 8106be6:	d114      	bne.n	8106c12 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8106be8:	68f8      	ldr	r0, [r7, #12]
 8106bea:	f000 fcf2 	bl	81075d2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8106bee:	68fb      	ldr	r3, [r7, #12]
 8106bf0:	2200      	movs	r2, #0
 8106bf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8106bf6:	68fb      	ldr	r3, [r7, #12]
 8106bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106bfc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8106c00:	68fb      	ldr	r3, [r7, #12]
 8106c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8106c06:	68fb      	ldr	r3, [r7, #12]
 8106c08:	2201      	movs	r2, #1
 8106c0a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8106c0e:	2303      	movs	r3, #3
 8106c10:	e11c      	b.n	8106e4c <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8106c12:	68fb      	ldr	r3, [r7, #12]
 8106c14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106c18:	b29b      	uxth	r3, r3
 8106c1a:	2b00      	cmp	r3, #0
 8106c1c:	d1b9      	bne.n	8106b92 <HAL_SPI_Transmit+0x11a>
 8106c1e:	e0ef      	b.n	8106e00 <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8106c20:	68fb      	ldr	r3, [r7, #12]
 8106c22:	68db      	ldr	r3, [r3, #12]
 8106c24:	2b07      	cmp	r3, #7
 8106c26:	f240 80e4 	bls.w	8106df2 <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8106c2a:	e05d      	b.n	8106ce8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8106c2c:	68fb      	ldr	r3, [r7, #12]
 8106c2e:	681b      	ldr	r3, [r3, #0]
 8106c30:	695b      	ldr	r3, [r3, #20]
 8106c32:	f003 0302 	and.w	r3, r3, #2
 8106c36:	2b02      	cmp	r3, #2
 8106c38:	d132      	bne.n	8106ca0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8106c3a:	68fb      	ldr	r3, [r7, #12]
 8106c3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106c40:	b29b      	uxth	r3, r3
 8106c42:	2b01      	cmp	r3, #1
 8106c44:	d918      	bls.n	8106c78 <HAL_SPI_Transmit+0x200>
 8106c46:	68fb      	ldr	r3, [r7, #12]
 8106c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106c4a:	2b00      	cmp	r3, #0
 8106c4c:	d014      	beq.n	8106c78 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8106c4e:	68fb      	ldr	r3, [r7, #12]
 8106c50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8106c52:	68fb      	ldr	r3, [r7, #12]
 8106c54:	681b      	ldr	r3, [r3, #0]
 8106c56:	6812      	ldr	r2, [r2, #0]
 8106c58:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8106c5a:	68fb      	ldr	r3, [r7, #12]
 8106c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106c5e:	1d1a      	adds	r2, r3, #4
 8106c60:	68fb      	ldr	r3, [r7, #12]
 8106c62:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8106c64:	68fb      	ldr	r3, [r7, #12]
 8106c66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106c6a:	b29b      	uxth	r3, r3
 8106c6c:	3b02      	subs	r3, #2
 8106c6e:	b29a      	uxth	r2, r3
 8106c70:	68fb      	ldr	r3, [r7, #12]
 8106c72:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8106c76:	e037      	b.n	8106ce8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8106c78:	68fb      	ldr	r3, [r7, #12]
 8106c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106c7c:	881a      	ldrh	r2, [r3, #0]
 8106c7e:	69fb      	ldr	r3, [r7, #28]
 8106c80:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8106c82:	68fb      	ldr	r3, [r7, #12]
 8106c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106c86:	1c9a      	adds	r2, r3, #2
 8106c88:	68fb      	ldr	r3, [r7, #12]
 8106c8a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8106c8c:	68fb      	ldr	r3, [r7, #12]
 8106c8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106c92:	b29b      	uxth	r3, r3
 8106c94:	3b01      	subs	r3, #1
 8106c96:	b29a      	uxth	r2, r3
 8106c98:	68fb      	ldr	r3, [r7, #12]
 8106c9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8106c9e:	e023      	b.n	8106ce8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106ca0:	f7fa ffd2 	bl	8101c48 <HAL_GetTick>
 8106ca4:	4602      	mov	r2, r0
 8106ca6:	697b      	ldr	r3, [r7, #20]
 8106ca8:	1ad3      	subs	r3, r2, r3
 8106caa:	683a      	ldr	r2, [r7, #0]
 8106cac:	429a      	cmp	r2, r3
 8106cae:	d803      	bhi.n	8106cb8 <HAL_SPI_Transmit+0x240>
 8106cb0:	683b      	ldr	r3, [r7, #0]
 8106cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106cb6:	d102      	bne.n	8106cbe <HAL_SPI_Transmit+0x246>
 8106cb8:	683b      	ldr	r3, [r7, #0]
 8106cba:	2b00      	cmp	r3, #0
 8106cbc:	d114      	bne.n	8106ce8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8106cbe:	68f8      	ldr	r0, [r7, #12]
 8106cc0:	f000 fc87 	bl	81075d2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8106cc4:	68fb      	ldr	r3, [r7, #12]
 8106cc6:	2200      	movs	r2, #0
 8106cc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8106ccc:	68fb      	ldr	r3, [r7, #12]
 8106cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106cd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8106cd6:	68fb      	ldr	r3, [r7, #12]
 8106cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8106cdc:	68fb      	ldr	r3, [r7, #12]
 8106cde:	2201      	movs	r2, #1
 8106ce0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8106ce4:	2303      	movs	r3, #3
 8106ce6:	e0b1      	b.n	8106e4c <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8106ce8:	68fb      	ldr	r3, [r7, #12]
 8106cea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106cee:	b29b      	uxth	r3, r3
 8106cf0:	2b00      	cmp	r3, #0
 8106cf2:	d19b      	bne.n	8106c2c <HAL_SPI_Transmit+0x1b4>
 8106cf4:	e084      	b.n	8106e00 <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8106cf6:	68fb      	ldr	r3, [r7, #12]
 8106cf8:	681b      	ldr	r3, [r3, #0]
 8106cfa:	695b      	ldr	r3, [r3, #20]
 8106cfc:	f003 0302 	and.w	r3, r3, #2
 8106d00:	2b02      	cmp	r3, #2
 8106d02:	d152      	bne.n	8106daa <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8106d04:	68fb      	ldr	r3, [r7, #12]
 8106d06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106d0a:	b29b      	uxth	r3, r3
 8106d0c:	2b03      	cmp	r3, #3
 8106d0e:	d918      	bls.n	8106d42 <HAL_SPI_Transmit+0x2ca>
 8106d10:	68fb      	ldr	r3, [r7, #12]
 8106d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106d14:	2b40      	cmp	r3, #64	; 0x40
 8106d16:	d914      	bls.n	8106d42 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8106d18:	68fb      	ldr	r3, [r7, #12]
 8106d1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8106d1c:	68fb      	ldr	r3, [r7, #12]
 8106d1e:	681b      	ldr	r3, [r3, #0]
 8106d20:	6812      	ldr	r2, [r2, #0]
 8106d22:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8106d24:	68fb      	ldr	r3, [r7, #12]
 8106d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106d28:	1d1a      	adds	r2, r3, #4
 8106d2a:	68fb      	ldr	r3, [r7, #12]
 8106d2c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8106d2e:	68fb      	ldr	r3, [r7, #12]
 8106d30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106d34:	b29b      	uxth	r3, r3
 8106d36:	3b04      	subs	r3, #4
 8106d38:	b29a      	uxth	r2, r3
 8106d3a:	68fb      	ldr	r3, [r7, #12]
 8106d3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8106d40:	e057      	b.n	8106df2 <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8106d42:	68fb      	ldr	r3, [r7, #12]
 8106d44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106d48:	b29b      	uxth	r3, r3
 8106d4a:	2b01      	cmp	r3, #1
 8106d4c:	d917      	bls.n	8106d7e <HAL_SPI_Transmit+0x306>
 8106d4e:	68fb      	ldr	r3, [r7, #12]
 8106d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106d52:	2b00      	cmp	r3, #0
 8106d54:	d013      	beq.n	8106d7e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8106d56:	68fb      	ldr	r3, [r7, #12]
 8106d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106d5a:	881a      	ldrh	r2, [r3, #0]
 8106d5c:	69fb      	ldr	r3, [r7, #28]
 8106d5e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8106d60:	68fb      	ldr	r3, [r7, #12]
 8106d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106d64:	1c9a      	adds	r2, r3, #2
 8106d66:	68fb      	ldr	r3, [r7, #12]
 8106d68:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8106d6a:	68fb      	ldr	r3, [r7, #12]
 8106d6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106d70:	b29b      	uxth	r3, r3
 8106d72:	3b02      	subs	r3, #2
 8106d74:	b29a      	uxth	r2, r3
 8106d76:	68fb      	ldr	r3, [r7, #12]
 8106d78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8106d7c:	e039      	b.n	8106df2 <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8106d7e:	68fb      	ldr	r3, [r7, #12]
 8106d80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8106d82:	68fb      	ldr	r3, [r7, #12]
 8106d84:	681b      	ldr	r3, [r3, #0]
 8106d86:	3320      	adds	r3, #32
 8106d88:	7812      	ldrb	r2, [r2, #0]
 8106d8a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8106d8c:	68fb      	ldr	r3, [r7, #12]
 8106d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106d90:	1c5a      	adds	r2, r3, #1
 8106d92:	68fb      	ldr	r3, [r7, #12]
 8106d94:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8106d96:	68fb      	ldr	r3, [r7, #12]
 8106d98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106d9c:	b29b      	uxth	r3, r3
 8106d9e:	3b01      	subs	r3, #1
 8106da0:	b29a      	uxth	r2, r3
 8106da2:	68fb      	ldr	r3, [r7, #12]
 8106da4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8106da8:	e023      	b.n	8106df2 <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106daa:	f7fa ff4d 	bl	8101c48 <HAL_GetTick>
 8106dae:	4602      	mov	r2, r0
 8106db0:	697b      	ldr	r3, [r7, #20]
 8106db2:	1ad3      	subs	r3, r2, r3
 8106db4:	683a      	ldr	r2, [r7, #0]
 8106db6:	429a      	cmp	r2, r3
 8106db8:	d803      	bhi.n	8106dc2 <HAL_SPI_Transmit+0x34a>
 8106dba:	683b      	ldr	r3, [r7, #0]
 8106dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106dc0:	d102      	bne.n	8106dc8 <HAL_SPI_Transmit+0x350>
 8106dc2:	683b      	ldr	r3, [r7, #0]
 8106dc4:	2b00      	cmp	r3, #0
 8106dc6:	d114      	bne.n	8106df2 <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8106dc8:	68f8      	ldr	r0, [r7, #12]
 8106dca:	f000 fc02 	bl	81075d2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8106dce:	68fb      	ldr	r3, [r7, #12]
 8106dd0:	2200      	movs	r2, #0
 8106dd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8106dd6:	68fb      	ldr	r3, [r7, #12]
 8106dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106ddc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8106de0:	68fb      	ldr	r3, [r7, #12]
 8106de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8106de6:	68fb      	ldr	r3, [r7, #12]
 8106de8:	2201      	movs	r2, #1
 8106dea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8106dee:	2303      	movs	r3, #3
 8106df0:	e02c      	b.n	8106e4c <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8106df2:	68fb      	ldr	r3, [r7, #12]
 8106df4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106df8:	b29b      	uxth	r3, r3
 8106dfa:	2b00      	cmp	r3, #0
 8106dfc:	f47f af7b 	bne.w	8106cf6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8106e00:	683b      	ldr	r3, [r7, #0]
 8106e02:	9300      	str	r3, [sp, #0]
 8106e04:	697b      	ldr	r3, [r7, #20]
 8106e06:	2200      	movs	r2, #0
 8106e08:	2108      	movs	r1, #8
 8106e0a:	68f8      	ldr	r0, [r7, #12]
 8106e0c:	f000 fc81 	bl	8107712 <SPI_WaitOnFlagUntilTimeout>
 8106e10:	4603      	mov	r3, r0
 8106e12:	2b00      	cmp	r3, #0
 8106e14:	d007      	beq.n	8106e26 <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8106e16:	68fb      	ldr	r3, [r7, #12]
 8106e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106e1c:	f043 0220 	orr.w	r2, r3, #32
 8106e20:	68fb      	ldr	r3, [r7, #12]
 8106e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8106e26:	68f8      	ldr	r0, [r7, #12]
 8106e28:	f000 fbd3 	bl	81075d2 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8106e2c:	68fb      	ldr	r3, [r7, #12]
 8106e2e:	2200      	movs	r2, #0
 8106e30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8106e34:	68fb      	ldr	r3, [r7, #12]
 8106e36:	2201      	movs	r2, #1
 8106e38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8106e3c:	68fb      	ldr	r3, [r7, #12]
 8106e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106e42:	2b00      	cmp	r3, #0
 8106e44:	d001      	beq.n	8106e4a <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 8106e46:	2301      	movs	r3, #1
 8106e48:	e000      	b.n	8106e4c <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 8106e4a:	7efb      	ldrb	r3, [r7, #27]
}
 8106e4c:	4618      	mov	r0, r3
 8106e4e:	3720      	adds	r7, #32
 8106e50:	46bd      	mov	sp, r7
 8106e52:	bd80      	pop	{r7, pc}

08106e54 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106e54:	b580      	push	{r7, lr}
 8106e56:	b08a      	sub	sp, #40	; 0x28
 8106e58:	af02      	add	r7, sp, #8
 8106e5a:	60f8      	str	r0, [r7, #12]
 8106e5c:	60b9      	str	r1, [r7, #8]
 8106e5e:	603b      	str	r3, [r7, #0]
 8106e60:	4613      	mov	r3, r2
 8106e62:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8106e64:	2300      	movs	r3, #0
 8106e66:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8106e68:	68fb      	ldr	r3, [r7, #12]
 8106e6a:	681b      	ldr	r3, [r3, #0]
 8106e6c:	3330      	adds	r3, #48	; 0x30
 8106e6e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8106e70:	68fb      	ldr	r3, [r7, #12]
 8106e72:	685b      	ldr	r3, [r3, #4]
 8106e74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106e78:	d112      	bne.n	8106ea0 <HAL_SPI_Receive+0x4c>
 8106e7a:	68fb      	ldr	r3, [r7, #12]
 8106e7c:	689b      	ldr	r3, [r3, #8]
 8106e7e:	2b00      	cmp	r3, #0
 8106e80:	d10e      	bne.n	8106ea0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8106e82:	68fb      	ldr	r3, [r7, #12]
 8106e84:	2204      	movs	r2, #4
 8106e86:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8106e8a:	88fa      	ldrh	r2, [r7, #6]
 8106e8c:	683b      	ldr	r3, [r7, #0]
 8106e8e:	9300      	str	r3, [sp, #0]
 8106e90:	4613      	mov	r3, r2
 8106e92:	68ba      	ldr	r2, [r7, #8]
 8106e94:	68b9      	ldr	r1, [r7, #8]
 8106e96:	68f8      	ldr	r0, [r7, #12]
 8106e98:	f000 f976 	bl	8107188 <HAL_SPI_TransmitReceive>
 8106e9c:	4603      	mov	r3, r0
 8106e9e:	e16f      	b.n	8107180 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8106ea0:	68fb      	ldr	r3, [r7, #12]
 8106ea2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106ea6:	2b01      	cmp	r3, #1
 8106ea8:	d101      	bne.n	8106eae <HAL_SPI_Receive+0x5a>
 8106eaa:	2302      	movs	r3, #2
 8106eac:	e168      	b.n	8107180 <HAL_SPI_Receive+0x32c>
 8106eae:	68fb      	ldr	r3, [r7, #12]
 8106eb0:	2201      	movs	r2, #1
 8106eb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8106eb6:	f7fa fec7 	bl	8101c48 <HAL_GetTick>
 8106eba:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8106ebc:	68fb      	ldr	r3, [r7, #12]
 8106ebe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106ec2:	b2db      	uxtb	r3, r3
 8106ec4:	2b01      	cmp	r3, #1
 8106ec6:	d007      	beq.n	8106ed8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8106ec8:	2302      	movs	r3, #2
 8106eca:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8106ecc:	68fb      	ldr	r3, [r7, #12]
 8106ece:	2200      	movs	r2, #0
 8106ed0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8106ed4:	7ffb      	ldrb	r3, [r7, #31]
 8106ed6:	e153      	b.n	8107180 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8106ed8:	68bb      	ldr	r3, [r7, #8]
 8106eda:	2b00      	cmp	r3, #0
 8106edc:	d002      	beq.n	8106ee4 <HAL_SPI_Receive+0x90>
 8106ede:	88fb      	ldrh	r3, [r7, #6]
 8106ee0:	2b00      	cmp	r3, #0
 8106ee2:	d107      	bne.n	8106ef4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8106ee4:	2301      	movs	r3, #1
 8106ee6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8106ee8:	68fb      	ldr	r3, [r7, #12]
 8106eea:	2200      	movs	r2, #0
 8106eec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8106ef0:	7ffb      	ldrb	r3, [r7, #31]
 8106ef2:	e145      	b.n	8107180 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8106ef4:	68fb      	ldr	r3, [r7, #12]
 8106ef6:	2204      	movs	r2, #4
 8106ef8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8106efc:	68fb      	ldr	r3, [r7, #12]
 8106efe:	2200      	movs	r2, #0
 8106f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8106f04:	68fb      	ldr	r3, [r7, #12]
 8106f06:	68ba      	ldr	r2, [r7, #8]
 8106f08:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8106f0a:	68fb      	ldr	r3, [r7, #12]
 8106f0c:	88fa      	ldrh	r2, [r7, #6]
 8106f0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8106f12:	68fb      	ldr	r3, [r7, #12]
 8106f14:	88fa      	ldrh	r2, [r7, #6]
 8106f16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8106f1a:	68fb      	ldr	r3, [r7, #12]
 8106f1c:	2200      	movs	r2, #0
 8106f1e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8106f20:	68fb      	ldr	r3, [r7, #12]
 8106f22:	2200      	movs	r2, #0
 8106f24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8106f28:	68fb      	ldr	r3, [r7, #12]
 8106f2a:	2200      	movs	r2, #0
 8106f2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8106f30:	68fb      	ldr	r3, [r7, #12]
 8106f32:	2200      	movs	r2, #0
 8106f34:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8106f36:	68fb      	ldr	r3, [r7, #12]
 8106f38:	2200      	movs	r2, #0
 8106f3a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8106f3c:	68fb      	ldr	r3, [r7, #12]
 8106f3e:	689b      	ldr	r3, [r3, #8]
 8106f40:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8106f44:	d107      	bne.n	8106f56 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8106f46:	68fb      	ldr	r3, [r7, #12]
 8106f48:	681b      	ldr	r3, [r3, #0]
 8106f4a:	681a      	ldr	r2, [r3, #0]
 8106f4c:	68fb      	ldr	r3, [r7, #12]
 8106f4e:	681b      	ldr	r3, [r3, #0]
 8106f50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8106f54:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8106f56:	68fb      	ldr	r3, [r7, #12]
 8106f58:	681b      	ldr	r3, [r3, #0]
 8106f5a:	685b      	ldr	r3, [r3, #4]
 8106f5c:	0c1b      	lsrs	r3, r3, #16
 8106f5e:	041b      	lsls	r3, r3, #16
 8106f60:	88f9      	ldrh	r1, [r7, #6]
 8106f62:	68fa      	ldr	r2, [r7, #12]
 8106f64:	6812      	ldr	r2, [r2, #0]
 8106f66:	430b      	orrs	r3, r1
 8106f68:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8106f6a:	68fb      	ldr	r3, [r7, #12]
 8106f6c:	681b      	ldr	r3, [r3, #0]
 8106f6e:	681a      	ldr	r2, [r3, #0]
 8106f70:	68fb      	ldr	r3, [r7, #12]
 8106f72:	681b      	ldr	r3, [r3, #0]
 8106f74:	f042 0201 	orr.w	r2, r2, #1
 8106f78:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8106f7a:	68fb      	ldr	r3, [r7, #12]
 8106f7c:	685b      	ldr	r3, [r3, #4]
 8106f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106f82:	d107      	bne.n	8106f94 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8106f84:	68fb      	ldr	r3, [r7, #12]
 8106f86:	681b      	ldr	r3, [r3, #0]
 8106f88:	681a      	ldr	r2, [r3, #0]
 8106f8a:	68fb      	ldr	r3, [r7, #12]
 8106f8c:	681b      	ldr	r3, [r3, #0]
 8106f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8106f92:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8106f94:	68fb      	ldr	r3, [r7, #12]
 8106f96:	68db      	ldr	r3, [r3, #12]
 8106f98:	2b0f      	cmp	r3, #15
 8106f9a:	d948      	bls.n	810702e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8106f9c:	e040      	b.n	8107020 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8106f9e:	68fb      	ldr	r3, [r7, #12]
 8106fa0:	681b      	ldr	r3, [r3, #0]
 8106fa2:	695a      	ldr	r2, [r3, #20]
 8106fa4:	f248 0308 	movw	r3, #32776	; 0x8008
 8106fa8:	4013      	ands	r3, r2
 8106faa:	2b00      	cmp	r3, #0
 8106fac:	d014      	beq.n	8106fd8 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106fae:	68fb      	ldr	r3, [r7, #12]
 8106fb0:	681a      	ldr	r2, [r3, #0]
 8106fb2:	68fb      	ldr	r3, [r7, #12]
 8106fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106fb6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8106fb8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8106fba:	68fb      	ldr	r3, [r7, #12]
 8106fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106fbe:	1d1a      	adds	r2, r3, #4
 8106fc0:	68fb      	ldr	r3, [r7, #12]
 8106fc2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8106fc4:	68fb      	ldr	r3, [r7, #12]
 8106fc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8106fca:	b29b      	uxth	r3, r3
 8106fcc:	3b01      	subs	r3, #1
 8106fce:	b29a      	uxth	r2, r3
 8106fd0:	68fb      	ldr	r3, [r7, #12]
 8106fd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8106fd6:	e023      	b.n	8107020 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106fd8:	f7fa fe36 	bl	8101c48 <HAL_GetTick>
 8106fdc:	4602      	mov	r2, r0
 8106fde:	697b      	ldr	r3, [r7, #20]
 8106fe0:	1ad3      	subs	r3, r2, r3
 8106fe2:	683a      	ldr	r2, [r7, #0]
 8106fe4:	429a      	cmp	r2, r3
 8106fe6:	d803      	bhi.n	8106ff0 <HAL_SPI_Receive+0x19c>
 8106fe8:	683b      	ldr	r3, [r7, #0]
 8106fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106fee:	d102      	bne.n	8106ff6 <HAL_SPI_Receive+0x1a2>
 8106ff0:	683b      	ldr	r3, [r7, #0]
 8106ff2:	2b00      	cmp	r3, #0
 8106ff4:	d114      	bne.n	8107020 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8106ff6:	68f8      	ldr	r0, [r7, #12]
 8106ff8:	f000 faeb 	bl	81075d2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8106ffc:	68fb      	ldr	r3, [r7, #12]
 8106ffe:	2200      	movs	r2, #0
 8107000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8107004:	68fb      	ldr	r3, [r7, #12]
 8107006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810700a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810700e:	68fb      	ldr	r3, [r7, #12]
 8107010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8107014:	68fb      	ldr	r3, [r7, #12]
 8107016:	2201      	movs	r2, #1
 8107018:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 810701c:	2303      	movs	r3, #3
 810701e:	e0af      	b.n	8107180 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8107020:	68fb      	ldr	r3, [r7, #12]
 8107022:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8107026:	b29b      	uxth	r3, r3
 8107028:	2b00      	cmp	r3, #0
 810702a:	d1b8      	bne.n	8106f9e <HAL_SPI_Receive+0x14a>
 810702c:	e095      	b.n	810715a <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810702e:	68fb      	ldr	r3, [r7, #12]
 8107030:	68db      	ldr	r3, [r3, #12]
 8107032:	2b07      	cmp	r3, #7
 8107034:	f240 808b 	bls.w	810714e <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8107038:	e03f      	b.n	81070ba <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 810703a:	68fb      	ldr	r3, [r7, #12]
 810703c:	681b      	ldr	r3, [r3, #0]
 810703e:	695b      	ldr	r3, [r3, #20]
 8107040:	f003 0301 	and.w	r3, r3, #1
 8107044:	2b01      	cmp	r3, #1
 8107046:	d114      	bne.n	8107072 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8107048:	68fb      	ldr	r3, [r7, #12]
 810704a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810704c:	69ba      	ldr	r2, [r7, #24]
 810704e:	8812      	ldrh	r2, [r2, #0]
 8107050:	b292      	uxth	r2, r2
 8107052:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8107054:	68fb      	ldr	r3, [r7, #12]
 8107056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107058:	1c9a      	adds	r2, r3, #2
 810705a:	68fb      	ldr	r3, [r7, #12]
 810705c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 810705e:	68fb      	ldr	r3, [r7, #12]
 8107060:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8107064:	b29b      	uxth	r3, r3
 8107066:	3b01      	subs	r3, #1
 8107068:	b29a      	uxth	r2, r3
 810706a:	68fb      	ldr	r3, [r7, #12]
 810706c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8107070:	e023      	b.n	81070ba <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107072:	f7fa fde9 	bl	8101c48 <HAL_GetTick>
 8107076:	4602      	mov	r2, r0
 8107078:	697b      	ldr	r3, [r7, #20]
 810707a:	1ad3      	subs	r3, r2, r3
 810707c:	683a      	ldr	r2, [r7, #0]
 810707e:	429a      	cmp	r2, r3
 8107080:	d803      	bhi.n	810708a <HAL_SPI_Receive+0x236>
 8107082:	683b      	ldr	r3, [r7, #0]
 8107084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107088:	d102      	bne.n	8107090 <HAL_SPI_Receive+0x23c>
 810708a:	683b      	ldr	r3, [r7, #0]
 810708c:	2b00      	cmp	r3, #0
 810708e:	d114      	bne.n	81070ba <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8107090:	68f8      	ldr	r0, [r7, #12]
 8107092:	f000 fa9e 	bl	81075d2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8107096:	68fb      	ldr	r3, [r7, #12]
 8107098:	2200      	movs	r2, #0
 810709a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810709e:	68fb      	ldr	r3, [r7, #12]
 81070a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81070a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81070a8:	68fb      	ldr	r3, [r7, #12]
 81070aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81070ae:	68fb      	ldr	r3, [r7, #12]
 81070b0:	2201      	movs	r2, #1
 81070b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81070b6:	2303      	movs	r3, #3
 81070b8:	e062      	b.n	8107180 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 81070ba:	68fb      	ldr	r3, [r7, #12]
 81070bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81070c0:	b29b      	uxth	r3, r3
 81070c2:	2b00      	cmp	r3, #0
 81070c4:	d1b9      	bne.n	810703a <HAL_SPI_Receive+0x1e6>
 81070c6:	e048      	b.n	810715a <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 81070c8:	68fb      	ldr	r3, [r7, #12]
 81070ca:	681b      	ldr	r3, [r3, #0]
 81070cc:	695b      	ldr	r3, [r3, #20]
 81070ce:	f003 0301 	and.w	r3, r3, #1
 81070d2:	2b01      	cmp	r3, #1
 81070d4:	d117      	bne.n	8107106 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81070d6:	68fb      	ldr	r3, [r7, #12]
 81070d8:	681b      	ldr	r3, [r3, #0]
 81070da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 81070de:	68fb      	ldr	r3, [r7, #12]
 81070e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81070e2:	7812      	ldrb	r2, [r2, #0]
 81070e4:	b2d2      	uxtb	r2, r2
 81070e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 81070e8:	68fb      	ldr	r3, [r7, #12]
 81070ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81070ec:	1c5a      	adds	r2, r3, #1
 81070ee:	68fb      	ldr	r3, [r7, #12]
 81070f0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 81070f2:	68fb      	ldr	r3, [r7, #12]
 81070f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81070f8:	b29b      	uxth	r3, r3
 81070fa:	3b01      	subs	r3, #1
 81070fc:	b29a      	uxth	r2, r3
 81070fe:	68fb      	ldr	r3, [r7, #12]
 8107100:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8107104:	e023      	b.n	810714e <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107106:	f7fa fd9f 	bl	8101c48 <HAL_GetTick>
 810710a:	4602      	mov	r2, r0
 810710c:	697b      	ldr	r3, [r7, #20]
 810710e:	1ad3      	subs	r3, r2, r3
 8107110:	683a      	ldr	r2, [r7, #0]
 8107112:	429a      	cmp	r2, r3
 8107114:	d803      	bhi.n	810711e <HAL_SPI_Receive+0x2ca>
 8107116:	683b      	ldr	r3, [r7, #0]
 8107118:	f1b3 3fff 	cmp.w	r3, #4294967295
 810711c:	d102      	bne.n	8107124 <HAL_SPI_Receive+0x2d0>
 810711e:	683b      	ldr	r3, [r7, #0]
 8107120:	2b00      	cmp	r3, #0
 8107122:	d114      	bne.n	810714e <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8107124:	68f8      	ldr	r0, [r7, #12]
 8107126:	f000 fa54 	bl	81075d2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 810712a:	68fb      	ldr	r3, [r7, #12]
 810712c:	2200      	movs	r2, #0
 810712e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8107132:	68fb      	ldr	r3, [r7, #12]
 8107134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107138:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810713c:	68fb      	ldr	r3, [r7, #12]
 810713e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8107142:	68fb      	ldr	r3, [r7, #12]
 8107144:	2201      	movs	r2, #1
 8107146:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 810714a:	2303      	movs	r3, #3
 810714c:	e018      	b.n	8107180 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 810714e:	68fb      	ldr	r3, [r7, #12]
 8107150:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8107154:	b29b      	uxth	r3, r3
 8107156:	2b00      	cmp	r3, #0
 8107158:	d1b6      	bne.n	81070c8 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 810715a:	68f8      	ldr	r0, [r7, #12]
 810715c:	f000 fa39 	bl	81075d2 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8107160:	68fb      	ldr	r3, [r7, #12]
 8107162:	2200      	movs	r2, #0
 8107164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8107168:	68fb      	ldr	r3, [r7, #12]
 810716a:	2201      	movs	r2, #1
 810716c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8107170:	68fb      	ldr	r3, [r7, #12]
 8107172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107176:	2b00      	cmp	r3, #0
 8107178:	d001      	beq.n	810717e <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 810717a:	2301      	movs	r3, #1
 810717c:	e000      	b.n	8107180 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 810717e:	7ffb      	ldrb	r3, [r7, #31]
}
 8107180:	4618      	mov	r0, r3
 8107182:	3720      	adds	r7, #32
 8107184:	46bd      	mov	sp, r7
 8107186:	bd80      	pop	{r7, pc}

08107188 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8107188:	b580      	push	{r7, lr}
 810718a:	b08e      	sub	sp, #56	; 0x38
 810718c:	af02      	add	r7, sp, #8
 810718e:	60f8      	str	r0, [r7, #12]
 8107190:	60b9      	str	r1, [r7, #8]
 8107192:	607a      	str	r2, [r7, #4]
 8107194:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8107196:	2300      	movs	r3, #0
 8107198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 810719c:	68fb      	ldr	r3, [r7, #12]
 810719e:	681b      	ldr	r3, [r3, #0]
 81071a0:	3320      	adds	r3, #32
 81071a2:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 81071a4:	68fb      	ldr	r3, [r7, #12]
 81071a6:	681b      	ldr	r3, [r3, #0]
 81071a8:	3330      	adds	r3, #48	; 0x30
 81071aa:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 81071ac:	68fb      	ldr	r3, [r7, #12]
 81071ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81071b2:	2b01      	cmp	r3, #1
 81071b4:	d101      	bne.n	81071ba <HAL_SPI_TransmitReceive+0x32>
 81071b6:	2302      	movs	r3, #2
 81071b8:	e207      	b.n	81075ca <HAL_SPI_TransmitReceive+0x442>
 81071ba:	68fb      	ldr	r3, [r7, #12]
 81071bc:	2201      	movs	r2, #1
 81071be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 81071c2:	f7fa fd41 	bl	8101c48 <HAL_GetTick>
 81071c6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 81071c8:	887b      	ldrh	r3, [r7, #2]
 81071ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 81071cc:	887b      	ldrh	r3, [r7, #2]
 81071ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 81071d0:	68fb      	ldr	r3, [r7, #12]
 81071d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81071d6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 81071d8:	68fb      	ldr	r3, [r7, #12]
 81071da:	685b      	ldr	r3, [r3, #4]
 81071dc:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 81071de:	7efb      	ldrb	r3, [r7, #27]
 81071e0:	2b01      	cmp	r3, #1
 81071e2:	d014      	beq.n	810720e <HAL_SPI_TransmitReceive+0x86>
 81071e4:	697b      	ldr	r3, [r7, #20]
 81071e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81071ea:	d106      	bne.n	81071fa <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 81071ec:	68fb      	ldr	r3, [r7, #12]
 81071ee:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 81071f0:	2b00      	cmp	r3, #0
 81071f2:	d102      	bne.n	81071fa <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 81071f4:	7efb      	ldrb	r3, [r7, #27]
 81071f6:	2b04      	cmp	r3, #4
 81071f8:	d009      	beq.n	810720e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 81071fa:	2302      	movs	r3, #2
 81071fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8107200:	68fb      	ldr	r3, [r7, #12]
 8107202:	2200      	movs	r2, #0
 8107204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8107208:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810720c:	e1dd      	b.n	81075ca <HAL_SPI_TransmitReceive+0x442>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 810720e:	68bb      	ldr	r3, [r7, #8]
 8107210:	2b00      	cmp	r3, #0
 8107212:	d005      	beq.n	8107220 <HAL_SPI_TransmitReceive+0x98>
 8107214:	687b      	ldr	r3, [r7, #4]
 8107216:	2b00      	cmp	r3, #0
 8107218:	d002      	beq.n	8107220 <HAL_SPI_TransmitReceive+0x98>
 810721a:	887b      	ldrh	r3, [r7, #2]
 810721c:	2b00      	cmp	r3, #0
 810721e:	d109      	bne.n	8107234 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8107220:	2301      	movs	r3, #1
 8107222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8107226:	68fb      	ldr	r3, [r7, #12]
 8107228:	2200      	movs	r2, #0
 810722a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810722e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8107232:	e1ca      	b.n	81075ca <HAL_SPI_TransmitReceive+0x442>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8107234:	68fb      	ldr	r3, [r7, #12]
 8107236:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810723a:	b2db      	uxtb	r3, r3
 810723c:	2b04      	cmp	r3, #4
 810723e:	d003      	beq.n	8107248 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8107240:	68fb      	ldr	r3, [r7, #12]
 8107242:	2205      	movs	r2, #5
 8107244:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8107248:	68fb      	ldr	r3, [r7, #12]
 810724a:	2200      	movs	r2, #0
 810724c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8107250:	68fb      	ldr	r3, [r7, #12]
 8107252:	687a      	ldr	r2, [r7, #4]
 8107254:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8107256:	68fb      	ldr	r3, [r7, #12]
 8107258:	887a      	ldrh	r2, [r7, #2]
 810725a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 810725e:	68fb      	ldr	r3, [r7, #12]
 8107260:	887a      	ldrh	r2, [r7, #2]
 8107262:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8107266:	68fb      	ldr	r3, [r7, #12]
 8107268:	68ba      	ldr	r2, [r7, #8]
 810726a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 810726c:	68fb      	ldr	r3, [r7, #12]
 810726e:	887a      	ldrh	r2, [r7, #2]
 8107270:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8107274:	68fb      	ldr	r3, [r7, #12]
 8107276:	887a      	ldrh	r2, [r7, #2]
 8107278:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 810727c:	68fb      	ldr	r3, [r7, #12]
 810727e:	2200      	movs	r2, #0
 8107280:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8107282:	68fb      	ldr	r3, [r7, #12]
 8107284:	2200      	movs	r2, #0
 8107286:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8107288:	68fb      	ldr	r3, [r7, #12]
 810728a:	681b      	ldr	r3, [r3, #0]
 810728c:	685b      	ldr	r3, [r3, #4]
 810728e:	0c1b      	lsrs	r3, r3, #16
 8107290:	041b      	lsls	r3, r3, #16
 8107292:	8879      	ldrh	r1, [r7, #2]
 8107294:	68fa      	ldr	r2, [r7, #12]
 8107296:	6812      	ldr	r2, [r2, #0]
 8107298:	430b      	orrs	r3, r1
 810729a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 810729c:	68fb      	ldr	r3, [r7, #12]
 810729e:	681b      	ldr	r3, [r3, #0]
 81072a0:	681a      	ldr	r2, [r3, #0]
 81072a2:	68fb      	ldr	r3, [r7, #12]
 81072a4:	681b      	ldr	r3, [r3, #0]
 81072a6:	f042 0201 	orr.w	r2, r2, #1
 81072aa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 81072ac:	68fb      	ldr	r3, [r7, #12]
 81072ae:	685b      	ldr	r3, [r3, #4]
 81072b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81072b4:	d107      	bne.n	81072c6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 81072b6:	68fb      	ldr	r3, [r7, #12]
 81072b8:	681b      	ldr	r3, [r3, #0]
 81072ba:	681a      	ldr	r2, [r3, #0]
 81072bc:	68fb      	ldr	r3, [r7, #12]
 81072be:	681b      	ldr	r3, [r3, #0]
 81072c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81072c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 81072c6:	68fb      	ldr	r3, [r7, #12]
 81072c8:	68db      	ldr	r3, [r3, #12]
 81072ca:	2b0f      	cmp	r3, #15
 81072cc:	d970      	bls.n	81073b0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81072ce:	e068      	b.n	81073a2 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 81072d0:	68fb      	ldr	r3, [r7, #12]
 81072d2:	681b      	ldr	r3, [r3, #0]
 81072d4:	695b      	ldr	r3, [r3, #20]
 81072d6:	f003 0302 	and.w	r3, r3, #2
 81072da:	2b02      	cmp	r3, #2
 81072dc:	d11a      	bne.n	8107314 <HAL_SPI_TransmitReceive+0x18c>
 81072de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81072e0:	2b00      	cmp	r3, #0
 81072e2:	d017      	beq.n	8107314 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81072e4:	68fb      	ldr	r3, [r7, #12]
 81072e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81072e8:	68fb      	ldr	r3, [r7, #12]
 81072ea:	681b      	ldr	r3, [r3, #0]
 81072ec:	6812      	ldr	r2, [r2, #0]
 81072ee:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 81072f0:	68fb      	ldr	r3, [r7, #12]
 81072f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81072f4:	1d1a      	adds	r2, r3, #4
 81072f6:	68fb      	ldr	r3, [r7, #12]
 81072f8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 81072fa:	68fb      	ldr	r3, [r7, #12]
 81072fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8107300:	b29b      	uxth	r3, r3
 8107302:	3b01      	subs	r3, #1
 8107304:	b29a      	uxth	r2, r3
 8107306:	68fb      	ldr	r3, [r7, #12]
 8107308:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 810730c:	68fb      	ldr	r3, [r7, #12]
 810730e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8107312:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8107314:	68fb      	ldr	r3, [r7, #12]
 8107316:	681b      	ldr	r3, [r3, #0]
 8107318:	695a      	ldr	r2, [r3, #20]
 810731a:	f248 0308 	movw	r3, #32776	; 0x8008
 810731e:	4013      	ands	r3, r2
 8107320:	2b00      	cmp	r3, #0
 8107322:	d01a      	beq.n	810735a <HAL_SPI_TransmitReceive+0x1d2>
 8107324:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8107326:	2b00      	cmp	r3, #0
 8107328:	d017      	beq.n	810735a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810732a:	68fb      	ldr	r3, [r7, #12]
 810732c:	681a      	ldr	r2, [r3, #0]
 810732e:	68fb      	ldr	r3, [r7, #12]
 8107330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107332:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8107334:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8107336:	68fb      	ldr	r3, [r7, #12]
 8107338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810733a:	1d1a      	adds	r2, r3, #4
 810733c:	68fb      	ldr	r3, [r7, #12]
 810733e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8107340:	68fb      	ldr	r3, [r7, #12]
 8107342:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8107346:	b29b      	uxth	r3, r3
 8107348:	3b01      	subs	r3, #1
 810734a:	b29a      	uxth	r2, r3
 810734c:	68fb      	ldr	r3, [r7, #12]
 810734e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8107352:	68fb      	ldr	r3, [r7, #12]
 8107354:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8107358:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810735a:	f7fa fc75 	bl	8101c48 <HAL_GetTick>
 810735e:	4602      	mov	r2, r0
 8107360:	69fb      	ldr	r3, [r7, #28]
 8107362:	1ad3      	subs	r3, r2, r3
 8107364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8107366:	429a      	cmp	r2, r3
 8107368:	d803      	bhi.n	8107372 <HAL_SPI_TransmitReceive+0x1ea>
 810736a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810736c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107370:	d102      	bne.n	8107378 <HAL_SPI_TransmitReceive+0x1f0>
 8107372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107374:	2b00      	cmp	r3, #0
 8107376:	d114      	bne.n	81073a2 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8107378:	68f8      	ldr	r0, [r7, #12]
 810737a:	f000 f92a 	bl	81075d2 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 810737e:	68fb      	ldr	r3, [r7, #12]
 8107380:	2200      	movs	r2, #0
 8107382:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8107386:	68fb      	ldr	r3, [r7, #12]
 8107388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810738c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8107390:	68fb      	ldr	r3, [r7, #12]
 8107392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8107396:	68fb      	ldr	r3, [r7, #12]
 8107398:	2201      	movs	r2, #1
 810739a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 810739e:	2303      	movs	r3, #3
 81073a0:	e113      	b.n	81075ca <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81073a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81073a4:	2b00      	cmp	r3, #0
 81073a6:	d193      	bne.n	81072d0 <HAL_SPI_TransmitReceive+0x148>
 81073a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81073aa:	2b00      	cmp	r3, #0
 81073ac:	d190      	bne.n	81072d0 <HAL_SPI_TransmitReceive+0x148>
 81073ae:	e0e5      	b.n	810757c <HAL_SPI_TransmitReceive+0x3f4>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 81073b0:	68fb      	ldr	r3, [r7, #12]
 81073b2:	68db      	ldr	r3, [r3, #12]
 81073b4:	2b07      	cmp	r3, #7
 81073b6:	f240 80db 	bls.w	8107570 <HAL_SPI_TransmitReceive+0x3e8>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81073ba:	e066      	b.n	810748a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 81073bc:	68fb      	ldr	r3, [r7, #12]
 81073be:	681b      	ldr	r3, [r3, #0]
 81073c0:	695b      	ldr	r3, [r3, #20]
 81073c2:	f003 0302 	and.w	r3, r3, #2
 81073c6:	2b02      	cmp	r3, #2
 81073c8:	d119      	bne.n	81073fe <HAL_SPI_TransmitReceive+0x276>
 81073ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81073cc:	2b00      	cmp	r3, #0
 81073ce:	d016      	beq.n	81073fe <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 81073d0:	68fb      	ldr	r3, [r7, #12]
 81073d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81073d4:	881a      	ldrh	r2, [r3, #0]
 81073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81073d8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 81073da:	68fb      	ldr	r3, [r7, #12]
 81073dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81073de:	1c9a      	adds	r2, r3, #2
 81073e0:	68fb      	ldr	r3, [r7, #12]
 81073e2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 81073e4:	68fb      	ldr	r3, [r7, #12]
 81073e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81073ea:	b29b      	uxth	r3, r3
 81073ec:	3b01      	subs	r3, #1
 81073ee:	b29a      	uxth	r2, r3
 81073f0:	68fb      	ldr	r3, [r7, #12]
 81073f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 81073f6:	68fb      	ldr	r3, [r7, #12]
 81073f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81073fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 81073fe:	68fb      	ldr	r3, [r7, #12]
 8107400:	681b      	ldr	r3, [r3, #0]
 8107402:	695b      	ldr	r3, [r3, #20]
 8107404:	f003 0301 	and.w	r3, r3, #1
 8107408:	2b01      	cmp	r3, #1
 810740a:	d11a      	bne.n	8107442 <HAL_SPI_TransmitReceive+0x2ba>
 810740c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810740e:	2b00      	cmp	r3, #0
 8107410:	d017      	beq.n	8107442 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8107412:	68fb      	ldr	r3, [r7, #12]
 8107414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107416:	6a3a      	ldr	r2, [r7, #32]
 8107418:	8812      	ldrh	r2, [r2, #0]
 810741a:	b292      	uxth	r2, r2
 810741c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 810741e:	68fb      	ldr	r3, [r7, #12]
 8107420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107422:	1c9a      	adds	r2, r3, #2
 8107424:	68fb      	ldr	r3, [r7, #12]
 8107426:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8107428:	68fb      	ldr	r3, [r7, #12]
 810742a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810742e:	b29b      	uxth	r3, r3
 8107430:	3b01      	subs	r3, #1
 8107432:	b29a      	uxth	r2, r3
 8107434:	68fb      	ldr	r3, [r7, #12]
 8107436:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 810743a:	68fb      	ldr	r3, [r7, #12]
 810743c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8107440:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107442:	f7fa fc01 	bl	8101c48 <HAL_GetTick>
 8107446:	4602      	mov	r2, r0
 8107448:	69fb      	ldr	r3, [r7, #28]
 810744a:	1ad3      	subs	r3, r2, r3
 810744c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810744e:	429a      	cmp	r2, r3
 8107450:	d803      	bhi.n	810745a <HAL_SPI_TransmitReceive+0x2d2>
 8107452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107458:	d102      	bne.n	8107460 <HAL_SPI_TransmitReceive+0x2d8>
 810745a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810745c:	2b00      	cmp	r3, #0
 810745e:	d114      	bne.n	810748a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8107460:	68f8      	ldr	r0, [r7, #12]
 8107462:	f000 f8b6 	bl	81075d2 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8107466:	68fb      	ldr	r3, [r7, #12]
 8107468:	2200      	movs	r2, #0
 810746a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810746e:	68fb      	ldr	r3, [r7, #12]
 8107470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107474:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8107478:	68fb      	ldr	r3, [r7, #12]
 810747a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 810747e:	68fb      	ldr	r3, [r7, #12]
 8107480:	2201      	movs	r2, #1
 8107482:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8107486:	2303      	movs	r3, #3
 8107488:	e09f      	b.n	81075ca <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810748a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810748c:	2b00      	cmp	r3, #0
 810748e:	d195      	bne.n	81073bc <HAL_SPI_TransmitReceive+0x234>
 8107490:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8107492:	2b00      	cmp	r3, #0
 8107494:	d192      	bne.n	81073bc <HAL_SPI_TransmitReceive+0x234>
 8107496:	e071      	b.n	810757c <HAL_SPI_TransmitReceive+0x3f4>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8107498:	68fb      	ldr	r3, [r7, #12]
 810749a:	681b      	ldr	r3, [r3, #0]
 810749c:	695b      	ldr	r3, [r3, #20]
 810749e:	f003 0302 	and.w	r3, r3, #2
 81074a2:	2b02      	cmp	r3, #2
 81074a4:	d11b      	bne.n	81074de <HAL_SPI_TransmitReceive+0x356>
 81074a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81074a8:	2b00      	cmp	r3, #0
 81074aa:	d018      	beq.n	81074de <HAL_SPI_TransmitReceive+0x356>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 81074ac:	68fb      	ldr	r3, [r7, #12]
 81074ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81074b0:	68fb      	ldr	r3, [r7, #12]
 81074b2:	681b      	ldr	r3, [r3, #0]
 81074b4:	3320      	adds	r3, #32
 81074b6:	7812      	ldrb	r2, [r2, #0]
 81074b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 81074ba:	68fb      	ldr	r3, [r7, #12]
 81074bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81074be:	1c5a      	adds	r2, r3, #1
 81074c0:	68fb      	ldr	r3, [r7, #12]
 81074c2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 81074c4:	68fb      	ldr	r3, [r7, #12]
 81074c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81074ca:	b29b      	uxth	r3, r3
 81074cc:	3b01      	subs	r3, #1
 81074ce:	b29a      	uxth	r2, r3
 81074d0:	68fb      	ldr	r3, [r7, #12]
 81074d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 81074d6:	68fb      	ldr	r3, [r7, #12]
 81074d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81074dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 81074de:	68fb      	ldr	r3, [r7, #12]
 81074e0:	681b      	ldr	r3, [r3, #0]
 81074e2:	695b      	ldr	r3, [r3, #20]
 81074e4:	f003 0301 	and.w	r3, r3, #1
 81074e8:	2b01      	cmp	r3, #1
 81074ea:	d11d      	bne.n	8107528 <HAL_SPI_TransmitReceive+0x3a0>
 81074ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81074ee:	2b00      	cmp	r3, #0
 81074f0:	d01a      	beq.n	8107528 <HAL_SPI_TransmitReceive+0x3a0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81074f2:	68fb      	ldr	r3, [r7, #12]
 81074f4:	681b      	ldr	r3, [r3, #0]
 81074f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 81074fa:	68fb      	ldr	r3, [r7, #12]
 81074fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81074fe:	7812      	ldrb	r2, [r2, #0]
 8107500:	b2d2      	uxtb	r2, r2
 8107502:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8107504:	68fb      	ldr	r3, [r7, #12]
 8107506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107508:	1c5a      	adds	r2, r3, #1
 810750a:	68fb      	ldr	r3, [r7, #12]
 810750c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 810750e:	68fb      	ldr	r3, [r7, #12]
 8107510:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8107514:	b29b      	uxth	r3, r3
 8107516:	3b01      	subs	r3, #1
 8107518:	b29a      	uxth	r2, r3
 810751a:	68fb      	ldr	r3, [r7, #12]
 810751c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8107520:	68fb      	ldr	r3, [r7, #12]
 8107522:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8107526:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107528:	f7fa fb8e 	bl	8101c48 <HAL_GetTick>
 810752c:	4602      	mov	r2, r0
 810752e:	69fb      	ldr	r3, [r7, #28]
 8107530:	1ad3      	subs	r3, r2, r3
 8107532:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8107534:	429a      	cmp	r2, r3
 8107536:	d803      	bhi.n	8107540 <HAL_SPI_TransmitReceive+0x3b8>
 8107538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810753a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810753e:	d102      	bne.n	8107546 <HAL_SPI_TransmitReceive+0x3be>
 8107540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107542:	2b00      	cmp	r3, #0
 8107544:	d114      	bne.n	8107570 <HAL_SPI_TransmitReceive+0x3e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8107546:	68f8      	ldr	r0, [r7, #12]
 8107548:	f000 f843 	bl	81075d2 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 810754c:	68fb      	ldr	r3, [r7, #12]
 810754e:	2200      	movs	r2, #0
 8107550:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8107554:	68fb      	ldr	r3, [r7, #12]
 8107556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810755a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810755e:	68fb      	ldr	r3, [r7, #12]
 8107560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8107564:	68fb      	ldr	r3, [r7, #12]
 8107566:	2201      	movs	r2, #1
 8107568:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 810756c:	2303      	movs	r3, #3
 810756e:	e02c      	b.n	81075ca <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8107570:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8107572:	2b00      	cmp	r3, #0
 8107574:	d190      	bne.n	8107498 <HAL_SPI_TransmitReceive+0x310>
 8107576:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8107578:	2b00      	cmp	r3, #0
 810757a:	d18d      	bne.n	8107498 <HAL_SPI_TransmitReceive+0x310>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 810757c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810757e:	9300      	str	r3, [sp, #0]
 8107580:	69fb      	ldr	r3, [r7, #28]
 8107582:	2200      	movs	r2, #0
 8107584:	2108      	movs	r1, #8
 8107586:	68f8      	ldr	r0, [r7, #12]
 8107588:	f000 f8c3 	bl	8107712 <SPI_WaitOnFlagUntilTimeout>
 810758c:	4603      	mov	r3, r0
 810758e:	2b00      	cmp	r3, #0
 8107590:	d007      	beq.n	81075a2 <HAL_SPI_TransmitReceive+0x41a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8107592:	68fb      	ldr	r3, [r7, #12]
 8107594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107598:	f043 0220 	orr.w	r2, r3, #32
 810759c:	68fb      	ldr	r3, [r7, #12]
 810759e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 81075a2:	68f8      	ldr	r0, [r7, #12]
 81075a4:	f000 f815 	bl	81075d2 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 81075a8:	68fb      	ldr	r3, [r7, #12]
 81075aa:	2200      	movs	r2, #0
 81075ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 81075b0:	68fb      	ldr	r3, [r7, #12]
 81075b2:	2201      	movs	r2, #1
 81075b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81075b8:	68fb      	ldr	r3, [r7, #12]
 81075ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81075be:	2b00      	cmp	r3, #0
 81075c0:	d001      	beq.n	81075c6 <HAL_SPI_TransmitReceive+0x43e>
  {
    return HAL_ERROR;
 81075c2:	2301      	movs	r3, #1
 81075c4:	e001      	b.n	81075ca <HAL_SPI_TransmitReceive+0x442>
  }
  return errorcode;
 81075c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 81075ca:	4618      	mov	r0, r3
 81075cc:	3730      	adds	r7, #48	; 0x30
 81075ce:	46bd      	mov	sp, r7
 81075d0:	bd80      	pop	{r7, pc}

081075d2 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 81075d2:	b480      	push	{r7}
 81075d4:	b085      	sub	sp, #20
 81075d6:	af00      	add	r7, sp, #0
 81075d8:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 81075da:	687b      	ldr	r3, [r7, #4]
 81075dc:	681b      	ldr	r3, [r3, #0]
 81075de:	695b      	ldr	r3, [r3, #20]
 81075e0:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 81075e2:	687b      	ldr	r3, [r7, #4]
 81075e4:	681b      	ldr	r3, [r3, #0]
 81075e6:	699a      	ldr	r2, [r3, #24]
 81075e8:	687b      	ldr	r3, [r7, #4]
 81075ea:	681b      	ldr	r3, [r3, #0]
 81075ec:	f042 0208 	orr.w	r2, r2, #8
 81075f0:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 81075f2:	687b      	ldr	r3, [r7, #4]
 81075f4:	681b      	ldr	r3, [r3, #0]
 81075f6:	699a      	ldr	r2, [r3, #24]
 81075f8:	687b      	ldr	r3, [r7, #4]
 81075fa:	681b      	ldr	r3, [r3, #0]
 81075fc:	f042 0210 	orr.w	r2, r2, #16
 8107600:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8107602:	687b      	ldr	r3, [r7, #4]
 8107604:	681b      	ldr	r3, [r3, #0]
 8107606:	681a      	ldr	r2, [r3, #0]
 8107608:	687b      	ldr	r3, [r7, #4]
 810760a:	681b      	ldr	r3, [r3, #0]
 810760c:	f022 0201 	bic.w	r2, r2, #1
 8107610:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8107612:	687b      	ldr	r3, [r7, #4]
 8107614:	681b      	ldr	r3, [r3, #0]
 8107616:	691b      	ldr	r3, [r3, #16]
 8107618:	687a      	ldr	r2, [r7, #4]
 810761a:	6812      	ldr	r2, [r2, #0]
 810761c:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8107620:	f023 0303 	bic.w	r3, r3, #3
 8107624:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8107626:	687b      	ldr	r3, [r7, #4]
 8107628:	681b      	ldr	r3, [r3, #0]
 810762a:	689a      	ldr	r2, [r3, #8]
 810762c:	687b      	ldr	r3, [r7, #4]
 810762e:	681b      	ldr	r3, [r3, #0]
 8107630:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8107634:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8107636:	687b      	ldr	r3, [r7, #4]
 8107638:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810763c:	b2db      	uxtb	r3, r3
 810763e:	2b04      	cmp	r3, #4
 8107640:	d014      	beq.n	810766c <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8107642:	68fb      	ldr	r3, [r7, #12]
 8107644:	f003 0320 	and.w	r3, r3, #32
 8107648:	2b00      	cmp	r3, #0
 810764a:	d00f      	beq.n	810766c <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810764c:	687b      	ldr	r3, [r7, #4]
 810764e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107652:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8107656:	687b      	ldr	r3, [r7, #4]
 8107658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810765c:	687b      	ldr	r3, [r7, #4]
 810765e:	681b      	ldr	r3, [r3, #0]
 8107660:	699a      	ldr	r2, [r3, #24]
 8107662:	687b      	ldr	r3, [r7, #4]
 8107664:	681b      	ldr	r3, [r3, #0]
 8107666:	f042 0220 	orr.w	r2, r2, #32
 810766a:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 810766c:	687b      	ldr	r3, [r7, #4]
 810766e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8107672:	b2db      	uxtb	r3, r3
 8107674:	2b03      	cmp	r3, #3
 8107676:	d014      	beq.n	81076a2 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8107678:	68fb      	ldr	r3, [r7, #12]
 810767a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810767e:	2b00      	cmp	r3, #0
 8107680:	d00f      	beq.n	81076a2 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8107682:	687b      	ldr	r3, [r7, #4]
 8107684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107688:	f043 0204 	orr.w	r2, r3, #4
 810768c:	687b      	ldr	r3, [r7, #4]
 810768e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8107692:	687b      	ldr	r3, [r7, #4]
 8107694:	681b      	ldr	r3, [r3, #0]
 8107696:	699a      	ldr	r2, [r3, #24]
 8107698:	687b      	ldr	r3, [r7, #4]
 810769a:	681b      	ldr	r3, [r3, #0]
 810769c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81076a0:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 81076a2:	68fb      	ldr	r3, [r7, #12]
 81076a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81076a8:	2b00      	cmp	r3, #0
 81076aa:	d00f      	beq.n	81076cc <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 81076ac:	687b      	ldr	r3, [r7, #4]
 81076ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81076b2:	f043 0201 	orr.w	r2, r3, #1
 81076b6:	687b      	ldr	r3, [r7, #4]
 81076b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 81076bc:	687b      	ldr	r3, [r7, #4]
 81076be:	681b      	ldr	r3, [r3, #0]
 81076c0:	699a      	ldr	r2, [r3, #24]
 81076c2:	687b      	ldr	r3, [r7, #4]
 81076c4:	681b      	ldr	r3, [r3, #0]
 81076c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81076ca:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 81076cc:	68fb      	ldr	r3, [r7, #12]
 81076ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81076d2:	2b00      	cmp	r3, #0
 81076d4:	d00f      	beq.n	81076f6 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 81076d6:	687b      	ldr	r3, [r7, #4]
 81076d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81076dc:	f043 0208 	orr.w	r2, r3, #8
 81076e0:	687b      	ldr	r3, [r7, #4]
 81076e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 81076e6:	687b      	ldr	r3, [r7, #4]
 81076e8:	681b      	ldr	r3, [r3, #0]
 81076ea:	699a      	ldr	r2, [r3, #24]
 81076ec:	687b      	ldr	r3, [r7, #4]
 81076ee:	681b      	ldr	r3, [r3, #0]
 81076f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81076f4:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 81076f6:	687b      	ldr	r3, [r7, #4]
 81076f8:	2200      	movs	r2, #0
 81076fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 81076fe:	687b      	ldr	r3, [r7, #4]
 8107700:	2200      	movs	r2, #0
 8107702:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8107706:	bf00      	nop
 8107708:	3714      	adds	r7, #20
 810770a:	46bd      	mov	sp, r7
 810770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107710:	4770      	bx	lr

08107712 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8107712:	b580      	push	{r7, lr}
 8107714:	b084      	sub	sp, #16
 8107716:	af00      	add	r7, sp, #0
 8107718:	60f8      	str	r0, [r7, #12]
 810771a:	60b9      	str	r1, [r7, #8]
 810771c:	603b      	str	r3, [r7, #0]
 810771e:	4613      	mov	r3, r2
 8107720:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8107722:	e010      	b.n	8107746 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107724:	f7fa fa90 	bl	8101c48 <HAL_GetTick>
 8107728:	4602      	mov	r2, r0
 810772a:	683b      	ldr	r3, [r7, #0]
 810772c:	1ad3      	subs	r3, r2, r3
 810772e:	69ba      	ldr	r2, [r7, #24]
 8107730:	429a      	cmp	r2, r3
 8107732:	d803      	bhi.n	810773c <SPI_WaitOnFlagUntilTimeout+0x2a>
 8107734:	69bb      	ldr	r3, [r7, #24]
 8107736:	f1b3 3fff 	cmp.w	r3, #4294967295
 810773a:	d102      	bne.n	8107742 <SPI_WaitOnFlagUntilTimeout+0x30>
 810773c:	69bb      	ldr	r3, [r7, #24]
 810773e:	2b00      	cmp	r3, #0
 8107740:	d101      	bne.n	8107746 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8107742:	2303      	movs	r3, #3
 8107744:	e00f      	b.n	8107766 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8107746:	68fb      	ldr	r3, [r7, #12]
 8107748:	681b      	ldr	r3, [r3, #0]
 810774a:	695a      	ldr	r2, [r3, #20]
 810774c:	68bb      	ldr	r3, [r7, #8]
 810774e:	4013      	ands	r3, r2
 8107750:	68ba      	ldr	r2, [r7, #8]
 8107752:	429a      	cmp	r2, r3
 8107754:	bf0c      	ite	eq
 8107756:	2301      	moveq	r3, #1
 8107758:	2300      	movne	r3, #0
 810775a:	b2db      	uxtb	r3, r3
 810775c:	461a      	mov	r2, r3
 810775e:	79fb      	ldrb	r3, [r7, #7]
 8107760:	429a      	cmp	r2, r3
 8107762:	d0df      	beq.n	8107724 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8107764:	2300      	movs	r3, #0
}
 8107766:	4618      	mov	r0, r3
 8107768:	3710      	adds	r7, #16
 810776a:	46bd      	mov	sp, r7
 810776c:	bd80      	pop	{r7, pc}

0810776e <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810776e:	b480      	push	{r7}
 8107770:	b085      	sub	sp, #20
 8107772:	af00      	add	r7, sp, #0
 8107774:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8107776:	687b      	ldr	r3, [r7, #4]
 8107778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810777a:	095b      	lsrs	r3, r3, #5
 810777c:	3301      	adds	r3, #1
 810777e:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8107780:	687b      	ldr	r3, [r7, #4]
 8107782:	68db      	ldr	r3, [r3, #12]
 8107784:	3301      	adds	r3, #1
 8107786:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8107788:	68bb      	ldr	r3, [r7, #8]
 810778a:	3307      	adds	r3, #7
 810778c:	08db      	lsrs	r3, r3, #3
 810778e:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8107790:	68bb      	ldr	r3, [r7, #8]
 8107792:	68fa      	ldr	r2, [r7, #12]
 8107794:	fb02 f303 	mul.w	r3, r2, r3
}
 8107798:	4618      	mov	r0, r3
 810779a:	3714      	adds	r7, #20
 810779c:	46bd      	mov	sp, r7
 810779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077a2:	4770      	bx	lr

081077a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81077a4:	b580      	push	{r7, lr}
 81077a6:	b082      	sub	sp, #8
 81077a8:	af00      	add	r7, sp, #0
 81077aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81077ac:	687b      	ldr	r3, [r7, #4]
 81077ae:	2b00      	cmp	r3, #0
 81077b0:	d101      	bne.n	81077b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81077b2:	2301      	movs	r3, #1
 81077b4:	e049      	b.n	810784a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81077b6:	687b      	ldr	r3, [r7, #4]
 81077b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81077bc:	b2db      	uxtb	r3, r3
 81077be:	2b00      	cmp	r3, #0
 81077c0:	d106      	bne.n	81077d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81077c2:	687b      	ldr	r3, [r7, #4]
 81077c4:	2200      	movs	r2, #0
 81077c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81077ca:	6878      	ldr	r0, [r7, #4]
 81077cc:	f7f9 fff4 	bl	81017b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81077d0:	687b      	ldr	r3, [r7, #4]
 81077d2:	2202      	movs	r2, #2
 81077d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81077d8:	687b      	ldr	r3, [r7, #4]
 81077da:	681a      	ldr	r2, [r3, #0]
 81077dc:	687b      	ldr	r3, [r7, #4]
 81077de:	3304      	adds	r3, #4
 81077e0:	4619      	mov	r1, r3
 81077e2:	4610      	mov	r0, r2
 81077e4:	f000 f97c 	bl	8107ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81077e8:	687b      	ldr	r3, [r7, #4]
 81077ea:	2201      	movs	r2, #1
 81077ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81077f0:	687b      	ldr	r3, [r7, #4]
 81077f2:	2201      	movs	r2, #1
 81077f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81077f8:	687b      	ldr	r3, [r7, #4]
 81077fa:	2201      	movs	r2, #1
 81077fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107800:	687b      	ldr	r3, [r7, #4]
 8107802:	2201      	movs	r2, #1
 8107804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107808:	687b      	ldr	r3, [r7, #4]
 810780a:	2201      	movs	r2, #1
 810780c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8107810:	687b      	ldr	r3, [r7, #4]
 8107812:	2201      	movs	r2, #1
 8107814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8107818:	687b      	ldr	r3, [r7, #4]
 810781a:	2201      	movs	r2, #1
 810781c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107820:	687b      	ldr	r3, [r7, #4]
 8107822:	2201      	movs	r2, #1
 8107824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107828:	687b      	ldr	r3, [r7, #4]
 810782a:	2201      	movs	r2, #1
 810782c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8107830:	687b      	ldr	r3, [r7, #4]
 8107832:	2201      	movs	r2, #1
 8107834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8107838:	687b      	ldr	r3, [r7, #4]
 810783a:	2201      	movs	r2, #1
 810783c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107840:	687b      	ldr	r3, [r7, #4]
 8107842:	2201      	movs	r2, #1
 8107844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8107848:	2300      	movs	r3, #0
}
 810784a:	4618      	mov	r0, r3
 810784c:	3708      	adds	r7, #8
 810784e:	46bd      	mov	sp, r7
 8107850:	bd80      	pop	{r7, pc}

08107852 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8107852:	b580      	push	{r7, lr}
 8107854:	b082      	sub	sp, #8
 8107856:	af00      	add	r7, sp, #0
 8107858:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 810785a:	687b      	ldr	r3, [r7, #4]
 810785c:	681b      	ldr	r3, [r3, #0]
 810785e:	691b      	ldr	r3, [r3, #16]
 8107860:	f003 0302 	and.w	r3, r3, #2
 8107864:	2b02      	cmp	r3, #2
 8107866:	d122      	bne.n	81078ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8107868:	687b      	ldr	r3, [r7, #4]
 810786a:	681b      	ldr	r3, [r3, #0]
 810786c:	68db      	ldr	r3, [r3, #12]
 810786e:	f003 0302 	and.w	r3, r3, #2
 8107872:	2b02      	cmp	r3, #2
 8107874:	d11b      	bne.n	81078ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8107876:	687b      	ldr	r3, [r7, #4]
 8107878:	681b      	ldr	r3, [r3, #0]
 810787a:	f06f 0202 	mvn.w	r2, #2
 810787e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8107880:	687b      	ldr	r3, [r7, #4]
 8107882:	2201      	movs	r2, #1
 8107884:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8107886:	687b      	ldr	r3, [r7, #4]
 8107888:	681b      	ldr	r3, [r3, #0]
 810788a:	699b      	ldr	r3, [r3, #24]
 810788c:	f003 0303 	and.w	r3, r3, #3
 8107890:	2b00      	cmp	r3, #0
 8107892:	d003      	beq.n	810789c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8107894:	6878      	ldr	r0, [r7, #4]
 8107896:	f000 f905 	bl	8107aa4 <HAL_TIM_IC_CaptureCallback>
 810789a:	e005      	b.n	81078a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810789c:	6878      	ldr	r0, [r7, #4]
 810789e:	f000 f8f7 	bl	8107a90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81078a2:	6878      	ldr	r0, [r7, #4]
 81078a4:	f000 f908 	bl	8107ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81078a8:	687b      	ldr	r3, [r7, #4]
 81078aa:	2200      	movs	r2, #0
 81078ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 81078ae:	687b      	ldr	r3, [r7, #4]
 81078b0:	681b      	ldr	r3, [r3, #0]
 81078b2:	691b      	ldr	r3, [r3, #16]
 81078b4:	f003 0304 	and.w	r3, r3, #4
 81078b8:	2b04      	cmp	r3, #4
 81078ba:	d122      	bne.n	8107902 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 81078bc:	687b      	ldr	r3, [r7, #4]
 81078be:	681b      	ldr	r3, [r3, #0]
 81078c0:	68db      	ldr	r3, [r3, #12]
 81078c2:	f003 0304 	and.w	r3, r3, #4
 81078c6:	2b04      	cmp	r3, #4
 81078c8:	d11b      	bne.n	8107902 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 81078ca:	687b      	ldr	r3, [r7, #4]
 81078cc:	681b      	ldr	r3, [r3, #0]
 81078ce:	f06f 0204 	mvn.w	r2, #4
 81078d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81078d4:	687b      	ldr	r3, [r7, #4]
 81078d6:	2202      	movs	r2, #2
 81078d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81078da:	687b      	ldr	r3, [r7, #4]
 81078dc:	681b      	ldr	r3, [r3, #0]
 81078de:	699b      	ldr	r3, [r3, #24]
 81078e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81078e4:	2b00      	cmp	r3, #0
 81078e6:	d003      	beq.n	81078f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81078e8:	6878      	ldr	r0, [r7, #4]
 81078ea:	f000 f8db 	bl	8107aa4 <HAL_TIM_IC_CaptureCallback>
 81078ee:	e005      	b.n	81078fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81078f0:	6878      	ldr	r0, [r7, #4]
 81078f2:	f000 f8cd 	bl	8107a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81078f6:	6878      	ldr	r0, [r7, #4]
 81078f8:	f000 f8de 	bl	8107ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81078fc:	687b      	ldr	r3, [r7, #4]
 81078fe:	2200      	movs	r2, #0
 8107900:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8107902:	687b      	ldr	r3, [r7, #4]
 8107904:	681b      	ldr	r3, [r3, #0]
 8107906:	691b      	ldr	r3, [r3, #16]
 8107908:	f003 0308 	and.w	r3, r3, #8
 810790c:	2b08      	cmp	r3, #8
 810790e:	d122      	bne.n	8107956 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8107910:	687b      	ldr	r3, [r7, #4]
 8107912:	681b      	ldr	r3, [r3, #0]
 8107914:	68db      	ldr	r3, [r3, #12]
 8107916:	f003 0308 	and.w	r3, r3, #8
 810791a:	2b08      	cmp	r3, #8
 810791c:	d11b      	bne.n	8107956 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 810791e:	687b      	ldr	r3, [r7, #4]
 8107920:	681b      	ldr	r3, [r3, #0]
 8107922:	f06f 0208 	mvn.w	r2, #8
 8107926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8107928:	687b      	ldr	r3, [r7, #4]
 810792a:	2204      	movs	r2, #4
 810792c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810792e:	687b      	ldr	r3, [r7, #4]
 8107930:	681b      	ldr	r3, [r3, #0]
 8107932:	69db      	ldr	r3, [r3, #28]
 8107934:	f003 0303 	and.w	r3, r3, #3
 8107938:	2b00      	cmp	r3, #0
 810793a:	d003      	beq.n	8107944 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810793c:	6878      	ldr	r0, [r7, #4]
 810793e:	f000 f8b1 	bl	8107aa4 <HAL_TIM_IC_CaptureCallback>
 8107942:	e005      	b.n	8107950 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8107944:	6878      	ldr	r0, [r7, #4]
 8107946:	f000 f8a3 	bl	8107a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810794a:	6878      	ldr	r0, [r7, #4]
 810794c:	f000 f8b4 	bl	8107ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8107950:	687b      	ldr	r3, [r7, #4]
 8107952:	2200      	movs	r2, #0
 8107954:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8107956:	687b      	ldr	r3, [r7, #4]
 8107958:	681b      	ldr	r3, [r3, #0]
 810795a:	691b      	ldr	r3, [r3, #16]
 810795c:	f003 0310 	and.w	r3, r3, #16
 8107960:	2b10      	cmp	r3, #16
 8107962:	d122      	bne.n	81079aa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8107964:	687b      	ldr	r3, [r7, #4]
 8107966:	681b      	ldr	r3, [r3, #0]
 8107968:	68db      	ldr	r3, [r3, #12]
 810796a:	f003 0310 	and.w	r3, r3, #16
 810796e:	2b10      	cmp	r3, #16
 8107970:	d11b      	bne.n	81079aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8107972:	687b      	ldr	r3, [r7, #4]
 8107974:	681b      	ldr	r3, [r3, #0]
 8107976:	f06f 0210 	mvn.w	r2, #16
 810797a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810797c:	687b      	ldr	r3, [r7, #4]
 810797e:	2208      	movs	r2, #8
 8107980:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8107982:	687b      	ldr	r3, [r7, #4]
 8107984:	681b      	ldr	r3, [r3, #0]
 8107986:	69db      	ldr	r3, [r3, #28]
 8107988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810798c:	2b00      	cmp	r3, #0
 810798e:	d003      	beq.n	8107998 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8107990:	6878      	ldr	r0, [r7, #4]
 8107992:	f000 f887 	bl	8107aa4 <HAL_TIM_IC_CaptureCallback>
 8107996:	e005      	b.n	81079a4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8107998:	6878      	ldr	r0, [r7, #4]
 810799a:	f000 f879 	bl	8107a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810799e:	6878      	ldr	r0, [r7, #4]
 81079a0:	f000 f88a 	bl	8107ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81079a4:	687b      	ldr	r3, [r7, #4]
 81079a6:	2200      	movs	r2, #0
 81079a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 81079aa:	687b      	ldr	r3, [r7, #4]
 81079ac:	681b      	ldr	r3, [r3, #0]
 81079ae:	691b      	ldr	r3, [r3, #16]
 81079b0:	f003 0301 	and.w	r3, r3, #1
 81079b4:	2b01      	cmp	r3, #1
 81079b6:	d10e      	bne.n	81079d6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 81079b8:	687b      	ldr	r3, [r7, #4]
 81079ba:	681b      	ldr	r3, [r3, #0]
 81079bc:	68db      	ldr	r3, [r3, #12]
 81079be:	f003 0301 	and.w	r3, r3, #1
 81079c2:	2b01      	cmp	r3, #1
 81079c4:	d107      	bne.n	81079d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 81079c6:	687b      	ldr	r3, [r7, #4]
 81079c8:	681b      	ldr	r3, [r3, #0]
 81079ca:	f06f 0201 	mvn.w	r2, #1
 81079ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81079d0:	6878      	ldr	r0, [r7, #4]
 81079d2:	f7f9 fd8d 	bl	81014f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 81079d6:	687b      	ldr	r3, [r7, #4]
 81079d8:	681b      	ldr	r3, [r3, #0]
 81079da:	691b      	ldr	r3, [r3, #16]
 81079dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81079e0:	2b80      	cmp	r3, #128	; 0x80
 81079e2:	d10e      	bne.n	8107a02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81079e4:	687b      	ldr	r3, [r7, #4]
 81079e6:	681b      	ldr	r3, [r3, #0]
 81079e8:	68db      	ldr	r3, [r3, #12]
 81079ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81079ee:	2b80      	cmp	r3, #128	; 0x80
 81079f0:	d107      	bne.n	8107a02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81079f2:	687b      	ldr	r3, [r7, #4]
 81079f4:	681b      	ldr	r3, [r3, #0]
 81079f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81079fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81079fc:	6878      	ldr	r0, [r7, #4]
 81079fe:	f000 f913 	bl	8107c28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8107a02:	687b      	ldr	r3, [r7, #4]
 8107a04:	681b      	ldr	r3, [r3, #0]
 8107a06:	691b      	ldr	r3, [r3, #16]
 8107a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107a10:	d10e      	bne.n	8107a30 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8107a12:	687b      	ldr	r3, [r7, #4]
 8107a14:	681b      	ldr	r3, [r3, #0]
 8107a16:	68db      	ldr	r3, [r3, #12]
 8107a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107a1c:	2b80      	cmp	r3, #128	; 0x80
 8107a1e:	d107      	bne.n	8107a30 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8107a20:	687b      	ldr	r3, [r7, #4]
 8107a22:	681b      	ldr	r3, [r3, #0]
 8107a24:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8107a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8107a2a:	6878      	ldr	r0, [r7, #4]
 8107a2c:	f000 f906 	bl	8107c3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8107a30:	687b      	ldr	r3, [r7, #4]
 8107a32:	681b      	ldr	r3, [r3, #0]
 8107a34:	691b      	ldr	r3, [r3, #16]
 8107a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107a3a:	2b40      	cmp	r3, #64	; 0x40
 8107a3c:	d10e      	bne.n	8107a5c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8107a3e:	687b      	ldr	r3, [r7, #4]
 8107a40:	681b      	ldr	r3, [r3, #0]
 8107a42:	68db      	ldr	r3, [r3, #12]
 8107a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107a48:	2b40      	cmp	r3, #64	; 0x40
 8107a4a:	d107      	bne.n	8107a5c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8107a4c:	687b      	ldr	r3, [r7, #4]
 8107a4e:	681b      	ldr	r3, [r3, #0]
 8107a50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8107a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8107a56:	6878      	ldr	r0, [r7, #4]
 8107a58:	f000 f838 	bl	8107acc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8107a5c:	687b      	ldr	r3, [r7, #4]
 8107a5e:	681b      	ldr	r3, [r3, #0]
 8107a60:	691b      	ldr	r3, [r3, #16]
 8107a62:	f003 0320 	and.w	r3, r3, #32
 8107a66:	2b20      	cmp	r3, #32
 8107a68:	d10e      	bne.n	8107a88 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8107a6a:	687b      	ldr	r3, [r7, #4]
 8107a6c:	681b      	ldr	r3, [r3, #0]
 8107a6e:	68db      	ldr	r3, [r3, #12]
 8107a70:	f003 0320 	and.w	r3, r3, #32
 8107a74:	2b20      	cmp	r3, #32
 8107a76:	d107      	bne.n	8107a88 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8107a78:	687b      	ldr	r3, [r7, #4]
 8107a7a:	681b      	ldr	r3, [r3, #0]
 8107a7c:	f06f 0220 	mvn.w	r2, #32
 8107a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8107a82:	6878      	ldr	r0, [r7, #4]
 8107a84:	f000 f8c6 	bl	8107c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8107a88:	bf00      	nop
 8107a8a:	3708      	adds	r7, #8
 8107a8c:	46bd      	mov	sp, r7
 8107a8e:	bd80      	pop	{r7, pc}

08107a90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8107a90:	b480      	push	{r7}
 8107a92:	b083      	sub	sp, #12
 8107a94:	af00      	add	r7, sp, #0
 8107a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8107a98:	bf00      	nop
 8107a9a:	370c      	adds	r7, #12
 8107a9c:	46bd      	mov	sp, r7
 8107a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107aa2:	4770      	bx	lr

08107aa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8107aa4:	b480      	push	{r7}
 8107aa6:	b083      	sub	sp, #12
 8107aa8:	af00      	add	r7, sp, #0
 8107aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8107aac:	bf00      	nop
 8107aae:	370c      	adds	r7, #12
 8107ab0:	46bd      	mov	sp, r7
 8107ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ab6:	4770      	bx	lr

08107ab8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8107ab8:	b480      	push	{r7}
 8107aba:	b083      	sub	sp, #12
 8107abc:	af00      	add	r7, sp, #0
 8107abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8107ac0:	bf00      	nop
 8107ac2:	370c      	adds	r7, #12
 8107ac4:	46bd      	mov	sp, r7
 8107ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107aca:	4770      	bx	lr

08107acc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8107acc:	b480      	push	{r7}
 8107ace:	b083      	sub	sp, #12
 8107ad0:	af00      	add	r7, sp, #0
 8107ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8107ad4:	bf00      	nop
 8107ad6:	370c      	adds	r7, #12
 8107ad8:	46bd      	mov	sp, r7
 8107ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ade:	4770      	bx	lr

08107ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8107ae0:	b480      	push	{r7}
 8107ae2:	b085      	sub	sp, #20
 8107ae4:	af00      	add	r7, sp, #0
 8107ae6:	6078      	str	r0, [r7, #4]
 8107ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8107aea:	687b      	ldr	r3, [r7, #4]
 8107aec:	681b      	ldr	r3, [r3, #0]
 8107aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8107af0:	687b      	ldr	r3, [r7, #4]
 8107af2:	4a40      	ldr	r2, [pc, #256]	; (8107bf4 <TIM_Base_SetConfig+0x114>)
 8107af4:	4293      	cmp	r3, r2
 8107af6:	d013      	beq.n	8107b20 <TIM_Base_SetConfig+0x40>
 8107af8:	687b      	ldr	r3, [r7, #4]
 8107afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107afe:	d00f      	beq.n	8107b20 <TIM_Base_SetConfig+0x40>
 8107b00:	687b      	ldr	r3, [r7, #4]
 8107b02:	4a3d      	ldr	r2, [pc, #244]	; (8107bf8 <TIM_Base_SetConfig+0x118>)
 8107b04:	4293      	cmp	r3, r2
 8107b06:	d00b      	beq.n	8107b20 <TIM_Base_SetConfig+0x40>
 8107b08:	687b      	ldr	r3, [r7, #4]
 8107b0a:	4a3c      	ldr	r2, [pc, #240]	; (8107bfc <TIM_Base_SetConfig+0x11c>)
 8107b0c:	4293      	cmp	r3, r2
 8107b0e:	d007      	beq.n	8107b20 <TIM_Base_SetConfig+0x40>
 8107b10:	687b      	ldr	r3, [r7, #4]
 8107b12:	4a3b      	ldr	r2, [pc, #236]	; (8107c00 <TIM_Base_SetConfig+0x120>)
 8107b14:	4293      	cmp	r3, r2
 8107b16:	d003      	beq.n	8107b20 <TIM_Base_SetConfig+0x40>
 8107b18:	687b      	ldr	r3, [r7, #4]
 8107b1a:	4a3a      	ldr	r2, [pc, #232]	; (8107c04 <TIM_Base_SetConfig+0x124>)
 8107b1c:	4293      	cmp	r3, r2
 8107b1e:	d108      	bne.n	8107b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107b20:	68fb      	ldr	r3, [r7, #12]
 8107b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107b28:	683b      	ldr	r3, [r7, #0]
 8107b2a:	685b      	ldr	r3, [r3, #4]
 8107b2c:	68fa      	ldr	r2, [r7, #12]
 8107b2e:	4313      	orrs	r3, r2
 8107b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8107b32:	687b      	ldr	r3, [r7, #4]
 8107b34:	4a2f      	ldr	r2, [pc, #188]	; (8107bf4 <TIM_Base_SetConfig+0x114>)
 8107b36:	4293      	cmp	r3, r2
 8107b38:	d01f      	beq.n	8107b7a <TIM_Base_SetConfig+0x9a>
 8107b3a:	687b      	ldr	r3, [r7, #4]
 8107b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107b40:	d01b      	beq.n	8107b7a <TIM_Base_SetConfig+0x9a>
 8107b42:	687b      	ldr	r3, [r7, #4]
 8107b44:	4a2c      	ldr	r2, [pc, #176]	; (8107bf8 <TIM_Base_SetConfig+0x118>)
 8107b46:	4293      	cmp	r3, r2
 8107b48:	d017      	beq.n	8107b7a <TIM_Base_SetConfig+0x9a>
 8107b4a:	687b      	ldr	r3, [r7, #4]
 8107b4c:	4a2b      	ldr	r2, [pc, #172]	; (8107bfc <TIM_Base_SetConfig+0x11c>)
 8107b4e:	4293      	cmp	r3, r2
 8107b50:	d013      	beq.n	8107b7a <TIM_Base_SetConfig+0x9a>
 8107b52:	687b      	ldr	r3, [r7, #4]
 8107b54:	4a2a      	ldr	r2, [pc, #168]	; (8107c00 <TIM_Base_SetConfig+0x120>)
 8107b56:	4293      	cmp	r3, r2
 8107b58:	d00f      	beq.n	8107b7a <TIM_Base_SetConfig+0x9a>
 8107b5a:	687b      	ldr	r3, [r7, #4]
 8107b5c:	4a29      	ldr	r2, [pc, #164]	; (8107c04 <TIM_Base_SetConfig+0x124>)
 8107b5e:	4293      	cmp	r3, r2
 8107b60:	d00b      	beq.n	8107b7a <TIM_Base_SetConfig+0x9a>
 8107b62:	687b      	ldr	r3, [r7, #4]
 8107b64:	4a28      	ldr	r2, [pc, #160]	; (8107c08 <TIM_Base_SetConfig+0x128>)
 8107b66:	4293      	cmp	r3, r2
 8107b68:	d007      	beq.n	8107b7a <TIM_Base_SetConfig+0x9a>
 8107b6a:	687b      	ldr	r3, [r7, #4]
 8107b6c:	4a27      	ldr	r2, [pc, #156]	; (8107c0c <TIM_Base_SetConfig+0x12c>)
 8107b6e:	4293      	cmp	r3, r2
 8107b70:	d003      	beq.n	8107b7a <TIM_Base_SetConfig+0x9a>
 8107b72:	687b      	ldr	r3, [r7, #4]
 8107b74:	4a26      	ldr	r2, [pc, #152]	; (8107c10 <TIM_Base_SetConfig+0x130>)
 8107b76:	4293      	cmp	r3, r2
 8107b78:	d108      	bne.n	8107b8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8107b7a:	68fb      	ldr	r3, [r7, #12]
 8107b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8107b82:	683b      	ldr	r3, [r7, #0]
 8107b84:	68db      	ldr	r3, [r3, #12]
 8107b86:	68fa      	ldr	r2, [r7, #12]
 8107b88:	4313      	orrs	r3, r2
 8107b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8107b8c:	68fb      	ldr	r3, [r7, #12]
 8107b8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8107b92:	683b      	ldr	r3, [r7, #0]
 8107b94:	695b      	ldr	r3, [r3, #20]
 8107b96:	4313      	orrs	r3, r2
 8107b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8107b9a:	687b      	ldr	r3, [r7, #4]
 8107b9c:	68fa      	ldr	r2, [r7, #12]
 8107b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107ba0:	683b      	ldr	r3, [r7, #0]
 8107ba2:	689a      	ldr	r2, [r3, #8]
 8107ba4:	687b      	ldr	r3, [r7, #4]
 8107ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107ba8:	683b      	ldr	r3, [r7, #0]
 8107baa:	681a      	ldr	r2, [r3, #0]
 8107bac:	687b      	ldr	r3, [r7, #4]
 8107bae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107bb0:	687b      	ldr	r3, [r7, #4]
 8107bb2:	4a10      	ldr	r2, [pc, #64]	; (8107bf4 <TIM_Base_SetConfig+0x114>)
 8107bb4:	4293      	cmp	r3, r2
 8107bb6:	d00f      	beq.n	8107bd8 <TIM_Base_SetConfig+0xf8>
 8107bb8:	687b      	ldr	r3, [r7, #4]
 8107bba:	4a12      	ldr	r2, [pc, #72]	; (8107c04 <TIM_Base_SetConfig+0x124>)
 8107bbc:	4293      	cmp	r3, r2
 8107bbe:	d00b      	beq.n	8107bd8 <TIM_Base_SetConfig+0xf8>
 8107bc0:	687b      	ldr	r3, [r7, #4]
 8107bc2:	4a11      	ldr	r2, [pc, #68]	; (8107c08 <TIM_Base_SetConfig+0x128>)
 8107bc4:	4293      	cmp	r3, r2
 8107bc6:	d007      	beq.n	8107bd8 <TIM_Base_SetConfig+0xf8>
 8107bc8:	687b      	ldr	r3, [r7, #4]
 8107bca:	4a10      	ldr	r2, [pc, #64]	; (8107c0c <TIM_Base_SetConfig+0x12c>)
 8107bcc:	4293      	cmp	r3, r2
 8107bce:	d003      	beq.n	8107bd8 <TIM_Base_SetConfig+0xf8>
 8107bd0:	687b      	ldr	r3, [r7, #4]
 8107bd2:	4a0f      	ldr	r2, [pc, #60]	; (8107c10 <TIM_Base_SetConfig+0x130>)
 8107bd4:	4293      	cmp	r3, r2
 8107bd6:	d103      	bne.n	8107be0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8107bd8:	683b      	ldr	r3, [r7, #0]
 8107bda:	691a      	ldr	r2, [r3, #16]
 8107bdc:	687b      	ldr	r3, [r7, #4]
 8107bde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107be0:	687b      	ldr	r3, [r7, #4]
 8107be2:	2201      	movs	r2, #1
 8107be4:	615a      	str	r2, [r3, #20]
}
 8107be6:	bf00      	nop
 8107be8:	3714      	adds	r7, #20
 8107bea:	46bd      	mov	sp, r7
 8107bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bf0:	4770      	bx	lr
 8107bf2:	bf00      	nop
 8107bf4:	40010000 	.word	0x40010000
 8107bf8:	40000400 	.word	0x40000400
 8107bfc:	40000800 	.word	0x40000800
 8107c00:	40000c00 	.word	0x40000c00
 8107c04:	40010400 	.word	0x40010400
 8107c08:	40014000 	.word	0x40014000
 8107c0c:	40014400 	.word	0x40014400
 8107c10:	40014800 	.word	0x40014800

08107c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8107c14:	b480      	push	{r7}
 8107c16:	b083      	sub	sp, #12
 8107c18:	af00      	add	r7, sp, #0
 8107c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8107c1c:	bf00      	nop
 8107c1e:	370c      	adds	r7, #12
 8107c20:	46bd      	mov	sp, r7
 8107c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c26:	4770      	bx	lr

08107c28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8107c28:	b480      	push	{r7}
 8107c2a:	b083      	sub	sp, #12
 8107c2c:	af00      	add	r7, sp, #0
 8107c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8107c30:	bf00      	nop
 8107c32:	370c      	adds	r7, #12
 8107c34:	46bd      	mov	sp, r7
 8107c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c3a:	4770      	bx	lr

08107c3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8107c3c:	b480      	push	{r7}
 8107c3e:	b083      	sub	sp, #12
 8107c40:	af00      	add	r7, sp, #0
 8107c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8107c44:	bf00      	nop
 8107c46:	370c      	adds	r7, #12
 8107c48:	46bd      	mov	sp, r7
 8107c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c4e:	4770      	bx	lr

08107c50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8107c50:	b580      	push	{r7, lr}
 8107c52:	b082      	sub	sp, #8
 8107c54:	af00      	add	r7, sp, #0
 8107c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8107c58:	687b      	ldr	r3, [r7, #4]
 8107c5a:	2b00      	cmp	r3, #0
 8107c5c:	d101      	bne.n	8107c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8107c5e:	2301      	movs	r3, #1
 8107c60:	e042      	b.n	8107ce8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8107c62:	687b      	ldr	r3, [r7, #4]
 8107c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107c68:	2b00      	cmp	r3, #0
 8107c6a:	d106      	bne.n	8107c7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8107c6c:	687b      	ldr	r3, [r7, #4]
 8107c6e:	2200      	movs	r2, #0
 8107c70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8107c74:	6878      	ldr	r0, [r7, #4]
 8107c76:	f7f9 fdc7 	bl	8101808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8107c7a:	687b      	ldr	r3, [r7, #4]
 8107c7c:	2224      	movs	r2, #36	; 0x24
 8107c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8107c82:	687b      	ldr	r3, [r7, #4]
 8107c84:	681b      	ldr	r3, [r3, #0]
 8107c86:	681a      	ldr	r2, [r3, #0]
 8107c88:	687b      	ldr	r3, [r7, #4]
 8107c8a:	681b      	ldr	r3, [r3, #0]
 8107c8c:	f022 0201 	bic.w	r2, r2, #1
 8107c90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8107c92:	6878      	ldr	r0, [r7, #4]
 8107c94:	f000 f8c2 	bl	8107e1c <UART_SetConfig>
 8107c98:	4603      	mov	r3, r0
 8107c9a:	2b01      	cmp	r3, #1
 8107c9c:	d101      	bne.n	8107ca2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8107c9e:	2301      	movs	r3, #1
 8107ca0:	e022      	b.n	8107ce8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8107ca2:	687b      	ldr	r3, [r7, #4]
 8107ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107ca6:	2b00      	cmp	r3, #0
 8107ca8:	d002      	beq.n	8107cb0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8107caa:	6878      	ldr	r0, [r7, #4]
 8107cac:	f000 fe1e 	bl	81088ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107cb0:	687b      	ldr	r3, [r7, #4]
 8107cb2:	681b      	ldr	r3, [r3, #0]
 8107cb4:	685a      	ldr	r2, [r3, #4]
 8107cb6:	687b      	ldr	r3, [r7, #4]
 8107cb8:	681b      	ldr	r3, [r3, #0]
 8107cba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8107cbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8107cc0:	687b      	ldr	r3, [r7, #4]
 8107cc2:	681b      	ldr	r3, [r3, #0]
 8107cc4:	689a      	ldr	r2, [r3, #8]
 8107cc6:	687b      	ldr	r3, [r7, #4]
 8107cc8:	681b      	ldr	r3, [r3, #0]
 8107cca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8107cce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8107cd0:	687b      	ldr	r3, [r7, #4]
 8107cd2:	681b      	ldr	r3, [r3, #0]
 8107cd4:	681a      	ldr	r2, [r3, #0]
 8107cd6:	687b      	ldr	r3, [r7, #4]
 8107cd8:	681b      	ldr	r3, [r3, #0]
 8107cda:	f042 0201 	orr.w	r2, r2, #1
 8107cde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8107ce0:	6878      	ldr	r0, [r7, #4]
 8107ce2:	f000 fea5 	bl	8108a30 <UART_CheckIdleState>
 8107ce6:	4603      	mov	r3, r0
}
 8107ce8:	4618      	mov	r0, r3
 8107cea:	3708      	adds	r7, #8
 8107cec:	46bd      	mov	sp, r7
 8107cee:	bd80      	pop	{r7, pc}

08107cf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8107cf0:	b580      	push	{r7, lr}
 8107cf2:	b08a      	sub	sp, #40	; 0x28
 8107cf4:	af02      	add	r7, sp, #8
 8107cf6:	60f8      	str	r0, [r7, #12]
 8107cf8:	60b9      	str	r1, [r7, #8]
 8107cfa:	603b      	str	r3, [r7, #0]
 8107cfc:	4613      	mov	r3, r2
 8107cfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8107d00:	68fb      	ldr	r3, [r7, #12]
 8107d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107d06:	2b20      	cmp	r3, #32
 8107d08:	f040 8083 	bne.w	8107e12 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8107d0c:	68bb      	ldr	r3, [r7, #8]
 8107d0e:	2b00      	cmp	r3, #0
 8107d10:	d002      	beq.n	8107d18 <HAL_UART_Transmit+0x28>
 8107d12:	88fb      	ldrh	r3, [r7, #6]
 8107d14:	2b00      	cmp	r3, #0
 8107d16:	d101      	bne.n	8107d1c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8107d18:	2301      	movs	r3, #1
 8107d1a:	e07b      	b.n	8107e14 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8107d1c:	68fb      	ldr	r3, [r7, #12]
 8107d1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8107d22:	2b01      	cmp	r3, #1
 8107d24:	d101      	bne.n	8107d2a <HAL_UART_Transmit+0x3a>
 8107d26:	2302      	movs	r3, #2
 8107d28:	e074      	b.n	8107e14 <HAL_UART_Transmit+0x124>
 8107d2a:	68fb      	ldr	r3, [r7, #12]
 8107d2c:	2201      	movs	r2, #1
 8107d2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107d32:	68fb      	ldr	r3, [r7, #12]
 8107d34:	2200      	movs	r2, #0
 8107d36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8107d3a:	68fb      	ldr	r3, [r7, #12]
 8107d3c:	2221      	movs	r2, #33	; 0x21
 8107d3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8107d42:	f7f9 ff81 	bl	8101c48 <HAL_GetTick>
 8107d46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8107d48:	68fb      	ldr	r3, [r7, #12]
 8107d4a:	88fa      	ldrh	r2, [r7, #6]
 8107d4c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8107d50:	68fb      	ldr	r3, [r7, #12]
 8107d52:	88fa      	ldrh	r2, [r7, #6]
 8107d54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8107d58:	68fb      	ldr	r3, [r7, #12]
 8107d5a:	689b      	ldr	r3, [r3, #8]
 8107d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107d60:	d108      	bne.n	8107d74 <HAL_UART_Transmit+0x84>
 8107d62:	68fb      	ldr	r3, [r7, #12]
 8107d64:	691b      	ldr	r3, [r3, #16]
 8107d66:	2b00      	cmp	r3, #0
 8107d68:	d104      	bne.n	8107d74 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8107d6a:	2300      	movs	r3, #0
 8107d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8107d6e:	68bb      	ldr	r3, [r7, #8]
 8107d70:	61bb      	str	r3, [r7, #24]
 8107d72:	e003      	b.n	8107d7c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8107d74:	68bb      	ldr	r3, [r7, #8]
 8107d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8107d78:	2300      	movs	r3, #0
 8107d7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8107d7c:	68fb      	ldr	r3, [r7, #12]
 8107d7e:	2200      	movs	r2, #0
 8107d80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8107d84:	e02c      	b.n	8107de0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8107d86:	683b      	ldr	r3, [r7, #0]
 8107d88:	9300      	str	r3, [sp, #0]
 8107d8a:	697b      	ldr	r3, [r7, #20]
 8107d8c:	2200      	movs	r2, #0
 8107d8e:	2180      	movs	r1, #128	; 0x80
 8107d90:	68f8      	ldr	r0, [r7, #12]
 8107d92:	f000 fe98 	bl	8108ac6 <UART_WaitOnFlagUntilTimeout>
 8107d96:	4603      	mov	r3, r0
 8107d98:	2b00      	cmp	r3, #0
 8107d9a:	d001      	beq.n	8107da0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8107d9c:	2303      	movs	r3, #3
 8107d9e:	e039      	b.n	8107e14 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8107da0:	69fb      	ldr	r3, [r7, #28]
 8107da2:	2b00      	cmp	r3, #0
 8107da4:	d10b      	bne.n	8107dbe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8107da6:	69bb      	ldr	r3, [r7, #24]
 8107da8:	881b      	ldrh	r3, [r3, #0]
 8107daa:	461a      	mov	r2, r3
 8107dac:	68fb      	ldr	r3, [r7, #12]
 8107dae:	681b      	ldr	r3, [r3, #0]
 8107db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8107db4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8107db6:	69bb      	ldr	r3, [r7, #24]
 8107db8:	3302      	adds	r3, #2
 8107dba:	61bb      	str	r3, [r7, #24]
 8107dbc:	e007      	b.n	8107dce <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8107dbe:	69fb      	ldr	r3, [r7, #28]
 8107dc0:	781a      	ldrb	r2, [r3, #0]
 8107dc2:	68fb      	ldr	r3, [r7, #12]
 8107dc4:	681b      	ldr	r3, [r3, #0]
 8107dc6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8107dc8:	69fb      	ldr	r3, [r7, #28]
 8107dca:	3301      	adds	r3, #1
 8107dcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8107dce:	68fb      	ldr	r3, [r7, #12]
 8107dd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107dd4:	b29b      	uxth	r3, r3
 8107dd6:	3b01      	subs	r3, #1
 8107dd8:	b29a      	uxth	r2, r3
 8107dda:	68fb      	ldr	r3, [r7, #12]
 8107ddc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8107de0:	68fb      	ldr	r3, [r7, #12]
 8107de2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107de6:	b29b      	uxth	r3, r3
 8107de8:	2b00      	cmp	r3, #0
 8107dea:	d1cc      	bne.n	8107d86 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8107dec:	683b      	ldr	r3, [r7, #0]
 8107dee:	9300      	str	r3, [sp, #0]
 8107df0:	697b      	ldr	r3, [r7, #20]
 8107df2:	2200      	movs	r2, #0
 8107df4:	2140      	movs	r1, #64	; 0x40
 8107df6:	68f8      	ldr	r0, [r7, #12]
 8107df8:	f000 fe65 	bl	8108ac6 <UART_WaitOnFlagUntilTimeout>
 8107dfc:	4603      	mov	r3, r0
 8107dfe:	2b00      	cmp	r3, #0
 8107e00:	d001      	beq.n	8107e06 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8107e02:	2303      	movs	r3, #3
 8107e04:	e006      	b.n	8107e14 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8107e06:	68fb      	ldr	r3, [r7, #12]
 8107e08:	2220      	movs	r2, #32
 8107e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8107e0e:	2300      	movs	r3, #0
 8107e10:	e000      	b.n	8107e14 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8107e12:	2302      	movs	r3, #2
  }
}
 8107e14:	4618      	mov	r0, r3
 8107e16:	3720      	adds	r7, #32
 8107e18:	46bd      	mov	sp, r7
 8107e1a:	bd80      	pop	{r7, pc}

08107e1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8107e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8107e20:	b092      	sub	sp, #72	; 0x48
 8107e22:	af00      	add	r7, sp, #0
 8107e24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8107e26:	2300      	movs	r3, #0
 8107e28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8107e2c:	697b      	ldr	r3, [r7, #20]
 8107e2e:	689a      	ldr	r2, [r3, #8]
 8107e30:	697b      	ldr	r3, [r7, #20]
 8107e32:	691b      	ldr	r3, [r3, #16]
 8107e34:	431a      	orrs	r2, r3
 8107e36:	697b      	ldr	r3, [r7, #20]
 8107e38:	695b      	ldr	r3, [r3, #20]
 8107e3a:	431a      	orrs	r2, r3
 8107e3c:	697b      	ldr	r3, [r7, #20]
 8107e3e:	69db      	ldr	r3, [r3, #28]
 8107e40:	4313      	orrs	r3, r2
 8107e42:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8107e44:	697b      	ldr	r3, [r7, #20]
 8107e46:	681b      	ldr	r3, [r3, #0]
 8107e48:	681a      	ldr	r2, [r3, #0]
 8107e4a:	4bbd      	ldr	r3, [pc, #756]	; (8108140 <UART_SetConfig+0x324>)
 8107e4c:	4013      	ands	r3, r2
 8107e4e:	697a      	ldr	r2, [r7, #20]
 8107e50:	6812      	ldr	r2, [r2, #0]
 8107e52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107e54:	430b      	orrs	r3, r1
 8107e56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8107e58:	697b      	ldr	r3, [r7, #20]
 8107e5a:	681b      	ldr	r3, [r3, #0]
 8107e5c:	685b      	ldr	r3, [r3, #4]
 8107e5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8107e62:	697b      	ldr	r3, [r7, #20]
 8107e64:	68da      	ldr	r2, [r3, #12]
 8107e66:	697b      	ldr	r3, [r7, #20]
 8107e68:	681b      	ldr	r3, [r3, #0]
 8107e6a:	430a      	orrs	r2, r1
 8107e6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8107e6e:	697b      	ldr	r3, [r7, #20]
 8107e70:	699b      	ldr	r3, [r3, #24]
 8107e72:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8107e74:	697b      	ldr	r3, [r7, #20]
 8107e76:	681b      	ldr	r3, [r3, #0]
 8107e78:	4ab2      	ldr	r2, [pc, #712]	; (8108144 <UART_SetConfig+0x328>)
 8107e7a:	4293      	cmp	r3, r2
 8107e7c:	d004      	beq.n	8107e88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8107e7e:	697b      	ldr	r3, [r7, #20]
 8107e80:	6a1b      	ldr	r3, [r3, #32]
 8107e82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8107e84:	4313      	orrs	r3, r2
 8107e86:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8107e88:	697b      	ldr	r3, [r7, #20]
 8107e8a:	681b      	ldr	r3, [r3, #0]
 8107e8c:	689b      	ldr	r3, [r3, #8]
 8107e8e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8107e92:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8107e96:	697a      	ldr	r2, [r7, #20]
 8107e98:	6812      	ldr	r2, [r2, #0]
 8107e9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107e9c:	430b      	orrs	r3, r1
 8107e9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8107ea0:	697b      	ldr	r3, [r7, #20]
 8107ea2:	681b      	ldr	r3, [r3, #0]
 8107ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107ea6:	f023 010f 	bic.w	r1, r3, #15
 8107eaa:	697b      	ldr	r3, [r7, #20]
 8107eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107eae:	697b      	ldr	r3, [r7, #20]
 8107eb0:	681b      	ldr	r3, [r3, #0]
 8107eb2:	430a      	orrs	r2, r1
 8107eb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107eb6:	697b      	ldr	r3, [r7, #20]
 8107eb8:	681b      	ldr	r3, [r3, #0]
 8107eba:	4aa3      	ldr	r2, [pc, #652]	; (8108148 <UART_SetConfig+0x32c>)
 8107ebc:	4293      	cmp	r3, r2
 8107ebe:	d177      	bne.n	8107fb0 <UART_SetConfig+0x194>
 8107ec0:	4ba2      	ldr	r3, [pc, #648]	; (810814c <UART_SetConfig+0x330>)
 8107ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107ec4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107ec8:	2b28      	cmp	r3, #40	; 0x28
 8107eca:	d86d      	bhi.n	8107fa8 <UART_SetConfig+0x18c>
 8107ecc:	a201      	add	r2, pc, #4	; (adr r2, 8107ed4 <UART_SetConfig+0xb8>)
 8107ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107ed2:	bf00      	nop
 8107ed4:	08107f79 	.word	0x08107f79
 8107ed8:	08107fa9 	.word	0x08107fa9
 8107edc:	08107fa9 	.word	0x08107fa9
 8107ee0:	08107fa9 	.word	0x08107fa9
 8107ee4:	08107fa9 	.word	0x08107fa9
 8107ee8:	08107fa9 	.word	0x08107fa9
 8107eec:	08107fa9 	.word	0x08107fa9
 8107ef0:	08107fa9 	.word	0x08107fa9
 8107ef4:	08107f81 	.word	0x08107f81
 8107ef8:	08107fa9 	.word	0x08107fa9
 8107efc:	08107fa9 	.word	0x08107fa9
 8107f00:	08107fa9 	.word	0x08107fa9
 8107f04:	08107fa9 	.word	0x08107fa9
 8107f08:	08107fa9 	.word	0x08107fa9
 8107f0c:	08107fa9 	.word	0x08107fa9
 8107f10:	08107fa9 	.word	0x08107fa9
 8107f14:	08107f89 	.word	0x08107f89
 8107f18:	08107fa9 	.word	0x08107fa9
 8107f1c:	08107fa9 	.word	0x08107fa9
 8107f20:	08107fa9 	.word	0x08107fa9
 8107f24:	08107fa9 	.word	0x08107fa9
 8107f28:	08107fa9 	.word	0x08107fa9
 8107f2c:	08107fa9 	.word	0x08107fa9
 8107f30:	08107fa9 	.word	0x08107fa9
 8107f34:	08107f91 	.word	0x08107f91
 8107f38:	08107fa9 	.word	0x08107fa9
 8107f3c:	08107fa9 	.word	0x08107fa9
 8107f40:	08107fa9 	.word	0x08107fa9
 8107f44:	08107fa9 	.word	0x08107fa9
 8107f48:	08107fa9 	.word	0x08107fa9
 8107f4c:	08107fa9 	.word	0x08107fa9
 8107f50:	08107fa9 	.word	0x08107fa9
 8107f54:	08107f99 	.word	0x08107f99
 8107f58:	08107fa9 	.word	0x08107fa9
 8107f5c:	08107fa9 	.word	0x08107fa9
 8107f60:	08107fa9 	.word	0x08107fa9
 8107f64:	08107fa9 	.word	0x08107fa9
 8107f68:	08107fa9 	.word	0x08107fa9
 8107f6c:	08107fa9 	.word	0x08107fa9
 8107f70:	08107fa9 	.word	0x08107fa9
 8107f74:	08107fa1 	.word	0x08107fa1
 8107f78:	2301      	movs	r3, #1
 8107f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107f7e:	e220      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8107f80:	2304      	movs	r3, #4
 8107f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107f86:	e21c      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8107f88:	2308      	movs	r3, #8
 8107f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107f8e:	e218      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8107f90:	2310      	movs	r3, #16
 8107f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107f96:	e214      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8107f98:	2320      	movs	r3, #32
 8107f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107f9e:	e210      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8107fa0:	2340      	movs	r3, #64	; 0x40
 8107fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107fa6:	e20c      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8107fa8:	2380      	movs	r3, #128	; 0x80
 8107faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107fae:	e208      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8107fb0:	697b      	ldr	r3, [r7, #20]
 8107fb2:	681b      	ldr	r3, [r3, #0]
 8107fb4:	4a66      	ldr	r2, [pc, #408]	; (8108150 <UART_SetConfig+0x334>)
 8107fb6:	4293      	cmp	r3, r2
 8107fb8:	d130      	bne.n	810801c <UART_SetConfig+0x200>
 8107fba:	4b64      	ldr	r3, [pc, #400]	; (810814c <UART_SetConfig+0x330>)
 8107fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107fbe:	f003 0307 	and.w	r3, r3, #7
 8107fc2:	2b05      	cmp	r3, #5
 8107fc4:	d826      	bhi.n	8108014 <UART_SetConfig+0x1f8>
 8107fc6:	a201      	add	r2, pc, #4	; (adr r2, 8107fcc <UART_SetConfig+0x1b0>)
 8107fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107fcc:	08107fe5 	.word	0x08107fe5
 8107fd0:	08107fed 	.word	0x08107fed
 8107fd4:	08107ff5 	.word	0x08107ff5
 8107fd8:	08107ffd 	.word	0x08107ffd
 8107fdc:	08108005 	.word	0x08108005
 8107fe0:	0810800d 	.word	0x0810800d
 8107fe4:	2300      	movs	r3, #0
 8107fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107fea:	e1ea      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8107fec:	2304      	movs	r3, #4
 8107fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107ff2:	e1e6      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8107ff4:	2308      	movs	r3, #8
 8107ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107ffa:	e1e2      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8107ffc:	2310      	movs	r3, #16
 8107ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108002:	e1de      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108004:	2320      	movs	r3, #32
 8108006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810800a:	e1da      	b.n	81083c2 <UART_SetConfig+0x5a6>
 810800c:	2340      	movs	r3, #64	; 0x40
 810800e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108012:	e1d6      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108014:	2380      	movs	r3, #128	; 0x80
 8108016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810801a:	e1d2      	b.n	81083c2 <UART_SetConfig+0x5a6>
 810801c:	697b      	ldr	r3, [r7, #20]
 810801e:	681b      	ldr	r3, [r3, #0]
 8108020:	4a4c      	ldr	r2, [pc, #304]	; (8108154 <UART_SetConfig+0x338>)
 8108022:	4293      	cmp	r3, r2
 8108024:	d130      	bne.n	8108088 <UART_SetConfig+0x26c>
 8108026:	4b49      	ldr	r3, [pc, #292]	; (810814c <UART_SetConfig+0x330>)
 8108028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810802a:	f003 0307 	and.w	r3, r3, #7
 810802e:	2b05      	cmp	r3, #5
 8108030:	d826      	bhi.n	8108080 <UART_SetConfig+0x264>
 8108032:	a201      	add	r2, pc, #4	; (adr r2, 8108038 <UART_SetConfig+0x21c>)
 8108034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108038:	08108051 	.word	0x08108051
 810803c:	08108059 	.word	0x08108059
 8108040:	08108061 	.word	0x08108061
 8108044:	08108069 	.word	0x08108069
 8108048:	08108071 	.word	0x08108071
 810804c:	08108079 	.word	0x08108079
 8108050:	2300      	movs	r3, #0
 8108052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108056:	e1b4      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108058:	2304      	movs	r3, #4
 810805a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810805e:	e1b0      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108060:	2308      	movs	r3, #8
 8108062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108066:	e1ac      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108068:	2310      	movs	r3, #16
 810806a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810806e:	e1a8      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108070:	2320      	movs	r3, #32
 8108072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108076:	e1a4      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108078:	2340      	movs	r3, #64	; 0x40
 810807a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810807e:	e1a0      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108080:	2380      	movs	r3, #128	; 0x80
 8108082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108086:	e19c      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108088:	697b      	ldr	r3, [r7, #20]
 810808a:	681b      	ldr	r3, [r3, #0]
 810808c:	4a32      	ldr	r2, [pc, #200]	; (8108158 <UART_SetConfig+0x33c>)
 810808e:	4293      	cmp	r3, r2
 8108090:	d130      	bne.n	81080f4 <UART_SetConfig+0x2d8>
 8108092:	4b2e      	ldr	r3, [pc, #184]	; (810814c <UART_SetConfig+0x330>)
 8108094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108096:	f003 0307 	and.w	r3, r3, #7
 810809a:	2b05      	cmp	r3, #5
 810809c:	d826      	bhi.n	81080ec <UART_SetConfig+0x2d0>
 810809e:	a201      	add	r2, pc, #4	; (adr r2, 81080a4 <UART_SetConfig+0x288>)
 81080a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81080a4:	081080bd 	.word	0x081080bd
 81080a8:	081080c5 	.word	0x081080c5
 81080ac:	081080cd 	.word	0x081080cd
 81080b0:	081080d5 	.word	0x081080d5
 81080b4:	081080dd 	.word	0x081080dd
 81080b8:	081080e5 	.word	0x081080e5
 81080bc:	2300      	movs	r3, #0
 81080be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080c2:	e17e      	b.n	81083c2 <UART_SetConfig+0x5a6>
 81080c4:	2304      	movs	r3, #4
 81080c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080ca:	e17a      	b.n	81083c2 <UART_SetConfig+0x5a6>
 81080cc:	2308      	movs	r3, #8
 81080ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080d2:	e176      	b.n	81083c2 <UART_SetConfig+0x5a6>
 81080d4:	2310      	movs	r3, #16
 81080d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080da:	e172      	b.n	81083c2 <UART_SetConfig+0x5a6>
 81080dc:	2320      	movs	r3, #32
 81080de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080e2:	e16e      	b.n	81083c2 <UART_SetConfig+0x5a6>
 81080e4:	2340      	movs	r3, #64	; 0x40
 81080e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080ea:	e16a      	b.n	81083c2 <UART_SetConfig+0x5a6>
 81080ec:	2380      	movs	r3, #128	; 0x80
 81080ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080f2:	e166      	b.n	81083c2 <UART_SetConfig+0x5a6>
 81080f4:	697b      	ldr	r3, [r7, #20]
 81080f6:	681b      	ldr	r3, [r3, #0]
 81080f8:	4a18      	ldr	r2, [pc, #96]	; (810815c <UART_SetConfig+0x340>)
 81080fa:	4293      	cmp	r3, r2
 81080fc:	d140      	bne.n	8108180 <UART_SetConfig+0x364>
 81080fe:	4b13      	ldr	r3, [pc, #76]	; (810814c <UART_SetConfig+0x330>)
 8108100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108102:	f003 0307 	and.w	r3, r3, #7
 8108106:	2b05      	cmp	r3, #5
 8108108:	d836      	bhi.n	8108178 <UART_SetConfig+0x35c>
 810810a:	a201      	add	r2, pc, #4	; (adr r2, 8108110 <UART_SetConfig+0x2f4>)
 810810c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108110:	08108129 	.word	0x08108129
 8108114:	08108131 	.word	0x08108131
 8108118:	08108139 	.word	0x08108139
 810811c:	08108161 	.word	0x08108161
 8108120:	08108169 	.word	0x08108169
 8108124:	08108171 	.word	0x08108171
 8108128:	2300      	movs	r3, #0
 810812a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810812e:	e148      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108130:	2304      	movs	r3, #4
 8108132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108136:	e144      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108138:	2308      	movs	r3, #8
 810813a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810813e:	e140      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108140:	cfff69f3 	.word	0xcfff69f3
 8108144:	58000c00 	.word	0x58000c00
 8108148:	40011000 	.word	0x40011000
 810814c:	58024400 	.word	0x58024400
 8108150:	40004400 	.word	0x40004400
 8108154:	40004800 	.word	0x40004800
 8108158:	40004c00 	.word	0x40004c00
 810815c:	40005000 	.word	0x40005000
 8108160:	2310      	movs	r3, #16
 8108162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108166:	e12c      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108168:	2320      	movs	r3, #32
 810816a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810816e:	e128      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108170:	2340      	movs	r3, #64	; 0x40
 8108172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108176:	e124      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108178:	2380      	movs	r3, #128	; 0x80
 810817a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810817e:	e120      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108180:	697b      	ldr	r3, [r7, #20]
 8108182:	681b      	ldr	r3, [r3, #0]
 8108184:	4acb      	ldr	r2, [pc, #812]	; (81084b4 <UART_SetConfig+0x698>)
 8108186:	4293      	cmp	r3, r2
 8108188:	d176      	bne.n	8108278 <UART_SetConfig+0x45c>
 810818a:	4bcb      	ldr	r3, [pc, #812]	; (81084b8 <UART_SetConfig+0x69c>)
 810818c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810818e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108192:	2b28      	cmp	r3, #40	; 0x28
 8108194:	d86c      	bhi.n	8108270 <UART_SetConfig+0x454>
 8108196:	a201      	add	r2, pc, #4	; (adr r2, 810819c <UART_SetConfig+0x380>)
 8108198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810819c:	08108241 	.word	0x08108241
 81081a0:	08108271 	.word	0x08108271
 81081a4:	08108271 	.word	0x08108271
 81081a8:	08108271 	.word	0x08108271
 81081ac:	08108271 	.word	0x08108271
 81081b0:	08108271 	.word	0x08108271
 81081b4:	08108271 	.word	0x08108271
 81081b8:	08108271 	.word	0x08108271
 81081bc:	08108249 	.word	0x08108249
 81081c0:	08108271 	.word	0x08108271
 81081c4:	08108271 	.word	0x08108271
 81081c8:	08108271 	.word	0x08108271
 81081cc:	08108271 	.word	0x08108271
 81081d0:	08108271 	.word	0x08108271
 81081d4:	08108271 	.word	0x08108271
 81081d8:	08108271 	.word	0x08108271
 81081dc:	08108251 	.word	0x08108251
 81081e0:	08108271 	.word	0x08108271
 81081e4:	08108271 	.word	0x08108271
 81081e8:	08108271 	.word	0x08108271
 81081ec:	08108271 	.word	0x08108271
 81081f0:	08108271 	.word	0x08108271
 81081f4:	08108271 	.word	0x08108271
 81081f8:	08108271 	.word	0x08108271
 81081fc:	08108259 	.word	0x08108259
 8108200:	08108271 	.word	0x08108271
 8108204:	08108271 	.word	0x08108271
 8108208:	08108271 	.word	0x08108271
 810820c:	08108271 	.word	0x08108271
 8108210:	08108271 	.word	0x08108271
 8108214:	08108271 	.word	0x08108271
 8108218:	08108271 	.word	0x08108271
 810821c:	08108261 	.word	0x08108261
 8108220:	08108271 	.word	0x08108271
 8108224:	08108271 	.word	0x08108271
 8108228:	08108271 	.word	0x08108271
 810822c:	08108271 	.word	0x08108271
 8108230:	08108271 	.word	0x08108271
 8108234:	08108271 	.word	0x08108271
 8108238:	08108271 	.word	0x08108271
 810823c:	08108269 	.word	0x08108269
 8108240:	2301      	movs	r3, #1
 8108242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108246:	e0bc      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108248:	2304      	movs	r3, #4
 810824a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810824e:	e0b8      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108250:	2308      	movs	r3, #8
 8108252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108256:	e0b4      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108258:	2310      	movs	r3, #16
 810825a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810825e:	e0b0      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108260:	2320      	movs	r3, #32
 8108262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108266:	e0ac      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108268:	2340      	movs	r3, #64	; 0x40
 810826a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810826e:	e0a8      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108270:	2380      	movs	r3, #128	; 0x80
 8108272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108276:	e0a4      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108278:	697b      	ldr	r3, [r7, #20]
 810827a:	681b      	ldr	r3, [r3, #0]
 810827c:	4a8f      	ldr	r2, [pc, #572]	; (81084bc <UART_SetConfig+0x6a0>)
 810827e:	4293      	cmp	r3, r2
 8108280:	d130      	bne.n	81082e4 <UART_SetConfig+0x4c8>
 8108282:	4b8d      	ldr	r3, [pc, #564]	; (81084b8 <UART_SetConfig+0x69c>)
 8108284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108286:	f003 0307 	and.w	r3, r3, #7
 810828a:	2b05      	cmp	r3, #5
 810828c:	d826      	bhi.n	81082dc <UART_SetConfig+0x4c0>
 810828e:	a201      	add	r2, pc, #4	; (adr r2, 8108294 <UART_SetConfig+0x478>)
 8108290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108294:	081082ad 	.word	0x081082ad
 8108298:	081082b5 	.word	0x081082b5
 810829c:	081082bd 	.word	0x081082bd
 81082a0:	081082c5 	.word	0x081082c5
 81082a4:	081082cd 	.word	0x081082cd
 81082a8:	081082d5 	.word	0x081082d5
 81082ac:	2300      	movs	r3, #0
 81082ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082b2:	e086      	b.n	81083c2 <UART_SetConfig+0x5a6>
 81082b4:	2304      	movs	r3, #4
 81082b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082ba:	e082      	b.n	81083c2 <UART_SetConfig+0x5a6>
 81082bc:	2308      	movs	r3, #8
 81082be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082c2:	e07e      	b.n	81083c2 <UART_SetConfig+0x5a6>
 81082c4:	2310      	movs	r3, #16
 81082c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082ca:	e07a      	b.n	81083c2 <UART_SetConfig+0x5a6>
 81082cc:	2320      	movs	r3, #32
 81082ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082d2:	e076      	b.n	81083c2 <UART_SetConfig+0x5a6>
 81082d4:	2340      	movs	r3, #64	; 0x40
 81082d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082da:	e072      	b.n	81083c2 <UART_SetConfig+0x5a6>
 81082dc:	2380      	movs	r3, #128	; 0x80
 81082de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082e2:	e06e      	b.n	81083c2 <UART_SetConfig+0x5a6>
 81082e4:	697b      	ldr	r3, [r7, #20]
 81082e6:	681b      	ldr	r3, [r3, #0]
 81082e8:	4a75      	ldr	r2, [pc, #468]	; (81084c0 <UART_SetConfig+0x6a4>)
 81082ea:	4293      	cmp	r3, r2
 81082ec:	d130      	bne.n	8108350 <UART_SetConfig+0x534>
 81082ee:	4b72      	ldr	r3, [pc, #456]	; (81084b8 <UART_SetConfig+0x69c>)
 81082f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81082f2:	f003 0307 	and.w	r3, r3, #7
 81082f6:	2b05      	cmp	r3, #5
 81082f8:	d826      	bhi.n	8108348 <UART_SetConfig+0x52c>
 81082fa:	a201      	add	r2, pc, #4	; (adr r2, 8108300 <UART_SetConfig+0x4e4>)
 81082fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108300:	08108319 	.word	0x08108319
 8108304:	08108321 	.word	0x08108321
 8108308:	08108329 	.word	0x08108329
 810830c:	08108331 	.word	0x08108331
 8108310:	08108339 	.word	0x08108339
 8108314:	08108341 	.word	0x08108341
 8108318:	2300      	movs	r3, #0
 810831a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810831e:	e050      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108320:	2304      	movs	r3, #4
 8108322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108326:	e04c      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108328:	2308      	movs	r3, #8
 810832a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810832e:	e048      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108330:	2310      	movs	r3, #16
 8108332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108336:	e044      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108338:	2320      	movs	r3, #32
 810833a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810833e:	e040      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108340:	2340      	movs	r3, #64	; 0x40
 8108342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108346:	e03c      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108348:	2380      	movs	r3, #128	; 0x80
 810834a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810834e:	e038      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108350:	697b      	ldr	r3, [r7, #20]
 8108352:	681b      	ldr	r3, [r3, #0]
 8108354:	4a5b      	ldr	r2, [pc, #364]	; (81084c4 <UART_SetConfig+0x6a8>)
 8108356:	4293      	cmp	r3, r2
 8108358:	d130      	bne.n	81083bc <UART_SetConfig+0x5a0>
 810835a:	4b57      	ldr	r3, [pc, #348]	; (81084b8 <UART_SetConfig+0x69c>)
 810835c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810835e:	f003 0307 	and.w	r3, r3, #7
 8108362:	2b05      	cmp	r3, #5
 8108364:	d826      	bhi.n	81083b4 <UART_SetConfig+0x598>
 8108366:	a201      	add	r2, pc, #4	; (adr r2, 810836c <UART_SetConfig+0x550>)
 8108368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810836c:	08108385 	.word	0x08108385
 8108370:	0810838d 	.word	0x0810838d
 8108374:	08108395 	.word	0x08108395
 8108378:	0810839d 	.word	0x0810839d
 810837c:	081083a5 	.word	0x081083a5
 8108380:	081083ad 	.word	0x081083ad
 8108384:	2302      	movs	r3, #2
 8108386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810838a:	e01a      	b.n	81083c2 <UART_SetConfig+0x5a6>
 810838c:	2304      	movs	r3, #4
 810838e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108392:	e016      	b.n	81083c2 <UART_SetConfig+0x5a6>
 8108394:	2308      	movs	r3, #8
 8108396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810839a:	e012      	b.n	81083c2 <UART_SetConfig+0x5a6>
 810839c:	2310      	movs	r3, #16
 810839e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083a2:	e00e      	b.n	81083c2 <UART_SetConfig+0x5a6>
 81083a4:	2320      	movs	r3, #32
 81083a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083aa:	e00a      	b.n	81083c2 <UART_SetConfig+0x5a6>
 81083ac:	2340      	movs	r3, #64	; 0x40
 81083ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083b2:	e006      	b.n	81083c2 <UART_SetConfig+0x5a6>
 81083b4:	2380      	movs	r3, #128	; 0x80
 81083b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083ba:	e002      	b.n	81083c2 <UART_SetConfig+0x5a6>
 81083bc:	2380      	movs	r3, #128	; 0x80
 81083be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81083c2:	697b      	ldr	r3, [r7, #20]
 81083c4:	681b      	ldr	r3, [r3, #0]
 81083c6:	4a3f      	ldr	r2, [pc, #252]	; (81084c4 <UART_SetConfig+0x6a8>)
 81083c8:	4293      	cmp	r3, r2
 81083ca:	f040 80f8 	bne.w	81085be <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81083ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81083d2:	2b20      	cmp	r3, #32
 81083d4:	dc46      	bgt.n	8108464 <UART_SetConfig+0x648>
 81083d6:	2b02      	cmp	r3, #2
 81083d8:	f2c0 8082 	blt.w	81084e0 <UART_SetConfig+0x6c4>
 81083dc:	3b02      	subs	r3, #2
 81083de:	2b1e      	cmp	r3, #30
 81083e0:	d87e      	bhi.n	81084e0 <UART_SetConfig+0x6c4>
 81083e2:	a201      	add	r2, pc, #4	; (adr r2, 81083e8 <UART_SetConfig+0x5cc>)
 81083e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81083e8:	0810846b 	.word	0x0810846b
 81083ec:	081084e1 	.word	0x081084e1
 81083f0:	08108473 	.word	0x08108473
 81083f4:	081084e1 	.word	0x081084e1
 81083f8:	081084e1 	.word	0x081084e1
 81083fc:	081084e1 	.word	0x081084e1
 8108400:	08108483 	.word	0x08108483
 8108404:	081084e1 	.word	0x081084e1
 8108408:	081084e1 	.word	0x081084e1
 810840c:	081084e1 	.word	0x081084e1
 8108410:	081084e1 	.word	0x081084e1
 8108414:	081084e1 	.word	0x081084e1
 8108418:	081084e1 	.word	0x081084e1
 810841c:	081084e1 	.word	0x081084e1
 8108420:	08108493 	.word	0x08108493
 8108424:	081084e1 	.word	0x081084e1
 8108428:	081084e1 	.word	0x081084e1
 810842c:	081084e1 	.word	0x081084e1
 8108430:	081084e1 	.word	0x081084e1
 8108434:	081084e1 	.word	0x081084e1
 8108438:	081084e1 	.word	0x081084e1
 810843c:	081084e1 	.word	0x081084e1
 8108440:	081084e1 	.word	0x081084e1
 8108444:	081084e1 	.word	0x081084e1
 8108448:	081084e1 	.word	0x081084e1
 810844c:	081084e1 	.word	0x081084e1
 8108450:	081084e1 	.word	0x081084e1
 8108454:	081084e1 	.word	0x081084e1
 8108458:	081084e1 	.word	0x081084e1
 810845c:	081084e1 	.word	0x081084e1
 8108460:	081084d3 	.word	0x081084d3
 8108464:	2b40      	cmp	r3, #64	; 0x40
 8108466:	d037      	beq.n	81084d8 <UART_SetConfig+0x6bc>
 8108468:	e03a      	b.n	81084e0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810846a:	f7fd fa83 	bl	8105974 <HAL_RCCEx_GetD3PCLK1Freq>
 810846e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108470:	e03c      	b.n	81084ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108476:	4618      	mov	r0, r3
 8108478:	f7fd fa92 	bl	81059a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810847c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810847e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108480:	e034      	b.n	81084ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108482:	f107 0318 	add.w	r3, r7, #24
 8108486:	4618      	mov	r0, r3
 8108488:	f7fd fbde 	bl	8105c48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810848c:	69fb      	ldr	r3, [r7, #28]
 810848e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108490:	e02c      	b.n	81084ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108492:	4b09      	ldr	r3, [pc, #36]	; (81084b8 <UART_SetConfig+0x69c>)
 8108494:	681b      	ldr	r3, [r3, #0]
 8108496:	f003 0320 	and.w	r3, r3, #32
 810849a:	2b00      	cmp	r3, #0
 810849c:	d016      	beq.n	81084cc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810849e:	4b06      	ldr	r3, [pc, #24]	; (81084b8 <UART_SetConfig+0x69c>)
 81084a0:	681b      	ldr	r3, [r3, #0]
 81084a2:	08db      	lsrs	r3, r3, #3
 81084a4:	f003 0303 	and.w	r3, r3, #3
 81084a8:	4a07      	ldr	r2, [pc, #28]	; (81084c8 <UART_SetConfig+0x6ac>)
 81084aa:	fa22 f303 	lsr.w	r3, r2, r3
 81084ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81084b0:	e01c      	b.n	81084ec <UART_SetConfig+0x6d0>
 81084b2:	bf00      	nop
 81084b4:	40011400 	.word	0x40011400
 81084b8:	58024400 	.word	0x58024400
 81084bc:	40007800 	.word	0x40007800
 81084c0:	40007c00 	.word	0x40007c00
 81084c4:	58000c00 	.word	0x58000c00
 81084c8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 81084cc:	4b9d      	ldr	r3, [pc, #628]	; (8108744 <UART_SetConfig+0x928>)
 81084ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81084d0:	e00c      	b.n	81084ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81084d2:	4b9d      	ldr	r3, [pc, #628]	; (8108748 <UART_SetConfig+0x92c>)
 81084d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81084d6:	e009      	b.n	81084ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81084d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81084dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81084de:	e005      	b.n	81084ec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 81084e0:	2300      	movs	r3, #0
 81084e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81084e4:	2301      	movs	r3, #1
 81084e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81084ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 81084ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81084ee:	2b00      	cmp	r3, #0
 81084f0:	f000 81de 	beq.w	81088b0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81084f4:	697b      	ldr	r3, [r7, #20]
 81084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81084f8:	4a94      	ldr	r2, [pc, #592]	; (810874c <UART_SetConfig+0x930>)
 81084fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81084fe:	461a      	mov	r2, r3
 8108500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108502:	fbb3 f3f2 	udiv	r3, r3, r2
 8108506:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108508:	697b      	ldr	r3, [r7, #20]
 810850a:	685a      	ldr	r2, [r3, #4]
 810850c:	4613      	mov	r3, r2
 810850e:	005b      	lsls	r3, r3, #1
 8108510:	4413      	add	r3, r2
 8108512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108514:	429a      	cmp	r2, r3
 8108516:	d305      	bcc.n	8108524 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8108518:	697b      	ldr	r3, [r7, #20]
 810851a:	685b      	ldr	r3, [r3, #4]
 810851c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810851e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108520:	429a      	cmp	r2, r3
 8108522:	d903      	bls.n	810852c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8108524:	2301      	movs	r3, #1
 8108526:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810852a:	e1c1      	b.n	81088b0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810852c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810852e:	2200      	movs	r2, #0
 8108530:	60bb      	str	r3, [r7, #8]
 8108532:	60fa      	str	r2, [r7, #12]
 8108534:	697b      	ldr	r3, [r7, #20]
 8108536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108538:	4a84      	ldr	r2, [pc, #528]	; (810874c <UART_SetConfig+0x930>)
 810853a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810853e:	b29b      	uxth	r3, r3
 8108540:	2200      	movs	r2, #0
 8108542:	603b      	str	r3, [r7, #0]
 8108544:	607a      	str	r2, [r7, #4]
 8108546:	e9d7 2300 	ldrd	r2, r3, [r7]
 810854a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810854e:	f7f7 ff1f 	bl	8100390 <__aeabi_uldivmod>
 8108552:	4602      	mov	r2, r0
 8108554:	460b      	mov	r3, r1
 8108556:	4610      	mov	r0, r2
 8108558:	4619      	mov	r1, r3
 810855a:	f04f 0200 	mov.w	r2, #0
 810855e:	f04f 0300 	mov.w	r3, #0
 8108562:	020b      	lsls	r3, r1, #8
 8108564:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8108568:	0202      	lsls	r2, r0, #8
 810856a:	6979      	ldr	r1, [r7, #20]
 810856c:	6849      	ldr	r1, [r1, #4]
 810856e:	0849      	lsrs	r1, r1, #1
 8108570:	2000      	movs	r0, #0
 8108572:	460c      	mov	r4, r1
 8108574:	4605      	mov	r5, r0
 8108576:	eb12 0804 	adds.w	r8, r2, r4
 810857a:	eb43 0905 	adc.w	r9, r3, r5
 810857e:	697b      	ldr	r3, [r7, #20]
 8108580:	685b      	ldr	r3, [r3, #4]
 8108582:	2200      	movs	r2, #0
 8108584:	469a      	mov	sl, r3
 8108586:	4693      	mov	fp, r2
 8108588:	4652      	mov	r2, sl
 810858a:	465b      	mov	r3, fp
 810858c:	4640      	mov	r0, r8
 810858e:	4649      	mov	r1, r9
 8108590:	f7f7 fefe 	bl	8100390 <__aeabi_uldivmod>
 8108594:	4602      	mov	r2, r0
 8108596:	460b      	mov	r3, r1
 8108598:	4613      	mov	r3, r2
 810859a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810859c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810859e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81085a2:	d308      	bcc.n	81085b6 <UART_SetConfig+0x79a>
 81085a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81085a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81085aa:	d204      	bcs.n	81085b6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 81085ac:	697b      	ldr	r3, [r7, #20]
 81085ae:	681b      	ldr	r3, [r3, #0]
 81085b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81085b2:	60da      	str	r2, [r3, #12]
 81085b4:	e17c      	b.n	81088b0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 81085b6:	2301      	movs	r3, #1
 81085b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81085bc:	e178      	b.n	81088b0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81085be:	697b      	ldr	r3, [r7, #20]
 81085c0:	69db      	ldr	r3, [r3, #28]
 81085c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81085c6:	f040 80c5 	bne.w	8108754 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 81085ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81085ce:	2b20      	cmp	r3, #32
 81085d0:	dc48      	bgt.n	8108664 <UART_SetConfig+0x848>
 81085d2:	2b00      	cmp	r3, #0
 81085d4:	db7b      	blt.n	81086ce <UART_SetConfig+0x8b2>
 81085d6:	2b20      	cmp	r3, #32
 81085d8:	d879      	bhi.n	81086ce <UART_SetConfig+0x8b2>
 81085da:	a201      	add	r2, pc, #4	; (adr r2, 81085e0 <UART_SetConfig+0x7c4>)
 81085dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81085e0:	0810866b 	.word	0x0810866b
 81085e4:	08108673 	.word	0x08108673
 81085e8:	081086cf 	.word	0x081086cf
 81085ec:	081086cf 	.word	0x081086cf
 81085f0:	0810867b 	.word	0x0810867b
 81085f4:	081086cf 	.word	0x081086cf
 81085f8:	081086cf 	.word	0x081086cf
 81085fc:	081086cf 	.word	0x081086cf
 8108600:	0810868b 	.word	0x0810868b
 8108604:	081086cf 	.word	0x081086cf
 8108608:	081086cf 	.word	0x081086cf
 810860c:	081086cf 	.word	0x081086cf
 8108610:	081086cf 	.word	0x081086cf
 8108614:	081086cf 	.word	0x081086cf
 8108618:	081086cf 	.word	0x081086cf
 810861c:	081086cf 	.word	0x081086cf
 8108620:	0810869b 	.word	0x0810869b
 8108624:	081086cf 	.word	0x081086cf
 8108628:	081086cf 	.word	0x081086cf
 810862c:	081086cf 	.word	0x081086cf
 8108630:	081086cf 	.word	0x081086cf
 8108634:	081086cf 	.word	0x081086cf
 8108638:	081086cf 	.word	0x081086cf
 810863c:	081086cf 	.word	0x081086cf
 8108640:	081086cf 	.word	0x081086cf
 8108644:	081086cf 	.word	0x081086cf
 8108648:	081086cf 	.word	0x081086cf
 810864c:	081086cf 	.word	0x081086cf
 8108650:	081086cf 	.word	0x081086cf
 8108654:	081086cf 	.word	0x081086cf
 8108658:	081086cf 	.word	0x081086cf
 810865c:	081086cf 	.word	0x081086cf
 8108660:	081086c1 	.word	0x081086c1
 8108664:	2b40      	cmp	r3, #64	; 0x40
 8108666:	d02e      	beq.n	81086c6 <UART_SetConfig+0x8aa>
 8108668:	e031      	b.n	81086ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810866a:	f7fc fa11 	bl	8104a90 <HAL_RCC_GetPCLK1Freq>
 810866e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108670:	e033      	b.n	81086da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108672:	f7fc fa23 	bl	8104abc <HAL_RCC_GetPCLK2Freq>
 8108676:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108678:	e02f      	b.n	81086da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810867a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810867e:	4618      	mov	r0, r3
 8108680:	f7fd f98e 	bl	81059a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108688:	e027      	b.n	81086da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810868a:	f107 0318 	add.w	r3, r7, #24
 810868e:	4618      	mov	r0, r3
 8108690:	f7fd fada 	bl	8105c48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108694:	69fb      	ldr	r3, [r7, #28]
 8108696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108698:	e01f      	b.n	81086da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810869a:	4b2d      	ldr	r3, [pc, #180]	; (8108750 <UART_SetConfig+0x934>)
 810869c:	681b      	ldr	r3, [r3, #0]
 810869e:	f003 0320 	and.w	r3, r3, #32
 81086a2:	2b00      	cmp	r3, #0
 81086a4:	d009      	beq.n	81086ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81086a6:	4b2a      	ldr	r3, [pc, #168]	; (8108750 <UART_SetConfig+0x934>)
 81086a8:	681b      	ldr	r3, [r3, #0]
 81086aa:	08db      	lsrs	r3, r3, #3
 81086ac:	f003 0303 	and.w	r3, r3, #3
 81086b0:	4a24      	ldr	r2, [pc, #144]	; (8108744 <UART_SetConfig+0x928>)
 81086b2:	fa22 f303 	lsr.w	r3, r2, r3
 81086b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81086b8:	e00f      	b.n	81086da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 81086ba:	4b22      	ldr	r3, [pc, #136]	; (8108744 <UART_SetConfig+0x928>)
 81086bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81086be:	e00c      	b.n	81086da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81086c0:	4b21      	ldr	r3, [pc, #132]	; (8108748 <UART_SetConfig+0x92c>)
 81086c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81086c4:	e009      	b.n	81086da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81086c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81086ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81086cc:	e005      	b.n	81086da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 81086ce:	2300      	movs	r3, #0
 81086d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81086d2:	2301      	movs	r3, #1
 81086d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81086d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81086da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81086dc:	2b00      	cmp	r3, #0
 81086de:	f000 80e7 	beq.w	81088b0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81086e2:	697b      	ldr	r3, [r7, #20]
 81086e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81086e6:	4a19      	ldr	r2, [pc, #100]	; (810874c <UART_SetConfig+0x930>)
 81086e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81086ec:	461a      	mov	r2, r3
 81086ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81086f0:	fbb3 f3f2 	udiv	r3, r3, r2
 81086f4:	005a      	lsls	r2, r3, #1
 81086f6:	697b      	ldr	r3, [r7, #20]
 81086f8:	685b      	ldr	r3, [r3, #4]
 81086fa:	085b      	lsrs	r3, r3, #1
 81086fc:	441a      	add	r2, r3
 81086fe:	697b      	ldr	r3, [r7, #20]
 8108700:	685b      	ldr	r3, [r3, #4]
 8108702:	fbb2 f3f3 	udiv	r3, r2, r3
 8108706:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810870a:	2b0f      	cmp	r3, #15
 810870c:	d916      	bls.n	810873c <UART_SetConfig+0x920>
 810870e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108714:	d212      	bcs.n	810873c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8108716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108718:	b29b      	uxth	r3, r3
 810871a:	f023 030f 	bic.w	r3, r3, #15
 810871e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8108720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108722:	085b      	lsrs	r3, r3, #1
 8108724:	b29b      	uxth	r3, r3
 8108726:	f003 0307 	and.w	r3, r3, #7
 810872a:	b29a      	uxth	r2, r3
 810872c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 810872e:	4313      	orrs	r3, r2
 8108730:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8108732:	697b      	ldr	r3, [r7, #20]
 8108734:	681b      	ldr	r3, [r3, #0]
 8108736:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8108738:	60da      	str	r2, [r3, #12]
 810873a:	e0b9      	b.n	81088b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810873c:	2301      	movs	r3, #1
 810873e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8108742:	e0b5      	b.n	81088b0 <UART_SetConfig+0xa94>
 8108744:	03d09000 	.word	0x03d09000
 8108748:	003d0900 	.word	0x003d0900
 810874c:	081098c8 	.word	0x081098c8
 8108750:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8108754:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8108758:	2b20      	cmp	r3, #32
 810875a:	dc49      	bgt.n	81087f0 <UART_SetConfig+0x9d4>
 810875c:	2b00      	cmp	r3, #0
 810875e:	db7c      	blt.n	810885a <UART_SetConfig+0xa3e>
 8108760:	2b20      	cmp	r3, #32
 8108762:	d87a      	bhi.n	810885a <UART_SetConfig+0xa3e>
 8108764:	a201      	add	r2, pc, #4	; (adr r2, 810876c <UART_SetConfig+0x950>)
 8108766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810876a:	bf00      	nop
 810876c:	081087f7 	.word	0x081087f7
 8108770:	081087ff 	.word	0x081087ff
 8108774:	0810885b 	.word	0x0810885b
 8108778:	0810885b 	.word	0x0810885b
 810877c:	08108807 	.word	0x08108807
 8108780:	0810885b 	.word	0x0810885b
 8108784:	0810885b 	.word	0x0810885b
 8108788:	0810885b 	.word	0x0810885b
 810878c:	08108817 	.word	0x08108817
 8108790:	0810885b 	.word	0x0810885b
 8108794:	0810885b 	.word	0x0810885b
 8108798:	0810885b 	.word	0x0810885b
 810879c:	0810885b 	.word	0x0810885b
 81087a0:	0810885b 	.word	0x0810885b
 81087a4:	0810885b 	.word	0x0810885b
 81087a8:	0810885b 	.word	0x0810885b
 81087ac:	08108827 	.word	0x08108827
 81087b0:	0810885b 	.word	0x0810885b
 81087b4:	0810885b 	.word	0x0810885b
 81087b8:	0810885b 	.word	0x0810885b
 81087bc:	0810885b 	.word	0x0810885b
 81087c0:	0810885b 	.word	0x0810885b
 81087c4:	0810885b 	.word	0x0810885b
 81087c8:	0810885b 	.word	0x0810885b
 81087cc:	0810885b 	.word	0x0810885b
 81087d0:	0810885b 	.word	0x0810885b
 81087d4:	0810885b 	.word	0x0810885b
 81087d8:	0810885b 	.word	0x0810885b
 81087dc:	0810885b 	.word	0x0810885b
 81087e0:	0810885b 	.word	0x0810885b
 81087e4:	0810885b 	.word	0x0810885b
 81087e8:	0810885b 	.word	0x0810885b
 81087ec:	0810884d 	.word	0x0810884d
 81087f0:	2b40      	cmp	r3, #64	; 0x40
 81087f2:	d02e      	beq.n	8108852 <UART_SetConfig+0xa36>
 81087f4:	e031      	b.n	810885a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81087f6:	f7fc f94b 	bl	8104a90 <HAL_RCC_GetPCLK1Freq>
 81087fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81087fc:	e033      	b.n	8108866 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81087fe:	f7fc f95d 	bl	8104abc <HAL_RCC_GetPCLK2Freq>
 8108802:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108804:	e02f      	b.n	8108866 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810880a:	4618      	mov	r0, r3
 810880c:	f7fd f8c8 	bl	81059a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108814:	e027      	b.n	8108866 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108816:	f107 0318 	add.w	r3, r7, #24
 810881a:	4618      	mov	r0, r3
 810881c:	f7fd fa14 	bl	8105c48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108820:	69fb      	ldr	r3, [r7, #28]
 8108822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108824:	e01f      	b.n	8108866 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108826:	4b2d      	ldr	r3, [pc, #180]	; (81088dc <UART_SetConfig+0xac0>)
 8108828:	681b      	ldr	r3, [r3, #0]
 810882a:	f003 0320 	and.w	r3, r3, #32
 810882e:	2b00      	cmp	r3, #0
 8108830:	d009      	beq.n	8108846 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108832:	4b2a      	ldr	r3, [pc, #168]	; (81088dc <UART_SetConfig+0xac0>)
 8108834:	681b      	ldr	r3, [r3, #0]
 8108836:	08db      	lsrs	r3, r3, #3
 8108838:	f003 0303 	and.w	r3, r3, #3
 810883c:	4a28      	ldr	r2, [pc, #160]	; (81088e0 <UART_SetConfig+0xac4>)
 810883e:	fa22 f303 	lsr.w	r3, r2, r3
 8108842:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108844:	e00f      	b.n	8108866 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8108846:	4b26      	ldr	r3, [pc, #152]	; (81088e0 <UART_SetConfig+0xac4>)
 8108848:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810884a:	e00c      	b.n	8108866 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810884c:	4b25      	ldr	r3, [pc, #148]	; (81088e4 <UART_SetConfig+0xac8>)
 810884e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108850:	e009      	b.n	8108866 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108858:	e005      	b.n	8108866 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810885a:	2300      	movs	r3, #0
 810885c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810885e:	2301      	movs	r3, #1
 8108860:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108864:	bf00      	nop
    }

    if (pclk != 0U)
 8108866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108868:	2b00      	cmp	r3, #0
 810886a:	d021      	beq.n	81088b0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810886c:	697b      	ldr	r3, [r7, #20]
 810886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108870:	4a1d      	ldr	r2, [pc, #116]	; (81088e8 <UART_SetConfig+0xacc>)
 8108872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108876:	461a      	mov	r2, r3
 8108878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810887a:	fbb3 f2f2 	udiv	r2, r3, r2
 810887e:	697b      	ldr	r3, [r7, #20]
 8108880:	685b      	ldr	r3, [r3, #4]
 8108882:	085b      	lsrs	r3, r3, #1
 8108884:	441a      	add	r2, r3
 8108886:	697b      	ldr	r3, [r7, #20]
 8108888:	685b      	ldr	r3, [r3, #4]
 810888a:	fbb2 f3f3 	udiv	r3, r2, r3
 810888e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108892:	2b0f      	cmp	r3, #15
 8108894:	d909      	bls.n	81088aa <UART_SetConfig+0xa8e>
 8108896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810889c:	d205      	bcs.n	81088aa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810889e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81088a0:	b29a      	uxth	r2, r3
 81088a2:	697b      	ldr	r3, [r7, #20]
 81088a4:	681b      	ldr	r3, [r3, #0]
 81088a6:	60da      	str	r2, [r3, #12]
 81088a8:	e002      	b.n	81088b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81088aa:	2301      	movs	r3, #1
 81088ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81088b0:	697b      	ldr	r3, [r7, #20]
 81088b2:	2201      	movs	r2, #1
 81088b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 81088b8:	697b      	ldr	r3, [r7, #20]
 81088ba:	2201      	movs	r2, #1
 81088bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81088c0:	697b      	ldr	r3, [r7, #20]
 81088c2:	2200      	movs	r2, #0
 81088c4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 81088c6:	697b      	ldr	r3, [r7, #20]
 81088c8:	2200      	movs	r2, #0
 81088ca:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 81088cc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 81088d0:	4618      	mov	r0, r3
 81088d2:	3748      	adds	r7, #72	; 0x48
 81088d4:	46bd      	mov	sp, r7
 81088d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81088da:	bf00      	nop
 81088dc:	58024400 	.word	0x58024400
 81088e0:	03d09000 	.word	0x03d09000
 81088e4:	003d0900 	.word	0x003d0900
 81088e8:	081098c8 	.word	0x081098c8

081088ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81088ec:	b480      	push	{r7}
 81088ee:	b083      	sub	sp, #12
 81088f0:	af00      	add	r7, sp, #0
 81088f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81088f4:	687b      	ldr	r3, [r7, #4]
 81088f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81088f8:	f003 0301 	and.w	r3, r3, #1
 81088fc:	2b00      	cmp	r3, #0
 81088fe:	d00a      	beq.n	8108916 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8108900:	687b      	ldr	r3, [r7, #4]
 8108902:	681b      	ldr	r3, [r3, #0]
 8108904:	685b      	ldr	r3, [r3, #4]
 8108906:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810890a:	687b      	ldr	r3, [r7, #4]
 810890c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810890e:	687b      	ldr	r3, [r7, #4]
 8108910:	681b      	ldr	r3, [r3, #0]
 8108912:	430a      	orrs	r2, r1
 8108914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8108916:	687b      	ldr	r3, [r7, #4]
 8108918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810891a:	f003 0302 	and.w	r3, r3, #2
 810891e:	2b00      	cmp	r3, #0
 8108920:	d00a      	beq.n	8108938 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8108922:	687b      	ldr	r3, [r7, #4]
 8108924:	681b      	ldr	r3, [r3, #0]
 8108926:	685b      	ldr	r3, [r3, #4]
 8108928:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810892c:	687b      	ldr	r3, [r7, #4]
 810892e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8108930:	687b      	ldr	r3, [r7, #4]
 8108932:	681b      	ldr	r3, [r3, #0]
 8108934:	430a      	orrs	r2, r1
 8108936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8108938:	687b      	ldr	r3, [r7, #4]
 810893a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810893c:	f003 0304 	and.w	r3, r3, #4
 8108940:	2b00      	cmp	r3, #0
 8108942:	d00a      	beq.n	810895a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8108944:	687b      	ldr	r3, [r7, #4]
 8108946:	681b      	ldr	r3, [r3, #0]
 8108948:	685b      	ldr	r3, [r3, #4]
 810894a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810894e:	687b      	ldr	r3, [r7, #4]
 8108950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108952:	687b      	ldr	r3, [r7, #4]
 8108954:	681b      	ldr	r3, [r3, #0]
 8108956:	430a      	orrs	r2, r1
 8108958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810895a:	687b      	ldr	r3, [r7, #4]
 810895c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810895e:	f003 0308 	and.w	r3, r3, #8
 8108962:	2b00      	cmp	r3, #0
 8108964:	d00a      	beq.n	810897c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8108966:	687b      	ldr	r3, [r7, #4]
 8108968:	681b      	ldr	r3, [r3, #0]
 810896a:	685b      	ldr	r3, [r3, #4]
 810896c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8108970:	687b      	ldr	r3, [r7, #4]
 8108972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108974:	687b      	ldr	r3, [r7, #4]
 8108976:	681b      	ldr	r3, [r3, #0]
 8108978:	430a      	orrs	r2, r1
 810897a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810897c:	687b      	ldr	r3, [r7, #4]
 810897e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108980:	f003 0310 	and.w	r3, r3, #16
 8108984:	2b00      	cmp	r3, #0
 8108986:	d00a      	beq.n	810899e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8108988:	687b      	ldr	r3, [r7, #4]
 810898a:	681b      	ldr	r3, [r3, #0]
 810898c:	689b      	ldr	r3, [r3, #8]
 810898e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8108992:	687b      	ldr	r3, [r7, #4]
 8108994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8108996:	687b      	ldr	r3, [r7, #4]
 8108998:	681b      	ldr	r3, [r3, #0]
 810899a:	430a      	orrs	r2, r1
 810899c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810899e:	687b      	ldr	r3, [r7, #4]
 81089a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81089a2:	f003 0320 	and.w	r3, r3, #32
 81089a6:	2b00      	cmp	r3, #0
 81089a8:	d00a      	beq.n	81089c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81089aa:	687b      	ldr	r3, [r7, #4]
 81089ac:	681b      	ldr	r3, [r3, #0]
 81089ae:	689b      	ldr	r3, [r3, #8]
 81089b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 81089b4:	687b      	ldr	r3, [r7, #4]
 81089b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 81089b8:	687b      	ldr	r3, [r7, #4]
 81089ba:	681b      	ldr	r3, [r3, #0]
 81089bc:	430a      	orrs	r2, r1
 81089be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81089c0:	687b      	ldr	r3, [r7, #4]
 81089c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81089c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81089c8:	2b00      	cmp	r3, #0
 81089ca:	d01a      	beq.n	8108a02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 81089cc:	687b      	ldr	r3, [r7, #4]
 81089ce:	681b      	ldr	r3, [r3, #0]
 81089d0:	685b      	ldr	r3, [r3, #4]
 81089d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 81089d6:	687b      	ldr	r3, [r7, #4]
 81089d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81089da:	687b      	ldr	r3, [r7, #4]
 81089dc:	681b      	ldr	r3, [r3, #0]
 81089de:	430a      	orrs	r2, r1
 81089e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 81089e2:	687b      	ldr	r3, [r7, #4]
 81089e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81089e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81089ea:	d10a      	bne.n	8108a02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 81089ec:	687b      	ldr	r3, [r7, #4]
 81089ee:	681b      	ldr	r3, [r3, #0]
 81089f0:	685b      	ldr	r3, [r3, #4]
 81089f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 81089f6:	687b      	ldr	r3, [r7, #4]
 81089f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 81089fa:	687b      	ldr	r3, [r7, #4]
 81089fc:	681b      	ldr	r3, [r3, #0]
 81089fe:	430a      	orrs	r2, r1
 8108a00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8108a02:	687b      	ldr	r3, [r7, #4]
 8108a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108a0a:	2b00      	cmp	r3, #0
 8108a0c:	d00a      	beq.n	8108a24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8108a0e:	687b      	ldr	r3, [r7, #4]
 8108a10:	681b      	ldr	r3, [r3, #0]
 8108a12:	685b      	ldr	r3, [r3, #4]
 8108a14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8108a18:	687b      	ldr	r3, [r7, #4]
 8108a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8108a1c:	687b      	ldr	r3, [r7, #4]
 8108a1e:	681b      	ldr	r3, [r3, #0]
 8108a20:	430a      	orrs	r2, r1
 8108a22:	605a      	str	r2, [r3, #4]
  }
}
 8108a24:	bf00      	nop
 8108a26:	370c      	adds	r7, #12
 8108a28:	46bd      	mov	sp, r7
 8108a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a2e:	4770      	bx	lr

08108a30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8108a30:	b580      	push	{r7, lr}
 8108a32:	b086      	sub	sp, #24
 8108a34:	af02      	add	r7, sp, #8
 8108a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108a38:	687b      	ldr	r3, [r7, #4]
 8108a3a:	2200      	movs	r2, #0
 8108a3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8108a40:	f7f9 f902 	bl	8101c48 <HAL_GetTick>
 8108a44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8108a46:	687b      	ldr	r3, [r7, #4]
 8108a48:	681b      	ldr	r3, [r3, #0]
 8108a4a:	681b      	ldr	r3, [r3, #0]
 8108a4c:	f003 0308 	and.w	r3, r3, #8
 8108a50:	2b08      	cmp	r3, #8
 8108a52:	d10e      	bne.n	8108a72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108a54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108a58:	9300      	str	r3, [sp, #0]
 8108a5a:	68fb      	ldr	r3, [r7, #12]
 8108a5c:	2200      	movs	r2, #0
 8108a5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8108a62:	6878      	ldr	r0, [r7, #4]
 8108a64:	f000 f82f 	bl	8108ac6 <UART_WaitOnFlagUntilTimeout>
 8108a68:	4603      	mov	r3, r0
 8108a6a:	2b00      	cmp	r3, #0
 8108a6c:	d001      	beq.n	8108a72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108a6e:	2303      	movs	r3, #3
 8108a70:	e025      	b.n	8108abe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8108a72:	687b      	ldr	r3, [r7, #4]
 8108a74:	681b      	ldr	r3, [r3, #0]
 8108a76:	681b      	ldr	r3, [r3, #0]
 8108a78:	f003 0304 	and.w	r3, r3, #4
 8108a7c:	2b04      	cmp	r3, #4
 8108a7e:	d10e      	bne.n	8108a9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108a80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108a84:	9300      	str	r3, [sp, #0]
 8108a86:	68fb      	ldr	r3, [r7, #12]
 8108a88:	2200      	movs	r2, #0
 8108a8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8108a8e:	6878      	ldr	r0, [r7, #4]
 8108a90:	f000 f819 	bl	8108ac6 <UART_WaitOnFlagUntilTimeout>
 8108a94:	4603      	mov	r3, r0
 8108a96:	2b00      	cmp	r3, #0
 8108a98:	d001      	beq.n	8108a9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108a9a:	2303      	movs	r3, #3
 8108a9c:	e00f      	b.n	8108abe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8108a9e:	687b      	ldr	r3, [r7, #4]
 8108aa0:	2220      	movs	r2, #32
 8108aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8108aa6:	687b      	ldr	r3, [r7, #4]
 8108aa8:	2220      	movs	r2, #32
 8108aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108aae:	687b      	ldr	r3, [r7, #4]
 8108ab0:	2200      	movs	r2, #0
 8108ab2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8108ab4:	687b      	ldr	r3, [r7, #4]
 8108ab6:	2200      	movs	r2, #0
 8108ab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108abc:	2300      	movs	r3, #0
}
 8108abe:	4618      	mov	r0, r3
 8108ac0:	3710      	adds	r7, #16
 8108ac2:	46bd      	mov	sp, r7
 8108ac4:	bd80      	pop	{r7, pc}

08108ac6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8108ac6:	b580      	push	{r7, lr}
 8108ac8:	b09c      	sub	sp, #112	; 0x70
 8108aca:	af00      	add	r7, sp, #0
 8108acc:	60f8      	str	r0, [r7, #12]
 8108ace:	60b9      	str	r1, [r7, #8]
 8108ad0:	603b      	str	r3, [r7, #0]
 8108ad2:	4613      	mov	r3, r2
 8108ad4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108ad6:	e0a9      	b.n	8108c2c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8108ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8108ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108ade:	f000 80a5 	beq.w	8108c2c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108ae2:	f7f9 f8b1 	bl	8101c48 <HAL_GetTick>
 8108ae6:	4602      	mov	r2, r0
 8108ae8:	683b      	ldr	r3, [r7, #0]
 8108aea:	1ad3      	subs	r3, r2, r3
 8108aec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8108aee:	429a      	cmp	r2, r3
 8108af0:	d302      	bcc.n	8108af8 <UART_WaitOnFlagUntilTimeout+0x32>
 8108af2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8108af4:	2b00      	cmp	r3, #0
 8108af6:	d140      	bne.n	8108b7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8108af8:	68fb      	ldr	r3, [r7, #12]
 8108afa:	681b      	ldr	r3, [r3, #0]
 8108afc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8108b00:	e853 3f00 	ldrex	r3, [r3]
 8108b04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8108b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108b08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8108b0c:	667b      	str	r3, [r7, #100]	; 0x64
 8108b0e:	68fb      	ldr	r3, [r7, #12]
 8108b10:	681b      	ldr	r3, [r3, #0]
 8108b12:	461a      	mov	r2, r3
 8108b14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8108b16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8108b18:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108b1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8108b1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8108b1e:	e841 2300 	strex	r3, r2, [r1]
 8108b22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8108b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8108b26:	2b00      	cmp	r3, #0
 8108b28:	d1e6      	bne.n	8108af8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108b2a:	68fb      	ldr	r3, [r7, #12]
 8108b2c:	681b      	ldr	r3, [r3, #0]
 8108b2e:	3308      	adds	r3, #8
 8108b30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108b34:	e853 3f00 	ldrex	r3, [r3]
 8108b38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8108b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108b3c:	f023 0301 	bic.w	r3, r3, #1
 8108b40:	663b      	str	r3, [r7, #96]	; 0x60
 8108b42:	68fb      	ldr	r3, [r7, #12]
 8108b44:	681b      	ldr	r3, [r3, #0]
 8108b46:	3308      	adds	r3, #8
 8108b48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8108b4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8108b4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108b4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8108b50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8108b52:	e841 2300 	strex	r3, r2, [r1]
 8108b56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8108b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8108b5a:	2b00      	cmp	r3, #0
 8108b5c:	d1e5      	bne.n	8108b2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8108b5e:	68fb      	ldr	r3, [r7, #12]
 8108b60:	2220      	movs	r2, #32
 8108b62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8108b66:	68fb      	ldr	r3, [r7, #12]
 8108b68:	2220      	movs	r2, #32
 8108b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8108b6e:	68fb      	ldr	r3, [r7, #12]
 8108b70:	2200      	movs	r2, #0
 8108b72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8108b76:	2303      	movs	r3, #3
 8108b78:	e069      	b.n	8108c4e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8108b7a:	68fb      	ldr	r3, [r7, #12]
 8108b7c:	681b      	ldr	r3, [r3, #0]
 8108b7e:	681b      	ldr	r3, [r3, #0]
 8108b80:	f003 0304 	and.w	r3, r3, #4
 8108b84:	2b00      	cmp	r3, #0
 8108b86:	d051      	beq.n	8108c2c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8108b88:	68fb      	ldr	r3, [r7, #12]
 8108b8a:	681b      	ldr	r3, [r3, #0]
 8108b8c:	69db      	ldr	r3, [r3, #28]
 8108b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108b96:	d149      	bne.n	8108c2c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8108b98:	68fb      	ldr	r3, [r7, #12]
 8108b9a:	681b      	ldr	r3, [r3, #0]
 8108b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8108ba0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8108ba2:	68fb      	ldr	r3, [r7, #12]
 8108ba4:	681b      	ldr	r3, [r3, #0]
 8108ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108baa:	e853 3f00 	ldrex	r3, [r3]
 8108bae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8108bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108bb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8108bb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8108bb8:	68fb      	ldr	r3, [r7, #12]
 8108bba:	681b      	ldr	r3, [r3, #0]
 8108bbc:	461a      	mov	r2, r3
 8108bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8108bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8108bc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108bc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8108bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8108bc8:	e841 2300 	strex	r3, r2, [r1]
 8108bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8108bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108bd0:	2b00      	cmp	r3, #0
 8108bd2:	d1e6      	bne.n	8108ba2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108bd4:	68fb      	ldr	r3, [r7, #12]
 8108bd6:	681b      	ldr	r3, [r3, #0]
 8108bd8:	3308      	adds	r3, #8
 8108bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108bdc:	697b      	ldr	r3, [r7, #20]
 8108bde:	e853 3f00 	ldrex	r3, [r3]
 8108be2:	613b      	str	r3, [r7, #16]
   return(result);
 8108be4:	693b      	ldr	r3, [r7, #16]
 8108be6:	f023 0301 	bic.w	r3, r3, #1
 8108bea:	66bb      	str	r3, [r7, #104]	; 0x68
 8108bec:	68fb      	ldr	r3, [r7, #12]
 8108bee:	681b      	ldr	r3, [r3, #0]
 8108bf0:	3308      	adds	r3, #8
 8108bf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8108bf4:	623a      	str	r2, [r7, #32]
 8108bf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108bf8:	69f9      	ldr	r1, [r7, #28]
 8108bfa:	6a3a      	ldr	r2, [r7, #32]
 8108bfc:	e841 2300 	strex	r3, r2, [r1]
 8108c00:	61bb      	str	r3, [r7, #24]
   return(result);
 8108c02:	69bb      	ldr	r3, [r7, #24]
 8108c04:	2b00      	cmp	r3, #0
 8108c06:	d1e5      	bne.n	8108bd4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8108c08:	68fb      	ldr	r3, [r7, #12]
 8108c0a:	2220      	movs	r2, #32
 8108c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8108c10:	68fb      	ldr	r3, [r7, #12]
 8108c12:	2220      	movs	r2, #32
 8108c14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8108c18:	68fb      	ldr	r3, [r7, #12]
 8108c1a:	2220      	movs	r2, #32
 8108c1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8108c20:	68fb      	ldr	r3, [r7, #12]
 8108c22:	2200      	movs	r2, #0
 8108c24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8108c28:	2303      	movs	r3, #3
 8108c2a:	e010      	b.n	8108c4e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108c2c:	68fb      	ldr	r3, [r7, #12]
 8108c2e:	681b      	ldr	r3, [r3, #0]
 8108c30:	69da      	ldr	r2, [r3, #28]
 8108c32:	68bb      	ldr	r3, [r7, #8]
 8108c34:	4013      	ands	r3, r2
 8108c36:	68ba      	ldr	r2, [r7, #8]
 8108c38:	429a      	cmp	r2, r3
 8108c3a:	bf0c      	ite	eq
 8108c3c:	2301      	moveq	r3, #1
 8108c3e:	2300      	movne	r3, #0
 8108c40:	b2db      	uxtb	r3, r3
 8108c42:	461a      	mov	r2, r3
 8108c44:	79fb      	ldrb	r3, [r7, #7]
 8108c46:	429a      	cmp	r2, r3
 8108c48:	f43f af46 	beq.w	8108ad8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8108c4c:	2300      	movs	r3, #0
}
 8108c4e:	4618      	mov	r0, r3
 8108c50:	3770      	adds	r7, #112	; 0x70
 8108c52:	46bd      	mov	sp, r7
 8108c54:	bd80      	pop	{r7, pc}

08108c56 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8108c56:	b480      	push	{r7}
 8108c58:	b085      	sub	sp, #20
 8108c5a:	af00      	add	r7, sp, #0
 8108c5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108c5e:	687b      	ldr	r3, [r7, #4]
 8108c60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8108c64:	2b01      	cmp	r3, #1
 8108c66:	d101      	bne.n	8108c6c <HAL_UARTEx_DisableFifoMode+0x16>
 8108c68:	2302      	movs	r3, #2
 8108c6a:	e027      	b.n	8108cbc <HAL_UARTEx_DisableFifoMode+0x66>
 8108c6c:	687b      	ldr	r3, [r7, #4]
 8108c6e:	2201      	movs	r2, #1
 8108c70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8108c74:	687b      	ldr	r3, [r7, #4]
 8108c76:	2224      	movs	r2, #36	; 0x24
 8108c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108c7c:	687b      	ldr	r3, [r7, #4]
 8108c7e:	681b      	ldr	r3, [r3, #0]
 8108c80:	681b      	ldr	r3, [r3, #0]
 8108c82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108c84:	687b      	ldr	r3, [r7, #4]
 8108c86:	681b      	ldr	r3, [r3, #0]
 8108c88:	681a      	ldr	r2, [r3, #0]
 8108c8a:	687b      	ldr	r3, [r7, #4]
 8108c8c:	681b      	ldr	r3, [r3, #0]
 8108c8e:	f022 0201 	bic.w	r2, r2, #1
 8108c92:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8108c94:	68fb      	ldr	r3, [r7, #12]
 8108c96:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8108c9a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8108c9c:	687b      	ldr	r3, [r7, #4]
 8108c9e:	2200      	movs	r2, #0
 8108ca0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108ca2:	687b      	ldr	r3, [r7, #4]
 8108ca4:	681b      	ldr	r3, [r3, #0]
 8108ca6:	68fa      	ldr	r2, [r7, #12]
 8108ca8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108caa:	687b      	ldr	r3, [r7, #4]
 8108cac:	2220      	movs	r2, #32
 8108cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108cb2:	687b      	ldr	r3, [r7, #4]
 8108cb4:	2200      	movs	r2, #0
 8108cb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108cba:	2300      	movs	r3, #0
}
 8108cbc:	4618      	mov	r0, r3
 8108cbe:	3714      	adds	r7, #20
 8108cc0:	46bd      	mov	sp, r7
 8108cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cc6:	4770      	bx	lr

08108cc8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108cc8:	b580      	push	{r7, lr}
 8108cca:	b084      	sub	sp, #16
 8108ccc:	af00      	add	r7, sp, #0
 8108cce:	6078      	str	r0, [r7, #4]
 8108cd0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108cd2:	687b      	ldr	r3, [r7, #4]
 8108cd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8108cd8:	2b01      	cmp	r3, #1
 8108cda:	d101      	bne.n	8108ce0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8108cdc:	2302      	movs	r3, #2
 8108cde:	e02d      	b.n	8108d3c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8108ce0:	687b      	ldr	r3, [r7, #4]
 8108ce2:	2201      	movs	r2, #1
 8108ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8108ce8:	687b      	ldr	r3, [r7, #4]
 8108cea:	2224      	movs	r2, #36	; 0x24
 8108cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108cf0:	687b      	ldr	r3, [r7, #4]
 8108cf2:	681b      	ldr	r3, [r3, #0]
 8108cf4:	681b      	ldr	r3, [r3, #0]
 8108cf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108cf8:	687b      	ldr	r3, [r7, #4]
 8108cfa:	681b      	ldr	r3, [r3, #0]
 8108cfc:	681a      	ldr	r2, [r3, #0]
 8108cfe:	687b      	ldr	r3, [r7, #4]
 8108d00:	681b      	ldr	r3, [r3, #0]
 8108d02:	f022 0201 	bic.w	r2, r2, #1
 8108d06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8108d08:	687b      	ldr	r3, [r7, #4]
 8108d0a:	681b      	ldr	r3, [r3, #0]
 8108d0c:	689b      	ldr	r3, [r3, #8]
 8108d0e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8108d12:	687b      	ldr	r3, [r7, #4]
 8108d14:	681b      	ldr	r3, [r3, #0]
 8108d16:	683a      	ldr	r2, [r7, #0]
 8108d18:	430a      	orrs	r2, r1
 8108d1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108d1c:	6878      	ldr	r0, [r7, #4]
 8108d1e:	f000 f84f 	bl	8108dc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108d22:	687b      	ldr	r3, [r7, #4]
 8108d24:	681b      	ldr	r3, [r3, #0]
 8108d26:	68fa      	ldr	r2, [r7, #12]
 8108d28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108d2a:	687b      	ldr	r3, [r7, #4]
 8108d2c:	2220      	movs	r2, #32
 8108d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108d32:	687b      	ldr	r3, [r7, #4]
 8108d34:	2200      	movs	r2, #0
 8108d36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108d3a:	2300      	movs	r3, #0
}
 8108d3c:	4618      	mov	r0, r3
 8108d3e:	3710      	adds	r7, #16
 8108d40:	46bd      	mov	sp, r7
 8108d42:	bd80      	pop	{r7, pc}

08108d44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108d44:	b580      	push	{r7, lr}
 8108d46:	b084      	sub	sp, #16
 8108d48:	af00      	add	r7, sp, #0
 8108d4a:	6078      	str	r0, [r7, #4]
 8108d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108d4e:	687b      	ldr	r3, [r7, #4]
 8108d50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8108d54:	2b01      	cmp	r3, #1
 8108d56:	d101      	bne.n	8108d5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8108d58:	2302      	movs	r3, #2
 8108d5a:	e02d      	b.n	8108db8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8108d5c:	687b      	ldr	r3, [r7, #4]
 8108d5e:	2201      	movs	r2, #1
 8108d60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8108d64:	687b      	ldr	r3, [r7, #4]
 8108d66:	2224      	movs	r2, #36	; 0x24
 8108d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108d6c:	687b      	ldr	r3, [r7, #4]
 8108d6e:	681b      	ldr	r3, [r3, #0]
 8108d70:	681b      	ldr	r3, [r3, #0]
 8108d72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108d74:	687b      	ldr	r3, [r7, #4]
 8108d76:	681b      	ldr	r3, [r3, #0]
 8108d78:	681a      	ldr	r2, [r3, #0]
 8108d7a:	687b      	ldr	r3, [r7, #4]
 8108d7c:	681b      	ldr	r3, [r3, #0]
 8108d7e:	f022 0201 	bic.w	r2, r2, #1
 8108d82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8108d84:	687b      	ldr	r3, [r7, #4]
 8108d86:	681b      	ldr	r3, [r3, #0]
 8108d88:	689b      	ldr	r3, [r3, #8]
 8108d8a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8108d8e:	687b      	ldr	r3, [r7, #4]
 8108d90:	681b      	ldr	r3, [r3, #0]
 8108d92:	683a      	ldr	r2, [r7, #0]
 8108d94:	430a      	orrs	r2, r1
 8108d96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108d98:	6878      	ldr	r0, [r7, #4]
 8108d9a:	f000 f811 	bl	8108dc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108d9e:	687b      	ldr	r3, [r7, #4]
 8108da0:	681b      	ldr	r3, [r3, #0]
 8108da2:	68fa      	ldr	r2, [r7, #12]
 8108da4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108da6:	687b      	ldr	r3, [r7, #4]
 8108da8:	2220      	movs	r2, #32
 8108daa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108dae:	687b      	ldr	r3, [r7, #4]
 8108db0:	2200      	movs	r2, #0
 8108db2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108db6:	2300      	movs	r3, #0
}
 8108db8:	4618      	mov	r0, r3
 8108dba:	3710      	adds	r7, #16
 8108dbc:	46bd      	mov	sp, r7
 8108dbe:	bd80      	pop	{r7, pc}

08108dc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8108dc0:	b480      	push	{r7}
 8108dc2:	b085      	sub	sp, #20
 8108dc4:	af00      	add	r7, sp, #0
 8108dc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8108dc8:	687b      	ldr	r3, [r7, #4]
 8108dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108dcc:	2b00      	cmp	r3, #0
 8108dce:	d108      	bne.n	8108de2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8108dd0:	687b      	ldr	r3, [r7, #4]
 8108dd2:	2201      	movs	r2, #1
 8108dd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8108dd8:	687b      	ldr	r3, [r7, #4]
 8108dda:	2201      	movs	r2, #1
 8108ddc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8108de0:	e031      	b.n	8108e46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8108de2:	2310      	movs	r3, #16
 8108de4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8108de6:	2310      	movs	r3, #16
 8108de8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8108dea:	687b      	ldr	r3, [r7, #4]
 8108dec:	681b      	ldr	r3, [r3, #0]
 8108dee:	689b      	ldr	r3, [r3, #8]
 8108df0:	0e5b      	lsrs	r3, r3, #25
 8108df2:	b2db      	uxtb	r3, r3
 8108df4:	f003 0307 	and.w	r3, r3, #7
 8108df8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8108dfa:	687b      	ldr	r3, [r7, #4]
 8108dfc:	681b      	ldr	r3, [r3, #0]
 8108dfe:	689b      	ldr	r3, [r3, #8]
 8108e00:	0f5b      	lsrs	r3, r3, #29
 8108e02:	b2db      	uxtb	r3, r3
 8108e04:	f003 0307 	and.w	r3, r3, #7
 8108e08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8108e0a:	7bbb      	ldrb	r3, [r7, #14]
 8108e0c:	7b3a      	ldrb	r2, [r7, #12]
 8108e0e:	4911      	ldr	r1, [pc, #68]	; (8108e54 <UARTEx_SetNbDataToProcess+0x94>)
 8108e10:	5c8a      	ldrb	r2, [r1, r2]
 8108e12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8108e16:	7b3a      	ldrb	r2, [r7, #12]
 8108e18:	490f      	ldr	r1, [pc, #60]	; (8108e58 <UARTEx_SetNbDataToProcess+0x98>)
 8108e1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8108e1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8108e20:	b29a      	uxth	r2, r3
 8108e22:	687b      	ldr	r3, [r7, #4]
 8108e24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8108e28:	7bfb      	ldrb	r3, [r7, #15]
 8108e2a:	7b7a      	ldrb	r2, [r7, #13]
 8108e2c:	4909      	ldr	r1, [pc, #36]	; (8108e54 <UARTEx_SetNbDataToProcess+0x94>)
 8108e2e:	5c8a      	ldrb	r2, [r1, r2]
 8108e30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8108e34:	7b7a      	ldrb	r2, [r7, #13]
 8108e36:	4908      	ldr	r1, [pc, #32]	; (8108e58 <UARTEx_SetNbDataToProcess+0x98>)
 8108e38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8108e3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8108e3e:	b29a      	uxth	r2, r3
 8108e40:	687b      	ldr	r3, [r7, #4]
 8108e42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8108e46:	bf00      	nop
 8108e48:	3714      	adds	r7, #20
 8108e4a:	46bd      	mov	sp, r7
 8108e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e50:	4770      	bx	lr
 8108e52:	bf00      	nop
 8108e54:	081098e0 	.word	0x081098e0
 8108e58:	081098e8 	.word	0x081098e8

08108e5c <__errno>:
 8108e5c:	4b01      	ldr	r3, [pc, #4]	; (8108e64 <__errno+0x8>)
 8108e5e:	6818      	ldr	r0, [r3, #0]
 8108e60:	4770      	bx	lr
 8108e62:	bf00      	nop
 8108e64:	10000010 	.word	0x10000010

08108e68 <__libc_init_array>:
 8108e68:	b570      	push	{r4, r5, r6, lr}
 8108e6a:	4d0d      	ldr	r5, [pc, #52]	; (8108ea0 <__libc_init_array+0x38>)
 8108e6c:	4c0d      	ldr	r4, [pc, #52]	; (8108ea4 <__libc_init_array+0x3c>)
 8108e6e:	1b64      	subs	r4, r4, r5
 8108e70:	10a4      	asrs	r4, r4, #2
 8108e72:	2600      	movs	r6, #0
 8108e74:	42a6      	cmp	r6, r4
 8108e76:	d109      	bne.n	8108e8c <__libc_init_array+0x24>
 8108e78:	4d0b      	ldr	r5, [pc, #44]	; (8108ea8 <__libc_init_array+0x40>)
 8108e7a:	4c0c      	ldr	r4, [pc, #48]	; (8108eac <__libc_init_array+0x44>)
 8108e7c:	f000 fc8e 	bl	810979c <_init>
 8108e80:	1b64      	subs	r4, r4, r5
 8108e82:	10a4      	asrs	r4, r4, #2
 8108e84:	2600      	movs	r6, #0
 8108e86:	42a6      	cmp	r6, r4
 8108e88:	d105      	bne.n	8108e96 <__libc_init_array+0x2e>
 8108e8a:	bd70      	pop	{r4, r5, r6, pc}
 8108e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8108e90:	4798      	blx	r3
 8108e92:	3601      	adds	r6, #1
 8108e94:	e7ee      	b.n	8108e74 <__libc_init_array+0xc>
 8108e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8108e9a:	4798      	blx	r3
 8108e9c:	3601      	adds	r6, #1
 8108e9e:	e7f2      	b.n	8108e86 <__libc_init_array+0x1e>
 8108ea0:	0810992c 	.word	0x0810992c
 8108ea4:	0810992c 	.word	0x0810992c
 8108ea8:	0810992c 	.word	0x0810992c
 8108eac:	08109930 	.word	0x08109930

08108eb0 <memset>:
 8108eb0:	4402      	add	r2, r0
 8108eb2:	4603      	mov	r3, r0
 8108eb4:	4293      	cmp	r3, r2
 8108eb6:	d100      	bne.n	8108eba <memset+0xa>
 8108eb8:	4770      	bx	lr
 8108eba:	f803 1b01 	strb.w	r1, [r3], #1
 8108ebe:	e7f9      	b.n	8108eb4 <memset+0x4>

08108ec0 <siprintf>:
 8108ec0:	b40e      	push	{r1, r2, r3}
 8108ec2:	b500      	push	{lr}
 8108ec4:	b09c      	sub	sp, #112	; 0x70
 8108ec6:	ab1d      	add	r3, sp, #116	; 0x74
 8108ec8:	9002      	str	r0, [sp, #8]
 8108eca:	9006      	str	r0, [sp, #24]
 8108ecc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8108ed0:	4809      	ldr	r0, [pc, #36]	; (8108ef8 <siprintf+0x38>)
 8108ed2:	9107      	str	r1, [sp, #28]
 8108ed4:	9104      	str	r1, [sp, #16]
 8108ed6:	4909      	ldr	r1, [pc, #36]	; (8108efc <siprintf+0x3c>)
 8108ed8:	f853 2b04 	ldr.w	r2, [r3], #4
 8108edc:	9105      	str	r1, [sp, #20]
 8108ede:	6800      	ldr	r0, [r0, #0]
 8108ee0:	9301      	str	r3, [sp, #4]
 8108ee2:	a902      	add	r1, sp, #8
 8108ee4:	f000 f868 	bl	8108fb8 <_svfiprintf_r>
 8108ee8:	9b02      	ldr	r3, [sp, #8]
 8108eea:	2200      	movs	r2, #0
 8108eec:	701a      	strb	r2, [r3, #0]
 8108eee:	b01c      	add	sp, #112	; 0x70
 8108ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8108ef4:	b003      	add	sp, #12
 8108ef6:	4770      	bx	lr
 8108ef8:	10000010 	.word	0x10000010
 8108efc:	ffff0208 	.word	0xffff0208

08108f00 <__ssputs_r>:
 8108f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108f04:	688e      	ldr	r6, [r1, #8]
 8108f06:	429e      	cmp	r6, r3
 8108f08:	4682      	mov	sl, r0
 8108f0a:	460c      	mov	r4, r1
 8108f0c:	4690      	mov	r8, r2
 8108f0e:	461f      	mov	r7, r3
 8108f10:	d838      	bhi.n	8108f84 <__ssputs_r+0x84>
 8108f12:	898a      	ldrh	r2, [r1, #12]
 8108f14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8108f18:	d032      	beq.n	8108f80 <__ssputs_r+0x80>
 8108f1a:	6825      	ldr	r5, [r4, #0]
 8108f1c:	6909      	ldr	r1, [r1, #16]
 8108f1e:	eba5 0901 	sub.w	r9, r5, r1
 8108f22:	6965      	ldr	r5, [r4, #20]
 8108f24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8108f28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8108f2c:	3301      	adds	r3, #1
 8108f2e:	444b      	add	r3, r9
 8108f30:	106d      	asrs	r5, r5, #1
 8108f32:	429d      	cmp	r5, r3
 8108f34:	bf38      	it	cc
 8108f36:	461d      	movcc	r5, r3
 8108f38:	0553      	lsls	r3, r2, #21
 8108f3a:	d531      	bpl.n	8108fa0 <__ssputs_r+0xa0>
 8108f3c:	4629      	mov	r1, r5
 8108f3e:	f000 fb63 	bl	8109608 <_malloc_r>
 8108f42:	4606      	mov	r6, r0
 8108f44:	b950      	cbnz	r0, 8108f5c <__ssputs_r+0x5c>
 8108f46:	230c      	movs	r3, #12
 8108f48:	f8ca 3000 	str.w	r3, [sl]
 8108f4c:	89a3      	ldrh	r3, [r4, #12]
 8108f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8108f52:	81a3      	strh	r3, [r4, #12]
 8108f54:	f04f 30ff 	mov.w	r0, #4294967295
 8108f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108f5c:	6921      	ldr	r1, [r4, #16]
 8108f5e:	464a      	mov	r2, r9
 8108f60:	f000 fabe 	bl	81094e0 <memcpy>
 8108f64:	89a3      	ldrh	r3, [r4, #12]
 8108f66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8108f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8108f6e:	81a3      	strh	r3, [r4, #12]
 8108f70:	6126      	str	r6, [r4, #16]
 8108f72:	6165      	str	r5, [r4, #20]
 8108f74:	444e      	add	r6, r9
 8108f76:	eba5 0509 	sub.w	r5, r5, r9
 8108f7a:	6026      	str	r6, [r4, #0]
 8108f7c:	60a5      	str	r5, [r4, #8]
 8108f7e:	463e      	mov	r6, r7
 8108f80:	42be      	cmp	r6, r7
 8108f82:	d900      	bls.n	8108f86 <__ssputs_r+0x86>
 8108f84:	463e      	mov	r6, r7
 8108f86:	6820      	ldr	r0, [r4, #0]
 8108f88:	4632      	mov	r2, r6
 8108f8a:	4641      	mov	r1, r8
 8108f8c:	f000 fab6 	bl	81094fc <memmove>
 8108f90:	68a3      	ldr	r3, [r4, #8]
 8108f92:	1b9b      	subs	r3, r3, r6
 8108f94:	60a3      	str	r3, [r4, #8]
 8108f96:	6823      	ldr	r3, [r4, #0]
 8108f98:	4433      	add	r3, r6
 8108f9a:	6023      	str	r3, [r4, #0]
 8108f9c:	2000      	movs	r0, #0
 8108f9e:	e7db      	b.n	8108f58 <__ssputs_r+0x58>
 8108fa0:	462a      	mov	r2, r5
 8108fa2:	f000 fba5 	bl	81096f0 <_realloc_r>
 8108fa6:	4606      	mov	r6, r0
 8108fa8:	2800      	cmp	r0, #0
 8108faa:	d1e1      	bne.n	8108f70 <__ssputs_r+0x70>
 8108fac:	6921      	ldr	r1, [r4, #16]
 8108fae:	4650      	mov	r0, sl
 8108fb0:	f000 fabe 	bl	8109530 <_free_r>
 8108fb4:	e7c7      	b.n	8108f46 <__ssputs_r+0x46>
	...

08108fb8 <_svfiprintf_r>:
 8108fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108fbc:	4698      	mov	r8, r3
 8108fbe:	898b      	ldrh	r3, [r1, #12]
 8108fc0:	061b      	lsls	r3, r3, #24
 8108fc2:	b09d      	sub	sp, #116	; 0x74
 8108fc4:	4607      	mov	r7, r0
 8108fc6:	460d      	mov	r5, r1
 8108fc8:	4614      	mov	r4, r2
 8108fca:	d50e      	bpl.n	8108fea <_svfiprintf_r+0x32>
 8108fcc:	690b      	ldr	r3, [r1, #16]
 8108fce:	b963      	cbnz	r3, 8108fea <_svfiprintf_r+0x32>
 8108fd0:	2140      	movs	r1, #64	; 0x40
 8108fd2:	f000 fb19 	bl	8109608 <_malloc_r>
 8108fd6:	6028      	str	r0, [r5, #0]
 8108fd8:	6128      	str	r0, [r5, #16]
 8108fda:	b920      	cbnz	r0, 8108fe6 <_svfiprintf_r+0x2e>
 8108fdc:	230c      	movs	r3, #12
 8108fde:	603b      	str	r3, [r7, #0]
 8108fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8108fe4:	e0d1      	b.n	810918a <_svfiprintf_r+0x1d2>
 8108fe6:	2340      	movs	r3, #64	; 0x40
 8108fe8:	616b      	str	r3, [r5, #20]
 8108fea:	2300      	movs	r3, #0
 8108fec:	9309      	str	r3, [sp, #36]	; 0x24
 8108fee:	2320      	movs	r3, #32
 8108ff0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8108ff4:	f8cd 800c 	str.w	r8, [sp, #12]
 8108ff8:	2330      	movs	r3, #48	; 0x30
 8108ffa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 81091a4 <_svfiprintf_r+0x1ec>
 8108ffe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8109002:	f04f 0901 	mov.w	r9, #1
 8109006:	4623      	mov	r3, r4
 8109008:	469a      	mov	sl, r3
 810900a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810900e:	b10a      	cbz	r2, 8109014 <_svfiprintf_r+0x5c>
 8109010:	2a25      	cmp	r2, #37	; 0x25
 8109012:	d1f9      	bne.n	8109008 <_svfiprintf_r+0x50>
 8109014:	ebba 0b04 	subs.w	fp, sl, r4
 8109018:	d00b      	beq.n	8109032 <_svfiprintf_r+0x7a>
 810901a:	465b      	mov	r3, fp
 810901c:	4622      	mov	r2, r4
 810901e:	4629      	mov	r1, r5
 8109020:	4638      	mov	r0, r7
 8109022:	f7ff ff6d 	bl	8108f00 <__ssputs_r>
 8109026:	3001      	adds	r0, #1
 8109028:	f000 80aa 	beq.w	8109180 <_svfiprintf_r+0x1c8>
 810902c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810902e:	445a      	add	r2, fp
 8109030:	9209      	str	r2, [sp, #36]	; 0x24
 8109032:	f89a 3000 	ldrb.w	r3, [sl]
 8109036:	2b00      	cmp	r3, #0
 8109038:	f000 80a2 	beq.w	8109180 <_svfiprintf_r+0x1c8>
 810903c:	2300      	movs	r3, #0
 810903e:	f04f 32ff 	mov.w	r2, #4294967295
 8109042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8109046:	f10a 0a01 	add.w	sl, sl, #1
 810904a:	9304      	str	r3, [sp, #16]
 810904c:	9307      	str	r3, [sp, #28]
 810904e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8109052:	931a      	str	r3, [sp, #104]	; 0x68
 8109054:	4654      	mov	r4, sl
 8109056:	2205      	movs	r2, #5
 8109058:	f814 1b01 	ldrb.w	r1, [r4], #1
 810905c:	4851      	ldr	r0, [pc, #324]	; (81091a4 <_svfiprintf_r+0x1ec>)
 810905e:	f7f7 f947 	bl	81002f0 <memchr>
 8109062:	9a04      	ldr	r2, [sp, #16]
 8109064:	b9d8      	cbnz	r0, 810909e <_svfiprintf_r+0xe6>
 8109066:	06d0      	lsls	r0, r2, #27
 8109068:	bf44      	itt	mi
 810906a:	2320      	movmi	r3, #32
 810906c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8109070:	0711      	lsls	r1, r2, #28
 8109072:	bf44      	itt	mi
 8109074:	232b      	movmi	r3, #43	; 0x2b
 8109076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810907a:	f89a 3000 	ldrb.w	r3, [sl]
 810907e:	2b2a      	cmp	r3, #42	; 0x2a
 8109080:	d015      	beq.n	81090ae <_svfiprintf_r+0xf6>
 8109082:	9a07      	ldr	r2, [sp, #28]
 8109084:	4654      	mov	r4, sl
 8109086:	2000      	movs	r0, #0
 8109088:	f04f 0c0a 	mov.w	ip, #10
 810908c:	4621      	mov	r1, r4
 810908e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8109092:	3b30      	subs	r3, #48	; 0x30
 8109094:	2b09      	cmp	r3, #9
 8109096:	d94e      	bls.n	8109136 <_svfiprintf_r+0x17e>
 8109098:	b1b0      	cbz	r0, 81090c8 <_svfiprintf_r+0x110>
 810909a:	9207      	str	r2, [sp, #28]
 810909c:	e014      	b.n	81090c8 <_svfiprintf_r+0x110>
 810909e:	eba0 0308 	sub.w	r3, r0, r8
 81090a2:	fa09 f303 	lsl.w	r3, r9, r3
 81090a6:	4313      	orrs	r3, r2
 81090a8:	9304      	str	r3, [sp, #16]
 81090aa:	46a2      	mov	sl, r4
 81090ac:	e7d2      	b.n	8109054 <_svfiprintf_r+0x9c>
 81090ae:	9b03      	ldr	r3, [sp, #12]
 81090b0:	1d19      	adds	r1, r3, #4
 81090b2:	681b      	ldr	r3, [r3, #0]
 81090b4:	9103      	str	r1, [sp, #12]
 81090b6:	2b00      	cmp	r3, #0
 81090b8:	bfbb      	ittet	lt
 81090ba:	425b      	neglt	r3, r3
 81090bc:	f042 0202 	orrlt.w	r2, r2, #2
 81090c0:	9307      	strge	r3, [sp, #28]
 81090c2:	9307      	strlt	r3, [sp, #28]
 81090c4:	bfb8      	it	lt
 81090c6:	9204      	strlt	r2, [sp, #16]
 81090c8:	7823      	ldrb	r3, [r4, #0]
 81090ca:	2b2e      	cmp	r3, #46	; 0x2e
 81090cc:	d10c      	bne.n	81090e8 <_svfiprintf_r+0x130>
 81090ce:	7863      	ldrb	r3, [r4, #1]
 81090d0:	2b2a      	cmp	r3, #42	; 0x2a
 81090d2:	d135      	bne.n	8109140 <_svfiprintf_r+0x188>
 81090d4:	9b03      	ldr	r3, [sp, #12]
 81090d6:	1d1a      	adds	r2, r3, #4
 81090d8:	681b      	ldr	r3, [r3, #0]
 81090da:	9203      	str	r2, [sp, #12]
 81090dc:	2b00      	cmp	r3, #0
 81090de:	bfb8      	it	lt
 81090e0:	f04f 33ff 	movlt.w	r3, #4294967295
 81090e4:	3402      	adds	r4, #2
 81090e6:	9305      	str	r3, [sp, #20]
 81090e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 81091b4 <_svfiprintf_r+0x1fc>
 81090ec:	7821      	ldrb	r1, [r4, #0]
 81090ee:	2203      	movs	r2, #3
 81090f0:	4650      	mov	r0, sl
 81090f2:	f7f7 f8fd 	bl	81002f0 <memchr>
 81090f6:	b140      	cbz	r0, 810910a <_svfiprintf_r+0x152>
 81090f8:	2340      	movs	r3, #64	; 0x40
 81090fa:	eba0 000a 	sub.w	r0, r0, sl
 81090fe:	fa03 f000 	lsl.w	r0, r3, r0
 8109102:	9b04      	ldr	r3, [sp, #16]
 8109104:	4303      	orrs	r3, r0
 8109106:	3401      	adds	r4, #1
 8109108:	9304      	str	r3, [sp, #16]
 810910a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810910e:	4826      	ldr	r0, [pc, #152]	; (81091a8 <_svfiprintf_r+0x1f0>)
 8109110:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8109114:	2206      	movs	r2, #6
 8109116:	f7f7 f8eb 	bl	81002f0 <memchr>
 810911a:	2800      	cmp	r0, #0
 810911c:	d038      	beq.n	8109190 <_svfiprintf_r+0x1d8>
 810911e:	4b23      	ldr	r3, [pc, #140]	; (81091ac <_svfiprintf_r+0x1f4>)
 8109120:	bb1b      	cbnz	r3, 810916a <_svfiprintf_r+0x1b2>
 8109122:	9b03      	ldr	r3, [sp, #12]
 8109124:	3307      	adds	r3, #7
 8109126:	f023 0307 	bic.w	r3, r3, #7
 810912a:	3308      	adds	r3, #8
 810912c:	9303      	str	r3, [sp, #12]
 810912e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109130:	4433      	add	r3, r6
 8109132:	9309      	str	r3, [sp, #36]	; 0x24
 8109134:	e767      	b.n	8109006 <_svfiprintf_r+0x4e>
 8109136:	fb0c 3202 	mla	r2, ip, r2, r3
 810913a:	460c      	mov	r4, r1
 810913c:	2001      	movs	r0, #1
 810913e:	e7a5      	b.n	810908c <_svfiprintf_r+0xd4>
 8109140:	2300      	movs	r3, #0
 8109142:	3401      	adds	r4, #1
 8109144:	9305      	str	r3, [sp, #20]
 8109146:	4619      	mov	r1, r3
 8109148:	f04f 0c0a 	mov.w	ip, #10
 810914c:	4620      	mov	r0, r4
 810914e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8109152:	3a30      	subs	r2, #48	; 0x30
 8109154:	2a09      	cmp	r2, #9
 8109156:	d903      	bls.n	8109160 <_svfiprintf_r+0x1a8>
 8109158:	2b00      	cmp	r3, #0
 810915a:	d0c5      	beq.n	81090e8 <_svfiprintf_r+0x130>
 810915c:	9105      	str	r1, [sp, #20]
 810915e:	e7c3      	b.n	81090e8 <_svfiprintf_r+0x130>
 8109160:	fb0c 2101 	mla	r1, ip, r1, r2
 8109164:	4604      	mov	r4, r0
 8109166:	2301      	movs	r3, #1
 8109168:	e7f0      	b.n	810914c <_svfiprintf_r+0x194>
 810916a:	ab03      	add	r3, sp, #12
 810916c:	9300      	str	r3, [sp, #0]
 810916e:	462a      	mov	r2, r5
 8109170:	4b0f      	ldr	r3, [pc, #60]	; (81091b0 <_svfiprintf_r+0x1f8>)
 8109172:	a904      	add	r1, sp, #16
 8109174:	4638      	mov	r0, r7
 8109176:	f3af 8000 	nop.w
 810917a:	1c42      	adds	r2, r0, #1
 810917c:	4606      	mov	r6, r0
 810917e:	d1d6      	bne.n	810912e <_svfiprintf_r+0x176>
 8109180:	89ab      	ldrh	r3, [r5, #12]
 8109182:	065b      	lsls	r3, r3, #25
 8109184:	f53f af2c 	bmi.w	8108fe0 <_svfiprintf_r+0x28>
 8109188:	9809      	ldr	r0, [sp, #36]	; 0x24
 810918a:	b01d      	add	sp, #116	; 0x74
 810918c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109190:	ab03      	add	r3, sp, #12
 8109192:	9300      	str	r3, [sp, #0]
 8109194:	462a      	mov	r2, r5
 8109196:	4b06      	ldr	r3, [pc, #24]	; (81091b0 <_svfiprintf_r+0x1f8>)
 8109198:	a904      	add	r1, sp, #16
 810919a:	4638      	mov	r0, r7
 810919c:	f000 f87a 	bl	8109294 <_printf_i>
 81091a0:	e7eb      	b.n	810917a <_svfiprintf_r+0x1c2>
 81091a2:	bf00      	nop
 81091a4:	081098f0 	.word	0x081098f0
 81091a8:	081098fa 	.word	0x081098fa
 81091ac:	00000000 	.word	0x00000000
 81091b0:	08108f01 	.word	0x08108f01
 81091b4:	081098f6 	.word	0x081098f6

081091b8 <_printf_common>:
 81091b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81091bc:	4616      	mov	r6, r2
 81091be:	4699      	mov	r9, r3
 81091c0:	688a      	ldr	r2, [r1, #8]
 81091c2:	690b      	ldr	r3, [r1, #16]
 81091c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 81091c8:	4293      	cmp	r3, r2
 81091ca:	bfb8      	it	lt
 81091cc:	4613      	movlt	r3, r2
 81091ce:	6033      	str	r3, [r6, #0]
 81091d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 81091d4:	4607      	mov	r7, r0
 81091d6:	460c      	mov	r4, r1
 81091d8:	b10a      	cbz	r2, 81091de <_printf_common+0x26>
 81091da:	3301      	adds	r3, #1
 81091dc:	6033      	str	r3, [r6, #0]
 81091de:	6823      	ldr	r3, [r4, #0]
 81091e0:	0699      	lsls	r1, r3, #26
 81091e2:	bf42      	ittt	mi
 81091e4:	6833      	ldrmi	r3, [r6, #0]
 81091e6:	3302      	addmi	r3, #2
 81091e8:	6033      	strmi	r3, [r6, #0]
 81091ea:	6825      	ldr	r5, [r4, #0]
 81091ec:	f015 0506 	ands.w	r5, r5, #6
 81091f0:	d106      	bne.n	8109200 <_printf_common+0x48>
 81091f2:	f104 0a19 	add.w	sl, r4, #25
 81091f6:	68e3      	ldr	r3, [r4, #12]
 81091f8:	6832      	ldr	r2, [r6, #0]
 81091fa:	1a9b      	subs	r3, r3, r2
 81091fc:	42ab      	cmp	r3, r5
 81091fe:	dc26      	bgt.n	810924e <_printf_common+0x96>
 8109200:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8109204:	1e13      	subs	r3, r2, #0
 8109206:	6822      	ldr	r2, [r4, #0]
 8109208:	bf18      	it	ne
 810920a:	2301      	movne	r3, #1
 810920c:	0692      	lsls	r2, r2, #26
 810920e:	d42b      	bmi.n	8109268 <_printf_common+0xb0>
 8109210:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8109214:	4649      	mov	r1, r9
 8109216:	4638      	mov	r0, r7
 8109218:	47c0      	blx	r8
 810921a:	3001      	adds	r0, #1
 810921c:	d01e      	beq.n	810925c <_printf_common+0xa4>
 810921e:	6823      	ldr	r3, [r4, #0]
 8109220:	68e5      	ldr	r5, [r4, #12]
 8109222:	6832      	ldr	r2, [r6, #0]
 8109224:	f003 0306 	and.w	r3, r3, #6
 8109228:	2b04      	cmp	r3, #4
 810922a:	bf08      	it	eq
 810922c:	1aad      	subeq	r5, r5, r2
 810922e:	68a3      	ldr	r3, [r4, #8]
 8109230:	6922      	ldr	r2, [r4, #16]
 8109232:	bf0c      	ite	eq
 8109234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8109238:	2500      	movne	r5, #0
 810923a:	4293      	cmp	r3, r2
 810923c:	bfc4      	itt	gt
 810923e:	1a9b      	subgt	r3, r3, r2
 8109240:	18ed      	addgt	r5, r5, r3
 8109242:	2600      	movs	r6, #0
 8109244:	341a      	adds	r4, #26
 8109246:	42b5      	cmp	r5, r6
 8109248:	d11a      	bne.n	8109280 <_printf_common+0xc8>
 810924a:	2000      	movs	r0, #0
 810924c:	e008      	b.n	8109260 <_printf_common+0xa8>
 810924e:	2301      	movs	r3, #1
 8109250:	4652      	mov	r2, sl
 8109252:	4649      	mov	r1, r9
 8109254:	4638      	mov	r0, r7
 8109256:	47c0      	blx	r8
 8109258:	3001      	adds	r0, #1
 810925a:	d103      	bne.n	8109264 <_printf_common+0xac>
 810925c:	f04f 30ff 	mov.w	r0, #4294967295
 8109260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109264:	3501      	adds	r5, #1
 8109266:	e7c6      	b.n	81091f6 <_printf_common+0x3e>
 8109268:	18e1      	adds	r1, r4, r3
 810926a:	1c5a      	adds	r2, r3, #1
 810926c:	2030      	movs	r0, #48	; 0x30
 810926e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8109272:	4422      	add	r2, r4
 8109274:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8109278:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810927c:	3302      	adds	r3, #2
 810927e:	e7c7      	b.n	8109210 <_printf_common+0x58>
 8109280:	2301      	movs	r3, #1
 8109282:	4622      	mov	r2, r4
 8109284:	4649      	mov	r1, r9
 8109286:	4638      	mov	r0, r7
 8109288:	47c0      	blx	r8
 810928a:	3001      	adds	r0, #1
 810928c:	d0e6      	beq.n	810925c <_printf_common+0xa4>
 810928e:	3601      	adds	r6, #1
 8109290:	e7d9      	b.n	8109246 <_printf_common+0x8e>
	...

08109294 <_printf_i>:
 8109294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109298:	7e0f      	ldrb	r7, [r1, #24]
 810929a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810929c:	2f78      	cmp	r7, #120	; 0x78
 810929e:	4691      	mov	r9, r2
 81092a0:	4680      	mov	r8, r0
 81092a2:	460c      	mov	r4, r1
 81092a4:	469a      	mov	sl, r3
 81092a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 81092aa:	d807      	bhi.n	81092bc <_printf_i+0x28>
 81092ac:	2f62      	cmp	r7, #98	; 0x62
 81092ae:	d80a      	bhi.n	81092c6 <_printf_i+0x32>
 81092b0:	2f00      	cmp	r7, #0
 81092b2:	f000 80d8 	beq.w	8109466 <_printf_i+0x1d2>
 81092b6:	2f58      	cmp	r7, #88	; 0x58
 81092b8:	f000 80a3 	beq.w	8109402 <_printf_i+0x16e>
 81092bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81092c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 81092c4:	e03a      	b.n	810933c <_printf_i+0xa8>
 81092c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 81092ca:	2b15      	cmp	r3, #21
 81092cc:	d8f6      	bhi.n	81092bc <_printf_i+0x28>
 81092ce:	a101      	add	r1, pc, #4	; (adr r1, 81092d4 <_printf_i+0x40>)
 81092d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 81092d4:	0810932d 	.word	0x0810932d
 81092d8:	08109341 	.word	0x08109341
 81092dc:	081092bd 	.word	0x081092bd
 81092e0:	081092bd 	.word	0x081092bd
 81092e4:	081092bd 	.word	0x081092bd
 81092e8:	081092bd 	.word	0x081092bd
 81092ec:	08109341 	.word	0x08109341
 81092f0:	081092bd 	.word	0x081092bd
 81092f4:	081092bd 	.word	0x081092bd
 81092f8:	081092bd 	.word	0x081092bd
 81092fc:	081092bd 	.word	0x081092bd
 8109300:	0810944d 	.word	0x0810944d
 8109304:	08109371 	.word	0x08109371
 8109308:	0810942f 	.word	0x0810942f
 810930c:	081092bd 	.word	0x081092bd
 8109310:	081092bd 	.word	0x081092bd
 8109314:	0810946f 	.word	0x0810946f
 8109318:	081092bd 	.word	0x081092bd
 810931c:	08109371 	.word	0x08109371
 8109320:	081092bd 	.word	0x081092bd
 8109324:	081092bd 	.word	0x081092bd
 8109328:	08109437 	.word	0x08109437
 810932c:	682b      	ldr	r3, [r5, #0]
 810932e:	1d1a      	adds	r2, r3, #4
 8109330:	681b      	ldr	r3, [r3, #0]
 8109332:	602a      	str	r2, [r5, #0]
 8109334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8109338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810933c:	2301      	movs	r3, #1
 810933e:	e0a3      	b.n	8109488 <_printf_i+0x1f4>
 8109340:	6820      	ldr	r0, [r4, #0]
 8109342:	6829      	ldr	r1, [r5, #0]
 8109344:	0606      	lsls	r6, r0, #24
 8109346:	f101 0304 	add.w	r3, r1, #4
 810934a:	d50a      	bpl.n	8109362 <_printf_i+0xce>
 810934c:	680e      	ldr	r6, [r1, #0]
 810934e:	602b      	str	r3, [r5, #0]
 8109350:	2e00      	cmp	r6, #0
 8109352:	da03      	bge.n	810935c <_printf_i+0xc8>
 8109354:	232d      	movs	r3, #45	; 0x2d
 8109356:	4276      	negs	r6, r6
 8109358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810935c:	485e      	ldr	r0, [pc, #376]	; (81094d8 <_printf_i+0x244>)
 810935e:	230a      	movs	r3, #10
 8109360:	e019      	b.n	8109396 <_printf_i+0x102>
 8109362:	680e      	ldr	r6, [r1, #0]
 8109364:	602b      	str	r3, [r5, #0]
 8109366:	f010 0f40 	tst.w	r0, #64	; 0x40
 810936a:	bf18      	it	ne
 810936c:	b236      	sxthne	r6, r6
 810936e:	e7ef      	b.n	8109350 <_printf_i+0xbc>
 8109370:	682b      	ldr	r3, [r5, #0]
 8109372:	6820      	ldr	r0, [r4, #0]
 8109374:	1d19      	adds	r1, r3, #4
 8109376:	6029      	str	r1, [r5, #0]
 8109378:	0601      	lsls	r1, r0, #24
 810937a:	d501      	bpl.n	8109380 <_printf_i+0xec>
 810937c:	681e      	ldr	r6, [r3, #0]
 810937e:	e002      	b.n	8109386 <_printf_i+0xf2>
 8109380:	0646      	lsls	r6, r0, #25
 8109382:	d5fb      	bpl.n	810937c <_printf_i+0xe8>
 8109384:	881e      	ldrh	r6, [r3, #0]
 8109386:	4854      	ldr	r0, [pc, #336]	; (81094d8 <_printf_i+0x244>)
 8109388:	2f6f      	cmp	r7, #111	; 0x6f
 810938a:	bf0c      	ite	eq
 810938c:	2308      	moveq	r3, #8
 810938e:	230a      	movne	r3, #10
 8109390:	2100      	movs	r1, #0
 8109392:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8109396:	6865      	ldr	r5, [r4, #4]
 8109398:	60a5      	str	r5, [r4, #8]
 810939a:	2d00      	cmp	r5, #0
 810939c:	bfa2      	ittt	ge
 810939e:	6821      	ldrge	r1, [r4, #0]
 81093a0:	f021 0104 	bicge.w	r1, r1, #4
 81093a4:	6021      	strge	r1, [r4, #0]
 81093a6:	b90e      	cbnz	r6, 81093ac <_printf_i+0x118>
 81093a8:	2d00      	cmp	r5, #0
 81093aa:	d04d      	beq.n	8109448 <_printf_i+0x1b4>
 81093ac:	4615      	mov	r5, r2
 81093ae:	fbb6 f1f3 	udiv	r1, r6, r3
 81093b2:	fb03 6711 	mls	r7, r3, r1, r6
 81093b6:	5dc7      	ldrb	r7, [r0, r7]
 81093b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 81093bc:	4637      	mov	r7, r6
 81093be:	42bb      	cmp	r3, r7
 81093c0:	460e      	mov	r6, r1
 81093c2:	d9f4      	bls.n	81093ae <_printf_i+0x11a>
 81093c4:	2b08      	cmp	r3, #8
 81093c6:	d10b      	bne.n	81093e0 <_printf_i+0x14c>
 81093c8:	6823      	ldr	r3, [r4, #0]
 81093ca:	07de      	lsls	r6, r3, #31
 81093cc:	d508      	bpl.n	81093e0 <_printf_i+0x14c>
 81093ce:	6923      	ldr	r3, [r4, #16]
 81093d0:	6861      	ldr	r1, [r4, #4]
 81093d2:	4299      	cmp	r1, r3
 81093d4:	bfde      	ittt	le
 81093d6:	2330      	movle	r3, #48	; 0x30
 81093d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 81093dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 81093e0:	1b52      	subs	r2, r2, r5
 81093e2:	6122      	str	r2, [r4, #16]
 81093e4:	f8cd a000 	str.w	sl, [sp]
 81093e8:	464b      	mov	r3, r9
 81093ea:	aa03      	add	r2, sp, #12
 81093ec:	4621      	mov	r1, r4
 81093ee:	4640      	mov	r0, r8
 81093f0:	f7ff fee2 	bl	81091b8 <_printf_common>
 81093f4:	3001      	adds	r0, #1
 81093f6:	d14c      	bne.n	8109492 <_printf_i+0x1fe>
 81093f8:	f04f 30ff 	mov.w	r0, #4294967295
 81093fc:	b004      	add	sp, #16
 81093fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109402:	4835      	ldr	r0, [pc, #212]	; (81094d8 <_printf_i+0x244>)
 8109404:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8109408:	6829      	ldr	r1, [r5, #0]
 810940a:	6823      	ldr	r3, [r4, #0]
 810940c:	f851 6b04 	ldr.w	r6, [r1], #4
 8109410:	6029      	str	r1, [r5, #0]
 8109412:	061d      	lsls	r5, r3, #24
 8109414:	d514      	bpl.n	8109440 <_printf_i+0x1ac>
 8109416:	07df      	lsls	r7, r3, #31
 8109418:	bf44      	itt	mi
 810941a:	f043 0320 	orrmi.w	r3, r3, #32
 810941e:	6023      	strmi	r3, [r4, #0]
 8109420:	b91e      	cbnz	r6, 810942a <_printf_i+0x196>
 8109422:	6823      	ldr	r3, [r4, #0]
 8109424:	f023 0320 	bic.w	r3, r3, #32
 8109428:	6023      	str	r3, [r4, #0]
 810942a:	2310      	movs	r3, #16
 810942c:	e7b0      	b.n	8109390 <_printf_i+0xfc>
 810942e:	6823      	ldr	r3, [r4, #0]
 8109430:	f043 0320 	orr.w	r3, r3, #32
 8109434:	6023      	str	r3, [r4, #0]
 8109436:	2378      	movs	r3, #120	; 0x78
 8109438:	4828      	ldr	r0, [pc, #160]	; (81094dc <_printf_i+0x248>)
 810943a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810943e:	e7e3      	b.n	8109408 <_printf_i+0x174>
 8109440:	0659      	lsls	r1, r3, #25
 8109442:	bf48      	it	mi
 8109444:	b2b6      	uxthmi	r6, r6
 8109446:	e7e6      	b.n	8109416 <_printf_i+0x182>
 8109448:	4615      	mov	r5, r2
 810944a:	e7bb      	b.n	81093c4 <_printf_i+0x130>
 810944c:	682b      	ldr	r3, [r5, #0]
 810944e:	6826      	ldr	r6, [r4, #0]
 8109450:	6961      	ldr	r1, [r4, #20]
 8109452:	1d18      	adds	r0, r3, #4
 8109454:	6028      	str	r0, [r5, #0]
 8109456:	0635      	lsls	r5, r6, #24
 8109458:	681b      	ldr	r3, [r3, #0]
 810945a:	d501      	bpl.n	8109460 <_printf_i+0x1cc>
 810945c:	6019      	str	r1, [r3, #0]
 810945e:	e002      	b.n	8109466 <_printf_i+0x1d2>
 8109460:	0670      	lsls	r0, r6, #25
 8109462:	d5fb      	bpl.n	810945c <_printf_i+0x1c8>
 8109464:	8019      	strh	r1, [r3, #0]
 8109466:	2300      	movs	r3, #0
 8109468:	6123      	str	r3, [r4, #16]
 810946a:	4615      	mov	r5, r2
 810946c:	e7ba      	b.n	81093e4 <_printf_i+0x150>
 810946e:	682b      	ldr	r3, [r5, #0]
 8109470:	1d1a      	adds	r2, r3, #4
 8109472:	602a      	str	r2, [r5, #0]
 8109474:	681d      	ldr	r5, [r3, #0]
 8109476:	6862      	ldr	r2, [r4, #4]
 8109478:	2100      	movs	r1, #0
 810947a:	4628      	mov	r0, r5
 810947c:	f7f6 ff38 	bl	81002f0 <memchr>
 8109480:	b108      	cbz	r0, 8109486 <_printf_i+0x1f2>
 8109482:	1b40      	subs	r0, r0, r5
 8109484:	6060      	str	r0, [r4, #4]
 8109486:	6863      	ldr	r3, [r4, #4]
 8109488:	6123      	str	r3, [r4, #16]
 810948a:	2300      	movs	r3, #0
 810948c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109490:	e7a8      	b.n	81093e4 <_printf_i+0x150>
 8109492:	6923      	ldr	r3, [r4, #16]
 8109494:	462a      	mov	r2, r5
 8109496:	4649      	mov	r1, r9
 8109498:	4640      	mov	r0, r8
 810949a:	47d0      	blx	sl
 810949c:	3001      	adds	r0, #1
 810949e:	d0ab      	beq.n	81093f8 <_printf_i+0x164>
 81094a0:	6823      	ldr	r3, [r4, #0]
 81094a2:	079b      	lsls	r3, r3, #30
 81094a4:	d413      	bmi.n	81094ce <_printf_i+0x23a>
 81094a6:	68e0      	ldr	r0, [r4, #12]
 81094a8:	9b03      	ldr	r3, [sp, #12]
 81094aa:	4298      	cmp	r0, r3
 81094ac:	bfb8      	it	lt
 81094ae:	4618      	movlt	r0, r3
 81094b0:	e7a4      	b.n	81093fc <_printf_i+0x168>
 81094b2:	2301      	movs	r3, #1
 81094b4:	4632      	mov	r2, r6
 81094b6:	4649      	mov	r1, r9
 81094b8:	4640      	mov	r0, r8
 81094ba:	47d0      	blx	sl
 81094bc:	3001      	adds	r0, #1
 81094be:	d09b      	beq.n	81093f8 <_printf_i+0x164>
 81094c0:	3501      	adds	r5, #1
 81094c2:	68e3      	ldr	r3, [r4, #12]
 81094c4:	9903      	ldr	r1, [sp, #12]
 81094c6:	1a5b      	subs	r3, r3, r1
 81094c8:	42ab      	cmp	r3, r5
 81094ca:	dcf2      	bgt.n	81094b2 <_printf_i+0x21e>
 81094cc:	e7eb      	b.n	81094a6 <_printf_i+0x212>
 81094ce:	2500      	movs	r5, #0
 81094d0:	f104 0619 	add.w	r6, r4, #25
 81094d4:	e7f5      	b.n	81094c2 <_printf_i+0x22e>
 81094d6:	bf00      	nop
 81094d8:	08109901 	.word	0x08109901
 81094dc:	08109912 	.word	0x08109912

081094e0 <memcpy>:
 81094e0:	440a      	add	r2, r1
 81094e2:	4291      	cmp	r1, r2
 81094e4:	f100 33ff 	add.w	r3, r0, #4294967295
 81094e8:	d100      	bne.n	81094ec <memcpy+0xc>
 81094ea:	4770      	bx	lr
 81094ec:	b510      	push	{r4, lr}
 81094ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 81094f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 81094f6:	4291      	cmp	r1, r2
 81094f8:	d1f9      	bne.n	81094ee <memcpy+0xe>
 81094fa:	bd10      	pop	{r4, pc}

081094fc <memmove>:
 81094fc:	4288      	cmp	r0, r1
 81094fe:	b510      	push	{r4, lr}
 8109500:	eb01 0402 	add.w	r4, r1, r2
 8109504:	d902      	bls.n	810950c <memmove+0x10>
 8109506:	4284      	cmp	r4, r0
 8109508:	4623      	mov	r3, r4
 810950a:	d807      	bhi.n	810951c <memmove+0x20>
 810950c:	1e43      	subs	r3, r0, #1
 810950e:	42a1      	cmp	r1, r4
 8109510:	d008      	beq.n	8109524 <memmove+0x28>
 8109512:	f811 2b01 	ldrb.w	r2, [r1], #1
 8109516:	f803 2f01 	strb.w	r2, [r3, #1]!
 810951a:	e7f8      	b.n	810950e <memmove+0x12>
 810951c:	4402      	add	r2, r0
 810951e:	4601      	mov	r1, r0
 8109520:	428a      	cmp	r2, r1
 8109522:	d100      	bne.n	8109526 <memmove+0x2a>
 8109524:	bd10      	pop	{r4, pc}
 8109526:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810952a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810952e:	e7f7      	b.n	8109520 <memmove+0x24>

08109530 <_free_r>:
 8109530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8109532:	2900      	cmp	r1, #0
 8109534:	d044      	beq.n	81095c0 <_free_r+0x90>
 8109536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810953a:	9001      	str	r0, [sp, #4]
 810953c:	2b00      	cmp	r3, #0
 810953e:	f1a1 0404 	sub.w	r4, r1, #4
 8109542:	bfb8      	it	lt
 8109544:	18e4      	addlt	r4, r4, r3
 8109546:	f000 f913 	bl	8109770 <__malloc_lock>
 810954a:	4a1e      	ldr	r2, [pc, #120]	; (81095c4 <_free_r+0x94>)
 810954c:	9801      	ldr	r0, [sp, #4]
 810954e:	6813      	ldr	r3, [r2, #0]
 8109550:	b933      	cbnz	r3, 8109560 <_free_r+0x30>
 8109552:	6063      	str	r3, [r4, #4]
 8109554:	6014      	str	r4, [r2, #0]
 8109556:	b003      	add	sp, #12
 8109558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810955c:	f000 b90e 	b.w	810977c <__malloc_unlock>
 8109560:	42a3      	cmp	r3, r4
 8109562:	d908      	bls.n	8109576 <_free_r+0x46>
 8109564:	6825      	ldr	r5, [r4, #0]
 8109566:	1961      	adds	r1, r4, r5
 8109568:	428b      	cmp	r3, r1
 810956a:	bf01      	itttt	eq
 810956c:	6819      	ldreq	r1, [r3, #0]
 810956e:	685b      	ldreq	r3, [r3, #4]
 8109570:	1949      	addeq	r1, r1, r5
 8109572:	6021      	streq	r1, [r4, #0]
 8109574:	e7ed      	b.n	8109552 <_free_r+0x22>
 8109576:	461a      	mov	r2, r3
 8109578:	685b      	ldr	r3, [r3, #4]
 810957a:	b10b      	cbz	r3, 8109580 <_free_r+0x50>
 810957c:	42a3      	cmp	r3, r4
 810957e:	d9fa      	bls.n	8109576 <_free_r+0x46>
 8109580:	6811      	ldr	r1, [r2, #0]
 8109582:	1855      	adds	r5, r2, r1
 8109584:	42a5      	cmp	r5, r4
 8109586:	d10b      	bne.n	81095a0 <_free_r+0x70>
 8109588:	6824      	ldr	r4, [r4, #0]
 810958a:	4421      	add	r1, r4
 810958c:	1854      	adds	r4, r2, r1
 810958e:	42a3      	cmp	r3, r4
 8109590:	6011      	str	r1, [r2, #0]
 8109592:	d1e0      	bne.n	8109556 <_free_r+0x26>
 8109594:	681c      	ldr	r4, [r3, #0]
 8109596:	685b      	ldr	r3, [r3, #4]
 8109598:	6053      	str	r3, [r2, #4]
 810959a:	4421      	add	r1, r4
 810959c:	6011      	str	r1, [r2, #0]
 810959e:	e7da      	b.n	8109556 <_free_r+0x26>
 81095a0:	d902      	bls.n	81095a8 <_free_r+0x78>
 81095a2:	230c      	movs	r3, #12
 81095a4:	6003      	str	r3, [r0, #0]
 81095a6:	e7d6      	b.n	8109556 <_free_r+0x26>
 81095a8:	6825      	ldr	r5, [r4, #0]
 81095aa:	1961      	adds	r1, r4, r5
 81095ac:	428b      	cmp	r3, r1
 81095ae:	bf04      	itt	eq
 81095b0:	6819      	ldreq	r1, [r3, #0]
 81095b2:	685b      	ldreq	r3, [r3, #4]
 81095b4:	6063      	str	r3, [r4, #4]
 81095b6:	bf04      	itt	eq
 81095b8:	1949      	addeq	r1, r1, r5
 81095ba:	6021      	streq	r1, [r4, #0]
 81095bc:	6054      	str	r4, [r2, #4]
 81095be:	e7ca      	b.n	8109556 <_free_r+0x26>
 81095c0:	b003      	add	sp, #12
 81095c2:	bd30      	pop	{r4, r5, pc}
 81095c4:	10000478 	.word	0x10000478

081095c8 <sbrk_aligned>:
 81095c8:	b570      	push	{r4, r5, r6, lr}
 81095ca:	4e0e      	ldr	r6, [pc, #56]	; (8109604 <sbrk_aligned+0x3c>)
 81095cc:	460c      	mov	r4, r1
 81095ce:	6831      	ldr	r1, [r6, #0]
 81095d0:	4605      	mov	r5, r0
 81095d2:	b911      	cbnz	r1, 81095da <sbrk_aligned+0x12>
 81095d4:	f000 f8bc 	bl	8109750 <_sbrk_r>
 81095d8:	6030      	str	r0, [r6, #0]
 81095da:	4621      	mov	r1, r4
 81095dc:	4628      	mov	r0, r5
 81095de:	f000 f8b7 	bl	8109750 <_sbrk_r>
 81095e2:	1c43      	adds	r3, r0, #1
 81095e4:	d00a      	beq.n	81095fc <sbrk_aligned+0x34>
 81095e6:	1cc4      	adds	r4, r0, #3
 81095e8:	f024 0403 	bic.w	r4, r4, #3
 81095ec:	42a0      	cmp	r0, r4
 81095ee:	d007      	beq.n	8109600 <sbrk_aligned+0x38>
 81095f0:	1a21      	subs	r1, r4, r0
 81095f2:	4628      	mov	r0, r5
 81095f4:	f000 f8ac 	bl	8109750 <_sbrk_r>
 81095f8:	3001      	adds	r0, #1
 81095fa:	d101      	bne.n	8109600 <sbrk_aligned+0x38>
 81095fc:	f04f 34ff 	mov.w	r4, #4294967295
 8109600:	4620      	mov	r0, r4
 8109602:	bd70      	pop	{r4, r5, r6, pc}
 8109604:	1000047c 	.word	0x1000047c

08109608 <_malloc_r>:
 8109608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810960c:	1ccd      	adds	r5, r1, #3
 810960e:	f025 0503 	bic.w	r5, r5, #3
 8109612:	3508      	adds	r5, #8
 8109614:	2d0c      	cmp	r5, #12
 8109616:	bf38      	it	cc
 8109618:	250c      	movcc	r5, #12
 810961a:	2d00      	cmp	r5, #0
 810961c:	4607      	mov	r7, r0
 810961e:	db01      	blt.n	8109624 <_malloc_r+0x1c>
 8109620:	42a9      	cmp	r1, r5
 8109622:	d905      	bls.n	8109630 <_malloc_r+0x28>
 8109624:	230c      	movs	r3, #12
 8109626:	603b      	str	r3, [r7, #0]
 8109628:	2600      	movs	r6, #0
 810962a:	4630      	mov	r0, r6
 810962c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109630:	4e2e      	ldr	r6, [pc, #184]	; (81096ec <_malloc_r+0xe4>)
 8109632:	f000 f89d 	bl	8109770 <__malloc_lock>
 8109636:	6833      	ldr	r3, [r6, #0]
 8109638:	461c      	mov	r4, r3
 810963a:	bb34      	cbnz	r4, 810968a <_malloc_r+0x82>
 810963c:	4629      	mov	r1, r5
 810963e:	4638      	mov	r0, r7
 8109640:	f7ff ffc2 	bl	81095c8 <sbrk_aligned>
 8109644:	1c43      	adds	r3, r0, #1
 8109646:	4604      	mov	r4, r0
 8109648:	d14d      	bne.n	81096e6 <_malloc_r+0xde>
 810964a:	6834      	ldr	r4, [r6, #0]
 810964c:	4626      	mov	r6, r4
 810964e:	2e00      	cmp	r6, #0
 8109650:	d140      	bne.n	81096d4 <_malloc_r+0xcc>
 8109652:	6823      	ldr	r3, [r4, #0]
 8109654:	4631      	mov	r1, r6
 8109656:	4638      	mov	r0, r7
 8109658:	eb04 0803 	add.w	r8, r4, r3
 810965c:	f000 f878 	bl	8109750 <_sbrk_r>
 8109660:	4580      	cmp	r8, r0
 8109662:	d13a      	bne.n	81096da <_malloc_r+0xd2>
 8109664:	6821      	ldr	r1, [r4, #0]
 8109666:	3503      	adds	r5, #3
 8109668:	1a6d      	subs	r5, r5, r1
 810966a:	f025 0503 	bic.w	r5, r5, #3
 810966e:	3508      	adds	r5, #8
 8109670:	2d0c      	cmp	r5, #12
 8109672:	bf38      	it	cc
 8109674:	250c      	movcc	r5, #12
 8109676:	4629      	mov	r1, r5
 8109678:	4638      	mov	r0, r7
 810967a:	f7ff ffa5 	bl	81095c8 <sbrk_aligned>
 810967e:	3001      	adds	r0, #1
 8109680:	d02b      	beq.n	81096da <_malloc_r+0xd2>
 8109682:	6823      	ldr	r3, [r4, #0]
 8109684:	442b      	add	r3, r5
 8109686:	6023      	str	r3, [r4, #0]
 8109688:	e00e      	b.n	81096a8 <_malloc_r+0xa0>
 810968a:	6822      	ldr	r2, [r4, #0]
 810968c:	1b52      	subs	r2, r2, r5
 810968e:	d41e      	bmi.n	81096ce <_malloc_r+0xc6>
 8109690:	2a0b      	cmp	r2, #11
 8109692:	d916      	bls.n	81096c2 <_malloc_r+0xba>
 8109694:	1961      	adds	r1, r4, r5
 8109696:	42a3      	cmp	r3, r4
 8109698:	6025      	str	r5, [r4, #0]
 810969a:	bf18      	it	ne
 810969c:	6059      	strne	r1, [r3, #4]
 810969e:	6863      	ldr	r3, [r4, #4]
 81096a0:	bf08      	it	eq
 81096a2:	6031      	streq	r1, [r6, #0]
 81096a4:	5162      	str	r2, [r4, r5]
 81096a6:	604b      	str	r3, [r1, #4]
 81096a8:	4638      	mov	r0, r7
 81096aa:	f104 060b 	add.w	r6, r4, #11
 81096ae:	f000 f865 	bl	810977c <__malloc_unlock>
 81096b2:	f026 0607 	bic.w	r6, r6, #7
 81096b6:	1d23      	adds	r3, r4, #4
 81096b8:	1af2      	subs	r2, r6, r3
 81096ba:	d0b6      	beq.n	810962a <_malloc_r+0x22>
 81096bc:	1b9b      	subs	r3, r3, r6
 81096be:	50a3      	str	r3, [r4, r2]
 81096c0:	e7b3      	b.n	810962a <_malloc_r+0x22>
 81096c2:	6862      	ldr	r2, [r4, #4]
 81096c4:	42a3      	cmp	r3, r4
 81096c6:	bf0c      	ite	eq
 81096c8:	6032      	streq	r2, [r6, #0]
 81096ca:	605a      	strne	r2, [r3, #4]
 81096cc:	e7ec      	b.n	81096a8 <_malloc_r+0xa0>
 81096ce:	4623      	mov	r3, r4
 81096d0:	6864      	ldr	r4, [r4, #4]
 81096d2:	e7b2      	b.n	810963a <_malloc_r+0x32>
 81096d4:	4634      	mov	r4, r6
 81096d6:	6876      	ldr	r6, [r6, #4]
 81096d8:	e7b9      	b.n	810964e <_malloc_r+0x46>
 81096da:	230c      	movs	r3, #12
 81096dc:	603b      	str	r3, [r7, #0]
 81096de:	4638      	mov	r0, r7
 81096e0:	f000 f84c 	bl	810977c <__malloc_unlock>
 81096e4:	e7a1      	b.n	810962a <_malloc_r+0x22>
 81096e6:	6025      	str	r5, [r4, #0]
 81096e8:	e7de      	b.n	81096a8 <_malloc_r+0xa0>
 81096ea:	bf00      	nop
 81096ec:	10000478 	.word	0x10000478

081096f0 <_realloc_r>:
 81096f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81096f4:	4680      	mov	r8, r0
 81096f6:	4614      	mov	r4, r2
 81096f8:	460e      	mov	r6, r1
 81096fa:	b921      	cbnz	r1, 8109706 <_realloc_r+0x16>
 81096fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8109700:	4611      	mov	r1, r2
 8109702:	f7ff bf81 	b.w	8109608 <_malloc_r>
 8109706:	b92a      	cbnz	r2, 8109714 <_realloc_r+0x24>
 8109708:	f7ff ff12 	bl	8109530 <_free_r>
 810970c:	4625      	mov	r5, r4
 810970e:	4628      	mov	r0, r5
 8109710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109714:	f000 f838 	bl	8109788 <_malloc_usable_size_r>
 8109718:	4284      	cmp	r4, r0
 810971a:	4607      	mov	r7, r0
 810971c:	d802      	bhi.n	8109724 <_realloc_r+0x34>
 810971e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8109722:	d812      	bhi.n	810974a <_realloc_r+0x5a>
 8109724:	4621      	mov	r1, r4
 8109726:	4640      	mov	r0, r8
 8109728:	f7ff ff6e 	bl	8109608 <_malloc_r>
 810972c:	4605      	mov	r5, r0
 810972e:	2800      	cmp	r0, #0
 8109730:	d0ed      	beq.n	810970e <_realloc_r+0x1e>
 8109732:	42bc      	cmp	r4, r7
 8109734:	4622      	mov	r2, r4
 8109736:	4631      	mov	r1, r6
 8109738:	bf28      	it	cs
 810973a:	463a      	movcs	r2, r7
 810973c:	f7ff fed0 	bl	81094e0 <memcpy>
 8109740:	4631      	mov	r1, r6
 8109742:	4640      	mov	r0, r8
 8109744:	f7ff fef4 	bl	8109530 <_free_r>
 8109748:	e7e1      	b.n	810970e <_realloc_r+0x1e>
 810974a:	4635      	mov	r5, r6
 810974c:	e7df      	b.n	810970e <_realloc_r+0x1e>
	...

08109750 <_sbrk_r>:
 8109750:	b538      	push	{r3, r4, r5, lr}
 8109752:	4d06      	ldr	r5, [pc, #24]	; (810976c <_sbrk_r+0x1c>)
 8109754:	2300      	movs	r3, #0
 8109756:	4604      	mov	r4, r0
 8109758:	4608      	mov	r0, r1
 810975a:	602b      	str	r3, [r5, #0]
 810975c:	f7f8 f96c 	bl	8101a38 <_sbrk>
 8109760:	1c43      	adds	r3, r0, #1
 8109762:	d102      	bne.n	810976a <_sbrk_r+0x1a>
 8109764:	682b      	ldr	r3, [r5, #0]
 8109766:	b103      	cbz	r3, 810976a <_sbrk_r+0x1a>
 8109768:	6023      	str	r3, [r4, #0]
 810976a:	bd38      	pop	{r3, r4, r5, pc}
 810976c:	10000480 	.word	0x10000480

08109770 <__malloc_lock>:
 8109770:	4801      	ldr	r0, [pc, #4]	; (8109778 <__malloc_lock+0x8>)
 8109772:	f000 b811 	b.w	8109798 <__retarget_lock_acquire_recursive>
 8109776:	bf00      	nop
 8109778:	10000484 	.word	0x10000484

0810977c <__malloc_unlock>:
 810977c:	4801      	ldr	r0, [pc, #4]	; (8109784 <__malloc_unlock+0x8>)
 810977e:	f000 b80c 	b.w	810979a <__retarget_lock_release_recursive>
 8109782:	bf00      	nop
 8109784:	10000484 	.word	0x10000484

08109788 <_malloc_usable_size_r>:
 8109788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810978c:	1f18      	subs	r0, r3, #4
 810978e:	2b00      	cmp	r3, #0
 8109790:	bfbc      	itt	lt
 8109792:	580b      	ldrlt	r3, [r1, r0]
 8109794:	18c0      	addlt	r0, r0, r3
 8109796:	4770      	bx	lr

08109798 <__retarget_lock_acquire_recursive>:
 8109798:	4770      	bx	lr

0810979a <__retarget_lock_release_recursive>:
 810979a:	4770      	bx	lr

0810979c <_init>:
 810979c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810979e:	bf00      	nop
 81097a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81097a2:	bc08      	pop	{r3}
 81097a4:	469e      	mov	lr, r3
 81097a6:	4770      	bx	lr

081097a8 <_fini>:
 81097a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81097aa:	bf00      	nop
 81097ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81097ae:	bc08      	pop	{r3}
 81097b0:	469e      	mov	lr, r3
 81097b2:	4770      	bx	lr
